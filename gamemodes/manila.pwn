#include <a_samp>
#undef MAX_PLAYERS
#define MAX_PLAYERS 180


#pragma disablerecursion

#include <nex-ac>
#include <a_http>
#include <sscanf2>
#include <sampvoice> // VoiceChat
#include <a_mysql>
#include <BustAim>
#include <geolite>
#include <yom_buttons>
#include <foreach>
#include <sscanf2>
#include <streamer>
#include <Pawn.CMD>
#include <mSelection>
#include <callbacks>
#include <SKY> // Alias Custom Damage
#include <weapon-config> // Custom Damage
#include <selection> // New Selection Dialog
#include <tp> // Anti Teleport
#include <discord-connector>
#include <discord-command>
#include <progress2>
#define TADMIN           "1271660618600026186"
#define WADMIN     		 "1148129627584352356"

#define DiscordVerification "1271848085877952584"
#define CanPlayerCbug


// MODULE
#include "module/anims.pwn"

// --- Server Information --- //
#define SERVER_BOT       "SECURITY[BOT]"
#define VERSION          "v1.0.1a"
#define REVISION         "Manila Reality: Roleplay"VERSION""
#define SERVER_NAME     "Manila Reality Roleplay"
#define SERVER_UPDATE    ""
#define SERVER_DIALOG    "{40ffa2}"SERVER_NAME" "WHITE""VERSION""
#define SERVER_URL       "discord.io/manilareality-rp"
#define MAX_LOCATIONS                30
#define MAX_TURFS                   20
#define SERVER_COLOR  		0xffed0dff
#define FACTION_DUTY        0xeee8aaff
#define SVRCLR       		"{faf309}"
#define TEAL				"{00AAAA}"
#define WHITE				"{FFFFFF}"
#define GLOBAL              "{B8FFBC}"
#define GREY				"{AFAFAF}"
#define RED					"{FF0000}"
#define BLUE 				"{233EFA}"
#define LIME                "{B7FF00}"
#define GREEN				"{3dcc3f}"
#define ORANGE				"{FF9900}"
#define YELLOW              "{FFD200}"
#define TWEET               "{0099ff}"
#define LIGHTRED     		"{FF6347}"
#define COLOR_CYAN 			0x40FFFFFF

//#define MYSQL_HOSTNAME  "localhost"
//#define MYSQL_DATABASE  "mnl@123"
//#define MYSQL_USERNAME  "mnl@123"
//#define MYSQL_PASSWORD  "mnlmnl@123"

#define MYSQL_HOSTNAME  "localhost"
#define MYSQL_DATABASE  "rev"
#define MYSQL_USERNAME  "rev"
#define MYSQL_PASSWORD  "mnlmnl@123"



#define SERVER_MUSIC_URL ""SERVER_URL"/music"
#define SERVER_FETCH_URL ""SERVER_URL"/music"

#define SPAM_LIMIT 10 // maximum number of spacebar presses in a second before kick
#define WARN_LIMIT 3 // maximum warning before it kicks a player

new spam_count[MAX_PLAYERS]; // array to store spam count for each player
new warn_count[MAX_PLAYERS]; // array to store warn count for each player

// --- Function Shortcuts --- //
#define SCM 	SendClientMessage
#define SendInfoMessage(%0,%1)   SendClientMessageEx((%0), COLOR_WHITE, ""%1)
#define SCMA 	SendClientMessageToAll
#define SCMf 	SendClientMessageFormatted // SendClientMessage with string formats
#define SCMAf	SendClientMessageToAllFormatted // SendClientMessageToAll with string formats
#define SM 		SendMessage // SendClientMessage with string formats
#define SMA 	SendMessageToAll // SendClientMessageToAll with string formats
#define SAM 	SendAdminMessage // with string formats

#define IsPlayerAndroid(%0)                 GetPVarInt(%0, "NotAndroid") == 0


// Graffity System
#define MAX_GRAFFITIES			(100)
#define GRAFFITY_OBJECT_ID      (19482)

#define MAX_GRAFFITY_COLORS     (7)
#define MAX_GRAFFITY_BACKS      (8)
#define MAX_GRAFFITY_FONTS      (11)

#define MIN_GRAFFITY_FONTSIZE   (12)
#define MAX_GRAFFITY_FONTSIZE   (28)

#define MIN_GRAFFITY_TEXT       (4)
#define MAX_GRAFFITY_TEXT       (24)

#define GRAFFITY_DISTANCE_WARN  (10.0)
#define GRAFFITY_DESTROY_TIME   (15)

#define RIGHT_YES       "{00B200}Yes"
#define RIGHT_NO        "{CC0000}No"


#define AC_TABLE_SETTINGS "anticheat_settings" // Name of the table in the database with anti-cheat settings
#define AC_TABLE_FIELD_CODE "ac_code" // Name of the field with the anti-cheat code in the table
#define AC_TABLE_FIELD_TRIGGER "ac_code_trigger_type" // Name of the field with the value of the anti-cheat code trigger in the table
#define AC_MAX_CODES 53 // The number of anti-cheat codes (currently there are 53)
#define AC_MAX_CODE_LENGTH (3 + 1) // Maximum Characters in the anti-cheat "code" (001/002/003, etc.)
#define AC_MAX_CODE_NAME_LENGTH (33 + 1) // Maximum Characters in the full name of the cheat, for which any code is responsible

#define AC_MAX_TRIGGER_TYPES 3 // The number of anti-cheat trigger (punishment) types. As you add types of triggers (punishments), increase this value.
#define AC_MAX_TRIGGER_TYPE_NAME_LENGTH (8 + 1) // Maximum Characters in the name of the anti-cheat trigger (punishment) type

#define AC_GLOBAL_TRIGGER_TYPE_PLAYER 0
#define AC_GLOBAL_TRIGGER_TYPE_IP 1

// Types of triggers are declared by macros to make it easier to navigate in OnCheatDetected.
#define AC_CODE_TRIGGER_TYPE_DISABLED 0 // AC_CODE_TRIGGER_TYPE_DISABLED - Punishment type: Disabled
#define AC_CODE_TRIGGER_TYPE_WARNING 1 // AC_CODE_TRIGGER_TYPE_WARNING - Punishment type: Warning
#define AC_CODE_TRIGGER_TYPE_KICK 2 // AC_CODE_TRIGGER_TYPE_KICK - Punishment type: Kick

#define AC_TRIGGER_ANTIFLOOD_TIME 20 // Time for anti-flood triggers (in seconds)
#define AC_MAX_CODES_ON_PAGE 15 // Maximum number of items on the anti-cheat settings page
#define AC_DIALOG_NEXT_PAGE_TEXT ">>> Next page" // Text of the button that will display the next page of the list
#define AC_DIALOG_PREVIOUS_PAGE_TEXT "<<< Previous page" // Text of the button that will display the previous page of the list

#define MAX_DYNAMICACTORS		50
// Model Selection
#define MODEL_SELECTION_FURNITURE 	1
#define MODEL_SELECTION_LANDOBJECTS 9
#define MODEL_SELECTION_CLOTHING    2
#define MODEL_SELECTION_CLOTHING1    8
#define MODEL_SELECTION_CLOTHES     3
#define MODEL_SELECTION_CLOTHES1    7
#define MAX_SAFEZONE                50

#define MODEL_SELECTION_COPCLOTHING 4
#define MODEL_SELECTION_VEHICLES    5
#define MODEL_SELECTION_NEWBIE		6
// Defines //
#define HOUSE_COLOR			0xB2FF8EFF
#define HOUSE				"{B2FF8E}"
#define BIZ_COLOR			0x84a9ffFF
#define BIZ					"{84a9ff}"

#define COLOR_DISPATCH 		0xff4419ff
#define COLOR_WHITE 		0xFFFFFFFF
#define COLOR_SYNTAX        0xAFAFAFFF
#define COLOR_YELLOW    	0xFFFF00FF
#define COLOR_YELLOW2       0xF5DEB3FF
#define COLOR_LIGHTORANGE   0xF7A763FF
#define COLOR_AQUA        	0xCCFFFFFF
#define COLOR_GREEN         0x32CD32FF
#define COLOR_GREY          0xAFAFAFFF
#define	COLOR_GREY1    		0xE6E6E6FF
#define COLOR_GREY2 		0xC8C8C8FF
#define COLOR_GREY3 		0xAAAAAAFF
#define COLOR_GREY4 		0x8C8C8CFF
#define COLOR_GREY5 		0x6E6E6EFF
#define COLOR_LIGHTRED      0xFF6347FF
#define COLOR_ORANGE        0xFF9900FF
#define COLOR_RED           0xAA3333FF
#define COLOR_LIME 			0xB7FF00AA
#define COLOR_RCRPOOC 		0x003d75FF
#define COLOR_HUNT          0xFF42CFFF
#define COLOR_PURPLE        0xC2A2DAFF
#define COLOR_NEWBIE        0x7DAEFFFF
#define COLOR_BLUE          0x233EFAFF
#define COLOR_ROYALBLUE     0x9999FFFF
#define COLOR_ARM     		0x467a26FF
#define COLOR_DOCTOR        0xFF8282FF
#define COLOR_DARKGREEN     0x00AA00FF
#define COLOR_VIP           0x6a86b5FF
#define COLOR_WALKIETALKIE  0xB2EBE0FF
#define COLOR_GLOBAL 		0xB8FFBCFF
#define COLOR_STATS         0xFFFF91AA
#define COLOR_LIGHTGREEN    0x74AF7AFF
#define COLOR_ADMINCHAT     0xED6464FF
#define COLOR_SAMP          0xA9C4E4FF
#define COLOR_GENERAL3		0x00D900C8
#define COLOR_TEAL 			0x1effc4ff
#define COLOR_OFFWHITE 		0xF5DEB3AA
#define COLOR_DARKAQUA 		0x83BFBFAA
#define COLOR_REALRED       0xFF0000FF
#define COLOR_FAMILYCHAT    0x00FC50FF
#define COLOR_FACTIONCHAT  	0xFC4900FF
// ---------------------------------------
#define MAX_LISTED_NUMBERS          50
#define MAX_LISTED_OBJECTS          100
#define MAX_LISTED_STATIONS         50
#define MAX_SPLIT_LENGTH            70
// ---------------------------------------
#define MAX_ATMS                    50
#define MAX_VENDORS                 50
#define MAX_MDC                     50
#define MAX_BAR	                    50
#define MAX_PGARAGE                 85
#define MAX_SURGERY                 50
#define MAX_REPORTS         		7
#define MAX_HOUSES          		1500
#define MAX_CCTVS 					100
#define MAX_CCTVMENUS 				10  // This number should be MAX_CCTVS divided by 10
#define MAX_GARAGES         		1000
#define MAX_BUSINESSES      		200
#define MAX_ENTRANCES       		500
#define MAX_SPAWNED_VEHICLES        5
#define MAX_SPEED_CAMERAS           50
#define MAX_GATES					200
#define MAX_MAPOBJECTS				1000
#define MAX_PLAYER_CLOTHING     	10
#define MAX_ANTICHEAT_WARNINGS   	5
#define MAX_FACTIONS                20
#define MAX_LOCKERS					100
#define MAX_FACTION_RANKS           20
#define MAX_FACTION_SKINS           15
#define MAX_FACTION_DIVISIONS       20
#define MAX_DEPLOYABLES             50
#define MAX_FIRES                   100
#define MAX_GANGS                   20

#define MAX_LANDS                   20
#define MAX_GANG_SKINS              10
#define MAX_POINTS                  15
// Dynamic Actor - Tokyo
#define MAX_DYNAMIC_ACTORS      1000

#define MAX_BANK_ROBBERS            7
#define MAX_BIZ_ROBBERS        	    5
#define MAX_YACHT_ROBBER            7
#define MAX_GRAFFITI_POINTS         200
// ---------------------------------------
#define THREAD_LOOKUP_BANS          1
#define THREAD_LOOKUP_ACCOUNT    	2
#define THREAD_ACCOUNT_REGISTER     3
#define THREAD_PROCESS_LOGIN        4
#define THREAD_COUNT_FLAGS          5
#define THREAD_TRACE_IP             6
#define THREAD_LIST_CHANGES         8
#define THREAD_LIST_HELPERS         9
#define THREAD_LOAD_HOUSES          10
#define THREAD_LIST_TENANTS         11
#define THREAD_LOAD_GARAGES         13
#define THREAD_LOAD_BUSINESSES      14
#define THREAD_LOAD_ENTRANCES       15
#define THREAD_LOAD_CLOTHING        16
#define THREAD_LOAD_FACTIONS        17
#define THREAD_LOAD_FACTIONRANKS    18
#define THREAD_LOAD_FACTIONSKINS    19
#define THREAD_LOAD_FACTIONPAY      20
#define THREAD_LOAD_DIVISIONS       21
#define THREAD_LOAD_LANDS           22
#define THREAD_LOAD_LANDOBJECTS     23
#define THREAD_LOAD_GANGS           24
#define THREAD_LOAD_GANGRANKS       25
#define THREAD_LOAD_GANGSKINS       26
#define THREAD_LOAD_POINTS          27
#define THREAD_LOAD_TURFS           28
#define THREAD_HOUSE_INFORMATION    29
#define THREAD_COUNT_TEXTS          33
#define THREAD_VIEW_TEXTS           34
#define THREAD_LIST_VEHICLES        35
#define THREAD_FACTION_ROSTER       36
#define THREAD_GANG_ROSTER          37
#define THREAD_VIEW_PHONEBOOK       38
#define THREAD_LOAD_VEHICLES        46
#define THREAD_GANG_INFORMATION     47
#define THREAD_OFFLINE_IP           48
#define THREAD_CHECK_REFERRAL       49
#define THREAD_REWARD_REFERRER      50
#define THREAD_LIST_FLAGGED         51
#define THREAD_CAR_STORAGE          52
#define THREAD_LIST_ADMINS	        54
#define	THREAD_DMVRELEASE			55
#define THREAD_UPDATE_LANDLABELS    56
#define THREAD_COUNT_LANDOBJECTS    57
#define THREAD_SELL_LANDOBJECT      58
#define THREAD_DUPLICATE_LANDOBJECT 76
#define THREAD_CLEAR_LANDOBJECTS    77
#define THREAD_LAND_INFORMATION     78
#define THREAD_LIST_LANDOBJECTS     79
#define THREAD_DUPLICATED_OBJECT    80
#define THREAD_LAND_MAINMENU        81
#define	THREAD_LOAD_ATMS            59
#define THREAD_LOAD_VENDORS         60
#define THREAD_LOAD_LOCKERS			61
#define THREAD_LOAD_BAR		        62
#define THREAD_LOAD_PGARAGE         63
#define THREAD_LOAD_SURGERY         64
#define THREAD_BUYPARTS				65
#define THREAD_LOAD_MDC             66
#define THREAD_LOAD_FURNITURE       67
#define THREAD_COUNT_FURNITURE     	68
#define THREAD_SELL_FURNITURE       69
#define THREAD_CLEAR_FURNITURE      70
#define THREAD_APPLICATIONS			71
#define THREAD_D_APPLICATIONS		72
#define THREAD_TRACE_IPX            73
#define THREAD_LOAD_LOCATIONS       74
#define THREAD_LOAD_ACTOR 			75
#define THREAD_LIST_PGVEHICLES_VALLEY 82
#define THREAD_LOAD_SAFEZONE           83
#define RED_TEAM    0
#define BLUE_TEAM   1
// ---------------------------------------
#define strcpy(%0,%1)   strcat(((%0[0] = 0), %0), %1)
#define percent(%0,%1)  floatround((float((%0)) / 100) * (%1))
#define Random(%0,%1)   (random((%1) - (%0)) + (%0))
// ---------------------------------------
#undef SSCANF_Join
#undef SSCANF_Leave




// Tune System
#define COLOR_LIGHTBLUE 0x91C8FF//Server text messages
#define COLOR_GROUPTALK 0x87CEEBAA  // SKYBLUE
#define COLOR_MENU 0xFFFFFFAA		// WHITE (FFFFFF) menu's (/help)
#define COLOR_SYSTEM_PM 0x66CC00AA	// LIGHT GREEN
#define COLOR_SYSTEM_PW 0xFFFF33AA	// YELLOW

#define area_bet_sabong -120.6263,38.1559,902.2829

#define TYPE_TPLUMBERJACKRUNTIMER 3
//===========================[Firework]=========================================
/*#define RocketHeight 50
#define TYPE_COUNTDOWN 2000
#define TYPE_LAUNCH 2001
#define TYPE_EXPLODE 2002
#define MAX_FIREWORKS 100
#define FireworkSpread 30




new tacoOjb[MAX_PLAYERS];

new Rocket[MAX_PLAYERS];
new RocketLight[MAX_PLAYERS];
new RocketSmoke[MAX_PLAYERS];
new RocketExplosions[MAX_PLAYERS];*/

new zone_paintball[2];
new pbNext;

new SV_GSTREAM:factionstream[MAX_FACTIONS] = { SV_NULL, ... };
new SV_GSTREAM:gangstream[MAX_GANGS] = { SV_NULL, ... };
new SV_LSTREAM:lstream[MAX_PLAYERS] = { SV_NULL, ... };
new SV_GSTREAM:callstream[MAX_PLAYERS] = { SV_NULL, ... };

new VehicleObject[MAX_VEHICLES] = {-1, ...};
new emsonly;
new emseveryone;
new emsdoor1;
new emsdoor2;
new emsdoor3;
new emsdoor4;

new pddoor1;
new pddoor2;
new pddoor3;
new pddoor4;
new pddoor5;

new mechdoor1;

// DISCORD BOT ACTIVITY
new DCC_Role: REMDCROLE;	
new DCC_Role: DCROLE;	
new DCC_Guild: GUILDSVR;

new VehicleGoods[MAX_VEHICLES];
new PlayerHasCrate[MAX_PLAYERS];
new pickup777;
new pickup888;
new sweeparea;
new hparea;
new loadarea;
new loadwoodarea;
new PlayerText:PlayerCashTD[MAX_PLAYERS][3];
//mugshot
new PlayerText:MugshotTD0[MAX_PLAYERS];
new PlayerText:MugshotTD1[MAX_PLAYERS];
new PlayerText:MugshotTD2[MAX_PLAYERS];
new PlayerText:MugshotTD3[MAX_PLAYERS];
new PlayerText:MugshotTD4[MAX_PLAYERS];
new PlayerText:MugshotTD5[MAX_PLAYERS];
new PlayerText:MugshotTD6[MAX_PLAYERS];
new PlayerText:MugshotTD7[MAX_PLAYERS];
new PlayerText:MugshotTD8[MAX_PLAYERS];

new TazerHolster[MAX_PLAYERS];
//==============================================================================
new Float:PlayerVehHP[MAX_PLAYERS];
new aimWarnings[MAX_PLAYERS];

new AC_CODE[AC_MAX_CODES][AC_MAX_CODE_LENGTH] =
{
    "000",
    "001",
    "002",
    "003",
    "004",
    "005",
    "006",
    "007",
    "008",
    "009",
    "010",
    "011",
    "012",
    "013",
    "014",
    "015",
    "016",
    "017",
    "018",
    "019",
    "020",
    "021",
    "022",
    "023",
    "024",
    "025",
    "026",
    "027",
    "028",
    "029",
    "030",
    "031",
    "032",
    "033",
    "034",
    "035",
    "036",
    "037",
    "038",
    "039",
    "040",
    "041",
    "042",
    "043",
    "044",
    "045",
    "046",
    "047",
    "048",
    "049",
    "050",
    "051",
    "052"
};

new AC_CODE_NAME[AC_MAX_CODES][AC_MAX_CODE_NAME_LENGTH] =
{
    {"AirBreak (onfoot)"},
    {"AirBreak (in vehicle)"},
    {"Teleport (onfoot)"},
    {"Teleport (in vehicle)"},
    {"Teleport (into/between vehicles)"},
    {"Teleport (vehicle to player)"},
    {"Teleport (pickups)"},
    {"FlyHack (onfoot)"},
    {"FlyHack (in vehicle)"},
    {"SpeedHack (onfoot)"},
    {"SpeedHack (in vehicle)"},
    {"Health hack (in vehicle)"},
    {"Health hack (onfoot)"},
    {"Armour hack"},
    {"Money hack"},
    {"Weapon hack"},
    {"Ammo hack (add)"},
    {"Ammo hack (infinite)"},
    {"Special actions hack"},
    {"GodMode from bullets (onfoot)"},
    {"GodMode from bullets (in vehicle)"},
    {"Invisible hack"},
    {"Lagcomp-spoof"},
    {"Tuning hack"},
    {"Parkour mod"},
    {"Quick turn"},
    {"Rapid fire"},
    {"FakeSpawn"},
    {"FakeKill"},
    {"Pro Aim"},
    {"CJ run"},
    {"CarShot"},
    {"CarJack"},
    {"UnFreeze"},
    {"AFK Ghost"},
    {"Full Aiming"},
    {"Fake NPC"},
    {"Reconnect"},
    {"High ping"},
    {"Dialog hack"},
    {"Sandbox"},
    {"Invalid version"},
    {"Rcon hack"},
    {"Tuning crasher"},
    {"Invalid seat crasher"},
    {"Dialog crasher"},
    {"Attached object crasher"},
    {"Weapon Crasher"},
    {"Connects to one slot"},
    {"Flood callback functions"},
    {"Flood change seat"},
    {"DDos"},
    {"NOP's"}
};

new AC_TRIGGER_TYPE_NAME[AC_MAX_TRIGGER_TYPES][AC_MAX_TRIGGER_TYPE_NAME_LENGTH] =
{
    {"Disabled"},
    {"Warning"},
    {"Kick"}
};

new
    AC_CODE_TRIGGER_TYPE[AC_MAX_CODES],
    AC_CODE_TRIGGERED_COUNT[AC_MAX_CODES] = {0, ...};

new
    pAntiCheatLastCodeTriggerTime[MAX_PLAYERS][AC_MAX_CODES],
    pAntiCheatSettingsPage[MAX_PLAYERS char],
    pAntiCheatSettingsMenuListData[MAX_PLAYERS][AC_MAX_CODES_ON_PAGE],
    pAntiCheatSettingsEditCodeId[MAX_PLAYERS];


//=================================================


new pTazerReplace[MAX_PLAYERS];
new pTazerAmmo[MAX_PLAYERS];
new pBeanbagReplace[MAX_PLAYERS];
new pBeanbagAmmo[MAX_PLAYERS];
new Text:Textdraw2;
//LOCKER NEAR
new Text:Locker_Near0;
new Text:Locker_Near1;
new Text:Locker_Near2;
new Text:Locker_Near3;
new Text:Locker_Near4;
new Text:Locker_Near5;

//PAYCHECK
new Text:Paycheck_0;	
new Text:Paycheck_1;
new Text:Paycheck_2;
new Text:Paycheck_3;
new Text:Paycheck_4;
new Text:Paycheck_5;
new Text:Paycheck_6;
new Text:Paycheck_7;
new Text:Paycheck_8;
new Text:Paycheck_9;
new Text:Paycheck_10;
new Text:Paycheck_11;

//ERROR
new Text:Error_0;
new Text:Error_1;
new Text:Error_2;
new Text:Error_3;


// Sabong
new PlayerBar:SabongBarTD[MAX_PLAYERS][2];
new PlayerText:SabongTD[MAX_PLAYERS][15];

//HUNGER -BY TRITON_LUX#6696

new PlayerText:paypalTD[MAX_PLAYERS];
new PlayerText:HungerTD0[MAX_PLAYERS];
new PlayerText:HungerTD1[MAX_PLAYERS];
new PlayerText:HungerTD2[MAX_PLAYERS];
new PlayerText:HungerTD3[MAX_PLAYERS];
new PlayerText:HungerTD4[MAX_PLAYERS];
new PlayerText:HungerTD5[MAX_PLAYERS];
new PlayerText:HungerTD6[MAX_PLAYERS];
new PlayerText:HungerTD7[MAX_PLAYERS];
new PlayerText:HungerTD8[MAX_PLAYERS];
new PlayerText:HungerTD9[MAX_PLAYERS];
new PlayerText:HungerTD10[MAX_PLAYERS];
new PlayerText:HungerTD11[MAX_PLAYERS];

//HOUSE_NEAR
new Text:HouseNear_0;
new Text:HouseNear_1;
new Text:HouseNear_2;
new Text:HouseNear_3;
new Text:HouseNear_4;
new Text:HouseNear_5;
new Text:HouseNear_6;
new Text:HouseNear_8;
new PlayerText:HouseNear_7[MAX_PLAYERS];

//HOUSE_OWNED
new Text:HouedOnear_0;
new Text:HouedOnear_1;
new Text:HouedOnear_2;
new Text:HouedOnear_3;
new Text:HouedOnear_4;
new Text:HouedOnear_5;
new Text:HouedOnear_6;
new Text:HouedOnear_8;
new PlayerText:HouedOnear_7[MAX_PLAYERS];

// PHONE TEXTDRAWS
new Text:PhoneTD[22];
new Text:PhoneBankTD[6];

new bool:HeadShotSystem;
new DoubleSalary;

// Paintball
new PaintballTimer1, PaintballTimer2;
new pbscore1[MAX_PLAYERS] = 0;

//CameraInfo
new PlayerText:customHUD[MAX_PLAYERS][3];
new TotalCCTVS;
new CameraName[MAX_CCTVS][32];
new Float:CCTVLA[MAX_PLAYERS][3];  //CCTV LookAt
new Float:CCTVLAO[MAX_CCTVS][3];
new Float:CCTVRadius[MAX_PLAYERS]; //CCTV Radius
new Float:CCTVDegree[MAX_PLAYERS] = 0.0;
new Float:CCTVCP[MAX_CCTVS][4]; //CCTV CameraPos
new CurrentCCTV[MAX_PLAYERS] = -1;
//TextDraw
new Text:TD;
//Menus:
new Menu:CCTVMenu[MAX_CCTVMENUS];
new MenuType[MAX_CCTVMENUS];
new TotalMenus;
new PlayerMenu[MAX_PLAYERS];
enum LP
{
	Float:LX,
	Float:LY,
	Float:LZ,
	Float:LA,
	LInterior

}
new LastPos[MAX_PLAYERS][LP];
new KeyTimer[MAX_PLAYERS];

// Dynamic Actor - By Tokyo
enum ActorEnum
{
    ActorID,
    DynamicActor,
    ActorAnim,
	ActorSkin,
	ActorExists,
	ActorName[40],
	Float:ActorPosX,
	Float:ActorPosY,
	Float:ActorPosZ,
	Float:ActorPosA,
	ActorWorld,
	Text3D:ActorText
};
new ActorInfo[MAX_DYNAMIC_ACTORS][ActorEnum];


/*
#if defined Christmas
	#else
		new CarolLyrics[MAX_PLAYERS] = 0;
#endif*/

new tsstring[2048], psstring[2048];
new Sliding[MAX_PLAYERS];

// Anti CBUG
#define PRESSED(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
new bool:pCBugging[MAX_PLAYERS];
new ptmCBugFreezeOver[MAX_PLAYERS];
new ptsLastFiredWeapon[MAX_PLAYERS];

// Tune system
static pvehicleid[MAX_PLAYERS];
static pmodelid[MAX_PLAYERS];

/*new pRobHouse[MAX_PLAYERS] = 0;
new robHouseTimer[MAX_PLAYERS];*/
// Fixed /RELOG CMD
new ReconnectIP[MAX_PLAYERS][32];
new bool: Reconnecting[MAX_PLAYERS];
#define MAX_IP_SIZE 32

new gScriptObject[MAX_OBJECTS char];
new Toll = 1;
new Border3;
new Border33;
new Border333;
new Border4;
new Border44;
new Border444;
new Border1;
new Border11;
new Border111;
new Border2;
new Border22;
new Border222;
new Border5;
new Border55;
new Border555;
new Border6;
new Border66;
new Border666;
new Border7;
new Border77;
new Border777;
new Border8;
new Border88;
new Border888;
new Border9;
new Border99;
new Border999;
new Border0;
new Border00;
new Border000;

// Actor Job Represent
new ActorJob[14];
new casino1,
	casino2,
	casino3,
	casino4;
	
// Blood Effects
new Text:Blood[9];
new Timer[MAX_PLAYERS];
new bool:pBlood[MAX_PLAYERS] = {false,...};

// Tutorial8
// Login Textdraws
new Text:LogoTD[3];

// Callsigns
new Text3D:vehicleCallsign[MAX_VEHICLES] = {Text3D:INVALID_3DTEXT_ID, ...};

// Label
new Text3D:PlayerLabel[MAX_PLAYERS];
new Text3D:InjuredLabel[MAX_PLAYERS];

// VIP Callsigns
new Text3D:DonatorCallSign[MAX_VEHICLES] = {Text3D:INVALID_3DTEXT_ID, ...};

// Car windows
new CarWindows[MAX_VEHICLES] = 0;

// Quiz System
new quizQuestion[72];
new quizAnswer[32];
new CreateQuiz = -1;
new tweet[60];
// Seatbelt
new ExBJck[MAX_PLAYERS];

// ELM Lights
new Flasher[MAX_VEHICLES] = 0;
new FlasherState[MAX_VEHICLES];
new FlashTimer;

// Mask System
new Maskara[MAX_PLAYERS];
new MaskaraID[MAX_PLAYERS] = 0;

// LUMBERJACK
new bool:lumberman[MAX_PLAYERS];
new Lumber1[MAX_PLAYERS] = 0;
new Lumbered[MAX_PLAYERS] = -1;
new Lumberedx[MAX_PLAYERS] = -1;
new LumberJacking[MAX_PLAYERS] = -1;

// Blindfold
new pBlind[MAX_PLAYERS] = 1; //
new Text:Blind;

// Graffiti
enum graffitiData {
	graffitiID,
	graffitiExists,
	Float:graffitiPos[4],
	graffitiIcon,
	graffitiObject,
	graffitiColor,
	graffitiText[64]
};
new GraffitiData[MAX_GRAFFITI_POINTS][graffitiData];

enum speedData {
	speedID,
	speedExists,
	Float:speedPos[4],
	Float:speedRange,
	Float:speedLimit,
	speedObject,
	Text3D:speedText3D,
	sMapIcon
};
new SpeedData[MAX_SPEED_CAMERAS][speedData];

enum gateData {
	gateID,
	gateExists,
	gateOpened,
	gateModel,
	Float:gateSpeed,
	Float:gateRadius,
	gateTime,
	Float:gatePos[6],
	gateInterior,
	gateWorld,
	Float:gateMove[6],
	gateLinkID,
	gateFaction,
	gatePass[32],
	gateTimer,
	gateObject
};
new GateData[MAX_GATES][gateData];

enum objectData {
	mobjID,
	mobjExists,
	mobjModel,
	Float:mobjPos[6],
	mobjInterior,
	mobjWorld,
	mobjname,
	Text3D:mobjname2,
	mobjObject
};
new ObjectData[MAX_MAPOBJECTS][objectData];

// Poll System
new PollVoted[MAX_PLAYERS];
new PollY;
new PollOn;
new PollN;

// PBounds
new pointboundaries[9];
new ShowingBounds[MAX_PLAYERS];

// Graffity System

enum GRAFFITY_DATA
{
    gID,
    gText[MAX_GRAFFITY_TEXT],
    gColor,
    gBackColor,
    gFont[16],
    gFontSize,
    gBold,
    gCreator[32],
    gCreateDate[64],
    Float:gPosX,
    Float:gPosY,
    Float:gPosZ,
    Float:gRotX,
    Float:gRotY,
    Float:gRotZ,
    Float:gGotoX,
    Float:gGotoY,
    Float:gGotoZ,
    gInterior,
    gVW,
    gAccepted,
    gAcceptor[32],
    gAcceptDate[64],
    gON,
    gObject,
    gEditing
}
new E_GRAFFITY[MAX_GRAFFITIES][GRAFFITY_DATA];

enum GRAFFITY_COLOR_DATA
{
    color_id,
    color_name[16],
    color_data,
    color_dlg[16],
};
new GRAFFITY_COLOR[MAX_GRAFFITY_COLORS][GRAFFITY_COLOR_DATA] = //Ñ†Ð²ÐµÑ‚Ð°
{
    {0, "White",    0xFFFFFFFF, "{FFFFFF}"},
    {1, "Red",      0xFFFF0000, "{FF0000}"},
    {2, "Yellow",   0xFFFFFF00, "{FFFF00}"},
    {3, "Green",    0xFF33CC33, "{33CC33}"},
    {4, "Blue",     0xFF33CCFF, "{33CCFF}"},
    {5, "Orange",   0xFFFFA500, "{FFA500}"},
    {6, "Blue",     0xFF1394BF, "{1394BF}"}
};

enum GRAFFITY_BACK_DATA
{
    color_id,
    color_name[16],
    color_data,
    color_dlg[16],
};
new GRAFFITY_BACK[MAX_GRAFFITY_BACKS][GRAFFITY_BACK_DATA] = 
{
    {0, "No",       0,          "{CC0000}"},
    {1, "White",    0xFFFFFFFF, "{FFFFFF}"},
    {2, "Red",      0xFFFF0000, "{FF0000}"},
    {3, "Yellow",   0xFFFFFF00, "{FFFF00}"},
    {4, "Green",    0xFF33CC33, "{33CC33}"},
    {5, "Blue",     0xFF33CCFF, "{33CCFF}"},
    {6, "Orange",   0xFFFFA500, "{FFA500}"},
    {7, "Blue",     0xFF1394BF, "{1394BF}"}
};

enum GRAFFITY_FONT_DATA
{
    font_id,
    font_name[16],
};
new GRAFFITY_FONT[MAX_GRAFFITY_FONTS][GRAFFITY_FONT_DATA] =
{
    {0, "Arial"},
    {1, "Calibri"},
    {2, "Courier New"},
    {3, "Georgia"},
    {4, "Impact"},
    {5, "Tahoma"},
    {6, "Times New Roman"},
    {7, "Verdana"},
    {8, "Segoe Print"},
    {9, "Segoe Script"},
    {10, "Segoe UI"}
};

forward Float:GetDistanceBetweenPlayers(p1,p2);
public Float:GetDistanceBetweenPlayers(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

forward pollend(playerid);
public pollend(playerid)
{
	new string[128];
    format(string, sizeof(string), "The Poll has ended, "WHITE"%d{FF6347} people voted "WHITE"No{FF6347}, "WHITE"%d{FF6347} people voted "WHITE"Yes{FF6347}.", PollN, PollY);
    SCMA(COLOR_LIGHTRED, string);
    PollOn = 0;
	return 1;
}

// Enums //

enum
{
    DIALOG_NONE,
	DIALOG_REGISTER = 1,
	DIALOG_CONFIRMPASS,
	DIALOG_CARSTORAGE,
	DIALOG_VALLEY,
	DIALOG_PAINTBALL,
 	DIALOG_DMVRELEASE,
 	DIALOG_BUYPARTS,
	DIALOG_LOGIN,
	DIALOG_GENDER,
	DIALOG_AGE,
	DIALOG_REFERRAL,
	DIALOG_QUIZ_APP,
	DIALOG_QUIZ_CONFIRM,

	DIALOG_BUYFURNITURE1,
	DIALOG_BUYFURNITURE2,
	
	DIALOG_REFUNDED,
		
	DIALOG_INTERIORS,
	GatePass,
	DIALOG_GRAFFITICOLOR,
	DIALOG_GRAFFITITEXT,
	DIALOG_BUY,
	DIALOG_EDITBUY,
	DIALOG_EDITBUY2,
	DIALOG_BUYCLOTHES,
	DIALOG_PICKLOAD,
	DIALOG_UNREADTEXTS,
	DIALOG_VENDOR,
	DIALOG_PHARMACY,
	DIALOG_BAR,
	DIALOG_NEWBIE,
	DIALOG_ATM,
	DIALOG_BWITHDRAW,
	DIALOG_BTRANSFER,
	DIALOG_BTRANSFER1,
	DIALOG_BDEPOSIT,
 	DIALOG_ATM_TRANSFER,
	DIALOG_ATM_TRANSFER2,
	DIALOG_ATMDEPOSIT,
	DIALOG_ATMWITHDRAW,
	DIALOG_LOTTERY,
	DIALOG_PROXY,
	DIALOG_CHECKPOST,
	DIALOG_VOICECHAT,
	
	// Graffity System
	Graffity_CE,
	Graffity_CE_Done,
	Graffity_CE_Text,
	Graffity_CE_Color,
	Graffity_CE_BackColor,
	Graffity_CE_Font,
	Graffity_CE_FontSize,
	Graffity_CE_Cancel,
	GraffityList,
	
	DIALOG_TYPE_MAIN,
	DIALOG_TYPE_PAINTJOBS,
	DIALOG_TYPE_COLORS,
	DIALOG_TYPE_EXHAUSTS,
	DIALOG_TYPE_FBUMPS,
	DIALOG_TYPE_RBUMPS,
	DIALOG_TYPE_ROOFS,
	DIALOG_TYPE_SPOILERS,
	DIALOG_TYPE_SIDESKIRTS,
	DIALOG_TYPE_BULLBARS,
	DIALOG_TYPE_WHEELS,
	DIALOG_TYPE_CSTEREO,
	DIALOG_TYPE_HYDRAULICS,
	DIALOG_TYPE_NITRO,
	DIALOG_TYPE_LIGHTS,
	DIALOG_TYPE_HOODS,
	DIALOG_TYPE_VENTS,
	DIALOG_HMEMBERS,
	DIALOG_CHANGEPASS,
	DIALOG_ADDRESS,
	DIALOG_ADD1,
	DIALOG_SABONG,
	DIALOG_BET_MERON,
	DIALOG_BET_WALA,
	DIALOG_ADD2,
	DIALOG_BUYCLOTHINGTYPE,
	DIALOG_BUYCLOTHINGTYPE1,
	DIALOG_BUYCLOTHING,
	DIALOG_BUYCLOTHING1,
	DIALOG_CLOTHING,
	DIALOG_CLOTHINGMENU,
	DIALOG_CLOTHINGEDIT,
	DIALOG_CLOTHINGBONE,
	DIALOG_EDITMOBILE,
	DIALOG_CPOSX,
	DIALOG_CPOSY,
	DIALOG_CPOSZ,
	DIALOG_CROTX,
	DIALOG_CROTY,
	DIALOG_CROTZ,
	DIALOG_CSCALEX,
	DIALOG_CSCALEY,
	DIALOG_CSCALEZ,
	DIALOG_BUYVEHICLE,
	DIALOG_BUYVEHICLENEW,
	DIALOG_BUYVEHICLE2,
	DIALOG_SPAWNCAR,
    DIALOG_DESPAWNCAR,
    DIALOG_FINDCAR,
	DIALOG_BIZINTERIOR,
 	DIALOG_FACTIONLOCKER,
	DIALOG_FACTIONEQUIPMENT,
	DIALOG_FACTIONSKINS,
	DIALOG_HITMANCLOTHES,
	DIALOG_MDC,
	DIALOG_MDCWANTED,
	DIALOG_MDCPLAYER1,
	DIALOG_MDCPLAYER2,
	DIALOG_MDCCHARGES,
	DIALOG_PLAYERLOOKUP,
	DIALOG_VEHICLELOOKUP1,
 	DIALOG_VEHICLELOOKUP2,
 	DIALOG_FACTIONPAY1,
 	DIALOG_FACTIONPAY2,
 	
   	DIALOG_PHONE,
	DIALOG_PHONE_CALL,
	DIALOG_PHONE_SMS,
	DIALOG_PHONE_SMS_TEXT,
	DIALOG_CONTACTS,
	DIALOG_CONTACTS_ADD,
	DIALOG_CONTACTS_NUMBER,
	DIALOG_CONTACTS_OPTIONS,
	
	DIALOG_TYPE,	
	DIALOG_DTOC,
	DIALOG_CTOD,
	
 	DIALOG_PHONEBOOK,
 	DIALOG_CREATEZONE,
  	DIALOG_KIOSK,

	// WEAPON
	DIALOG_WEP_TEST,
	DIALOG_WEP_QUESTION_1,
	DIALOG_WEP_QUESTION_2,
	DIALOG_WEP_QUESTION_3,
	DIALOG_WEP_QUESTION_4,
	DIALOG_WEP_QUESTION_5,
	DIALOG_WEP_QUESTION_6,
	DIALOG_WEP_QUESTION_7,
	DIALOG_WEP_QUESTION_8,
	
	ANTICHEAT_SETTINGS,
	ANTICHEAT_EDIT_CODE,

 	DIALOG_HOSPITAL,
 	DIALOG_HOSPITAL2,
  	DIALOG_MECHANIC,
 	DIALOG_LANDBUILD1,
 	DIALOG_LANDBUILD2,
 	DIALOG_LANDBUILDTYPE,
 	DIALOG_LANDMENU,
 	DIALOG_LANDUPGRADE,
 	DIALOG_LANDEDITOBJECT,
 	DIALOG_LANDOBJECTMENU,
 	DIALOG_LANDOBJECTS,
 	DIALOG_LANDSELLALL,
 	DIALOG_LANDPERMS,
 	DIALOG_CONFIRMZONE,
 	DIALOG_USECOOKIES,
 	DIALOG_MP3PLAYER,
 	DIALOG_MP3MUSIC,
 	DIALOG_MP3RADIO,
 	DIALOG_MP3URL,
 	DIALOG_MP3RADIOGENRES,
 	DIALOG_MP3RADIOSUBGENRES,
 	DIALOG_MP3RADIORESULTS,
 	DIALOG_MP3RADIOSEARCH,
	DIALOG_PAWNSHOP,
	DIALOG_VOCUHER,
 	DIALOG_GCLOTHES,
 	DIALOG_GANGSTASH,
 	DIALOG_GANGSTASHWEAPONS1,
	DIALOG_GANGSTASHWEAPONS2,
	DIALOG_GANGSTASHDRUGS1,
	DIALOG_GANGSTASHDRUGS2,
	DIALOG_GANGSTASHAMMO1,
	DIALOG_GANGSTASHAMMO2,
	DIALOG_GANGSTASHMATS,
	DIALOG_GANGSTASHCASH,
 	DIALOG_GANGDEPOSIT,
 	DIALOG_GANGWITHDRAW,
	DIALOG_BIND,
	DIALOG_BIND1,
	DIALOG_BIND1A,
	DIALOG_BIND1B,
	DIALOG_BIND1C,
	DIALOG_BIND1D,
	DIALOG_BIND2,
	DIALOG_BIND2A,
	DIALOG_BIND2B,
	DIALOG_BIND2C,
	DIALOG_BIND2D,
 	DIALOG_GANGSKINS,
 	DIALOG_GANGFINDCAR,
 	DIALOG_GANGPOINTSHOP,
 	DIALOG_GANGARMSDEALER,
 	DIALOG_GANGARMSWEAPONS,
 	DIALOG_GANGARMSAMMO,
 	DIALOG_GANGAMMOBUY,
 	DIALOG_GANGARMSEDIT,
 	DIALOG_GANGARMSPRICES,
 	DIALOG_GANGARMSPRICE,
 	DIALOG_GANGARMSDEPOSITMATS,
	DIALOG_GANGARMSWITHDRAWMATS,
	DIALOG_GANGAMMODEPOSITS,
	DIALOG_GANGAMMODEPOSIT,
	DIALOG_GANGAMMOWITHDRAWS,
	DIALOG_GANGAMMOWITHDRAW,
	DIALOG_GANGDRUGDEALER,
	DIALOG_GANGDRUGSHOP,
	DIALOG_GANGDRUGEDIT,
	DIALOG_GANGDRUGPRICES,
	DIALOG_GANGDRUGPRICE,
	DIALOG_GANGDRUGBUY,
	DIALOG_GANGDRUGDEPOSITS,
	DIALOG_GANGDRUGDEPOSIT,
	DIALOG_GANGDRUGWITHDRAWS,
	DIALOG_GANGDRUGWITHDRAW,
	DIALOG_FREENAMECHANGE,
	DIALOG_REMOVEPVEH,
 	DIALOG_BIZMENU,
	DIALOG_BIZNAME,
	DIALOG_BIZFEE,
	DIALOG_BIZSAFE,
	DIALOG_WITHDRAW,
	DIALOG_DEPOSIT,
	DIALOG_MESSAGE,
	DIALOG_BIZLOCK,
	DIALOG_POINTLIST,
	DIALOG_TURFLIST,
	DIALOG_NEWBWELCOME,
	//DIALOG_HELP,
	DIALOG_BUYSTORE,
	DIALOG_TOP,
	DIALOG_INV,
	DIALOG_RULES,
	DIALOG_BOXLIST,
	DIALOG_BUYBMARKET,
	DIALOG_REPORTITITON,
	DIALOG_MECHRECEIPT,
	DIALOG_LOCATE,
	DIALOG_LOCATELIST1,
	DIALOG_TACOSHOP,
	DIALOG_LOCATELIST2,
	DIALOG_LOCATELIST3,
	DIALOG_LOCATELISTC,
	DIALOG_LOCATETURFS,
	DIALOG_LOCATEPOINTS,
	/*#if defined Christmas
	#else
		DIALOG_CAROL,
	#endif*/
	DIALOG_CREATEQUIZ,
	DIALOG_VIPLOCKER,
	DIALOG_VIPLOCKER1,
	DIALOG_VIPLOCKER2,

	DIALOG_TWEET,
}
enum
{
	VEHICLE_ENGINE,
	VEHICLE_LIGHTS,
	VEHICLE_ALARM,
	VEHICLE_DOORS,
	VEHICLE_BONNET,
	VEHICLE_BOOT,
	VEHICLE_OBJECTIVE
};

enum
{
	STASH_CAPACITY_CASH,
	STASH_CAPACITY_MATERIALS,
	STASH_CAPACITY_WEED,
	STASH_CAPACITY_COCAINE,
	STASH_CAPACITY_METH,
 	STASH_CAPACITY_PAINKILLERS,
 	STASH_CAPACITY_HPAMMO,
	STASH_CAPACITY_POISONAMMO,
	STASH_CAPACITY_FMJAMMO,
	STASH_CAPACITY_WEAPONS
};

enum
{
 	E_OBJECT_TYPE,
	E_OBJECT_INDEX_ID,
	E_OBJECT_EXTRA_ID,
	E_OBJECT_3DTEXT_ID,
 	E_OBJECT_OPENED,
 	E_OBJECT_WEAPONID,
 	E_OBJECT_AMMO,
 	E_OBJECT_FACTION,
 	E_OBJECT_DONATOR,
 	E_OBJECT_FURNITURE,
	E_OBJECT_LAND,
 	E_OBJECT_X,
 	E_OBJECT_Y,
 	E_OBJECT_Z
};

enum
{
	EDIT_FURNITURE_PREVIEW = 1,
	EDIT_FURNITURE,
	E_OBJECT_WEAPON,
	EDIT_LAND_OBJECT_PREVIEW,
	EDIT_LAND_OBJECT,
	EDIT_LAND_GATE_MOVE
};

enum
{
	EDIT_OBJECT_PREVIEW,
	EDIT_CLOTHING_PREVIEW,
	EDIT_CLOTHING,
	EDIT_COP_CLOTHING,
};

enum
{
	DEPLOY_SPIKESTRIP,
	DEPLOY_CONE,
	DEPLOY_ROADBLOCK,
	DEPLOY_BARREL,
	DEPLOY_FLARE
};

enum
{
 	BUSINESS_STORE,
 	BUSINESS_GUNSHOP,
 	BUSINESS_CLOTHES,
 	BUSINESS_GYM,
 	BUSINESS_RESTAURANT,
 	BUSINESS_AGENCY,
 	BUSINESS_BARCLUB,
};

enum
{
	ILLEGAL_GUNS,
	ILLEGAL_DRUGS,
	ILLEGAL_MATS
};
enum
{
	FACTION_NONE,
	FACTION_POLICE,
	FACTION_MEDIC,
	FACTION_NEWS,
	FACTION_GOVERNMENT,
	FACTION_HITMAN,
	FACTION_FEDERAL,
	FACTION_MECHANIC,
	FACTION_DOC,
	FACTION_SHERIFF,
	FACTION_TACO,
};

enum
{
	JOB_NONE = -1,
	JOB_FOODPANDA,
	JOB_COURIER,
	JOB_FISHERMAN,
	JOB_BODYGUARD,
	JOB_ARMSDEALER,
	JOB_MINER,
	JOB_TAXIDRIVER,
	JOB_DRUGDEALER,
	JOB_LAWYER,
	JOB_DETECTIVE,
	JOB_GARBAGEMAN,
	JOB_FORKLIFTER,
	JOB_LUMBERJACK,
	JOB_Demolition,
	JOB_SWEEPER,
	JOB_BUTCHER,
};

enum
{
	CHECKPOINT_NONE = 0,
	CHECKPOINT_FOODPANDA,
	CHECKPOINT_GARBAGE,
	CHECKPOINT_TEST,
	CHECKPOINT_MINING,
	CHECKPOINT_BUTCHER,
 	CHECKPOINT_Demolition,
	CHECKPOINT_PACKAGE,
	CHECKPOINT_MATS,
	CHECKPOINT_DRUGS,
	CHECKPOINT_HOUSE,
	CHECKPOINT_ROBBERY,
	CHECKPOINT_BROBBERY,
	CHECKPOINT_ROBBERYBIZ,
	CHECKPOINT_ROBBERYHOUSE,
	CHECKPOINT_FORKLIFTER,
	CHECKPOINT_LUMBERJACKRUN,
	CHECKPOINT_MISC,
	CHECKPOINT_CLEANING
};

enum
{
	HANGUP_DROPPED,
	HANGUP_USER
};

enum
{
	MUSIC_NONE,
	MUSIC_MP3PLAYER,
	MUSIC_BOOMBOX,
	MUSIC_VEHICLE
};

enum
{
	ITEM_WEAPON,
	ITEM_SELLGUN,
	ITEM_MATERIALS,
	ITEM_WEED,
	ITEM_COCAINE,
	ITEM_METH,
	ITEM_PAINKILLERS,
	ITEM_SEEDS,
	ITEM_EPHEDRINE,
	ITEM_CASH,
	ITEM_HPAMMO,
	ITEM_BACKPACK,
	ITEM_POISONAMMO,
	ITEM_FMJAMMO
};

enum
{
	CAPACITY_MATERIALS,
	CAPACITY_WEED,
	CAPACITY_COCAINE,
	CAPACITY_METH,
	CAPACITY_PAINKILLERS,
	CAPACITY_SEEDS,
	CAPACITY_EPHEDRINE,
 	CAPACITY_HPAMMO,
	CAPACITY_POISONAMMO,
	CAPACITY_FMJAMMO
};

enum
{
  	LIMIT_HOUSES,
	LIMIT_BUSINESSES,
	LIMIT_GARAGES,
	LIMIT_VEHICLES
};

enum
{
	POINT_DRUGFACTORY = 1,
	POINT_DRUGDEN,
	POINT_CRACKHOUSE,
	POINT_AUTOEXPORT,
	POINT_FUEL,
	POINT_MATPICKUP1,
	POINT_MATPICKUP2,
	POINT_MATFACTORY1,
	POINT_MATFACTORY2
};

enum
{
	GANGWEAPON_VEST,
	GANGWEAPON_9MM,
	GANGWEAPON_SDPISTOL,
	GANGWEAPON_DEAGLE,
	GANGWEAPON_SHOTGUN,
	GANGWEAPON_SPAS12,
	GANGWEAPON_SAWNOFF,
	GANGWEAPON_TEC9,
	GANGWEAPON_UZI,
	GANGWEAPON_MP5,
	GANGWEAPON_AK47,
	GANGWEAPON_M4,
	GANGWEAPON_RIFLE,
	GANGWEAPON_SNIPER,
	GANGWEAPON_MOLOTOV
};

enum
{
	TAG_NORMAL,
	TAG_ADMIN,
	TAG_HELPER,
	TAG_AFK
};

enum
{
	AMMO_HP,
	AMMO_POISON,
	AMMO_FMJ
};

enum
{
	AMMOTYPE_NORMAL,
	AMMOTYPE_HP,
	AMMOTYPE_POISON,
	AMMOTYPE_FMJ
};

enum
{
	ZONETYPE_LAND = 1,
	ZONETYPE_TURF,
	ZONETYPE_SAFEZONE
};

enum
{
 	HOSPITAL_COUNTY= 1,
	HOSPITAL_ALLSAINTS = 2
};



enum pEnum
{
	PlayerText:pText[8],
	PlayerText:pTextx[3],
 	pPassword[129],
	pUsername[MAX_PLAYER_NAME],
	pDiscordName[DCC_USERNAME_SIZE],
	pDiscordTag[DCC_ID_SIZE],
	pVerifySystem,	
	pVerifyCode,
	pVoiceChat,
	pID,
	pLogged,
	pKicked,
	pLoginTries,
	pSetup,
	pChatstyle,
	pGender,
	pTutorial,
	pTutorialTimer,
	pAge,
	pSkin,
	pCarrying,
	pCarry,
	Float:pCameraX,
	Float:pCameraY,
	Float:pCameraZ,
	Float:pPosX,
	Float:pPosY,
	Float:pPosZ,
	Float:pPosA,
	pInterior,
	pWorld,
	pCash,
	pBank,
 	pPaycheck,
	pLevel,
	pJobStage,
	pAdvertWarnings,
	pEXP,
	pSkates,
	pSkateObj,
	bool:pSkating,
	bool:pSkateAct,
	

    pCBug,
	pFirework,
	pFirstSpawn,
	pMinutes,
	pPriority,
	pPriorityTimer,
 	pHours,
	pAdmin,
	pCrowbar,
	pHelmet,
	pUseHelmet,
	pReportTimer,
	pAdrian,
	pAdrianTimer,
	pGraffiti,
	pGraffitiTime,
	pGraffitiColor,
	pGraffitiText[64 char],
	pEditGraffiti,
	pEditGate,
	pEditmObject,
	pAdminName[MAX_PLAYER_NAME],
	pHelper,
	Float:pHealth,
	Float:pArmor,
	pWarnings,
	pComserv,
	pInjured,
	pBrokenLeg,
	pBleedingTimer,
	pBleeding,
	pBleed,
	pBleedTimer,
	pBrokenHP,
	pAntiFall,
	pHospital,
	Float:pSpawnHealth,
	Float:pSpawnArmor,
	pBedType,
	pBedTime,
	pJailType,
	pJailTime,
	pNewbieMuted,
	pAMute,
	pAMCount,
	pHelpMuted,
	pAdMuted,
	pLiveMuted,
	pGlobalMuted,
	pReportMuted,
	pReportWarns,
	pFightStyle,
	pProductChoose,
	pRobbingBiz,
	pAccent[16],
	pDirtyCash,
	pPhone,
	pLottery,
	pJob,
	pSecondJob,
	pCrimes,
	pArrested,
	pWantedLevel,
	pMaterials,
	pPot,
	pCrack,
	pMeth,
	pPainkillers,
	pSeeds,
	pEphedrine,
	pMuriaticAcid,
	pBakingSoda,
	pCigar,
	pFood,
	pDrink,
	pVest,
	bool:pEquipVest,
	pEquipTimer,
	pWalkieTalkie,
	pChannel,
	pRentingHouse,
	pSpraycans,
	pCigars,
	pBoombox,
	pMP3Player,
	pPhonebook,
	pFishingRod,
	pFishingBait,
	pFishWeight,
	pCourierSkill,
	pFishingSkill,
	pGuardSkill,
	pWeaponSkill,
	pLawyerSkill,
	pSmugglerSkill,
	pDetectiveSkill,
	pToggleTextdraws,
	pToggleAtm,
	pToggleOOC,
	pTogglePhone,
	pToggleAdmin,
	pToggleHelper,
	pToggleNewbie,
	pToggleWT,
	pRefunded,
	pToggleRadio,
	pToggleVIP,
	pToggleMusic,
	pToggleFaction,
	pToggleGang,
	pToggleNews,
	pToggleGlobal,
	pToggleCam,
	pToggleHUD,
	pCarLicense,
	pWeaponLicense,
	pVIPgun1,
	pVIPgun2,
	pVIPgun3,
	pVIPgun4,
	pVIPgun5,
	pDonator,
	pBind[128],
	pBind2[128],
	pBind3[128],
	pBind4[128],
	pBind5[128],
	pBind6[128],
	pBind7[128],
	pBind8[128],
	pBind9[128],
	pBind10[128],	
	pVIPTime,
	pRobCooldown,
	pVIPCooldown,
	pWeapons[13],
	pTempWeapons[13],
	pAmmo[13],
	pFaction,
	pFactionRank,
	pGang,
	pGangRank,
	pDivision,
	pContracted,
	pContractBy[MAX_PLAYER_NAME],
	pBombs,
	pCompletedHits,
	pFailedHits,
	pReports,
	pNewbies,
	pHelpRequests,
	pSpeedometer, // (1) KM/H (2) MPH
	pFactionMod,
	pAdminPersonnel,
	pGangMod,
	pBanAppealer,
	pEventMod,
	pDev,
	pPotPlanted,
	pPotTime,
	pPotGrams,
	Float:pPotX,
	Float:pPotY,
	Float:pPotZ,
	Float:pPotA,
	pInventoryUpgrade,
	pAddictUpgrade,
	pTraderUpgrade,
	pAssetUpgrade,
	pHPAmmo,
	pPoisonAmmo,
	pFMJAmmo,
	pAmmoType,
	pAmmoWeapon,
	pDMWarnings,
	pWeaponRestricted,
	pFgRestricted,
	pReferralUID,
	pWatch,
	pPhoneSMS,
	pCallTimer,
	pCalling,
	pGPS,
	pPrisonedBy[MAX_PLAYER_NAME],
	pPrisonReason[128],
	pClothes,
	pShowTurfs,
	
	pShowLands,
	pWatchOn,
	pGPSOn,
	pDoubleXP,
	pCourierCooldown,
 	pPizzaCooldown,
	pDeathCooldown,
	pDetectiveCooldown,
 	pGasCan,
 	pRope,
 	pVoucher1, //car
 	pVoucher2, //gun
 	pVoucher3, //vip diamond
 	pVoucher4, //vip silver
 	pVoucher5, // vip bronze
 	pTotalPatients,
	pTotalFires,
 	pBlindfold,
  	pLastAM,
	pLastChop,
  	pLastCharity,
	pLastReport,
	pLastDamage,
	pLastNewbie,
	pLastRequest,
	pLastPay,
	pLastRepair,
	pLastRefuel,
	pLastDrug,
	pLastDefend,
	pLastSell,
	pLastEnter,
 	pLastPress,
	pLastDeath,
	pLastDesync,
	pLastGlobal,
	pLastPizza,
	pLastStuck,
	pLastUpdate,
	pLastLoad,
	pLastBet,
	pLastClean,
	pSpectating,
 	pAdminDuty,
	pActiveReport,
	pHospitalTime,
	pHospitalType,
	pInsurance,
	pListen,
	pPMListen,
	pJoinedEvent,
	pPaintball,
	pPaintballTeam,
	pDueling,
	pSabong,
	pSabongBet,
	pDueling1,
	pEventTeam,
	pAwaitingClothing,
	pFreezeTimer,
	pHelpRequest[128],
	pAcceptedHelp,
	pHouseOffer,
	pHouseOffered,
	pHousePrice,
	pGarageOffer,
	pGarageOffered,
	pGaragePrice,
	pBizOffer,
	pBizOffered,
	pBizPrice,
	pVestOffer,
	pVestPrice,
	pRepairKit,
	pParts,
	pCarOffer,
	pCarOffered,
	pcARPrice,
	pFactionOffer,
	pFactionOffered,
	pGangOffer,
	pGangOffered,
	pCarryOffer,
	
	pLandOffer,
	pLandOffered,
	pLandPrice,
	
	pTacoOffer,
	pTacoOffered,
	pTacoPrice,
		
	pJuiceOffer,
	pJuiceOffered,
	pJuicePrice,
	
	pBurritoOffer,
	pBurritoOffered,
	pBurritoPrice,
	
	pComboOffer,
	pComboOffered,
	pComboPrice,
	
	pFriskOffer,	
	pLocOffer,
	pTicketOffer,
	pTicketPrice,
	pLiveOffer,
	pLiveBroadcast,
	pShakeOffer,
	pShakeType,
	pSellOffer,
	pAllianceOffer,
	pSellType,
	pSellExtra,
	pSellPrice,
	pDefendOffer,
	pDefendPrice,
	pDiceOffer,
	pDiceOffer1,
	pSendRob,
	pDiceBet,
	pInviteOffer,
	pInviteHouse,
	pRobberyOffer,
	pRobberyOffer1,
	pFurnitureIndex,
	pObjectLand,
	pFurnitureHouse,
	pFurniturePerms,
	pLandPerms,
	pClothingIndex,
	pEditType,
	pEditObject,
	pCategory,
	pSelected,
	pFactionEdit,
	pPrice,
	pPizzas,
	pPizzaTime,
	Float:pDistance,
	pCP,
	pShipment,
	pWoodment,
	pIllegalCargo,
	pFishTime,
	pUsedBait,
	pSmuggleMats,
	pSmuggleDrugs,
	pRefuel,
	pRefuelAmount,
	pCallLine,
	pCallStage,
	Float:pAFKPos[6],
	pAFK,
	pAFKTime,
	pLoopAnim,
	pDrivingTest,
	pTestVehicle,
	pTestCP,
	pSweeping,
	pSweepTime,
	pSweepEarnings,
	pCleanTime,
	pTacotime,
	pBurritotime,	
	pTacoEattime,
	pBurritoEattime,
	pJuicetime,
	pMiningTime,
	pMiningRock,
	pButcherTime,
	pButcherMeat,
	pDemolitionTime,
	pDemolition,
	Text3D:pSpecialTag,
	pTagType,
	pVIPColor,
	pAdminColor,
	pTaxiFare,
	pTaxiPassenger,
	pTaxiBill,
	pTaxiTime,
	pSkinSelected,
	pDuty,
	pMask,

	///////////
	pDrivingFail,
	pDrivingWait,
 	pDrivingTime,
	pDrivingStart,
	pWeaponTest,
	pDrivingCP,
	pDrivingScore,
	
	
	pSpeedTime,
	pBackup,
	pTazer,
	pTazedTime,
	pBeanbag,
	pBeanbagTime,
	pCuffed,
	pTied,
	pGarbage,
	pDraggedBy,
	pMeat,
	pTaco,
	pJuice,
	
	pEmptyCan,
	pBurrito,
 	pBandage,
 	pFirstaid,
 	pMedkit,
	pDelivered,
	pPlantedBomb,
	Float:pBombX,
	Float:pBombY,
	Float:pBombZ,
	pBombObject,
	pContractTaken,
	pPage,
	pVendorTime,
	pBarTime,
	pSpamTime,
	pMuted,
	Text3D:pBoomboxText,
	pBoomboxPlaced, // BOOMBOX
	pBoomboxObject,
	pBoomboxListen,
	pBoomboxURL[128],
	Float:pMinX, // LAND CREATION
	Float:pMinY,
	Float:pMaxX,
	Float:pMaxY,
	Float:plX,
	Float:plY,
	Float:plZ,
	pZoneType,
	pZonePickups[4],
	pZoneID,
	pZoneCreation, //
	pLandCost,
	pTurfType,
	pTurfName[32],
	pMenuType,
	pGenre[32],
	pSubgenre[32],
	pSearch,
	pMusicType,
	pStreamType,
	pNameChange[MAX_PLAYER_NAME],
	pFreeNamechange,
	pChosenLevel,
	pChosenSkin,
 	pPassport,
	pPassportName[MAX_PLAYER_NAME],
	pPassportLevel,
	pPassportSkin,
	pPassportPhone,
	pVehicleKeys,
	pCurrentWeapon,
	pCurrentAmmo,
 	pCurrentVehicle,
 	pVehicleCount,
 	pACWarns,
 	pACTime,
 	pACFired,
 	pACAmmo,
 	pArmorTime,
 	pPotObject,
 	pPickPlant,
 	pPickTime,
 	pCookMeth,
 	pCookTime,
 	pCookGrams,
 	pDrugsUsed,
 	pDrugsTime,
 	pBandana,
 	pGangCar,
 	pCapturingPoint,
 	pCaptureTime,
 	Float:pPointX,
 	Float:pPointY,
 	Float:pPointZ,
	pWatchingIntro, // Server Intro
	pHunger,
	pHungerTimer,
	pThirst,
	pThirstTimer,
	pStress,
	pStressTimer,

	//Voice
	pDisconnect,
	pWhisper,
	pNormal,
	pShout,
	pFactionRadio,
	pGangRadio,
	Text3D:aMeID,
	aMeStatus,

 	pLoginCamera,
 	pSmuggleTime,
 	pDealerGang,
 	pPoisonTime,
 	pJetpack,
	pTextFrom,
	pWhisperFrom,
	pMechanicCall,
	pTaxiCall,
	pEmergencyCall,
	pEmergencyType,
	pEmergency[128],
 	pClip,
 	pReloading,
 	pFindTime,
 	pFindPlayer,
 	pRobCash,
 	pLootTime,
 	pToggleWhisper,
 	pBL,
	pBackpack,
	pRemoveFrom,
	bpWearing,
	bpCash,
	bpMaterials,
	bpPot,
	bpCrack,
	bpMeth,
	bpPainkillers,
	bpWeapons[15],
	bpHPAmmo,
	bpPoisonAmmo,
	bpFMJAmmo,
	pAcceptedEMS,
	pDiamonds,
    pFormerAdmin,
    pCustomTitle[64],
	pCustomTColor,
	pMarriedTo,
	pMarriedName[MAX_PLAYER_NAME],
	pMarriageOffer,
	pRareTime,
	pEngine,
	pChatAnim, // - newvars
	pToolkit,
	pRobbingHouse,

	/*#if defined Christmas
	#else
		pLastCarolTime,
		pLastHouseCarol,
		pCandy,
	#endif*/

	pFlashlight,
	pUsedFlashlight,

	pApproved
};

enum rEnum
{
	rExists,
	rReporter,
	rAccepted,
	rHandledBy,
	rText[128],
	rTime
};

enum eventEnum
{
	eReady,
	eStarted,
	eLocked,
	eType, // (1) DM (2) TDM (3) Race
	eJoinText[128],
	Float:eHealth,
	Float:eArmor,
	Float:ePosX[2],
	Float:ePosY[2],
	Float:ePosZ[2],
	Float:ePosA[2],
	eInterior,
	eWorld,
	eWeapons[5],
	eSkin[2],
	eCS,
	eQS,
	eHeal,
	eNext
};
enum chopEnum
{
	cTime,
};
enum robEnum
{
	rTime,
};
enum robEnum1
{
	rTime1,
};
enum prioEnum
{
	prioType, // (1) Open (2) Hold (3) Countdown
	prioTimer
};
new PriorityInfo[prioEnum];
enum robberyEnum
{
	rTime,
	rPlanning,
	rStarted,
	rStolen,
	rRobbers[MAX_BANK_ROBBERS],
	rObjects[4],
	Text3D:rText[5]
};

enum robberyEnum1
{
	rTime1,
	rPlanning1,
	rStarted1,
	rStolen1,
	rRobbers1[MAX_BIZ_ROBBERS],
	rObjects1[4],
	Text3D:rText1[5]
};
enum YachtRobberyEnum
{
	yTime,
	yPlanning,
	yStarted,
	YchtStarted,
	yStolen,
	yRobbers[MAX_YACHT_ROBBER],
	yObjects[2],
	Text3D:yText[5]
};

enum mEnum
{
	Float:mPosX,
	Float:mPosY,
	Float:mPosZ,
	Float:mPosA,
	mInterior,
	mWorld
};

enum hEnum
{
	hExists,
	hID,
	hMapIcon,
	hOwnerID,
	hDescription[128],
	hOwner[MAX_PLAYER_NAME],
	hType,
	hPrice,
	hRentPrice,
	hLevel,
	hLocked,
	hTimestamp,
	Float:hPosX,
	Float:hPosY,
	Float:hPosZ,
	Float:hPosA,
	Float:hIntX,
	Float:hIntY,
	Float:hIntZ,
	Float:hIntA,
	hInterior,
	hWorld,
	hOutsideInt,
	hOutsideVW,
	hCash,
	hMaterials,
	hPot,
	hCrack,
	hMeth,
	hPainkillers,
	hWeapons[10],
	hHPAmmo,
	hPoisonAmmo,
	hFMJAmmo,
	hLabels,
	hPickup,
	hRobbing,
	hRobbed,
	Text3D:hText
};

enum gEnum
{
	gExists,
	gID,
	gOwnerID,
	gOwner[MAX_PLAYER_NAME],
	gType,
	gPrice,
	gLocked,
	gTimestamp,
	Float:gPosX,
	Float:gPosY,
	Float:gPosZ,
	Float:gPosA,
	Float:gExitX,
	Float:gExitY,
	Float:gExitZ,
	Float:gExitA,
	gWorld,
	gPickup,
	Text3D:gText
};
enum bEnum
{
	bExists,
	bID,
	bOwnerID,
	bDescription[128],
	bOwner[MAX_PLAYER_NAME],
	bName[56],
	bMessage[128],
	bType,
	bPrice,
	bEntryFee,
	bLocked,
	bTimestamp,
	Float:bPosX,
	Float:bPosY,
	Float:bPosZ,
	Float:bPosA,
	Float:bIntX,
	Float:bIntY,
	Float:bIntZ,
	Float:bIntA,
	bInterior,
	bWorld,
	bOutsideInt,
	bOutsideVW,
	bCash,
	bProducts,
	bPickup,
	bPrices[25],
	bMapIcon,
	bRobbed,
	bRobbing,
	Text3D:bText
};

enum eEnum
{
	eExists,
	eID,
	eOwnerID,
	eOwner[MAX_PLAYER_NAME],
	eName[40],
	eIcon,
	eLocked,
	Float:eRadius,
	Float:ePosX,
	Float:ePosY,
	Float:ePosZ,
	Float:ePosA,
	Float:eIntX,
	Float:eIntY,
	Float:eIntZ,
	Float:eIntA,
	eInterior,
	eWorld,
	eOutsideInt,
	eOutsideVW,
	eAdminLevel,
	eFactionType,
	eVIP,
	eVehicles,
	eFreeze,
	ePassword[64],
	eLabel,
	ePickup,
 	eMapIconID,
 	eMapIcon,
	Text3D:eText
};

enum cEnum
{
	cExists,
	cID,
	cName[32],
	cModel,
	cBone,
	cAttached,
	Float:cPosX,
	Float:cPosY,
	Float:cPosZ,
	Float:cRotX,
	Float:cRotY,
	Float:cRotZ,
	Float:cScaleX,
	Float:cScaleY,
	Float:cScaleZ,
	cAttachedIndex
};
enum vEnum
{
	vID,
	vOwnerID,
	vOwner[MAX_PLAYER_NAME],
	vModel,
	vPrice,
	vTickets,
	vLocked,
	vStolen,
	vPlate[32],
	Float:vHealth,
	Float:vPosX,
	Float:vPosY,
	Float:vPosZ,
	Float:vPosA,
	vColor1,
	vColor2,
	vPaintjob,
	vInterior,
	vWorld,
	vNeon,
	vNeonEnabled,
	vTrunk,
	vMods[14],
	vCash,
	vMaterials,
	vPot,
	vCrack,
	vMeth,
	vPainkillers,
	vWeapons[6],
	vHPAmmo,
	vPoisonAmmo,
	vFMJAmmo,
	vGang,
	vFactionType,
	vJob,
	vRespawnDelay,
	vObjects[2],
	vTimer,
	vMeal
};

enum fEnum
{
	fName[48],
	fShortName[24],
	fLeader[MAX_PLAYER_NAME],
	fType,
	fColor,
	fRankCount,
	Float:fLockerX,
	Float:fLockerY,
	Float:fLockerZ,
	fLockerInterior,
	fLockerWorld,
	fSkins[MAX_FACTION_SKINS],
	fPaycheck[MAX_FACTION_RANKS],
	fTurfTokens,
	Text3D:fText,
	fPickup
};

enum dEnum
{
	dExists,
	dType,
	Float:dPosX,
	Float:dPosY,
	Float:dPosZ,
	Float:dPosA,
	dObject
};

enum lEnum
{
	lExists,
	lID,
	lOwnerID,
	lOwner[MAX_PLAYER_NAME],
	lLevel,
	lPrice,
	Float:lMinX,
	Float:lMinY,
	Float:lMaxX,
	Float:lMaxY,
	Float:lHeight,
	Float:lX,
	Float:lY,
	Float:lZ,
	lGangZone,
	lArea,
	lLabels,
 	Text3D:lText,
	lPickup
};

enum lkEnum
{
	lID,
	lExists,
	lFaction,
	Float:lPosX,
	Float:lPosY,
	Float:lPosZ,
	lInterior,
	lWorld,
	lLabel,
	lIcon,
	locKevlar[2],
    locMedKit[2],
    locNitestick[2],
    locMace[2],
    locDeagle[2],
    locShotgun[2],
    locMP5[2],
    locM4[2],
    locSpas12[2],
    locSniper[2],
    locCamera[2],
    locFireExt[2],
    locPainKillers[2],
	Text3D:lText,
	lPickup
};


enum gaEnum
{
	gSetup,
	gName[32],
	gMOTD[128],
	gLeader[MAX_PLAYER_NAME],
	gColor,
	gStrikes,
	gLevel,
	gPoints,
	gTurfTokens,
	Float:gStashX,
	Float:gStashY,
	Float:gStashZ,
	gStashInterior,
	gStashWorld,
	gCash,
	gMaterials,
	gPot,
	gCrack,
	gMeth,
	gPainkillers,
	gHPAmmo,
	gPoisonAmmo,
	gFMJAmmo,
	gSkins[MAX_GANG_SKINS],
	gWeapons[15],
	gArmsDealer,
	gDrugDealer,
	Float:gArmsX,
	Float:gArmsY,
	Float:gArmsZ,
	Float:gArmsA,
	Float:gDrugX,
	Float:gDrugY,
	Float:gDrugZ,
	Float:gDrugA,
	gArmsWorld,
	gDrugWorld,
	gDrugPot,
	gDrugCrack,
	gDrugMeth,
	gArmsMaterials,
	gArmsPrices[12],
	gDrugPrices[3],
	gArmsHPAmmo,
	gArmsPoisonAmmo,
	gArmsFMJAmmo,
	Text3D:gText[3],
	gPickup,
	gActors[2],
	gAlliance
};

enum ptEnum
{
	pExists,
	pName[32],
	pCapturedBy[MAX_PLAYER_NAME],
	pCapturedGang,
	pType,
	pProfits,
	pTime,
	Float:pPointX,
	Float:pPointY,
	Float:pPointZ,
	pPointInterior,
	pPointWorld,
	pCaptureTime,
	pCapturer,
	Text3D:pText,
	pPickup
};


// ---------------------------------------
new connectionID;
new queryBuffer[1024];

/*#if defined Christmas
	#else
	new PlayerText:EventTextdraw[MAX_PLAYERS];
#endif*/

//new Text:HTTD[2];

//new PlayerBar:HungerBar[MAX_PLAYERS];
//new PlayerBar:ThirstBar[MAX_PLAYERS];
new Text:AnimationTD;
new Text:DOWNTD;
new Text:Tagastd1;
new Text:Tagastd2;
new Text:TimeTD;
// Report Textdraw
new Text:ReportTD;
new Text:DieText;
new Text:InjuredText;
//new Text:HTSTD[4];
//new Text:WebsiteTD;
new Text:ANN[3];

//LTO SYSTEM
new Text:LTO_PASS_0;
new Text:LTO_PASS_1;
new Text:LTO_PASS_2;
new Text:LTO_PASS_3;
new Text:LTO_PASS_4;
new Text:LTO_PASS_5;
new Text:LTO_PASS_6;
new Text:LTO_PASS_7;
new Text:LTO_FAIL_0;
new Text:LTO_FAIL_1;
new Text:LTO_FAIL_2;
new Text:LTO_FAIL_3;
new Text:LTO_FAIL_4;
new Text:LTO_FAIL_5;
new Text:LTO_FAIL_6;

new PlayerText:MCRP_LOGIN_0[MAX_PLAYERS];
new PlayerText:MCRP_LOGIN_1[MAX_PLAYERS];
new PlayerText:MCRP_LOGIN_2[MAX_PLAYERS];
new PlayerText:MCRP_LOGIN_3[MAX_PLAYERS];
new PlayerText:MCRP_LOGIN_4[MAX_PLAYERS];
new PlayerText:MCRP_LOGIN_5[MAX_PLAYERS];
new PlayerText:MCRP_LOGIN_6[MAX_PLAYERS];

new PlayerText:ECRPLOGIN_0[MAX_PLAYERS];
new PlayerText:ECRPLOGIN_1[MAX_PLAYERS];
new PlayerText:ECRPLOGIN_2[MAX_PLAYERS];
new PlayerText:ECRPLOGIN_3[MAX_PLAYERS];
new PlayerText:ECRPLOGIN_4[MAX_PLAYERS];
new PlayerText:ECRPLOGIN_5[MAX_PLAYERS];
new PlayerText:ECRPLOGIN_6[MAX_PLAYERS];
new PlayerText:ECRPLOGIN_7[MAX_PLAYERS];
new PlayerText:ECRPLOGIN_8[MAX_PLAYERS];
new PlayerText:ECRPLOGIN_9[MAX_PLAYERS];
new PlayerText:ECRPLOGIN_10[MAX_PLAYERS];
new PlayerText:ECRPLOGIN_11[MAX_PLAYERS];
new PlayerText:ECRPLOGIN_12[MAX_PLAYERS];
new PlayerText:ECRPLOGIN_13[MAX_PLAYERS];
new PlayerText:ECRPLOGIN_14[MAX_PLAYERS];
//new PlayerText:ECRPLOGIN_15[MAX_PLAYERS];
//new PlayerText:ECRPLOGIN_16[MAX_PLAYERS];
//new PlayerText:ECRPLOGIN_17[MAX_PLAYERS];

new Text:BANKTD[27];

//purge
new Text:TextdrawPURGE;
new Text:TextdrawPURGE1;
new Text:TextdrawPURGE2;
new Text:TextdrawPURGE3;
new Text:TextdrawPURGE4;
new Text:TextdrawPURGE5;
new Text:TextdrawPURGE6;
new Text:TextdrawPURGE7;
new Text:TextdrawPURGE8;
new Text:TextdrawPURGE9;
new Text:TextdrawPURGE10;
//ATM TEXTDRAWS
new Text:ATMTD[20];
new PlayerText:SHOWID[MAX_PLAYERS][16];


// Capture Limit
new MaxCapCount[2] = {  2 , 1 };

new enabledAM = 1;
new enabledpurge = 0;
new enabledOOC;
new enabledNewbie = 1;
new enabledVip = 1;
new enabledGlobal = 1;
new enabledAdmin = 1;
new enabledReports = 1;
new pizzaVehicles[4];
new garbageVehicles[6];
new forkliftVehicles[6];
new towtruck[3];
new courierVehicles[10];
new sweeperVehicles[4];
new lummberveh[7];
new VIPVehicles[50];
new taxiVehicles[7];
new testVehicles[5];
new adminMOTD[128], helperMOTD[128];
new gHour = 0, gWorldTime, gWeather = 2;
new gCharity, gCharityHealth, gCharityArmor;
new gPlayerRecord, gRecordDate[24], gServerMOTD[128], gTax, gVault, gAnticheatBans;
new mechvault;
new gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours;
new gDoubleXP;
new gLottoTimer, gDrawNumber, gLotto, LottoStarted;
new gLastAd;
new gListedItems[MAX_PLAYERS][100], gTargetName[MAX_PLAYERS][MAX_PLAYER_NAME];
new gGMX;
new gLastSave;
new gAnticheat = 1;
new gParachutes[2];
new gSeedsStock = 500, gCrackStock = 500, gEphedrineStock = 500;
new Text3D:gSeedsStockText,Text3D:gTacoStockText, Text3D:gCrackText , Text3D:gEphedrineStockText;
new gPrisonCells[24];
new gFires, gFireObjects[MAX_FIRES] = {INVALID_OBJECT_ID, ...}, Float:gFireHealth[MAX_FIRES];
new gOverallstock = 0;
new gTacoStock= 50, gBugerStock= 50;
new EventInfo[eventEnum];
new YachtInfo[YachtRobberyEnum];
new ChopInfo[chopEnum];
new RobInfo[robEnum];
new RobInfo1[robEnum1];
new RobberyInfo[robberyEnum];
new RobberyInfo1[robberyEnum1];
new MarkedPositions[MAX_PLAYERS][3][mEnum];
new pData[MAX_PLAYERS+1][pEnum];
new ReportInfo[MAX_REPORTS][rEnum];
new HouseInfo[MAX_HOUSES][hEnum];
new GarageInfo[MAX_GARAGES][gEnum];
new BusinessInfo[MAX_BUSINESSES][bEnum];
new EntranceInfo[MAX_ENTRANCES][eEnum];
new ClothingInfo[MAX_PLAYERS][MAX_PLAYER_CLOTHING][cEnum];
new VehicleInfo[MAX_VEHICLES][vEnum];
new FactionInfo[MAX_FACTIONS][fEnum];
new LockerInfo[MAX_LOCKERS][lkEnum];
new FactionRanks[MAX_FACTIONS][MAX_FACTION_RANKS][32];
new FactionDivisions[MAX_FACTIONS][MAX_FACTION_DIVISIONS][32];
new DeployInfo[MAX_DEPLOYABLES][dEnum];
new GangInfo[MAX_GANGS][gaEnum];
new LandInfo[MAX_LANDS][lEnum];
new GangRanks[MAX_FACTIONS][7][32];
new PointInfo[MAX_POINTS][ptEnum];


new adminVehicle[MAX_VEHICLES char];
new vehicleFuel[MAX_VEHICLES] = {100, ...};
new vehicleSiren[MAX_VEHICLES] = {INVALID_OBJECT_ID, ...};
new vehicleStream[MAX_VEHICLES][128];
new vehicleColors[MAX_VEHICLES][2];
new bool:chattingWith[MAX_PLAYERS][MAX_PLAYERS char];

// ---------------------------------------

new const vehicleNames[212][] = {
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
    "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Article Trailer", "Previon", "Coach",
    "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Article Trailer 2", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
    "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
    "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
    "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
    "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
    "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
    "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stuntplane", "Tanker", "Roadtrain",
    "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
    "Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
    "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
    "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
    "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Petrol Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Article Trailer 3", "Andromada", "Dodo", "RC Cam", "Launch", "LSPD Car", "SFPD Car", "LVPD Car",
    "Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
    "Boxville", "Tiller", "Utility Trailer"
};

new const weaponSlotIDs[] = {
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0,
	0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12,
	9, 9, 9, 11, 11, 11
};

new const weaponModelIDs[] = {
	0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
	325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
	353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
	367, 368, 368, 371
};
new clothingRareSkins[] = {
 40, 76,  91, 55, 214, 216, 219,
46, 59, 153, 171, 185, 187, 208, 223, 227, 228, 240, 294
};
new clothesShopSkinsMale[] = {
	2,116,7,19,29,30,67,105,102,103,108,109,110,114,115
};
new clothesShopSkinsFemale[] = {
	12,13,40,51,55,56,64,69,93,169,192,195,211,216,224
};

new const clothesShopSkins[] = {
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 
21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 
38, 39, 42, 43, 44, 45,  47, 48, 51, 52, 53, 54, 
56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 
75,  77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 
89, 90, 93, 94, 95, 96, 97, 98, 100, 101, 
111, 112, 117, 118, 119, 120, 
125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 
137, 138, 139, 142, 143, 145, 146, 148, 149, 151, 
152,  154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 
167, 168,  172, 176, 177, 178, 179, 181, 
182, 183, 184,  186,  188, 189, 190, 192, 193, 194, 195, 
196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,  
209, 210, 212, 213,  215, 218,  220, 221, 
222,  224, 225, 226,  229, 230, 231, 232, 233, 234, 
235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 
248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 
261, 262, 263, 264, 269, 270, 271, 272, 273, 
286, 290, 291, 292, 293,  295, 296, 297, 298, 299
};


enum houseInt
{
	intClass[16],
	intPrice,
	intID,
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA
};

new const houseInteriors[][houseInt] =
{ // 1-6 Apartment 7-9 Low Class 10-12 Med Class 13-16 Upper 17-19 Mansion 20 Custom House
    
	{"Apartment",    310000,   1,   2218.40, -1076.18, 1050.48, 270.2194},
	{"Apartment", 	 320000,   1,  243.72, 304.91, 999.15, 270.0000},
	{"Apartment", 	 304500,   2, 266.50, 304.90, 999.15, 270.0000},
	{"Apartment", 	 303400,   5,  2233.64, -1115.26, 1050.88, 90.0000},
	{"Apartment", 	 304340,  1, 223.20, 1287.08, 1082.14, 0.0000},
	{"Apartment", 	 356342,  11, 2283.04, -1140.28, 1050.90, 90.0000}, //1-6 Apartment 7-9 Low Class 10-12 Med Class 13-16 Upper 17-19 Mansion 20 Custom House
	{"Low Class", 	 750450,  6,  -68.81, 1351.21, 1080.21, 180.0000}, //7-9 Low Class
	{"Low Class", 	 789050,  4,  221.92, 1140.20,1082.61, 270.0000},
	{"Low Class", 	 790450,  4,  261.12, 1284.30, 1080.26, 90.0000},
	{"Medium Class", 2500000,  15,  295.04, 1472.26, 1080.26, 0.0000}, //10-12 Med Class
	{"Medium Class", 2500000,  5,   22.88, 1403.33, 1084.44, 180.0000},
	{"Medium Class", 2500000,  6, 2196.85, -1204.25, 1049.02, 270.0000},
	{"Upper Class",  5081000,  4, -260.49, 1456.75, 1084.37, 90.0000}, //13-16 Upper
	{"Upper Class",  5081000,  15,   -283.44, 1470.93, 1084.38, 0.0000}, // 17-19
	{"Upper Class",  5081000,  2, 491.07, 1398.50, 1080.26, 0.0000}, // 20
	{"Upper Class",  5081000,  3,  235.34, 1186.68, 1080.26, 0.0000},
	{"Mansion", 	 999999999,  6,  234.19, 1063.73, 1084.21, 180.0000},
	{"Mansion", 	 999999999, 12,  2324.53, -1149.54, 1050.71, 90.0000},
	{"Mansion",      999999999, 5,  1140.17, 1366.07, 1083.65, 0.0000},
	{"Special Class",999999999, 0, 0.0, 0.0, 0.0, 0.0}
};

enum garageInt
{
	intName[16],
	intPrice,
	intID,
	Float:intPX,
	Float:intPY,
	Float:intPZ,
	Float:intPA,
	Float:intVX,
	Float:intVY,
	Float:intVZ,
	Float:intVA
};

new const garageInteriors[][garageInt] =
{
    {"Small", 	100000,  1,  1521.2797, -1639.7163, 1124.5045, 180.0000,  1516.8326, -1643.9105, 1124.3364, 180.0000},
	{"Medium", 	125000,  2,  1520.6278, -1639.7173, 1374.5045, 180.0000,  1514.9481, -1644.1083, 1374.3365, 180.0000},
	{"Large", 	250000,  3,  1672.8816, -2363.5818, 1535.4829, 90.0000,   1660.5437, -2362.9001, 1535.2944, 0.0000}
};

enum bizInt
{
	intType[24],
	intPrice,
	intID,
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA
};
enum furnitureEnum
{
	fCategory[24],
    fName[32],
    fModel,
    fPrice
};
new const furnitureCategories[][] =
{
	{"Appliances"},
	{"Bathroom"},
	{"Bedroom"},
	{"Carpets"},
	{"Kitchen"},
	{"Tables"},
	{"Chairs"},
	{"Posters/Frames"},
	{"Storage"},
	{"Plants"},
	{"Trash"},
	{"Doors & gates"},
	{"Walls"},
	{"Decor"},
	{"Effect"},
	{"Special"},
	{"Graffiti"},
	{"Misc"}
};

new const furnitureArray[][furnitureEnum] =
{
	{"Appliances", 		"Blender", 					 19830,  1000},
	{"Appliances", 		"Coffee machine",            11743,  1000},
	{"Appliances", 		"Grill",     				 19831,  1000},
	{"Appliances", 		"Electrical outlet", 		 19813,  550},
	{"Appliances", 		"Light switch",      		 19829,  550},
	{"Appliances", 		"Keyboard",          		 19808,  550},
	{"Appliances", 		"White telephone",   		 19807,  550},
	{"Appliances", 		"Black telephone",   		 11705,  550},
	{"Appliances", 		"Large LCD television",  	 19786,  1000},
    {"Appliances", 		"Small LCD television",  	 19787,  7550},
    {"Appliances", 		"Round gold TV", 			 2224,   11000},
    {"Appliances", 		"TV on wheels",  			 14532,  2550},
    {"Appliances", 		"Flat screen TV",        	 1792,   400},
    {"Appliances",      "Wide screen TV",        	 1786,   400},
    {"Appliances",      "Surveillance TV",       	 1749,   400},
    {"Appliances",      "Regular TV",            	 1518,   2550},
    {"Appliances",      "Grey sided TV",         	 2322,   200},
    {"Appliances",      "Wood sided TV",         	 1429,   200},
    {"Appliances",      "Microwave",             	 2149,   800},
    {"Appliances",      "Pizza rack",            	 2453,   550},
    {"Appliances",      "Wide sprunk fridge",  		 2452,   800},
    {"Appliances",      "Small sprunk fridge",   	 2533,   550},
    {"Appliances",      "Duality game",        		 2779,   1000},
    {"Appliances",      "Bee Bee Gone game",   		 2778,   1000},
    {"Appliances",      "Space Monkeys game",    	 2681,   1000},
    {"Appliances",      "Sprunk machine",        	 1775,   1000},
    {"Appliances",      "Candy machine",         	 1776,   1000},
    {"Appliances",      "Water machine",         	 1808,   800},
    {"Appliances",      "Radiator",              	 1738,   550},
    {"Appliances",      "Metal fridge",          	 1780,   800},
    {"Appliances",      "Pizza cooker",         	 2426,   550},
    {"Appliances",      "Deep fryer",            	 2415,   800},
    {"Appliances",      "Soda dispenser",        	 2427,   800},
    {"Appliances",      "Aluminum stove",        	 2417,   800},
    {"Appliances",      "Lamp",                  	 2105,   550},
    {"Appliances",      "Diagnostic machine",    	 19903,  4000},
    {"Appliances",      "VHS player",            	 1785,   200},
    {"Appliances",      "Playstation console",   	 2028,   1000},
    {"Appliances",      "Retro gaming console",  	 1718,   1000},
    {"Appliances",      "Hi-Fi speaker",         	 1839,   2550},
    {"Appliances",      "Black subwoofer",       	 2232,   2550},
    {"Appliances",      "Subwoofer",             	 1840,   2550},
    {"Appliances",      "Small black speaker",   	 2229,   2550},
    {"Appliances",      "Speaker on a stand",    	 2233,   800},
    {"Appliances",      "Speaker & stereo system",   2099,   1000},
	{"Appliances",      "Surveillance camera",   	 1886,   550},
	{"Appliances",      "Security camera",       	 1622,   550},
	{"Appliances",      "Exercise bike",         	 2630,   1000},
	{"Appliances",      "Treadmill",             	 2627,   1000},
	{"Appliances",      "Lift bench",            	 2629,   2550},
    {"Appliances",		"Pull up machine",       	 2628,   1000},
    {"Appliances", 		"White turntable",           1954,   1000},
    {"Bathroom",   		"Toilet",                	 2514,   2550},
    {"Bathroom",   		"Bathtub",               	 2519,   1000},
    {"Bathroom",   		"Toilet paper",          	 19873,  550},
    {"Bathroom",        "Towel rack",                11707,  800},
    {"Bathroom",   		"Toilet with rug",       	 2528,   1000},
	{"Bathroom",   		"Toilet with rolls",     	 2525,   1000},
	{"Bathroom",   		"Sink top",              	 2515,   800},
	{"Bathroom",   		"Dual sink top",         	 2150,   200},
	{"Bathroom",   		"Wood sided bathtub",    	 2526,   1000},
	{"Bathroom",   		"Sprunk bathtub",        	 2097,   1000},
	{"Bathroom",  		"Shower curtains",       	 14481,  800},
	{"Bathroom",   		"Metal shower cabin",    	 2520,   1000},
	{"Bathroom",   		"Glass shower cabin",    	 2517,   1000},
	{"Bathroom",   		"Shower with curtains",  	 2527,   1000},
	{"Bathroom",   		"Wall sink",             	 2518,   2550},
	{"Bathroom",   		"Plain sink",            	 2739,   2550},
	{"Bathroom",   		"Sink with extra soap",  	 2524,   2550},
	{"Bathroom",   		"Sink with rug",         	 2523,   2550},
	{"Bathroom",   		"Industrial sink",       	 11709,  1000},
	{"Bedroom",    		"Prison bed",            	 1800,   800},
	{"Bedroom",   		"Folding bed",           	 1812,   800},
	{"Bedroom",    		"Red double bed",        	 11720,  1000},
	{"Bedroom",    		"Wood double bed",       	 14866,  1000},
	{"Bedroom",   	 	"Double plaid bed",      	 1794,   1000},
	{"Bedroom",    		"Brown bed",        		 2229,   1000},
	{"Bedroom",    		"Blue striped bed", 		 2302,   1000},
	{"Bedroom",    		"Dark blue striped bed", 	 2298,   1000},
	{"Bedroom",    		"White striped bed",     	 2090,   1000},
	{"Bedroom",    		"Bed with cabinet",      	 2300,   1000},
	{"Bedroom",    		"Pink & blue striped bed", 	 2301,   1000},
	{"Bedroom",    		"Zebra print bed",       	 14446,  1000},
	{"Bedroom",    		"Low striped bed",  		 1795,   1000},
	{"Bedroom",    		"Low dark striped bed",      1798,   1000},
	{"Bedroom",    		"Single plaid bed",      	 1796,   1000},
	{"Bedroom",    		"Plain striped mattress",    1793,   1000},
	{"Bedroom",    		"Silk sheeted bed",          1701,   1000},
	{"Bedroom",    		"Framed striped bed",        1801,   1000},
	{"Bedroom",    		"Framed brown bed",          1802,   1000},
	{"Bedroom",    		"Wooden cabinet",            2330,   2550},
	{"Bedroom",    		"Cabinet with TV",           2296,   1000},
	{"Bedroom",    		"Dresser",               	 1416,   2550},
	{"Bedroom",    		"Small dresser",             2095,   2550},
	{"Bedroom",    		"Medium dresser",            1743,   2550},
	{"Bedroom",    		"Wide dresser",              2087,   2550},
	{"Bedroom",    		"Small wardrobe",            2307,   2550},
	{"Bedroom",    		"Huge open wardrobe",        14556,  1000},
	{"Bedroom",    		"Busted cabinet",            913,    1000},
	{"Bedroom",    		"Busted dresser",            911,    2550},
	{"Bedroom",    		"Dresser with no drawers",   912,    800},
	{"Carpets",    		"Rockstar carpet",           11737,  2550},
    {"Carpets",    		"Plain red carpet",          2631,   2550},
    {"Carpets",    		"Plain green carpet",        2632,   2550},
    {"Carpets",    		"Patterned carpet",          2842,   2550},
    {"Carpets",    		"Zig-zag patterned carpet",  2836,   2550},
    {"Carpets",    		"Brown red striped carpet",  2847,   2550},
    {"Carpets",    		"Old timer's carpet",        2833,   2550},
    {"Carpets",    		"Red checkered carpet",      2818,   2550},
    {"Carpets",    		"Green circled carpet",      2817,   2550},
    {"Carpets",    		"Plain polkadot carpet",     2834,   2550},
    {"Carpets",    		"Tiger rug",                 1828,   1000},
    {"Carpets",    		"Plain round rug",           2835,   2550},
    {"Carpets",    		"Round green rug",           2841,   2550},
    {"Kitchen",    		"CJ's kitchen",              14384,  3000},
    {"Kitchen",    		"Whole kitchen",             14720,  3000},
    {"Kitchen",    		"White kitchen sink",        2132,   1000},
    {"Kitchen",    		"White kitchen counter",  	 2134,   1000},
    {"Kitchen",    		"White kitchen fridge",      2131,   1000},
    {"Kitchen",    		"White kitchen drawers",     2133,   1000},
    {"Kitchen",    		"White kitchen corner",      2341,   1000},
    {"Kitchen",    		"White kitchen cupboard",    2141,   1000},
    {"Kitchen",    		"Green kitchen sink",        2336,   1000},
    {"Kitchen",    		"Green kitchen counter",     2334,   1000},
    {"Kitchen",    		"Green kitchen fridge",      2147,   1000},
    {"Kitchen",    		"Green kitchen corner",      2338,   1000},
    {"Kitchen",    		"Green kitchen washer",      2337,   1000},
    {"Kitchen",    		"Green kitchen cupboard",    2158,   1000},
    {"Kitchen",    		"Green kitchen stove",       2170,   1000},
    {"Kitchen",    		"Red kitchen sink",          2130,   1000},
    {"Kitchen",    		"Red kitchen fridge",        2127,   1000},
    {"Kitchen",    		"Red kitchen cupboard",      2128,   1000},
    {"Kitchen",    		"Red kitchen corner",        2304,   1000},
    {"Kitchen",    		"Red kitchen counter",       2129,   1000},
    {"Kitchen",    		"Wood kitchen sink",         2136,   1000},
    {"Kitchen",    		"Wood kitchen counter",      2139,   1000},
    {"Kitchen",    		"Wood kitchen cupboard",     2140,   1000},
    {"Kitchen",    		"Wood kitchen washer",       2303,   1000},
    {"Kitchen",    		"Wood kitchen unit",         2138,   1000},
    {"Kitchen",    		"Wood kitchen corner",       2305,   1000},
    {"Kitchen",    		"Wood kitchen stove",        2135,   1000},
    {"Kitchen",    		"Modern stove",              19923,  1000},
    {"Kitchen",    		"Old timer's stove",         19915,  1000},
    {"Kitchen",    		"Fork",                      11715,  550},
    {"Kitchen",    		"Butter knife",              11716,  550},
    {"Kitchen",    		"Steak knife",               19583,  550},
    {"Kitchen",    		"Spatula",                   19586,  550},
    {"Kitchen",    		"Double handled pan",        19585,  800},
    {"Kitchen",    		"Single handled pan",        19584,  800},
    {"Kitchen",    		"Frying pan",                19581,  800},
    {"Kitchen",    		"Tall striped saucepan",     11719,  800},
    {"Kitchen",    		"Striped saucepan",          11718,  800},
    {"Kitchen",    		"Cooked steak",              19982,  550},
    {"Kitchen",    		"Raw steak",                 19582,  550},
    {"Kitchen",    		"Green apple",               19576,  550},
    {"Kitchen",    		"Red apple",                 19575,  550},
    {"Kitchen",    		"Orange",                    19574,  550},
    {"Kitchen",    		"Banana",                    19578,  550},
    {"Kitchen",         "Tomato",                    19577,  550},
    {"Tables",     		"Lab table",                 3383,   2000},
    {"Tables",     		"Pool table",                2964,   2000},
    {"Tables",     		"Blackjack table",           2188,   2000},
    {"Tables",     		"Betting table",             1824,   2000},
    {"Tables",     		"Roulette table",            1896,   2000},
    {"Tables",     		"Poker table",               19474,  1000},
    {"Tables",     		"Burger shot table",         2644,   1000},
    {"Tables",     		"Cluckin' bell table",       2763,   1000},
    {"Tables",     		"Wide cluckin' bell table",  2762,   1000},
    {"Tables",     		"Square coffee table",       2370,   1000},
    {"Tables",     		"Donut shop table",          2747,   1000},
    {"Tables",     		"Pizza table",               2764,   1000},
    {"Tables",     		"Wide coffee table",         2319,   1000},
    {"Tables",     		"Rectangular green table",   11691,  1000},
    {"Tables",     		"Squared green table",       11690,  1000},
    {"Tables",     		"Round glass table",         1827,   1000},
    {"Tables",     		"Round wooden table",        2111,   1000},
    {"Tables",     		"Wide dining table",         2357,   1000},
    {"Tables",     		"Plain wooden table",        2115,   1000},
    {"Tables",     		"Plain brown wooden table",  1516,   1000},
    {"Tables",     		"White polkadot table",      1770,   1000},
    {"Tables",     		"Brown dining table",        1737,   1000},
    {"Tables",     		"Round stone table",         2030,   1000},
    {"Tables",     		"Wooden table with rim",     2699,   1000},
    {"Tables",     		"Low coffee table",          1814,   1000},
    {"Tables",     		"Low brown wooden table",    1433,   1000},
    {"Tables",     		"Bedroom table",             2333,   1000},
    {"Tables",     		"Round table with chairs",   1432,   1000},
    {"Tables",     		"Table with benches",        1281,   1000},
    {"Tables",     		"Checkered table & chairs",  1594,   1000},
    {"Tables",     		"Wooden workshop table",     19922,  1000},
    {"Tables",     		"Hexagon shaped table",      2725,   1000},
    {"Tables",     		"Table with VCR",            2313,   1000},
    {"Tables",     		"Low wooden TV stand",       2314,   1000},
    {"Tables",     		"Low brown TV stand",        2315,   1000},
    {"Tables",     		"Plain brown office desk",   2206,   1000},
    {"Tables",     		"Office desk with computer", 2181,   1000},
    {"Tables",     		"Plain wooden office desk",  2185,   1000},
    {"Tables",     		"Computer desk",             2008,   1000},
    {"Chairs",     		"Blue swivel chair",         2356,   2550},
    {"Chairs",     		"Brown dining chair",        1811,   2550},
    {"Chairs",     		"Red folding chair",         2121,   2550},
    {"Chairs",    		"Upholstered chair",         2748,   1000},
    {"Chairs",     		"Folding office chair",      1721,   2550},
    {"Chairs",     		"Round black chair",         2776,   2550},
    {"Chairs",     		"Black stool",               1716,   2550},
    {"Chairs",     		"Brown stool",               2350,   2550},
    {"Chairs",     		"Red stool",                 2125,   2550},
    {"Chairs",     		"Tall wooden dining chair",  2124,   2550},
    {"Chairs",     		"Tall brown dining chair",   1739,   2550},
    {"Chairs",     		"Checkered dining chair",    2807,   2550},
    {"Chairs",     		"Plain office chair",        1671,   2550},
    {"Chairs",     		"Brown folding chair",       19996,  2550},
    {"Chairs",     		"Light brown chair",         19994,  2550},
    {"Chairs",     		"Black lounge chair",        1704,   1000},
    {"Chairs",     		"Beige lounge chair",        1705,   1000},
    {"Chairs",     		"Dark blue reclining chair", 1708,   1000},
    {"Chairs",     		"Brown corner chair",  		 11682,  1000},
    {"Chairs",     		"Old timer's lounge chair",  1711,   1000},
    {"Chairs",     		"Old timer's rocking chair", 1735,   1000},
    {"Chairs",     		"Two chairs and a table",    2571,   1000},
    {"Chairs",     		"Dark brown foot stool",     2293,   1000},
    {"Chairs",     		"Rocking chair",             11734,  2550},
    {"Chairs",     		"Plaid sofa",                1764,   7550},
    {"Chairs",     		"Long black sofa",           1723,   7550},
    {"Chairs",     		"Beige sofa",                1702,   7550},
    {"Chairs",     		"Brown couch",               1757,   7550},
    {"Chairs",     		"Old timer's sofa",          1728,   7550},
    {"Chairs",     		"Brown corner couch piece",  2292,   1000},
    {"Chairs",     		"White & grey couch",        1761,   7550},
    {"Chairs",     		"Patterned couch",           1760,   7550},
    {"Chairs",     		"Plaid couch",               1764,   7550},
    {"Chairs",     		"Dark blue couch",           1768,   7550},
    {"Chairs",     		"Wide brown couch",          2290,   7550},
    {"Chairs",     		"Green couch",               1766,   7550},
    {"Chairs",     		"Patterned armrest couch",   1763,   7550},
    {"Chairs",     		"Red couch",                 11717,  7550},
    {"Chairs",     		"Very wide beige couch",     1710,   11000},
    {"Chairs",     		"Ultra wide beige couch",    1709,   2000},
    {"Chairs",     		"Red and white couch",       1707,   7550},
    {"Posters/Frames",  "Burger shot poster",        2641,   550},
    {"Posters/Frames",  "Cluckin' bell poster",      2766,   550},
    {"Posters/Frames",  "Wash wands poster",         2685,   550},
    {"Posters/Frames",  "For lease poster",          11289,  550},
    {"Posters/Frames",  "Monkey juice poster",       19328,  550},
    {"Posters/Frames",  "Ring donuts poster",        2715,   550},
    {"Posters/Frames",  "Battered ring posterr",     2716,   550},
	{"Posters/Frames",  "Pizza poster",         	 2668,   550},
    {"Posters/Frames",  "T-Shirt poster",            2729,   550},
    {"Posters/Frames",  "Suburban poster",           2658,   550},
    {"Posters/Frames",  "Zip poster",                2736,   550},
    {"Posters/Frames",  "Binco poster",              2722,   550},
    {"Posters/Frames",  "99c binco poster",          2719,   550},
    {"Posters/Frames",  "Binco sale poster",         2721,   550},
    {"Posters/Frames",  "Heat poster",               2661,   550},
    {"Posters/Frames",  "Eris poster",               2655,   550},
    {"Posters/Frames",  "Bobo poster",               2662,   550},
    {"Posters/Frames",  "Base 5 poster",             2691,   550},
    {"Posters/Frames",  "Base 5 cutout #1",        	 2693,   550},
    {"Posters/Frames",  "Base 5 cutout #2",        	 2692,   550},
    {"Posters/Frames",  "Long base 5 poster #1",   	 2695,   550},
    {"Posters/Frames",  "Long base 5 poster #2",   	 2696, 	 550},
    {"Posters/Frames",  "White prolaps poster",   	 2697,   550},
    {"Posters/Frames",  "Black prolaps poster",   	 2656,   550},
    {"Posters/Frames",  "San Fierro frame",       	 19175,  800},
    {"Posters/Frames",  "Flint County frame",     	 19174,  800},
    {"Posters/Frames",  "Gant Bridge frame",      	 19173,  800},
    {"Posters/Frames",  "Los Santos frame",       	 19172,  800},
    {"Posters/Frames",  "City View frame",    		 2289,   800},
    {"Posters/Frames",  "Los Angeles frame",      	 2258,   800},
	{"Posters/Frames",  "Wooden frame",           	 2288,   800},
	{"Posters/Frames",  "Sail Boat frame",        	 2287,   800},
	{"Posters/Frames",  "Ship frame",             	 2286,   800},
	{"Posters/Frames",  "Water frame",            	 2285,   800},
	{"Posters/Frames",  "Church frame",           	 2284,   800},
    {"Posters/Frames",  "Rural frame",        		 2282,   800},
    {"Posters/Frames",  "Sunset frame",				 2281,   800},
    {"Posters/Frames",  "Coast frame",        		 2280,   800},
    {"Posters/Frames",  "Mount chiliad frame",    	 2279,   800},
    {"Posters/Frames",  "Cargo ship frame",       	 2278,   800},
    {"Posters/Frames",  "Cat frame",          		 2277,   800},
    {"Posters/Frames",  "Bridge frame",          	 2276,   800},
    {"Posters/Frames",  "Fruit Bowl frame",       	 2275,   800},
    {"Posters/Frames",  "Flower frame",          	 2274,   800},
    {"Posters/Frames",  "Bouquet frame",          	 2273,   800},
    {"Posters/Frames",  "Landscape frame",        	 2272,   800},
    {"Posters/Frames",  "Paper frame",         		 2271,   800},
    {"Posters/Frames",  "Leaves frame",         	 2270,   800},
    {"Posters/Frames",  "Lake frame",         		 2269,   800},
    {"Posters/Frames",  "Black cat frame",        	 2268,   800},
    {"Posters/Frames",  "Cruise ship frame",      	 2267,   800},
    {"Posters/Frames",  "Night downtown frame",		 2266,   800},
    {"Posters/Frames",  "Dseert rocks frame",     	 2265,   800},
    {"Posters/Frames",  "Beach frame",         		 2264,   800},
    {"Posters/Frames",  "Dock frame",         		 2263,   800},
    {"Posters/Frames",  "Downtown frame",         	 2262,   800},
    {"Posters/Frames",  "Golden gate frame",      	 2261,   800},
    {"Posters/Frames",  "Old Boat frame",         	 2260,   800},
    {"Posters/Frames",  "Bowling frame",          	 2259,   800},
    {"Posters/Frames",  "Pattern frame",        	 2283,   800},
    {"Posters/Frames",  "Squares frame",          	 2257,   800},
    {"Posters/Frames",  "Palm trees frame",       	 2256,   800},
    {"Posters/Frames",  "Erotic frame",         	 2255,   800},
    {"Posters/Frames",  "Yellow car frame",       	 2254,   10},
    {"Storage",     	"Book shelf",                1742,   1000},
	{"Storage",     	"Wardrobe",         	     2307,   400},
	{"Storage",     	"Wooden crate",            	 1217,   1550},
	{"Storage",     	"Metal crate",               964,    1550},
	{"Storage",     	"Wide office cabinet",       2200,   1550},
	{"Storage",    	 	"Yellow cabinet",         	 1730,   1550},
	{"Storage",     	"Open gym locker",        	 11730,  2550},
	{"Storage",     	"Closed gym locker",      	 11729,  2550},
	{"Storage",     	"Toolbox",          		 19921,  1000},
	{"Storage",     	"Chest",                     19918,  800},
	{"Storage",     	"Dresser",                   2094,   2550},
	{"Storage",     	"Warehouse rack",         	 3761,   1550},
	{"Storage",     	"Barrel rack",           	 925,    2550},
	{"Storage",     	"Sex toy rack",          	 2581,   2550},
	{"Storage",     	"Sex magazine rack #1",      2578,   2550},
	{"Storage",     	"Sex magazine rack #2",      2579,   2550},
	{"Storage",     	"Rack with no shelves",      2509,   2550},
	{"Storage",     	"Rack with 3 shelves",       2482,   2550},
	{"Storage",     	"Rack with 4 shelves",       2475,   2550},
	{"Storage",     	"Small rack",			 	 2463,   2550},
	{"Storage",     	"Wide rack",              	 2462,   2550},
	{"Storage",     	"Dresser with drawers",      1743,   2550},
	{"Storage",     	"Wide dresser",              2087,   2550},
	{"Storage",     	"Tall dresser",              2088,   2550},
	{"Storage",     	"Brown dresser",             2089,   2550},
	{"Storage",     	"Single dresser",            2095,   2550},
	{"Storage",     	"White filing cabinet",   	 2197,   2550},
	{"Storage",     	"Green filing cabinet",   	 2610,   2550},
	{"Storage",     	"Dual filing cabinets",      2007,   2550},
	{"Storage",     	"Black shelf",          	 2078,   2550},
	{"Storage",     	"Brown shelf",               2204,   2550},
	{"Storage",     	"Tool shelf",                19899,  2550},
	{"Storage",    	 	"Tool cabinet",     		 19900,  2550},
	{"Storage",     	"Wall mounted shelf",        19940,  2550},
	{"Storage",     	"Clothes shelf",          	 2708,   2550},
	{"Storage",     	"Gun rack",         		 2046,   2550},
	{"Storage",     	"Shop shelf",             	 19640,  2550},
	{"Storage",     	"Blue office shelf",         2191,   2550},
	{"Storage",     	"Wooden office shelf",       2199,   2550},
	{"Storage",     	"Office book shelf",         2161,   2550},
	{"Storage",     	"Tall office cabinet",       2167,   800},
	{"Storage",     	"Wide office cabinet",       2163,   800},
	{"Plants",   		"Palm plant #1",          	 625,    800},
    {"Plants",   		"Palm plant #2",          	 626,    800},
    {"Plants",   		"Palm plant #3",          	 627,    800},
    {"Plants",   		"Palm plant #4",          	 628,  	 800},
    {"Plants",   		"Palm plant #5",          	 630,    800},
    {"Plants",   		"Palm plant #6",          	 631,    800},
    {"Plants",   		"Palm plant #7",          	 632,    800},
    {"Plants",   		"Palm plant #8",         	 633,    800},
    {"Plants",  		"Palm plant #9",         	 646,    800},
    {"Plants",   		"Palm plant #10",            644,    800},
    {"Plants",   		"Palm plant #11",         	 2001,   800},
    {"Plants",   		"Palm plant #12",        	 2010,   800},
    {"Plants",   		"Palm plant #13",        	 2011,   1550},
    {"Plants",   		"Potted plant #1",           948,    1550},
    {"Plants",   		"Potted plant #2",           949,    1550},
    {"Plants",   		"Potted plant #3",           950,  	 1550},
    {"Plants",   		"Potted plant #4",           2194,   1550},
    {"Plants",   		"Potted plant #5",           2195,   1550},
    {"Plants",   		"Potted plant #6",           2203,   1550},
    {"Plants",   		"Potted plant #7",           2240,   1550},
    {"Plants",   		"Potted plant #8",           2241,   1550},
    {"Plants",   		"Potted plant #9",           2242, 	 1550},
    {"Plants",   		"Potted plant #10",          2244, 	 1550},
    {"Plants",   		"Potted plant #11",          2245,   1550},
    {"Plants",   		"Potted plant #12",          2246,   1550},
    {"Plants",   		"Potted plant #13",          2248,   1550},
    {"Plants",   		"Potted plant #14",          2252,   1550},
    {"Plants",   		"Potted plant #15",          2253,   1550},
    {"Plants",   		"Potted plant #16",          2811,   1550},
    {"Plants",   		"Wide plant",      			 638,    2550},
    {"Plants",   		"Single bush plant",         1361,   2550},
    {"Plants",   		"Wide bush plant",           1360,   2550},
    {"Plants",  		"Bush plant and bench",      1364,   1000},
    {"Plants",   		"Window plant #1",           3802,   200},
    {"Plants",   		"Window plant #2",           3810,   200},
    {"Trash",           "Wastebin",                  11706,  550},
    {"Trash",           "Blue trashcan on wheels",   1339,   550},
	{"Trash",           "Blue trashcan",     		 1430,   550},
	{"Trash",           "Trashcan with holes",       1359,   550},
	{"Trash",           "Cluckin' bell trashcan", 	 2770,   550},
	{"Trash",           "Burger shot trashcan",   	 2420,   550},
	{"Trash",           "Round bagged trashcan",     1330,   550},
	{"Trash",           "Round white trashcan",      1329,   550},
	{"Trash",           "Metal trashcan",            1328, 	 550},
	{"Trash",           "Full dumpster",          	 1415,   550},
	{"Trash",           "Closed dumpster",           1227,   550},
	{"Trash",           "Bottle disposal unit",      1336,   550},
	{"Trash",           "Blue dumpster",             1334,   550},
	{"Trash",           "Red dumpster",              1333,   550},
	{"Trash",           "Hippo trashcan",            1371,   550},
	{"Trash",           "Poor trashcan",             1347,   550},
	{"Trash",           "Cement trashcan",           1300,   550},
	{"Trash",           "Trashcan filled with wood", 1442,   550},
	{"Trash",           "Two pallets & trash",       1450,   550},
	{"Trash",           "Single pallet",             1448,   550},
	{"Trash",           "Garbage bag",               1265,   550},
	{"Trash",           "Burger shot bag",           2663,   550},
	{"Trash",           "Pile of boxes",             1440,   550},
    {"Trash",     		"Cardboard box",             1221,   550},
    {"Trash",           "Open pizza box",            2860,   550},
    {"Trash",           "Takeaway trash",         	 2866,   550},
    {"Trash",           "Burger shot trash",      	 2840,   550},
	{"Trash",           "Dirty dishes #1",      	 2812,   550},
    {"Trash",           "Dirty dishes #2",   		 2822,   550},
    {"Trash",           "Dirty dishes #3",      	 2829,   550},
    {"Trash",           "Dirty dishes #4",      	 2830,   550},
    {"Trash",           "Dirty dishes #5",      	 2831,   550},
    {"Trash",           "Dirty dishes #6",      	 2832,   550},
    {"Trash",           "Clean dishes #1",   		 2862,   550},
    {"Trash",           "Clean dishes #2",   		 2863,   550},
    {"Trash",           "Clean dishes #3",   		 2864,   550},
    {"Trash",           "Clean dishes #4",   		 2865,   550},
    {"Trash",           "Assorted trash #1",         2672,   550},
    {"Trash",           "Assorted trash #2",         2677,   550},
    {"Trash",           "Assorted trash #3",         2675,   550},
    {"Trash",           "Assorted trash #4",         2676,   550},
    {"Trash",           "Assorted trash #5",         2674,   550},
    {"Trash",           "Assorted trash #6",         2673,   550},
    {"Trash",           "Assorted trash #7",         2670,   550},
    {"Doors & gates",   "Door with bars",            2930,   800},
    {"Doors & gates",   "Petrol door",       		 2911,   800},
    {"Doors & gates",   "Flat door",          		 3061,   800},
    {"Doors & gates",   "Wardrobe door",         	 1567,   800},
    {"Doors & gates",   "Green push door",        	 1492,   800},
    {"Doors & gates",   "Red windowed door",       	 1493,   800},
    {"Doors & gates",   "Black wooden door",         1494,   800},
    {"Doors & gates",   "Brown windowed door",       3089,   800},
    {"Doors & gates",   "Wooden farm door",        	 1497,   800},
    {"Doors & gates",   "White wooden door",         1498,   800},
    {"Doors & gates",   "Warehouse door",       	 1499,   800},
    {"Doors & gates",   "Red door",        			 1504,   800},
    {"Doors & gates",   "Blue door",        		 1505,   800},
    {"Doors & gates",   "White door",        		 1506,   800},
    {"Doors & gates",   "Yellow door",        		 1507,   800},
    {"Doors & gates",   "Kitchen door",        		 1523,   800},
    {"Doors & gates",   "Motel door",        		 1535,   800},
    {"Doors & gates",   "Blue motel door",           2970,   800},
    {"Doors & gates",   "7/11 door",     			 1560,   800},
    {"Doors & gates",   "Barred door",          	 3061,   800},
    {"Doors & gates",   "Red motel door",            3029,   800},
    {"Doors & gates",   "Security door",       		 2949,   800},
    {"Doors & gates",   "Tall white door",           2948,   800},
    {"Doors & gates",   "Bank door",           		 2946,   800},
    {"Doors & gates",   "Ship door",     			 2944,   800},
    {"Doors & gates",   "Tower door",        		 977,    800},
    {"Doors & gates",   "Maintenance doors",         11714,  800},
    {"Doors & gates",   "Dual dffice door",          19176,  800},
    {"Doors & gates",   "Screen door #1",        	 1495,   800},
    {"Doors & gates",   "Screen door #2",        	 1500,   800},
    {"Doors & gates",   "Screen door #3",        	 1501,   800},
    {"Doors & gates",   "Shop door #1",        		 1532,   800},
    {"Doors & gates",   "Shop door #2",      		 1496,   800},
    {"Doors & gates",   "Shop door #3",        		 1533,   800},
    {"Doors & gates",   "Shop door #4",        		 1537,   800},
    {"Doors & gates",   "Shop door #5",        		 1538,   800},
    {"Doors & gates",   "Office door #1",          	 1566,   800},
    {"Doors & gates",   "Office door #2",         	 1569,   800},
    {"Doors & gates",   "Office door #3",        	 1536,   800},
    {"Doors & gates",   "Office door #4",        	 1557,   800},
    {"Doors & gates",   "Office door #5",        	 1556,   800},
    {"Doors & gates",   "Wooden push door #1",       1491,   800},
    {"Doors & gates",   "Wooden push door #2",       1502,   800},
    {"Doors & gates",   "Garage door #1",            8957,   800},
    {"Doors & gates",   "Garage door #2",            7891,   800},
    {"Doors & gates",   "Garage door #3",     	 	 3037,   800},
    {"Doors & gates",   "Garage door #4",            19861,  800},
    {"Doors & gates",   "Garage door #5",            19864,  800},
    {"Doors & gates",   "Plain metal bar gate",      19912,  1000},
    {"Doors & gates",   "Tall metal bar gate",       971,    1000},
    {"Doors & gates",   "Long metal bar gate",       975,    1000},
    {"Doors & gates",   "Los Santos Airport gate",   980,    1000},
    {"Doors & gates",   "Fenced gate",               985,    1000},
    {"Doors & gates",   "No parking gate",           19870,  1000},
    {"Doors & gates",   "Fenced gate on wheels",     988,    1000},
    {"Walls",           "wall001",                   19353,  800},
    {"Walls",           "wall002",                   19354,  800},
    {"Walls",           "wall003",                   19355,  800},
    {"Walls",           "wall004",                   19356,  800},
    {"Walls",           "wall005",                   19357,  800},
    {"Walls",           "wall006",                   19358,  800},
    {"Walls",           "wall007",                   19359,  800},
    {"Walls",           "wall008",                   19360,  800},
    {"Walls",           "wall009",                   19361,  800},
    {"Walls",           "wall010",                   19362,  800},
    {"Walls",           "wall011",                   19363,  800},
    {"Walls",           "wall012",                   19364,  800},
    {"Walls",           "wall013",                   19365,  800},
    {"Walls",           "wall014",                   19366,  800},
    {"Walls",           "wall015",                   19367,  800},
    {"Walls",           "wall016",                   19368,  800},
    {"Walls",           "wall017",                   19369,  800},
    {"Walls",           "wall018",                   19370,  800},
    {"Walls",           "wall019",                   19371,  800},
    {"Walls",           "wall020",                   19372,  800},
    {"Walls",           "wall021",                   19373,  800},
    {"Walls",           "wall022",                   19374,  800},
    {"Walls",           "wall023",                   19375,  800},
    {"Walls",           "wall024",                   19376,  800},
    {"Walls",           "wall025",                   19377,  800},
    {"Walls",           "wall026",                   19378,  800},
    {"Walls",           "wall027",                   19379,  800},
    {"Walls",           "wall028",                   19380,  800},
    {"Walls",           "wall029",                   19381,  800},
    {"Walls",           "wall030",                   19382,  800},
    {"Walls",           "wall031",                   19383,  800},
    {"Walls",           "wall032",                   19384,  800},
    {"Walls",           "wall033",                   19385,  800},
    {"Walls",           "wall034",                   19386,  800},
    {"Walls",           "wall035",                   19387,  800},
    {"Walls",           "wall036",                   19388,  800},
    {"Walls",           "wall037",                   19389,  800},
    {"Walls",           "wall038",                   19390,  800},
    {"Walls",           "wall039",                   19391,  800},
    {"Walls",           "wall040",                   19392,  800},
    {"Walls",           "wall041",                   19393,  800},
    {"Walls",           "wall042",                   19394,  800},
    {"Walls",           "wall043",                   19395,  800},
    {"Walls",           "wall044",                   19396,  800},
    {"Walls",           "wall045",                   19397,  800},
    {"Walls",           "wall046",                   19398,  800},
    {"Walls",           "wall047",                   19399,  800},
    {"Walls",           "wall048",                   19400,  800},
    {"Walls",           "wall049",                   19401,  800},
    {"Walls",           "wall050",                   19402,  800},
    {"Walls",           "wall051",                   19403,  800},
    {"Walls",           "wall052",                   19404,  800},
    {"Walls",           "wall053",                   19405,  800},
    {"Walls",           "wall054",                   19406,  800},
    {"Walls",           "wall055",                   19407,  800},
    {"Walls",           "wall056",                   19408,  800},
    {"Walls",           "wall057",                   19409,  800},
    {"Walls",           "wall058",                   19410,  800},
    {"Walls",           "wall059",                   19411,  800},
    {"Walls",           "wall060",                   19412,  800},
    {"Walls",           "wall061",                   19413,  800},
    {"Walls",           "wall062",                   19414,  800},
    {"Walls",           "wall063",                   19415,  800},
    {"Walls",           "wall064",                   19416,  800},
    {"Walls",           "wall065",                   19417,  800},
    {"Walls",           "wall066",                   19426,  800},
    {"Walls",           "wall067",                   19427,  800},
    {"Walls",           "wall068",                   19428,  800},
    {"Walls",           "wall069",                   19429,  800},
    {"Walls",           "wall070",                   19430,  800},
    {"Walls",           "wall071",                   19431,  800},
    {"Walls",           "wall072",                   19432,  800},
    {"Walls",           "wall073",                   19433,  800},
    {"Walls",           "wall074",                   19434,  800},
    {"Walls",           "wall075",                   19435,  800},
    {"Walls",           "wall076",                   19436,  800},
    {"Walls",           "wall077",                   19437,  800},
    {"Walls",           "wall078",                   19438,  800},
    {"Walls",           "wall079",                   19439,  800},
    {"Walls",           "wall080",                   19440,  800},
    {"Walls",           "wall081",                   19441,  800},
    {"Walls",           "wall082",                   19442,  800},
    {"Walls",           "wall083",                   19443,  800},
    {"Walls",           "wall084",                   19444,  800},
    {"Walls",           "wall085",                   19445,  800},
    {"Walls",           "wall086",                   19446,  800},
    {"Walls",           "wall087",                   19447,  800},
    {"Walls",           "wall088",                   19448,  800},
    {"Walls",           "wall089",                   19449,  800},
    {"Walls",           "wall090",                   19450,  800},
    {"Walls",           "wall091",                   19451,  800},
    {"Walls",           "wall092",                   19452,  800},
    {"Walls",           "wall093",                   19453,  800},
    {"Walls",           "wall094",                   19454,  800},
    {"Walls",           "wall095",                   19455,  800},
    {"Walls",           "wall096",                   19456,  800},
    {"Walls",           "wall097",                   19457,  800},
    {"Walls",           "wall098",                   19458,  800},
    {"Walls",           "wall099",                   19459,  800},
    {"Walls",           "wall100",                   19460,  800},
    {"Walls",           "wall101",                   19461,  800},
    {"Walls",           "wall102",                   19462,  800},
    {"Walls",           "wall103",                   19463,  800},
    {"Walls",           "wall104",                   19464,  800},
    {"Walls",           "wall105",                   19465,  800},
    {"Decor",           "Guard tower",               3279,   5000},
    {"Decor",           "Tool board",                19815,  550},
    {"Decor",           "Mailbox",                   19867,  550},
    {"Decor",           "Single key",                11746,  550},
    {"Decor",           "Oxygen cylinder",           19816,  550},
    {"Decor",           "Cauldron",                  19527,  550},
    {"Decor",           "Valve",                     2983,   550},
    {"Decor",           "Writing board",             19805,  550},
    {"Decor",           "Punching bag",              1985,   550},
    {"Decor",           "Desk fan",           		 2192,   550},
    {"Decor",           "Satellite dish",            3031,   550},
    {"Decor",           "Shopping cart",             1349,   550},
    {"Decor",           "Fireplace logs",			 19632,  550},
    {"Decor",           "Telescope",                 2600,   550},
    {"Decor",           "Ladder",                    1428,   550},
    {"Decor",           "Plank",                     2937,   550},
    {"Decor",           "Blue curtains",             2558,   550},
    {"Decor",           "Old curtains",              14443,  550},
    {"Decor",           "Blinds",                    18084,  550},
    {"Decor",           "United states flag",        11245,  550},
    {"Decor",           "Double US flag",            2614,   550},
    {"Decor",           "Confederate flag",          2048,   550},
    {"Decor",           "Basketball court",          946,    550},
    {"Decor",           "Basketball",                2114,   550},
    {"Decor",           "Fire exit sign",            11710,  550},
    {"Decor",           "Fire extinguisher",         2690,   550},
    {"Decor",           "Fire extinguisher panel",   11713,  550},
    {"Decor",           "Fire alarm",                11713,  550},
    {"Decor",           "Fire hydrant",              1211,   550},
	{"Decor",           "Crack packet",            2891,   550},
    {"Decor",           "Drug bundle",         		 1279,   550},
    {"Decor",           "White package",           	 1575,   550},
    {"Decor",           "Orange package",          	 1576,   550},
    {"Decor",           "Yellow package",          	 1577, 	 550},
    {"Decor",           "Green package",           	 1578, 	 550},
    {"Decor",           "Blue package",            	 1579,   550},
    {"Decor",           "Red package",             	 1580,   550},
    {"Decor",           "Marijuana bundle",     	 2901,   550},
    {"Decor",           "Marijuana plant",           3409,   550},
    {"Decor",           "Ashtray",           		 1510, 	 550},
    {"Decor",           "Ashtray with cigar",        1665,   550},
    {"Decor",           "Pumpkin",                   19320,  550},
    {"Decor",           "Christmas tree",            19076,  550},
    {"Decor",           "Stage",         			 19608,  2550},
    {"Decor",           "Gold record",          	 19617,  800},
    {"Decor",           "Moose head",        		 1736,   8550},
    {"Decor",           "Cow",                       19833,  1000},
    {"Decor",           "Rocking horse",             11733,  550},
    {"Decor",			"Deer",						 19315,  550},
    {"Decor",           "Boot",                      11735,  550},
    {"Decor",           "Old radiator",      		 1738,   550},
    {"Decor",           "Radiator",                  11721,  550},
    {"Decor",           "Round light",               11727,  550},
    {"Decor",           "Mop & pail",          		 1778,   550},
    {"Decor",           "Chambermaid",       		 1789,   550},
    {"Decor",           "Bucket",            		 2713,   550},
    {"Decor",           "Trolley",                   2994,   550},
    {"Decor",           "Body bags",        		 16444,  550},
    {"Decor",           "Beach ball",                1598, 	 550},
    {"Decor",           "Blackboard",        		 3077,   550},
    {"Decor",           "Dumbell",       			 3072,   550},
    {"Decor",           "Sports bag",                11745,  550},
    {"Decor",           "Portable toilet",           2984,   550},
    {"Decor",   		"Round burger shot sign", 	 2643,   550},
    {"Decor",           "Stretcher",          		 1997,   550},
    {"Decor",           "Hospital bed",              2146,   550},
    {"Decor",           "Work lamp",                 2196,   550},
    {"Decor",           "Fire bell",       			 1613,   550},
    {"Decor",           "Wooden bat",                19914,  550},
    {"Decor",           "Hand fan",                  19591,  550},
    {"Decor",           "Shop basket",               19592,  550},
    {"Decor",           "Safe door",                 19619,  550},
    {"Decor",           "Safe enclosure",            19618,  550},
    {"Decor",           "Bag of money",              1550,   550},
    {"Decor",           "Oil can",                   19621,  550},
    {"Decor",           "Wrench",                    19627,  550},
    {"Decor",           "Engine",                    19917,  550},
    {"Decor",           "Broom",                     19622,  550},
    {"Decor",           "Briefcase",                 19624,  550},
    {"Decor",           "Cigarette",                 19625,  550},
    {"Decor",           "Fire wood",                 19632,  550},
    {"Decor",           "Compacted trash",           19772,  550},
    {"Decor",           "Medic kit",                 11738,  550},
    {"Decor",           "Clip",                      19995,  550},
    {"Decor",           "Dippo lighter",             19998,  550},
    {"Decor",           "Briquettes",                19573,  550},
    {"Decor",           "Meat Sack",                 2805,   550},
    {"Decor",           "Small meat sack",           2803,   550},
    {"Decor",           "Stack of magazines",        2855,   550},
    {"Decor",           "Scattered magazines",       2852,   550},
    {"Decor",           "Scattered books",           2854,   550},
    {"Decor",           "Wooden stairs",             3361,   550},
    {"Decor",           "Long concrete stairs",      14410,  550},
    {"Decor",           "Short concrete stairs",     14416,  550},
    {"Decor",           "Short stairs",              14877,  550},
    {"Decor",           "Big window",      			 19325,  800},
    {"Decor",           "Small window",           	 19466,  550},
    {"Decor",           "Breakable window",       	 1649,   75},
    {"Decor",           "Target #1",           		 2056,   550},
    {"Decor",           "Target #2",           		 2055,   550},
    {"Decor",           "Target #3",           		 2051,   550},
    {"Decor",           "Target #4",           		 2050,   550},
    {"Decor",           "Target #5",           		 2049,   550},
    {"Decor",           "Clothes pile #1",     		 2819,   550},
    {"Decor",           "Clothes pile #2",      	 2843,   550},
    {"Decor",           "Clothes pile #3",      	 2844,   550},
    {"Decor",           "Clothes pile #4",      	 2845,   550},
    {"Decor",           "Clothes pile #5",      	 2846,   550},
   	{"Effect", 	 		"Smoke Flare",      	 	18728, 3000},
	{"Effect", 	 		"Puke",      	 		 	18722, 3000},
	{"Effect", 	 		"Molotov Fire",      	 	18701, 3000},
	{"Effect", 	 		"Coke Trail",      	 		18676, 3000},
	{"Effect", 	 		"Cam Flash (Once)",     	18670, 3000},
	{"Effect", 	 		"Flasher", 			 		345,   3000},
	{"Special",  		"Chemistry Dryer",      	3287,  1200},
	{"Special",  		"Centrifuge",      	 		19830, 31000},
	{"Special",  		"Mixer",      			 	19585, 21000},
	{"Special",  		"Reactor",      		 	2360,  2000},
	{"Special",  		"Dehydrater",      	 		2002,  900},
	{"Special",  		"Pickup Pump",      	 	1244,  6000},
	{"Special",  		"Pickup Pump (Small)",  	1008,  1000},
	{"Special",  		"Bike Pedal",      	 		2798,  1000},
	{"Special",  		"Long Exhaust",      	 	1114,  700},
	{"Graffiti", 		"Tag [GSF]", 				18659, 800},
	{"Graffiti", 		"Tag [SBF]", 				18660, 800},
	{"Graffiti", 		"Tag [VLA]", 				18661, 800},
	{"Graffiti", 		"Tag [KTB]", 				18662, 800},
	{"Graffiti", 		"Tag [SFR]", 				18663, 800},
	{"Graffiti", 		"Tag [TBD]", 				18664, 800},
	{"Graffiti", 		"Tag [LSV]", 				18665, 800},
	{"Graffiti", 		"Tag [FYB]", 				18666, 800},
	{"Graffiti", 		"Tag [RHB]", 				18667, 800},
	{"Misc",     		"Wine Glass",  		 		19818, 8550},
	{"Misc",     		"Cocktail Glass",       	19819, 8550},
	{"Misc",     		"Propbeer Glass",  	 		1666,  8550},
	{"Misc",     		"Big Cock",  		 	 	19823, 8550},
	{"Misc",     		"Red rum",  		     	19820, 8550},
	{"Misc",     		"Vodka",  		         	19821, 8550},
	{"Misc",     		"X.O",  		         	19824, 8550},
	{"Misc",    		"Damaged crate",  		 	924,   8550},
	{"Misc",     		"Top crate",  		     	1355,  8550},
	{"Misc",    	 	"Empty crate",  		 	19639, 8550},
	{"Misc",     		"Paper Messes",  		 	2674,  8550},
	{"Misc",     		"Fisinh Rod",  		 		18632, 600},
	{"Misc",     		"Rope1",  			 	 	19087, 800},
	{"Misc",     		"CJ_FLAG1",  			 	2047,  800},
	{"Misc",     		"kmb_packet",           	2891,  1000},
	{"Misc",     		"craigpackage",         	1279,  1000},
	{"Misc",     		"drug_white",           	1575,  1000},
	{"Misc",     		"drug_orange",          	1576,  1000},
	{"Misc",     		"drug_yellow",          	1577,  1000},
	{"Misc",    		"drug_green",           	1578,  1000},
	{"Misc",     		"drug_blue",            	1579,  1000},
	{"Misc",    	 	"drug_red",             	1580,  1000},
	{"Misc",     		"kmb_marijuana",        	2901,  2000},
	{"Misc",     		"grassplant",           	3409,  1000},
	{"Misc",     		"DYN_ASHTRY",           	1510,  1000},
	{"Misc",     		"propashtray1",         	1665,  1000},
	{"Misc",     		"WoodenStage1",         	19608, 2000},
	{"Misc",     		"DrumKit1",      			19609, 1000},
	{"Misc",     		"Microphone1",          	19610, 1000},
	{"Misc",     		"MicrophoneStand1",     	19611, 2000},
	{"Misc",     		"GuitarAmp1",           	19612, 1000},
	{"Misc",     		"GuitarAmp2",        	 	19613, 2000},
	{"Misc",     		"GuitarAmp3",        	 	19614, 2000},
	{"Misc",     		"GuitarAmp4",       	 	19615, 1000},
	{"Misc",     		"GuitarAmp5",       	 	19616, 1000},
	{"Misc",     		"GoldRecord1",          	19617, 1200},
	{"Misc",     		"CJ_Stags_head",        	1736,  2000},
	{"Misc",     		"CJ_Radiator_old",      	1738,  1000},
	{"Misc",     		"CJ_MOP_PAIL",          	1778,  1000},
	{"Misc",     		"CJ_chambermaid",       	1789,  2000},
	{"Misc",     		"cj_bucket",            	2713,  1000},
	{"Misc",     		"des_blackbags",        	16444, 2000},
	{"Misc",     		"nf_blackboard",        	3077,  2000},
	{"Misc",     		"kmb_dumbbell_L",       	3072,  1000},
	{"Misc",     		"kmb_dumbbell_R",       	3071,  1000},
	{"Misc",     		"portaloo",             	2984,  1200},
	{"Misc",     		"CJ_TARGET6",           	2056,  1000},
	{"Misc",     		"CJ_TARGET5",           	2055,  1000},
	{"Misc",     		"CJ_TARGET4",           	2051,  1000},
	{"Misc",     		"CJ_TARGET2",           	2050,  1000},
	{"Misc",     		"CJ_TARGET1",           	2049,  1000},
	{"Misc",     		"hos_trolley",          	1997,  1000},
	{"Misc",     		"shop_sec_cam",     	 	1886,  1000},
	{"Misc",     		"nt_firehose_01",       	1613,  1000},
	{"Misc",     		"lsmall_window01",      	19325, 2000},
	{"Misc",     		"window001",            	19466, 1200},
	{"Misc",     		"wglasssmash",          	1649,  1000},
	{"Misc",     		"Orange1",          	 	19574, 1000},
	{"Misc",     		"Apple1",     			 	19575, 1000},
	{"Misc",     		"Apple2",       		 	19576, 1000},
	{"Misc",     		"Tomato1",      		 	19577, 1000},
	{"Misc",     		"Banana1",              	19578, 1000},
	{"Misc",     		"gb_bedclothes01",      	2819,  800},
	{"Misc",     		"gb_bedclothes02",      	2843,  800},
	{"Misc",     		"gb_bedclothes03",      	2844,  800},
	{"Misc",     		"gb_bedclothes04",      	2845,  800},
	{"Misc",     		"gb_bedclothes05",      	2846,  800},
	{"Misc",     		"GB_platedirty01",      	2812,  800},
	{"Misc",     		"GB_kitchplatecln01",   	2822,  800},
	{"Misc",     		"GB_platedirty02",      	2829,  800},
	{"Misc",    	 	"GB_platedirty04",      	2830,  800},
	{"Misc",     		"GB_platedirty03",      	2831,  800},
	{"Misc",     		"GB_platedirty05",      	2832,  800},
	{"Misc",     		"GB_kitchplatecln02",   	2862,  800},
	{"Misc",     		"GB_kitchplatecln03",   	2863,  800},
	{"Misc",     		"GB_kitchplatecln04",   	2864,  800},
	{"Misc",     		"GB_kitchplatecln05",   	2865,  800},
	{"Misc",  	 		"Angel",      	 		 	3935,  5000},
	{"Misc",  	 		"Carter Statue",      	 	14467, 5000},
	{"Misc",  	 		"Broken Statue",      	 	2743,  5000},
	{"Misc",  	 		"Rocking Horse",      	 	11733, 5000},
	{"Misc",  	 		"Clothes Hanger",       	2373,  1000}
};


new const bizInteriors[][bizInt] =
{
    {"7/11", 		  			10000000, 17, -25.9733, -187.8952, 1003.5468, 0.0000},
	{"Ammunation",    		    12000000, 6,  316.2873, -169.6470, 999.6010, 0.0000},
	{"Clothing Line",    	  	10000000, 5, 226.7738, -8.2257, 1002.2108, 90.0000},
	{"Gym",         		    3000000, 7,  773.7802, -78.2581, 1000.6619, 0.0000},
	{"Resturant",  		  		10000000, 5, 372.3019, -133.1221, 1001.4921, 0.0000},
	{"Advertisement Agency",  	5000000, 3,  834.1517, 7.4096, 1004.1870, 90.0000},
	{"Club/Bar",              	8000000, 3, 1212.1400, -26.3005, 1000.9531, 180.0000}
};

enum entranceEnum
{
	eName[32],
	eInterior,
 	eWorld,
 	eMapIcon,
 	eFreeze,
	Float:ePosX,
	Float:ePosY,
	Float:ePosZ,
	Float:ePosA,
	Float:eIntX,
	Float:eIntY,
	Float:eIntZ,
	Float:eIntA,
	eVehicles	
};


enum aEnum
{
	aID,
	bool:aExists,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aPosA,
	Text3D:aText,
	aObject
};
new AtmInfo[MAX_ATMS][aEnum];


enum veEnum
{
	aID,
	bool:aExists,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aPosA,
	Text3D:aText,
	aObject
};
new VenInfo[MAX_VENDORS][veEnum];
enum mdcEnum
{
	aID,
	bool:aExists,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aPosA,
	Text3D:aText,
	aObject
};
new MdcInfo[MAX_MDC][mdcEnum];
enum baEnum
{
	aID,
	bool:aExists,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aPosA,
	Text3D:aText,
	aObject
};
new BarInfo[MAX_BAR][baEnum];
enum pgEnum
{
	aID,
	bool:aExists,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aPosA,
	Text3D:aText,
	aObject,
	aMapIcon
};

enum locEnum
{
	locID,
	locName[32],
	bool:locExists,
	Float:locPosX,
	Float:locPosY,
	Float:locPosZ
};
new LocationInfo[MAX_LOCATIONS] [locEnum];

enum tEnum
{
	tExists,
	tName[32],
	tCapturedBy[MAX_PLAYER_NAME],
	tCapturedGang,
	tType,
	tTime,
	Float:tMinX,
	Float:tMinY,
	Float:tMaxX,
	Float:tMaxY,
	Float:tHeight,
	tGangZone,
	tArea,
	tCaptureTime,
	tCapturer
};

new TurfInfo[MAX_TURFS] [tEnum];


enum sEnum
{
	sExist,
	sStart,
	sTimer,
	sInside[MAX_PLAYERS],
	sPlayerRed,
	sPlayerBlue,
	sBet[MAX_PLAYERS],
	sBetRed[MAX_PLAYERS],
	sBetBlue[MAX_PLAYERS],
	sRed[MAX_PLAYERS],
	sBlue[MAX_PLAYERS],
	sTotalRed,
	sTotalBlue
};

new SabongInfo[sEnum];
new sabongskinred[MAX_PLAYERS],
	sabongskinblue[MAX_PLAYERS];

enum SZone
{
    SZExists,
    SZEnabled,

    Float:SMinX,
    Float:SMaxX,
    Float:SMinY,
    Float:SMaxY,
    Float:SHeight,

    SzoneInt,
    SzoneVW,
    SArea,
    Szone,
};
new SafeZoneInfo[MAX_SAFEZONE][SZone];

new PGInfo[MAX_PGARAGE][pgEnum];
enum jobEnum
{
	jobName[32],
	Float:jobX,
	Float:jobY,
	Float:jobZ
};
enum suEnum
{
	aID,
	bool:aExists,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aPosA,
	Text3D:aText,
	aObject
};
new SurInfo[MAX_SURGERY][suEnum];
new const jobLocations[][jobEnum] =
{
	{"Foodpanda", 		791.7366,-1622.5624,13.3828},
	{"Trucker",     	2434.4448, -2125.6113, 13.5469},
	{"Fisherman",   	393.2632,  -2070.5837, 7.8359},
	{"Bodyguard",   	2227.4705, -1715.9694, 13.5302},
	{"Arms Dealer",  	1370.2173, -1311.9095, 13.5469},
	{"Miner",           857.8130,-23.0132,63.3025},
	{"Taxi Driver",     1748.1373, -1863.0981, 1300.5755},
	{"Drug Dealer",     2165.3611, -1673.0824, 15.0778},
	{"Lawyer",          1381.0668, -1086.6857, 100.3906},
	{"Detective",       -1651.5219,699.1163,1008.7549},
	{"Garbage Man", 	-51.9756, -1562.3760, 2000.8331},
	{"Forklifter",      2749.9468,-2451.2915,13.6484},
	{"Lumber Jack",     -525.6659,-95.2307,63.0690},
	{"Demolition",	    2483.7817, 64.9647, 26.6444},
	{"Street Sweeper",  2194.4561, -1973.1625, 13.5592},
	{"Butcher",   		-257.7483,-2176.0459,29.0666}
};

enum FuelEnum {
	Float:FuelX,
	Float:FuelY,
	Float:FuelZ
};

new const FuelStation[][FuelEnum] = {
	{1004.0070, -939.3102, 42.1797},
	{1944.3260, -1772.9254, 13.3906},
	{-90.5515, -1169.4578, 2.4079},
	{-1609.7958, -2718.2048, 48.5391},
	{-2029.4968, 156.4366, 28.9498},
	{-2408.7590, 976.0934, 45.4175},
	{-2243.9629, -2560.6477, 31.8841},
	{-1676.6323, 414.0262, 6.9484},
	{2202.2349, 2474.3494, 10.5258},
	{614.9333, 1689.7418, 6.6968},
	{-1328.8250, 2677.2173, 49.7665},
	{70.3882, 1218.6783, 18.5165},
	{654.9641, -559.7485, 16.5015},
	{654.9617, -570.4176, 16.5015},
	{1382.9899, 461.9903, 20.1245},
	{1380.9395, 457.2494, 19.9260}
};

enum atmEnum
{
	Float:atmX,
	Float:atmY,
	Float:atmZ,
	Float:atmA
};

new const atmMachines[][atmEnum] =
{
    {2228.394775, -1714.255126, 13.158315, 270.000000},
    {1928.599975, -1779.941650, 13.136871, 90.000000},
    {1102.299438, -1438.380981, 15.396868, 90.000000},
    {563.902526, -1293.948730, 16.858232, 180.000000},
    {2233.269042, -1158.040527, 25.540679, 270.000000},
    {827.125183, -1345.751220, 13.182147, 270.000000},
    {827.125183, -1346.811157, 13.182147, 270.000000},
    {1093.036621, 29.262479, 1000.309509, 0.000000},
    {-14.377381, -180.600250, 1003.186889, 180.000000},
    {9.334012, -31.044189, 1003.159179, 270.000000},
    {-24.413511, -91.806381, 1003.126708, 180.000000},
    {-21.125793, -140.438766, 1003.166564, 180.000000},
    {-24.290849, -57.946674, 1003.176574, 180.000000},
    {1274.5690,	-946.8024,	1084.5000,  0.000000}
};

enum fireEnum
{
 	fireIndex,
 	Float:fireX,
 	Float:fireY,
 	Float:fireZ,
 	Float:fireA,
};

new const randomFireSpawns[][fireEnum] =
{
    {0, 1720.231079, -1740.936889, 11.432815, 180.922180},
    {0, 1723.581298, -1740.882934, 11.432815, 180.922180},
    {0, 1726.050537, -1740.842773, 11.432815, 180.922180},
    {0, 1716.479858, -1740.926757, 11.432815, 180.922180},
    {0, 1713.465332, -1740.676391, 11.432815, 180.922180},
    {0, 1723.581298, -1740.882934, 13.742803, 180.922180},
    {0, 1726.050537, -1740.842773, 14.072817, 180.922180},
    {0, 1720.231079, -1740.936889, 14.142808, 180.922180},
    {0, 1716.479858, -1740.926757, 14.642818, 180.922180},
    {0, 1713.465332, -1740.676391, 14.992820, 180.922180},
    {0, 1729.405151, -1742.339111, 11.432815, 180.922180},
    {0, 1729.405883, -1742.379028, 14.632813, 180.922180},
    {0, 1729.453002, -1745.278564, 11.432815, 180.922180},
    {0, 1729.452514, -1745.258789, 14.632813, 180.922180},
    {0, 1729.500610, -1748.218139, 11.432815, 180.922180},
    {0, 1729.497314, -1748.038085, 14.632813, 180.922180},
    {0, 1729.548095, -1751.127929, 11.432815, 180.922180},
    {0, 1729.547485, -1751.098022, 14.632813, 180.922180},
    {0, 1729.587524, -1753.567871, 11.432815, 180.922180},
    {0, 1729.587280, -1753.588500, 14.632813, 180.922180},
    {0, 1710.109741, -1740.329467, 11.432815, 180.922180},
    {0, 1707.230224, -1740.376220, 11.432815, 180.922180},
    {0, 1704.329956, -1740.422607, 11.432815, 180.922180},
    {0, 1710.109741, -1740.329467, 14.922813, 180.922180},
    {0, 1707.150390, -1740.377075, 14.922813, 180.922180},
    {0, 1704.710327, -1740.416137, 14.922813, 180.922180},
    {1, 1972.983886, -1923.633544, 11.286870, 358.727569},
    {1, 1975.173583, -1923.682617, 11.286870, 358.727569},
    {1, 1977.542724, -1923.735229, 11.286870, 358.727569},
    {1, 1979.951782, -1923.788696, 11.286870, 358.727569},
    {1, 1982.091552, -1923.836547, 11.286870, 358.727569},
    {1, 1984.420532, -1923.887817, 11.286870, 358.727569},
    {1, 1986.800292, -1923.941040, 11.286870, 358.727569},
    {1, 1989.079589, -1923.991821, 11.286870, 358.727569},
    {1, 1991.318847, -1924.041625, 11.286870, 358.727569},
    {1, 1993.569335, -1924.091918, 11.286870, 358.727569},
    {1, 1995.939086, -1924.143676, 11.286870, 358.727569},
    {1, 1998.008422, -1924.189697, 11.286870, 358.727569},
    {1, 1998.008422, -1924.189697, 14.286870, 358.727569},
    {1, 1995.939086, -1924.143676, 14.286870, 358.727569},
    {1, 1993.569335, -1924.091918, 14.286870, 358.727569},
    {1, 1991.318847, -1924.041625, 14.286870, 358.727569},
    {1, 1989.079589, -1923.991821, 14.286870, 358.727569},
    {1, 1986.800292, -1923.941040, 14.286870, 358.727569},
    {1, 1984.420532, -1923.887817, 14.286870, 358.727569},
    {1, 1982.091552, -1923.836547, 14.286870, 358.727569},
    {1, 1979.951782, -1923.788696, 14.286870, 358.727569},
    {1, 1977.542724, -1923.735229, 14.286870, 358.727569},
    {1, 1975.173583, -1923.682617, 14.286870, 358.727569},
    {1, 1972.983886, -1923.633544, 14.286870, 358.727569},
    {2, 2422.197753, -1963.760864, 11.329407, 270.000000},
    {2, 2422.197753, -1965.961059, 11.329407, 270.000000},
    {2, 2422.538085, -1968.141479, 11.329407, 270.000000},
    {2, 2422.437988, -1970.161865, 11.329407, 270.000000},
    {2, 2422.488037, -1972.322143, 11.329407, 270.000000},
    {2, 2422.488037, -1974.422363, 11.329407, 270.000000},
    {2, 2422.488037, -1976.602905, 11.329407, 270.000000},
    {2, 2422.568115, -1978.533569, 11.329407, 270.000000},
    {2, 2422.678222, -1980.704101, 11.329407, 270.000000},
    {2, 2422.197753, -1963.760864, 13.829407, 270.000000},
    {2, 2422.197753, -1965.961059, 13.829407, 270.000000},
    {2, 2422.538085, -1968.141479, 13.829407, 270.000000},
    {2, 2422.437988, -1970.161865, 13.829407, 270.000000},
    {2, 2422.488037, -1972.322143, 13.829407, 270.000000},
    {2, 2422.488037, -1974.422363, 13.829407, 270.000000},
    {2, 2422.488037, -1976.602905, 13.829407, 270.000000},
    {2, 2422.568115, -1978.533569, 13.829407, 270.000000},
    {2, 2422.678222, -1980.704101, 13.829407, 270.000000},
    {3, 855.264770, -1038.802124, 23.446907, 215.000000},
    {3, 853.698852, -1040.191894, 23.446907, 215.000000},
    {3, 851.837646, -1041.666137, 23.446907, 215.000000},
    {3, 850.262207, -1042.989501, 23.446907, 215.000000},
    {3, 848.620910, -1044.236816, 23.446907, 215.000000},
    {3, 846.878112, -1045.530883, 23.446907, 215.000000},
    {3, 844.986694, -1046.648193, 23.446907, 215.000000},
    {3, 843.184570, -1048.032226, 23.446907, 215.000000},
    {3, 841.548889, -1049.287597, 23.446907, 215.000000},
    {3, 839.740478, -1050.627563, 23.446907, 215.000000},
    {4, 512.298522, -1522.487792, 12.252450, 90.000000},
    {4, 512.298522, -1520.456787, 12.252450, 90.000000},
    {4, 512.298522, -1518.425903, 12.252450, 90.000000},
    {4, 512.298522, -1516.165405, 12.252450, 90.000000},
    {4, 512.298522, -1514.245239, 12.252450, 90.000000},
    {4, 512.068359, -1511.944091, 12.252450, 90.000000},
    {4, 512.068359, -1509.814208, 12.252450, 90.000000},
    {4, 512.298522, -1507.425292, 12.252450, 90.000000},
    {4, 512.298522, -1505.304931, 12.252450, 90.000000},
    {4, 512.298522, -1503.384521, 12.252450, 90.000000},
    {4, 512.298522, -1501.624389, 12.252450, 90.000000},
    {4, 512.298522, -1499.298339, 12.252450, 90.000000},
    {4, 512.298522, -1522.487792, 13.752450, 90.000000},
    {4, 512.298522, -1520.456787, 13.752450, 90.000000},
    {4, 512.298522, -1518.425903, 13.752450, 90.000000},
    {4, 512.298522, -1516.165405, 13.752450, 90.000000},
    {4, 512.298522, -1514.245239, 13.752450, 90.000000},
    {4, 512.068359, -1511.944091, 13.752450, 90.000000},
    {4, 512.068359, -1509.814208, 13.752450, 90.000000},
    {4, 512.298522, -1507.425292, 13.752450, 90.000000},
    {4, 512.298522, -1505.304931, 13.752450, 90.000000},
    {4, 512.298522, -1503.384521, 13.752450, 90.000000},
    {4, 512.298522, -1501.624389, 13.752450, 90.000000},
    {4, 512.298522, -1499.298339, 13.752450, 90.000000},
    {5, 2012.939208, -1282.796264, 21.760301, 179.226959},
    {5, 2010.718627, -1282.766845, 21.760301, 179.226959},
    {5, 2008.219238, -1282.732910, 21.760301, 179.226959},
    {5, 2005.989379, -1282.702880, 21.760301, 179.226959},
    {5, 2003.889770, -1282.674316, 21.760301, 179.226959},
    {5, 2001.719848, -1282.645507, 21.760301, 179.226959},
    {5, 1999.509765, -1282.615966, 21.760301, 179.226959},
    {5, 1997.539794, -1282.589599, 21.760301, 179.226959},
    {5, 1995.449462, -1282.561889, 21.760301, 179.226959},
    {5, 1993.546508, -1282.786621, 21.760301, 179.226959},
    {5, 1991.387695, -1282.647827, 21.760301, 179.226959},
    {5, 1989.187133, -1282.638427, 21.760301, 179.226959},
    {5, 1987.196044, -1282.701660, 21.760301, 179.226959},
    {5, 1985.255126, -1282.785278, 21.760301, 179.226959},
    {5, 1983.203491, -1282.928100, 21.760301, 179.226959},
    {5, 1981.183105, -1282.901489, 21.760301, 179.226959},
    {5, 1979.322875, -1282.876708, 21.760301, 179.226959},
    {5, 1977.321655, -1282.920288, 21.760301, 179.226959},
    {5, 1975.070434, -1282.950805, 21.760301, 179.226959},
    {5, 1973.359741, -1282.997802, 21.760301, 179.226959},
    {6, 2520.653076, -1268.459106, 32.786579, 268.202911},
    {6, 2520.595947, -1270.278076, 32.786579, 268.202911},
    {6, 2520.631347, -1272.040527, 32.786579, 268.202911},
    {6, 2520.779785, -1273.676757, 32.786579, 268.202911},
    {6, 2520.882080, -1275.182128, 32.786579, 268.202911},
    {6, 2520.826904, -1276.951538, 32.786579, 268.202911},
    {6, 2520.767822, -1278.821655, 32.786579, 268.202911},
    {6, 2520.811035, -1280.303833, 32.786579, 268.202911},
    {6, 2520.782958, -1281.844604, 32.786579, 268.202911},
    {6, 2520.734863, -1283.715209, 32.786579, 268.202911},
    {6, 2521.593261, -1265.743408, 32.543724, 178.275573},
    {6, 2520.653076, -1268.459106, 34.286579, 268.202911},
    {6, 2520.595947, -1270.278076, 34.286579, 268.202911},
    {6, 2520.631347, -1272.040527, 34.286579, 268.202911},
    {6, 2520.779785, -1273.676757, 34.286579, 268.202911},
    {6, 2520.882080, -1275.182128, 34.286579, 268.202911},
    {6, 2520.826904, -1276.951538, 34.286579, 268.202911},
    {6, 2520.767822, -1278.821655, 34.286579, 268.202911},
    {6, 2520.811035, -1280.303833, 34.286579, 268.202911},
    {6, 2520.782958, -1281.844604, 34.286579, 268.202911},
    {6, 2520.734863, -1283.715209, 34.286579, 268.202911},
    {6, 2521.593261, -1265.743408, 34.043724, 178.275573},
    {7, 2420.582031, -1510.028320, 22.002197, 87.980613},
    {7, 2420.656494, -1507.899536, 22.002197, 87.980613},
    {7, 2420.729248, -1505.820434, 22.002197, 87.980613},
    {7, 2420.797607, -1503.861328, 22.002197, 87.980613},
    {7, 2420.706298, -1501.856079, 22.002197, 87.980613},
    {7, 2420.772460, -1499.967163, 22.002197, 87.980613},
    {7, 2420.558349, -1498.327880, 22.002197, 87.980613},
    {7, 2420.629638, -1496.288818, 22.002197, 87.980613},
    {7, 2420.637451, -1494.617797, 22.002197, 87.980613},
    {7, 2418.689453, -1511.844482, 21.619995, 0.000000},
    {7, 2416.989501, -1511.844482, 21.619995, 0.000000},
    {7, 2415.138427, -1511.844482, 21.619995, 0.000000},
    {7, 2413.137939, -1511.844482, 21.619995, 0.000000},
    {7, 2411.336914, -1511.844482, 21.619995, 0.000000},
    {7, 2409.695800, -1511.844482, 21.619995, 0.000000},
    {7, 2408.024169, -1511.844482, 21.619995, 0.000000},
    {7, 2406.803466, -1511.844482, 21.619995, 0.000000},
    {7, 2405.712890, -1511.844482, 21.619995, 0.000000},
    {8, 1769.756469, -1721.183105, 11.426870, 0.000000},
    {8, 1771.825805, -1721.219238, 11.426870, 0.000000},
    {8, 1774.065917, -1721.219238, 11.426870, 0.000000},
    {8, 1776.336303, -1721.219238, 11.426870, 0.000000},
    {8, 1778.396972, -1721.219238, 11.426870, 0.000000},
    {8, 1780.507202, -1721.219238, 11.426870, 0.000000},
    {8, 1782.597290, -1721.219238, 11.426870, 0.000000},
    {8, 1784.728027, -1721.219238, 11.426870, 0.000000},
    {8, 1786.797851, -1721.219238, 11.426870, 0.000000},
    {8, 1788.677001, -1721.219238, 11.426870, 0.000000},
    {8, 1790.987304, -1721.219238, 11.426870, 0.000000},
    {8, 1792.916625, -1721.219238, 11.426870, 0.000000},
    {8, 1794.967285, -1721.219238, 11.426870, 0.000000},
    {8, 1796.447021, -1721.219238, 11.426870, 0.000000},
    {8, 1798.347534, -1721.219238, 11.426870, 0.000000},
    {9, 2723.256591, -2020.687255, 11.477196, 0.000000},
    {9, 2723.196289, -2022.766357, 11.477196, 0.000000},
    {9, 2723.316894, -2024.821044, 11.477196, 0.000000},
    {9, 2723.316894, -2026.461547, 11.477196, 0.000000},
    {9, 2723.316894, -2028.431030, 11.477196, 0.000000},
    {9, 2723.316894, -2030.141479, 11.477196, 0.000000},
    {9, 2723.316894, -2031.961547, 11.477196, 0.000000},
    {9, 2723.316894, -2033.631713, 11.477196, 0.000000},
    {9, 2723.316894, -2035.612060, 11.477196, 0.000000},
    {9, 2723.316894, -2037.552978, 11.477196, 0.000000},
    {9, 2723.316894, -2038.973632, 11.477196, 0.000000}
};

IsAtChopPlace(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 12.0, -502.3416,-96.8256,62.3566) || IsPlayerInRangeOfPoint(playerid, 12.0, -498.0078,-104.8948,63.2455) || IsPlayerInRangeOfPoint(playerid, 12.0, 484.7819,-94.8587,61.1207) || IsPlayerInRangeOfPoint(playerid, 12.0, 2311.9338,-745.9619,131.2116)) {
        return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, 2324.7158,-752.8650,131.4028) || IsPlayerInRangeOfPoint(playerid, 12.0, 2341.4116,-751.3868,130.6202)) {
	    return 1;
	}
	return 0;
}
new const Float:lumberPositions[][] =
{
    {-502.3416,-96.8256,62.3566},
	{-498.0078,-104.8948,63.2455},
	{-484.7819,-94.8587,61.1207}
};

new const Float:garbageposition[][] =
{
   {953.1730, -1586.6686, 12.5432},
   {1336.3359, -1842.8516, 12.6641},
   {1315.0940, -876.3928, 38.8022},
 
   {1420.1230,-1355.8138,13.5639},
   {1599.7347,-1292.3500,17.4531},
   {1616.7582,-1201.4191,19.8070},
   {2441.8679,-1979.5502,13.1042},
   {1849.4033,-1849.3459,13.1358}
	
	
};

new const Float:minerPositions[][] =
{
    {903.3153,-37.4351,65.8531},
	{907.1631,-42.6401,65.9725},
    {898.1423,-48.3737,64.3248}
};

new const Float:butcherPositions[][] =
{
    {-257.3881,-2182.7095,29.0326},
	{-259.8216,-2183.8696,28.9919},
    {-262.6573,-2185.2129,28.9446}
};

new const Float:DemolitionPositions[][] =
{
    {2522.5854,100.3185,26.6444},
    {2475.0339,99.5752,27.5024},
    {2522.9348,90.8031,26.6444}
};
new const Float:tunePositions[][] =
{
	{2873.1821,-1975.1471,11.1538},
	{2873.0044,-1979.9648,11.1338}, 
	{2873.0981,-1983.9691,11.1938},
	{2873.0303,-1989.1290,11.1538}
};
new const Float:bshotpositions[][] =
{
	{1249.8523,-1256.4081,13.5603},
	{1245.7517,-1256.4078,13.5603}
};

new const Float:casinopos[][] =
{
	{1432.4624,1787.2888,1012.3203},
	{1439.3785,1787.0914,1012.3203},
	{1435.7523,1799.9985,1012.3203},
	{1435.8147,1805.4171,1012.3203}
};

new const Float:purgespawn[][] =
{
	{2115.5903,-1931.7908,13.5641},
	{2315.7598,-1527.2496,25.3438},
	{2216.0930,-1160.6445,25.7266},
    {1667.9138,-1056.0717,23.8984},
	{1212.6489,-1104.0787,25.0702},
	{907.1981,-1104.1714,24.2969},
	{871.2852,-1253.9772,15.0298},
	{659.7114,-1497.1577,14.8584},
	{400.5163,-1532.7402,32.2734},
	{528.5101,-1800.3960,6.0625},
	{308.7337,-1801.8379,6.3329},
	{310.2834,-1800.0060,4.5021},
	{1407.1471,-2251.4966,13.5469},
	{1696.0371,-1899.2483,13.5510},
	{1708.5596,-1572.6917,13.5469},
	{1777.3159,-1345.4290,15.7570},
	{2497.1685,-1751.5278,13.4576},
	{2466.8835,-1887.9731,13.5469},
	{2510.2664,-2398.9746,13.6250},
	{2498.8088,-2227.3167,13.3707},
	{1367.9176,-1647.6074,13.3828},
	{709.0940,-916.7225,78.5135},
	{335.5699,-1340.5081,14.5078}

};   
new const Float:verifyspawns[][] =
{
	 {1214.9092,-1816.3643,17.9530}
};
new const Float:hospitalspawns[][] =
{
	{2059.2004,1086.4427,1717.2209},
	{2061.4700,1086.8251,1717.8696},
	{2057.5161,1086.4727,1717.8696},
	{2053.5330,1086.9253,1717.8696},
    {2049.7129,1087.0764,1717.8696}
};

new const Float:paintballTSpawns[][] =
{ // TDM Arena
	//   X         Y        Z          R
	{1303.8156, 1.8952, 1001.0244, 146.4729}, // Team 1
	{1260.6339, -66.3295, 1002.4949, 318.4712} // Team 2
};
new const Float:paintballDSpawns[][] =
{ // Deagle Arena
    //   X         Y        Z          R
    {1299.0728, 2103.4670, 11.0234, 10.4824},
	{1298.5331, 2196.3188, 11.0234, 2.9623},
	{1397.0685, 2101.0967, 11.0234, 260.1884},
	{1315.7385, 2206.4363, 16.8045, 205.3078},
	{1388.1871, 2206.5242, 16.7969, 267.3483},
	{1407.4728, 2140.1846, 17.6797, 195.9077},
	{1411.0127, 2107.6167, 12.0156, 172.0940},
	{1399.2078, 2206.6550, 12.0156, 213.8402},
	{1301.0807, 2212.7083, 12.0156, 92.1932}
};
new const Float:paintballSSpawns[][] =
{ // Sniper Arena
    //   X         Y        Z          R
    {-2233.8169, -1743.4373, 480.8561, 37.9961},
	//{-2386.9824, -1841.8787, 441.4585, 356.9490},
	{-2351.9800, -1714.6760, 479.6617, 27.9689},
	{-2344.3889, -1703.7188, 483.6255, 326.3146},
	{-2425.2998, -1623.8129, 524.8774, 212.5245}
};
new const Float:paintballFSpawns[][] =
{// FFA Arena
    //   X         Y        Z          R
	{1291.2968, -0.1334, 1001.0228, 180.0000},
	{1304.6259, -28.7442, 1001.0326, 90.0000},
	{1260.6687, -0.6802, 1001.0234, 180.0000},
	{1251.9862, -26.3548, 1001.0340, 270.0000},
	{1278.8584, -44.1545, 1001.0236, 0.0000},
	{1256.5944, -61.9047, 1002.4999, 0.0000},
	{1297.3204, -61.4144, 1002.4980, 0.0000}
};
new const Float:drivingTestCPs[][] =
{
	{2488.6370,	-1941.0770,	13.0177},
	{2518.3806,	-1919.9640,	12.9894},
	{2530.6038,	-1745.4408,	12.9848},
	{2449.7024,	-1730.1162,	13.1230},
	{2434.7622,	-1592.1781,	24.7909},
	{2434.6917,	-1518.4276,	23.4358},
	{2496.6082,	-1507.2251,	23.4325},
	{2554.0537,	-1479.2701,	23.4671},
	{2573.0608,	-1381.6050,	29.8012},
	{2574.3604,	-1278.3289,	45.5683},
	{2610.6904,	-1258.2217,	47.8021},
	{2704.4834,	-1260.5757,	58.3731},
	{2719.3247,	-1268.3641,	59.1139},
	{2724.6411,	-1347.1251,	44.9542},
	{2725.0432,	-1422.4905,	31.3404},
	{2722.5569,	-1549.3140,	25.0010},
	{2723.5044,	-1640.7106,	12.5564},
	{2640.0815,	-1667.6617,	10.3581},
	{2613.5171,	-1728.3448,	11.4550},
	{2444.6726,	-1729.4215,	13.1719},
	{2412.2778,	-1760.0129,	12.9893},
	{2411.5022,	-1886.0243,	12.9873},
	{2411.5464,	-1914.0022,	12.9872},
	{2501.8459,	-1946.0211,	13.1047}
};

new const Float:cellPositions[][] =
{

	{-10.420631, 2063.483642, 727.626220, -10.420631, 2065.015136, 727.626220},
	{-10.420631, 2066.713867, 727.626220, -10.420631, 2068.273925, 727.626220},
	{-10.420631, 2069.906250, 727.626220, -10.420631, 2071.447021, 727.626220},
	{-10.420631, 2073.136474, 727.626220, -10.420631, 2074.766845, 727.626220},
	{-10.420631, 2076.307373, 727.626220, -10.420631, 2077.857421, 727.626220},
	{-10.420631, 2079.537597, 727.626220, -10.420631, 2081.127929, 727.626220},
	{-10.470632, 2082.927001, 727.626220, -10.470632, 2084.467529, 727.626220},
	{-10.470632, 2086.157226, 727.626220, -10.470632, 2087.718261, 727.626220},
	
	{1215.30004883, -1334.50000000, 797.00000000, 1215.300048, -1332.900024, 797.000000},
	{1215.29980469, -1337.69921875, 797.00000000, 1215.299804, -1336.099243, 797.000000},
	{1215.30004883, -1340.90002441, 797.00000000, 1215.300048, -1339.300048, 797.000000},
	{1215.30004883, -1340.90002441, 800.50000000, 1215.300048, -1339.300048, 800.500000},
	{1215.30004883, -1337.69995117, 800.50000000, 1215.300048, -1336.099975, 800.500000},
	{1215.30004883, -1334.50000000, 800.50000000, 1215.300048, -1332.900024, 800.500000},
	{1205.69995117, -1334.50000000, 800.50000000, 1205.699951, -1332.900024, 800.500000},
	{1205.69995117, -1337.69995117, 800.50000000, 1205.699951, -1336.099975, 800.500000},
	{1205.69995117, -1340.90002441, 800.50000000, 1205.699951, -1339.300048, 800.500000},
	{1205.69995117, -1334.50000000, 797.00000000, 1205.699951, -1332.900024, 797.000000},
	{1205.69995117, -1337.69995117, 797.00000000, 1205.699951, -1336.099975, 797.000000},
	{1205.69995117, -1340.90002441, 797.00000000, 1205.699951, -1339.300048, 797.000000},
	{1215.30004883, -1344.09997559, 800.50000000, 1215.300048, -1342.500000, 800.500000},
	{1215.30004883, -1344.09997559, 797.00000000, 1215.300048, -1342.500000, 797.000000},
	{1205.69995117, -1344.09997559, 800.50000000, 1205.699951, -1342.500000, 800.500000},
	{1205.69995117, -1344.09997559, 797.00000000, 1205.699951, -1342.500000, 797.000000}
};

/*new const Float:arrestPoints[][] =
{
    {1613.1093,1605.6957,10.8359}
};*/
new const Float:comservpoint[][] =
{
	{1472.8062,-1700.2225,14.0469},
	{1474.5122,-1692.6975,14.0469},
	{1485.8862,-1685.2899,14.0469},
	{1486.3107,-1701.4332,14.0469},
	{1478.9613,-1724.4736,13.5469},
	{1472.8354,-1724.8727,13.5469}
};
new const Float:cellSpawns[][] =
{
    {257.6978, 1422.2574, 11.3614,0.0000}
};
new const Float:highcellSpawns[][] =
{
	{-12.3625,2086.9216,728.4125,180.0000},
	{-11.6641,2084.1143,728.1357,180.0000},
	{-12.1772,2080.9673,728.3613,180.0000},
	{-12.1585,2077.2864,728.6495,180.0000},
	{-12.4079,2074.3179,728.3054,180.0000},
	{-12.6389,2070.5093,728.1780,180.0000},
	{-12.4863,2068.2869,728.1555,360.0000},
	{-12.1414,2064.5750,728.4509,360.0000},
	{-12.1696,2060.4478,728.7385,360.0000}
};

new const Float:cleanpoint[][] =
{
	{19.1612,2064.5339,717.0661},
	{17.6964,2071.4414,717.0661},
	{23.4290,2080.3696,717.0661}

};
new const Float:warehousepoint[][] =
{
	{2569.2212, -1280.9657, 1031.0051},
	{2573.0366, -1281.0332, 1031.0051},
	{2571.3652, -1288.7986, 1031.0051}
};
new const factionTypes[][] =
{
	{"Civilian"},
	{"Law enforcement"},
	{"Medical & fire"},
	{"News agency"},
	{"Government"},
	{"Hitman agency"},
	{"Federal police"},
	{"Mechanic"},
	{"Doc"},
	{"Sheriff"}
};

new const deployableItems[][] =
{
	{"Spikestrip"},
	{"Traffic cone"},
	{"Roadblock"},
	{"Barrel"},
	{"Smoke flare"}
};

new const clothingTypes[][] =
{
	{"Glasses"},
	{"Bandanas & masks"},
	{"Hats & caps"},
	{"Misc clothing"},
	{"VIPS"}
};

enum clothingEnum
{
	clothingType[20],
	clothingName[32],
	clothingModel,
	clothingBone
};

new const clothingArray[][clothingEnum] =
{
    {"Glasses",		        "Red tinted shades",        19006, 2},
    {"Glasses",		        "Brown tinted shades",      19007, 2},
    {"Glasses",		        "Green tinted shades",      19008, 2},
    {"Glasses",		        "Blue tinted shades",       19009, 2},
    {"Glasses",		        "Pink tinted shades",       19010, 2},
    {"Glasses",		        "Spiralled shades",         19011, 2},
    {"Glasses",		        "Black tinted shades",      19012, 2},
    {"Glasses",		        "Gag glasses",       	    19013, 2},
    {"Glasses",		        "Checkered shades",         19014, 2},
    {"Glasses",		        "Reading glasses",    	    19015, 2},
    {"Glasses",		        "X-Ray glasses",            19016, 2},
    {"Glasses",		        "Plastic black shades",     19017, 2},
    {"Glasses",		        "Plastic orange shades",    19018, 2},
    {"Glasses",		        "Plastic red shades",       19019, 2},
    {"Glasses",		        "Plastic blue shades",      19020, 2},
    {"Glasses",		        "Plastic green shades",     19021, 2},
    {"Glasses",		        "Clear sunglasses",         19022, 2},
    {"Glasses",		        "Blue sunglasses",          19023, 2},
    {"Glasses",		        "Purple sunglasses",        19024, 2},
    {"Glasses",		        "Pink sunglasses",          19025, 2},
    {"Glasses",		        "Red sunglasses",           19026, 2},
    {"Glasses",		        "Brown sunglasses",         19027, 2},
    {"Glasses",		        "Yellow sunglasses",        19028, 2},
    {"Glasses",		        "Green sunglasses",         19029, 2},
    {"Glasses",		        "Plain brown shades",       19030, 2},
    {"Glasses",		        "Plain yellow shades",      19031, 2},
    {"Glasses",		        "Plain red shades",         19032, 2},
    {"Glasses",		        "Plain black shades",       19033, 2},
    {"Glasses",		        "Checkered glasses",        19034, 2},
    {"Glasses",		        "Wavy glasses",             19035, 2},
    {"Bandanas & masks",	"Balaclava", 			    19801, 2},
    {"Bandanas & masks",	"Dark blue bandana", 	   	18891, 2},
    {"Bandanas & masks",	"Red bandana", 			   	18892, 2},
    {"Bandanas & masks",	"Red & white bandana", 	   	18893, 2},
    {"Bandanas & masks",	"Orange star bandana", 	   	18894, 2},
    {"Bandanas & masks",	"Skull bandana", 		   	18895, 2},
    {"Bandanas & masks",	"Black bandana", 		   	18896, 2},
    {"Bandanas & masks",	"Blue bandana", 		   	18897, 2},
    {"Bandanas & masks",	"Green bandana", 		   	18898, 2},
    {"Bandanas & masks",	"Pink bandana", 		   	18899, 2},
    {"Bandanas & masks",	"Hippie bandana", 		   	18900, 2},
    {"Bandanas & masks",	"Tiger bandana", 		   	18901, 2},
    {"Bandanas & masks",	"Yellow bandana",		   	18902, 2},
    {"Bandanas & masks",	"Purple bandana", 		   	18903, 2},
    {"Bandanas & masks",	"Cool blue bandana", 	   	18904, 2},
    {"Bandanas & masks",	"Brown bandana", 		   	18905, 2},
    {"Bandanas & masks",	"Skull bandana mask", 	   	18911, 2},
    {"Bandanas & masks",	"Black bandana mask", 	   	18912, 2},
    {"Bandanas & masks",	"Grove bandana mask", 	   	18913, 2},
    {"Bandanas & masks",	"Camo bandana mask", 	   	18914, 2},
    {"Bandanas & masks",	"Hippie bandana mask", 	   	18915, 2},
    {"Bandanas & masks",	"Yellow bandana mask", 	   	18916, 2},
    {"Bandanas & masks",	"Blue bandana mask", 	   	18917, 2},
    {"Bandanas & masks",	"Green bandana mask", 	   	18918, 2},
    {"Bandanas & masks",	"White bandana mask", 	   	18919, 2},
    {"Bandanas & masks",	"Flower bandana mask", 	   	18920, 2},
    {"Bandanas & masks",	"White hockey mask", 	    19036, 2},
	{"Bandanas & masks",	"Red hockey mask", 		    19037, 2},
	{"Bandanas & masks",	"Green hockey mask", 	    19038, 2},
	{"Bandanas & masks",	"Sexy mask", 			    19557, 2},
	{"Bandanas & masks",	"Devil mask", 			   	11704, 2},
	{"Bandanas & masks",	"Gas mask", 			    19472, 2},
	{"Bandanas & masks",	"Zorro mask", 			   	18974, 2},
	{"Hats & caps",         "Santa hat",                19064, 2},
    {"Hats & caps",			"Dude hat", 			    19160, 2},
	{"Hats & caps",			"Top hat", 				    19352, 2},
    {"Hats & caps",			"Witch hat",                19528, 2},
    {"Hats & caps",			"Yellow fire hat", 		    19330, 2},
	{"Hats & caps",			"Black fire hat", 	  	    19331, 2},
	{"Hats & caps",			"Black beret", 			   	18921, 2},
    {"Hats & caps",			"Brown beret", 			   	18922, 2},
    {"Hats & caps",			"Blue beret", 			   	18923, 2},
    {"Hats & caps",			"Camo beret", 			   	18924, 2},
    {"Hats & caps",			"Red beret", 			   	18925, 2},
    {"Hats & caps",			"Camo cap", 			   	18926, 2},
    {"Hats & caps",			"Wave cap", 			   	18927, 2},
    {"Hats & caps",			"Hippy cap", 			   	18928, 2},
    {"Hats & caps",			"Green cap", 			   	18929, 2},
    {"Hats & caps",			"Red cap", 				   	18930, 2},
    {"Hats & caps",			"Blue cap", 			  	18931, 2},
    {"Hats & caps",			"Orange cap", 			   	18932, 2},
    {"Hats & caps",			"White cap", 			   	18933, 2},
    {"Hats & caps",			"Plain pink cap", 		   	18934, 2},
    {"Hats & caps",			"Plain yellow cap", 	   	18935, 2},
    {"Hats & caps",			"Blue back cap", 		   	18939, 2},
    {"Hats & caps",			"Wave back cap", 		   	18940, 2},
    {"Hats & caps",			"Black back cap", 		   	18941, 2},
    {"Hats & caps",			"White back cap", 		   	18942, 2},
    {"Hats & caps",			"Green back cap", 		   	18943, 2},
    {"Hats & caps",			"Red boater hat", 		   	18944, 2},
    {"Hats & caps",			"Green boater hat", 	   	18945, 2},
    {"Hats & caps",			"Striped boater hat", 	   	18946, 2},
    {"Hats & caps",			"Black bowler hat", 	   	18947, 2},
    {"Hats & caps",			"White bowler hat",		    19488, 2},
    {"Hats & caps",			"Blue bowler hat", 		   	18948, 2},
    {"Hats & caps",			"Green bowler hat", 	   	18949, 2},
    {"Hats & caps",			"Red bowler hat", 		   	18950, 2},
    {"Hats & caps",			"Yellow bowler hat", 	   	18951, 2},
    {"Hats & caps",			"Black knit cap", 		   	18953, 2},
    {"Hats & caps",			"White knit cap", 		   	18954, 2},
    {"Hats & caps",			"Hippie hat", 			   	18960, 2},
    {"Hats & caps",			"Born 2 truck hat", 	   	18961, 2},
    {"Hats & caps",			"Brown cowboy hat", 	    19098, 2},
	{"Hats & caps",			"Black cowboy hat",		    19096, 2},
    {"Hats & caps",			"Skully cap", 			   	18964, 2},
    {"Hats & caps",			"Black bucket hat", 	   	18967, 2},
    {"Hats & caps",			"Plaid bucket hat", 	   	18968, 2},
    {"Hats & caps",			"Zig-Zag bucket hat", 	   	18969, 2},
    {"Hats & caps",			"Camo bucket hat", 		    19106, 2},
    {"Hats & caps",			"Hippy hat", 			    19113, 2},
    {"Hats & caps",			"Tiger hat", 			   	18970, 2},
    {"Hats & caps",			"Hard hat", 			   	18638, 2},
	{"Hats & caps",			"Straw hat", 			    19553, 2},
	{"Hats & caps",			"Pizza hat", 			    19558, 2},
	{"Hats & caps",			"Beanie hat", 			    19554, 2},
    {"Hats & caps",			"Checkered fedora", 	   	18971, 2},
    {"Hats & caps",			"Orange fedora", 		   	18972, 2},
    {"Hats & caps",			"Yellow fedora", 		   	18973, 2},
    {"Hats & caps",			"Camoflauge helmet", 	    19101, 2},
    {"Hats & caps",			"Black helmet", 		    19116, 2},
    {"Hats & caps",			"Red helmet", 			    19117, 2},
    {"Hats & caps",			"Green helmet",	 		    19118, 2},
    {"Hats & caps",			"Blue helmet", 			    19119, 2},
    {"Hats & caps",			"Yellow helmet", 		    19120, 2},
    {"Hats & caps",			"Boxing helmet", 		   	18952, 2},
    {"Hats & caps",			"Motorcycle helmet",   	   	18645, 2},
    {"Misc clothing",	    "Gold watch",	 			19039, 6},
	{"Misc clothing",	    "Silver watch", 			19040, 6},
	{"Misc clothing",	    "Bronze watch", 			19041, 6},
	{"Misc clothing",	    "Yellow watch", 			19042, 6},
	{"Misc clothing",	    "White watch", 			 	19043, 6},
	{"Misc clothing",	    "Purple watch", 			19044, 6},
	{"Misc clothing",	    "Pink watch", 				19045, 6},
	{"Misc clothing",	    "Green watch", 			 	19046, 6},
	{"Misc clothing",	    "Blue watch", 				19047, 6},
	{"Misc clothing",	    "Camo watch", 				19053, 6},
	{"Misc clothing",	    "White headphones", 		19421, 2},
    {"Misc clothing",	    "Black headphones", 		19422, 2},
    {"Misc clothing",	    "Orange headphones", 		19423, 2},
    {"Misc clothing",	    "Blue headphones", 		 	19424, 2},
	{"Misc clothing",	    "Red clown hair", 			19274, 2},
	{"Misc clothing",	    "Pilot hat", 				19520, 2},
	{"Misc clothing",       "Bag of money",             1550,  1},
	{"Misc clothing",	    "Shop basket", 			 	19592, 6},
	{"Misc clothing",	    "Oil can", 				 	19621, 6},
	{"Misc clothing",	    "Broom", 				 	19622, 1},
	{"Misc clothing",	    "Camera", 					19623, 6},
	{"Misc clothing",	    "Briefcase", 				19624, 6},
	{"Misc clothing",	    "Cigarette", 				19625, 2},
	{"Misc clothing",	    "Spade", 					19626, 1},
	{"Misc clothing",	    "Scarf", 					19469, 2},
	{"Misc clothing",	    "Eye patch", 				19085, 2},
	{"Misc clothing",	    "Hiker backpack", 			19559, 1},
	{"Misc clothing",	    "Construction vest", 		19904, 1},
	{"Misc clothing",	    "Police radio", 			19942, 1},
	{"Misc clothing",	    "Bodybag", 				 	19944, 1},
	{"Misc clothing",	    "Sports bag", 				11745, 1},
    {"Misc clothing",	    "Fedora", 					18639, 2},
    {"Misc clothing",	    "Afro", 					18640, 2},
    {"Misc clothing",	    "Flashlight",          		18641, 6},
    {"Misc clothing",	    "Hammer",              		18635, 6},
    {"Misc clothing",	    "Wrench",              		18633, 2},
    {"Misc clothing",       "SWATArmour",               19142, 2},
    {"Misc clothing",       "DRINK",               		1484, 2},
    {"Misc clothing",       "Burrito",              	2769, 2},
    {"Misc clothing",       "PIZZA",               		19580, 2},
    {"Misc clothing",       "HOTDOG",               	19346, 2},
	{"VIPS",	    		"Holster", 				 	19773, 8},
	{"VIPS",	    		"Police radio", 			19942, 1},
	{"VIPS",				"Gimp mask", 			    19163, 2},
	{"VIPS",	    		"Left boxing glove", 		19555, 5},
	{"VIPS",	    		"Right boxing glove", 		19556, 6},
	{"VIPS",	    		"Burger", 					19094, 6},
	{"VIPS",	    		"Black hair", 				19077, 2},
	{"VIPS",				"Don't shoot me hat", 	    19114, 2},
    {"VIPS",				"Skull hat", 			    19115, 2},
	{"VIPS",				"CJElvisHead", 			    18963, 2},
    {"VIPS",	    		"Grey clown hair", 		 	19518, 2},
    {"VIPS",	    		"Grey hair", 				19517, 2},
	{"VIPS",	    		"Bass guitar", 			 	19317, 1},
	{"VIPS",	    		"White guitar", 		 	19318, 1},
	{"VIPS",	    		"Black guitar", 			19319, 1},
	{"VIPS",				"TheParrot2",				19079, 2},
	{"VIPS",     			"Katana",         			3028,  2},
    {"VIPS",     			"Japanese Sword",           19590, 2},
    {"VIPS",     			"Laser pointer purple",     19081, 2},
    {"VIPS",     			"Laser pointer yellow",     19084, 2},
    {"VIPS",     			"Laser pointer1",    		18643, 2},
    {"VIPS",     			"Laser pointer2",           18643, 2},
    {"VIPS",     			"Laser pointer3",           19082, 2},
    {"VIPS",     			"Laser pointer4",           19083, 2},
    {"VIPS",     			"Swat Helmet",	            19141, 2},
    {"VIPS",     			"Police Cap",	            19162, 2}

};

enum copEnum
{
	cModel,
	cBone,
	cName[24]
};
new const copClothing[][copEnum] =
{
	{18636, 2, "Police cap"},
	{19521, 2, "Police hat"},
	{19099, 2, "Black rim hat"},
	{19100, 2, "Brown rim hat"},
	{19139, 2, "Red shades"},
	{19140, 2, "Blue shades"},
	{19138, 2, "Black shades"},
	{19774, 1, "Badge"},
	{19942, 1, "Radio"},
	{19162, 2, "Blue cap"},
	{19161, 2, "Black cap"},
	{19200, 2, "Bike helmet"},
	{18637, 1, "Riot shield"},
	{19141, 2, "SWAT helmet"},
	{19142, 1, "SWAT armor"},
	{19515, 1, "Grey armor"},
	{19514, 2, "Grey helmet"},
	{19777, 1, "FBI insignia"},
	{19776, 1, "FBI ID card"},
	{18642, 1, "Taser"},
	{18641, 1, "Flashlight"},
	{11749, 1, "Handcuffs"},
	{11750, 1, "Closed cuff"},
	{19783, 1, "Police badge"},
	{19784, 1, "Police badge 2"},
	{19785, 1, "Senior Ld. badge"},
	{19778, 1, "Detective badge"},
	{19779, 1, "Detective badge 2"},
	{19780, 1, "Detective badge 3"},
	{19781, 1, "Sergeant badge"},
	{19782, 1, "Sergeant badge 2"}
};
enum carEnum
{
	carCategory[16],
	carModel,
	cARPrice
};

new const vehicleArray[][carEnum] =
{
	// CATEGORY        // MODEL|PRICE
	{"Cars",		404, 100000  },
	{"Cars",		401, 120000  },
	{"Cars",		405,  130000 },
	{"Cars",		419,  122000 },
	{"Cars",		439, 105000  },
	{"Cars",		436,  70000  },
	{"Cars",		410, 60000   },
	{"Cars",		458, 150000  },
	{"Cars",		479, 60000   },
	{"Cars",		526,  140000 },
	{"Cars",		527,  110000 },
	{"Cars",		529,  250000 },
	{"Cars",		546, 220000  },
	{"Cars",		534,  250000 },
	{"Cars",		540,  280000 },
	{"Cars",		542,  155000 },
	{"Cars",		566,  110000 },
	{"Cars",		549, 100000  },
	{"Cars",		547, 101000  },
	{"Cars",		604, 70000   },
	{"Cars",		605,  60000  },
	{"Cars",		516 ,120000  },
	{"Cars",		426 , 195000 },
	{"Cars",		421 ,140000  },
	{"Cars",		492 ,110000  },
	{"Cars",		412 , 100000 },
	{"Cars",		507 ,150000  },
	{"Cars",		491 ,110000  },
	{"Cars",		551 ,150000  },
	{"Cars",		600 , 100000 },
	{"Cars", 	480, 300000      },
	{"Cars", 	517, 120000      },
	{"Cars", 	518, 100000      },
	{"Cars", 	475, 300000      },
	{"Cars", 	567, 280000      },
	{"Cars",		422, 320000  },
	{"Cars",		543, 100000  },
	{"Cars",		567, 140000  },
	{"Bike", 	467,  250000      },
	{"Bike", 	521,  200000      },
	{"Bike", 	581,  300000      },
	{"Bike", 	466,  180000      },
	{"Bike", 	462,  120000      },
	{"Bike", 	461,  290000      }

\
};



enum bizInts
{
	intName[32],
	intID,
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA
};

new const bizInteriorArray[][bizInts] =
{
	{"24/7 (Version 1)", 		17, -25.9733, -187.8952, 1003.5468, 0.0000},
    {"24/7 (Version 2)", 		10, 6.0159, -31.0345, 1003.5493, 0.0000},
    {"24/7 (Version 3)", 		18, -30.9967, -91.4492, 1003.5468, 0.0000},
    {"24/7 (Version 4)", 		16, -25.9416, -140.6656, 1003.5468, 0.0000},
    {"24/7 (Version 5)", 		4, 	-27.3069, -30.8341, 1003.5573, 0.0000},
    {"24/7 (Version 6)", 		6, 	-27.4368, -57.4361, 1003.5468, 0.0000},
    {"Ammunation (Version 1)", 	7, 	315.7398, -143.1958, 999.6016, 0.0000},
    {"Ammunation (Version 2)", 	1, 	285.3190, -41.1576, 1001.5156, 0.0000},
    {"Ammunation (Version 3)", 	4, 	285.7825, -85.9860, 1001.5228, 0.0000},
    {"Ammunation (Version 4)", 	6, 	296.7723, -111.6399, 1001.5156, 0.0000},
    {"Ammunation (version 5)", 	6, 	316.2890, -169.7619, 999.6010, 0.0000},
    {"Binco", 					15, 207.6329, -110.7673, 1005.1328, 0.0000},
    {"Pro-Laps", 				3, 	206.9459, -139.5319, 1003.5078, 0.0000},
    {"Didier Sachs", 			14,	204.2969, -168.3488, 1000.5233, 0.0000},
    {"Victim", 					5, 	226.7738, -8.2257, 1002.2108, 90.0000},
    {"Zip", 					18, 161.3670, -96.4953, 1001.8046, 0.0000},
    {"SubUrban", 				1, 	203.7149, -50.2200, 1001.8046, 0.0000},
    {"Betting (Version 1)", 	3,  834.1848, 7.3453, 1004.1870, 90.0000},
	{"Betting (Version 2)",     1,  -2170.3428, 640.7771, 1052.3817, 0.0000},
	{"Donut Shop", 				17, 377.0733, -193.0574, 1000.6400, 0.0000},
    {"Burger Shot", 			10, 363.1346, -74.8441, 1001.5078, 315.0000},
    {"Pizza Stack", 			5, 	372.3019, -133.1221, 1001.4921, 0.0000},
    {"Cluckin' Bell", 			9, 	364.8536, -11.1400, 1001.8516, 0.0000},
	{"Marco's Bistro",          1,  -795.0334, 489.8574, 1376.1953, 0.0000},
	{"Cafeteria",               4,  459.7685, -88.6637, 999.5547, 90.0000},
    {"Barber Shop", 			3, 	418.5545, -83.9392, 1001.8046, 0.0000},
    {"Tattoo Shop", 			3, 	-204.4362, -43.8119, 1002.2733, 0.0000},
    {"Ganton Gym", 				5, 	772.2800, -4.7154, 1000.7288, 0.0000},
    {"Las Ventura Gym", 		7, 	773.8508, -78.3952, 1000.6621, 0.0000},
    {"San Fierro Gym", 			6, 	774.1206, -49.9538, 1000.5858, 0.0000},
    {"Sex Shop", 				3, 	-100.3628, -24.4456, 1000.7188, 0.0000},
    {"RC Shop", 				6, 	-2240.3610, 128.2816, 1035.4210, 270.0000},
    {"Four Dragons Casino", 	10, 2018.2132, 1017.7788, 996.8750, 90.0000},
    {"Caligulas Casino", 		1, 	2234.0485, 1714.1568, 1012.3596, 180.0000},
    {"Red Sands Casino", 		12, 1133.1075, -15.3114, 1000.6796, 0.0000},
    {"Alhambra", 				17, 493.3728, -23.9953, 1000.6796, 0.0000},
    {"Pig Pen", 				2, 	1204.7922, -13.2587, 1000.9218, 0.0000},
    {"Big Spread Ranch", 		3, 	1212.1400, -26.3005, 1000.9531, 180.0000},
    {"Ten Green Bottles", 		11, 501.9559, -67.9867, 998.7578, 180.0000},
    {"Lil' Probe Inn",          18, -228.7570, 1401.2421, 27.7656, 270.0000},
    {"Warehouse",               18, 1307.0178, 4.1193, 1001.0289, 90.0000}
};

enum intEnum
{
    intName[32],
    intID,
    Float:intX,
    Float:intY,
    Float:intZ,
    Float:intA
}

new const interiorArray[][intEnum] =
{
    {"24/7 (Version 1)", 17, -25.7220, -187.8215, 1003.5468, 5.0760},
    {"24/7 (Version 2)", 10, 6.0854, -28.8966, 1003.5493, 5.0363},
    {"24/7 (Version 3)", 18, -30.9874, -89.6806, 1003.5468, 359.8399},
    {"24/7 (Version 4)", 16, -26.1856, -140.9163, 1003.5468, 2.9086},
    {"24/7 (Version 5)", 4, -27.8439, -26.6737, 1003.5573, 184.3117},
    {"24/7 (Version 6)", 6, -26.8339, -55.5844, 1003.5468, 3.9528},
    {"8-Track Stadium", 7, -1403.0114, -250.4526, 1043.5340, 355.8576},
    {"Abandoned AC Tower", 10, 419.8934, 2537.1154, 10.0000, 67.6537},
    {"Ammunation (Version 1)", 7, 315.2438, -140.8858, 999.6016, 7.4225},
    {"Ammunation (Version 2)", 1, 285.8359, -39.0166, 1001.5156, 0.7529},
    {"Ammunation (Version 3)", 4, 291.7626, -80.1305, 1001.5156, 290.2195},
    {"Ammunation (Version 4)", 6, 297.1440, -109.8702, 1001.5156, 20.2254},
    {"Ammunation (Version 5)", 6, 316.5025, -167.6271, 999.5938, 10.3030},
    {"Andromada", 9, 315.4544, 976.5972, 1960.8509, 359.6368},
    {"Angel Pine Trailer", 2, 1.1851, -3.2386, 999.4284, 87.5718},
    {"Area 69", 0, 215.1515, 1874.0577, 13.1406, 177.5538},
    {"Atrium", 18, 1727.2851, -1642.9449, 20.2254, 172.4192},
    {"B Dup's Apartment", 3, 1527.0467, -12.0235, 1002.0971, 350.0013},
    {"B Dup's Crack Palace", 2, 1523.5096, -47.8209, 1002.2697, 262.7037},
    {"Bar", 11, 501.9577, -70.5646, 998.7578, 171.5706},
    {"Barbara's Love nest", 5, 322.5014, 303.6906, 999.1483, 8.1745},
    {"Barber Shop (version 1)", 3, 418.4666, -80.4595, 1001.8046, 343.2358},
    {"Barber Shop (version 2)", 12, 411.9707, -51.9216, 1001.8983, 173.3448},
    {"Barber Shop (version 3)", 2, 414.2987, -18.8043, 1001.8046, 41.4263},
    {"Big Smoke's Crack Palace", 2, 2536.5322, -1294.8425, 1044.1250, 254.9548},
    {"Bike School (version 1)", 3, 1494.8587, 1306.4798, 1093.2951, 196.0650},
    {"Bike School (version 2)", 0, 1168.5118, 1360.1145, 10.9293, 196.5933},
    {"Binco", 15, 207.5218, -109.7446, 1005.1328, 358.6199},
    {"Blastin' Fools Records", 3, 1037.8276, 0.3970, 1001.2844, 353.9335},
    {"Blood Bowl Stadium", 15, -1417.8927, 932.4481, 1041.5312, 0.7013},
    {"Blueberry Liquor Store", 0, 255.2082, -59.6753, 1.5701, 1.4644},
    {"Brothel 1", 3, 974.0177, -9.5937, 1001.1483, 22.6044},
    {"Brothel 2", 3, 961.9307, -51.9071, 1001.1171, 95.5381},
    {"Budget Inn Motel Room", 12, 446.3247, 509.9660, 1001.4193, 330.5671},
    {"Burger Shot", 10, 366.0248, -73.3478, 1001.5078, 292.0083},
    {"Burglary House 1", 15, 295.1390, 1473.3719, 1080.2578, 352.9526},
    {"Burglary House 2", 3, 234.6087, 1187.8194, 1080.2578, 349.4844},
    {"Burglary House 3", 5, 227.7559, 1114.3842, 1080.9920, 266.2622},
    {"Burglary House 4", 4, 261.1163, 1287.2197, 1080.2578, 178.9149},
    {"Burglary House 5", 4, 221.6766, 1142.4962, 1082.6092, 184.9618},
    {"Burglary House 6", 10, 24.3768, 1341.1827, 1084.3750, 8.3304},
    {"Burglary House 7", 4, -262.1759, 1456.6158, 1084.3670, 82.4589},
    {"Burglary House 8", 5, 22.8610, 1404.9165, 1084.4295, 349.6158},
    {"Burglary House 9", 5, 140.3679, 1367.8835, 1083.8620, 349.2372},
    {"Burglary House 10", 6, 234.2825, 1065.2290, 1084.2099, 4.3864},
    {"Burglary House 11", 6, -68.5145, 1353.8485, 1080.2109, 3.5741},
    {"Burglary House 12", 2, 225.5706, 1240.0643, 1082.1406, 96.2852},
    {"Burglary House 13", 15, -285.2510, 1471.1970, 1084.3750, 85.6547},
    {"Burglary House 14", 8, -42.5265, 1408.2298, 1084.4295, 172.0679},
    {"Burglary House 15", 9, 84.9244, 1324.2983, 1083.8592, 159.5581},
    {"Burglary House 16", 9, 260.7420, 1238.2259, 1084.2578, 84.3084},
    {"Burglary House 17", 1, 224.2879, 1289.1905, 1082.1406, 359.8680},
    {"Burglary House 18", 5, 239.2819, 1114.1989, 1080.9920, 270.2654},
    {"Burglary House 19", 2, 446.6260, 1397.7380, 1084.3045, 343.9645},
    {"Burning Desire Building", 5, 2350.1596, -1181.0656, 1027.9764, 99.1864},
    {"Caligula's Casino", 1, 2233.9362, 1711.8038, 1011.6312, 184.3890},
    {"Caligula's Roof", 1, 2268.5156, 1647.7680, 1084.2342, 99.7331},
    {"Casino (Redsands West)", 12, 1133.3498, -7.8460, 1000.6796, 165.8482},
    {"Cemetary", 0, 818.7714, -1102.8687, 25.7940, 91.1437},
    {"Club", 17, 493.1441, -24.2607, 1000.6796, 356.9862},
    {"Cluckin' Bell", 9, 366.0002, -9.4336, 1001.8516, 160.5278},
    {"Cobra Gym", 6, 773.8886, -47.7696, 1000.5858, 10.7159},
    {"Colonel Furhberger's", 8, 2807.3603, -1171.7048, 1025.5703, 193.7117},
    {"Crack Den", 5, 227.3921, 1114.6572, 1080.9985, 267.4590},
    {"Denise's Bedroom", 1, 245.2306, 304.7632, 999.1483, 273.4364},
    {"Didier Sachs", 14, 204.1658, -165.7678, 1000.5233, 181.7583},
    {"Dillimore Gas Station", 0, 663.0587, -573.6273, 16.3358, 264.9829},
    {"Diner 1", 5, 454.9851, -107.2546, 999.4376, 309.0195},
    {"Dirtbike Stadium", 4, -1421.5616, -663.8261, 1059.5567, 170.9340},
    {"Driving School", 3, -2031.1196, -115.8285, 1035.1717, 190.1876},
    {"Fanny Batter's Whore House", 6, 748.4622, 1438.2376, 1102.9531, 0.6068},
    {"Four Dragons", 10, 2016.1156, 1017.1541, 996.8750, 88.0055},
    {"Francis International Airport", 14, -1813.2130, -58.0120, 1058.9641, 335.3197},
    {"Ganton Gym", 5, 770.8032, -0.7031, 1000.7266, 22.8598},
    {"Helena's Barn", 3, 290.6228, 309.0621, 999.1483, 89.9162},
    {"Inside Track Betting", 3, 830.6016, 5.9404, 1004.1796, 125.8149},
    {"Jay's Diner", 4, 449.0172, -88.9894, 999.5546, 89.6606},
    {"Jefferson Motel", 15, 2217.2810, -1150.5349, 1025.7967, 273.7326},
    {"Jet Interior", 1, 1.5491, 23.3183, 1199.5937, 359.9053},
    {"K.A.C.C. Military Fuels Depot", 0, 2548.4807, 2823.7429, 10.8203, 270.6003},
    {"Katie's Lovenest", 2, 269.6405, 305.9512, 999.1483, 215.6625},
    {"Kickstart Stadium", 14, -1420.4277, 1616.9221, 1052.5312, 159.1255},
    {"Las Ventura Gym", 7, 773.7318, -74.6957, 1000.6541, 5.2304},
    {"Las Ventura Police Department", 3, 288.4721, 170.0646, 1007.1793, 22.0477},
    {"Las Ventura Tattoo parlor", 3, -201.2236, -43.2463, 1002.2733, 45.8613},
    {"Liberty City", 1, -741.8494, 493.0036, 1371.9764, 71.7780},
    {"Lil' Probe Inn", 18, -227.5702, 1401.5544, 27.7656, 269.2976},
    {"Loco Low Co", 2, 611.3535, -77.5574, 997.9995, 320.9263},
    {"Los Santos Airport", 14, -1864.9433, 55.7323, 1055.5274, 85.8541},
    {"Los Santos Police Department", 6, 246.6694, 65.8039, 1003.6406, 7.9562},
    {"Los Santos Tattoo Parlor", 16, -202.8419, -24.0324, 1002.2733, 252.8153},
    {"Lost San Fierro Tattoo parlor", 17, -202.9380, -6.7006, 1002.2733, 204.2693},
    {"Madd Dogg's Mansion", 5, 1267.8405, -776.9586, 1091.9062, 231.3417},
    {"Michelle's Love Nest", 4, 306.1965, 307.8190, 1003.3046, 203.1354},
    {"Millie's Bedroom", 6, 344.9984, 307.1824, 999.1557, 193.6430},
    {"OG Loc's House", 3, 512.9290, -11.6927, 1001.5653, 198.7669},
    {"Old Venturas Strip Casino", 2, 2236.6997, -1078.9477, 1049.0234, 2.5706},
    {"Otto's Autos", 0, -1658.1656, 1215.0002, 7.2500, 103.9074},
    {"Oval Stadium", 1, -1402.6612, 106.3897, 1032.2734, 105.1354},
    {"Palamino Bank", 0, 2306.3825, -15.2363, 26.7495, 274.4898},
    {"Palamino Diner", 0, 2331.8984, 6.7814, 26.5032, 100.2357},
    {"Pizza Stack", 5, 372.5563, -131.3607, 1001.4921, 354.2283},
    {"Planning Department", 3, 386.5259, 173.6381, 1008.3828, 63.7397},
    {"Pro-Laps", 3, 206.4627, -137.7075, 1003.0938, 10.9347},
    {"RC Battlefield", 10, -1129.8907, 1057.5423, 1346.4139, 274.5267},
    {"Rosenberg's Office", 2, 2182.2016, 1628.5848, 1043.8723, 224.8601},
    {"Rusty Brown's Donuts", 17, 378.0260, -190.5155, 1000.6328, 141.0245},
    {"Ryder's House", 2, 2447.8703, -1704.4509, 1013.5078, 314.5252},
    {"Safe House (version 1)", 5, 2233.6918, -1112.8105, 1050.8828, 8.6483},
    {"Safe House (version 2)", 9, 2319.1271, -1023.9561, 1050.2109, 167.3959},
    {"Safe House (version 3)", 10, 2261.0976, -1137.8833, 1050.6328, 266.8800},
    {"San Fierro Garage", 1, -2041.2332, 178.3968, 28.8465, 156.2153},
    {"San Fierro Police Department", 10, 246.0688, 108.9701, 1003.2188, 0.2921},
    {"Secret Valley Diner", 6, 442.1293, -52.4780, 999.7166, 177.9394},
    {"Sex Shop", 3, -100.2674, -22.9375, 1000.7188, 17.2849},
    {"Sherman Dam", 17, -944.2401, 1886.1534, 5.0050, 179.8547},
    {"Sindacco Abatoir", 1, 963.0584, 2159.7563, 1011.0302, 175.3130},
    {"SubUrban", 1, 204.1174, -46.8045, 1001.8046, 357.5776},
    {"Sweet's House", 1, 2527.0175, -1679.2076, 1015.4984, 260.9707},
    {"The Big Spread Ranch", 3, 1212.1489, -28.5387, 1000.9531, 170.5691},
    {"The Camel's Toe Safehouse", 1, 2216.1281, -1076.3050, 1050.4842, 86.4280},
    {"The Johnson House", 3, 2496.0549, -1695.1749, 1014.7421, 179.2174},
    {"The Pig Pen (strip club 2)", 2, 1204.6689, -13.5429, 1000.9218, 350.0202},
    {"The Pleasure Domes", 3, -2638.8232, 1407.3393, 906.4608, 94.6792},
    {"The Welcome Pump", 1, 681.6215, -451.8933, -25.6172, 166.1660},
    {"Torreno's Ranch", 0, -688.1494, 942.0825, 13.6328, 177.6573},
    {"Transfenders", 1, 621.4528, -23.7289, 1000.9218, 15.6787},
    {"Unused Safe House", 12, 2323.7062, -1147.6507, 1050.7099, 206.5352},
    {"Verdant Bluffs Safehouse", 8, 2365.1088, -1133.0793, 1050.8750, 177.3946},
    {"Vice Stadium", 16, -1401.0670, 1265.3706, 1039.8670, 178.6483},
    {"Victim", 5, 225.0305, -9.1836, 1002.2180, 85.5322},
    {"Wang Cars", 0, -1961.6280, 295.2377, 35.4687, 264.4891},
    {"Wardrobe/Changing room", 14, 256.9046, -41.6537, 1002.0233, 85.8774},
    {"Warehouse 1", 18, 1290.4106, 1.9512, 1001.0200, 179.9418},
    {"Warehouse 2", 1, 1412.1472, -2.2836, 1000.9240, 114.6610},
    {"Warehouse 3", 0, 2135.2004, -2276.2814, 20.6718, 318.5899},
    {"Wheel Arch Angels", 3, 612.2191, -123.9028, 997.9921, 266.5704},
    {"Willowfield Safehouse", 11, 2282.97,-1140.28,1050.89, 19.7031},
    {"World of Coq", 1, 445.6003, -6.9822, 1000.7343, 172.2104},
    {"Wu-Zi Mu's", 1, -2158.6730, 642.0900, 1052.3750, 86.5401},
    {"Zero's RC Shop", 6, -2240.1027, 136.9730, 1035.4139, 269.0953},
    {"Zip", 18, 161.4048, -94.2416, 1001.8046, 0.7936},
    {"Zombotech", 0, -1916.1268, 714.8615, 46.5625, 152.2839}
};

enum radioEnum
{
	rGenre[32],
	rSubgenre[32]
};

new const radioGenreList[][radioEnum] =
{
    {"Alternative", "Alternative"},
    {"Alternative", "Adult Alternative"},
    {"Alternative", "Britpop"},
    {"Alternative", "Classic Alternative"},
    {"Alternative", "College"},
    {"Alternative", "Dancepunk"},
    {"Alternative", "Dream Pop"},
    {"Alternative", "Emo"},
    {"Alternative", "Goth"},
    {"Alternative", "Grunge"},
    {"Alternative", "Hardcore"},
    {"Alternative", "Indie Pop"},
    {"Alternative", "Indie Rock"},
    {"Alternative", "Industrial"},
    {"Alternative", "LoFi"},
    {"Alternative", "Modern Rock"},
    {"Alternative", "New Wave"},
    {"Alternative", "Noise Pop"},
    {"Alternative", "Post Punk"},
    {"Alternative", "Power Pop"},
    {"Alternative", "Punk"},
    {"Alternative", "Ska"},
    {"Alternative", "Xtreme"},
    {"Blues", "Blues"},
    {"Blues", "Acoustic Blues"},
    {"Blues", "Cajun and Zydeco"},
    {"Blues", "Chicago Blues"},
    {"Blues", "Contemporary Blues"},
    {"Blues", "Country Blues"},
    {"Blues", "Delta Blues"},
    {"Blues", "Electric Blues"},
    {"Classical", "Classical"},
    {"Classical", "Baroque"},
    {"Classical", "Chamber"},
    {"Classical", "Choral"},
    {"Classical", "Classical Period"},
    {"Classical", "Early Classical"},
    {"Classical", "Impressionist"},
    {"Classical", "Modern"},
    {"Classical", "Opera"},
    {"Classical", "Piano"},
    {"Classical", "Romantic"},
    {"Classical", "Symphony"},
    {"Country", "Country"},
    {"Country", "Alt Country"},
    {"Country", "Americana"},
    {"Country", "Bluegrass"},
    {"Country", "Classic Country"},
    {"Country", "Contemporary Country"},
    {"Country", "Honky Tonk"},
    {"Country", "Hot Country Hits"},
    {"Country", "Western"},
    {"Decades", "Decades"},
    {"Decades", "00s"},
    {"Decades", "30s"},
    {"Decades", "40s"},
    {"Decades", "50s"},
    {"Decades", "60s"},
    {"Decades", "70s"},
    {"Decades", "80s"},
    {"Decades", "90s"},
    {"Easy Listening", "Easy Listening"},
    {"Easy Listening", "Exotica"},
    {"Easy Listening", "Light Rock"},
    {"Easy Listening", "Lounge"},
    {"Easy Listening", "Orchestral Pop"},
    {"Easy Listening", "Polka"},
    {"Easy Listening", "Space Age Pop"},
    {"Electronic", "Electronic"},
    {"Electronic", "Acid House"},
    {"Electronic", "Ambient"},
    {"Electronic", "Big Beat"},
    {"Electronic", "Breakbeat"},
    {"Electronic", "Dance"},
    {"Electronic", "Demo"},
    {"Electronic", "Disco"},
    {"Electronic", "Downtempo"},
    {"Electronic", "Drum and Bass"},
    {"Electronic", "Dubstep"},
    {"Electronic", "Electro"},
    {"Electronic", "Garage"},
    {"Electronic", "Hard House"},
    {"Electronic", "House"},
    {"Electronic", "IDM"},
    {"Electronic", "Jungle"},
    {"Electronic", "Progressive"},
    {"Electronic", "Techno"},
    {"Electronic", "Trance"},
    {"Electronic", "Tribal"},
    {"Electronic", "Trip Hop"},
    {"Folk", "Folk"},
    {"Folk", "Alternative Folk"},
    {"Folk", "Contemporary Folk"},
    {"Folk", "Folk Rock"},
    {"Folk", "New Acoustic"},
    {"Folk", "Old Time"},
    {"Folk", "Traditional Folk"},
    {"Folk", "World Folk"},
    {"Inspirational", "Inspirational"},
    {"Inspirational", "Christian"},
    {"Inspirational", "Christian Metal"},
    {"Inspirational", "Christian Rap"},
    {"Inspirational", "Christian Rock"},
    {"Inspirational", "Classic Christian"},
    {"Inspirational", "Contemporary Gospel"},
    {"Inspirational", "Gospel"},
    {"Inspirational", "Praise and Worship"},
    {"Inspirational", "Sermon and Services"},
    {"Inspirational", "Southern Gospel"},
    {"Inspirational", "Traditional Gospel"},
    {"International", "International"},
    {"International", "African"},
    {"International", "Afrikaans"},
    {"International", "Arabic"},
    {"International", "Asian"},
    {"International", "Bollywood"},
    {"International", "Brazilian"},
    {"International", "Caribbean"},
    {"International", "Celtic"},
    {"International", "Chinese"},
    {"International", "Creole"},
    {"International", "European"},
    {"International", "Filipino"},
    {"International", "French"},
    {"International", "German"},
    {"International", "Greek"},
    {"International", "Hawaiian & Pacific"},
    {"International", "Hebrew"},
    {"International", "Hindi"},
    {"International", "Indian"},
    {"International", "Islamic"},
    {"International", "Japanese"},
    {"International", "Korean"},
    {"International", "Mediterranean"},
    {"International", "Middle Eastern"},
    {"International", "North American"},
    {"International", "Russian"},
    {"International", "Soca"},
    {"International", "South American"},
    {"International", "Tamil"},
    {"International", "Turkish"},
    {"International", "Worldbeat"},
    {"International", "Zouk"},
    {"Jazz", "Jazz"},
    {"Jazz", "Acid Jazz"},
    {"Jazz", "Naga"},
    {"Jazz", "Big Band"},
    {"Jazz", "Bop"},
    {"Jazz", "Classic Jazz"},
    {"Jazz", "Cool Jazz"},
    {"Jazz", "Fusion"},
    {"Jazz", "Hard Bop"},
    {"Jazz", "Latin Jazz"},
    {"Jazz", "Smooth Jazz"},
    {"Jazz", "Swing"},
    {"Jazz", "Vocal Jazz"},
    {"Jazz", "World Fusion"},
    {"Latin", "Latin"},
    {"Latin", "Bachata"},
    {"Latin", "Banda"},
    {"Latin", "Bossa Nova"},
    {"Latin", "Cumbia"},
    {"Latin", "Flamenco"},
    {"Latin", "Latin Dance"},
    {"Latin", "Latin Pop"},
    {"Latin", "Latin Rap"},
    {"Latin", "Latin Rock"},
    {"Latin", "Mariachi"},
    {"Latin", "Merengue"},
    {"Latin", "Ranchera"},
    {"Latin", "Reggaeton"},
    {"Latin", "Regional Mexican"},
    {"Latin", "Salsa"},
    {"Latin", "Samba"},
    {"Latin", "Tango"},
    {"Latin", "Tejano"},
    {"Latin", "Tropicalia"},
    {"Metal", "Metal"},
    {"Metal", "Black Metal"},
    {"Metal", "Classic Metal"},
    {"Metal", "Death Metal"},
    {"Metal", "Extreme Metal"},
    {"Metal", "Grindcore"},
    {"Metal", "Hair Metal"},
    {"Metal", "Heavy Metal"},
    {"Metal", "Metalcore"},
    {"Metal", "Power Metal"},
    {"Metal", "Progressive Metal"},
    {"Metal", "Thrash Metal"},
    {"Misc", "Misc"},
    {"New Age", "New Age"},
    {"New Age", "Environmental"},
    {"New Age", "Ethnic Fusion"},
    {"New Age", "Healing"},
    {"New Age", "Meditation"},
    {"New Age", "Spiritual"},
    {"Pop", "Pop"},
    {"Pop", "Adult Contemporary"},
    {"Pop", "Barbershop"},
    {"Pop", "Bubblegum Pop"},
    {"Pop", "Dance Pop"},
    {"Pop", "Idols"},
    {"Pop", "JPOP"},
    {"Pop", "KPOP"},
    {"Pop", "Oldies"},
    {"Pop", "Soft Rock"},
    {"Pop", "Teen Pop"},
    {"Pop", "Top 40"},
    {"Pop", "World Pop"},
    {"Public Radio", "Public Radio"},
    {"Public Radio", "College"},
    {"Public Radio", "News"},
    {"Public Radio", "Sports"},
    {"Public Radio", "Talk"},
    {"Public Radio", "Weather"},
    {"R&B and Urban", "R&B and Urban"},
    {"R&B and Urban", "Classic R&B"},
    {"R&B and Urban", "Contemporary R&B"},
    {"R&B and Urban", "Funk"},
    {"R&B and Urban", "Motown"},
    {"R&B and Urban", "Neo Soul"},
    {"R&B and Urban", "Quiet Storm"},
    {"R&B and Urban", "Soul"},
    {"R&B and Urban", "Urban Contemporary"},
    {"Rap", "Rap"},
    {"Rap", "Alternative Rap"},
    {"Rap", "Dirty South"},
    {"Rap", "East Coast Rap"},
    {"Rap", "Freestyle"},
    {"Rap", "Gangsta Rap"},
    {"Rap", "Hip Hop"},
    {"Rap", "Mixtapes"},
    {"Rap", "Old School"},
    {"Rap", "Turntablism"},
    {"Rap", "Underground Hip Hop"},
    {"Rap", "West Coast Rap"},
    {"Reggae", "Reggae"},
    {"Reggae", "Contemporary Reggae"},
    {"Reggae", "Dancehall"},
    {"Reggae", "Dub"},
    {"Reggae", "Pop Reggae"},
    {"Reggae", "Ragga"},
    {"Reggae", "Reggae Roots"},
    {"Reggae", "Rock Steady"},
    {"Rock", "Rock"},
    {"Rock", "Adult Alternative"},
    {"Rock", "Celtic Rock"},
    {"Rock", "Classic Rock"},
    {"Rock", "Garage Rock"},
    {"Rock", "Glam"},
    {"Rock", "Hard Rock"},
    {"Rock", "Jam Bands"},
    {"Rock", "JROCK"},
    {"Rock", "Progressive Rock"},
    {"Rock", "Psychedelic"},
    {"Rock", "Rock & Roll"},
    {"Rock", "Rockabilly"},
    {"Rock", "Singer & Songwriter"},
    {"Rock", "Surf"},
    {"Seasonal and Holiday", "Seasonal and Holiday"},
    {"Seasonal and Holiday", "Birthday"},
    {"Seasonal and Holiday", "Christmas"},
    {"Seasonal and Holiday", "Halloween"},
    {"Seasonal and Holiday", "Kwanzaa"},
    {"Seasonal and Holiday", "Valentine"},
    {"Seasonal and Holiday", "Winter"},
    {"Soundtracks", "Soundtracks"},
    {"Soundtracks", "Anime"},
    {"Soundtracks", "Kids"},
    {"Soundtracks", "Original Score"},
    {"Soundtracks", "Showtunes"},
    {"Soundtracks", "Video Game Music"},
    {"Talk", "Talk"},
    {"Talk", "BlogTalk"},
    {"Talk", "Comedy"},
    {"Talk", "Community"},
    {"Talk", "Educational"},
    {"Talk", "Government"},
    {"Talk", "News"},
    {"Talk", "Old Time Radio"},
    {"Talk", "Other Talk"},
    {"Talk", "Political"},
    {"Talk", "Scanner"},
    {"Talk", "Spoken Word"},
    {"Talk", "Sports"},
    {"Talk", "Technology"},
    {"Themes", "Themes"},
    {"Themes", "Adult"},
    {"Themes", "Best Of"},
    {"Themes", "Chill"},
    {"Themes", "Eclectic"},
    {"Themes", "Experimental"},
    {"Themes", "Female"},
    {"Themes", "Heartache"},
    {"Themes", "Instrumental"},
    {"Themes", "LGBT"},
    {"Themes", "Love and Romance"},
    {"Themes", "Party Mix"},
    {"Themes", "Patriotic"},
    {"Themes", "Rainy Day Mix"},
    {"Themes", "Reality"},
    {"Themes", "Sexy"},
    {"Themes", "Shuffle"},
    {"Themes", "Travel Mix"},
    {"Themes", "Trippy"},
    {"Themes", "Work Mix"}
};

enum zoneEnum
{
	zoneName[32],
	Float:zoneMinX,
	Float:zoneMinY,
	Float:zoneMinZ,
	Float:zoneMaxX,
	Float:zoneMaxY,
	Float:zoneMaxZ
};

new const zoneArray[][zoneEnum] =
{
	{"The Big Ear", 	              -410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00},
	{"Aldea Malvada",                -1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00},
	{"Angel Pine",                   -2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00},
	{"Arco del Oeste",               -901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00},
	{"Avispa Country Club",          -2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00},
	{"Avispa Country Club",          -2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00},
	{"Avispa Country Club",          -2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00},
	{"Avispa Country Club",          -2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10},
	{"Avispa Country Club",          -2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10},
	{"Avispa Country Club",          -2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70},
	{"Back o Beyond",                -1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00},
	{"Battery Point",                -2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00},
	{"Bayside",                      -2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00},
	{"Bayside Marina",               -2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00},
	{"Beacon Hill",                  -399.60, -1075.50, -1.40, -319.00, -977.50, 198.50},
	{"Blackfield",                   964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90},
	{"Blackfield",                   964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90},
	{"Blackfield Chapel",            1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90},
	{"Blackfield Chapel",            1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90},
	{"Blackfield Intersection",      1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90},
	{"Blackfield Intersection",      1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90},
	{"Blackfield Intersection",      1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90},
	{"Blackfield Intersection",      1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90},
	{"Blueberry",                    104.50, -220.10, 2.30, 349.60, 152.20, 200.00},
	{"Blueberry",                    19.60, -404.10, 3.80, 349.60, -220.10, 200.00},
	{"Blueberry Acres",              -319.60, -220.10, 0.00, 104.50, 293.30, 200.00},
	{"Caligula's Palace",            2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90},
	{"Caligula's Palace",            2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90},
	{"Calton Heights",               -2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00},
	{"Chinatown",                    -2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00},
	{"City Hall",                    -2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00},
	{"Come-A-Lot",                   2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90},
	{"Commerce",                     1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90},
	{"Commerce",                     1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90},
	{"Commerce",                     1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90},
	{"Commerce",                     1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90},
	{"Commerce",                     1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90},
	{"Commerce",                     1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90},
	{"Conference Center",            1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90},
	{"Conference Center",            1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90},
	{"Cranberry Station",            -2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00},
	{"Creek",                        2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90},
	{"Dillimore",                    580.70, -674.80, -9.50, 861.00, -404.70, 200.00},
	{"Doherty",                      -2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00},
	{"Doherty",                      -2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00},
	{"Downtown",                     -1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00},
	{"Downtown",                     -1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00},
	{"Downtown",                     -1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00},
	{"Downtown",                     -1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00},
	{"Downtown",                     -2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00},
	{"Downtown",                     -1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00},
	{"Downtown Los Santos",          1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90},
	{"Downtown Los Santos",          1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90},
	{"Downtown Los Santos",          1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90},
	{"Downtown Los Santos",          1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90},
	{"Downtown Los Santos",          1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90},
	{"Downtown Los Santos",          1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90},
	{"Downtown Los Santos",          1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90},
	{"Downtown Los Santos",          1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90},
	{"Downtown Los Santos",          1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90},
	{"East Beach",                   2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90},
	{"East Beach",                   2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90},
	{"East Beach",                   2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90},
	{"East Beach",                   2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90},
	{"East Los Santos",              2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90},
	{"East Los Santos",              2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90},
	{"East Los Santos",              2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90},
	{"East Los Santos",              2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90},
	{"East Los Santos",              2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90},
	{"East Los Santos",              2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90},
	{"East Los Santos",              2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90},
	{"Easter Basin",                 -1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00},
	{"Easter Basin",                 -1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00},
	{"Easter Bay Airport",           -1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00},
	{"Easter Bay Airport",           -1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00},
	{"Easter Bay Airport",           -1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00},
	{"Easter Bay Airport",           -1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00},
	{"Easter Bay Airport",           -1213.90, -50.00, -4.50, -947.90, 578.30, 200.00},
	{"Easter Bay Airport",           -1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40},
	{"Easter Bay Airport",           -1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40},
	{"Easter Bay Airport",           -1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40},
	{"Easter Bay Chemicals",         -1132.80, -768.00, 0.00, -956.40, -578.10, 200.00},
	{"Easter Bay Chemicals",         -1132.80, -787.30, 0.00, -956.40, -768.00, 200.00},
	{"El Castillo del Diablo",       -464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00},
	{"El Castillo del Diablo",       -208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00},
	{"El Castillo del Diablo",       -208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00},
	{"El Corona",                    1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90},
	{"El Corona",                    1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90},
	{"El Quebrados",                 -1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00},
	{"Esplanade East",               -1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00},
	{"Esplanade East",               -1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00},
	{"Esplanade East",               -1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30},
	{"Esplanade North",              -2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00},
	{"Esplanade North",              -1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00},
	{"Esplanade North",              -1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00},
	{"Fallen Tree",                  -792.20, -698.50, -5.30, -452.40, -380.00, 200.00},
	{"Fallow Bridge",                434.30, 366.50, 0.00, 603.00, 555.60, 200.00},
	{"Fern Ridge",                   508.10, -139.20, 0.00, 1306.60, 119.50, 200.00},
	{"Financial",                    -1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00},
	{"Fisher's Lagoon",              1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00},
	{"Flint Intersection",           -187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90},
	{"Flint Range",                  -594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00},
	{"Fort Carson",                  -376.20, 826.30, -3.00, 123.70, 1220.40, 200.00},
	{"Foster Valley",                -2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00},
	{"Foster Valley",                -2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00},
	{"Foster Valley",                -2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00},
	{"Foster Valley",                -2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00},
	{"Frederick Bridge",             2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00},
	{"Gant Bridge",                  -2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00},
	{"Gant Bridge",                  -2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00},
	{"Ganton",                       2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90},
	{"Ganton",                       2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90},
	{"Garcia",                       -2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00},
	{"Garcia",                       -2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00},
	{"Garver Bridge",                -1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90},
	{"Garver Bridge",                -1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90},
	{"Garver Bridge",                -1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30},
	{"Glen Park",                    1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90},
	{"Glen Park",                    1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90},
	{"Glen Park",                    1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90},
	{"Green Palms",                  176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00},
	{"Greenglass College",           964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90},
	{"Greenglass College",           964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90},
	{"Hampton Barns",                603.00, 264.30, 0.00, 761.90, 366.50, 200.00},
	{"Hankypanky Point",             2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00},
	{"Harry Gold Parkway",           1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90},
	{"Hashbury",                     -2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00},
	{"Hilltop Farm",                 967.30, -450.30, -3.00, 1176.70, -217.90, 200.00},
	{"Hunter Quarry",                337.20, 710.80, -115.20, 860.50, 1031.70, 203.70},
	{"Idlewood",                     1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90},
	{"Idlewood",                     1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90},
	{"Idlewood",                     1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90},
	{"Idlewood",                     1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90},
	{"Idlewood",                     2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90},
	{"Idlewood",                     1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90},
	{"Jefferson",                    1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90},
	{"Jefferson",                    2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90},
	{"Jefferson",                    2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90},
	{"Jefferson",                    2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90},
	{"Jefferson",                    2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90},
	{"Jefferson",                    2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90},
	{"Julius Thruway East",          2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90},
	{"Julius Thruway East",          2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90},
	{"Julius Thruway East",          2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90},
	{"Julius Thruway East",          2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90},
	{"Julius Thruway North",         2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90},
	{"Julius Thruway North",         2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90},
	{"Julius Thruway North",         2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90},
	{"Julius Thruway North",         1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90},
	{"Julius Thruway North",         1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90},
	{"Julius Thruway North",         1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90},
	{"Julius Thruway North",         1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90},
	{"Julius Thruway North",         1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90},
	{"Julius Thruway South",         1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90},
	{"Julius Thruway South",         2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90},
	{"Julius Thruway West",          1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90},
	{"Julius Thruway West",          1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90},
	{"Juniper Hill",                 -2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00},
	{"Juniper Hollow",               -2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00},
	{"K.A.C.C. Military Fuels",      2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90},
	{"Kincaid Bridge",               -1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90},
	{"Kincaid Bridge",               -1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90},
	{"Kincaid Bridge",               -1087.90, 855.30, -89.00, -961.90, 986.20, 110.90},
	{"King's",                       -2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00},
	{"King's",                       -2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00},
	{"King's",                       -2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00},
	{"LVA Freight Depot",            1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90},
	{"LVA Freight Depot",            1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90},
	{"LVA Freight Depot",            1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90},
	{"LVA Freight Depot",            1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90},
	{"LVA Freight Depot",            1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90},
	{"Las Barrancas",                -926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00},
	{"Las Brujas",                   -365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00},
	{"Las Colinas",                  1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90},
	{"Las Colinas",                  2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90},
	{"Las Colinas",                  2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90},
	{"Las Colinas",                  2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90},
	{"Las Colinas",                  2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90},
	{"Las Colinas",                  2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90},
	{"Las Colinas",                  2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90},
	{"Las Payasadas",                -354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00},
	{"Las Ventura Airport",         1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90},
	{"Las Ventura Airport",         1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90},
	{"Las Ventura Airport",         1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90},
	{"Las Ventura Airport",         1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50},
	{"Last Dime Motel",              1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90},
	{"Leafy Hollow",                 -1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00},
	{"Liberty City",                 -1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00},
	{"Lil' Probe Inn",               -90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00},
	{"Linden Side",                  2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90},
	{"Linden Station",               2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90},
	{"Linden Station",               2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40},
	{"Little Mexico",                1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90},
	{"Little Mexico",                1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90},
	{"Los Flores",                   2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90},
	{"Los Flores",                   2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90},
	{"Los Santos International",     1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90},
	{"Los Santos International",     1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90},
	{"Los Santos International",     1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90},
	{"Los Santos International",     1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90},
	{"Los Santos International",     1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90},
	{"Los Santos International",     2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90},
	{"Marina",                       647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90},
	{"Marina",                       647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90},
	{"Marina",                       807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90},
	{"Market",                       787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90},
	{"Market",                       952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90},
	{"Market",                       1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90},
	{"Market",                       926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90},
	{"Market Station",               787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80},
	{"Martin Bridge",                -222.10, 293.30, 0.00, -122.10, 476.40, 200.00},
	{"Missionary Hill",              -2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00},
	{"Montgomery",                   1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00},
	{"Montgomery",                   1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00},
	{"Montgomery Intersection",      1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00},
	{"Montgomery Intersection",      1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00},
	{"Mulholland",                   1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90},
	{"Mulholland",                   1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90},
	{"Mulholland",                   1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90},
	{"Mulholland",                   1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90},
	{"Mulholland",                   1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90},
	{"Mulholland",                   1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90},
	{"Mulholland",                   768.60, -954.60, -89.00, 952.60, -860.60, 110.90},
	{"Mulholland",                   687.80, -860.60, -89.00, 911.80, -768.00, 110.90},
	{"Mulholland",                   737.50, -768.00, -89.00, 1142.20, -674.80, 110.90},
	{"Mulholland",                   1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90},
	{"Mulholland",                   952.60, -937.10, -89.00, 1096.40, -860.60, 110.90},
	{"Mulholland",                   911.80, -860.60, -89.00, 1096.40, -768.00, 110.90},
	{"Mulholland",                   861.00, -674.80, -89.00, 1156.50, -600.80, 110.90},
	{"Mulholland Intersection",      1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90},
	{"North Rock",                   2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00},
	{"Ocean Docks",                  2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90},
	{"Ocean Docks",                  2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90},
	{"Ocean Docks",                  2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90},
	{"Ocean Docks",                  2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90},
	{"Ocean Docks",                  2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90},
	{"Ocean Docks",                  2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90},
	{"Ocean Docks",                  2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90},
	{"Ocean Flats",                  -2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00},
	{"Ocean Flats",                  -2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00},
	{"Ocean Flats",                  -2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00},
	{"Octane Springs",               338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00},
	{"Old Venturas Strip",           2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90},
	{"Palisades",                    -2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00},
	{"Palomino Creek",               2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00},
	{"Paradiso",                     -2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00},
	{"Pershing Square",              1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90},
	{"Pilgrim",                      2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90},
	{"Pilgrim",                      2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90},
	{"Pilson Intersection",          1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90},
	{"Pirates in Men's Pants",       1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90},
	{"Playa del Seville",            2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90},
	{"Prickle Pine",                 1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90},
	{"Prickle Pine",                 1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90},
	{"Prickle Pine",                 1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90},
	{"Prickle Pine",                 1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90},
	{"Queens",                       -2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00},
	{"Queens",                       -2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00},
	{"Queens",                       -2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00},
	{"Randolph Industrial Estate",   1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90},
	{"Redsands East",                1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90},
	{"Redsands East",                1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90},
	{"Redsands East",                1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90},
	{"Redsands West",                1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90},
	{"Redsands West",                1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90},
	{"Redsands West",                1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90},
	{"Redsands West",                1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90},
	{"Regular Tom",                  -405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00},
	{"Richman",                      647.50, -1118.20, -89.00, 787.40, -954.60, 110.90},
	{"Richman",                      647.50, -954.60, -89.00, 768.60, -860.60, 110.90},
	{"Richman",                      225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90},
	{"Richman",                      225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90},
	{"Richman",                      72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90},
	{"Richman",                      72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90},
	{"Richman",                      321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90},
	{"Richman",                      321.30, -1044.00, -89.00, 647.50, -860.60, 110.90},
	{"Richman",                      321.30, -860.60, -89.00, 687.80, -768.00, 110.90},
	{"Richman",                      321.30, -768.00, -89.00, 700.70, -674.80, 110.90},
	{"Robada Intersection",          -1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90},
	{"Roca Escalante",               2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90},
	{"Roca Escalante",               2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90},
	{"Rockshore East",               2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90},
	{"Rockshore West",               1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90},
	{"Rockshore West",               2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90},
	{"Rodeo",                        72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90},
	{"Rodeo",                        72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90},
	{"Rodeo",                        225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90},
	{"Rodeo",                        225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90},
	{"Rodeo",                        334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90},
	{"Rodeo",                        312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90},
	{"Rodeo",                        422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90},
	{"Rodeo",                        558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90},
	{"Rodeo",                        466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90},
	{"Rodeo",                        422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90},
	{"Rodeo",                        466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90},
	{"Rodeo",                        334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90},
	{"Royal Casino",                 2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90},
	{"San Andreas Sound",            2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00},
	{"Santa Flora",                  -2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00},
	{"Santa Maria Beach",            342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90},
	{"Santa Maria Beach",            72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90},
	{"Shady Cabin",                  -1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00},
	{"Shady Creeks",                 -1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00},
	{"Shady Creeks",                 -2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00},
	{"Sobell Rail Yards",            2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90},
	{"Spinybed",                     2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90},
	{"Starfish Casino",              2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90},
	{"Starfish Casino",              2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90},
	{"Starfish Casino",              2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90},
	{"Temple",                       1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90},
	{"Temple",                       1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90},
	{"Temple",                       1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90},
	{"Temple",                       952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90},
	{"Temple",                       1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90},
	{"Temple",                       1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90},
	{"The Camel's Toe",              2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90},
	{"The Clown's Pocket",           2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90},
	{"The Emerald Isle",             2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90},
	{"The Farm",                     -1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90},
	{"The Four Dragons Casino",      1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90},
	{"The High Roller",              1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90},
	{"The Mako Span",                1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00},
	{"The Panopticon",               -947.90, -304.30, -1.10, -319.60, 327.00, 200.00},
	{"The Pink Swan",                1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90},
	{"The Sherman Dam",              -968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00},
	{"The Strip",                    2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90},
	{"The Strip",                    2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90},
	{"The Strip",                    2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90},
	{"The Strip",                    2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90},
	{"The Visage",                   1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90},
	{"The Visage",                   1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90},
	{"Unity Station",                1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50},
	{"Valle Ocultado",               -936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00},
	{"Verdant Bluffs",               930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90},
	{"Verdant Bluffs",               1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90},
	{"Verdant Bluffs",               1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90},
	{"Verdant Meadows",              37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00},
	{"Verona Beach",                 647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90},
	{"Verona Beach",                 930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90},
	{"Verona Beach",                 851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90},
	{"Verona Beach",                 1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90},
	{"Verona Beach",                 1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90},
	{"Vinewood",                     787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90},
	{"Vinewood",                     787.40, -1130.80, -89.00, 952.60, -954.60, 110.90},
	{"Vinewood",                     647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90},
	{"Vinewood",                     647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90},
	{"Whitewood Estates",            883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90},
	{"Whitewood Estates",            1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90},
	{"Willowfield",                  1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90},
	{"Willowfield",                  2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90},
	{"Willowfield",                  2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90},
	{"Willowfield",                  2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90},
	{"Willowfield",                  2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90},
	{"Willowfield",                  2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90},
	{"Willowfield",                  2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90},
	{"Yellow Bell Station",          1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00},
	{"Los Santos",                   44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00},
	{"Las Ventura",                 869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00},
	{"Bone County",                  -480.50, 596.30, -242.90, 869.40, 2993.80, 900.00},
	{"Tierra Robada",                -2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00},
	{"Tierra Robada",                -1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00},
	{"San Fierro",                   -2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00},
	{"Red County",                   -1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00},
	{"Flint County",                 -1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00},
	{"Whetstone",                    -2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}
};

// ---------------------------------------
native WP_Hash(buffer[], len, const str[]);
native IsValidVehicle(vehicleid);
// ---------------------------------------


// Variables //
main(){}

LocateMethod(playerid, params[])
{
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Null Error - failed to locate properly - contact a developer.");
	    return 1;
	}
	if(!strcmp(params, "dmv", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1896.5051, -1872.4714, 13.1361, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of DMV.");
	}
	else if(!strcmp(params, "mall", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1179.5540,-1323.4713,14.1752, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the mall.");
	}
	else if(!strcmp(params, "impound", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2050.3113, -1911.2911, 12.8366, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the impound.");
	}
	else if(!strcmp(params, "allsaints", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1179.5540,-1323.4713,14.1752, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the all saints.");
	}
	else if(!strcmp(params, "dealership", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 542.0433, -1293.5909, 17.2422, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the dealership.");
	}
	else if(!strcmp(params, "boatdealer", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 154.2223, -1946.3030, 5.1920, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the boat dealership.");
	}
	else if(!strcmp(params, "airdealer", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1892.6315, -2328.6721, 13.5469, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the aircraft dealership.");
	}
	else if(!strcmp(params, "bank", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1465.1348, -1010.5063, 26.8438, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the bank.");
	}
	else if(!strcmp(params, "casino", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1452.2224, -1048.5103, 23.5985, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the casino.");
	}
	else if(!strcmp(params, "vip", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1817.3633, -1573.3855, 13.0547, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the vip.");
	}
	else if(!strcmp(params, "mechanic", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2859.1218, -1981.2913, 10.3173, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the mechanic.");
	}
	else if(!strcmp(params, "smuggledrugs", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 52.0937, -292.2513, 1.7001, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the drug smuggling spot.");
	}
	else if(!strcmp(params, "matpickup1", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1421.6913, -1318.4719, 13.5547, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the 1st materials pickup.");
	}
    else if(!strcmp(params, "matpickup2", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2393.4885, -2008.5726, 13.3467, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the 2nd materials pickup.");
	}
	else if(!strcmp(params, "matfactory1", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2173.2129, -2264.1548, 13.3467, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the 1st materials factory.");
	}
    else if(!strcmp(params, "matfactory2", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2288.0918, -1105.6555, 37.9766, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the 2nd materials factory.");
	}
	else if(!strcmp(params, "heisenbergs", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, -65.0972, -1574.3820, 2.6107, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of Heisenberg's meth cooking trailer.");
	}
	else if(!strcmp(params, "aiportdepot", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 2112.3240, -2432.8130, 13.5469, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of LSI Materials Depot.");
	}
	else if(!strcmp(params, "marinadepot", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 714.5344, -1565.1694, 1.7680, 3.0);
        SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of Marina materials depot.");
	}
	else if(!strcmp(params, "foodpanda", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_FOODPANDA][jobX], jobLocations[JOB_FOODPANDA][jobY], jobLocations[JOB_FOODPANDA][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Foodpanda job.");
	}
	else if(!strcmp(params, "garbageman", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid,  -51.9756, -1562.3760, 2.8331, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Garbage Man.");
	}
	else if(!strcmp(params, "lumberjack", true)) //lumberjack
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, -524.9433,-94.0752,62.4420, 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the forklift driver.");
	}
	else if(!strcmp(params, "forklifter", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
     	SetPlayerCheckpoint(playerid, jobLocations[JOB_FORKLIFTER][jobX], jobLocations[JOB_FORKLIFTER][jobY], jobLocations[JOB_FORKLIFTER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Forklifter job.");
	}
	else if(!strcmp(params, "trucker", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_COURIER][jobX], jobLocations[JOB_COURIER][jobY], jobLocations[JOB_COURIER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Trucker job.");
	}
	else if(!strcmp(params, "fisherman", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_FISHERMAN][jobX], jobLocations[JOB_FISHERMAN][jobY], jobLocations[JOB_FISHERMAN][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Fisherman job.");
	}
	else if(!strcmp(params, "bodyguard", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_BODYGUARD][jobX], jobLocations[JOB_BODYGUARD][jobY], jobLocations[JOB_BODYGUARD][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Bodyguard job.");
	}
	else if(!strcmp(params, "armsdealer", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_ARMSDEALER][jobX], jobLocations[JOB_ARMSDEALER][jobY], jobLocations[JOB_ARMSDEALER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Arms Dealer job.");
	}
	else if(!strcmp(params, "miner", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_MINER][jobX], jobLocations[JOB_MINER][jobY], jobLocations[JOB_MINER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Miner job.");
	}
	else if(!strcmp(params, "Demolition", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_Demolition][jobX], jobLocations[JOB_Demolition][jobY], jobLocations[JOB_Demolition][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Demolition job.");
	}
	else if(!strcmp(params, "sweeper", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_SWEEPER][jobX], jobLocations[JOB_SWEEPER][jobY], jobLocations[JOB_SWEEPER][jobZ], 3.0);
	    SendClientMessage(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Sweeper job.");
	}
	else if(!strcmp(params, "taxidriver", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_TAXIDRIVER][jobX], jobLocations[JOB_TAXIDRIVER][jobY], jobLocations[JOB_TAXIDRIVER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Taxi Driver job.");
	}
	else if(!strcmp(params, "drugdealer", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_DRUGDEALER][jobX], jobLocations[JOB_DRUGDEALER][jobY], jobLocations[JOB_DRUGDEALER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Drug Dealer job.");
	}
	else if(!strcmp(params, "lawyer", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, jobLocations[JOB_LAWYER][jobX], jobLocations[JOB_LAWYER][jobY], jobLocations[JOB_LAWYER][jobZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Lawyer job.");
	}
	else if(!strcmp(params, "detective", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, 1554.8918, -1675.6486, 16.1953, 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Detective job.");
 	}
	else if(!strcmp(params, "butcher", true))
	{
	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, -257.7483,-2176.0459,29.0666, 3.0);
		SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the Butcher job.");
 	}
	else if(!strcmp(params, "supermarket", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_STORE);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest supermarket to you.");
	}
	else if(!strcmp(params, "gunshop", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_GUNSHOP);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest gun shop to you.");
	}
	else if(!strcmp(params, "clothesshop", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_CLOTHES);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest clothes shop to you.");
	}
	else if(!strcmp(params, "gym", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_GYM);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest gym to you.");
	}
	else if(!strcmp(params, "restaurant", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_RESTAURANT);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest restaurant to you.");
	}
	else if(!strcmp(params, "adagency", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_AGENCY);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest advertisement agency to you.");
	}
	else if(!strcmp(params, "club", true))
	{
	    new businessid = GetClosestBusiness(playerid, BUSINESS_BARCLUB);

	    if(businessid == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There are no businesses of this type to be found.");
	    }

	    pData[playerid][pCP] = CHECKPOINT_MISC;
	    SetPlayerCheckpoint(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
	    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of the closest club/bar to you.");
	}
	else
	{
	    for(new x = 0; x < MAX_LOCATIONS; x++)
		{
			if(!strcmp(params, LocationInfo[x][locName], true))
			{
		    	pData[playerid][pCP] = CHECKPOINT_MISC;
		    	SetPlayerCheckpoint(playerid, LocationInfo[x][locPosX], LocationInfo[x][locPosY], LocationInfo[x][locPosZ], 3.0);
		    	SendClientMessageEx(playerid, COLOR_WHITE, "* Checkpoint marked at the location of %s", LocationInfo[x][locName]);
		    	break;
			}
   			if(x == MAX_LOCATIONS - 1)
		    {
      			SendClientMessageEx(playerid, COLOR_SYNTAX, "Unable to locate '%s'. Contact an administrator!", params);
      			break;
		    }
		}
	    /*SendClientMessage(playerid, COLOR_SYNTAX, "{FF6347}Usage:{ffffff} /locate [option]");
	    SendClientMessage(playerid, COLOR_SYNTAX, "Business Types: Supermarket, GunShop, ClothesShop, Gym, Restaurant, AdAgency, Club, ToolShop");
	    SendClientMessage(playerid, COLOR_SYNTAX, "General Locations: DMV, Bank, Paintball, Casino, VIP, Smuggledrugs, MatPickup1, MatPickup2");
		SendClientMessage(playerid, COLOR_SYNTAX, "General Locations: Dealership, AirDealer, BoatDealer, MatFactory1, MatFactory2, Heisenbergs");
        SendClientMessage(playerid, COLOR_SYNTAX, "Scripted Jobs: Pizzaman, Courier, Fisherman, Bodyguard, WeaponDealer, Mechanic, Miner, Sweeper");
        SendClientMessage(playerid, COLOR_SYNTAX, "Scripted Jobs: TaxiDriver, DrugDealer, Lawyer, Detective, Thief");*/

	}
	return 1;
}

Graffiti_Refresh(id)
{
	if (id != -1 && GraffitiData[id][graffitiExists])
	{
		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

        GraffitiData[id][graffitiIcon] = CreateDynamicMapIcon(GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 23, 0, -1, -1, -1, 100.0, MAPICON_GLOBAL);
		GraffitiData[id][graffitiObject] = CreateDynamicObject(19482, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 0.0, 0.0, GraffitiData[id][graffitiPos][3]);

		SetDynamicObjectMaterial(GraffitiData[id][graffitiObject], 0, 0, "none", "none", 0);
		SetDynamicObjectMaterialText(GraffitiData[id][graffitiObject], 0, GraffitiData[id][graffitiText], OBJECT_MATERIAL_SIZE_256x128, "Diploma", 24, 1, GraffitiData[id][graffitiColor], 0, 0);
	}
	return 1;
}

IsSprayingInProgress(id)
{
	foreach (new i : Player)
	{
	    if (pData[i][pGraffiti] == id && IsPlayerInRangeOfPoint(i, 5.0, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2]))
	        return 1;
	}
	return 0;
}

Graffiti_Nearest(playerid)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++) if (GraffitiData[i][graffitiExists] && IsPlayerInRangeOfPoint(playerid, 5.0, GraffitiData[i][graffitiPos][0], GraffitiData[i][graffitiPos][1], GraffitiData[i][graffitiPos][2]))
	    return i;

	return -1;
}

Graffiti_Delete(id)
{
    if (id != -1 && GraffitiData[id][graffitiExists])
	{
	    new
	        string[64];

		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

		format(string, sizeof(string), "DELETE FROM `graffiti` WHERE `graffitiID` = '%d'", GraffitiData[id][graffitiID]);
		mysql_tquery(connectionID, string);

		GraffitiData[id][graffitiExists] = false;
		GraffitiData[id][graffitiText][0] = 0;
		GraffitiData[id][graffitiID] = 0;
	}
	return 1;
}

Graffiti_Save(id)
{
	new
	    query[384];

	format(query, sizeof(query), "UPDATE `graffiti` SET `graffitiX` = '%.4f', `graffitiY` = '%.4f', `graffitiZ` = '%.4f', `graffitiAngle` = '%.4f', `graffitiColor` = '%d', `graffitiText` = '%s' WHERE `graffitiID` = '%d'",
        GraffitiData[id][graffitiPos][0],
        GraffitiData[id][graffitiPos][1],
        GraffitiData[id][graffitiPos][2],
        GraffitiData[id][graffitiPos][3],
		GraffitiData[id][graffitiColor],
		SQL_ReturnEscaped(GraffitiData[id][graffitiText]),
		GraffitiData[id][graffitiID]
	);
	return mysql_tquery(connectionID, query);
}

Graffiti_Create(Float:x, Float:y, Float:z, Float:angle)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++)
	{
	    if (!GraffitiData[i][graffitiExists])
	    {
			GraffitiData[i][graffitiExists] = 1;
			GraffitiData[i][graffitiPos][0] = x;
			GraffitiData[i][graffitiPos][1] = y;
			GraffitiData[i][graffitiPos][2] = z;
			GraffitiData[i][graffitiPos][3] = angle - 90.0;
			GraffitiData[i][graffitiColor] = 0xFFFFFFFF;

			format(GraffitiData[i][graffitiText], 32, "Graffiti");

			Graffiti_Refresh(i);
			mysql_tquery(connectionID, "INSERT INTO `graffiti` (`graffitiColor`) VALUES(0)", "OnGraffitiCreated", "d", i);

			return i;
		}
	}
	return -1;
}
forward Graffiti_Load();
public Graffiti_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_GRAFFITI_POINTS)
	{
	    cache_get_field_content(i, "graffitiText", GraffitiData[i][graffitiText], connectionID, 64);

    	GraffitiData[i][graffitiExists] = 1;
	    GraffitiData[i][graffitiID] = cache_get_field_content_int(i, "graffitiID");
	    GraffitiData[i][graffitiPos][0] = cache_get_field_content_float(i, "graffitiX");
	    GraffitiData[i][graffitiPos][1] = cache_get_field_content_float(i, "graffitiY");
	    GraffitiData[i][graffitiPos][2] = cache_get_field_content_float(i, "graffitiZ");
	    GraffitiData[i][graffitiPos][3] = cache_get_field_content_float(i, "graffitiAngle");
	    GraffitiData[i][graffitiColor] = cache_get_field_content_int(i, "graffitiColor");

		Graffiti_Refresh(i);
	}
	return 1;
}

public OnPlayerTeleport(playerid, Float:distance)
{
	if((gAnticheat) && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 3.0, pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ]))
	    {
		    pData[playerid][pACWarns]++;

		    if(pData[playerid][pACWarns] < 7)
		    {
	    	    SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] is possibly teleport hacking (distance: %.1f).", GetRPName(playerid), playerid, distance);
	        	Log_Write("log_cheat", "%s (uid: %i) possibly teleport hacked (distance: %.1f)", GetPlayerNameEx(playerid), pData[playerid][pID], distance);
				new szString[528];
				format(szString, sizeof(szString), "%s[%i] is possibly teleport hacking (distance: %.1f).", GetRPName(playerid), playerid, distance);
				SendDiscordMessage(22, szString); 
			}
			else
			{
		    	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was autokicked by %s, reason: Teleport hacks", GetRPName(playerid), SERVER_BOT);
		    	KickPlayer(playerid);
			}
		}
	}

	return 1;
}
public OnPlayerEnterDynamicArea(playerid, areaid)
{
 
	for(new i=0; i<MAX_SAFEZONE; i++)
	{
		if(SafeZoneInfo[i][SZExists])
		{
			if(areaid == SafeZoneInfo[i][SArea])
			{
				SetPlayerArmedWeapon(playerid, 0);
				GameTextForPlayer(playerid, "You have Entered the Greenzone", 2500, 3);
			}
		}
	}

	return 1;
}
public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	if(areaid == sweeparea)
	{
		if(pData[playerid][pSweeping])
		{
			SendClientMessage(playerid, COLOR_GREY, "DONT GO TO FAR ON SWEEPING AREA");
		}
	}
	for(new i=0; i<MAX_SAFEZONE; i++)
	{
		if(SafeZoneInfo[i][SZExists])
		{
			if(areaid == SafeZoneInfo[i][SArea])
			{
				GameTextForPlayer(playerid, "You have Left the Greenzone", 2500, 3);
			}
		}
	}
}

public OnPlayerAirbreak(playerid)
{
	if((gAnticheat) && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
	{
	    pData[playerid][pACWarns]++;

	    if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
	    {
	        SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] is possibly using airbreak hacks.", GetRPName(playerid), playerid);
	        Log_Write("log_cheat", "%s (uid: %i) possibly used airbreak.", GetPlayerNameEx(playerid), pData[playerid][pID]);

			new szString[528];
			format(szString, sizeof(szString), "%s[%i] is possibly using airbreak hacks.", GetRPName(playerid), playerid);
			SendDiscordMessage(22, szString); 
		}
		else
		{
		    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was autobanned by %s, reason: Airbreak", GetRPName(playerid), SERVER_BOT);
		    BanPlayer(playerid, SERVER_BOT, "Airbreak");
		}
	}
	return 1;
}

stock ShowPlayerSabongTextdraw(playerid)
{
	for(new s = 0; s < 15; s ++)
	{
		PlayerTextDrawShow(playerid, SabongTD[playerid][s]);
	}

	ShowPlayerProgressBar(playerid, SabongBarTD[playerid][0]);
	ShowPlayerProgressBar(playerid, SabongBarTD[playerid][1]);
}

stock HidePlayerSabongTextdraw(playerid)
{
	for(new s = 0; s < 15; s ++)
	{
		PlayerTextDrawHide(playerid, SabongTD[playerid][s]);
	}
	HidePlayerProgressBar(playerid, SabongBarTD[playerid][0]);
	HidePlayerProgressBar(playerid, SabongBarTD[playerid][1]);
}

stock SendQuestionToStaff(color, text[])
{
	foreach(new x: Player)
	{
		if(pData[x][pHelper] >= 1 || pData[x][pAdmin] >= 1)
		{
		    SendClientMessageEx(x, color, text);
		}
	}
}
IsAMotorBike(carid)
{
	switch(GetVehicleModel(carid)) {
		case 509, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: return 1;
	}
	return 0;
}

forward onSabongDone();
public onSabongDone()
{
	new pRed = SabongInfo[sPlayerRed],
		pBlue = SabongInfo[sPlayerBlue];

	// Determine the winner and loser
    new winner, loser;
    if (GetPlayerHealth(pRed) > 0) {
        winner = pRed;
        loser = pBlue;
    } else {
        winner = pBlue;
        loser = pRed;
    }

    // Reset winner's state
    SetPlayerInterior(winner, 1);
    SetPlayerVirtualWorld(winner, 1);
    //SetFreezePos(winner, -147.9685,9.4940,899.1456);

    SetPlayerSkin(winner, pData[winner][pSkin]);
    SetPlayerHealth(winner, pData[winner][pHealth]);
    SetScriptArmour(winner, pData[winner][pArmor]);
    SetPlayerFightingStyle(winner, pData[winner][pFightStyle]);
    SetPlayerWeapons(winner);

    // Teleport loser to the specific location
    SetPlayerInterior(loser, 1); // Set the interior to the main world (0) or another specific interior
    SetPlayerVirtualWorld(loser, 1); // Set the virtual world to the main world (0) or another specific world
    //SetPlayerPos(loser,-107.3101,8.5607,899.1456); // Replace X, Y, Z with the coordinates of the location where the loser should be teleported.
    
	SetFreezePos(pRed, -147.9685,9.4940,899.1456); // Example coordinates for winner
    SetFreezePos(pBlue, -107.3101,8.5607,899.1456); // Example coordinates for loser

	
	SetPlayerSkin(loser, pData[loser][pSkin]);
    SetPlayerHealth(loser, pData[loser][pHealth]);
    SetScriptArmour(loser, pData[loser][pArmor]);
    SetPlayerFightingStyle(loser, pData[loser][pFightStyle]);
    SetPlayerWeapons(loser);

    SetScriptArmour(pRed, pData[pRed][pArmor]);
    SetScriptArmour(pBlue, pData[pBlue][pArmor]);

    SetPlayerFightingStyle(pRed, pData[pRed][pFightStyle]);
    SetPlayerFightingStyle(pBlue, pData[pBlue][pFightStyle]);

	SetPlayerWeapons(pRed);
    SetPlayerWeapons(pBlue);

	SabongInfo[sExist] = 0;
    SabongInfo[sStart] = 0;
    SabongInfo[sPlayerRed] = INVALID_PLAYER_ID;
    SabongInfo[sPlayerBlue] = INVALID_PLAYER_ID;
    SabongInfo[sRed] = 0;
    SabongInfo[sBlue] = 0;
	foreach(new i : Player)
	{
		pData[i][pSabongBet] = 0;
    	SabongInfo[sBet][i] = 0;
		SabongInfo[sInside][i] = 0;
		SabongInfo[sBetRed][i] = 0;
		SabongInfo[sBetBlue][i] = 0;
	}

	SavePlayerVariables(pRed);
	SavePlayerVariables(pBlue);
}

forward FlasherFunc();
public FlasherFunc() {
	new panelsx,doorsx,lightsx,tiresx;
	for (new p=0; p<MAX_VEHICLES; p++)
	{
		if (Flasher[p] == 1)
		{
			if (FlasherState[p] == 1)
			{
				GetVehicleDamageStatus(p,panelsx,doorsx,lightsx,tiresx);
				UpdateVehicleDamageStatus(p, panelsx, doorsx, 4, tiresx);
				FlasherState[p] = 0;
			}
			else
			{
				GetVehicleDamageStatus(p,panelsx,doorsx,lightsx,tiresx);
				UpdateVehicleDamageStatus(p, panelsx, doorsx, 1, tiresx);
				FlasherState[p] = 1;
			}
		}
	}
	return 1;
}

forward SetScriptSkin(playerid, skinid);
public SetScriptSkin(playerid, skinid)
{
    SetPlayerSkin(playerid, skinid);
    pData[playerid][pSkin] = skinid;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);
}

forward CBugFreezeOver(playerid);
public CBugFreezeOver(playerid)
{
	TogglePlayerControllable(playerid, true);
	pCBugging[playerid] = false;
	return 1;
}


ResetPlayerVariables(playerid)
{
	pCBugging[playerid] = false;
	KillTimer(ptmCBugFreezeOver[playerid]);
	ptsLastFiredWeapon[playerid] = 0;
	return 1;
}
new AutoMessages[][] =
{
	""SERVER_NAME"'s staff will never ask you for your password.",
	"[Manila Reality:RP]Are you bored ? Go to the casino and do some dicebet or bocxing with other players.",
	"[Manila Reality:RP]Abusing newbie channel will result in mutes, frequent abuse will be punished with a ban.",
	"[Manila Reality:RP]False report will be punished with a comserv or jail.",
	"[Manila Reality:RP]Being a BR player is not allowed here make sure you read all the rules and regulation.",
	"[Manila Reality:RP]Join our discord [discord.io/manilareality-rp].",
	"[Manila Reality:RP]We have a full Advisors staff waiting to help you! Use /report to communicate with them!",
	"[Manila Reality:RP]Want to make a suggestion? Our suggestions box is on our discord, submit away!",
	"[Manila Reality:RP]If you get lost, be sure to take a look at the map~, in the Pause Menu.",
	"[Manila Reality:RP]need helper or just ask a question in /n our helpers are willing to answer that.",
	"[Manila Reality:RP]Remember to read the rules, failure to do so may lead toward punishment or even a ban.",
	"[Manila Reality:RP]It's not nice to DM, it can also lead you to punishment or ban.",
	"[Manila Reality:RP]Caught a player breaking the rules? Make a complaint on the discord, or simply /report it! dont forget the proof",
	"[Manila Reality:RP]Found a bug? Don't report it to our staff, please goto our discord and create a ticket at discord.io/manilareality-rp",
	"[Manila Reality:RP]Wait at least 5 minutes inbetween /reports, We work hard to get to everyone who reports.",
	"[Manila Reality:RP]Remember! We log everything, and have auto-detection for the majority of hacks.",
	"[Manila Reality:RP]Bored? Have a round of Paintball at the Paintball Arena!"
};
forward SendGTAPinasMsg();
public SendGTAPinasMsg()
{
    new rand = random(sizeof(AutoMessages));
    SendClientMessageToAll(COLOR_CYAN, AutoMessages[rand]);
	return 1;
}
GetDate()
{
	new date[5], datestring[24];

	getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4]);

	format(datestring, sizeof(datestring), "%i-%02d-%02d %02d:%02d", date[0], date[1], date[2], date[3], date[4]);
	return datestring;
}

/*GetAdminDivisionFull(playerid)
{
    new division[32];
	if(pData[playerid][pFactionMod])
	{
	    division = "Faction Moderator";
	}
	else if(pData[playerid][pGangMod])
	{
	    division = "Gang Moderator";
	}
	else if(pData[playerid][pBanAppealer])
	{
	    division = "Ban Appealer";
	}
	else
	{
	    division = "";
	}
    return division;
}*/

GetStaffRank(playerid)
{
	new string[24];

	if(pData[playerid][pAdmin] > 1)
	{
		switch(pData[playerid][pAdmin])
		{
			case 1: string = "Moderator";
			case 2: string = "Junior Admin";
			case 3: string = "General Admin";
			case 4: string = "Senior Admin";
			case 5: string = "Head Admin";
			case 6: string = "Executive Admin";
			case 7: string = "Community Executive";
			case 8: string = "Community Director";
		}
		return string;
	}
	if(pData[playerid][pHelper] > 0)
	{
    	switch(pData[playerid][pHelper])
    	{
			case 1: string = "Junior Helper";
			case 2: string = "General Helper";
			case 3: string = "Senior Helper";
			case 4: string = "Head Helper";
		}
	}
	else if(pData[playerid][pFormerAdmin])
	{
	    string = "Former Admin";
	}
	return string;
}

GetAdminDivision(playerid)
{
	new division[16];
	if(pData[playerid][pDev])
	{
	    division = "DEV";
	}
	else if(pData[playerid][pFactionMod])
	{
	    division = "FM";
	}
	else if(pData[playerid][pAdminPersonnel])
	{
	    division = "AP";
	}
	else if(pData[playerid][pGangMod])
	{
	    division = "GM";
	}
	else if(pData[playerid][pBanAppealer])
	{
	    division = "BA";
	}
	else if(pData[playerid][pEventMod])
	{
	    division = "EM";
	}
	else
	{
	    division = "";
	}
	return division;
}

GetAdminRank(playerid)
{
	new string[35];

	switch(pData[playerid][pAdmin])
	{
	    case 0: string = "None";
		case 1: string = "[Secret Admin]";	
		case 2: string = "[Junior Admin]";
		case 3: string = "[General Admin]";
		case 4: string = "[Senior Admin]";
		case 5: string = "[Head Admin]";
		case 6: string = "[Server Supervisor]";
		case 7: string = "[Server Manager]";
		case 8: string = "[Assistant Owner]";
		case 9: string = "[Excutive Admin]";
		case 10: string = "[Community Owner]";	
	}

	return string;
}

GetColorARank(playerid)
{
	new string[35];

	switch(pData[playerid][pAdmin])
	{
	    case 0: string = "None";
		case 1: string = "[Secret Admin]";	
		case 2: string = "[Junior Admin]";
		case 3: string = "[General Admin]";
		case 4: string = "[Senior Admin]";
		case 5: string = "[Head Admin]";
		case 6: string = "[Server Supervisor]";
		case 7: string = "[Server Manager]";
		case 8: string = "[Assistant Owner]";
		case 9: string = "[Excutive Admin]";
		case 10: string = "[Community Owner]";	
	}

	return string;
}
GetHelperRank(playerid)
{
	new string[24];

	switch(pData[playerid][pHelper])
	{
	    case 0: string = "None";
	    case 1: string = "Junior Helper";
	    case 2: string = "General Helper";
	    case 3: string = "Senior Helper";
	    case 4: string = "Head Helper";
	}

	return string;
}
FormatNumber(number, money = 1)
{
	new length, value[32];

	format(value, sizeof(value), "%i", (number < 0) ? (-number) : (number));

	length = strlen(value);

    if(length > 3)
	{
  		for(new l = 0, i = length; --i >= 0; l ++)
		{
		    if((l % 3 == 0) && l > 0)
		    {
				strins(value, ",", i + 1);
			}
		}
	}

	if(money)
		strins(value, "$", 0);
	if(number < 0)
		strins(value, "-", 0);

	return value;
}
GetPlayerIP(playerid)
{
	new
	    ip[16];

	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

GetPlayerIPRange(playerid, ch = '*')
{
	new string[16], part[2];

	if(!sscanf(GetPlayerIP(playerid), "p<.>ii{ii}", part[0], part[1]))
	{
	    format(string, sizeof(string), "%i.%i.%c.%c", part[0], part[1], ch, ch);
	}

	return string;
}

GetDeathReason(reason)
{
	new
	    string[24];

	switch(reason)
	{
	    case 0: string = "Fists";
	    case 18: string = "Molotov Cocktail";
	    case 44: string = "Nightvision Goggles";
	    case 45: string = "Infrared Goggles";
	    case 49: string = "Vehicle";
	    case 50: string = "Helicopter Blades";
	    case 51: string = "Explosion";
	    case 53: string = "Drowned";
	    case 54: string = "Splat";
	    default: GetWeaponName(reason, string, sizeof(string));
	}

	return string;
}

GetWeaponNameEx(weaponid)
{
	new
	    weapon[24];

	GetWeaponName(weaponid, weapon, sizeof(weapon));

	switch(weaponid)
	{
	    case 0: weapon = "None";
	    case 18: weapon = "Molotov Cocktail";
	    case 44: weapon = "Nightvision Goggles";
	    case 45: weapon = "Infrared Goggles";
	}

	return weapon;
}

GetDonatorRank(level)
{
	new string[16];

	switch(level)
	{
	    case 0: string = "None";
	    case 1: string = "Bronze";
	    case 2: string = "Silver";
	    case 3: string = "Diamond";
	}

	return string;
}

GetJobName(jobid)
{
	new
	    name[32];

	if(jobid == JOB_NONE)
	    name = "None";
	else
		strcat(name, jobLocations[jobid][jobName]);

	return name;
}

IncreaseJobSkill(playerid, jobid)
{
	if((gDoubleXP) || pData[playerid][pDoubleXP] > 0)
	{
	    GiveJobSkill(playerid, jobid);
	}

	GiveJobSkill(playerid, jobid);
}

GiveJobSkill(playerid, jobid)
{
	new level = GetJobLevel(playerid, jobid);

	switch(jobid)
	{
		case JOB_COURIER:
		{
		    pData[playerid][pCourierSkill]++;

	    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET courierskill = courierskill + 1 WHERE uid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Your trucker skill level is now %i/5. You will deliver more products and earn more money now.", level + 1);
			}
		}
		case JOB_FISHERMAN:
		{
		    pData[playerid][pFishingSkill]++;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingskill = fishingskill + 1 WHERE uid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
				SM(playerid, COLOR_YELLOW, "Your fishing skill level is now %i/5. You will catch bigger fish and your cooldowns are reduced.", level + 1);
			}
		}
		case JOB_ARMSDEALER:
		{
		    pData[playerid][pWeaponSkill]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponskill = weaponskill + 1 WHERE uid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Your arms dealer skill level is now %i/5. You have unlocked more weapons.", level + 1);
			}
		}
		case JOB_DRUGDEALER:
		{
		    pData[playerid][pSmugglerSkill]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET smugglerskill = smugglerskill + 1 WHERE uid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Your drug smuggler skill level is now %i/5. You will now earn more cash for smuggling.", level + 1);
			}
		}
		case JOB_LAWYER:
		{
		    pData[playerid][pLawyerSkill]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lawyerskill = lawyerskill + 1 WHERE uid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Your lawyer skill level is now %i/5. Your cooldown times are reduced and you can free people for more time.", level + 1);
			}
		}
		case JOB_DETECTIVE:
		{
		    pData[playerid][pDetectiveSkill]++;

            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET detectiveskill = detectiveskill + 1 WHERE uid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			if(GetJobLevel(playerid, jobid) != level)
			{
			    SM(playerid, COLOR_YELLOW, "Your detective skill level is now %i/5. Your cooldown times are now reduced.", level + 1);
			}
		}
	}
}

GetJobLevel(playerid, jobid)
{
	if(jobid == JOB_COURIER)
	{
	    if(0 <= pData[playerid][pCourierSkill] <= 99) {
	        return 1;
		} else if(100 <= pData[playerid][pCourierSkill] <= 199) {
			return 2;
		} else if(200 <= pData[playerid][pCourierSkill] <= 299) {
			return 3;
		} else if(300 <= pData[playerid][pCourierSkill] <= 399) {
			return 4;
		} else if(400 <= pData[playerid][pCourierSkill] >= 499) {
		    return 5;
		}
	}
	if(jobid == JOB_FISHERMAN)
	{
	    if(0 <= pData[playerid][pFishingSkill] <= 99) {
	        return 1;
		} else if(100 <= pData[playerid][pFishingSkill] <= 199) {
			return 2;
		} else if(200 <= pData[playerid][pFishingSkill] <= 299) {
			return 3;
		} else if(300 <= pData[playerid][pFishingSkill] <= 399) {
			return 4;
		} else if(400 <= pData[playerid][pFishingSkill] >= 499) {
		    return 5;
		}
	}
	else if(jobid == JOB_ARMSDEALER)
	{
	    if(0 <= pData[playerid][pWeaponSkill] <= 99) {
	        return 1;
		} else if(100 <= pData[playerid][pWeaponSkill] <= 199) {
			return 2;
		} else if(200 <= pData[playerid][pWeaponSkill] <= 299) {
			return 3;
		} else if(300 <= pData[playerid][pWeaponSkill] <= 399) {
			return 4;
		} else if(400 <= pData[playerid][pWeaponSkill] >= 499) {
		    return 5;
		}
	}
	else if(jobid == JOB_DRUGDEALER)
	{
	    if(0 <= pData[playerid][pSmugglerSkill] <= 99) {
	        return 1;
		} else if(100 <= pData[playerid][pSmugglerSkill] <= 199) {
			return 2;
		} else if(200 <= pData[playerid][pSmugglerSkill] <= 299) {
			return 3;
		} else if(300 <= pData[playerid][pSmugglerSkill] <= 399) {
			return 4;
		} else if(400 <= pData[playerid][pSmugglerSkill] >= 499) {
		    return 5;
		}
	}
	else if(jobid == JOB_LAWYER)
	{
	    if(0 <= pData[playerid][pLawyerSkill] <= 99) {
	        return 1;
		} else if(100 <= pData[playerid][pLawyerSkill] <= 199) {
			return 2;
		} else if(200 <= pData[playerid][pLawyerSkill] <= 299) {
			return 3;
		} else if(300 <= pData[playerid][pLawyerSkill] <= 399) {
			return 4;
		} else if(400 <= pData[playerid][pLawyerSkill] >= 499) {
		    return 5;
		}
	}
	else if(jobid == JOB_DETECTIVE)
	{
	    if(0 <= pData[playerid][pDetectiveSkill] <= 99) {
	        return 1;
		} else if(100 <= pData[playerid][pDetectiveSkill] <= 199) {
			return 2;
		} else if(200 <= pData[playerid][pDetectiveSkill] <= 299) {
			return 3;
		} else if(300 <= pData[playerid][pDetectiveSkill] <= 399) {
			return 4;
		} else if(400 <= pData[playerid][pDetectiveSkill] >= 499) {
		    return 5;
		}
	}

	return 0;
}

GetPlayerCapacity(item)
{
	switch(item)
	{
	    case CAPACITY_MATERIALS:
	    {
	        return 250000;
		}
		case CAPACITY_WEED:
		{
		    return 50;
		}
		case CAPACITY_COCAINE:
		{
		    return 50;
		}
		case CAPACITY_METH:
		{
		    return 50;
		}
        case CAPACITY_PAINKILLERS:
		{
		    return 20;
		}
		case CAPACITY_SEEDS:
		{
		    return 100;
		}
		case CAPACITY_EPHEDRINE:
		{
		    return 50;
		}
		case CAPACITY_HPAMMO:
		{
		    return 60;
		}
        case CAPACITY_POISONAMMO:
		{
		    return 60;
		}
        case CAPACITY_FMJAMMO:
		{
      		return 60;
		}
	}
	return 0;
}

GetPlayerAssetCount(playerid, type)
{
	new count;

	switch(type)
	{
	    case LIMIT_HOUSES:
	    {
	        for(new i = 0; i < MAX_HOUSES; i ++)
	        {
	            if(HouseInfo[i][hExists] && IsHouseOwner(playerid, i))
	            {
	                count++;
				}
			}
		}
		case LIMIT_BUSINESSES:
	    {
	        for(new i = 0; i < MAX_BUSINESSES; i ++)
	        {
	            if(BusinessInfo[i][bExists] && IsBusinessOwner(playerid, i))
	            {
	                count++;
				}
			}
		}
		case LIMIT_GARAGES:
	    {
	        for(new i = 0; i < MAX_GARAGES; i ++)
	        {
	            if(GarageInfo[i][gExists] && IsGarageOwner(playerid, i))
	            {
	                count++;
				}
			}
		}
	}

	return count;
}

GetPlayerAssetLimit(playerid, type)
{
	switch(type)
	{
	    case LIMIT_HOUSES:
	    {
	        switch(pData[playerid][pDonator])
			{
			    case 2: return 3;
			    case 3: return 3;
			}

			switch(pData[playerid][pAssetUpgrade])
			{
			    case 0, 1: return 2;
			    case 2, 3: return 2;
			    case 4: return 2;
			}
		}
		case LIMIT_BUSINESSES:
	    {
			switch(pData[playerid][pAssetUpgrade])
			{
			    case 0, 1: return 1;
			    case 2, 3: return 2;
			    case 4: return 3;
			}
		}
		case LIMIT_GARAGES:
	    {
			switch(pData[playerid][pAssetUpgrade])
			{
			    case 0, 1: return 1;
			    case 2, 3: return 2;
			    case 4: return 3;
			}
		}
        case LIMIT_VEHICLES:
	    {
            switch(pData[playerid][pDonator])
			{
			    case 1: return 10;
			    case 2: return 15;
			    case 3: return 20;
			}

	        switch(pData[playerid][pAssetUpgrade])
	        {
	            case 0: return 5;
	            case 1: return 6;
	            case 2: return 7;
	            case 3: return 8;
	            case 4: return 10;
			}
		}
	}

	return 0;
}

DeployObject(type, Float:x, Float:y, Float:z, Float:angle)
{
	for(new i = 0; i < MAX_DEPLOYABLES; i ++)
	{
	    if(!DeployInfo[i][dExists])
	    {
			DeployInfo[i][dExists] = 1;
            DeployInfo[i][dType] = type;
            DeployInfo[i][dPosX] = x;
            DeployInfo[i][dPosY] = y;
            DeployInfo[i][dPosZ] = z;
            DeployInfo[i][dPosA] = angle;

            if(type == DEPLOY_SPIKESTRIP) {
                DeployInfo[i][dObject] = CreateDynamicObject(2899, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 0.9, 0.0, 0.0, angle + 90.0);
            } else if(type == DEPLOY_CONE) {
                DeployInfo[i][dObject] = CreateDynamicObject(1238, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 0.7, 0.0, 0.0, angle);
	        } else if(type == DEPLOY_ROADBLOCK) {
	            DeployInfo[i][dObject] = CreateDynamicObject(981, x + 3.0 * floatsin(-angle, degrees), y + 3.0 * floatcos(-angle, degrees), z, 0.0, 0.0, angle);
			} else if(type == DEPLOY_BARREL) {
			    DeployInfo[i][dObject] = CreateDynamicObject(1237, x + 1.0 * floatsin(-angle, degrees), y + 1.0 * floatcos(-angle, degrees), z - 1.0, 0.0, 0.0, angle);
			} else if(type == DEPLOY_FLARE) {
			    DeployInfo[i][dObject] = CreateDynamicObject(18728, x, y, z - 1.4, 0.0, 0.0, angle);
			}

			return i;
		}
	}

	return -1;
}

IsFireActive()
{
	for(new i = 0; i < MAX_FIRES; i ++)
	{
	    if(IsValidDynamicObject(gFireObjects[i]))
	    {
	        return 1;
		}
	}

	return 0;
}

HandleContract(playerid, killerid)
{
    if(pData[playerid][pDev] == 1 && pData[killerid][pContractTaken] == playerid)
	{
	    new price = pData[playerid][pContracted];

	    SM(killerid, COLOR_YELLOW, "You have completed your contract on %s and received $%i.", GetRPName(playerid), price);
	    SM(playerid, COLOR_YELLOW, "You have been killed by a hitman and lost $%i.", price);
		SMA(COLOR_YELLOW, "** SMS from MOLE(#null): hitman completed the contract**");
	    GivePlayerCash(playerid, -price);
	    GivePlayerCash(killerid, price);

	    pData[killerid][pContractTaken] = INVALID_PLAYER_ID;
	    pData[killerid][pCompletedHits]++;
	    pData[playerid][pContracted] = 0;
	    pData[playerid][pContractBy] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = 0, contractby = 'Nobody' WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET completedhits = %i WHERE uid = %i", pData[killerid][pCompletedHits], pData[killerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        foreach(new i : Player)
        {
            if(pData[i][pContractTaken] == playerid)
            {
                pData[i][pContractTaken] = INVALID_PLAYER_ID;
			}
		}

		Log_Write("log_contracts", "%s (uid: %i) successfully completed their hit on %s (uid: %i) for $%i.", GetRPName(killerid), pData[killerid][pID], GetRPName(playerid), pData[playerid][pID], price);
	}
	else if(pData[playerid][pContractTaken] == killerid)
	{
	    new price = pData[killerid][pContracted];

	    SM(playerid, COLOR_YELLOW, "You have failed your contract on %s and lost $%i.", GetRPName(playerid), price);
	    SM(killerid, COLOR_YELLOW, "You have killed a hitman chasing after you and received $%i. The contract on your head has been removed.", price);

	    GivePlayerCash(playerid, -price);
	    GivePlayerCash(killerid, price);

	    pData[playerid][pContractTaken] = INVALID_PLAYER_ID;
	    pData[playerid][pFailedHits]++;
	    pData[killerid][pContracted] = 0;
	    pData[killerid][pContractBy] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = 0, contractby = 'Nobody' WHERE uid = %i", pData[killerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET failedhits = %i WHERE uid = %i", pData[playerid][pFailedHits], pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        foreach(new i : Player)
        {
            if(pData[i][pContractTaken] == killerid)
            {
                pData[i][pContractTaken] = INVALID_PLAYER_ID;
			}
		}

		Log_Write("log_contracts", "%s (uid: %i) failed their hit on %s (uid: %i) and lost $%i.", GetRPName(playerid), pData[playerid][pID], GetRPName(killerid), pData[killerid][pID], price);
	}
}

GetPlayerNameEx(playerid)
{
	new
		name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

GetRPName(playerid)
{
	new
		name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, name, sizeof(name));

	for(new i = 0, l = strlen(name); i < l; i ++)
	{
	    if(name[i] == '_')
	    {
	        name[i] = ' ';
		}
	}

	return name;
}

GetPlayerZoneName(playerid)
{
	new zone[32], Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);

 	if(GetInsideHouse(playerid) >= 0)
	    zone = "House";
	else if(GetInsideBusiness(playerid) >= 0)
	    zone = "Business";
	else if(GetInsideGarage(playerid) >= 0)
	    zone = "Garage";
	else if(GetPlayerInterior(playerid))
	    zone = "Interior";
	else
	    strcpy(zone, GetZoneName(x, y, z));

	return zone;
}

GetPlayerPosEx(playerid, &Float:x, &Float:y, &Float:z)
{
	new id;

	if((id = GetInsideHouse(playerid)) >= 0)
	{
	    x = HouseInfo[id][hPosX];
	    y = HouseInfo[id][hPosY];
	    z = HouseInfo[id][hPosZ];
	}
	else if((id = GetInsideBusiness(playerid)) >= 0)
	{
	    x = BusinessInfo[id][bPosX];
	    y = BusinessInfo[id][bPosY];
	    z = BusinessInfo[id][bPosZ];
	}
	else if((id = GetInsideGarage(playerid)) >= 0)
	{
	    x = GarageInfo[id][gPosX];
	    y = GarageInfo[id][gPosY];
	    z = GarageInfo[id][gPosZ];
	}
	else if((id = GetInsideEntrance(playerid)) >= 0)
	{
	    x = EntranceInfo[id][ePosX];
	    y = EntranceInfo[id][ePosY];
	    z = EntranceInfo[id][ePosZ];
	}
	else
	{
	    GetPlayerPos(playerid, x, y, z);
	    return 1;
	}
	
	return 0;
}

GetVehicleLinkedID(id)
{
    for(new i=0; i<MAX_VEHICLES; i++)
    {
        if(VehicleInfo[i][vID] == id)
        {
		 	return i;
    	}
    }

    return INVALID_VEHICLE_ID;
}

GetVehicleZoneName(vehicleid)
{
	new zone[32], Float:x, Float:y, Float:z;

	GetVehiclePos(vehicleid, x, y, z);

	if(GetVehicleVirtualWorld(vehicleid))
	    zone = "Garage";
	else
	    strcpy(zone, GetZoneName(x, y, z));

	return zone;
}

GetZoneName(Float:x, Float:y, Float:z)
{
	new zone[32];

	for(new i = 0; i < sizeof(zoneArray); i ++)
	{
	    if((zoneArray[i][zoneMinX] <= x <= zoneArray[i][zoneMaxX]) && (zoneArray[i][zoneMinY] <= y <= zoneArray[i][zoneMaxY]) && (zoneArray[i][zoneMinZ] <= z <= zoneArray[i][zoneMaxZ]))
	    {
	        strcpy(zone, zoneArray[i][zoneName]);
	        return zone;
	    }
	}

	return zone;
}

BuyClothing(playerid)
{
	new modelid = clothingArray[pData[playerid][pSelected]][clothingModel], boneid = clothingArray[pData[playerid][pSelected]][clothingBone], Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ;
	new businessid = GetInsideBusiness(playerid);
	RemovePlayerAttachedObject(playerid, 9);
	if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
	{
		if(BusinessInfo[businessid][bProducts] <= 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "This business is out of stock now.");
		}
		if(pData[playerid][pCash] < BusinessInfo[businessid][bPrices][1])
		{
			return SCM(playerid, COLOR_SYNTAX, "You couldn't afford to purchase this item.");
		}

		for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
		{
			if(!ClothingInfo[playerid][i][cExists])
			{
				ClothingInfo[playerid][i][cModel] = modelid;
				ClothingInfo[playerid][i][cBone] = boneid;
				ClothingInfo[playerid][i][cPosX] = fOffsetX;
				ClothingInfo[playerid][i][cPosY] = fOffsetY;
				ClothingInfo[playerid][i][cPosZ] = fOffsetZ;
				ClothingInfo[playerid][i][cRotX] = fRotX;
				ClothingInfo[playerid][i][cRotY] = fRotY;
				ClothingInfo[playerid][i][cRotZ] = fRotZ;
				ClothingInfo[playerid][i][cScaleX] = 1.0;
				ClothingInfo[playerid][i][cScaleY] = 1.0;
				ClothingInfo[playerid][i][cScaleZ] = 1.0;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO clothing VALUES(null, %i, '%e', %i, %i, 0, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", pData[playerid][pID], clothingArray[pData[playerid][pSelected]][clothingName], modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
				mysql_tquery(connectionID, queryBuffer, "OnPlayerBuyClothingItem", "isiii", playerid, clothingArray[pData[playerid][pSelected]][clothingName], BusinessInfo[businessid][bPrices][1], businessid, i);
				return 1;
			}
		}

		SCM(playerid, COLOR_SYNTAX, "You have no more clothing slots available. Therefore you can't buy this.");
	}
	return 1;
}

PreviewClothing(playerid, index)
{
	new businessid = GetInsideBusiness(playerid);
    if(pData[playerid][pCash] < BusinessInfo[businessid][bPrices][1])
    {
        SCM(playerid, COLOR_SYNTAX, "You can't purchase this. You don't have enough money for it.");
    }
    else
    {
        pData[playerid][pSelected] = index;
        BuyClothing(playerid);
	}
}

PurchaseLandObject(playerid, landid, index)
{
    if(pData[playerid][pCash] < furnitureArray[index][fPrice])
    {
        SCM(playerid, COLOR_SYNTAX, "You can't purchase this. You don't have enough money for it.");
    }
    else
    {
        new
            Float:x,
            Float:y,
	        Float:z,
    	    Float:a;

        if(pData[playerid][pEditType] == EDIT_LAND_OBJECT_PREVIEW && IsValidDynamicObject(pData[playerid][pEditObject])) // Bug fix where if you did '/furniture buy' again while editing your object gets stuck. (12/28/2016)
        {
            DestroyDynamicObject(pData[playerid][pEditObject]);
            pData[playerid][pEditObject] = INVALID_OBJECT_ID;
		}

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		pData[playerid][pEditType] = EDIT_LAND_OBJECT_PREVIEW;
		pData[playerid][pEditObject] = CreateDynamicObject(furnitureArray[index][fModel], x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z + 1.0, 0.0, 0.0, ((19353 <= furnitureArray[index][fModel] <= 19417) || (19426 <= furnitureArray[index][fModel] <= 19465)) ? (a + 90.0) : (a), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		pData[playerid][pObjectLand] = landid;
        pData[playerid][pSelected] = index;

        UpdateLandText(landid);

		SM(playerid, COLOR_GREEN, "You are now previewing "SVRCLR"%s{CCFFFF}. This object costs "SVRCLR"%s{CCFFFF} to purchase.", furnitureArray[index][fName], FormatNumber(furnitureArray[index][fPrice]));
		SM(playerid, COLOR_GREEN, "Use your cursor to control the editor interface. Click the floppy disk to save changes.");
        EditDynamicObject(playerid, pData[playerid][pEditObject]);
	}
}

ShowObjectSelectionMenu(playerid, type)
{
    new
		models[MAX_SELECTION_MENU_ITEMS] = {-1, ...},
		index;

	pData[playerid][pFurnitureIndex] = -1;

	for(new i = 0; i < sizeof(furnitureArray); i ++)
	{
	    if(!strcmp(furnitureArray[i][fCategory], furnitureCategories[pData[playerid][pCategory]]))
	    {
	        if(pData[playerid][pFurnitureIndex] == -1)
	        {
	            pData[playerid][pFurnitureIndex] = i;
			}

	        models[index++] = furnitureArray[i][fModel];
	    }
	}

	ShowPlayerSelectionMenu(playerid, type, furnitureCategories[pData[playerid][pCategory]], models, index);
}

AFKCheck(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:cx,
	    Float:cy,
	    Float:cz;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerCameraPos(playerid, cx, cy, cz);

	if(pData[playerid][pAFKPos][0] == x && pData[playerid][pAFKPos][1] == y && pData[playerid][pAFKPos][2] == z && pData[playerid][pAFKPos][3] == cx && pData[playerid][pAFKPos][4] == cy && pData[playerid][pAFKPos][5] == cz)
	{
		pData[playerid][pAFKTime]++;

	    if(!pData[playerid][pAFK] && pData[playerid][pAFKTime] >= 60)
	    {
		    SCM(playerid, COLOR_WHITE, "You are now marked as "SVRCLR"Away from keyboard"WHITE" as you haven't moved in one minute.");
		    pData[playerid][pAFK] = 1;
		}
		if(pData[playerid][pAFKTime] >= 180  && pData[playerid][pJailType] >= 1)
		{
			SMA(COLOR_LIGHTGREEN, ""RED"[ADMIN BOT] "WHITE": %s was kicked for being afk more than 180sec. ", GetRPName(playerid));
			KickPlayer(playerid);
		}
		if(pData[playerid][pAFKTime] >= 500  && pData[playerid][pAdmin] <= 2)
		{
			SMA(COLOR_LIGHTGREEN, ""RED"[ADMIN BOT] "WHITE": %s was kicked for being afk more than 500sec. ", GetRPName(playerid));
			KickPlayer(playerid);
		}
	}

	else
	{
		if(pData[playerid][pAFK])
		{
			pData[playerid][pAFK] = 0;
		}

		SetPlayerSpecialTag(playerid, TAG_NORMAL);
		pData[playerid][pAFKTime] = 0;
	}

	pData[playerid][pAFKPos][0] = x;
	pData[playerid][pAFKPos][1] = y;
	pData[playerid][pAFKPos][2] = z;
	pData[playerid][pAFKPos][3] = cx;
	pData[playerid][pAFKPos][4] = cy;
	pData[playerid][pAFKPos][5] = cz;
}

PurchaseFurniture(playerid, index)
{
    if(pData[playerid][pCash] < furnitureArray[index][fPrice])
    {
        SCM(playerid, COLOR_SYNTAX, "You can't purchase this. You don't have enough money for it.");
    }
    else
    {
        new
            Float:x,
            Float:y,
	        Float:z,
    	    Float:a;

        if(pData[playerid][pEditType] == EDIT_FURNITURE_PREVIEW && IsValidDynamicObject(pData[playerid][pEditObject])) // Bug fix where if you did '/furniture buy' again while editing your object gets stuck. (12/28/2016)
        {
            DestroyDynamicObject(pData[playerid][pEditObject]);
            pData[playerid][pEditObject] = INVALID_OBJECT_ID;
		}

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		pData[playerid][pEditType] = EDIT_FURNITURE_PREVIEW;
		pData[playerid][pEditObject] = CreateDynamicObject(furnitureArray[index][fModel], x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z + 1.0, 0.0, 0.0, ((19353 <= furnitureArray[index][fModel] <= 19417) || (19426 <= furnitureArray[index][fModel] <= 19465)) ? (a + 90.0) : (a), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
        pData[playerid][pSelected] = index;

		SM(playerid, COLOR_AQUA, "You are now previewing "SVRCLR"%s{CCFFFF}. This furniture item costs {00AA00}%s{CCFFFF} to purchase.", furnitureArray[index][fName], FormatNumber(furnitureArray[index][fPrice]));
		SM(playerid, COLOR_AQUA, "Use your cursor to control the editor interface. Click the floppy disk to save changes.");
        EditDynamicObject(playerid, pData[playerid][pEditObject]);
	}
}
ShowClothingSelectionMenu(playerid)
{
    new
		models[MAX_SELECTION_MENU_ITEMS] = {-1, ...},
		index;

	pData[playerid][pClothingIndex] = -1;

	for(new i = 0; i < sizeof(clothingArray); i ++)
    {
        if(!strcmp(clothingArray[i][clothingType], clothingTypes[pData[playerid][pCategory]]))
        {
	        if(pData[playerid][pClothingIndex] == -1)
	        {
	            pData[playerid][pClothingIndex] = i;
			}

	        models[index++] = clothingArray[i][clothingModel];
	    }
	}

	ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_CLOTHING, clothingTypes[pData[playerid][pCategory]], models, index);
}
ShowClothingSelectionMenu1(playerid)
{
    new
		models[MAX_SELECTION_MENU_ITEMS] = {-1, ...},
		index;

	pData[playerid][pClothingIndex] = -1;

	for(new i = 0; i < sizeof(clothingArray); i ++)
    {
        if(!strcmp(clothingArray[i][clothingType], clothingTypes[pData[playerid][pCategory]]))
        {
	        if(pData[playerid][pClothingIndex] == -1)
	        {
	            pData[playerid][pClothingIndex] = i;
			}

	        models[index++] = clothingArray[i][clothingModel];
	    }
	}

	ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_CLOTHING1, clothingTypes[pData[playerid][pCategory]], models, index);
}
PurchaseVehicle(playerid)
{
	new vehicleid;
    if(pData[playerid][pCash] < vehicleArray[vehicleid][cARPrice])
    {
        SendClientMessage(playerid, COLOR_GREY, "You can't purchase this. You don't have enough money for it.");
    }

    else
    {
        new
            string[128];

		format(string, sizeof(string), "{FFD700}Confirmation:\nAre you sure you want to purchase this %s for {00AA00}$%i{FFD700}?", vehicleNames[vehicleArray[pData[playerid][pSelected]][carModel] - 400], vehicleArray[pData[playerid][pSelected]][cARPrice]);
		ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE2, DIALOG_STYLE_MSGBOX, "Purchase confirmation", string, "Yes", "No");
	}
}

ClearChat(playerid)
{
	for(new i = 0; i < 29; i ++)
	{
	    SCM(playerid, -1, " ");
	}
}

ClearAllChat(playerid)
{
	for(new i = 0; i < 65; i ++)
	{
	    SCM(playerid, -1, " ");
	}
}
ShowVehicleSelectionMenu(playerid, type)
{
	new
	    models[MAX_SELECTION_MENU_ITEMS	] = {-1, ...},
	    index;
	for(new i = 0; i < sizeof(vehicleArray); i ++)
	{

	   models[index++] = vehicleArray[i][carModel];

	}
	ShowPlayerSelectionMenu(playerid, type, "Buy a Vehicle", models, index);

}

Streamer_SetExtraFloat(objectid, type, Float:value)
{
	new
	    string[24];

	format(string, sizeof(string), "%f", value);
	setproperty(.id = objectid, .value = type, .string = string);
	return 1;
}

Streamer_GetExtraInt(objectid, type)
{
	new extra[11];

	if(Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra)))
	{
		return extra[type];
	}

	return 0;
}

Streamer_SetExtraInt(objectid, type, value)
{
	new extra[11];

    if(Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra)))
    {
	    extra[type] = value;
		return Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, extra, sizeof(extra));
	}

	return 0;
}

CreateObjectEx(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, Float:drawdistance = 0.0)
{
	new
		objectid = CreateObject(modelid, x, y, z, rx, ry, rz, drawdistance);

	if(objectid != INVALID_OBJECT_ID)
	{
	    gScriptObject{objectid} = 1;
	}
	return objectid;

}

Float:DistanceCameraTargetToLocation(Float:cx, Float:cy, Float:cz, Float:ox, Float:oy, Float:oz, Float:vx, Float:vy, Float:vz)
{
	new Float:x, Float:y, Float:z, Float:distance;

    distance = floatround(floatsqroot(((cx - ox) * (cx - ox)) + ((cy - oy) * (cy - oy)) + ((cz - oz) * (cz - oz))));

	x = vx * distance + cx;
	y = vy * distance + cy;
	z = vz * distance + cz;

	return floatsqroot((x - ox) * (x - ox) + (y - oy) * (y - oy) + (z - oz) * (z - oz));
}

EnterCheck(playerid)
{
	new id;

	if((gettime() - pData[playerid][pLastEnter]) < 3 && pData[playerid][pAdminDuty] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to wait before using this command again.");
	}
    if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    if(HouseInfo[id][hLocked])
	    {
	    	SCM(playerid, COLOR_SYNTAX, "This house is locked.");
			//Dyuze(playerid, "Notice", "This house is ~r~Locked.");
			return 0;
		}

		if(IsHouseOwner(playerid, id))
		{
		    HouseInfo[id][hTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET timestamp = %i WHERE id = %i", gettime(), HouseInfo[id][hID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered their house.", GetRPName(playerid));
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered the house.", GetRPName(playerid));
		}

        pData[playerid][pLastEnter] = gettime();
		SetFreezePos(playerid, HouseInfo[id][hIntX], HouseInfo[id][hIntY], HouseInfo[id][hIntZ]);
		SetPlayerFacingAngle(playerid, HouseInfo[id][hIntA]);
		SetPlayerInterior(playerid, HouseInfo[id][hInterior]);
		SetPlayerVirtualWorld(playerid, HouseInfo[id][hWorld]);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	else if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    if(GarageInfo[id][gLocked])
	    {
	    	SCM(playerid, COLOR_SYNTAX, "This garage is locked.");
			//Dyuze(playerid, "Notice", "This garage is ~r~Locked.");
			return 0;
		}

		if(IsGarageOwner(playerid, id))
		{
		    GarageInfo[id][gTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET timestamp = %i WHERE id = %i", gettime(), GarageInfo[id][gID]);
		    mysql_tquery(connectionID, queryBuffer);

		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered their garage.", GetRPName(playerid));
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered the garage.", GetRPName(playerid));
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    TeleportToGarage(playerid, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ], garageInteriors[GarageInfo[id][gType]][intVA], garageInteriors[GarageInfo[id][gType]][intID], GarageInfo[id][gWorld]);
		}
		else
		{
		    pData[playerid][pLastEnter] = gettime();
			SetFreezePos(playerid, garageInteriors[GarageInfo[id][gType]][intPX], garageInteriors[GarageInfo[id][gType]][intPY], garageInteriors[GarageInfo[id][gType]][intPZ]);
			SetPlayerFacingAngle(playerid, garageInteriors[GarageInfo[id][gType]][intPA]);
			SetPlayerInterior(playerid, garageInteriors[GarageInfo[id][gType]][intID]);
			SetPlayerVirtualWorld(playerid, GarageInfo[id][gWorld]);
			SetCameraBehindPlayer(playerid);
		}

		return 1;
	}
	else if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    if(BusinessInfo[id][bLocked])
	    {
	    	SCM(playerid, COLOR_SYNTAX, "This store is closed.");
			//Dyuze(playerid, "Notice", "This store is ~r~Closed.");
			return 0;
		}

		if(IsBusinessOwner(playerid, id))
		{
		    BusinessInfo[id][bTimestamp] = gettime();

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET timestamp = %i WHERE id = %i", gettime(), BusinessInfo[id][bID]);
		    mysql_tquery(connectionID, queryBuffer);
		    SM(playerid, COLOR_TEAL, "[Business]: Welcome to "WHITE"%s", BusinessInfo[id][bDescription]);
			SM(playerid, COLOR_TEAL, "[Business Message]:"WHITE" %s", BusinessInfo[id][bMessage]);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered %s.", GetRPName(playerid), BusinessInfo[id][bDescription]);
		}
		else
		{
		    if(BusinessInfo[id][bEntryFee] > 0)
			{
				if(pData[playerid][pCash] < BusinessInfo[id][bEntryFee])
		    	{
		    	    return SCM(playerid, COLOR_SYNTAX, "You don't have enough money to pay the entry fee. You may not enter.");
		        }

		        //format(string, sizeof(string), "~r~-$%i", BusinessInfo[id][bEntryFee]);
		       

		        BusinessInfo[id][bCash] += BusinessInfo[id][bEntryFee];
		        GivePlayerCash(playerid, -BusinessInfo[id][bEntryFee]);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[id][bCash], BusinessInfo[id][bID]);
		    	mysql_tquery(connectionID, queryBuffer);
		    }

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered %s.", GetRPName(playerid), BusinessInfo[id][bDescription]);
            SM(playerid, COLOR_GREEN, "%s", BusinessInfo[id][bMessage]);
		}

		pData[playerid][pLastEnter] = gettime();
		SetFreezePos(playerid, BusinessInfo[id][bIntX], BusinessInfo[id][bIntY], BusinessInfo[id][bIntZ]);
		SetPlayerFacingAngle(playerid, BusinessInfo[id][bIntA]);
		SetPlayerInterior(playerid, BusinessInfo[id][bInterior]);
		SetPlayerVirtualWorld(playerid, BusinessInfo[id][bWorld]);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	else if((id = GetNearbyEntrance(playerid)) >= 0)
	{
	    if(EntranceInfo[id][eLocked])
	    {
	    	SCM(playerid, COLOR_SYNTAX, "This building is locked.");
			//Dyuze(playerid, "Notice", "This building is ~r~Locked.");
			return 0;
		}
		if(EntranceInfo[id][eIntX] == 0.0 && EntranceInfo[id][eIntY] == 0.0 && EntranceInfo[id][eIntZ] == 0.0)
		{
		    SCM(playerid, COLOR_SYNTAX, "This entrance has no interior and therefore cannot be entered.");
		    return 0;
		}

		if(!pData[playerid][pAdminDuty])
		{
			if(EntranceInfo[id][eAdminLevel] && pData[playerid][pAdmin] < EntranceInfo[id][eAdminLevel])
			{
			    SCM(playerid, COLOR_SYNTAX, "Your administrator level is too low. You may not enter.");
		    	return 0;
			}
			if(EntranceInfo[id][eFactionType] > 0 && GetFactionType(playerid) != EntranceInfo[id][eFactionType])
			{
		    	SCM(playerid, COLOR_SYNTAX, "This entrance is only accesible to a specific faction type. You may not enter.");
				return 0;
			}
			if(EntranceInfo[id][eVIP] && pData[playerid][pDonator] < EntranceInfo[id][eVIP])
			{
		    	SCM(playerid, COLOR_SYNTAX, "Your VIP rank is too low. You may not enter.");
		    	return 0;
			}
		}

        pData[playerid][pLastEnter] = gettime();
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered the building.", GetRPName(playerid));

		if(EntranceInfo[id][eVehicles] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(EntranceInfo[id][eFreeze])
		    {
		        TeleportToCoords(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ], EntranceInfo[id][eIntA], EntranceInfo[id][eInterior], EntranceInfo[id][eWorld], true);
		    }
			else
			{
				TeleportToCoords(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ], EntranceInfo[id][eIntA], EntranceInfo[id][eInterior], EntranceInfo[id][eWorld]);
			}
		}
		else
		{
			if(EntranceInfo[id][eFreeze])
			{
  				SetFreezePos(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ]);
			}
			else
			{
			    SetPlayerPos(playerid, EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ]);
  			}

	  		SetPlayerFacingAngle(playerid, EntranceInfo[id][eIntA]);
	    	SetPlayerInterior(playerid, EntranceInfo[id][eInterior]);
			SetPlayerVirtualWorld(playerid, EntranceInfo[id][eWorld]);
			SetCameraBehindPlayer(playerid);
		}
		if(!EntranceInfo[id][eFreeze])
		{
			//format(string, sizeof(string), "~w~%s", EntranceInfo[id][eName]);
		   
		}
		return 1;
	}
	

	return 0;
}

ExitCheck(playerid)
{
	new id;

    if((gettime() - pData[playerid][pLastEnter]) < 3 && pData[playerid][pAdminDuty] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to wait before using this command again.");
	}

    if((id = GetInsideHouse(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[id][hIntX], HouseInfo[id][hIntY], HouseInfo[id][hIntZ]))
	{
	    pData[playerid][pLastEnter] = gettime();
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited the house.", GetRPName(playerid));
		SetPlayerPos(playerid, HouseInfo[id][hPosX], HouseInfo[id][hPosY], HouseInfo[id][hPosZ]);
		SetPlayerFacingAngle(playerid, HouseInfo[id][hPosA]);
		SetPlayerInterior(playerid, HouseInfo[id][hOutsideInt]);
		SetPlayerVirtualWorld(playerid, HouseInfo[id][hOutsideVW]);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	else if((id = GetInsideGarage(playerid)) >= 0)
	{
	    if(
			(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInRangeOfPoint(playerid, 6.0, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ])) ||
			((GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) && (IsPlayerInRangeOfPoint(playerid, 2.0, garageInteriors[GarageInfo[id][gType]][intPX], garageInteriors[GarageInfo[id][gType]][intPY], garageInteriors[GarageInfo[id][gType]][intPZ]) || IsPlayerInRangeOfPoint(playerid, 4.0, garageInteriors[GarageInfo[id][gType]][intVX], garageInteriors[GarageInfo[id][gType]][intVY], garageInteriors[GarageInfo[id][gType]][intVZ]))))
		{
	    	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited the garage.", GetRPName(playerid));

			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    TeleportToCoords(playerid, GarageInfo[id][gExitX], GarageInfo[id][gExitY], GarageInfo[id][gExitZ], GarageInfo[id][gExitA], 0, 0);
			}
			else
			{
		    	SetPlayerPos(playerid, GarageInfo[id][gPosX], GarageInfo[id][gPosY], GarageInfo[id][gPosZ]);
				SetPlayerFacingAngle(playerid, GarageInfo[id][gPosA]);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				SetCameraBehindPlayer(playerid);
			}
		}

        pData[playerid][pLastEnter] = gettime();
		return 1;
	}
	else if((id = GetInsideBusiness(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, BusinessInfo[id][bIntX], BusinessInfo[id][bIntY], BusinessInfo[id][bIntZ]))
	{
	    pData[playerid][pLastEnter] = gettime();
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited the business.", GetRPName(playerid));
		SetPlayerPos(playerid, BusinessInfo[id][bPosX], BusinessInfo[id][bPosY], BusinessInfo[id][bPosZ]);
		SetPlayerFacingAngle(playerid, BusinessInfo[id][bPosA]);
		SetPlayerInterior(playerid, BusinessInfo[id][bOutsideInt]);
		SetPlayerVirtualWorld(playerid, BusinessInfo[id][bOutsideVW]);
		SetCameraBehindPlayer(playerid);
		return 1;
	}
	else if((id = GetInsideEntrance(playerid)) >= 0 && IsPlayerInRangeOfPoint(playerid, (IsPlayerInAnyVehicle(playerid)) ? (7.0) : (3.0), EntranceInfo[id][eIntX], EntranceInfo[id][eIntY], EntranceInfo[id][eIntZ]))
	{
	    pData[playerid][pLastEnter] = gettime();
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has exited the building.", GetRPName(playerid));

		if(EntranceInfo[id][eVehicles] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    if(EntranceInfo[id][eFreeze])
		    {
		    	TeleportToCoords(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ], EntranceInfo[id][ePosA], EntranceInfo[id][eOutsideInt], EntranceInfo[id][eOutsideVW], true);
			}
			else
			{
				TeleportToCoords(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ], EntranceInfo[id][ePosA], EntranceInfo[id][eOutsideInt], EntranceInfo[id][eOutsideVW]);
			}
		}
		else
		{
		    if(EntranceInfo[id][eFreeze])
		    {
				SetFreezePos(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ]);
			}
			else
			{
			    SetPlayerPos(playerid, EntranceInfo[id][ePosX], EntranceInfo[id][ePosY], EntranceInfo[id][ePosZ]);
			}

			SetPlayerFacingAngle(playerid, EntranceInfo[id][ePosA]);
			SetPlayerInterior(playerid, EntranceInfo[id][eOutsideInt]);
			SetPlayerVirtualWorld(playerid, EntranceInfo[id][eOutsideVW]);
			SetCameraBehindPlayer(playerid);
		}
		return 1;
	}
	
	return 0;
}

AddReportToQueue(playerid, text[])
{
    for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(!ReportInfo[i][rExists])
	    {
	        strcpy(ReportInfo[i][rText], text, 128);

	        ReportInfo[i][rExists] = 1;
			ReportInfo[i][rAccepted] = 0;
			ReportInfo[i][rReporter] = playerid;
			ReportInfo[i][rHandledBy] = INVALID_PLAYER_ID;
			ReportInfo[i][rTime] = 5;
			
	        pData[playerid][pLastReport] = gettime();
	        SAM(COLOR_RED, "Report from "WHITE"[%i]%s"RED" (RID: "WHITE"%i"RED"): "WHITE"%s", playerid, GetRPName(playerid), i, text);

            new szString[128];
	    	format(szString, sizeof(szString),  "Report from [%i]%s (RID: %i): %s", playerid, GetRPName(playerid), i, text);
	        SendDiscordMessage(27, szString);


			if(pData[i][pReportTimer] != -1) HideReport(i);
			TextDrawShowForPlayer(i, ReportTD);

			pData[i][pReportTimer] = SetTimerEx("HideReport", 5000, false, "d", i);
			return 1;
		}
	}

	return 0;
}

forward HideReport(playerid);
public HideReport(playerid)
{
	TextDrawHideForPlayer(playerid, ReportTD);
	KillTimer(pData[playerid][pReportTimer]);
	pData[playerid][pReportTimer] = -1;
	return 1;
}

AddDMReportToQueue(playerid, text[])
{
    for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(!ReportInfo[i][rExists])
	    {
	        strcpy(ReportInfo[i][rText], text, 128);

	        ReportInfo[i][rExists] = 1;
			ReportInfo[i][rAccepted] = 0;
			ReportInfo[i][rReporter] = playerid;
			ReportInfo[i][rHandledBy] = INVALID_PLAYER_ID;
			ReportInfo[i][rTime] = 5;

	        pData[playerid][pLastReport] = gettime();
	        SAM(COLOR_TEAL, ""WHITE"%s"TEAL" has reported that the following player may be "WHITE"deathmatching"TEAL": "WHITE"%s"TEAL" (ReportID: "WHITE"%i"TEAL")", GetRPName(playerid), text, i);
	        return 1;
		}
	}

	return 0;
}

AddBan(username[], ip[], from[], reason[], permanent = 0)
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM bans WHERE username = '%s' OR ip = '%s'", username, ip);
	mysql_tquery(connectionID, queryBuffer, "OnBanAttempt", "ssssi", username, ip, from, reason, permanent);
}
UpdateLandText(landid)
{
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_UPDATE_LANDLABELS, landid);
}
BanPlayer(playerid, from[], reason[], permanent = 0)
{
	if(!strcmp(from, SERVER_BOT))
	{
	    gAnticheatBans++;
    	SaveServerInfo();
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) was banned by %s, reason: %e')", pData[playerid][pID], GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason);
	mysql_tquery(connectionID, queryBuffer);

	AddBan(GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason, permanent);
	KickIP(GetPlayerIP(playerid));
}

Rangeban(playerid, from[], reason[])
{
	AddBan(GetPlayerNameEx(playerid), GetPlayerIPRange(playerid), from, reason);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) was rangebanned by %s, reason: %e')", pData[playerid][pID], GetPlayerNameEx(playerid), GetPlayerIP(playerid), from, reason);
	mysql_tquery(connectionID, queryBuffer);

	KickIP(GetPlayerIP(playerid));
}

KickIP(ip[])
{
	foreach(new i : Player)
	{
	    if(!strcmp(GetPlayerIP(i), ip))
	    {
	        KickPlayer(i);
		}
	}
}

GetHealth(playerid)
{
	new Float:health;
	GetPlayerHealth(playerid, health);
	return floatround(health);
}

GetArmor(playerid)
{
	new Float:armor;
 	GetPlayerArmour(playerid, armor);
	return floatround(armor);
}

GivePlayerHealth(playerid, Float:amount)
{
	new Float:health;
	GetPlayerHealth(playerid, health);
	SetPlayerHealth(playerid, (health + amount > 100.0) ? (100.0) : (	health + amount));
}

GivePlayerArmour(playerid, Float:amount)
{
	new Float:armor;
	GetPlayerArmour(playerid, armor);
	SetScriptArmour(playerid, (armor + amount > 100.0) ? (100.0) : (armor + amount));
}

/*AddToPaycheck(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pPaycheck] = pData[playerid][pPaycheck] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET paycheck = paycheck + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}*/
AddJailTime(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pJailTime] = pData[playerid][pJailTime] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtime = jailtime + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}

forward OnPlayerCallContact(playerid);
public OnPlayerCallContact(playerid)
{
	new
		contact[MAX_PLAYER_NAME];
	new rows, fields;
	cache_get_data(rows, fields, connectionID);

	if (!rows)
	{
		return SCM(playerid, COLOR_ERROR, "You don't have that name in your contacts");
	}
	else
	{
		new
			number;
		number = cache_get_field_content_int(0, "contact_number");
		cache_get_field_content(0, "contact_name", contact);

		if(number == pData[playerid][pPhone])
		{
			return SCM(playerid, COLOR_ERROR, "Error:"WHITE" Invalid number.");
		}	

		foreach(new i : Player)
		{
			if(pData[i][pTogglePhone])
				return SCM(playerid, COLOR_ERROR, "The player's phone is off.");
		
			if(pData[i][pPhone] == number)
			{
				if(pData[i][pJailType] > 0)
				{
					return SCM(playerid, COLOR_ERROR, "Error:"WHITE" That player is currently imprisoned and cannot use their phone.");
				}
				if(pData[i][pCallLine] != INVALID_PLAYER_ID)
				{
					return SCM(playerid, COLOR_ERROR, "Error:"WHITE" This player is currently in a call. Wait until they hang up.");
				}
				if(pData[i][pTogglePhone])
				{
					return SCM(playerid, COLOR_ERROR, "Error:"WHITE" That player has their mobile phone switched off.");
				}
				if(pData[i][pLiveBroadcast] != INVALID_PLAYER_ID)
				{
					return SCM(playerid, COLOR_ERROR, "Error:"WHITE" That player is currently in a live interview and can't talk on the phone.");
				}

				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

				KillTimer(pData[playerid][pCallTimer]);
				KillTimer(pData[i][pCallTimer]);

				pData[playerid][pCallTimer] = SetTimerEx("OnPhoneBecomeAvailable", 1000 * 30, false, "d", playerid);
				pData[i][pCallTimer] = SetTimerEx("OnPhoneBecomeAvailable", 1000 * 30, false, "d", i);

				pData[playerid][pCallLine] = i;
				pData[playerid][pCalling] = 1;
				pData[playerid][pCallStage] = 0;

				pData[i][pCallLine] = playerid;
				pData[i][pCallStage] = 1;

				SetPlayerCellphoneAction(playerid, true);
				SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
				SendProximityMessage(i, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s's mobile phone begins to ring.", GetRPName(i));
				PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
			
				SCMf(playerid, COLOR_YELLOW, "** You've placed a call to number: %i (%s). Please wait for your call to be answered.", number, contact);
				SCMf(i, COLOR_YELLOW, "** Incoming call from %s [%i]. Use /pickup to take this call.", GetRPName(playerid), pData[playerid][pPhone]);
				PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
				return 1;
			}
		}

		SCM(playerid, COLOR_ERROR, "Error:"WHITE" That number is either not in service or the owner is offline.");
	}
	return 1;
}

SetPlayerCellphoneAction(playerid, enable)
{
	if (pData[playerid][pCuffed])
	{
		return 0;
	}
	else
	{
		if (enable)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			SetPlayerAttachedObject(playerid, 9, 330, 6);
		}
		else
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(playerid, 9);
		}
	}
	return 1;
}		

forward OnPlayerTextContact(playerid);
public OnPlayerTextContact(playerid)
{
	new
		contact[MAX_PLAYER_NAME];

	new rows, fields;
	cache_get_data(rows, fields, connectionID);

	if (!rows)
	{
		return 0;
	}
	else
	{
		new
			number;

		number = cache_get_field_content_int(0, "Number");
		cache_get_field_content(0, "Contact", contact);

		pData[playerid][pPhoneSMS] = number;

		ShowPlayerDialog(playerid, DIALOG_PHONE_SMS_TEXT, DIALOG_STYLE_INPUT, "SMS Text", "Please type your message:", "Send", "Cancel");
	}
	return 1;
}
forward OnPlayerListContacts(playerid);
public OnPlayerListContacts(playerid)
{
	new
		contact[MAX_PLAYER_NAME],
		string[1024],
		number;

	new rows, fields;
	cache_get_data(rows, fields, connectionID);
	strcat(string, "Add Contact");

	for (new i = 0; i < rows; i ++)
	{
		cache_get_field_content(i, "contact_name", contact);
		number = cache_get_field_content_int(i, "contact_number");
		format(string, sizeof(string), "%s\n%s (%i)", string, contact, number);

		gListedItems[playerid][i] = cache_get_field_content_int(i, "contact_id");
	}
	ShowPlayerDialog(playerid, DIALOG_CONTACTS, DIALOG_STYLE_LIST, "{FFFFFF}My contacts", string, "Select", "Cancel");
}

ListContacts(playerid)
{
	if (pData[playerid][pPhone] > 0)
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM phone_contacts WHERE phone_number = %i", pData[playerid][pPhone]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerListContacts", "i", playerid);
	}
}

forward OnPhoneBecomeAvailable(playerid);
public OnPhoneBecomeAvailable(playerid)
{
	if(pData[playerid][pCallStage] < 1 && pData[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
		SCM(playerid, COLOR_YELLOW, "They didn't answered the call.");
		SCM(playerid, COLOR_GREY, "The other line didn't picked up the call, please try again later.");
		SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s presses a button and hangs up their mobile phone.", GetRPName(playerid));
	} 
	return 1;
}
forward OnGraffitiCreated(id);
public OnGraffitiCreated(id)
{
	GraffitiData[id][graffitiID] = cache_insert_id(connectionID);
	Graffiti_Save(id);

	return 1;
}

GivePlayerCash(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pCash] = pData[playerid][pCash] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = cash + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}

RefundPlayer(playerid)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pRefunded] = 1;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET refunded = 1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		new Float:x, Float:y, Float:z, Float:a;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, pos_x, pos_y, pos_z, pos_a, color1, color2) VALUES(%i, '%s', 517, '%f', '%f', '%f', '%f', 0, 0)", pData[playerid][pID], GetPlayerNameEx(playerid),x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z, a);
		mysql_tquery(connectionID, queryBuffer);
		
		GivePlayerCash(playerid, 20000);
		VIPRefund(playerid);
	}
}

VIPRefund(playerid)
{
	if (pData[playerid][pLogged])
	{
		pData[playerid][pDonator] = 2;
		pData[playerid][pVIPTime] = gettime()+604800; // seconds
		pData[playerid][pVIPCooldown] = 0;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = %i, viptime = %i, vipcooldown = 0 WHERE uid = %i", pData[playerid][pDonator], pData[playerid][pVIPTime], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

CarryPlayer(playerid, targetid)
{
    if(pData[targetid][pDraggedBy] == INVALID_PLAYER_ID)
    {
       pData[targetid][pDraggedBy] = playerid;
       TogglePlayerControllable(targetid, 0);
       SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs onto %s and begins to carry them.", GetRPName(playerid), GetRPName(targetid));
    }
    else
    {
       pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;
       TogglePlayerControllable(targetid, 1);
       SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s stops carrying %s.", GetRPName(playerid), GetRPName(targetid));
    }
}

FriskPlayer(playerid, targetid)
{
	new str[(1024 * 2)], weapon_count;

	format(str, sizeof(str), "{7DAEFF}%s's Items:"WHITE"\n\n", GetRPName(targetid));
    format(str, sizeof(str), "%sDirty Money: $%i\n\n", str, pData[targetid][pDirtyCash]);
	format(str, sizeof(str), "%sCash: $%i\n\n", str, pData[targetid][pCash]);

	if(pData[targetid][pBackpack])
	{
	    format(str, sizeof(str), "%sThis player has a backpack, use {33AA33}/bpfrisk"WHITE" to frisk the backpack.\n", str);
	}
	if(pData[targetid][pPhone])
	{
	    format(str, sizeof(str), "%sThis player has a Mobile Phone.\n", str);
	}
	if(pData[targetid][pWalkieTalkie])
	{
	    format(str, sizeof(str), "%sThis player has a Portable Radio.\n", str);
	}
    if(pData[targetid][pSpraycans])
	{
	    format(str, sizeof(str), "%sThis player has (%d) spraycans.\n", str, pData[targetid][pSpraycans]);
	}
    if(pData[targetid][pRepairKit])
	{
	    format(str, sizeof(str), "%sThis player has (%d) repairtkit.\n", str, pData[targetid][pRepairKit]);
	}
    if(pData[targetid][pParts])
	{
	    format(str, sizeof(str), "%sThis player has (%d) vehicle parts.\n", str, pData[targetid][pParts]);
	}
	if(pData[targetid][pBoombox])
	{
	    format(str, sizeof(str), "%sThis player has a Boombox.\n", str);
	}
	if(pData[targetid][pMP3Player])
	{
	    format(str, sizeof(str), "%sThis player has a Mp3 Player.\n", str);
	}
	if(pData[targetid][pPhonebook])
	{
	    format(str, sizeof(str), "%sThis player has a Phone Book.\n", str);
	}
	if(pData[targetid][pMaterials] > 0)
	{
	    format(str, sizeof(str), "%sThis player has (%d) materials.\n", str, pData[targetid][pMaterials]);
	}
    if(pData[targetid][pPot])
	{
	    format(str, sizeof(str), "%sThis player has a (%dg) of pot.\n", str, pData[targetid][pPot]);
	}
	if(pData[targetid][pCrack])
	{
	    format(str, sizeof(str), "%sThis player has a (%dg) of crack.\n", str, pData[targetid][pCrack]);
	}
	if(pData[targetid][pMeth])
	{
	    format(str, sizeof(str), "%sThis player has a (%dg) of meth.\n", str, pData[targetid][pMeth]);
	}
	if(pData[targetid][pPainkillers])
	{
	    format(str, sizeof(str), "%sThis player has a (%d) of painkillers.\n", str, pData[targetid][pPainkillers]);
	}
	if(pData[targetid][pSeeds])
	{
	    format(str, sizeof(str), "%sThis player has a (%d) of Marijuana Seeds.\n", str, pData[targetid][pSeeds]);
	}
	if(pData[targetid][pEphedrine])
	{
	    format(str, sizeof(str), "%sThis player has a (%d) of Raw Ephedrine.\n", str, pData[targetid][pEphedrine]);
	}

	switch(pData[targetid][pSmuggleDrugs])
	{
	    case 1: format(str, sizeof(str), "%s{FF0000}Seeds package"WHITE"\n\n", str);
	    case 2: format(str, sizeof(str), "%s{FF0000}Crack package"WHITE"\n\n", str);
	    case 3: format(str, sizeof(str), "%s{FF0000}Raw ephedrine package"WHITE"\n\n", str);
	}

	format(str, sizeof(str), "%sWeapons:\n", str);
	for(new i = 0; i < 13; i ++)
	{
	    if(pData[targetid][pWeapons][i] > 0)
	    {
			weapon_count++;
			format(str, sizeof(str), "%s{FF0000}* %s\n", str, GetWeaponNameEx(pData[targetid][pWeapons][i]));
		}
	}
	if(weapon_count < 1) format(str, sizeof(str), "%s{FF0000}* This player has no weapon with them.", str);

	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Frisk Result", str, "Close", "");
    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s searches for items on %s.", GetRPName(playerid), GetRPName(targetid));
}


FriskPlayerx(playerid, targetid)
{
	new str[(1024 * 2)], weapon_count;

	format(str, sizeof(str), "%sWeapons:\n", str);
	for(new i = 0; i < 13; i ++)
	{
	    if(pData[targetid][pWeapons][i] > 0)
	    {
			weapon_count++;
			format(str, sizeof(str), "%s{FF0000}* %s\n", str, GetWeaponNameEx(pData[targetid][pWeapons][i]));
		}
	}
	if(weapon_count < 1) format(str, sizeof(str), "%s{FF0000}* This player has no weapon with them.", str);

	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Frisk Result", str, "Close", "");
}

DisplayInventory(playerid, targetid = INVALID_PLAYER_ID)
{
	if(targetid == INVALID_PLAYER_ID) targetid = playerid;

	new package[12], string[2048], title[64];

	switch(pData[playerid][pSmuggleDrugs])
	{
	    case 0: package = "None";
	    case 1: package = "Seeds";
	    case 2: package = "Crack";
	    case 3: package = "Ephedrine";
	}
	format(title, sizeof(title), "%s's Inventory Size: %i / 5", GetRPName(playerid), pData[playerid][pInventoryUpgrade]);

	format(string, sizeof(string), "Pot\t%i/%ig\n\
		Crack\t%i/%ig\n\
		Meth\t%i/%ig\n\
		Painkillers\t%i/%i\n\
		Seeds\t%i/%i\n\
		Materials\t%s/%i\n\
		Ephedrine\t%i/%ig\n\
		Muriatic acid\t%i/10\n\
		Baking soda\t%i/10\n\
		Diamond\t%i\n\
		Car Voucher\t%i\n\
		Gun Voucher\t%i\n\
		Diamond Vip Voucher\t%i\n\
		Silver Vip Voucher\t%i\n\
		Bronze Vip Voucher\t%i\n\
		Bandage\t%d\n\
		Medkit\t%d\n\
		Repairkit\t%d\n\
		Vehicle Parts\t%d\n\
		Vest\t%d\n\
		Foods\t%d\n\
		Drinks\t%d\n\
		Fireworks\t%d\n\
		Fishing rod\t%s\n\
		Fish bait\t%i/20\n\
		Boombox\t%s\n\
		MP3 player\t%s\n\
		Phonebook\t%s\n\
		Skates\t%s\n\
		Drivers License\t%s\n\
		Dirty Cash:\t%i\n\
		Burger:\t%i\n\
		Coke:\t%i\n\
		Burrito:\t%i", pData[playerid][pPot],
		GetPlayerCapacity(CAPACITY_WEED),
		pData[playerid][pCrack],
		GetPlayerCapacity(CAPACITY_COCAINE),
		pData[playerid][pMeth],
		GetPlayerCapacity(CAPACITY_METH),
		pData[playerid][pPainkillers],
		GetPlayerCapacity(CAPACITY_PAINKILLERS),
		pData[playerid][pSeeds],
		GetPlayerCapacity(CAPACITY_SEEDS),
		AddCommas(pData[playerid][pMaterials]),
		GetPlayerCapacity(CAPACITY_MATERIALS),
		pData[playerid][pEphedrine],
		GetPlayerCapacity(CAPACITY_EPHEDRINE),
		pData[playerid][pMuriaticAcid],
		pData[playerid][pBakingSoda],
		//FormatNumber(pData[playerid][pDiamonds], 0),
		pData[playerid][pDiamonds],
		pData[playerid][pVoucher1],
		pData[playerid][pVoucher2],
		pData[playerid][pVoucher3],
		pData[playerid][pVoucher4],
		pData[playerid][pVoucher5],
		pData[playerid][pBandage],
		pData[playerid][pMedkit],
		pData[playerid][pRepairKit],
		pData[playerid][pParts],
		pData[playerid][pVest],
		pData[playerid][pFood],
		pData[playerid][pDrink],
		pData[playerid][pFirework],
		(pData[playerid][pFishingRod]) ? (""GREEN"Have") : (""RED"None"),
		pData[playerid][pFishingBait],
		(pData[playerid][pBoombox]) ? (""GREEN"Have") : (""RED"None"),
		(pData[playerid][pMP3Player]) ? (""GREEN"Have") : (""RED"None"),
		(pData[playerid][pPhonebook]) ? (""GREEN"Have") : (""RED"None"),
		(pData[playerid][pSkates]) ? (""GREEN"Have") : (""RED"None"),
		(pData[playerid][pCarLicense]) ? (""GREEN"Have") : (""RED"None"),
		pData[playerid][pDirtyCash], pData[playerid][pTaco], pData[playerid][pJuice],pData[playerid][pBurrito]);
	ShowPlayerDialog(playerid, DIALOG_INV, DIALOG_STYLE_TABLIST, title, string, "Next", "");

	return 1;
}
DisplayStats(playerid, targetid = INVALID_PLAYER_ID)
{
	if(targetid == INVALID_PLAYER_ID) targetid = playerid;

    new name[24], gender[8], faction[48], facrank[32], gang[32], gangrank[32], insurance[24], division[32], Float:health, Float:armor, Float:maxarmor;

	if(playerid == MAX_PLAYERS)
	{
		strcpy(name, pData[playerid][pUsername]);
	}
	else
	{
		strcat(name, GetRPName(playerid));
	}

	if(pData[playerid][pGender] == 1) gender = "Male";
	else if(pData[playerid][pGender] == 2) gender = "Female";
	else if(pData[playerid][pGender] == 3) gender = "Shemale";

	switch(pData[playerid][pInsurance])
	{
	    case HOSPITAL_COUNTY: insurance = "County General";
	    case HOSPITAL_ALLSAINTS: insurance = "All Saints";
	    default: insurance = "None";
	}

	if(pData[playerid][pFaction] >= 0)
	{
	    strcpy(faction, FactionInfo[pData[playerid][pFaction]][fName]);
	    strcpy(facrank, FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]]);

	    if(pData[playerid][pDivision] >= 0)
	    {
	        strcpy(division, FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]]);
		}
		else
		{
		    division = "None";
		}
	}
	else
	{
	    faction = "None";
	    facrank = "N/A";
	    division = "None";
	}

	if(pData[playerid][pGang] >= 0)
	{
	    strcpy(gang, GangInfo[pData[playerid][pGang]][gName]);
	    strcpy(gangrank, GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]]);
	}
	else
	{
	    gang = "None";
	    gangrank = "N/A";
	}

	switch(pData[playerid][pDonator])
	{
		case 0:
			maxarmor = 100.0;
		case 1, 2:
			maxarmor = 125.0;
		case 3:
		    maxarmor = 150.0;
	}

	if(playerid == MAX_PLAYERS)
	{
	    health = pData[playerid][pHealth];
	    armor = pData[playerid][pArmor];
	}
	else
	{
		GetPlayerHealth(playerid, health);
		GetPlayerArmour(playerid, armor);
	}
	new
		exp = (pData[playerid][pLevel] * 6);
	SM(targetid, SERVER_COLOR,  	"_______________________________________________________________________________");
 	SM(targetid, COLOR_WHITE, 		"%s - (Level: %i) - (Gender: %s) - (Age: %i) - (Cash: $%s) - (Bank: $%s) - (Hours: %i) - (Ph: %i)\n", name, pData[playerid][pLevel], gender, pData[playerid][pAge], AddCommas(pData[playerid][pCash]), AddCommas(pData[playerid][pBank]), pData[playerid][pHours], pData[playerid][pPhone]);
	SM(targetid, 0xffde84ff,  	 	"(Total Wealth: $%s) - (Addict: %i/3) - (Asset: %i/4) - (Channel: %i) - (Report Warnings: %i/3)\n", AddCommas(pData[playerid][pCash] + pData[playerid][pBank]), pData[playerid][pAddictUpgrade], pData[playerid][pAssetUpgrade], pData[playerid][pChannel], pData[playerid][pReportWarns]);
	SM(targetid, COLOR_WHITE, 		"(Job: %s / %s) - (Job Skill: %i) - (Crimes: %i) - (Arrested: %i) - (Jail Time: %i seconds)\n", GetJobName(pData[playerid][pJob]), GetJobName(pData[playerid][pSecondJob]), GetJobLevel(playerid, pData[playerid][pJob]), pData[playerid][pCrimes], pData[playerid][pArrested], pData[playerid][pJailTime]);
	SM(targetid, 0xffde84ff,  	 	"(Spawn Health: %.1f/100.0) - (Spawn Armor: %.1f/%.1f) - (Insurance: %s) - (Paycheck: $%i)\n", pData[playerid][pSpawnHealth], pData[playerid][pSpawnArmor], maxarmor, insurance, pData[playerid][pPaycheck]);
    SM(targetid, COLOR_WHITE, 		"(Faction: %s [%s %i -%s]) - (Gang: %s [%s %i]) - (Helper: %s) - (DM Warnings: %i/5) - (Weapon Restriction: %i Hrs)\n", faction, facrank, pData[playerid][pFactionRank], division, gang, gangrank, pData[playerid][pGangRank], GetHelperRank(playerid), pData[playerid][pDMWarnings], pData[playerid][pWeaponRestricted]);
	SM(targetid, 0xffde84ff, 		"(VIP Package: %s) - (Married to: %s) - (Warnings: %i) - (Wanted Level: %i)\n", GetDonatorRank(pData[playerid][pDonator]), pData[playerid][pMarriedName], pData[playerid][pWarnings], pData[playerid][pWantedLevel]);
	SM(targetid, 0xffde84ff, 		"(Respect Points: %i/%i) - (Cooldown: %i Hrs)\n",pData[playerid][pEXP],exp, pData[playerid][pFgRestricted]);

	if(pData[targetid][pAdmin] > 0)
	{
	    SM(targetid, COLOR_WHITE, 	"(Interior: %i) - (Virtual: %i) - (AFK: %s) - (Reports: %i) - (Help Requests: %i)", (playerid == MAX_PLAYERS) ? (pData[playerid][pInterior]) : (GetPlayerInterior(playerid)), (playerid == MAX_PLAYERS) ? (pData[playerid][pWorld]) : (GetPlayerVirtualWorld(playerid)), (playerid == MAX_PLAYERS) ? ("No") : ((pData[playerid][pAFK]) ? ("Yes") : ("No")),
			pData[playerid][pReports], pData[playerid][pHelpRequests]);
	}
	SM(targetid, SERVER_COLOR,  	"_______________________________________________________________________________");
	return 1;
}

ShowDialogToPlayer(playerid, dialogid)
{
	new string[2048];
    //new vehiclestring[4096];
	switch(dialogid)
	{
		case DIALOG_REGISTER:
		{
        	format(string, sizeof(string), "{FFFFFF}Welcome to {B2EBE0}Manila Reality Roleplay{ffffff}, %s.\n{ffffff}Please enter your password of choice below in order to register.\n\n\n{ffffff}Get the latest updates on our Discords!\nRegister on our Discords at {B2EBE0}Discord.io/manilareality-rp\n\n\n Don't forget to invite your friends! We are giving freebies to everyone who joined!", GetPlayerNameEx(playerid));
       		ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "{B2EBE0}Manila Reality Roleplay {FFFFFF}| Register", string, "Register", "Quit");
		}
		case DIALOG_LOGIN:
		{
		    format(string, sizeof(string), "{FFFFFF}Welcome back to Manila Reality Roleplay, %s.\nPlease enter your password below in order to authenticate.\n\n{ff0000}If you forgot your password, please contact the server management or post a request at the Discords.", GetPlayerNameEx(playerid));
     		ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "{B2EBE0}Manila Reality Roleplay {FFFFFF}| Login", string, "Login", "Quit");
		}
		case DIALOG_GENDER:
		{
		    ShowPlayerDialog(playerid, DIALOG_GENDER, DIALOG_STYLE_LIST, ""SVRCLR"Gender", "Male\nFemale", "Select", "");
		}
		case DIALOG_AGE:
		{
	   		ShowPlayerDialog(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, ""SVRCLR"Age", ""WHITE"What age would you like your character to be (Between 13-99 yeas old):", "Submit", "Back");
		}
 	    case DIALOG_BUYVEHICLENEW:
	    {
	        ShowPlayerDialog(playerid, DIALOG_BUYVEHICLENEW, DIALOG_STYLE_LIST, "Vehicle Menu", "Browse as Model\nBrowse as List", "Select", "");
		}
		case DIALOG_REFERRAL:
		{
		    ShowPlayerDialog(playerid, DIALOG_REFERRAL, DIALOG_STYLE_INPUT, ""SVRCLR"Referral", ""WHITE"Have you been invited here by one of our players? Put their name:\n(Click on 'Skip' if you haven't been referred by anyone.)", "Submit", "Skip");
		}
		case DIALOG_PROXY:
	    {
			format(string, sizeof(string), "Voice\tProximity\n" \
				"Whisper Proximity\t%s\n" \
				"Normal Proximity\t%s\n" \
		        "Shout Proximity\t%s\n",
		        //"<< Back",
		        (pData[playerid][pWhisper]== 1) ? ("{00FF00}Selected") : ("{ff0000}OFF"),
		        (pData[playerid][pNormal]== 1) ? ("{00FF00}Selected") : ("{ff0000}OFF"),
		        (pData[playerid][pShout]== 1) ? ("{00FF00}Selected") : ("{ff0000}OFF"));
			ShowPlayerDialog(playerid, DIALOG_PROXY, DIALOG_STYLE_TABLIST_HEADERS, "Voice Proximity", string, "Connect", "Close");
	    }
		case DIALOG_BIND:
		{
			new num1[128], num2[128], num3[128], num4[128], num5[128], num6[128], num7[128], num9[128], num10[128], num8[128];
			strcat(string, "BIND ID \tME OR DO\tBIND MESSAGE");
			num1 = "{ff0000}1.{FFFFFF}";
			num2 = "{ff0000}2.{FFFFFF}";
			num3 = "{ff0000}3.{FFFFFF}";
			num4 = "{ff0000}4.{FFFFFF}";
			num5 = "{ff0000}5.{FFFFFF}";
			num6 = "{ff0000}6.{FFFFFF}";
			num7 = "{ff0000}7.{FFFFFF}";
			num8 = "{ff0000}8.{FFFFFF}";
			num9 = "{ff0000}9.{FFFFFF}";
			num10 = "{ff0000}10.{FFFFFF}";	
			
			format(string, sizeof(string), "%s\n\
			"WHITE"%s\tME\t%s\n\
			%s\tME\t%s\n\
			%s\tME\t%s\n\
			%s\tME\t%s\n\
			%s\tME\t%s\n\
			%s\tDO\t%s\n\
			%s\tDO\t%s\n\
			%s\tDO\t%s\n\
			%s\tDO\t%s\n\
			%s\tDO\t%s", string, num1, (pData[playerid][pBind]), num2, (pData[playerid][pBind2]) , num3, (pData[playerid][pBind3]), num4, (pData[playerid][pBind4]) , num5, (pData[playerid][pBind5]), num6 , (pData[playerid][pBind6]) , num7 , (pData[playerid][pBind7]), num8, 
			(pData[playerid][pBind8]), num9, (pData[playerid][pBind9]), num10, (pData[playerid][pBind10]));
			
			
			ShowPlayerDialog(playerid, DIALOG_BIND, DIALOG_STYLE_TABLIST_HEADERS, "BIND SYSTEM - 3TON#9197 ", string, "EDIT", "Close");
		}
		case DIALOG_BIND1:
		{
		    format(string, sizeof(string), "[BIND ID: 1] Just type what you want for this bind please be aware that this bind is for\n NOTE: this is for /me ");
	        ShowPlayerDialog(playerid, DIALOG_BIND1, DIALOG_STYLE_INPUT, ""WHITE"BIND SYSTEM - 3TON#9197", string, "Submit", "Cancel");
		}
		case DIALOG_BIND1A:
		{
		    format(string, sizeof(string), "[BIND ID: 2] Just type what you want for this bind please be aware that this bind is for\n NOTE: this is for /me ");
	        ShowPlayerDialog(playerid, DIALOG_BIND1A, DIALOG_STYLE_INPUT, ""WHITE"BIND SYSTEM - 3TON#9197", string, "Submit", "Cancel");
		}
		case DIALOG_BIND1B:
		{
		    format(string, sizeof(string), "[BIND ID: 3] Just type what you want for this bind please be aware that this bind is for\n NOTE: this is for /me ");
	        ShowPlayerDialog(playerid, DIALOG_BIND1B, DIALOG_STYLE_INPUT, ""WHITE"BIND SYSTEM - 3TON#9197", string, "Submit", "Cancel");
		}
		case DIALOG_BIND1C:
		{
		    format(string, sizeof(string), "[BIND ID: 4] Just type what you want for this bind please be aware that this bind is for\n NOTE: this is for /me ");
	        ShowPlayerDialog(playerid, DIALOG_BIND1C, DIALOG_STYLE_INPUT, ""WHITE"BIND SYSTEM - 3TON#9197", string, "Submit", "Cancel");
		}
		case DIALOG_BIND1D:
		{
		    format(string, sizeof(string), "[BIND ID: 5] Just type what you want for this bind please be aware that this bind is for\n NOTE: this is for /me ");
	        ShowPlayerDialog(playerid, DIALOG_BIND1D, DIALOG_STYLE_INPUT, ""WHITE"BIND SYSTEM - 3TON#9197", string, "Submit", "Cancel");
		}
		case DIALOG_BIND2:
		{
		    format(string, sizeof(string), "[BIND ID: 6] Just type what you want for this bind please be aware that this bind is for\n NOTE: this is for /do ");
	        ShowPlayerDialog(playerid, DIALOG_BIND2, DIALOG_STYLE_INPUT, ""WHITE"BIND SYSTEM - 3TON#9197", string, "Submit", "Cancel");
		}
		case DIALOG_BIND2A:
		{
		    format(string, sizeof(string), "[BIND ID: 7] Just type what you want for this bind please be aware that this bind is for\n NOTE: this is for /do ");
	        ShowPlayerDialog(playerid, DIALOG_BIND2A, DIALOG_STYLE_INPUT, ""WHITE"BIND SYSTEM - 3TON#9197", string, "Submit", "Cancel");
		}
		case DIALOG_BIND2B:
		{
		    format(string, sizeof(string), "[BIND ID: 8] Just type what you want for this bind please be aware that this bind is for\n NOTE: this is for /do ");
	        ShowPlayerDialog(playerid, DIALOG_BIND2B, DIALOG_STYLE_INPUT, ""WHITE"BIND SYSTEM - 3TON#9197", string, "Submit", "Cancel");
		}
		case DIALOG_BIND2C:
		{
		    format(string, sizeof(string), "[BIND ID: 9] Just type what you want for this bind please be aware that this bind is for\n NOTE: this is for /do ");
	        ShowPlayerDialog(playerid, DIALOG_BIND2C, DIALOG_STYLE_INPUT, ""WHITE"BIND SYSTEM - 3TON#9197", string, "Submit", "Cancel");
		}			
		case DIALOG_BIND2D:
		{
		    format(string, sizeof(string), "[BIND ID: 10] Just type what you want for this bind please be aware that this bind is for\n NOTE: this is for /do ");
	        ShowPlayerDialog(playerid, DIALOG_BIND2D, DIALOG_STYLE_INPUT, ""WHITE"BIND SYSTEM - 3TON#9197", string, "Submit", "Cancel");
		}		
		
		/*#if defined Christmas
	#else
			case DIALOG_CAROL:
			{
				new carolString[250];
				format(carolString, sizeof(carolString), ""RED"Merry"GREY"Christmas\n"WHITE"To start caroling on this house, type in the following into the text field.\n"GREEN"%s", ReturnLyrics(CarolLyrics[playerid]));
				ShowPlayerDialog(playerid, DIALOG_CAROL, DIALOG_STYLE_INPUT, ""SVRCLR"Christmas Caroling", carolString, "Submit", "Skip");
			}
		#endif*/
 		case DIALOG_VENDOR:
		{
			ShowPlayerDialog(playerid, DIALOG_VENDOR, DIALOG_STYLE_LIST, ""TEAL"Street Food", "Burger "GREEN"85 PHP"WHITE"\nSISIG "GREEN"150 PHP"WHITE"\nPIATTOS "GREEN"25 PHP"WHITE"\nDONUT "GREEN"55 PHP"WHITE"\nBUKO JUICE "GREEN"20 PHP"WHITE"\nPINEAPPLE JUICE "GREEN"50 PHP"WHITE"\nSPRITE "GREEN"28 PHP"WHITE"\nNATURE SPRING "GREEN"15 PHP"WHITE"", "Proceed", "Back");
		}
		case DIALOG_BUYFURNITURE1:
		{
		    for(new i = 0; i < sizeof(furnitureCategories); i ++)
		    {
		        format(string, sizeof(string), "%s\n%s", string, furnitureCategories[i]);
		    }
		    ShowPlayerDialog(playerid, DIALOG_BUYFURNITURE1, DIALOG_STYLE_LIST, "Choose a category to browse.", string, "Select", "Cancel");
			//ShowModelSelectionMenuEx(playerid, furnitureArray, "Select an item to buy", DIALOG_BUYFURNITURE1, 16.0, 0.0, 130.0);
		}
		case DIALOG_BUYFURNITURE2:
		{
		    new index = -1;

            for(new i = 0; i < sizeof(furnitureArray); i ++)
            {
                if(!strcmp(furnitureArray[i][fCategory], furnitureCategories[pData[playerid][pCategory]]))
                {
                    if(index == -1)
                    {
                        index = i;
                    }

                    format(string, sizeof(string), "%s\n%s ($%i)", string, furnitureArray[i][fName], furnitureArray[i][fPrice]);
                }
            }

            pData[playerid][pFurnitureIndex] = index;
            ShowPlayerDialog(playerid, DIALOG_BUYFURNITURE2, DIALOG_STYLE_LIST, "Choose an item in order to preview it.", string, "Select", "Back");
		}
		case DIALOG_NEWBIE:
		{
			ShowPlayerDialog(playerid, DIALOG_NEWBIE, DIALOG_STYLE_INPUT, "Ask Newbie Question", "Please input your question\nPlease bare in mind only script/server related questions will be answered.", "Send", "Cancel");
		}
		case DIALOG_LANDBUILDTYPE:
		{
		    ShowPlayerDialog(playerid, DIALOG_LANDBUILDTYPE, DIALOG_STYLE_LIST, "Choose your browsing method.", "Browse by Model\nBrowse by List", "Select", "Back");
		}
  		case DIALOG_LANDBUILD1:
		{
		    for(new i = 0; i < sizeof(furnitureCategories); i ++)
		    {
		        format(string, sizeof(string), "%s\n%s", string, furnitureCategories[i]);
		    }

		    ShowPlayerDialog(playerid, DIALOG_LANDBUILD1, DIALOG_STYLE_LIST, "Choose a category to browse.", string, "Select", "Back");
		}
		case DIALOG_LANDBUILD2:
		{
		    new index = -1;

            for(new i = 0; i < sizeof(furnitureArray); i ++)
            {
                if(!strcmp(furnitureArray[i][fCategory], furnitureCategories[pData[playerid][pCategory]]))
                {
                    if(index == -1)
                    {
                        index = i;
                    }

                    format(string, sizeof(string), "%s\n%s (%s)", string, furnitureArray[i][fName], FormatNumber(furnitureArray[i][fPrice]));
                }
            }

            pData[playerid][pFurnitureIndex] = index;
            ShowPlayerDialog(playerid, DIALOG_LANDBUILD2, DIALOG_STYLE_LIST, "Choose an item in order to preview it.", string, "Select", "Back");
		}
		case DIALOG_LANDMENU:
		{
		    new
		        landid = GetNearbyLand(playerid);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LAND_MAINMENU, playerid);
		}
		case DIALOG_LANDOBJECTMENU:
		{
	        if(IsGateObject(pData[playerid][pSelected]))
	        {
		        ShowPlayerDialog(playerid, DIALOG_LANDOBJECTMENU, DIALOG_STYLE_LIST, "Choose how you want to edit this object.", "Edit object\nEdit gate destination\nDuplicate object\nSell object", "Select", "Back");
	        }
			else
			{
                ShowPlayerDialog(playerid, DIALOG_LANDOBJECTMENU, DIALOG_STYLE_LIST, "Choose how you want to edit this object.", "Edit object\nDuplicate object\nSell object", "Select", "Back");
	        }
		}
		case DIALOG_LANDOBJECTS:
		{
		    new landid = GetNearbyLand(playerid);

		    if(landid >= 0 && HasLandPerms(playerid, landid))
		    {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM landobjects WHERE landid = %i ORDER BY id DESC LIMIT %i, %i", LandInfo[landid][lID], (pData[playerid][pPage] - 1) * MAX_LISTED_OBJECTS, MAX_LISTED_OBJECTS);
   				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LIST_LANDOBJECTS, playerid);
			}
		}
		case DIALOG_ATM:
		{
		    format(string, sizeof(string), "How much would you like to withdraw? (Your account balance is $%i.)", pData[playerid][pBank]);
	        ShowPlayerDialog(playerid, DIALOG_ATM, DIALOG_STYLE_INPUT, ""WHITE"Cash Withdrawal | "SERVER_NAME"", string, "Submit", "Cancel");
		}
		case DIALOG_BWITHDRAW:
		{
		    format(string, sizeof(string), "How much would you like to withdraw? (Your account balance is $%i.)", pData[playerid][pBank]);
	        ShowPlayerDialog(playerid, DIALOG_BWITHDRAW, DIALOG_STYLE_INPUT, ""WHITE"Cash Withdrawal | "SERVER_NAME"", string, "Submit", "Cancel");
		}
		case DIALOG_DTOC:
		{
		    format(string, sizeof(string), "How much would you like to exchange for a cleanmoeny? (Your dirtymoney balance is $%i.)", pData[playerid][pDirtyCash]);
	        ShowPlayerDialog(playerid, DIALOG_DTOC, DIALOG_STYLE_INPUT, ""WHITE"Exchange Dirty To Clean Money | "SERVER_NAME"", string, "Submit", "Cancel");
		}		
		//exchange system
		case DIALOG_CTOD:
		{
		    format(string, sizeof(string), "How much would you like to exchange for a dirtymoney? (Your account balance is $%i.)", pData[playerid][pCash]);
	        ShowPlayerDialog(playerid, DIALOG_CTOD, DIALOG_STYLE_INPUT, ""WHITE"Exchange Clean To Dirty Money  | "SERVER_NAME"", string, "Submit", "Cancel");
		}				
		case DIALOG_BDEPOSIT:
		{
		    format(string, sizeof(string), "How much would you like to withdraw? (You have a $%i in your hand.)", pData[playerid][pCash]);
	        ShowPlayerDialog(playerid, DIALOG_BDEPOSIT, DIALOG_STYLE_INPUT, ""WHITE"Cash Deposit | "SERVER_NAME"", string, "Submit", "Cancel");
		}
		case DIALOG_BTRANSFER:
		{
		    format(string, sizeof(string), "How much would you like to transfer? (Your account balance is $%i.)", pData[playerid][pBank]);
	        ShowPlayerDialog(playerid, DIALOG_BTRANSFER, DIALOG_STYLE_INPUT, ""WHITE"Transfer Money | "SERVER_NAME"", string, "Submit", "Cancel");
		}	
		case DIALOG_BTRANSFER1:
		{
		    format(string, sizeof(string), "Enter Acc name's or Paypal Id.");
	        ShowPlayerDialog(playerid, DIALOG_BTRANSFER1, DIALOG_STYLE_INPUT, ""WHITE"TRANSFER MONEY | "SERVER_NAME"", string, "Submit", "Cancel");
		}
		case DIALOG_ATMDEPOSIT:
		{
		    format(string, sizeof(string), "How much would you like to deposit? (Your account balance is %s.)", FormatNumber(pData[playerid][pBank]));
	        ShowPlayerDialog(playerid, DIALOG_ATMDEPOSIT, DIALOG_STYLE_INPUT, ""SVRCLR"Deposit", string, "Select", "Cancel");
		}
		case DIALOG_ATMWITHDRAW:
		{
		    format(string, sizeof(string), "How much would you like to withdraw? (Your account balance is %s.)", FormatNumber(pData[playerid][pBank]));
	        ShowPlayerDialog(playerid, DIALOG_ATMWITHDRAW, DIALOG_STYLE_INPUT, ""SVRCLR"Withdraw", string, "Select", "Cancel");
		}
		case DIALOG_ATM_TRANSFER:
		{
	        ShowPlayerDialog(playerid, DIALOG_ATM_TRANSFER, DIALOG_STYLE_INPUT, ""SVRCLR"PAYPAL ID", "Please put the paypalID you want to transfer the money to:", "Select", "Cancel");
		}
		case DIALOG_ATM_TRANSFER2:
		{
		    format(string, sizeof(string), "How much would you like to transfer? (Your account balance is %s.)", FormatNumber(pData[playerid][pBank]));
	        ShowPlayerDialog(playerid, DIALOG_ATM_TRANSFER2, DIALOG_STYLE_INPUT, ""SVRCLR"Withdraw", string, "Select", "Cancel");
		}
		case DIALOG_BUYCLOTHINGTYPE:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUYCLOTHINGTYPE, DIALOG_STYLE_LIST, "Choose a browsing method.", "Browse by Model\nBrowse by List", "Select", "Back");
		}
		case DIALOG_BUYCLOTHINGTYPE1:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUYCLOTHINGTYPE1, DIALOG_STYLE_LIST, "Choose a browsing method.", "Browse by Model\nBrowse by List", "Select", "Back");
		}
		case DIALOG_BUYCLOTHING:
		{
		    new index = -1;

            for(new i = 0; i < sizeof(clothingArray); i ++)
            {
                if(!strcmp(clothingArray[i][clothingType], clothingTypes[pData[playerid][pCategory]]))
                {
                    if(index == -1)
                    {
                        index = i;
                    }

                    format(string, sizeof(string), "%s\n%s", string, clothingArray[i][clothingName]);
                }
            }

            pData[playerid][pClothingIndex] = index;
            ShowPlayerDialog(playerid, DIALOG_BUYCLOTHING, DIALOG_STYLE_LIST, "Choose an item in order to preview it.", string, "Select", "Cancel");
		}
		case DIALOG_BUYCLOTHES:
		{
			new businessid = GetInsideBusiness(playerid);

			if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
			{
			    format(string, sizeof(string), "%s %s [%i products]", BusinessInfo[businessid][bDescription], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);

				if(pData[playerid][pDonator] > 0) {
					ShowPlayerDialog(playerid, DIALOG_BUYCLOTHES, DIALOG_STYLE_INPUT, string, "NOTE: New clothes are free for VIP members.\n\nPlease input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.net/wiki/Skins:All ))", "Submit", "Cancel");
				} else {
					ShowPlayerDialog(playerid, DIALOG_BUYCLOTHES, DIALOG_STYLE_INPUT, string, "NOTE: New clothes costs $2,000.\n\nPlease input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.net/wiki/Skins:All ))", "Submit", "Cancel");
				}
			}
		}
		case DIALOG_FACTIONPAY1:
		{
		    string = "#\tRank\tPaycheck";

		    for(new i = 0; i < FactionInfo[pData[playerid][pFactionEdit]][fRankCount]; i ++)
		    {
		        format(string, sizeof(string), "%s\n%i\t%s\t"SVRCLR"$%i"WHITE"", string, i, FactionRanks[pData[playerid][pFactionEdit]][i], FactionInfo[pData[playerid][pFactionEdit]][fPaycheck][i]);
			}

			ShowPlayerDialog(playerid, DIALOG_FACTIONPAY1, DIALOG_STYLE_TABLIST_HEADERS, FactionInfo[pData[playerid][pFactionEdit]][fName], string, "Change", "Cancel");
		}
		case DIALOG_PHONEBOOK:
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM phonebook ORDER BY name ASC LIMIT %i, %i", (pData[playerid][pPage] - 1) * MAX_LISTED_NUMBERS, MAX_LISTED_NUMBERS);
			mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_VIEW_PHONEBOOK, playerid);
		}
		case DIALOG_MP3PLAYER:
		{
		    ShowPlayerDialog(playerid, DIALOG_MP3PLAYER, DIALOG_STYLE_LIST, "MP3 player", "Custom URL\nUploaded Music\nRadio Stations\nStop Music", "Select", "Cancel");
		}
		case DIALOG_MP3RADIO:
		{
		    ShowPlayerDialog(playerid, DIALOG_MP3RADIO, DIALOG_STYLE_LIST, "Radio Stations", "Browse Genres\nSearch by Name", "Select", "Back");
		}
		case DIALOG_MP3RADIOGENRES:
		{
		    new genre[32] = "n/a";

		    for(new i = 0; i < sizeof(radioGenreList); i ++)
		    {
		        if(strcmp(radioGenreList[i][rGenre], genre) != 0)
		        {
		            strcpy(genre, radioGenreList[i][rGenre]);
		            strcat(string, genre);
		            strcat(string, "\n");
		        }
		    }

		    ShowPlayerDialog(playerid, DIALOG_MP3RADIOGENRES, DIALOG_STYLE_LIST, "Choose a genre to browse stations in.", string, "Select", "Back");
		}
		case DIALOG_MP3RADIOSUBGENRES:
		{
		    for(new i = 0; i < sizeof(radioGenreList); i ++)
		    {
		        if(!strcmp(radioGenreList[i][rGenre], pData[playerid][pGenre]))
		        {
		            format(string, sizeof(string), "%s\n%s", string, radioGenreList[i][rSubgenre]);
		        }
			}

			ShowPlayerDialog(playerid, DIALOG_MP3RADIOSUBGENRES, DIALOG_STYLE_LIST, "Choose a subgenre to browse stations in.", string, "Select", "Back");
		}
		case DIALOG_MP3RADIOSEARCH:
		{
		    ShowPlayerDialog(playerid, DIALOG_MP3RADIOSEARCH, DIALOG_STYLE_INPUT, "Search by Name | "SERVER_NAME"", "Enter the full or partial name of the radio station:", "Submit", "Back");
		}

		case DIALOG_GCLOTHES:
		{
		    if(!GetGangSkinCount(pData[playerid][pGang]))
    		{
        		return SCM(playerid, COLOR_SYNTAX, "There are no skins setup for your gang.");
			}
			pData[playerid][pSkinSelected] = -1;
    		ShowPlayerDialog(playerid, DIALOG_GANGSKINS, DIALOG_STYLE_MSGBOX, "Skin selection", "Press "SVRCLR"Next{A9C4E4} to browse through available gang skins.", "Next", "Confirm");
		}

		case DIALOG_GANGSTASH:
		{
		    format(string, sizeof(string), "Gang Locker ($%i/$%i) (Materials: %i/%i)", GangInfo[pData[playerid][pGang]][gCash], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_CASH), GangInfo[pData[playerid][pGang]][gMaterials], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_MATERIALS));
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASH, DIALOG_STYLE_LIST, string, "Weapons\nDrugs\nMaterials\nCash\nClothes", "Select", "Cancel");
		}
		case DIALOG_GANGSTASHWEAPONS1:
		{
		    format(string, sizeof(string), "[%i] Vest (R1+)\n[%i] 9mm (R1+)\n[%i] Sdpistol (R1+)\n[%i] Deagle (R4+)\n[%i] Shotgun (R1+)\n[%i] SPAS-12 (R4+)\n[%i] Sawn-off (R4+)\n[%i] Tec-9 (R3+)\n[%i] Micro Uzi (R3+)\n[%i] MP5 (R3+)\n[%i] AK-47 (R4+)\n[%i] M4 (R4+)\n[%i] Rifle (R2+)\n[%i] Sniper (R5+)\n[%i] Molotov (R5+)",
		        GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_VEST], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_9MM], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SPAS12], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SAWNOFF], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_TEC9],
				GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_UZI], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MP5], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_AK47], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_M4], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER], GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MOLOTOV]);
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASHWEAPONS1, DIALOG_STYLE_LIST, "Gang Locker | Weapons", string, "Select", "Back");
		}
		case DIALOG_GANGSTASHDRUGS1:
		{
		    format(string, sizeof(string), "Pot (%i/%ig)\nCrack (%i/%ig)\nMeth (%i/%ig)\nPainkillers (%i/%i)",
				GangInfo[pData[playerid][pGang]][gPot], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_WEED), GangInfo[pData[playerid][pGang]][gCrack], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_COCAINE), GangInfo[pData[playerid][pGang]][gMeth], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_METH), GangInfo[pData[playerid][pGang]][gPainkillers], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS1, DIALOG_STYLE_LIST, "Gang Locker | Drugs", string, "Select", "Back");
		}
		case DIALOG_GANGSTASHDRUGS2:
		{
		    if(pData[playerid][pSelected] == ITEM_WEED) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang Locker | Pot", "Withdraw\nDeposit", "Select", "Back");
			} else if(pData[playerid][pSelected] == ITEM_COCAINE) {
			    ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang Locker | Crack", "Withdraw\nDeposit", "Select", "Back");
			} else if(pData[playerid][pSelected] == ITEM_METH) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang Locker | Meth", "Withdraw\nDeposit", "Select", "Back");
			} else if(pData[playerid][pSelected] == ITEM_PAINKILLERS) {
			    ShowPlayerDialog(playerid, DIALOG_GANGSTASHDRUGS2, DIALOG_STYLE_LIST, "Gang Locker | Painkillers", "Withdraw\nDeposit", "Select", "Back");
			}
		}
		case DIALOG_GANGSTASHAMMO1:
		{
		    format(string, sizeof(string), "HP ammo (%i/%i)\nPoison ammo (%i/%i)\nFMJ ammo (%i/%i)", GangInfo[pData[playerid][pGang]][gHPAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_HPAMMO), GangInfo[pData[playerid][pGang]][gPoisonAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_POISONAMMO), GangInfo[pData[playerid][pGang]][gFMJAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_FMJAMMO));
		    ShowPlayerDialog(playerid, DIALOG_GANGSTASHAMMO1, DIALOG_STYLE_LIST, "Gang Locker | Ammo", string, "Select", "Back");
		}
		case DIALOG_GANGSTASHAMMO2:
		{
		    if(pData[playerid][pSelected] == ITEM_HPAMMO) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHAMMO2, DIALOG_STYLE_LIST, "Gang Locker | HP ammo", "Withdraw\nDeposit", "Select", "Back");
			} else if(pData[playerid][pSelected] == ITEM_POISONAMMO) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHAMMO2, DIALOG_STYLE_LIST, "Gang Locker | Poison ammo", "Withdraw\nDeposit", "Select", "Back");
			} else if(pData[playerid][pSelected] == ITEM_FMJAMMO) {
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHAMMO2, DIALOG_STYLE_LIST, "Gang Locker | FMJ ammo", "Withdraw\nDeposit", "Select", "Back");
			}
		}
		case DIALOG_GANGSTASHMATS:
		{
		    format(string, sizeof(string), "Withdraw (%i/%i)\nDeposit", GangInfo[pData[playerid][pGang]][gMaterials], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_MATERIALS));
			ShowPlayerDialog(playerid, DIALOG_GANGSTASHMATS, DIALOG_STYLE_LIST, "Gang Locker | Materials", string, "Select", "Back");
		}
		case DIALOG_GANGSTASHCASH:
		{
		    format(string, sizeof(string), "Withdraw ($%i/$%i)\nDeposit", GangInfo[pData[playerid][pGang]][gCash], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_CASH));
  			ShowPlayerDialog(playerid, DIALOG_GANGSTASHCASH, DIALOG_STYLE_LIST, "Gang Locker | Cash", string, "Select", "Back");
		}
		case DIALOG_GANGWITHDRAW:
		{
		    if(pData[playerid][pSelected] == ITEM_WEED) {
		        format(string, sizeof(string), "How much pot would you like to withdraw? (The safe contains %i/%i grams.)", GangInfo[pData[playerid][pGang]][gPot], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_WEED));
			} else if(pData[playerid][pSelected] == ITEM_COCAINE) {
			    format(string, sizeof(string), "How much Crack would you like to withdraw? (The safe contains %i/%i grams.)", GangInfo[pData[playerid][pGang]][gCrack], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_COCAINE));
			} else if(pData[playerid][pSelected] == ITEM_METH) {
		        format(string, sizeof(string), "How much meth would you like to withdraw? (The safe contains %i/%i grams.)", GangInfo[pData[playerid][pGang]][gMeth], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_METH));
			} else if(pData[playerid][pSelected] == ITEM_PAINKILLERS) {
			    format(string, sizeof(string), "How much painkillers would you like to withdraw? (The safe contains %i/%i.)", GangInfo[pData[playerid][pGang]][gPainkillers], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
			} else if(pData[playerid][pSelected] == ITEM_MATERIALS) {
		        format(string, sizeof(string), "How much materials would you like to withdraw? (The safe contains %i/%i.)", GangInfo[pData[playerid][pGang]][gMaterials], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_MATERIALS));
			} else if(pData[playerid][pSelected] == ITEM_CASH) {
			    format(string, sizeof(string), "How much cash would you like to withdraw? (The safe contains $%i/$%i.)", GangInfo[pData[playerid][pGang]][gCash], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_CASH));
			} else if(pData[playerid][pSelected] == ITEM_HPAMMO) {
		        format(string, sizeof(string), "How much HP ammo would you like to withdraw? (The safe contains %i/%i rounds.)", GangInfo[pData[playerid][pGang]][gHPAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_HPAMMO));
			} else if(pData[playerid][pSelected] == ITEM_POISONAMMO) {
		        format(string, sizeof(string), "How much poison ammo would you like to withdraw? (The safe contains %i/%i rounds.)", GangInfo[pData[playerid][pGang]][gPoisonAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_POISONAMMO));
			} else if(pData[playerid][pSelected] == ITEM_FMJAMMO) {
		        format(string, sizeof(string), "How much FMJ ammo would you like to withdraw? (The safe contains %i/%i rounds.)", GangInfo[pData[playerid][pGang]][gFMJAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_FMJAMMO));
			}

			ShowPlayerDialog(playerid, DIALOG_GANGWITHDRAW, DIALOG_STYLE_INPUT, "Gang Stash Withdraw | "SERVER_NAME"", string, "Submit", "Back");
		}
		case DIALOG_GANGDEPOSIT:
		{
		    if(pData[playerid][pSelected] == ITEM_WEED) {
		        format(string, sizeof(string), "How much pot would you like to deposit? (The safe contains %i/%i grams.)", GangInfo[pData[playerid][pGang]][gPot], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_WEED));
			} else if(pData[playerid][pSelected] == ITEM_COCAINE) {
			    format(string, sizeof(string), "How much Crack would you like to deposit? (The safe contains %i/%i grams.)", GangInfo[pData[playerid][pGang]][gCrack], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_COCAINE));
			} else if(pData[playerid][pSelected] == ITEM_METH) {
		        format(string, sizeof(string), "How much meth would you like to deposit? (The safe contains %i/%i grams.)", GangInfo[pData[playerid][pGang]][gMeth], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_METH));
			} else if(pData[playerid][pSelected] == ITEM_PAINKILLERS) {
			    format(string, sizeof(string), "How much painkillers would you like to deposit? (The safe contains %i/%i.)", GangInfo[pData[playerid][pGang]][gPainkillers], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
			} else if(pData[playerid][pSelected] == ITEM_MATERIALS) {
		        format(string, sizeof(string), "How much materials would you like to deposit? (The safe contains %i/%i.)", GangInfo[pData[playerid][pGang]][gMaterials], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_MATERIALS));
			} else if(pData[playerid][pSelected] == ITEM_CASH) {
			    format(string, sizeof(string), "How much cash would you like to deposit? (The safe contains $%i/$%i.)", GangInfo[pData[playerid][pGang]][gCash], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_CASH));
			} else if(pData[playerid][pSelected] == ITEM_HPAMMO) {
		        format(string, sizeof(string), "How much HP ammo would you like to deposit? (The safe contains %i/%i rounds.)", GangInfo[pData[playerid][pGang]][gHPAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_HPAMMO));
			} else if(pData[playerid][pSelected] == ITEM_POISONAMMO) {
		        format(string, sizeof(string), "How much poison ammo would you like to deposit? (The safe contains %i/%i rounds.)", GangInfo[pData[playerid][pGang]][gPoisonAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_POISONAMMO));
			} else if(pData[playerid][pSelected] == ITEM_FMJAMMO) {
		        format(string, sizeof(string), "How much FMJ ammo would you like to deposit? (The safe contains %i/%i rounds.)", GangInfo[pData[playerid][pGang]][gFMJAmmo], GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_FMJAMMO));
			}

			ShowPlayerDialog(playerid, DIALOG_GANGDEPOSIT, DIALOG_STYLE_INPUT, "Gang Stash Deposit | "SERVER_NAME"", string, "Submit", "Back");
		}
		case DIALOG_GANGARMSPRICES:
		{
		    format(string, sizeof(string), "#\tWeapon\tPrice\tCost\n1\tMicro Uzi\t$%i\t500 materials\n2\tTec-9\t$%i\t500 materials\n3\tMP5\t$%i\t1000 materials\n4\tDesert Eagle\t$%i\t2000 materials\n5\tMolotov\t$%i\t5000 materials\n6\tAK-47\t$%i\t3000 materials\n7\tM4\t$%i\t4000 materials\n8\tSniper\t$%i\t6500 materials\n9\tSawnoff Shotgun\t$%i\t3000 materials\n10\tHollow Point Ammo\t$%i\t%i rounds\n11\tPoison Tip Ammo\t$%i\t%i rounds\n12\tFMJ Ammo\t$%i\t%i rounds",
		        GangInfo[pData[playerid][pGang]][gArmsPrices][0], GangInfo[pData[playerid][pGang]][gArmsPrices][1], GangInfo[pData[playerid][pGang]][gArmsPrices][2], GangInfo[pData[playerid][pGang]][gArmsPrices][3], GangInfo[pData[playerid][pGang]][gArmsPrices][4], GangInfo[pData[playerid][pGang]][gArmsPrices][5], GangInfo[pData[playerid][pGang]][gArmsPrices][6], GangInfo[pData[playerid][pGang]][gArmsPrices][7], GangInfo[pData[playerid][pGang]][gArmsPrices][8],
				GangInfo[pData[playerid][pGang]][gArmsPrices][9], GangInfo[pData[playerid][pGang]][gArmsHPAmmo], GangInfo[pData[playerid][pGang]][gArmsPrices][10], GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo], GangInfo[pData[playerid][pGang]][gArmsPrices][11], GangInfo[pData[playerid][pGang]][gArmsFMJAmmo]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICES, DIALOG_STYLE_TABLIST_HEADERS, "Choose a weapon price to edit.", string, "Change", "Back");
		}
		case DIALOG_GANGARMSDEALER:
		{
		    ShowPlayerDialog(playerid, DIALOG_GANGARMSDEALER, DIALOG_STYLE_LIST, "Arms dealer", "Buy Guns\nBuy Ammo\nEdit", "Select", "Cancel");
		}
		case DIALOG_GANGARMSWEAPONS:
		{
		    new
		        title[48];

		    format(title, sizeof(title), "Gang arms dealer (Materials available: %i.)", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials]);

		    format(string, sizeof(string), "#\tWeapon\tPrice\tCost\n1\tMicro Uzi\t$%i\t500 materials\n2\tTec-9\t$%i\t500 materials\n3\tMP5\t$%i\t1000 materials\n4\tDesert Eagle\t$%i\t2000 materials\n5\tMolotov\t$%i\t5000 materials\n6\tAK-47\t$%i\t3000 materials\n7\tM4\t$%i\t4000 materials\n8\tSniper\t$%i\t6500 materials\n9\tSawnoff Shotgun\t$%i\t3000 materials",
		        GangInfo[pData[playerid][pDealerGang]][gArmsPrices][0], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][1], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][2], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][3], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][4], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][5], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][6], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][7],
				GangInfo[pData[playerid][pDealerGang]][gArmsPrices][8]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSWEAPONS, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Buy", "Back");
		}
		case DIALOG_GANGARMSAMMO:
		{
		    format(string, sizeof(string), "#\tType\tCost\tStock\n1\tHollow Point Ammo\t$%i\t%i rounds\n2\tPoison Tip Ammo\t$%i\t%i rounds\n3\tFMJ Ammo\t$%i\t%i rounds",
				GangInfo[pData[playerid][pDealerGang]][gArmsPrices][9], GangInfo[pData[playerid][pDealerGang]][gArmsHPAmmo], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][10], GangInfo[pData[playerid][pDealerGang]][gArmsPoisonAmmo], GangInfo[pData[playerid][pDealerGang]][gArmsPrices][11], GangInfo[pData[playerid][pDealerGang]][gArmsFMJAmmo]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSAMMO, DIALOG_STYLE_TABLIST_HEADERS, "Arms dealer | Ammo", string, "Buy", "Back");
		}
		case DIALOG_GANGAMMOBUY:
		{
		    if(pData[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much hollow point ammo would you like to buy? ($%i per round. %i rounds available.)", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][9], GangInfo[pData[playerid][pDealerGang]][gArmsHPAmmo]);
			} else if(pData[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much poison tip ammo would you like to buy? ($%i per round. %i rounds available.)", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][10], GangInfo[pData[playerid][pDealerGang]][gArmsPoisonAmmo]);
			} else if(pData[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much FMJ ammo would you like to buy? ($%i per round. %i rounds available.)", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][11], GangInfo[pData[playerid][pDealerGang]][gArmsFMJAmmo]);
			}

		    ShowPlayerDialog(playerid, DIALOG_GANGAMMOBUY, DIALOG_STYLE_INPUT, "Arms Dealer | Buy Ammo", string, "Submit", "Back");
		}
		case DIALOG_GANGARMSEDIT:
		{
			format(string, sizeof(string), "Arms dealer (Materials available: %i.)", GangInfo[pData[playerid][pGang]][gArmsMaterials]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSEDIT, DIALOG_STYLE_LIST, string, "Edit prices\nDeposit mats\nWithdraw mats\nDeposit ammo\nWithdraw ammo", "Select", "Back");
		}
		case DIALOG_GANGARMSDEPOSITMATS:
		{
			format(string, sizeof(string), "How much materials would you like to deposit? (This arms dealer contains %i materials.)", GangInfo[pData[playerid][pGang]][gArmsMaterials]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSDEPOSITMATS, DIALOG_STYLE_INPUT, "Arms dealer | Deposit", string, "Submit", "Back");
		}
		case DIALOG_GANGARMSWITHDRAWMATS:
		{
			format(string, sizeof(string), "How much materials would you like to withdraw? (This arms dealer contains %i materials.)", GangInfo[pData[playerid][pGang]][gArmsMaterials]);
			ShowPlayerDialog(playerid, DIALOG_GANGARMSWITHDRAWMATS, DIALOG_STYLE_INPUT, "Arms dealer | Withdraw", string, "Submit", "Back");
		}
		case DIALOG_GANGAMMODEPOSITS:
		{
		    format(string, sizeof(string), "Hollow point (%i)\nPoison tip (%i)\nFMJ ammo (%i)", GangInfo[pData[playerid][pGang]][gArmsHPAmmo], GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo], GangInfo[pData[playerid][pGang]][gArmsFMJAmmo]);
		    ShowPlayerDialog(playerid, DIALOG_GANGAMMODEPOSITS, DIALOG_STYLE_LIST, "Arms dealer | Deposit ammo", string, "Select", "Back");
		}
		case DIALOG_GANGAMMODEPOSIT:
		{
		    if(pData[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much hollow point ammo would you like to deposit? (This arms dealer contains %i rounds.)", GangInfo[pData[playerid][pGang]][gArmsHPAmmo]);
		    } else if(pData[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much poison tip ammo would you like to deposit? (This arms dealer contains %i rounds.)", GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo]);
			} else if(pData[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much FMJ ammo would you like to deposit? (This arms dealer contains %i rounds.)", GangInfo[pData[playerid][pGang]][gArmsFMJAmmo]);
			}

			ShowPlayerDialog(playerid, DIALOG_GANGAMMODEPOSIT, DIALOG_STYLE_INPUT, "Arms dealer | Deposit ammo", string, "Submit", "Back");
		}
		case DIALOG_GANGAMMOWITHDRAWS:
		{
		    format(string, sizeof(string), "Hollow point (%i)\nPoison tip (%i)\nFMJ ammo (%i)", GangInfo[pData[playerid][pGang]][gArmsHPAmmo], GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo], GangInfo[pData[playerid][pGang]][gArmsFMJAmmo]);
		    ShowPlayerDialog(playerid, DIALOG_GANGAMMOWITHDRAWS, DIALOG_STYLE_LIST, "Arms dealer | Withdraw ammo", string, "Select", "Back");
		}
        case DIALOG_GANGAMMOWITHDRAW:
		{
			if(pData[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much hollow point ammo would you like to withdraw? (This arms dealer contains %i rounds.)", GangInfo[pData[playerid][pGang]][gArmsHPAmmo]);
   			} else if(pData[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much poison tip ammo would you like to withdraw? (This arms dealer contains %i rounds.)", GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo]);
			} else if(pData[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much FMJ ammo would you like to withdraw? (This arms dealer contains %i rounds.)", GangInfo[pData[playerid][pGang]][gArmsFMJAmmo]);
			}

			ShowPlayerDialog(playerid, DIALOG_GANGAMMOWITHDRAW, DIALOG_STYLE_INPUT, "Arms dealer | Withdraw", string, "Submit", "Back");
		}
		case DIALOG_GANGDRUGDEALER:
		{
		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGDEALER, DIALOG_STYLE_LIST, "Drug dealer", "Buy Drugs\nEdit", "Select", "Cancel");
		}
		case DIALOG_GANGDRUGSHOP:
		{
		    format(string, sizeof(string), "Drug\tPrice\tStock\nPot\t$%i\t%i grams\nCrack\t$%i\t%i grams\nMeth\t$%i\t%i grams", GangInfo[pData[playerid][pDealerGang]][gDrugPrices][0], GangInfo[pData[playerid][pDealerGang]][gDrugPot], GangInfo[pData[playerid][pDealerGang]][gDrugPrices][1], GangInfo[pData[playerid][pDealerGang]][gDrugCrack], GangInfo[pData[playerid][pDealerGang]][gDrugPrices][2], GangInfo[pData[playerid][pDealerGang]][gDrugMeth]);
			ShowPlayerDialog(playerid, DIALOG_GANGDRUGSHOP, DIALOG_STYLE_TABLIST_HEADERS, "Drug dealer", string, "Buy", "Back");
		}
		case DIALOG_GANGDRUGBUY:
		{
		    if(pData[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much pot would you like to buy? ($%i per gram. %i grams available.)", GangInfo[pData[playerid][pDealerGang]][gDrugPrices][0], GangInfo[pData[playerid][pDealerGang]][gDrugPot]);
			} else if(pData[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much Crack would you like to buy? ($%i per gram. %i grams available.)", GangInfo[pData[playerid][pDealerGang]][gDrugPrices][1], GangInfo[pData[playerid][pDealerGang]][gDrugCrack]);
			} else if(pData[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much meth would you like to buy? ($%i per gram. %i grams available.)", GangInfo[pData[playerid][pDealerGang]][gDrugPrices][2], GangInfo[pData[playerid][pDealerGang]][gDrugMeth]);
			}

		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGBUY, DIALOG_STYLE_INPUT, "Drug dealer | Buy", string, "Submit", "Back");
		}
		case DIALOG_GANGDRUGEDIT:
		{
			format(string, sizeof(string), "Drug dealer (Pot: %i) (Crack: %i) (Meth: %i)", GangInfo[pData[playerid][pGang]][gDrugPot], GangInfo[pData[playerid][pGang]][gDrugCrack], GangInfo[pData[playerid][pGang]][gDrugMeth]);
			ShowPlayerDialog(playerid, DIALOG_GANGDRUGEDIT, DIALOG_STYLE_LIST, string, "Edit prices\nDeposit drugs\nWithdraw drugs", "Select", "Back");
		}
		case DIALOG_GANGDRUGPRICES:
		{
		    format(string, sizeof(string), "Drug\tPrice\tStock\nPot\t$%i\t%i grams\nCrack\t$%i\t%i grams\nMeth\t$%i\t%i grams", GangInfo[pData[playerid][pGang]][gDrugPrices][0], GangInfo[pData[playerid][pGang]][gDrugPot], GangInfo[pData[playerid][pGang]][gDrugPrices][1], GangInfo[pData[playerid][pGang]][gDrugCrack], GangInfo[pData[playerid][pGang]][gDrugPrices][2], GangInfo[pData[playerid][pGang]][gDrugMeth]);
			ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICES, DIALOG_STYLE_TABLIST_HEADERS, "Choose a drug price to edit.", string, "Change", "Back");
		}
		case DIALOG_GANGDRUGDEPOSITS:
		{
		    format(string, sizeof(string), "Pot (%ig)\nCrack (%ig)\nMeth (%ig)", GangInfo[pData[playerid][pGang]][gDrugPot], GangInfo[pData[playerid][pGang]][gDrugCrack], GangInfo[pData[playerid][pGang]][gDrugMeth]);
		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGDEPOSITS, DIALOG_STYLE_LIST, "Drug dealer | Deposit", string, "Select", "Back");
		}
		case DIALOG_GANGDRUGDEPOSIT:
		{
		    if(pData[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much pot would you like to deposit? (This drug dealer contains %i grams.)", GangInfo[pData[playerid][pGang]][gDrugPot]);
		    } else if(pData[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much Crack would you like to deposit? (This drug dealer contains %i grams.)", GangInfo[pData[playerid][pGang]][gDrugCrack]);
			} else if(pData[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much meth would you like to deposit? (This drug dealer contains %i grams.)", GangInfo[pData[playerid][pGang]][gDrugMeth]);
			}

			ShowPlayerDialog(playerid, DIALOG_GANGDRUGDEPOSIT, DIALOG_STYLE_INPUT, "Drug dealer | Deposit", string, "Submit", "Back");
		}
		case DIALOG_GANGDRUGWITHDRAWS:
		{
		    format(string, sizeof(string), "Pot (%ig)\nCrack (%ig)\nMeth (%ig)", GangInfo[pData[playerid][pGang]][gDrugPot], GangInfo[pData[playerid][pGang]][gDrugCrack], GangInfo[pData[playerid][pGang]][gDrugMeth]);
		    ShowPlayerDialog(playerid, DIALOG_GANGDRUGWITHDRAWS, DIALOG_STYLE_LIST, "Drug dealer | Withdraw", string, "Select", "Back");
		}
        case DIALOG_GANGDRUGWITHDRAW:
		{
		    if(pData[playerid][pSelected] == 0) {
		        format(string, sizeof(string), "How much pot would you like to withdraw? (This drug dealer contains %i grams.)", GangInfo[pData[playerid][pGang]][gDrugPot]);
		    } else if(pData[playerid][pSelected] == 1) {
		        format(string, sizeof(string), "How much Crack would you like to withdraw? (This drug dealer contains %i grams.)", GangInfo[pData[playerid][pGang]][gDrugCrack]);
			} else if(pData[playerid][pSelected] == 2) {
		        format(string, sizeof(string), "How much meth would you like to withdraw? (This drug dealer contains %i grams.)", GangInfo[pData[playerid][pGang]][gDrugMeth]);
			}

			ShowPlayerDialog(playerid, DIALOG_GANGDRUGWITHDRAW, DIALOG_STYLE_INPUT, "Drug dealer | Withdraw", string, "Submit", "Back");
		}
		/*case DIALOG_FACTIONEQUIPMENT:
		{
			new lockerid = GetNearbyLocker(playerid);
	 		string = "Weapon\tPrice\n";
            if(LockerInfo[lockerid][locKevlar][0]) { format(string, sizeof(string), "%sKevlar Vest\t$%i\n", string, LockerInfo[lockerid][locKevlar][1]); }
            if(LockerInfo[lockerid][locMedKit][0]) { format(string, sizeof(string), "%sMedkit\t$%i\n", string, LockerInfo[lockerid][locMedKit][1]); }
            if(LockerInfo[lockerid][locNitestick][0]) { format(string, sizeof(string), "%sNitestick\t$%i\n", string, LockerInfo[lockerid][locNitestick][1]); }
            if(LockerInfo[lockerid][locMace][0]) { format(string, sizeof(string), "%sMace\t$%i\n", string, LockerInfo[lockerid][locMace][1]); }
            if(LockerInfo[lockerid][locDeagle][0]) { format(string, sizeof(string), "%sDeagle\t$%i\n", string, LockerInfo[lockerid][locDeagle][1]); }
            if(LockerInfo[lockerid][locShotgun][0]) { format(string, sizeof(string), "%sShotgun\t$%i\n", string, LockerInfo[lockerid][locShotgun][1]); }
            if(LockerInfo[lockerid][locMP5][0]) { format(string, sizeof(string), "%sMP5\t$%i\n", string, LockerInfo[lockerid][locMP5][1]); }
            if(LockerInfo[lockerid][locM4][0]) { format(string, sizeof(string), "%sM4\t$%i\n", string, LockerInfo[lockerid][locM4][1]); }
            if(LockerInfo[lockerid][locSpas12][0]) { format(string, sizeof(string), "%sSPAS-12\t$%i\n", string, LockerInfo[lockerid][locSpas12][1]); }
            if(LockerInfo[lockerid][locSniper][0]) { format(string, sizeof(string), "%sSniper\t$%i\n", string, LockerInfo[lockerid][locSniper][1]); }
            if(LockerInfo[lockerid][locCamera][0]) { format(string, sizeof(string), "%sCamera\t$%i\n", string, LockerInfo[lockerid][locCamera][1]); }
            if(LockerInfo[lockerid][locFireExt][0]) { format(string, sizeof(string), "%sFire Extinguisher\t$%i\n", string, LockerInfo[lockerid][locFireExt][1]); }
            if(LockerInfo[lockerid][locPainKillers][0]) { format(string, sizeof(string), "%sPainkillers\t$%i\n", string, LockerInfo[lockerid][locPainKillers][1]); }
			ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_TABLIST_HEADERS, "Locker", string, "Select", "Cancel");
		}*/
		case DIALOG_LOCATE:
		{
		    ShowPlayerDialog(playerid, DIALOG_LOCATE, DIALOG_STYLE_LIST, "List of Destination", "Turfs\nJob Locations\nNearest Businesses\nGeneral Locations\nAddress", "Select", "Close");
		}
		case DIALOG_ADDRESS:
		{
		    ShowPlayerDialog(playerid, DIALOG_ADDRESS, DIALOG_STYLE_LIST, "List of Destination", "Houses \nBusiness", "Select", "Close");
		}
		case DIALOG_REPORTITITON:
		{
		    ShowPlayerDialog(playerid, DIALOG_REPORTITITON, DIALOG_STYLE_LIST, "PLAYER REPORT: What is your problem", "FALLING\n MISSING CAR\n VIRTUAL PROBLEM\n IM STUCK\n KILLING ON GREENZONE\n EVADE RP\n NONRP\n DM", "Select", "Close");
		}
		case DIALOG_TYPE:
		{
			ShowPlayerDialog(playerid, DIALOG_TYPE, DIALOG_STYLE_LIST, "Curreny Menu", "Dirty to Clean\t[Less 50% to clean the money]\nClean to Dirty\t[Less 30% to make it Dirtymoney]", "Select", "Close");
		}	
		case DIALOG_BUYBMARKET:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUYBMARKET, DIALOG_STYLE_LIST, "Blackmarket MENU", "Baseball bat\t($10000)\nKantana\t($11000)\nMicro Uzi\t($25000)\nTec 9\t($30000)\nAK-47\t($130000)\nContry Rifle\t($125000)\nVest\t($50000)", "Select", "Close");
		}		
		case DIALOG_BUYSTORE:
		{
		    ShowPlayerDialog(playerid, DIALOG_BUYSTORE, DIALOG_STYLE_LIST, "24/7 MENU", "Cigars\t\t\t($100)\nSpraycans\t\t($1000)\nFishing rod\t\t($2000)\nFish bait\t\t($1500)\nMuriatic acid\t\t($2500)\nBaking soda\t\t($2500)\nGasoline can\t\t($300)\nRope\t\t\t($1000)\nBlindfold\t\t($1500) \nToolkit\t\t\t($5000)\nFlashlight\t\t($3000)\nLottery Ticket\t\t($500)\nMask\t\t\t($2000)", "Select", "Close");			
		}		
		case DIALOG_INV: {
			new package[12];
			switch(pData[playerid][pSmuggleDrugs])
			{
				case 0: package = "None";
				case 1: package = "Seeds";
				case 2: package = "Crack";
				case 3: package = "Ephedrine";
			}
			format(string, sizeof(string), "Cigars\t%i\n\
				Spraycans\t%i/20\n\
				Bombs\t%i/3\n\
				Gasoline\t%i/20L\n\
				Portable Radio\t%s\n\
				Mobile Phone\t%s\n\
				Drug Package\t%s\n\
				Rope\t%i/10\n\
				Car Voucher\t%i\n\
				Gun Voucher\t%i\n\
				Diamond Vip Voucher\t%i\n\
				Silver Vip Voucher\t%i\n\
				Bronze Vip Voucher\t%i\n\
				Watch\t%s\n\
				GPS\t%s\n\
				Dirty Money\t%i\n\
				Back",
				pData[playerid][pCigars],
				pData[playerid][pSpraycans],
				pData[playerid][pBombs],
				pData[playerid][pGasCan],
				(pData[playerid][pWalkieTalkie]) ? (""GREEN"Have") : (""RED"None"),
				(pData[playerid][pPhone]) ? (""GREEN"Have") : (""RED"None"),
				package,
				pData[playerid][pRope],
				pData[playerid][pVoucher1],
				pData[playerid][pVoucher2],
				pData[playerid][pVoucher3],
				pData[playerid][pVoucher4],
				pData[playerid][pVoucher5],
				(pData[playerid][pWatch]) ? (""GREEN"Have") : (""RED"None"),
				(pData[playerid][pGPS]) ? (""GREEN"Have") : (""RED"None"),
				FormatNumber(pData[playerid][pDirtyCash]));
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "Inventory (Page 2)", string, "Okay", "");
		}
		case DIALOG_PAINTBALL:
		{
		    string =  "Name\tType\tCurrent Players\n";
		    format(string, sizeof(string), "%sDeathmatch Arena\tFFA\t%i\n", string, GetArenaPlayers(1));
		    format(string, sizeof(string), "%sTeam Deathmatch Arena\tTDM\t%i\n", string, GetArenaPlayers(2));
		    format(string, sizeof(string), "%sDeagle Arena\t1Shot\t%i\n", string, GetArenaPlayers(3));
		    format(string, sizeof(string), "%sSniper Arena\t1Shot\t%i\n", string, GetArenaPlayers(4));
		    ShowPlayerDialog(playerid, DIALOG_PAINTBALL, DIALOG_STYLE_TABLIST_HEADERS, "Paintball", string, "Select", "Cancel");
		}
		/*case DIALOG_HELP:
		{
		    ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "List of Commands", "Chat\nGeneral\nUpgrades\nOther", "Select", "Close");
		}*/
		case DIALOG_TOP: {
			ShowPlayerDialog(playerid, DIALOG_TOP, DIALOG_STYLE_TABLIST, SERVER_DIALOG, ""RED"Top 10 Criminal in the City.\n"YELLOW"Top 10 Richest in the City.\n"GREEN"Top 10 Addict in the City.", "Select", "Close");
		}
		case DIALOG_TWEET:
		{
	    	ShowPlayerDialog(playerid, DIALOG_TWEET, DIALOG_STYLE_INPUT, "Tweet", "What's on your mind?", "Post", "Back");
		}
		case DIALOG_CREATEQUIZ:
		{
		    if(CreateQuiz == -1)
		    {
		        CreateQuiz = 0;
		    	ShowPlayerDialog(playerid, DIALOG_CREATEQUIZ, DIALOG_STYLE_INPUT, "Create A Quiz - Enter Question", "What should the question be? (displayed globally)", "Submit", "Back");
			}
			if(CreateQuiz == 1)
			{
			    ShowPlayerDialog(playerid, DIALOG_CREATEQUIZ, DIALOG_STYLE_INPUT, "Create A Quiz - Enter Answer", "What should the answer be? (displayed once answered)", "Submit", "Back");
			}
		}
	}
	return 1;
}
SetPlayerToSpawn(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
	    //if(pData[playerid][pTutorial]) SetSpawnInfo(playerid, NO_TEAM, pData[playerid][pSkin], 7.1234, 1226.2716, 895.8371,328.7138, 0, 0, 0, 0, 0, 0);
		// Check niyo [pFirstSpawn] kung gusto niyo palitan ang spawn point ng mga new players.
		SetSpawnInfo(playerid, NO_TEAM, pData[playerid][pSkin], 1687.8461,-1343.0624,17.4258,198.9879, 0, 0, 0, 0, 0, 0);
		TogglePlayerSpectating(playerid, 0);
	}
	else
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new
	            Float:x,
	            Float:y,
	            Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z + 5.0);
	    }

	    SpawnPlayer(playerid);
	}
	TogglePlayerControllable(playerid, 0);
	SetTimerEx("UnfreezePlayerEx", 5000, false, "i", playerid);
	pData[playerid][pACTime] = gettime() + 2;
}
GetArenaPlayers(arena)
{
	new players;
	foreach(new i : Player)
	{
	    if(pData[i][pPaintball] == arena)
	    {
	        players++;
	    }
	}
	return players;
}
/*SetPlayerToSpawn(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
		if(pData[playerid][pPosX] == 0.0 && pData[playerid][pPosY] == 0.0 && pData[playerid][pPosZ] == 0.0)
		{
            SetSpawnInfo(playerid, 0, pData[playerid][pSkin], 1529.6, -1691.2, 13.3, 1.0, -1, -1, -1, -1, -1, -1);
		}
		else
		{
			SetSpawnInfo(playerid, 0, pData[playerid][pSkin], pData[playerid][pPosX],pData[playerid][pPosY],pData[playerid][pPosZ], 1.0, -1, -1, -1, -1, -1, -1);
		}

		TogglePlayerSpectating(playerid, 0);
	}
	else
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new
	            Float:x,
	            Float:y,
	            Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z + 5.0);
	    }
	    SpawnPlayer(playerid);
	}
	pData[playerid][pACTime] = gettime() + 2;
}*/

SetPlayerToFacePlayer(playerid, targetid)
{
	new
	    Float:px,
	    Float:py,
	    Float:pz,
	    Float:tx,
	    Float:ty,
	    Float:tz;

	GetPlayerPos(targetid, tx, ty, tz);
	GetPlayerPos(playerid, px, py, pz);
	SetPlayerFacingAngle(playerid, 180.0 - atan2(px - tx, py - ty));
}

SavePlayerWeapons(playerid)
{
	if(pData[playerid][pLogged] && !pData[playerid][pJoinedEvent] && !pData[playerid][pPaintball]&& pData[playerid][pDueling] == INVALID_PLAYER_ID&& pData[playerid][pDueling1] == INVALID_PLAYER_ID)
	{
		// Saving weapons.
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weapon_0 = %i, weapon_1 = %i, weapon_2 = %i, weapon_3 = %i, weapon_4 = %i, weapon_5 = %i, weapon_6 = %i, weapon_7 = %i, weapon_8 = %i, weapon_9 = %i, weapon_10 = %i, weapon_11 = %i, weapon_12 = %i WHERE uid = %i",
	        pData[playerid][pWeapons][0], pData[playerid][pWeapons][1], pData[playerid][pWeapons][2], pData[playerid][pWeapons][3], pData[playerid][pWeapons][4], pData[playerid][pWeapons][5], pData[playerid][pWeapons][6], pData[playerid][pWeapons][7], pData[playerid][pWeapons][8], pData[playerid][pWeapons][9], pData[playerid][pWeapons][10], pData[playerid][pWeapons][11], pData[playerid][pWeapons][12], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		// And finally the ammo.
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hpammo = %i, poisonammo = %i, fmjammo = %i, ammotype = %i, ammoweapon = %i WHERE uid = %i",
		   pData[playerid][pHPAmmo], pData[playerid][pPoisonAmmo], pData[playerid][pFMJAmmo], pData[playerid][pAmmoType], pData[playerid][pAmmoWeapon], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

ResetBackpack(playerid)
{
	if(pData[playerid][pLogged] && !pData[playerid][pAdminDuty])
	{
		pData[playerid][pBackpack] = 0;
		pData[playerid][bpCash] = 0;
		pData[playerid][bpMaterials] = 0;
		pData[playerid][bpPot] = 0;
		pData[playerid][bpCrack] = 0;
		pData[playerid][bpMeth] = 0;
		pData[playerid][bpPainkillers] = 0;
		pData[playerid][bpWeapons][0] = 0;
		pData[playerid][bpWeapons][1] = 0;
		pData[playerid][bpWeapons][2] = 0;
		pData[playerid][bpWeapons][3] = 0;
		pData[playerid][bpWeapons][4] = 0;
		pData[playerid][bpWeapons][5] = 0;
		pData[playerid][bpWeapons][6] = 0;
		pData[playerid][bpWeapons][7] = 0;
		pData[playerid][bpWeapons][8] = 0;
		pData[playerid][bpWeapons][9] = 0;
		pData[playerid][bpWeapons][10] = 0;
		pData[playerid][bpWeapons][11] = 0;
		pData[playerid][bpWeapons][13] = 0;
		pData[playerid][bpWeapons][14] = 0;
		pData[playerid][bpHPAmmo] = 0;
		pData[playerid][bpPoisonAmmo] = 0;
		pData[playerid][bpFMJAmmo] = 0;
	}
	SavePlayerVariables(playerid);
}

forward SavePlayerVariables(playerid);
public SavePlayerVariables(playerid)
{
	if(pData[playerid][pLogged] && !pData[playerid][pAdminDuty])
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && !pData[playerid][pPaintball] && 	!IsPlayerInRangeOfPoint(playerid, 2.0, 0.0, 0.0, 0.0) && !pData[playerid][pJoinedEvent] && !pData[playerid][pAcceptedHelp] && pData[playerid][pDueling] == INVALID_PLAYER_ID && pData[playerid][pDueling1] == INVALID_PLAYER_ID &&  SabongInfo[sPlayerRed] != playerid && SabongInfo[sPlayerBlue] != playerid)
		{
		    SavePlayerWeapons(playerid);

            GetPlayerCameraPos(playerid, pData[playerid][pCameraX], pData[playerid][pCameraY], pData[playerid][pCameraZ]);
			GetPlayerPos(playerid, pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ]);
	        GetPlayerFacingAngle(playerid, pData[playerid][pPosA]);

	        GetPlayerHealth(playerid, pData[playerid][pHealth]);
	        GetPlayerArmour(playerid, pData[playerid][pArmor]);

	        pData[playerid][pInterior] = GetPlayerInterior(playerid);
	        pData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET camera_x = '%f', camera_y = '%f', camera_z = '%f', pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i, health = '%f', armor = '%f', minutes = %i, warnings = %i, injured = %i, hospital = %i, spawnhealth = '%f', spawnarmor = '%f', jailtype = %i, jailtime = %i, bedtype = %i, bedtime = %i WHERE uid = %i", pData[playerid][pCameraX], pData[playerid][pCameraY],
			pData[playerid][pCameraZ], pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ], pData[playerid][pPosA], pData[playerid][pInterior], pData[playerid][pWorld], pData[playerid][pHealth], pData[playerid][pArmor], pData[playerid][pMinutes], pData[playerid][pWarnings], pData[playerid][pInjured], pData[playerid][pHospital], pData[playerid][pSpawnHealth],
			pData[playerid][pSpawnArmor], pData[playerid][pJailType], pData[playerid][pJailTime], pData[playerid][pBedType], pData[playerid][pBedTime], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET newbiemuted = %i, helpmuted = %i, admuted = %i, livemuted = %i, globalmuted = %i, reportmuted = %i, reportwarns = %i, fightstyle = %i, dirtycash = %i, toggleooc = %i, togglephone = %i, toggleadmin = %i, togglehelper = %i, togglenewbie = %i, togglewt = %i, togglevip = %i, backpack = %i, flashlight = %i, chatanim = %i WHERE uid = %i", pData[playerid][pNewbieMuted], pData[playerid][pHelpMuted], pData[playerid][pAdMuted],
			pData[playerid][pLiveMuted], pData[playerid][pGlobalMuted], pData[playerid][pReportMuted], pData[playerid][pReportWarns], pData[playerid][pFightStyle], pData[playerid][pDirtyCash], pData[playerid][pToggleOOC], pData[playerid][pTogglePhone], pData[playerid][pToggleAdmin], pData[playerid][pToggleHelper], pData[playerid][pToggleNewbie], pData[playerid][pToggleWT],
			pData[playerid][pToggleVIP], pData[playerid][pBackpack], pData[playerid][pFlashlight], pData[playerid][pChatAnim], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET toggleradio = %i, togglemusic = %i, togglefaction = %i, togglenews = %i, toggleglobal = %i, togglecam = %i, togglehud = %i, pottime = %i, potgrams = %i, showturfs = %i, watchon = %i, gpson = %i, pizzacooldown = %i, deathcooldown = %i, detectivecooldown = %i, duty = %i, bandana = %i WHERE uid = %i", pData[playerid][pToggleRadio], pData[playerid][pToggleMusic],
			pData[playerid][pToggleFaction], pData[playerid][pToggleNews], pData[playerid][pToggleGlobal], pData[playerid][pToggleCam], pData[playerid][pToggleHUD], pData[playerid][pPotTime], pData[playerid][pPotGrams], pData[playerid][pShowTurfs], pData[playerid][pWatchOn], pData[playerid][pGPSOn], pData[playerid][pPizzaCooldown], pData[playerid][pDeathCooldown],
			pData[playerid][pDetectiveCooldown], pData[playerid][pDuty], pData[playerid][pBandana], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		// Backpack Info
  		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bpcash = %i, bpmaterials = %i, bppot = %i, bpcrack = %i, bpmeth = %i, bppainkillers = %i, bphpammo = %i, bppoisonammo = %i, bpfmjammo = %i, totalpatients = %i, totalfires = %i, rarecooldown = %i WHERE uid = %i", pData[playerid][bpCash], pData[playerid][bpMaterials], pData[playerid][bpPot], pData[playerid][bpCrack], pData[playerid][bpMeth],
			pData[playerid][bpPainkillers], pData[playerid][bpHPAmmo], pData[playerid][bpPoisonAmmo], pData[playerid][bpFMJAmmo], pData[playerid][pTotalPatients], pData[playerid][pTotalFires], pData[playerid][pRareTime], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		// Backpack Weapons
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bpweapon_0 = %i, bpweapon_1 = %i, bpweapon_2 = %i, bpweapon_3 = %i, bpweapon_4 = %i, bpweapon_5 = %i, bpweapon_6 = %i, bpweapon_7 = %i, bpweapon_8 = %i, bpweapon_9 = %i, bpweapon_10 = %i, bpweapon_11 = %i, bpweapon_12 = %i, bpweapon_13 = %i, bpweapon_14 = %i WHERE uid = %i", pData[playerid][bpWeapons][0], pData[playerid][bpWeapons][1], pData[playerid][bpWeapons][2], pData[playerid][bpWeapons][3],
			pData[playerid][bpWeapons][4], pData[playerid][bpWeapons][5], pData[playerid][bpWeapons][6], pData[playerid][bpWeapons][7], pData[playerid][bpWeapons][8], pData[playerid][bpWeapons][9], pData[playerid][bpWeapons][10], pData[playerid][bpWeapons][11], pData[playerid][bpWeapons][12], pData[playerid][bpWeapons][13], pData[playerid][bpWeapons][14], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i, thirst = %i, thirsttimer = %i, stress = %i, stresstimer = %i  WHERE uid = %i", pData[playerid][pHunger], pData[playerid][pHungerTimer], pData[playerid][pThirst], pData[playerid][pThirstTimer], pData[playerid][pStress], pData[playerid][pStressTimer],pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i, drink = %i, diamonds = %i, boombox = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pDrink], pData[playerid][pDiamonds], pData[playerid][pBoombox], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		// CCRP	 v2
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET brokenleg = %d,brokenHP = %d, antifall = %d, amcount = %d, chatstyle = %i, vest = %i, lottery = %d, mask = %d, refunded = %i, comserv = %i  where uid = %d", pData[playerid][pBrokenLeg], pData[playerid][pBrokenHP],  pData[playerid][pAntiFall], pData[playerid][pAMCount], pData[playerid][pChatstyle], pData[playerid][pVest], pData[playerid][pLottery], pData[playerid][pMask], pData[playerid][pRefunded], pData[playerid][pComserv], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		/*#if defined Christmas
	#else
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET candy = %i WHERE uid = %i", pData[playerid][pCandy], pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		#endif*/
	}
}

SendPaycheck(playerid)
{

	foreach(new i : Player)
	{
		SavePlayerVariables(i);
	}
    new paycheck = pData[playerid][pPaycheck];
    new interest, rate;
    new tax = (paycheck / 200) * gTax; // 8% tax
    new rent = 0, renting = -1; // temp
    new total = paycheck - tax;

	switch(pData[playerid][pDonator])
	{
	    case 0: rate = 2;
	    case 1: rate = 3;
	    case 2: rate = 3;
	    case 3: rate = 3;
	}
	if(pData[playerid][pBank] < 6000000)
	{
		interest = (pData[playerid][pBank] / 200) * rate;
	}
	else
	{
		interest = 0;
	}
	total += interest;

 	if(pData[playerid][pRentingHouse])
	{
		for(new i = 0; i < MAX_HOUSES; i ++)
		{
		    if(HouseInfo[i][hExists] && HouseInfo[i][hID] == pData[playerid][pRentingHouse] && HouseInfo[i][hRentPrice] > 0)
		    {
		        rent = HouseInfo[i][hRentPrice];
		        renting = i;
			}
		}
	}

 	SCM(playerid, COLOR_WHITE, "========[ PAYDAY ]========");
	SM(playerid, COLOR_TEAL, "Job Pay: "WHITE"+$%i", paycheck);

	//if(pData[playerid][pFaction] >= 0 && FactionInfo[pData[playerid][pFaction]][fPaycheck][pData[playerid][pFactionRank]] > 0)
	//{
	//    SM(playerid, COLOR_TEAL, "Faction Pay: "WHITE"+$%i", FactionInfo[pData[playerid][pFaction]][fPaycheck][pData[playerid][pFactionRank]]);
	//    total += FactionInfo[pData[playerid][pFaction]][fPaycheck][pData[playerid][pFactionRank]];
	//	
	//	pData[playerid][pFpoints] += 5;
	//	SM(playerid, COLOR_WHITE, "** You have  receive 5 fpoints.");
	//	
	//	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fpoints = %i WHERE uid = %i", pData[playerid][pFpoints], pData[playerid][pID]);
	//	mysql_tquery(connectionID, queryBuffer);
	//}

	SM(playerid, COLOR_TEAL, "Interest: "WHITE"+$%i"TEAL" (Rate: "WHITE"%.1f)", interest, floatdiv(float(rate), 10));
	SM(playerid, COLOR_TEAL, "Income Tax: "WHITE"-$%i"TEAL" ("WHITE"%i"TEAL" Percent)", tax, gTax);
	

	if(renting != -1)
	{
		if(total >= rent || pData[playerid][pBank] >= rent)
		{
		    if(total >= rent)
	    	{
	        	total -= rent;
			}
			else
			{
		    	pData[playerid][pBank] -= rent;
			}

			SM(playerid, COLOR_TEAL, "Rent Paid: "WHITE"-$%i", rent);
			HouseInfo[renting][hCash] += rent;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[renting][hCash], HouseInfo[renting][hID]);
			mysql_tquery(connectionID, queryBuffer);
		}
		else
		{
		    rent = -1;
		}
	}
	if((gDoubleXP) || pData[playerid][pDoubleXP] > 0) {
		SM(playerid, COLOR_TEAL, "Old Balance: "WHITE"$%i"TEAL" | New Balance: "WHITE"$%i"TEAL"", pData[playerid][pBank], (pData[playerid][pBank] + total) * 2);
	} else {
		SM(playerid, COLOR_TEAL, "Old Balance: "WHITE"$%i"TEAL" | New Balance: "WHITE"$%i"TEAL"", pData[playerid][pBank], pData[playerid][pBank] + total);
	}

	SCM(playerid, COLOR_WHITE, "==========================");
	// Top Players
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM rankings WHERE Name = '%e'", pData[playerid][pUsername]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerUpdateRankings", "d", playerid);

	SCM(playerid, COLOR_SYNTAX, "Added to bank account.");
	if(rent == -1)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		pData[playerid][pRentingHouse] = 0;
	    SCM(playerid, COLOR_RED, "You couldn't afford to pay rent and were evicted as a result.");
	}

	AddToTaxVault(tax);

	if((gDoubleXP) || pData[playerid][pDoubleXP] > 0) {
		pData[playerid][pEXP] += 2;
		pData[playerid][pBank] += total * 2;
	} else {
	    pData[playerid][pEXP]++;
	    pData[playerid][pBank] += total;
	}
	if(pData[playerid][pGang] >= 0)
	{
	    GiveGangPoints(pData[playerid][pGang], 2);
	}

    pData[playerid][pHours]++;
    pData[playerid][pMinutes] = 0;
    pData[playerid][pPaycheck] = 0;

	if(pData[playerid][pWeaponRestricted] > 0)
	{
		pData[playerid][pWeaponRestricted]--;
	}
	if(pData[playerid][pFgRestricted] > 0)
	{
		pData[playerid][pFgRestricted]--;
	}
	if((!gDoubleXP) && pData[playerid][pDoubleXP] > 0)
	{
	    pData[playerid][pDoubleXP]--;

	    if(pData[playerid][pDoubleXP] > 0)
	        SM(playerid, COLOR_TEAL, "Your double XP token expires in %i more hours.", pData[playerid][pDoubleXP]);
		else
		    SCM(playerid, COLOR_TEAL, "Your double XP token has expired.");
	}
	
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET minutes = 0, hours = hours + 1, exp = %i, bank = %i, paycheck = 0, weaponrestricted = %i, cooldown = %i, doublexp = %i WHERE uid = %i", pData[playerid][pEXP], pData[playerid][pBank], pData[playerid][pWeaponRestricted], pData[playerid][pFgRestricted], pData[playerid][pDoubleXP], pData[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);

    gTotalHours++;
    SaveServerInfo();
}

HangupCall(playerid, reason)
{
	new callerid = pData[playerid][pCallLine];

	if(reason == HANGUP_DROPPED)
	{
	    SCM(playerid, COLOR_WHITE, "** The call has been dropped...");
	}
	else
	{
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button and hangs up their mobile phone.", GetRPName(playerid));
    	SCM(playerid, COLOR_WHITE, "** You hung up your phone and ended the call.");

		if(callerid != playerid)
		{
			CancelSelectTextDraw(callerid);
			SCM(callerid, COLOR_WHITE, "** They hung up their phone and ended the call.");
		}
	}

	if(callerid != playerid)
	{
		if(GetPlayerSpecialAction(callerid) == SPECIAL_ACTION_USECELLPHONE)
		{
		    SetPlayerSpecialAction(callerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}

		pData[callerid][pCallStage] = 0;
		pData[callerid][pCallLine] = INVALID_PLAYER_ID;
		
	}

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
	{
 		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	}
	if(callstream[callerid])
    {
        SvDeleteStream(callstream[callerid]);
        callstream[callerid] = SV_NULL;
    }
    if(callstream[playerid])
    {
        SvDeleteStream(callstream[playerid]);
        callstream[playerid] = SV_NULL;
    }
	SetPlayerCellphoneAction(playerid, false);	
	SetPlayerCellphoneAction(callerid, false);
	pData[playerid][pCallStage] = 0;
	pData[playerid][pCallLine] = INVALID_PLAYER_ID;
}

AddToTaxVault(amount)
{
	gVault += amount;
	SaveServerInfo();
}
AddToMechVault(amount)
{
	mechvault += amount;
	//SaveServerInfo();
}

SaveServerInfo()
{
    new File:file = fopen("server_info.ini", io_write);

    if(file)
    {
        new
			string[255];
        format(string, sizeof(string), "%i|%i|%i|%s|%s|%i|%i|%i|%i|%i|%i|%s|%s|%i|%i|%i", gTax, gVault, mechvault, gPlayerRecord, gRecordDate, gServerMOTD, gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours, gAnticheatBans, adminMOTD, helperMOTD, MaxCapCount[0], MaxCapCount[1], gLotto);
        fwrite(file, string);
        fclose(file);
	}
}

LoadServerInfo()
{
	new File:file = fopen("server_info.ini", io_read);

	if(file)
	{
	    new string[255];

	    fread(file, string);
	    sscanf(string, "p<|>iiiis[24]s[128]iiiiiis[128]s[128]iii", gTax, gVault, mechvault, gPlayerRecord, gRecordDate, gServerMOTD, gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours, gAnticheatBans, adminMOTD, helperMOTD, MaxCapCount[0], MaxCapCount[1], gLotto);
	    fclose(file);
	}

	if(gTax == 0)
	{
	    gTax = 10;
	}
}

GetYachtRobbers()
{
	new count;

    for(new i = 0; i < MAX_YACHT_ROBBER; i ++)
	{
    	if(YachtInfo[yRobbers][i] != INVALID_PLAYER_ID)
	    {
	        count++;
		}
	}

	return count;
}

AddToYachtRobbery(playerid)
{
    for(new i = 0; i < MAX_YACHT_ROBBER; i ++)
	{
    	if(YachtInfo[yRobbers][i] == INVALID_PLAYER_ID)
	    {
	        YachtInfo[yRobbers][i] = playerid;
	        pData[playerid][pRobCash] = 0;
	        break;
		}
	}
}

RemoveFromYachtRobbery(playerid)
{
    for(new i = 0; i < MAX_YACHT_ROBBER; i ++)
	{
    	if(YachtInfo[yRobbers][i] == playerid)
	    {
	        YachtInfo[yRobbers][i] = INVALID_PLAYER_ID;
		}
	}

	if(!GetYachtRobbers())
	{
	  	ResetYachtRobbery();
	}
	else if(YachtInfo[yPlanning] && YachtInfo[yRobbers][0] == INVALID_PLAYER_ID)
	{
	    for(new i = 1; i < MAX_YACHT_ROBBER; i ++)
	    {
	        if(YachtInfo[yRobbers][i] != INVALID_PLAYER_ID)
	        {
	            YachtInfo[yRobbers][0] = YachtInfo[yRobbers][i];
	            YachtInfo[yRobbers][i] = INVALID_PLAYER_ID;
	            SM(YachtInfo[yRobbers][0], COLOR_AQUA, "You are now the leader of this yacht heist!");
	            break;
			}
		}
	}

	pData[playerid][pRobCash] = 0;
	pData[playerid][pCP] = CHECKPOINT_NONE;

	RemovePlayerAttachedObject(playerid, 8);
	RemovePlayerAttachedObject(playerid, 9);
	PlayerPlaySound(playerid, 3402, 0.0, 0.0, 0.0);
	DisablePlayerCheckpoint(playerid);

	return 0;
}

RefreshTime()
{
	new hour, minute, string[12];

	gettime(hour, minute);

    format(string, sizeof(string), "%02d:%02d", hour, minute);
	TextDrawSetString(TimeTD, string);

}

GetBankRobbers()
{
	new count;

    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
	    {
	        count++;
		}
	}

	return count;
}
GetBizRobbers()
{
	new count;

    for(new i = 0; i < MAX_BIZ_ROBBERS; i ++)
	{
    	if(RobberyInfo1[rRobbers1][i] != INVALID_PLAYER_ID)
	    {
	        count++;
		}
	}

	return count;
}


AddToBankRobbery(playerid)
{
    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] == INVALID_PLAYER_ID)
	    {
	        RobberyInfo[rRobbers][i] = playerid;
	        pData[playerid][pRobCash] = 0;
	        break;
		}
	}
}

AddToBizRobbery(playerid)
{
    for(new i = 0; i < MAX_BIZ_ROBBERS; i ++)
	{
    	if(RobberyInfo1[rRobbers1][i] == INVALID_PLAYER_ID)
	    {
	        RobberyInfo1[rRobbers1][i] = playerid;
	        pData[playerid][pRobCash] = 0;
	        break;
		}
	}
}

RemoveFromBankRobbery(playerid)
{
    for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
    	if(RobberyInfo[rRobbers][i] == playerid)
	    {
	        RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
		}
	}

	if(!GetBankRobbers())
	{
	  	ResetRobbery();
	}
	else if(RobberyInfo[rPlanning] && RobberyInfo[rRobbers][0] == INVALID_PLAYER_ID)
	{
	    for(new i = 1; i < MAX_BANK_ROBBERS; i ++)
	    {
	        if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
	        {
	            RobberyInfo[rRobbers][0] = RobberyInfo[rRobbers][i];
	            RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
	            SM(RobberyInfo[rRobbers][0], COLOR_AQUA, "You are now the leader of this bank heist!");
	            break;
			}
		}
	}

	pData[playerid][pRobCash] = 0;
	pData[playerid][pCP] = CHECKPOINT_NONE;

	RemovePlayerAttachedObject(playerid, 8);
	RemovePlayerAttachedObject(playerid, 9);
	PlayerPlaySound(playerid, 3402, 0.0, 0.0, 0.0);
	DisablePlayerCheckpoint(playerid);

	return 0;
}

RemoveFromBizRobbery(playerid)
{
    for(new i = 0; i < MAX_BIZ_ROBBERS; i ++)
	{
    	if(RobberyInfo1[rRobbers1][i] == playerid)
	    {
	        RobberyInfo1[rRobbers1][i] = INVALID_PLAYER_ID;
		}
	}

	if(!GetBizRobbers())
	{
	  	ResetBizRobbery();
	}
	else if(RobberyInfo1[rPlanning1] && RobberyInfo1[rRobbers1][0] == INVALID_PLAYER_ID)
	{
	    for(new i = 1; i < MAX_BIZ_ROBBERS; i ++)
	    {
	        if(RobberyInfo1[rRobbers1][i] != INVALID_PLAYER_ID)
	        {
	            RobberyInfo1[rRobbers1][0] = RobberyInfo1[rRobbers1][i];
	            RobberyInfo1[rRobbers1][i] = INVALID_PLAYER_ID;
	            SM(RobberyInfo1[rRobbers1][0], COLOR_AQUA, "You are now the leader of this store heist!");
	            break;
			}
		}
	}

	pData[playerid][pRobCash] = 0;
	pData[playerid][pCP] = CHECKPOINT_NONE;

	RemovePlayerAttachedObject(playerid, 8);
	RemovePlayerAttachedObject(playerid, 9);
	PlayerPlaySound(playerid, 3402, 0.0, 0.0, 0.0);
	DisablePlayerCheckpoint(playerid);

	return 0;
}

IsPlayerInBankRobbery(playerid)
{
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
		{
	    	if(RobberyInfo[rRobbers][i] == playerid)
		    {
		        return 1;
			}
		}
	}

	return 0;
}

IsPlayerInBizRobbery(playerid)
{
	if(RobberyInfo1[rPlanning1] || RobberyInfo1[rStarted1])
	{
		for(new i = 0; i < MAX_BIZ_ROBBERS; i ++)
		{
	    	if(RobberyInfo1[rRobbers1][i] == playerid)
		    {
		        return 1;
			}
		}
	}

	return 0;
}

// ATM System

GetNearbyLocation(playerid, Float:radii)
{
	for(new i = 0; i < MAX_LOCATIONS; i ++)
	{
	    if(LocationInfo[i][locExists] && IsPlayerInRangeOfPoint(playerid, radii, LocationInfo[i][locPosX], LocationInfo[i][locPosY], LocationInfo[i][locPosZ]) && GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
	    {
	        return i;
		}
	}

	return -1;
}
GetNearbyAtm(playerid)
{
	for(new i = 0; i < MAX_ATMS; i ++)
	{
	    if(AtmInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, AtmInfo[i][aPosX], AtmInfo[i][aPosY], AtmInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}

ReloadAtm(atmid)
{
	if(AtmInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(AtmInfo[atmid][aText]);
	    DestroyDynamicObject(AtmInfo[atmid][aObject]);

		AtmInfo[atmid][aText] = CreateDynamic3DTextLabel("ATM machine\nType "WHITE"'/atm'"TEAL" to operate.", COLOR_TEAL, AtmInfo[atmid][aPosX], AtmInfo[atmid][aPosY], AtmInfo[atmid][aPosZ] + 0.4, 10.0);
        AtmInfo[atmid][aObject] = CreateDynamicObject(19324, AtmInfo[atmid][aPosX], AtmInfo[atmid][aPosY], AtmInfo[atmid][aPosZ], 0.0, 0.0, AtmInfo[atmid][aPosA]);
	}
}

forward OnAdminCreateActor(playerid, actorid, name[], Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateActor(playerid, actorid, name[], Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(ActorInfo[actorid][ActorName], name, 40);

	ActorInfo[actorid][ActorExists] = 1;
	ActorInfo[actorid][ActorID] = cache_insert_id(connectionID);
    ActorInfo[actorid][ActorAnim] = 0;
	ActorInfo[actorid][ActorSkin] = 2;
	ActorInfo[actorid][ActorPosX] = x;
	ActorInfo[actorid][ActorPosY] = y;
	ActorInfo[actorid][ActorPosZ] = z;
	ActorInfo[actorid][ActorPosA] = angle;
	ActorInfo[actorid][ActorWorld] = GetPlayerVirtualWorld(playerid);
	ActorInfo[actorid][ActorText] = Text3D:INVALID_3DTEXT_ID;
    ActorInfo[actorid][DynamicActor] = INVALID_ACTOR_ID;	

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE actors SET world = %i WHERE id = %i", ActorInfo[actorid][ActorWorld], ActorInfo[actorid][ActorID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadActor(actorid);
	SM(playerid, SERVER_COLOR, "** Actor %i created successfully.", actorid);
}

ReloadActor(actorid)
{
	if(ActorInfo[actorid][ActorExists])
	{
	    new
	        string[128];

		DestroyDynamic3DTextLabel(ActorInfo[actorid][ActorText]);
		DestroyActor(ActorInfo[actorid][DynamicActor]);

		if(ActorInfo[actorid][ActorPosX] != 0.0 && ActorInfo[actorid][ActorPosY] != 0.0 && ActorInfo[actorid][ActorPosZ] != 0.0)
		{
			format(string, sizeof(string), ""GREEN"ID: %d\n"WHITE"%s", actorid, ActorInfo[actorid][ActorName]);
			ActorInfo[actorid][ActorText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, ActorInfo[actorid][ActorPosX], ActorInfo[actorid][ActorPosY], ActorInfo[actorid][ActorPosZ] + 1.1, 10.0, .worldid = ActorInfo[actorid][ActorWorld]);
			ActorInfo[actorid][DynamicActor] = CreateActor(ActorInfo[actorid][ActorSkin], ActorInfo[actorid][ActorPosX], ActorInfo[actorid][ActorPosY], ActorInfo[actorid][ActorPosZ], ActorInfo[actorid][ActorPosA]);
		
			SetActorVirtualWorld(ActorInfo[actorid][DynamicActor], ActorInfo[actorid][ActorWorld]);    
		} 
		switch(ActorInfo[actorid][ActorAnim])
		{
			case 1: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "GANGS", "leanIDLE", 4.1, 1, 1, 1, 1, 1);		// Lean
			case 2: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "DANCING", "dance_loop", 4.1, 1, 1, 1, 1, 1);		// Dance
			case 3: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1);		// Deal Stance
			case 4: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "ON_LOOKERS", "wave_loop", 4.1, 1, 1, 1, 1, 1);	 // Wave
			case 5: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "COP_AMBIENT", "Coplook_loop", 4.1, 1, 1, 1, 1, 1);	 // Cross Arms	
			case 6: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "RAPPING", "Laugh_01", 4.1, 1, 1, 1, 1, 1);	 // Laugh	
			case 7: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);		// Talk
			case 8: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "PED", "fucku", 4.1, 1, 1, 1, 1, 1);		// Fuck U
			case 9: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "PED", "IDLE_tired", 4.1, 1, 1, 1, 1, 1);		// Tired
			case 10: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "BOMBER", "BOM_Plant", 4.1, 1, 1, 1, 1, 1);	 // Plant Bomb	
			case 11: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "PED", "ARRESTgun", 4.1, 1, 1, 1, 1, 1);		// Rob
			case 12: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "SHOP", "ROB_Loop_Threat", 4.1, 1, 1, 1, 1, 1); // Rob Man		
			case 13: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "FOOD", "EAT_Vomit_P", 4.1, 1, 1, 1, 1, 1); // Vomit		
			case 14: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "COP_AMBIENT", "Coplook_watch", 4.1, 1, 1, 1, 1, 1);	// Check Time	
			case 15: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "MEDIC", "CPR", 4.1, 1, 1, 1, 1, 1);	// CPR	
			case 16: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "GRAVEYARD", "mrnF_loop", 4.1, 1, 1, 1, 1, 1); // Cry		
			case 17: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "GYMNASIUM", "GYMshadowbox", 4.1, 1, 1, 1, 1, 1); // Gymnasium		
			case 18: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "BD_FIRE", "wash_up", 4.1, 1, 1, 1, 1, 1); // Wash Up		
			case 19: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "ON_LOOKERS", "Pointup_loop", 4.1, 1, 1, 1, 1, 1); // Salute		
			case 20: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "PAULNMAC", "wank_out", 4.1, 1, 1, 1, 1, 1);	// Jerk Off	
			case 21: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "ON_LOOKERS", "shout_01", 4.1, 1, 1, 1, 1, 1); // Cheer		
			case 22: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "ON_LOOKERS", "shout_02", 4.1, 1, 1, 1, 1, 1); // Cheer 1		
			case 23: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "ON_LOOKERS", "shout_in", 4.1, 1, 1, 1, 1, 1); // Cheer 2		
			case 24: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "RIOT", "RIOT_ANGRY_B", 4.1, 1, 1, 1, 1, 1); // Cheer 3		
			case 25: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "RIOT", "RIOT_CHANT", 4.1, 1, 1, 1, 1, 1); // Cheer 4		
			case 26: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "DEALER", "DEALER_IDLE", 4.1, 1, 1, 1, 1, 1); // Cross Arms		
			case 27: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "GRAVEYARD", "mrnM_loop", 4.1, 1, 1, 1, 1, 1); // Cross Arms		
			case 28: ApplyActorAnimation(ActorInfo[actorid][DynamicActor], "GRAVEYARD", "prst_loopa", 4.1, 1, 1, 1, 1, 1); // Cross Arms		
		}	
	}
}

forward Load_Server_Actor();
public Load_Server_Actor()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for(new i = 0; i < rows && i < MAX_DYNAMIC_ACTORS; i ++)
	{
	    ActorInfo[i][ActorExists] = 1;
		cache_get_field_content(i, "name", ActorInfo[i][ActorName], connectionID, 40);
		ActorInfo[i][ActorID] = cache_get_field_content_int(i, "id");
        ActorInfo[i][ActorAnim] = cache_get_field_content_int(i, "actoranim");
		ActorInfo[i][ActorSkin] = cache_get_field_content_int(i, "actorskin");
		ActorInfo[i][ActorPosX] = cache_get_field_content_float(i, "pos_x");
		ActorInfo[i][ActorPosY] = cache_get_field_content_float(i, "pos_y");
		ActorInfo[i][ActorPosZ] = cache_get_field_content_float(i, "pos_z");
		ActorInfo[i][ActorPosA] = cache_get_field_content_float(i, "pos_a");
		ActorInfo[i][ActorWorld] = cache_get_field_content_int(i, "world");
		ActorInfo[i][ActorText] = Text3D:INVALID_3DTEXT_ID;
		ActorInfo[i][DynamicActor] = INVALID_ACTOR_ID;
		ReloadActor(i);
	}
	printf("[Script] %i Actors loaded.", rows);
    return 1;
}
// Locker System

IsPlayerInRangeOfLocker(playerid, factionid)
{
	new lockerid;

	if((lockerid = GetNearbyLocker(playerid)) >= 0 && LockerInfo[lockerid][lFaction] == factionid)
	{
	    return 1;
	}

	return 0;
}

GetNearbyLocker(playerid)
{
	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
	    if(LockerInfo[i][lExists] && IsPlayerInRangeOfPoint(playerid, 2.0, LockerInfo[i][lPosX], LockerInfo[i][lPosY], LockerInfo[i][lPosZ]))
	    {
	        return i;
		}
	}

	return -1;
}

ReloadLocker(lockerid)
{
	if(LockerInfo[lockerid][lExists])
	{
	    DestroyDynamic3DTextLabel(LockerInfo[lockerid][lText]);
	    DestroyDynamicPickup(LockerInfo[lockerid][lPickup]);
	    if(LockerInfo[lockerid][lLabel])
	    {
	        new string[128];
	    	format(string, sizeof(string), "%s "WHITE"(ID: %d)"LIGHTRED"\nPress"WHITE"'Y'"LIGHTRED" to access locker.", FactionInfo[LockerInfo[lockerid][lFaction]][fName], lockerid);
     		LockerInfo[lockerid][lText] = CreateDynamic3DTextLabel(string, COLOR_LIGHTRED, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ], 10.0, .worldid = LockerInfo[lockerid][lWorld], .interiorid = LockerInfo[lockerid][lInterior]);
		}
		LockerInfo[lockerid][lPickup] = CreateDynamicPickup(1242, 1, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ], .worldid = LockerInfo[lockerid][lWorld], .interiorid = LockerInfo[lockerid][lInterior]);
	}
}

// Vendor System

GetNearbyMdc(playerid)
{
	for(new i = 0; i < MAX_MDC; i ++)
	{
	    if(MdcInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, MdcInfo[i][aPosX], MdcInfo[i][aPosY], MdcInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}

ReloadMdc(atmid)
{
	if(MdcInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(MdcInfo[atmid][aText]);
	    DestroyDynamicObject(MdcInfo[atmid][aObject]);

		MdcInfo[atmid][aText] = CreateDynamic3DTextLabel("Mobile Data Computer\n"TEAL"Type "WHITE"'/mdc'"TEAL" to login.", COLOR_BLUE, MdcInfo[atmid][aPosX], MdcInfo[atmid][aPosY], MdcInfo[atmid][aPosZ] + 0.4, 10.0);
        //VenInfo[atmid][aObject] = CreateDynamicObject(1239, VenInfo[atmid][aPosX], VenInfo[atmid][aPosY], VenInfo[atmid][aPosZ], 0.0, 0.0, VenInfo[atmid][aPosA]);
	}
}

// Vendor System

GetNearbyVen(playerid)
{
	for(new i = 0; i < MAX_VENDORS; i ++)
	{
	    if(VenInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, VenInfo[i][aPosX], VenInfo[i][aPosY], VenInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}

ReloadVen(atmid)
{
	if(VenInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(VenInfo[atmid][aText]);
	    DestroyDynamicObject(VenInfo[atmid][aObject]);

		VenInfo[atmid][aText] = CreateDynamic3DTextLabel("Street Food\nPress "WHITE"'N'"TEAL" to buy from vendor.", COLOR_TEAL, VenInfo[atmid][aPosX], VenInfo[atmid][aPosY], VenInfo[atmid][aPosZ] + 0.4, 10.0);
        //VenInfo[atmid][aObject] = CreateDynamicObject(1239, VenInfo[atmid][aPosX], VenInfo[atmid][aPosY], VenInfo[atmid][aPosZ], 0.0, 0.0, VenInfo[atmid][aPosA]);
	}
}
// BAR System

GetNearbyBar(playerid)
{
	for(new i = 0; i < MAX_BAR; i ++)
	{
	    if(BarInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, BarInfo[i][aPosX], BarInfo[i][aPosY], BarInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}

ReloadBar(atmid)
{
	if(BarInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(BarInfo[atmid][aText]);
	    DestroyDynamicObject(BarInfo[atmid][aObject]);

		BarInfo[atmid][aText] = CreateDynamic3DTextLabel("Bar\nPress "WHITE"'N'"TEAL" to buy from bartender.", COLOR_TEAL, BarInfo[atmid][aPosX], BarInfo[atmid][aPosY], BarInfo[atmid][aPosZ] + 0.4, 10.0);
        //VenInfo[atmid][aObject] = CreateDynamicObject(1239, VenInfo[atmid][aPosX], VenInfo[atmid][aPosY], VenInfo[atmid][aPosZ], 0.0, 0.0, VenInfo[atmid][aPosA]);
	}
}
// PUBLIC GARAGE

GetNearbyPG(playerid)
{
	for(new i = 0; i < MAX_PGARAGE; i ++)
	{
	    if(PGInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, PGInfo[i][aPosX], PGInfo[i][aPosY], PGInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}
// Surgery System

GetNearbySur(playerid)
{
	for(new i = 0; i < MAX_SURGERY; i ++)
	{
	    if(SurInfo[i][aExists] && IsPlayerInRangeOfPoint(playerid, 3.0, SurInfo[i][aPosX], SurInfo[i][aPosY], SurInfo[i][aPosZ]))
	    {
	        return i;
	    }
	}
	return -1;
}

ReloadSur(atmid)
{
	if(SurInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(SurInfo[atmid][aText]);
	    DestroyDynamicObject(SurInfo[atmid][aObject]);
		
		SurInfo[atmid][aText] = CreateDynamic3DTextLabel("Surgery Room\nType "WHITE"'/surgery'"LIME" to begin the operation.", COLOR_LIME, SurInfo[atmid][aPosX], SurInfo[atmid][aPosY], SurInfo[atmid][aPosZ] + 0.4, 10.0);
        //VenInfo[atmid][aObject] = CreateDynamicObject(1239, VenInfo[atmid][aPosX], VenInfo[atmid][aPosY], VenInfo[atmid][aPosZ], 0.0, 0.0, VenInfo[atmid][aPosA]);
	}
}
ReloadPG(atmid)
{
	if(PGInfo[atmid][aExists])
	{
	    DestroyDynamic3DTextLabel(PGInfo[atmid][aText]);
	    DestroyDynamicObject(PGInfo[atmid][aObject]);
		DestroyDynamicMapIcon(PGInfo[atmid][aMapIcon]);
		
		PGInfo[atmid][aText] = CreateDynamic3DTextLabel(""TEAL"["WHITE"Public Garage"TEAL"]"WHITE"\nPress "WHITE"'Y'"TEAL" to spawn/despawn a vehicle.", COLOR_TEAL, PGInfo[atmid][aPosX], PGInfo[atmid][aPosY], PGInfo[atmid][aPosZ] + 0.4, 40.0);
		PGInfo[atmid][aMapIcon] = CreateDynamicMapIcon(PGInfo[atmid][aPosX], PGInfo[atmid][aPosY], PGInfo[atmid][aPosZ], 55, 1, -1, -1, -1, 500.0);

		
	}
}

ResetRobbery()
{
    if(RobberyInfo[rStarted])
	{
		SMA(COLOR_LIGHTGREEN, "Breaking News"WHITE": The bank robbery is now finished. $%i was stolen from the bank.", RobberyInfo[rStolen]);
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][0]))
	{
		DestroyDynamicObject(RobberyInfo[rObjects][0]);
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][1]))
	{
		DestroyDynamicObject(RobberyInfo[rObjects][1]);
	}

	for(new i = 0; i < 5; i ++)
	{
	    DestroyDynamic3DTextLabel(RobberyInfo[rText][i]);
	    RobberyInfo[rText][i] = Text3D:INVALID_3DTEXT_ID;
	}

	for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
	{
	    RobberyInfo[rRobbers][i] = INVALID_PLAYER_ID;
	}

    RobberyInfo[rTime] = 12;
    RobberyInfo[rPlanning] = 0;
    RobberyInfo[rStarted] = 0;
    RobberyInfo[rStolen] = 0;
    RobberyInfo[rObjects][0] = INVALID_OBJECT_ID;
	RobberyInfo[rObjects][2] = CreateDynamicObject(1569,1112.08301, 1705.40479, -36.12640, 0.00000, 0.00000, -0.84000);
    RobberyInfo[rObjects][1] = INVALID_OBJECT_ID;
	RobberyInfo[rObjects][3] = CreateDynamicObject(19799, 1106.253173, 1692.824096, -41.544166, -0.000002, 0.000000, 270.000000);

}

//biz
ResetBizRobbery()
{
    if(RobberyInfo1[rStarted1])
	{
		SMA(COLOR_LIGHTGREEN, "Breaking News"WHITE": The store robbery is now finished. $%i was stolen from the store vault.", RobberyInfo1[rStolen1]);
	}
	if(IsValidDynamicObject(RobberyInfo1[rObjects1][0]))
	{
		DestroyDynamicObject(RobberyInfo1[rObjects1][0]);
	}
	if(IsValidDynamicObject(RobberyInfo1[rObjects1][2]))
	{
		DestroyDynamicObject(RobberyInfo1[rObjects1][2]);
	}


	for(new i = 0; i < 5; i ++)
	{
	    DestroyDynamic3DTextLabel(RobberyInfo1[rText1][i]);
	    RobberyInfo1[rText1][i] = Text3D:INVALID_3DTEXT_ID;
	}

	for(new i = 0; i < MAX_BIZ_ROBBERS; i ++)
	{
	    RobberyInfo1[rRobbers1][i] = INVALID_PLAYER_ID;
	}

    RobberyInfo1[rTime1] = 12;
    RobberyInfo1[rPlanning1] = 0;
    RobberyInfo1[rStarted1] = 0;
    RobberyInfo1[rStolen1] = 0;
    RobberyInfo1[rObjects1][0] = INVALID_OBJECT_ID;
    RobberyInfo1[rObjects1][2] = INVALID_OBJECT_ID;
	RobberyInfo1[rObjects1][1] = CreateDynamicObject(1522, 1308.781127, -884.367431, 38.600303, 0.000014, 0.000000, -0.800018);



}
ResetChop()
{
	ChopInfo[cTime] = 1;
}
ResetRob()
{
	RobInfo[rTime] = 1;
}
ResetRob1()
{
	RobInfo1[rTime1] = 1;
}

IsPlayerInYachtRobbery(playerid)
{
	if(YachtInfo[yPlanning] || YachtInfo[yStarted])
	{
		for(new i = 0; i < MAX_YACHT_ROBBER; i ++)
		{
	    	if(YachtInfo[yRobbers][i] == playerid)
		    {
		        return 1;
			}
		}
	}

	return 0;
}
ResetYachtRobbery()
{
    if(YachtInfo[yStarted])
	{
		SMA(COLOR_LIGHTGREEN, "Breaking News"WHITE": The yacht robbery is now finished. $%i was stolen from the yacht.", YachtInfo[yStolen]);
	}
	if(IsValidDynamicObject(YachtInfo[yObjects][0]))
	{
		DestroyDynamicObject(YachtInfo[yObjects][0]);
	}
	if(IsValidDynamicObject(YachtInfo[yObjects][1]))
	{
		DestroyDynamicObject(YachtInfo[yObjects][1]);
	}

	for(new i = 0; i < 5; i ++)
	{
	    DestroyDynamic3DTextLabel(YachtInfo[yText][i]);
	    YachtInfo[yText][i] = Text3D:INVALID_3DTEXT_ID;
	}

	for(new i = 0; i < MAX_YACHT_ROBBER; i ++)
	{
	    YachtInfo[yRobbers][i] = INVALID_PLAYER_ID;
	}

    YachtInfo[yTime] = 12;
    YachtInfo[yPlanning] = 0;
    YachtInfo[yStarted] = 0;
    YachtInfo[yStolen] = 0;
	YachtInfo[YchtStarted] = 0;
    YachtInfo[yObjects][0] = CreateDynamicObject(19799, -1378.7822, 1493.1398, 2.3487, 0.0000, 0.0000, 269.8051);
    YachtInfo[yObjects][1] = INVALID_OBJECT_ID;
}
ResetEvent()
{
	if(EventInfo[eStarted])
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pJoinedEvent])
	        {
	            pData[i][pJoinedEvent] = 0;
	            SetPlayerToSpawn(i);
			}
		}
	}

	for(new i = 0; i < 5; i ++)
	{
	    EventInfo[eWeapons][i] = 0;
	}

    EventInfo[eReady] = 0;
    EventInfo[eStarted] = 0;
    EventInfo[eLocked] = 0;
    EventInfo[eType] = 0;
    EventInfo[eJoinText] = 0;
    EventInfo[eHealth] = 100.0;
    EventInfo[eArmor] = 0.0;
    EventInfo[eInterior] = 0;
    EventInfo[eWorld] = 0;
    EventInfo[eNext] = 0;
    EventInfo[eCS] = 0;
    EventInfo[eQS] = 0;
    EventInfo[eHeal] = 0;

	for(new i = 0; i < 2; i ++)
	{
	    EventInfo[ePosX][i] = 0.0;
	    EventInfo[ePosY][i] = 0.0;
	    EventInfo[ePosZ][i] = 0.0;
	    EventInfo[ePosA][i] = 0.0;
	    EventInfo[eSkin][i] = 0;
	}
}
CheckServerAd(szInput[])
{
	if(strfind(szInput, ":", true) != -1)
	{
		new
			iCount,
			iPeriod,
			iDash,
			iPos,
			iChar,
			iColon;

		while((iChar = szInput[iPos++]))
		{
			if('0' <= iChar <= '9') iCount++;
			else if(iChar == '.') iPeriod++;
			else if(iChar == '-') iDash++;
			else if(iChar == ':') iColon++;
		}
		if(iCount >= 7 && iPeriod >= 3 && iColon >= 1 || strfind(szInput, "samp.") > -1 || strfind(szInput, "play.") > -1 || strfind(szInput, ":7777") > -1) {
			return 1;
		}
	}

	return 0;
}

stock PreloadAnims(playerid) {
	ApplyAnimation(playerid, "AIRPORT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Attractors", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BASEBALL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BD_FIRE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BEACH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "benchpress", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BF_injection", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKED", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKEH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKELEAP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKEV", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKE_DBZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BMX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOMBER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BSKTBALL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUDDY", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAMERA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CARRY", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR_CHAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CASINO", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CHAINSAW", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CHOPPA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CLOTHES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COACH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COLT45", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_AMBIENT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_DVBYZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRACK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRIB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DAM_JUMP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DANCING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DEALER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DILDO", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DODGE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DOZER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DRIVEBYS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_B", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_C", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_D", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_E", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FINALE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FINALE2", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FLAME", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Flowers", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FOOD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Freeweights", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GANGS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHANDS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHETTO_DB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "goggles", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAFFITI", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAVEYARD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRENADE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GYMNASIUM", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HAIRCUTS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HEIST9", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_HOUSE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_OFFICE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_SHOP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "JST_BUISNESS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KART", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KISSING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KNIFE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN1", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN2", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN3", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LOWRIDER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_CHASE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_END", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MEDIC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MISC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MTB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MUSCULAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "NEVADA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ON_LOOKERS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "OTB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARACHUTE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PAULNMAC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ped", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PLAYER_DVBYS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PLAYIDLES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POLICE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POOL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POOR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PYTHON", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "QUAD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "QUAD_DBZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RAPPING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIFLE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIOT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ROB_BANK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RUSTLER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RYDER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SCRATCHING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHAMAL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOTGUN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SILENCED", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SKATE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SMOKING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SNIPER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SPRAYCAN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "STRIP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SUNBATHE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWEET", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWIM", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWORD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TANK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TATTOOS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TEC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TRAIN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TRUCK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "UZI", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VAN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VENDING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VORTEX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WAYFARER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WEAPONS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WUZI", "null", 0.0, 0, 0, 0, 0, 0);
	return 1;
}

ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time)
{
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, 1);

	if(loop > 0 || freeze > 0)
	{
		pData[playerid][pLoopAnim] = 1;

		if(!pData[playerid][pToggleTextdraws] && !pData[playerid][pHospital])
		{
			TextDrawShowForPlayer(playerid, AnimationTD);
		}
	}
}
forward ShowPlayerAnimTextdraw(playerid);
public ShowPlayerAnimTextdraw(playerid)
{
		pData[playerid][pLoopAnim] = 1;

		if(!pData[playerid][pToggleTextdraws])
		{
			TextDrawShowForPlayer(playerid, AnimationTD);
		}
}

CanPlayerUseAnims(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || pData[playerid][pBrokenLeg] > 0|| pData[playerid][pBrokenHP] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pMiningTime] > 0 || pData[playerid][pButcherTime] > 0 ||pData[playerid][pCleanTime] > 0||pData[playerid][pJuicetime] > 0 ||pData[playerid][pBurritoEattime] > 0 ||pData[playerid][pTacoEattime] > 0 || pData[playerid][pTacotime] > 0 || pData[playerid][pBurritotime] > 0 || pData[playerid][pDemolitionTime] > 0 || pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0)
	{
	    return 0;
	}

	return 1;
}
CanPlayerVehAnims(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid) || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || pData[playerid][pInjured] > 0 || pData[playerid][pBrokenLeg] > 0|| pData[playerid][pBrokenHP] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pMiningTime] > 0  || pData[playerid][pCleanTime] > 0 ||pData[playerid][pTacotime] > 0 || pData[playerid][pBurritotime] > 0 || pData[playerid][pJuicetime] > 0 ||pData[playerid][pBurritoEattime] > 0 ||pData[playerid][pTacoEattime] > 0  || pData[playerid][pBrokenLeg] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pMiningTime] > 0 || pData[playerid][pButcherTime] > 0 ||pData[playerid][pCleanTime] > 0|| pData[playerid][pDemolitionTime] > 0 || pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0)
	{
		return 0;
	}
	return 1;
}

GetAvailableAttachedSlot(playerid)
{
	for(new i = 0; i < 5; i ++)
	{
	    if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
	    {
	        return i;
		}
	}

	return -1;
}

CancelTaxiRide(playerid) // playerid is the driver of the taxi.
{
	new
		passengerid = pData[playerid][pTaxiPassenger],
		bill = pData[playerid][pTaxiBill],
		string[20];

	SM(passengerid, COLOR_AQUA, "This ride costed you "SVRCLR"$%i{CCFFFF}.", bill);
	SM(playerid, COLOR_AQUA, "You earned $%i  for this ride.", bill);

	format(string, sizeof(string), "~r~-$%i", bill);
	GameTextForPlayer(passengerid, string, 5000, 1);

	format(string, sizeof(string), "~g~+$%i", bill);
	GameTextForPlayer(playerid, string, 5000, 1);

	GivePlayerCash(passengerid, -bill);
	GivePlayerCash(playerid, bill);

	pData[playerid][pTaxiPassenger] = INVALID_PLAYER_ID;
	pData[playerid][pTaxiBill] = 0;
	pData[playerid][pTaxiTime] = 0;
}

SetFreezePos(playerid, Float:x, Float:y, Float:z)
{
    if(pData[playerid][pFreezeTimer] >= 0)
	{
		KillTimer(pData[playerid][pFreezeTimer]);
	}
	SetPlayerPos(playerid, x, y, z);
    pData[playerid][pFreezeTimer] = SetTimerEx("UnfreezePlayer", 3000, false, "ifff", playerid, x, y, z);

    TogglePlayerControllable(playerid, 0);
	//ShowFreezeTextdraw(playerid);
}

IsPlayerChatActive(playerid)
{
	foreach(new i : Player)
	{
	    if(chattingWith[playerid]{i})
	    {
	        return 1;
		}
	}

	return 0;
}

PlayerHasJob(playerid, job)
{
    return (pData[playerid][pJob] == job || pData[playerid][pSecondJob] == job);
}

SetScriptArmour(playerid, Float:amount)
{
    pData[playerid][pACTime] = gettime() + 5;
	pData[playerid][pArmorTime] = gettime() + 5;
	pData[playerid][pArmor] = amount;
	return SetPlayerArmour(playerid, amount);
}

GetWeaponClipSize(weaponid)
{
    switch(weaponid)
    {
        case 22, 23:
			return 17;
        case 26:
            return 2;
        case 24, 27:
			return 7;
        case 28, 31, 32:
			return 50;
        case 29, 30:
			return 30;
    }

    return 0;
}

IsAForkliftVehicle(vehicleid)
{
	for(new i = 0; i < 5; i ++) {
	    if(vehicleid == forkliftVehicles[i]) return 1;
	}
	return 0;
}
StartForkliftJob(playerid)
{
	if(PlayerHasJob(playerid, JOB_FORKLIFTER))
    {
		switch (random(5))
		{
	        case 0: SetPlayerCheckpoint(playerid, 2756.0898, -2568.1514, 13.3329, 2.0);
			case 1: SetPlayerCheckpoint(playerid, 2396.0554, -2507.3931, 13.6478, 2.0);
			case 2: SetPlayerCheckpoint(playerid, 2350.6902, -2329.9878, 13.5469, 2.0);
			case 3: SetPlayerCheckpoint(playerid, 2204.1365, -2592.5439, 13.5409, 2.0);
			case 4: SetPlayerCheckpoint(playerid, 2450.6052, -2628.4292, 13.6645, 2.0);
		}
		pData[playerid][pCP] = CHECKPOINT_FORKLIFTER;
		pData[playerid][pJobStage] = 0;
	}
}

ResetPlayerWeaponsEx(playerid)
{
	ResetPlayerWeapons(playerid);
	SetPlayerArmedWeapon(playerid, 0);

	for(new i = 0; i < 13; i ++)
	{
	    pData[playerid][pWeapons][i] = 0;
	    pData[playerid][pTempWeapons][i] = 0;
	}

	pData[playerid][pACTime] = gettime() + 2;
}

RemovePlayerWeapon(playerid, weaponid)
{
	// Reset the player's weapons.
	ResetPlayerWeapons(playerid);
	// Set the armed slot to zero.
	SetPlayerArmedWeapon(playerid, 0);
	// Set the weapon in the slot to zero.
	pData[playerid][pACTime] = gettime() + 2;
	pData[playerid][pWeapons][weaponSlotIDs[weaponid]] = 0;
	pData[playerid][pTempWeapons][weaponSlotIDs[weaponid]] = 0;
	// Set the player's weapons.
	SetPlayerWeapons(playerid);
	// Save them to prevent rollbacks.
	SavePlayerWeapons(playerid);
}

SetWeaponAmmo(playerid, type, amount)
{
	if(type == AMMO_HP) {
		pData[playerid][pHPAmmo] = amount;
	} else if(type == AMMO_POISON) {
	    pData[playerid][pPoisonAmmo] = amount;
	} else if(type == AMMO_FMJ) {
	    pData[playerid][pFMJAmmo] = amount;
	}

	SetPlayerWeapons(playerid);
}

GiveWeapon(playerid, weaponid, bool:temp = false)
{
    if(pData[playerid][pWeaponRestricted]) return 1;
	if(1 <= weaponid <= 46)
	{
	    if(temp)
		{
			pData[playerid][pTempWeapons][weaponSlotIDs[weaponid]] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 19999);
	    }
		else
		{
			pData[playerid][pWeapons][weaponSlotIDs[weaponid]] = weaponid;
			SetPlayerWeapons(playerid);
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    SetPlayerArmedWeapon(playerid, 0);
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
		{
			switch(weaponid)
			{
		    	case 22, 25, 28, 29, 30, 31, 32:
		    	{
		    	    SetPlayerArmedWeapon(playerid, weaponid);
			    }
			    default:
			    {
		    	    SetPlayerArmedWeapon(playerid, 0);
				}
			}
		}
		else
		{
		    SetPlayerArmedWeapon(playerid, weaponid);
		}

		SavePlayerWeapons(playerid);

		pData[playerid][pACTime] = gettime() + 2;
	}
	return 1;
}

/*IsAFlashingEXB(carid)
{
	switch(GetVehicleModel(carid)) {
		case 596, 597, 598, 599, 541, 426, 427, 416, 407, 560, 490: return 1;
	}
	return 0;
}*/
SQL_ReturnEscaped(const string[])
{
	new
	    entry[256];

	mysql_real_escape_string(string, entry, connectionID);
	return entry;
}

GivePlayerWeaponEx(playerid, weaponid, bool:temp = false)
{
	if(1 <= weaponid <= 46)
	{
	    if(temp)
		{
			pData[playerid][pTempWeapons][weaponSlotIDs[weaponid]] = weaponid;
			GivePlayerWeapon(playerid, weaponid, 29999);
	    }
		else
		{
			pData[playerid][pWeapons][weaponSlotIDs[weaponid]] = weaponid;
			SetPlayerWeapons(playerid);
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    SetPlayerArmedWeapon(playerid, 0);
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
		{
			switch(weaponid)
			{
		    	case 22, 23, 25, 28..34:
		    	{
		    	    SetPlayerArmedWeapon(playerid, weaponid);
			    }
			    default:
			    {
		    	    SetPlayerArmedWeapon(playerid, 0);
				}
			}
		}
		else
		{
		    SetPlayerArmedWeapon(playerid, weaponid);
		}

		SavePlayerWeapons(playerid);

		pData[playerid][pACTime] = gettime() + 2;
	}
}

GetScriptWeapon(playerid)
{
	new weaponid = GetPlayerWeapon(playerid);

	if(PlayerHasWeapon(playerid, weaponid))
	{
	    return weaponid;
	}

	return 0;
}
AddCommas(number, const separator[] = ",")
{
	new output[15]; // longest possible output given 32 bit integers: -2,147,483,648
	format(output, sizeof(output), "%d", number);

	for(new i = strlen(output) - 3; i > 0 && output[i-1] != '-'; i -= 3)
	{
		strins(output, separator, i);
	}

	return output;
}
PlayerHasWeapon(playerid, weaponid, bool:temp = false)
{
	switch(weaponid)
	{
	    case 0, 2, 40, 46:
	    {
	        return 1;
		}
	}

	if(weaponid == 23 && (pData[playerid][pTazer] || (IsLawEnforcement(playerid) || GetFactionType(playerid) == FACTION_GOVERNMENT || GetFactionType(playerid) == FACTION_DOC)))
	{
	    return 1;
	}
	else if(weaponid == 25 && (pData[playerid][pBeanbag] || (IsLawEnforcement(playerid) || GetFactionType(playerid) == FACTION_GOVERNMENT || GetFactionType(playerid) == FACTION_DOC)))
	{
	    return 1;
	}
	if((temp) && pData[playerid][pTempWeapons][weaponSlotIDs[weaponid]] == weaponid)
	{
	    return 1;
	}

	return pData[playerid][pWeapons][weaponSlotIDs[weaponid]] == weaponid;
}

SetPlayerWeapons(playerid)
{
	if(!pData[playerid][pJoinedEvent] && pData[playerid][pDueling] == INVALID_PLAYER_ID && pData[playerid][pDueling1] == INVALID_PLAYER_ID && !pData[playerid][pJailType] && !pData[playerid][pWeaponRestricted])
	{
		new weaponid = GetPlayerWeapon(playerid);

		ResetPlayerWeapons(playerid);

		for(new i = 0; i < 13; i ++)
		{
		    /*if(pData[playerid][pTempWeapons][i] > 0)
		    {
		        pData[playerid][pTempWeapons][i] = 0;
		    }*/

		    if(pData[playerid][pWeapons][i] > 0)
		    {
		        /*if(i == 2 && pData[playerid][pTazer])
		        {
		            GiveWeapon(playerid, 23, true);
		            continue;
		        }*/

				if(pData[playerid][pAmmoType] != AMMOTYPE_NORMAL && pData[playerid][pAmmoWeapon] == pData[playerid][pWeapons][i])
				{
				    if(pData[playerid][pAmmoType] == AMMOTYPE_HP && pData[playerid][pHPAmmo] > 0) {
				        GivePlayerWeapon(playerid, pData[playerid][pWeapons][i], pData[playerid][pHPAmmo]);
				    } else if(pData[playerid][pAmmoType] == AMMOTYPE_POISON && pData[playerid][pPoisonAmmo] > 0) {
				        GivePlayerWeapon(playerid, pData[playerid][pWeapons][i], pData[playerid][pPoisonAmmo]);
					} else if(pData[playerid][pAmmoType] == AMMOTYPE_FMJ && pData[playerid][pFMJAmmo] > 0) {
					    GivePlayerWeapon(playerid, pData[playerid][pWeapons][i], pData[playerid][pFMJAmmo]);
				    } else {
						GivePlayerWeapon(playerid, pData[playerid][pWeapons][i], 19999);
						SM(playerid, COLOR_WHITE, "** Your %s is now using normal ammunition again as you ran out of special ammo.", GetWeaponNameEx(pData[playerid][pWeapons][i]));
						pData[playerid][pAmmoType] = AMMOTYPE_NORMAL;
						pData[playerid][pAmmoWeapon] = 0;
					}
				}
				else
				{
				    if(16 <= pData[playerid][pWeapons][i] <= 18)
				        GivePlayerWeapon(playerid, pData[playerid][pWeapons][i], 1);
				    else
						GivePlayerWeapon(playerid, pData[playerid][pWeapons][i], 19999);
				}
				if(pTazerReplace[playerid] && !pData[playerid][pTazer]) {
					pData[playerid][pWeapons][2] = pTazerReplace[playerid];
					pData[playerid][pAmmo][2] = pTazerAmmo[playerid];

					pTazerReplace[playerid] = 0;
					pTazerAmmo[playerid] = 0;
				}
				else if(pBeanbagReplace[playerid] && !pData[playerid][pBeanbag]) {
					pData[playerid][pWeapons][2] = pBeanbagReplace[playerid];
					pData[playerid][pAmmo][2] = pBeanbagAmmo[playerid];

					pBeanbagReplace[playerid] = 0;
					pBeanbagAmmo[playerid] = 0;
				}
				GivePlayerWeapon(playerid, pData[playerid][pWeapons][i], pData[playerid][pAmmo][i]);
			}
		}
		switch(GetPlayerState(playerid))
		{
		    case PLAYER_STATE_DRIVER:
		    {
		        SetPlayerArmedWeapon(playerid, 0);
			}
			case PLAYER_STATE_PASSENGER:
			{
			    switch(weaponid) // Driveby
			    {
			        case 22, 28, 29, 32:
			        {
			            SetPlayerArmedWeapon(playerid, weaponid);
					}
					default:
					{
					    SetPlayerArmedWeapon(playerid, 0);
					}
				}
			}
			default:
			{
			    SetPlayerArmedWeapon(playerid, weaponid);
		    }
		}
	}
}
DestroyVehicleEx(vehicleid)
{
	if(IsValidVehicle(vehicleid))
	{
		ResetVehicleObjects(vehicleid);
	}

	return DestroyVehicle(vehicleid);
}

ResetVehicleObjects(vehicleid)
{
    if(IsValidDynamicObject(vehicleSiren[vehicleid]))
	{
	    DestroyDynamicObject(vehicleSiren[vehicleid]);
	    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
	}
	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
	if(IsValidDynamic3DTextLabel(DonatorCallSign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(DonatorCallSign[vehicleid]);
		DonatorCallSign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
 	if(VehicleInfo[vehicleid][vNeonEnabled])
	{
		if(IsValidDynamicObject(VehicleInfo[vehicleid][vObjects][0]))
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
		    VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		}
		if(IsValidDynamicObject(VehicleInfo[vehicleid][vObjects][1]))
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
		    VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
		}
 	}

 	adminVehicle{vehicleid} = false;
}
SetPlayerClothing(playerid)
{
	// Reset any clothing that the player has on them.
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
	    {
	        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][i][cAttachedIndex]);
		}
	}

	// Now, we reapply the clothing to the player.
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
		{
		    if(ClothingInfo[playerid][i][cAttachedIndex] == -1)
		    {
			    ClothingInfo[playerid][i][cAttachedIndex] = GetAvailableAttachedSlot(playerid);
			}

		    if(ClothingInfo[playerid][i][cAttachedIndex] >= 0)
		    {
		        SetPlayerAttachedObject(playerid, ClothingInfo[playerid][i][cAttachedIndex], ClothingInfo[playerid][i][cModel], ClothingInfo[playerid][i][cBone], ClothingInfo[playerid][i][cPosX], ClothingInfo[playerid][i][cPosY], ClothingInfo[playerid][i][cPosZ], ClothingInfo[playerid][i][cRotX], ClothingInfo[playerid][i][cRotY], ClothingInfo[playerid][i][cRotZ], ClothingInfo[playerid][i][cScaleX], ClothingInfo[playerid][i][cScaleY], ClothingInfo[playerid][i][cScaleZ]);
			}
			else
			{
			    // Clothing wasn't attached... slots are probably all full.
			    ClothingInfo[playerid][i][cAttached] = 0;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET attached = 0 WHERE id = %i", ClothingInfo[playerid][i][cID]);
			    mysql_tquery(connectionID, queryBuffer);
			}
		}
	}

	pData[playerid][pAwaitingClothing] = 0;
}

SetPlayerInPaintball(playerid, type)
{
    if(pData[playerid][pPaintball] == 0)
	{
		SavePlayerVariables(playerid);
		ResetPlayerWeapons(playerid);
	}
	if(type == 1)
	{
		new rand = random(sizeof(paintballFSpawns));
		SetPlayerPos(playerid, paintballFSpawns[rand][0], paintballFSpawns[rand][1], paintballFSpawns[rand][2]);
		SetPlayerFacingAngle(playerid, paintballFSpawns[rand][3]);
		SetPlayerInterior(playerid, 18);
		SetPlayerVirtualWorld(playerid, 1000);
		SetCameraBehindPlayer(playerid);

		SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 100.0);
		
		GivePlayerWeaponEx(playerid, 24, true);
		GivePlayerWeaponEx(playerid, 27, true);
		GivePlayerWeaponEx(playerid, 29, true);
		GivePlayerWeaponEx(playerid, 31, true);
		GivePlayerWeaponEx(playerid, 34, true);

		pData[playerid][pPaintball] = 1;
		pData[playerid][pBrokenLeg] = 0;
	}
	else if(type == 2)
	{
		SetPlayerPos(playerid, paintballTSpawns[pbNext][0], paintballTSpawns[pbNext][1], paintballTSpawns[pbNext][2]);
		SetPlayerFacingAngle(playerid, paintballTSpawns[pbNext][3]);
		SetPlayerInterior(playerid, 18);
		SetPlayerVirtualWorld(playerid, 1001);
		SetCameraBehindPlayer(playerid);

	    SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 100.0);
		
		GivePlayerWeaponEx(playerid, 24, true);
		GivePlayerWeaponEx(playerid, 27, true);
		GivePlayerWeaponEx(playerid, 29, true);
		GivePlayerWeaponEx(playerid, 31, true);
		GivePlayerWeaponEx(playerid, 34, true);
		pData[playerid][pBrokenLeg] = 0;
		pData[playerid][pPaintball] = 2;
		pData[playerid][pPaintballTeam] = pbNext;
		if(!pbNext)
		{
		    pbNext = 1;
		}
		else
		{
		    pbNext = 0;
		}
	}
	else if(type == 3)
	{
	    new rand = random(sizeof(paintballDSpawns));
		SetPlayerPos(playerid, paintballDSpawns[rand][0], paintballDSpawns[rand][1], paintballDSpawns[rand][2]);
		SetPlayerFacingAngle(playerid, paintballDSpawns[rand][3]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 1000);
		SetCameraBehindPlayer(playerid);

		GangZoneShowForPlayer(playerid, zone_paintball[0], 0xFFFF0096);

	    SetPlayerHealth(playerid, 25.0);
		SetPlayerArmour(playerid, 0.0);

		GivePlayerWeaponEx(playerid, 24, true);
		pData[playerid][pBrokenLeg] = 0;
		pData[playerid][pPaintball] = 3;
	}
	else if(type == 4)
	{
		new rand = random(sizeof(paintballSSpawns));
		SetPlayerPos(playerid, paintballSSpawns[rand][0], paintballSSpawns[rand][1], paintballSSpawns[rand][2]);
		SetPlayerFacingAngle(playerid, paintballSSpawns[rand][3]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 1001);
		SetCameraBehindPlayer(playerid);

		GangZoneShowForPlayer(playerid, zone_paintball[1], 0xFFFF0096);

	    SetPlayerHealth(playerid, 38.0);
		SetPlayerArmour(playerid, 0.0);

		GivePlayerWeaponEx(playerid, 34, true);
		pData[playerid][pBrokenLeg] = 0;
		pData[playerid][pPaintball] = 4;
	}
}
SetPlayerInEvent(playerid)
{
    SavePlayerVariables(playerid);
	ResetPlayerWeapons(playerid);

	pData[playerid][pJoinedEvent] = 1;
	pData[playerid][bpWearing] = 0;
	pData[playerid][pBandana] = 0;

	if(EventInfo[eType] == 2)
	{
		pData[playerid][pEventTeam] = EventInfo[eNext];

		if(EventInfo[eNext] == RED_TEAM) {
			EventInfo[eNext] = BLUE_TEAM;
		} else {
	    	EventInfo[eNext] = RED_TEAM;
		}

		if(pData[playerid][pEventTeam] == RED_TEAM) {
			SCM(playerid, COLOR_SYNTAX, "You are on Red Team.");
			//Dyuze(playerid, "Notice", "You are on ~r~Red Team.");
		} else if(pData[playerid][pEventTeam] == BLUE_TEAM) {
			SCM(playerid, COLOR_SYNTAX, "You are on Blue Team.");
			//Dyuze(playerid, "Notice", "You are on ~b~Red Team.");
		}
	}
	else
	{
	    pData[playerid][pEventTeam] = 0;
	}

	/*for(new x = 0; x < 5; x ++)
    {
        if(EventInfo[eWeapons][x])
        {
            GiveWeapon(playerid, EventInfo[eWeapons][x], true);
        }
    }*/

	SetPlayerPos(playerid, EventInfo[ePosX][pData[playerid][pEventTeam]], EventInfo[ePosY][pData[playerid][pEventTeam]], EventInfo[ePosZ][pData[playerid][pEventTeam]]);
	SetPlayerFacingAngle(playerid, EventInfo[ePosA][pData[playerid][pEventTeam]]);
	SetPlayerInterior(playerid, EventInfo[eInterior]);
	SetPlayerVirtualWorld(playerid, EventInfo[eWorld]);
	SetPlayerHealth(playerid, EventInfo[eHealth]);
	SetPlayerArmour(playerid, EventInfo[eArmor]);
	SetCameraBehindPlayer(playerid);

    if(EventInfo[eSkin][pData[playerid][pEventTeam]])
	{
		SetPlayerSkin(playerid, EventInfo[eSkin][pData[playerid][pEventTeam]]);
	}

	if(!isnull(EventInfo[eJoinText]))
	{
		SCMf(playerid, COLOR_SYNTAX, "Event:", EventInfo[eJoinText]);
		//Dyuze(playerid, "Event", EventInfo[eJoinText]);
	}

	if(EventInfo[eType] == 1 || EventInfo[eType] == 2)
	{
		SM(playerid, COLOR_YELLOW, "Event: Crackshooting is %s, Quickswapping is %s, Healing is %s.", (EventInfo[eCS]) ? ("{FFD700}Allowed"WHITE"") : ("{FFA500}Not allowed"WHITE""), (EventInfo[eQS]) ? ("{FFD700}Allowed"WHITE"") : ("{FFA500}Not allowed"WHITE""), (EventInfo[eHeal]) ? ("{FFD700}Allowed"WHITE"") : ("{FFA500}Not allowed"WHITE""));
	}

	return 1;
}
new gPriority;
forward Priority(playerid, stage);
public Priority(playerid, stage)
{
	switch(stage)
	{
		case 0:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~15 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 1:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~14 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 2:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~13 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 3:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~12 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 4:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~11 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 5:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~10 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 6:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~9 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 7:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~8 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 8:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~7 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 9:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~6 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 10:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~5 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 11:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~4 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 12:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~3 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 13:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~2 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 14:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~1 Mins");
		    TextDrawSetString(Textdraw2, string);
		}
		case 15:
		{
            new string[128];
		    format(string, sizeof(string), "~w~Illegal Activity: ~r~Open for Heist");
		    TextDrawSetString(Textdraw2, string);
		}
	}
	stage++;

	if(stage < 15)
	{
 		gPriority = SetTimerEx("Priority", 60000, false, "ii", playerid, stage);
	}
}
SetPriority(playerid)
{
	if(PriorityInfo[prioType] == 1)
	{
        new string[128];
	    format(string, sizeof(string), "~w~Illegal Activity: ~r~Open for Heist");
	    TextDrawSetString(Textdraw2, string);
	}
	if(PriorityInfo[prioType] == 2)
	{
        new string[128];
	    format(string, sizeof(string), "~w~Illegal Activity: ~y~Priority On Hold");
	    TextDrawSetString(Textdraw2, string);
	}
	if(PriorityInfo[prioType] == 3)
	{
		SetTimerEx("Priority", 500, false, "ii", playerid, 0);
		SMA(COLOR_YELLOW, ""SVRCLR"Priority has been reseted. Please wait for 15 minutes before conducting another crime.");
	}
	return 1;
}
SetPlayerInHospital(playerid, time = 30)
{
	pData[playerid][pHospitalTime] = time;
    pData[playerid][pHospital] = 1;
    ResetPlayerWeaponsEx(playerid);
    TextDrawHideForPlayer(playerid, Text:DieText);
    TextDrawHideForPlayer(playerid, Text:InjuredText);
    SetPlayerPos(playerid,2076.3726,1089.0255,1717.9600);
	SetPlayerFacingAngle(playerid,4.2120);
	
	ApplyAnimationEx(playerid, "CRACK", "crckdeth4", 4.0, 0, 1, 1, 1, 0);
	SetPlayerVirtualWorld(playerid, 2);
	SetPlayerInterior(playerid, 2);
	
    TogglePlayerControllable(playerid, 0);
    pData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Recovering... 20", 20000, 3);
   
}

SetPlayerInBed(playerid)
{
	if(pData[playerid][pBedType] >= 1)
	{
		ResetPlayerWeaponsEx(playerid);
		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, 2);
		SetPlayerInterior(playerid, 2);
		SetPlayerArmedWeapon(playerid, 0);
		new rand = random(sizeof(hospitalspawns));
		SetFreezePos(playerid, hospitalspawns[rand][0], hospitalspawns[rand][1], hospitalspawns[rand][2]);
		ApplyAnimationEx(playerid, "CRACK", "crckdeth4", 4.0, 0, 1, 1, 1, 0);
		TogglePlayerControllable(playerid, 1);
	}
}

SetPlayerInJail(playerid)
{
	if(pData[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
 		HangupCall(pData[playerid][pCallLine], HANGUP_DROPPED);
	}

	if(pData[playerid][pJailType] == 1) // /prisonic
	{
		new index = random(sizeof(highcellSpawns));
		TeleportToCoords(playerid, highcellSpawns[index][0], highcellSpawns[index][1], highcellSpawns[index][2], highcellSpawns[index][3],1,1);
	}
	else if(pData[playerid][pJailType] == 2) // /jail /prison
	{
		new index = random(sizeof(highcellSpawns));
		TeleportToCoords(playerid, highcellSpawns[index][0], highcellSpawns[index][1], highcellSpawns[index][2], highcellSpawns[index][3],1,1);
	}
	else if(pData[playerid][pJailType] == 3) // IC prison
	{
		ResetPlayerWeaponsEx(playerid);
		ResetPlayer(playerid);
		SetCameraBehindPlayer(playerid);
		SetPlayerArmedWeapon(playerid, 0);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UnfreezePlayerEx", 8000, false, "i", playerid);
	}
	pData[playerid][pVIPgun1] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun1 = 0 WHERE uid = %i", pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	pData[playerid][pVIPgun2] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun2 = 0 WHERE uid = %i", pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	pData[playerid][pVIPgun3] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun3 = 0 WHERE uid = %i", pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	pData[playerid][pVIPgun4] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun4 = 0 WHERE uid = %i", pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	pData[playerid][pVIPgun5] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun5 = 0 WHERE uid = %i", pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
		
	ResetPlayerWeaponsEx(playerid);
	ResetPlayer(playerid);
	SetCameraBehindPlayer(playerid);
	SetPlayerArmedWeapon(playerid, 0);
	TogglePlayerControllable(playerid, 0);
	SetTimerEx("UnfreezePlayerEx", 8000, false, "i", playerid);
}
TeleportToVehicle(playerid, vehicleid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
		Float:a,
		interior,
		garageid;

	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);

	if((garageid = GetVehicleGarage(vehicleid)) >= 0)
	{
 		interior = garageInteriors[GarageInfo[garageid][gType]][intID];
	}

	TeleportToCoords(playerid, x + 1, y + 1, z + 1, a, interior, GetVehicleVirtualWorld(vehicleid));
}

TeleportToPlayer(playerid, targetid, bool:vehicle = true)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
		Float:a;

	GetPlayerPos(targetid, x, y, z);
	GetPlayerFacingAngle(targetid, a);

	TeleportToCoords(playerid, x + 1, y + 1, z, a, GetPlayerInterior(targetid), GetPlayerVirtualWorld(targetid), .vehicle = vehicle);
}

TeleportToCoords(playerid, Float:x, Float:y, Float:z, Float:angle, interiorid, worldid, bool:freeze = false, bool:vehicle = true)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if((vehicle) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    foreach(new i : Player)
	    {
	        if(IsPlayerInVehicle(i, vehicleid))
	        {
	            SetPlayerInterior(i, interiorid);
	            SetPlayerVirtualWorld(i, worldid);
			}
	    }

        SetVehiclePos(vehicleid, x, y, z);
     	SetVehicleZAngle(vehicleid, angle);
	    SetVehicleVirtualWorld(vehicleid, worldid);
	    LinkVehicleToInterior(vehicleid, interiorid);
	}
	else
	{
	    SetPlayerPos(playerid, x, y, z);
	    SetPlayerFacingAngle(playerid, angle);
		SetPlayerInterior(playerid, interiorid);
		SetPlayerVirtualWorld(playerid, worldid);
		SetCameraBehindPlayer(playerid);
	}

	if((freeze) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
        SetTimerEx("VehicleUnfreeze", 3000, false, "iifffii", playerid, GetPlayerVehicleID(playerid), x, y, z, interiorid, worldid);
        //ShowFreezeTextdraw(playerid);
        TogglePlayerControllable(playerid, 0);
	}
}
TeleportToGarage(playerid, Float:x, Float:y, Float:z, Float:angle, interiorid, worldid, bool:freeze = true, bool:vehicle = true)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if((vehicle) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    foreach(new i : Player)
	    {
	        if(IsPlayerInVehicle(i, vehicleid))
	        {
	            SetPlayerInterior(i, interiorid);
	            SetPlayerVirtualWorld(i, worldid);
			}
	    }

        SetVehiclePos(vehicleid, x, y, z);
     	SetVehicleZAngle(vehicleid, angle);
	    SetVehicleVirtualWorld(vehicleid, worldid);
	    LinkVehicleToInterior(vehicleid, interiorid);
	}
	else
	{
	    SetPlayerPos(playerid, x, y, z);
	    SetPlayerFacingAngle(playerid, angle);
		SetPlayerInterior(playerid, interiorid);
		SetPlayerVirtualWorld(playerid, worldid);
		SetCameraBehindPlayer(playerid);
	}

	if((freeze) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
        SetTimerEx("VehicleUnfreeze", 3000, false, "iifffii", playerid, GetPlayerVehicleID(playerid), x, y, z, interiorid, worldid);
		SCM(playerid, COLOR_SYNTAX, "Loading Objects...");
		//Dyuze(playerid, "Notice", "Loading objects...");
        TogglePlayerControllable(playerid, 0);
	}
}

ShowLandsOnMap(playerid, enable)
{
	for(new i = 0; i < MAX_LANDS; i ++)
	{
	    if(LandInfo[i][lExists])
	    {
		    if(enable) {
 				GangZoneShowForPlayer(playerid, LandInfo[i][lGangZone], (LandInfo[i][lOwnerID] > 0) ? (0x0080FFAA) : (0x33CC33AA));
			} else {
		    	GangZoneHideForPlayer(playerid, LandInfo[i][lGangZone]);
			}
		}
	}

	pData[playerid][pShowLands] = enable;
}
ShowTurfsOnMap(playerid, enable)
{
	for(new i = 0; i < MAX_TURFS; i ++)
	{
	    if(TurfInfo[i][tExists])
	    {
		    if(enable)
			{
			    GangZoneShowForPlayer(playerid, TurfInfo[i][tGangZone], GetTurfColor(i));

			    if(TurfInfo[i][tCapturer] == INVALID_PLAYER_ID)
			    {
                    GangZoneStopFlashForPlayer(playerid, TurfInfo[i][tGangZone]);
			    }
			    else
			    {
				    if(pData[TurfInfo[i][tCapturer]][pGang] == -1 && (GetFactionType(TurfInfo[i][tCapturer]) == FACTION_POLICE))
				        GangZoneFlashForPlayer(playerid, TurfInfo[i][tGangZone], 0x0000FFAA);
					else if(pData[TurfInfo[i][tCapturer]][pGang] >= 0)
						GangZoneFlashForPlayer(playerid, TurfInfo[i][tGangZone], (GangInfo[pData[TurfInfo[i][tCapturer]][pGang]][gColor] & ~0xff) + 0xAA);
				}
			}
			else
			{
		    	GangZoneHideForPlayer(playerid, TurfInfo[i][tGangZone]);
			}
		}
	}

	pData[playerid][pShowTurfs] = enable;
}


CancelZoneCreation(playerid)
{
    for(new i = 0; i < 4; i ++)
    {
        DestroyDynamicPickup(pData[playerid][pZonePickups][i]);
        pData[playerid][pZonePickups][i] = -1;
	}

	GangZoneDestroy(pData[playerid][pZoneID]);

	pData[playerid][pZoneID] = -1;
	pData[playerid][pZoneCreation] = 0;
    pData[playerid][pMinX] = 0.0;
    pData[playerid][pMinY] = 0.0;
    pData[playerid][pMaxX] = 0.0;
    pData[playerid][pMaxY] = 0.0;
}

ResetCooking(playerid)
{
    pData[playerid][pCookMeth] = 0;
	pData[playerid][pCookGrams] = 0;
	pData[playerid][pCookTime] = 0;
}

ResetPlayer(playerid)
{
    if(pData[playerid][pJoinedEvent])
	{
		SetPlayerSkin(playerid, pData[playerid][pSkin]);
		ResetPlayerWeapons(playerid);
		pData[playerid][pJoinedEvent] = 0;
	}
	if(pData[playerid][pPaintball] > 0)
	{
	    ResetPlayerWeapons(playerid);
		pData[playerid][pPaintball] = 0;
		pData[playerid][pPaintballTeam] = -1;
	}
	if(pData[playerid][pHospital])
	{
	    GameTextForPlayer(playerid, " ", 100, 3);
	    pData[playerid][pHospital] = 0;
	    pData[playerid][pHospitalTime] = 0;
	}
	if(pData[playerid][pMiningTime] > 0)
	{
	    ClearAnimations(playerid, 1);
	}
	if(pData[playerid][pButcherTime] > 0)
	{
	    ClearAnimations(playerid, 1);
	}
	if(pData[playerid][pCleanTime] > 0)
	{
	    ClearAnimations(playerid, 1);
	}
	if(pData[playerid][pTacoEattime] > 0)
	{
	    ClearAnimations(playerid, 1);
	}
	if(pData[playerid][pBurritoEattime] > 0)
	{
	    ClearAnimations(playerid, 1);
	}
	if(pData[playerid][pJuicetime] > 0)
	{
	    ClearAnimations(playerid, 1);
	}
	if(pData[playerid][pTacotime] > 0)
	{
	    ClearAnimations(playerid, 1);
	}
	if(pData[playerid][pBurritotime] > 0)
	{
	    ClearAnimations(playerid, 1);
	}
	if(pData[playerid][pDemolitionTime] > 0)
	{
	    ClearAnimations(playerid, 1);
	}
	if(pData[playerid][pTazedTime] > 0)
	{
	    ClearAnimations(playerid, 1);
	    TogglePlayerControllable(playerid, 1);
	}
	if(pData[playerid][pCuffed])
	{
	    TogglePlayerControllable(playerid, 1);
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if(pData[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
	{
	    pData[pData[playerid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	    pData[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	}
	if(pData[playerid][pPlantedBomb])
	{
	    DestroyDynamicObject(pData[playerid][pBombObject]);
	    pData[playerid][pBombObject] = INVALID_OBJECT_ID;
	    pData[playerid][pPlantedBomb] = 0;
	}
	if(pData[playerid][pFreezeTimer] >= 0)
	{
	    KillTimer(pData[playerid][pFreezeTimer]);
	    TogglePlayerControllable(playerid, 1);
		pData[playerid][pFreezeTimer] = -1;
	}
	if(pData[playerid][pDueling] != INVALID_PLAYER_ID)
	{
		pData[pData[playerid][pDueling]][pDueling] = INVALID_PLAYER_ID;
		pData[playerid][pDueling] = INVALID_PLAYER_ID;
	}
	if(pData[playerid][pDueling1] != INVALID_PLAYER_ID)
	{
		pData[pData[playerid][pDueling1]][pDueling1] = INVALID_PLAYER_ID;
		pData[playerid][pDueling1] = INVALID_PLAYER_ID;
	}
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		RemoveFromBankRobbery(playerid);
	}
	if(RobberyInfo1[rPlanning1] || RobberyInfo1[rStarted1])
	{
		RemoveFromBizRobbery(playerid);
	}
	if(YachtInfo[yPlanning] || YachtInfo[yStarted])
	{
		RemoveFromYachtRobbery(playerid);
	}  	
	
	pData[playerid][pSweeping] = 0;
	pData[playerid][pSweepTime] = 0;
	pData[playerid][pSweepEarnings] = 0;
	
	PlayerHasCrate[playerid] = 0;
	pData[playerid][pInjured] = 0;
	pData[playerid][pBrokenLeg] = 0;
	pData[playerid][pBrokenHP] = 0;
	pData[playerid][pAntiFall] = 0;
	pData[playerid][pVoiceChat] = 0;
	pData[playerid][pAcceptedHelp] = 0;
	pData[playerid][pMiningTime] = 0;
	pData[playerid][pCleanTime] = 0;
	pData[playerid][pBurritoEattime] = 0;
	pData[playerid][pJuicetime] = 0;
	pData[playerid][pTacoEattime] = 0;
	pData[playerid][pTacotime] = 0;
	pData[playerid][pBurritotime] = 0;
	pData[playerid][pDemolitionTime] = 0;
	pData[playerid][pDemolition] = 0;
	pData[playerid][pChatstyle] = 0;
	pData[playerid][pMiningRock] = 0;
	pData[playerid][pButcherMeat] = 0;
	pData[playerid][pSpeedTime] = 0;
	pData[playerid][pGraffiti] = -1;
	pData[playerid][pGraffitiTime] = 0;
	pData[playerid][pTazer] = 0;
	pData[playerid][pTazedTime] = 0;
	pData[playerid][pBeanbag] = 0;
	pData[playerid][pBeanbagTime] = 0;
	pData[playerid][pCuffed] = 0;
	pData[playerid][pTied] = 0;
	pData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	pData[playerid][pDelivered] = 0;
	pData[playerid][pContractTaken] = INVALID_PLAYER_ID;
    pData[playerid][pPoisonTime] = 0;
    pData[playerid][pCapturingPoint] = -1;
    pData[playerid][pCaptureTime] = 0;

 	CancelActiveCheckpoint(playerid);
 	RemovePlayerAttachedObject(playerid, 9);
}
forward OtherTimerEx(playerid, type);
public OtherTimerEx(playerid, type)
{
	switch(type)
	{
		case TYPE_TPLUMBERJACKRUNTIMER:
		{
	    	if(GetPVarInt(playerid, "tpLumberJackRunTimer") > 0)
			{
				SetPVarInt(playerid, "tpLumberJackRunTimer", GetPVarInt(playerid, "tpLumberJackRunTimer")-1);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPLUMBERJACKRUNTIMER);
			}
		}
	}
}
forward Lumbers(playerid);
public Lumbers(playerid)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
	SetPlayerAttachedObject(playerid, 9, 1463, 1,0.20,0.36,0.0,0.0,90.0, 0.0, 0.4, 0.3, 0.6);
	SendClientMessage(playerid, COLOR_WHITE,"use /load to load it in your vehicle!");
	Lumberedx[playerid] = 1;
	Lumbered[playerid] = 1;
	PlayerHasCrate[playerid] = 1;

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	return 1;
}
forward StopAnim1(playerid);
public StopAnim1(playerid)
{
	LumberJacking[playerid] = 0;
	Lumber1[playerid] += 1;
   	if(Lumber1[playerid] >= 1)
	{
	    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
		SetTimerEx("Lumbers", 2000, 0, "i", playerid);
		SetPVarInt(playerid, "LumberJackRun", 1);
		SetPVarInt(playerid, "tpLumberJackRunTimer", 7);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPLUMBERJACKRUNTIMER);
		return 1;
	}
	ClearAnimations(playerid);
	return 1;
}
forward garbagewait(playerid);
public garbagewait(playerid)
{
	SCM(playerid, COLOR_SYNTAX, "Garage Loaded: Proceed  to the next checkpoint.");
	//Dyuze(playerid, "Garbage Loaded", "Proceed to the next checkpoint.");
    TogglePlayerControllable(playerid, 1);
}

CancelActiveCheckpoint(playerid)
{
    if(pData[playerid][pDrivingTest])
	{
		SetVehicleToRespawn(pData[playerid][pTestVehicle]);
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	    RemovePlayerAttachedObject(playerid, 9);
    }

    DisablePlayerCheckpoint(playerid);

	pData[playerid][pCP] = CHECKPOINT_NONE;
	pData[playerid][pPizzas] = 0;
	pData[playerid][pSmuggleMats] = 0;
	pData[playerid][pSmuggleDrugs] = 0;
	pData[playerid][pDrivingTest] = 0;
	pData[playerid][pTestVehicle] = INVALID_VEHICLE_ID;
	pData[playerid][pTestCP] = 0;
    pData[playerid][pMiningRock] = 0;
    pData[playerid][pButcherMeat] = 0;
    pData[playerid][pDemolition] = 0;
    pData[playerid][pShipment] = -1;    
	pData[playerid][pWoodment] = -1;
    pData[playerid][pIllegalCargo] = -1;
    pData[playerid][pGarbage] = 0;
}

ReferralCheck(playerid)
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip FROM users WHERE uid = %i", pData[playerid][pReferralUID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_REWARD_REFERRER, playerid);
}
forward ReturnChatAnimation(playerid, text[]);
public ReturnChatAnimation(playerid, text[])
{
    if(pData[playerid][pLoopAnim] != 0)
	{
	    return 1;
	}
	switch(pData[playerid][pChatstyle])
	{
		case 0: ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,1,1,0,1,1,1);
		case 1: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKA",4.0,1,0,0,1,1,1);
		case 2: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKB", 4.0,1,0,0,1,1,1);
		case 3: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKD", 4.0,1,0,0,1,1,1);
		case 4: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKE", 4.0,1,0,0,1,1,1);
		case 5: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKF", 4.0,1,0,0,1,1,1);
		case 6: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKG", 4.0,1,0,0,1,1,1);
		case 7: ApplyAnimation(playerid, "GANGS", "PRTIAL_GNGTLKH", 4.0,1,0,0,1,1,1);
	}
	if(strlen(text) <= 16) SetTimerEx("TIMER_EndChatAnim",2000, 0, "i", playerid);
	else if(strlen(text) <= 32 && strlen(text) > 16) SetTimerEx("TIMER_EndChatAnim",3500, 0, "i", playerid);
	else if(strlen(text) <= 64 && strlen(text) > 32) SetTimerEx("TIMER_EndChatAnim",4000, 0, "i", playerid);
	else if(strlen(text) <= 96 && strlen(text) > 64) SetTimerEx("TIMER_EndChatAnim",4500, 0, "i", playerid);
	else if(strlen(text) <= 128 && strlen(text) > 96) SetTimerEx("TIMER_EndChatAnim",5000, 0, "i", playerid);
	else if(strlen(text) > 128) SetTimerEx("TIMER_EndChatAnim",5500, 0, "i", playerid);
	return 1;
}


forward TutorialTimer(playerid, stage);
public TutorialTimer(playerid, stage)
{
	if(pData[playerid][pLogged] && pData[playerid][pTutorial])
	{
		switch(stage)
		{

		    case 1:
		    {
		        ClearChat(playerid);
				
				pData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 500, false, "ii", playerid, 9);
				GameTextForPlayer(playerid, "~y~Saving your account", 500, 6);
		    }
		    case 2:
		    {
		        ClearChat(playerid);
				InterpolateCameraPos(playerid, 2521.352294, -1920.280395, 27.441589, 2521.352294, -1920.280395, 27.441589, 3000);
				InterpolateCameraLookAt(playerid, 2518.063476, -1923.948364, 26.587631, 2518.043457, -1923.930297, 26.587631, 3000);

				pData[playerid][pLevel] = 0;
				new str[3000] = "You are now looking at the department of motor vehicles. You'll need to come here to learn how to \n drive or else you'll be arrested for driving without a license! Once that is out of the way then you can \n work on getting a job and earning some money. In a moment you will see the trucking depot which is \n one of the jobs featured on our server. This job will net you a decent amount of cash to get you started \n so we recommend you take this one first.";
				ShowPlayerDialog(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FF0000} ** Manila Reality Roleplay - First Steps [2/8] ** ", str, "Close","" );
				
				pData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 4000, false, "ii", playerid, 3);
		    }
		    case 3:
		    {
		        ClearChat(playerid);

				pData[playerid][pLevel] = 0;
				InterpolateCameraPos(playerid, 1357.253784, -1978.884643, 94.597549, 1355.086791, -1982.071411, 95.309020, 4000);
				InterpolateCameraLookAt(playerid, 1360.018554, -1974.818725, 93.689758, 1357.854370, -1978.001464, 94.428131, 4000);

				new str[3000] = "As you start with level 1 you will begin with no upgrades. You will need to gain respect points in order \n to level up and gain upgrade points. Respect points are earned by playing at least 30 minutes of one hour \n until paycheck which occurs every hour at xx:00. Also as a level 1 your capacity for items is severly limited. \n You can increase your inventory's capacity by spending upgrade points on the inventory upgrade.\n";
				
				ShowPlayerDialog(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FF0000} ** Manila Reality Roleplay - Levels & upgrades [3/8] ** ", str, "Close","" );
				
				pData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 4000, false, "ii", playerid, 4);
		    }
		    case 4:
		    {
		        ClearChat(playerid);

				pData[playerid][pLevel] = 0;
				InterpolateCameraPos(playerid, 413.094116, -1490.559570, 76.513153, 413.094116, -1490.559570, 76.513153, 3000);
				InterpolateCameraLookAt(playerid, 408.353698, -1491.692749, 75.397621, 408.353698, -1491.692749, 75.397621, 3000);
				new str[3000] = "Factions are organized groups commited to certain tasks and are essentially the backbone of RP servers. \n Without them, who will keep crime out of the streets and save lives? You can join a faction by asking \n the leader how to join. Many factions have an application process which requires you to fill out an \n application on our website to join. Others may want you to roleplay with their members. Either way, being \n apart of a faction means good money.";

				ShowPlayerDialog(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FF0000} ** Manila Reality Roleplay - Factions [4/8] ** ", str, "Close","" );

				pData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 4000, false, "ii", playerid, 5);
		    }
		    case 5:
		    {
		        ClearChat(playerid);

				pData[playerid][pLevel] = 0;
				InterpolateCameraPos(playerid, 2477.171386, -1660.291870, 28.780147, 2477.171386, -1660.291870, 28.780147, 3000);
				InterpolateCameraLookAt(playerid, 2480.546142, -1663.452636, 26.877435, 2480.553710, -1663.459716, 26.902750, 3000);
		
				new str[3000] = "Gangs consist of members who partake in illegal activities. They engage in turf & point wars and \n control the illegal guns and drugs trade. You can join a gang or you can form your own if you have \n enough members. Gangs can be harsh towards newcomers so don't be going down to Grove Street \n and immediately asking them to join. Unlike factions, gangs do not require you to fill out any application. \n You can be invited to a gang by roleplaying with their members.";

				ShowPlayerDialog(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FF0000} ** Manila Reality Roleplay - Gangs [5/8] ** ", str, "Close","" );

				pData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 4000, false, "ii", playerid, 6);
		    }
		    case 6:
			{
			    ClearChat(playerid);

				pData[playerid][pLevel] = 0;
				InterpolateCameraPos(playerid, 2161.070312, -1206.205566, 31.703369, 2161.070312, -1206.205566, 31.703369, 3000);
				InterpolateCameraLookAt(playerid, 2157.770996, -1209.936523, 31.262535, 2157.770996, -1209.936523, 31.262535, 3000);

				new str[3000] = "Properties of all kinds can be purchased by you. After you've made enough money from working then you \n can purchase a vehicle at the dealership shown here. Vehicles can be upgraded with all sorts of components. \n Houses can be purchased and upgraded up to five levels. Each level expands your furniture & stash capacity \n to allow for the storage of more items! Houses are often accompanied by garages which are used as safe-keepin ";

				ShowPlayerDialog(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FF0000} ** Manila Reality Roleplay - Properties [6/8] ** ", str, "Close","" );


				pData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 4000, false, "ii", playerid, 7);
		    }

		    case 7:
		    {
		        ClearChat(playerid);

				pData[playerid][pLevel] = 0;
				InterpolateCameraPos(playerid, 1275.809936, -2036.343994, 113.512908, 1275.809936, -2036.343994, 113.512908, 3000);
				InterpolateCameraLookAt(playerid, 1271.297241, -2036.306884, 111.360298, 1271.297241, -2036.306884, 111.360298, 3000);

			
				new str[3000] = "As a roleplay server we have rules just as much as any other server. You're expected to follow them. \n 1) No deathmatching, e.g. killing without a proper reason. Don't ruin it for everyone else. \n 2) No metagaming. Metagaming is mixing OOC information in character. \n 3) No powergaming. Powergaming is commiting unrealistic acts and forcing actions upon others. \n 4) No hacking/cheating. We have zero tolerance for people who use cheats. Permanent ban. \n ";

				ShowPlayerDialog(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FF0000} ** Manila Reality Roleplay - Rules [7/8] ** ", str, "Close","" );
				pData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 4000, false, "ii", playerid, 8);
			}
			case 8:
			{
			    ClearChat(playerid);
				pData[playerid][pLevel] = 0;
				SetPlayerCameraPos(playerid, 668.145690, -1321.213256, 69.076896);
				SetPlayerCameraLookAt(playerid, 668.645629, -1321.218750, 69.070854);
				new str[3000] = "We're glad you've chosen to stick around and read this entire tutorial. Good for you! \n You'll have tons of fun here at Manila Reality Roleplay. There are many things to do once you \n set foot on our server's grounds. Meet new friends, join a faction, form a gang, and more \n The administration team wishes you good luck and have fun. You will spawn in just a second.";
				
				ShowPlayerDialog(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FF0000} ** Manila Reality Roleplay - Conclusion [8/8] ** ", str, "Close","" );

				pData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 4000, false, "ii", playerid, 9);
			}
			case 9:
			{
			    pData[playerid][pTutorial] = 0;
			   	pData[playerid][pSetup] = 0;
				new string[128];
				format(string,sizeof(string),"Messages:"WHITE" Hey guys! "RED"%s (%d)"WHITE" joined for the first time! Wish them a great stay!", GetPlayerNameEx(playerid), playerid);
				SMA(COLOR_RED, string);
				pData[playerid][pLevel] = 1;
				if(pData[playerid][pGender] == 1)
				{ 
					pData[playerid][pGender] = 1;
					SetScriptSkin(playerid, 72);
				}
				else if(pData[playerid][pGender] == 2)
				{ 
					pData[playerid][pGender] = 2;
					SetScriptSkin(playerid, 41);
				}
                
			    SetPlayerPos(playerid, 1214.9092,-1816.3643,17.9530);
			    SetPlayerFacingAngle(playerid, 266.9711);
			    SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid, 0);
			    SetCameraBehindPlayer(playerid);
			    StopAudioStreamForPlayer(playerid);
			    TogglePlayerControllable(playerid, 1);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET setup = 0, gender = %i, age = %i, skin = %i WHERE uid = %i", pData[playerid][pGender], pData[playerid][pAge], pData[playerid][pSkin], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SendClientMessage(playerid, COLOR_AQUA, "Welcome to Manila Reality Roleplay. Make sure to visit Discord.io/manilareality-rp for news and updates.");
				SendClientMessage(playerid, COLOR_AQUA, "Use the /locate command to point to locations of jobs, businesses, and common places.");

   				SendClientMessage(playerid, COLOR_AQUA, "The DMV has been marked on your map. Navigate to the marker to begin your drivers test.");
   				pData[playerid][pCP] = CHECKPOINT_MISC;
                SetPlayerCheckpoint(playerid, 2485.7791,-1955.6952,13.0990, 3.0);
			}
		}
	}
}


forward Timerx();
public Timerx()
{
    for(new i = GetPlayerPoolSize(); i > -1; i--)
	{
	    if(GetPlayerState(i) != PLAYER_STATE_DRIVER) continue;

		GetVehicleHealth(GetPlayerVehicleID(i), PlayerVehHP[i]);
	}
	return 1;
}
forward TIMER_EndChatAnim(playerid);
public TIMER_EndChatAnim(playerid)
{
	if(pData[playerid][pInjured] != 1)
		return ApplyAnimation(playerid, "CARRY", "crry_prtial", 4, 0, 0, 0, 0, 0, 1);
	return 1;
}
public OnPlayerStreamIn(playerid, forplayerid)
{
	/*if(pData[playerid][pTagType] != TAG_NONE)
	{
	    ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	}
	else
	{
	    ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
	}*/
	return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		static Float:hp, Float:hpa;
		GetVehicleHealth(GetPlayerVehicleID(playerid), hp);
		if(hp < PlayerVehHP[playerid])
		{
		    if(GetVehicleDistanceFromPoint(vehicleid, new_x, new_y, new_z) < 15.0)
		    {
				GetVehicleHealth(vehicleid, hpa);
				SetVehicleHealth(vehicleid, hpa - (PlayerVehHP[playerid] - hp));
		    }
		}
		PlayerVehHP[playerid] = hp;
	    return 1;
	}
    return 1;
}
SetPlayerSpecialTag(playerid, type)
{
	new
	    string[128];

	if(IsValidDynamic3DTextLabel(pData[playerid][pSpecialTag]))
	{
		DestroyDynamic3DTextLabel(pData[playerid][pSpecialTag]);
        pData[playerid][pSpecialTag] = Text3D:INVALID_3DTEXT_ID;
	}

    foreach(new i : Player)
	{
	    if(type == TAG_NORMAL)
		    ShowPlayerNameTagForPlayer(i, playerid, 1);
		else
		    ShowPlayerNameTagForPlayer(i, playerid, 0);
	}

	switch(type)
    {
		case TAG_ADMIN:
        {
            if(!strcmp(pData[playerid][pAdminName], "None", true))
	            format(string, sizeof(string), ""TEAL"Adminstrating - "WHITE"%s", GetAdminRank(playerid));
			else
			    format(string, sizeof(string), ""TEAL"%s\nAdminstrating - "WHITE"%s", pData[playerid][pAdminName], GetAdminRank(playerid));

			/*if(strlen(GetAdminDivisionFull(playerid)) > 0)
			{
				format(string, sizeof(string), "%s\n{00C2E0}%s", string, GetAdminDivisionFull(playerid));
			}*/
			pData[playerid][pSpecialTag] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.2, 20.0, .attachedplayer = playerid, .testlos = 1);
		}
		case TAG_HELPER:
		{
		    format(string, sizeof(string), ""TEAL"Moderating - "WHITE"%s", GetHelperRank(playerid));
			pData[playerid][pSpecialTag] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.2, 20.0, .attachedplayer = playerid, .testlos = 1);
		}
		case TAG_AFK:
		{
			format(string, sizeof(string), ""LIGHTRED"[AFK]"WHITE" %d second(s)", pData[playerid][pAFKTime]);
			pData[playerid][pSpecialTag] = CreateDynamic3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.2, 20.0, .attachedplayer = playerid, .testlos = 1);
		}
	}

	pData[playerid][pTagType] = type;
}
ShowCopClothingMenu(playerid)
{
	new models[sizeof(copClothing)];

	for(new i = 0; i < sizeof(copClothing); i ++) {
	    models[i] = copClothing[i][cModel];
	}

	ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_COPCLOTHING, "LEO Clothing", models, sizeof(models));
}
SendNewbieChatMessage(playerid, text[])
{
	new string[64];
	if((!isnull(pData[playerid][pCustomTitle]) && strcmp(pData[playerid][pCustomTitle], "None", true) != 0 && strcmp(pData[playerid][pCustomTitle], "0", true) != 0) && strcmp(pData[playerid][pCustomTitle], "NULL", true) != 0) {
	    new color;
		if(pData[playerid][pCustomTColor] == -1 || pData[playerid][pCustomTColor] == -256)
		{
	    	color = 0xC8C8C8FF;
		}
		else
		{
		    color = pData[playerid][pCustomTColor];
		}
	    format(string, sizeof(string), "{%06x}%s{7DAEFF} %s", color >>> 8, pData[playerid][pCustomTitle], GetRPName(playerid));

    }
	else if(pData[playerid][pAdmin] > 1)
	{
	    format(string, sizeof(string), ""SVRCLR"%s{7DAEFF} %s", GetColorARank(playerid), GetRPName(playerid));
	} else if(pData[playerid][pHelper] > 0) {
	    format(string, sizeof(string), "{33CCFF}%s{7DAEFF} %s", GetHelperRank(playerid), GetRPName(playerid));
    } else if(pData[playerid][pFormerAdmin]) {
	    format(string, sizeof(string), "Former Admin %s", GetRPName(playerid));
	} else if(pData[playerid][pDonator] > 0) {
		format(string, sizeof(string), "%s Donator %s", GetDonatorRank(pData[playerid][pDonator]), GetRPName(playerid));
	} else if(pData[playerid][pLevel] > 1) {
	    format(string, sizeof(string), "Level %i Player %s", pData[playerid][pLevel], GetRPName(playerid));
	} else {
	    format(string, sizeof(string), "Newbie %s", GetRPName(playerid));
	}

    foreach(new i : Player)
	{
	    if(!pData[i][pToggleNewbie])
	    {
	        if(strlen(text) > MAX_SPLIT_LENGTH)
	        {
				SM(i, COLOR_NEWBIE, "[?] %s: %.*s...", string, MAX_SPLIT_LENGTH, text);
				SM(i, COLOR_NEWBIE, "[?] %s: ...%s", string, text[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_NEWBIE, "[?] %s: %s", string, text);
			}
		}
	}

	if(pData[playerid][pAdmin] < 2 && pData[playerid][pHelper] == 0)
	{
 		pData[playerid][pLastNewbie] = gettime();
	}
}

SellWeapon(playerid, targetid, weaponid, price = 0)
{
	new cost;

	switch(weaponid)
	{
	    case 1: cost = 25;
	    case 2, 5..8, 15: cost = 1000;
	    case 22: cost = 2000;
	    case 23: cost = 2000;
	    case 24: cost = 5000;
	    case 25: cost = 2000;
	    case 29: cost = 3000;
	    case 28, 32: cost = 3000;
	    case 30: cost = 7000;
	    case 33: cost = 5000;
	    case 34: cost = 10000;
	    case 27: cost = 7000;
	}

    if(pData[playerid][pMaterials] >= cost)
    {
		pData[playerid][pMaterials] -= cost;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		if(targetid == playerid)
		{
		    SM(playerid, COLOR_AQUA, "You have crafted yourself a %s{CCFFFF}.", GetWeaponNameEx(weaponid));
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s puts together some materials and crafts themselves a %s.", GetRPName(playerid), GetWeaponNameEx(weaponid));
			
			new szString[528];
			format(szString, sizeof(szString), "%s have crafted yourself a %s.", GetRPName(playerid), GetWeaponNameEx(weaponid));
			SendDiscordMessage(36, szString);	
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s puts together some materials and crafts a %s for %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));
			SM(playerid, COLOR_AQUA, "You have sold %s a %s{CCFFFF} for $%i.", GetRPName(targetid), GetWeaponNameEx(weaponid), price);
			SM(targetid, COLOR_AQUA, "%s has sold you a %s{CCFFFF} for $%i.", GetRPName(playerid), GetWeaponNameEx(weaponid), price);

			GivePlayerCash(playerid, price);
			GivePlayerCash(targetid, -price);

			
			new szString[528];
			format(szString, sizeof(szString), "%s puts together some materials and crafts a %s for %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));
			SendDiscordMessage(36, szString);	

			//IncreaseJobSkill(playerid, JOB_ARMSDEALER);

	    	if(GetJobLevel(playerid, JOB_ARMSDEALER) < 5)
	    	{
	        	if(pData[playerid][pWeaponSkill] < 99) 
				{
	        		SM(playerid, COLOR_YELLOW, "You need to sell %i more weapons in order to level up.", 99 - pData[playerid][pWeaponSkill]);
	        	} 
				else if(pData[playerid][pWeaponSkill] < 199) 
				{
	        		SM(playerid, COLOR_YELLOW, "You need to sell %i more weapons in order to level up.", 199 - pData[playerid][pWeaponSkill]);
	        	} 
				else if(pData[playerid][pWeaponSkill] < 299) 
				{
	        		SM(playerid, COLOR_YELLOW, "You need to sell %i more weapons in order to level up.", 299 - pData[playerid][pWeaponSkill]);
            	} 
				else if(pData[playerid][pWeaponSkill] < 399) 
				{
	        		SM(playerid, COLOR_YELLOW, "You need to sell %i more weapons in order to level up.", 399 - pData[playerid][pWeaponSkill]);
				}
			}
			else
			{
				//
			}

	    	if(GetJobLevel(playerid, JOB_ARMSDEALER) == 1) 
			{
				if(weaponid == 5 || weaponid == 6 || weaponid == 2 || weaponid == 7 || weaponid == 8 || weaponid == 15 || weaponid == 1)
				{
					IncreaseJobSkill(playerid, JOB_ARMSDEALER);
				}
			}
			
			if(GetJobLevel(playerid, JOB_ARMSDEALER) == 2)
			{
				if(weaponid == 22 || weaponid == 23 || weaponid == 25)
				{
					IncreaseJobSkill(playerid, JOB_ARMSDEALER);
				}
			}
			
			if(GetJobLevel(playerid, JOB_ARMSDEALER) == 3)
			{
				if(weaponid == 28 || weaponid == 29 || weaponid == 32)
				{
					IncreaseJobSkill(playerid, JOB_ARMSDEALER);
				}
			}
			
			if(GetJobLevel(playerid, JOB_ARMSDEALER) == 4)
			{
				if(weaponid == 24 || weaponid == 33)
				{
					IncreaseJobSkill(playerid, JOB_ARMSDEALER);
				}
			}
			
			if(GetJobLevel(playerid, JOB_ARMSDEALER) == 5)
			{
				if(weaponid == 30)
				{
					IncreaseJobSkill(playerid, JOB_ARMSDEALER);
				}
			}

		}

		GiveWeapon(targetid, weaponid);
		return 1;
	}
	else
	{
	    SCM(targetid, COLOR_SYNTAX, "That player has ran out of materials.");
	}

	return 0;
}

Namechange(playerid, oldname[], newname[])
{
    for(new i = 0; i < MAX_HOUSES; i ++)
    {
        if(HouseInfo[i][hExists] && !strcmp(HouseInfo[i][hOwner], oldname, false))
        {
            strcpy(HouseInfo[i][hOwner], newname, MAX_PLAYER_NAME);
            ReloadHouse(i);
        }
    }

    for(new i = 0; i < MAX_GARAGES; i ++)
    {
        if(GarageInfo[i][gExists] && !strcmp(GarageInfo[i][gOwner], oldname, false))
        {
            strcpy(GarageInfo[i][gOwner], newname, MAX_PLAYER_NAME);
            ReloadGarage(i);
        }
    }

    for(new i = 0; i < MAX_BUSINESSES; i ++)
    {
        if(BusinessInfo[i][bExists] && !strcmp(BusinessInfo[i][bOwner], oldname, false))
        {
            strcpy(BusinessInfo[i][bOwner], newname, MAX_PLAYER_NAME);
            ReloadBusiness(i);
        }
    }

    for(new i = 0; i < MAX_LANDS; i++)
	{
	    if(LandInfo[i][lExists] && !strcmp(LandInfo[i][lOwner], oldname, false))
	    {
	        strcpy(LandInfo[i][lOwner], newname, MAX_PLAYER_NAME);
	        ReloadLand(i);
	    }
	}


    for(new i = 0; i < MAX_VEHICLES; i ++)
    {
        if(IsValidVehicle(i) && VehicleInfo[i][vID] && !strcmp(VehicleInfo[i][vOwner], oldname, false))
        {
            strcpy(VehicleInfo[i][vOwner], newname, MAX_PLAYER_NAME);
        }
    }

	// Updating queries.
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET owner = '%s' WHERE owner = '%s'", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET owner = '%s' WHERE owner = '%s'", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET owner = '%s' WHERE owner = '%s'", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET owner = '%s' WHERE owner = '%s'", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);
	
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET owner = '%s' WHERE owner = '%s'", newname, oldname);
    mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET username = '%s' WHERE uid = %i", newname, pData[playerid][pID]);
    mysql_tquery(connectionID, queryBuffer);
	

	strcpy(pData[playerid][pUsername], newname, MAX_PLAYER_NAME);

    SetPlayerName(playerid, newname);
    SavePlayerVariables(playerid);
}

IsABoat(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 430, 446, 452..454, 472, 473, 484, 493, 595: return 1;
    }

    return 0;
}
IsAGarbageCar(carid)
{
	for(new v =0; v < sizeof(garbageVehicles); v++){
		if(carid == garbageVehicles[v]) return 1;
	}
	if(VehicleInfo[carid][vJob] == JOB_GARBAGEMAN) return 1;
	return 0;
}

IsLawEnforcement(playerid)
{
	return GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_SHERIFF || GetFactionType(playerid) == FACTION_FEDERAL;
}
IsTacoVendor(playerid)
{
	return GetFactionType(playerid) == FACTION_TACO;
}
IsMechanic(playerid)
{
	return GetFactionType(playerid) == FACTION_MECHANIC;
}
IsEms(playerid)
{
	return GetFactionType(playerid) == FACTION_DOC || GetFactionType(playerid) == FACTION_MEDIC;
}

IsFaction(playerid)
{
	return GetFactionType(playerid) == FACTION_POLICE || GetFactionType(playerid) == FACTION_SHERIFF || GetFactionType(playerid) == FACTION_TACO || GetFactionType(playerid) == FACTION_FEDERAL || GetFactionType(playerid) == FACTION_DOC || GetFactionType(playerid) == FACTION_MEDIC || GetFactionType(playerid) == FACTION_GOVERNMENT;
}

IsSheriff(playerid)
{
	return GetFactionType(playerid) == FACTION_SHERIFF;
}
IsPlayerBeingFound(playerid)
{
	foreach(new i : Player)
	{
	    if(pData[i][pFindPlayer] == playerid && pData[i][pFindTime] > 0)
	    {
	        return 1;
		}
	}

	return 0;
}
IsGateModel(modelid)
{
    switch(modelid)
    {
        case 8957, 7891, 3037, 19861, 19864, 19912, 971, 975, 980, 985, 19870, 988:
        {
            return 1;
        }
    }

	return 0;
}
IsGateObject(objectid)
{
    new
		modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID);

	if((modelid) && IsGateModel(modelid))
	{
	    return 1;
	}

	return 0;
}

IsDoorObject(objectid)
{
	new
		modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_MODEL_ID);

	if((modelid) && !IsGateObject(objectid))
	{
		for(new i = 0; i < sizeof(furnitureArray); i ++)
		{
	    	if(!strcmp(furnitureArray[i][fCategory], "Doors & Gates") && furnitureArray[i][fModel] == modelid)
	    	{
		        return 1;
			}
		}
	}

	return 0;
}

RemoveFaction(factionid)
{
	foreach(new i : Player)
	{
	    if(pData[i][pFaction] == factionid)
	    {
			ResetPlayerWeaponsEx(i);
	        SM(i, COLOR_LIGHTRED, "The faction you were apart of has been deleted by an administrator.");
            SetPlayerSkin(i, 230);

	        pData[i][pFaction] = -1;
	        pData[i][pFactionRank] = 0;
	        pData[i][pDivision] = -1;
	        pData[i][pDuty] = 0;
	    }
	}
	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
		if(LockerInfo[i][lExists] && LockerInfo[i][lFaction] == factionid)
		{
		    DestroyDynamic3DTextLabel(LockerInfo[i][lText]);
		    DestroyDynamicPickup(LockerInfo[i][lPickup]);
		    LockerInfo[i][lExists] = 0;
		}
	}
	DestroyDynamic3DTextLabel(FactionInfo[factionid][fText]);
	DestroyDynamicPickup(FactionInfo[factionid][fPickup]);

    FactionInfo[factionid][fName] = 0;
    FactionInfo[factionid][fLeader] = 0;
	FactionInfo[factionid][fType] = FACTION_NONE;
	FactionInfo[factionid][fColor] = 0;
	FactionInfo[factionid][fRankCount] = 0;
    FactionInfo[factionid][fLockerX] = 0.0;
    FactionInfo[factionid][fLockerY] = 0.0;
    FactionInfo[factionid][fLockerZ] = 0.0;
    FactionInfo[factionid][fLockerInterior] = 0;
    FactionInfo[factionid][fLockerWorld] = 0;
    FactionInfo[factionid][fTurfTokens] = 0;
    FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
    FactionInfo[factionid][fPickup] = -1;

    for(new i = 0; i < MAX_FACTION_RANKS; i ++)
    {
        strcpy(FactionRanks[factionid][i], "Unspecified", 32);
        FactionInfo[factionid][fPaycheck][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factions WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionranks WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionskins WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionpay WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM divisions WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionlockers WHERE factionid = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);
	
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE faction = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);
}

GetFactionSkinCount(factionid)
{
	new count;

	for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	{
	    if(FactionInfo[factionid][fSkins][i] != 0)
	    {
	        count++;
		}
	}

	return count;
}

GetFactionType(playerid)
{
	if(pData[playerid][pFaction] >= 0)
	{
	    return FactionInfo[pData[playerid][pFaction]][fType];
	}

	return FACTION_NONE;
}

SetupFaction(factionid, name[], type)
{
    strcpy(FactionInfo[factionid][fName], name, 48);
   	strcpy(FactionInfo[factionid][fShortName], "None", 24);
	strcpy(FactionInfo[factionid][fLeader], "Pending", MAX_PLAYER_NAME);

    FactionInfo[factionid][fType] = type;
    FactionInfo[factionid][fColor] = 0xFFFFFF00;
    FactionInfo[factionid][fRankCount] = 6;
    FactionInfo[factionid][fLockerX] = 0.0;
    FactionInfo[factionid][fLockerY] = 0.0;
    FactionInfo[factionid][fLockerZ] = 0.0;
    FactionInfo[factionid][fLockerInterior] = 0;
    FactionInfo[factionid][fLockerWorld] = 0;
    FactionInfo[factionid][fTurfTokens] = 0;
    FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
    FactionInfo[factionid][fPickup] = -1;

    for(new i = 0; i < MAX_FACTION_RANKS; i ++)
    {
        strcpy(FactionRanks[factionid][i], "Unspecified", 32);
        FactionInfo[factionid][fPaycheck][i] = 0;
	}
	for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	{
	    FactionInfo[factionid][fSkins][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factions (id, name, type) VALUES(%i, '%e', %i)", factionid, name, type);
	mysql_tquery(connectionID, queryBuffer);
}

SetupGang(gangid, name[])
{
	strcpy(GangInfo[gangid][gName], name, 32);
	strcpy(GangInfo[gangid][gMOTD], "None", 128);
	strcpy(GangInfo[gangid][gLeader], "Pending", MAX_PLAYER_NAME);

	GangInfo[gangid][gSetup] = 1;
	GangInfo[gangid][gColor] = 0xFFFFFF00;
	GangInfo[gangid][gStrikes] = 0;
	GangInfo[gangid][gLevel] = 1;
	GangInfo[gangid][gPoints] = 0;
	GangInfo[gangid][gTurfTokens] = 0;
	GangInfo[gangid][gStashX] = 0.0;
	GangInfo[gangid][gStashY] = 0.0;
	GangInfo[gangid][gStashZ] = 0.0;
	GangInfo[gangid][gStashInterior] = 0;
	GangInfo[gangid][gStashWorld] = 0;
	GangInfo[gangid][gCash] = 0;
	GangInfo[gangid][gMaterials] = 0;
	GangInfo[gangid][gPot] = 0;
	GangInfo[gangid][gCrack] = 0;
	GangInfo[gangid][gMeth] = 0;
	GangInfo[gangid][gPainkillers] = 0;
	GangInfo[gangid][gHPAmmo] = 0;
	GangInfo[gangid][gPoisonAmmo] = 0;
	GangInfo[gangid][gFMJAmmo] = 0;
    GangInfo[gangid][gArmsDealer] = 0;
    GangInfo[gangid][gDrugDealer] = 0;
    GangInfo[gangid][gArmsX] = 0.0;
    GangInfo[gangid][gArmsY] = 0.0;
    GangInfo[gangid][gArmsZ] = 0.0;
    GangInfo[gangid][gDrugX] = 0.0;
    GangInfo[gangid][gDrugY] = 0.0;
    GangInfo[gangid][gDrugZ] = 0.0;
    GangInfo[gangid][gArmsWorld] = 0;
    GangInfo[gangid][gDrugWorld] = 0;
    GangInfo[gangid][gDrugPot] = 0;
    GangInfo[gangid][gDrugCrack] = 0;
    GangInfo[gangid][gDrugMeth] = 0;
    GangInfo[gangid][gArmsMaterials] = 0;
    GangInfo[gangid][gAlliance] = -1;
    GangInfo[gangid][gArmsHPAmmo] = 0;
    GangInfo[gangid][gArmsPoisonAmmo] = 0;
    GangInfo[gangid][gArmsFMJAmmo] = 0;
    GangInfo[gangid][gPickup] = -1;
    GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
    GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;

	for(new i = 0; i < 7; i ++)
    {
        strcpy(GangRanks[gangid][i], "Unspecified", 32);
	}

	for(new i = 0; i < 12; i ++)
	{
	    if(i < 3)
	    {
	        GangInfo[gangid][gDrugPrices][i] = 0;
		}

		GangInfo[gangid][gArmsPrices][i] = 0;
	}

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
        GangInfo[gangid][gSkins][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangs (id, name) VALUES(%i, '%e')", gangid, name);
	mysql_tquery(connectionID, queryBuffer);
}

AddPointMoney(type, amount)
{
	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && PointInfo[i][pType] == type)
	    {
	        if(PointInfo[i][pCapturedGang] >= 0)
	        {
	            amount /= 2;
	            GangInfo[PointInfo[i][pCapturedGang]][gCash] += amount;

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[PointInfo[i][pCapturedGang]][gCash], PointInfo[i][pCapturedGang]);
	        	mysql_tquery(connectionID, queryBuffer);
	        }

			PointInfo[i][pProfits] += amount;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET profits = %i WHERE id = %i", PointInfo[i][pProfits], i);
	 		mysql_tquery(connectionID, queryBuffer);
	    }
    }
}

ReloadPoint(pointid)
{
    if(PointInfo[pointid][pExists])
    {
        new string[128], name[32] = "None";

        DestroyDynamic3DTextLabel(PointInfo[pointid][pText]);
        DestroyDynamicPickup(PointInfo[pointid][pPickup]);

        if(PointInfo[pointid][pCapturedGang] >= 0)
        {
            strcpy(name, GangInfo[PointInfo[pointid][pCapturedGang]][gName]);
        }

        if(PointInfo[pointid][pTime] > 0)
        	format(string, sizeof(string), "["WHITE"%s{FFFF00}]\n"WHITE"Owned by: %s\nAvailable in %i hours.", PointInfo[pointid][pName], name, PointInfo[pointid][pTime]);
		else
		    format(string, sizeof(string), "["WHITE"%s{FFFF00}]\n"WHITE"Owned by: %s\nAvailable to capture!", PointInfo[pointid][pName], name);

		PointInfo[pointid][pText] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], 10.0, .worldid = PointInfo[pointid][pPointWorld], .interiorid = PointInfo[pointid][pPointInterior]);
        PointInfo[pointid][pPickup] = CreateDynamicPickup(1254, 1, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], .worldid = PointInfo[pointid][pPointWorld], .interiorid = PointInfo[pointid][pPointInterior]);
	}
}

ReloadGang(gangid)
{
	if(GangInfo[gangid][gSetup])
	{
	    new string[128];

	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][0]);
	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][1]);
	    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][2]);
	    DestroyDynamicPickup(GangInfo[gangid][gPickup]);
	    DestroyActor(GangInfo[gangid][gActors][0]);
	    DestroyActor(GangInfo[gangid][gActors][1]);

	    if(GangInfo[gangid][gStashX] != 0.0 && GangInfo[gangid][gStashY] != 0.0 && GangInfo[gangid][gStashZ] != 0.0)
	    {
	        format(string, sizeof(string), "[(Level %i) Gang Stash]\n"WHITE"Owned by: %s", GangInfo[gangid][gLevel], GangInfo[gangid][gName]);

            GangInfo[gangid][gText][0] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, GangInfo[gangid][gStashX], GangInfo[gangid][gStashY], GangInfo[gangid][gStashZ], 10.0, .worldid = GangInfo[gangid][gStashWorld], .interiorid = GangInfo[gangid][gStashInterior]);
            GangInfo[gangid][gPickup] = CreateDynamicPickup(1275, 1, GangInfo[gangid][gStashX], GangInfo[gangid][gStashY], GangInfo[gangid][gStashZ], .worldid = GangInfo[gangid][gStashWorld], .interiorid = GangInfo[gangid][gStashInterior]);
	    }
	    /*if(GangInfo[gangid][gArmsDealer] && GangInfo[gangid][gArmsX] != 0.0 && GangInfo[gangid][gArmsY] != 0.0 && GangInfo[gangid][gArmsZ] != 0.0)
	    {
	        format(string, sizeof(string), "[Arms Dealer]\n"WHITE"Owned by: %s\nType /armsdealer for more info.", GangInfo[gangid][gName]);

	        GangInfo[gangid][gActors][0] = CreateActor(179, GangInfo[gangid][gArmsX], GangInfo[gangid][gArmsY], GangInfo[gangid][gArmsZ], GangInfo[gangid][gArmsA]);
			GangInfo[gangid][gText][1] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, GangInfo[gangid][gArmsX], GangInfo[gangid][gArmsY], GangInfo[gangid][gArmsZ] + 0.3, 10.0, .worldid = GangInfo[gangid][gArmsWorld]);

		    SetActorVirtualWorld(GangInfo[gangid][gActors][0], GangInfo[gangid][gArmsWorld]);
		}
		if(GangInfo[gangid][gDrugDealer] && GangInfo[gangid][gDrugX] != 0.0 && GangInfo[gangid][gDrugY] != 0.0 && GangInfo[gangid][gDrugZ] != 0.0)
	    {
	        format(string, sizeof(string), "[Drug Dealer]\n"WHITE"Owned by: %s\nType /drugdealer for more info.", GangInfo[gangid][gName]);

	        GangInfo[gangid][gActors][1] = CreateActor(28, GangInfo[gangid][gDrugX], GangInfo[gangid][gDrugY], GangInfo[gangid][gDrugZ], GangInfo[gangid][gDrugA]);
            GangInfo[gangid][gText][2] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, GangInfo[gangid][gDrugX], GangInfo[gangid][gDrugY], GangInfo[gangid][gDrugZ] + 0.3, 10.0, .worldid = GangInfo[gangid][gDrugWorld]);

	        SetActorVirtualWorld(GangInfo[gangid][gActors][1], GangInfo[gangid][gDrugWorld]);
		}*/
	}
}

GiveGangPoints(gangid, amount)
{
	if(GangInfo[gangid][gSetup])
	{
        GangInfo[gangid][gPoints] = GangInfo[gangid][gPoints] + amount;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET points = %i WHERE id = %i", GangInfo[gangid][gPoints], gangid);
        mysql_tquery(connectionID, queryBuffer);
	}
}

RemoveGang(gangid)
{
	if(GangInfo[gangid][gAlliance] >= 0)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", gangid);
	    mysql_tquery(connectionID, queryBuffer);

	    GangInfo[GangInfo[gangid][gAlliance]][gAlliance] = -1;
	}
	foreach(new i : Player)
	{
	    if(pData[i][pGang] == gangid)
	    {
	        SM(i, COLOR_LIGHTRED, "The gang you were apart of has been deleted by an administrator.");
	        pData[i][pGang] = -1;
	        pData[i][pGangRank] = 0;
	    }
	}

	DestroyDynamic3DTextLabel(GangInfo[gangid][gText][0]);
    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][1]);
    DestroyDynamic3DTextLabel(GangInfo[gangid][gText][2]);
    DestroyDynamicPickup(GangInfo[gangid][gPickup]);
    DestroyActor(GangInfo[gangid][gActors][0]);
    DestroyActor(GangInfo[gangid][gActors][1]);

    GangInfo[gangid][gSetup] = 0;
    GangInfo[gangid][gName] = 0;
    GangInfo[gangid][gMOTD] = 0;
    GangInfo[gangid][gLeader] = 0;
	GangInfo[gangid][gColor] = 0;
	GangInfo[gangid][gStrikes] = 0;
	GangInfo[gangid][gLevel] = 0;
	GangInfo[gangid][gPoints] = 0;
	GangInfo[gangid][gTurfTokens] = 0;
	GangInfo[gangid][gStashX] = 0.0;
	GangInfo[gangid][gStashY] = 0.0;
	GangInfo[gangid][gStashZ] = 0.0;
	GangInfo[gangid][gStashInterior] = 0;
	GangInfo[gangid][gStashWorld] = 0;
	GangInfo[gangid][gCash] = 0;
	GangInfo[gangid][gMaterials] = 0;
	GangInfo[gangid][gPot] = 0;
	GangInfo[gangid][gCrack] = 0;
	GangInfo[gangid][gMeth] = 0;
	GangInfo[gangid][gPainkillers] = 0;
	GangInfo[gangid][gArmsDealer] = 0;
    GangInfo[gangid][gDrugDealer] = 0;
    GangInfo[gangid][gArmsX] = 0.0;
    GangInfo[gangid][gArmsY] = 0.0;
    GangInfo[gangid][gArmsZ] = 0.0;
    GangInfo[gangid][gDrugX] = 0.0;
    GangInfo[gangid][gDrugY] = 0.0;
    GangInfo[gangid][gDrugZ] = 0.0;
    GangInfo[gangid][gArmsWorld] = 0;
    GangInfo[gangid][gDrugWorld] = 0;
    GangInfo[gangid][gDrugPot] = 0;
    GangInfo[gangid][gDrugCrack] = 0;
    GangInfo[gangid][gDrugMeth] = 0;
    GangInfo[gangid][gArmsMaterials] = 0;
    GangInfo[gangid][gAlliance] = -1;
    GangInfo[gangid][gArmsHPAmmo] = 0;
    GangInfo[gangid][gArmsPoisonAmmo] = 0;
    GangInfo[gangid][gArmsFMJAmmo] = 0;
    GangInfo[gangid][gPickup] = -1;
    GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
    GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
    GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;

    for(new i = 0; i < 7; i ++)
    {
        strcpy(GangRanks[gangid][i], "Unspecified", 32);
	}

	for(new i = 0; i < 14; i ++)
	{
		GangInfo[gangid][gWeapons][i] = 0;
	}

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
	    GangInfo[gangid][gSkins][i] = 0;
	}

	for(new i = 0; i < MAX_POINTS; i ++)
	{
		if(PointInfo[i][pExists] && PointInfo[i][pCapturedGang] == gangid)
		{
		    PointInfo[i][pCapturedGang] = -1;
		}
	}

	for(new i = 0; i < MAX_TURFS; i ++)
	{
		if(TurfInfo[i][tExists] && TurfInfo[i][tCapturedGang] == gangid)
		{
		    TurfInfo[i][tCapturedGang] = -1;
		}
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangs WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangranks WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM gangskins WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = -1 WHERE capturedgang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedgang = -1 WHERE capturedgang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE gang = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);
}

GetGangVehicles(gangid)
{
	new count;

    for(new i = 0; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == gangid)
	    {
	        count++;
		}
	}

	return count;
}

GetGangVehicleLimit(gangid)
{
	switch(GangInfo[gangid][gLevel])
	{
	    case 1: return 6;
	    case 2: return 8;
	    case 3: return 12;
	}

	return 0;
}

GetGangMemberLimit(gangid)
{
	switch(GangInfo[gangid][gLevel])
	{
	    case 1: return 20;
	    case 2: return 40;
	    case 3: return 70;
	}

	return 0;
}

GetGangSkinCount(gangid)
{
	new count;

	for(new i = 0; i < MAX_GANG_SKINS; i ++)
	{
	    if(GangInfo[gangid][gSkins][i] != 0)
	    {
	        count++;
		}
	}

	return count;
}
GetSpawnedVehicles(playerid)
{
	new count;

    for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsVehicleOwner(playerid, i))
	    {
	        count++;
		}
	}

	return count;
}
GetVehicleGarage(vehicleid)
{
	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists] && GarageInfo[i][gWorld] == GetVehicleVirtualWorld(vehicleid))
	    {
	        return i;
		}
	}

	return -1;
}

GetNearbyVehicle(playerid)
{
	new Float:x, Float:y, Float:z;

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsVehicleStreamedIn(i, playerid))
	    {
	        GetVehiclePos(i, x, y, z);

	        if(IsPlayerInRangeOfPoint(playerid, 3.7, x, y, z))
	        {
	            return i;
			}
		}
	}

	return INVALID_VEHICLE_ID;
}

IsVehicleOwner(playerid, vehicleid)
{
	return (VehicleInfo[vehicleid][vOwnerID] == pData[playerid][pID]) || (VehicleInfo[vehicleid][vOwnerID] > 0 && pData[playerid][pAdminDuty]);
}

SetVehicleNeon(vehicleid, modelid)
{
	if(18647 <= modelid <= 18652)
	{
	    if(VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
			DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
	    }

	    VehicleInfo[vehicleid][vNeon] = modelid;
	    VehicleInfo[vehicleid][vNeonEnabled] = (modelid > 0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neon = %i, neonenabled = 1 WHERE id = %i", VehicleInfo[vehicleid][vNeon], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadVehicleNeon(vehicleid);
	}
}

ReloadVehicleNeon(vehicleid)
{
	if(VehicleInfo[vehicleid][vID] > 0)
	{
	    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
	    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);

	    if(VehicleInfo[vehicleid][vNeon] && VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        new
				Float:x,
				Float:y,
				Float:z;

			GetVehicleModelInfo(VehicleInfo[vehicleid][vModel], VEHICLE_MODEL_INFO_SIZE, x, y, z);

			VehicleInfo[vehicleid][vObjects][0] = CreateDynamicObject(VehicleInfo[vehicleid][vNeon], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			VehicleInfo[vehicleid][vObjects][1] = CreateDynamicObject(VehicleInfo[vehicleid][vNeon], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);

			AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObjects][0], vehicleid, -x / 2.8, 0.0, -0.6, 0.0, 0.0, 0.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][vObjects][1], vehicleid, x / 2.8, 0.0, -0.6, 0.0, 0.0, 0.0);
		}
	}
}

ResyncVehicle(vehicleid)
{
	new
		worldid = GetVehicleVirtualWorld(vehicleid);
	SetVehicleVirtualWorld(vehicleid, cellmax);
	SetVehicleVirtualWorld(vehicleid, worldid);
}

SaveVehicleModifications(vehicleid)
{
	for(new i = 0; i < 14; i ++)
	{
	    VehicleInfo[vehicleid][vMods][i] = GetVehicleComponentInSlot(vehicleid, i);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_%i = %i WHERE id = %i", i + 1, VehicleInfo[vehicleid][vMods][i], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

ReloadVehicle(vehicleid)
{
    if(VehicleInfo[vehicleid][vPaintjob] >= 0)
    {
        ChangeVehiclePaintjob(vehicleid, VehicleInfo[vehicleid][vPaintjob]);
    }
    if(VehicleInfo[vehicleid][vNeon] && VehicleInfo[vehicleid][vNeonEnabled])
	{
		ReloadVehicleNeon(vehicleid);
    }

	for(new i = 0; i < 14; i ++)
	{
	    if(VehicleInfo[vehicleid][vMods][i] >= 1000)
	    {
	        AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vMods][i]);
		}
	}
	
    LinkVehicleToInterior(vehicleid, VehicleInfo[vehicleid][vInterior]);
    SetVehicleVirtualWorld(vehicleid, VehicleInfo[vehicleid][vWorld]);
    SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
    SetVehicleParams(vehicleid, VEHICLE_DOORS, VehicleInfo[vehicleid][vLocked]);
}

DespawnVehicle(vehicleid, bool:save = true)
{
	if(VehicleInfo[vehicleid][vID] > 0)
	{
	    if(VehicleInfo[vehicleid][vNeonEnabled])
	    {
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
	        DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
	    }

		if(save) {
		    new
				Float:health;

		    GetVehicleHealth(vehicleid, health);
		    SaveVehicleModifications(vehicleid);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET fuel = %i, health = '%f' WHERE id = %i", vehicleFuel[vehicleid], health, VehicleInfo[vehicleid][vID]);
	    	mysql_tquery(connectionID, queryBuffer);
	    }

		DestroyVehicleEx(vehicleid);
		ResetVehicle(vehicleid);
	}
}

ResetVehicle(vehicleid)
{
	strcpy(VehicleInfo[vehicleid][vPlate], "UNREG", 32);

	if(VehicleInfo[vehicleid][vTimer] >= 0)
	{
	    KillTimer(VehicleInfo[vehicleid][vTimer]);
	}
	VehicleGoods[vehicleid] = -1;
    VehicleInfo[vehicleid][vID] = 0;
	VehicleInfo[vehicleid][vOwnerID] = 0;
	VehicleInfo[vehicleid][vOwner] = 0;
	VehicleInfo[vehicleid][vModel] = 0;
	VehicleInfo[vehicleid][vPrice] = 0;
	VehicleInfo[vehicleid][vTickets] = 0;
	VehicleInfo[vehicleid][vLocked] = 0;
	VehicleInfo[vehicleid][vStolen] = 0;
	VehicleInfo[vehicleid][vHealth] = 1000.0;
	VehicleInfo[vehicleid][vPosX] = 0.0;
	VehicleInfo[vehicleid][vPosY] = 0.0;
	VehicleInfo[vehicleid][vPosZ] = 0.0;
	VehicleInfo[vehicleid][vPosA] = 0.0;
	VehicleInfo[vehicleid][vColor1] = 0;
	VehicleInfo[vehicleid][vColor2] = 0;
	VehicleInfo[vehicleid][vPaintjob] = -1;
	VehicleInfo[vehicleid][vInterior] = 0;
	VehicleInfo[vehicleid][vWorld] = 0;
	VehicleInfo[vehicleid][vCash] = 0;
	VehicleInfo[vehicleid][vMaterials] = 0;
	VehicleInfo[vehicleid][vPot] = 0;
	VehicleInfo[vehicleid][vCrack] = 0;
	VehicleInfo[vehicleid][vMeth] = 0;
	VehicleInfo[vehicleid][vPainkillers] = 0;
    VehicleInfo[vehicleid][vWeapons][0] = 0;
    VehicleInfo[vehicleid][vWeapons][1] = 0;
    VehicleInfo[vehicleid][vWeapons][2] = 0;
    VehicleInfo[vehicleid][vWeapons][3] = 0;
    VehicleInfo[vehicleid][vWeapons][4] = 0;
    VehicleInfo[vehicleid][vWeapons][5] = 0;
	VehicleInfo[vehicleid][vHPAmmo] = 0;
	VehicleInfo[vehicleid][vPoisonAmmo] = 0;
	VehicleInfo[vehicleid][vFMJAmmo] = 0;
    VehicleInfo[vehicleid][vGang] = -1;
	VehicleInfo[vehicleid][vFactionType] = FACTION_NONE;
	VehicleInfo[vehicleid][vJob] = JOB_NONE;
	VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
	VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
	VehicleInfo[vehicleid][vTimer] = -1;

	for(new i = 0; i < 14; i ++)
	{
	    VehicleInfo[vehicleid][vMods][i] = 0;
	}
	ResetVehicleObjects(vehicleid);
}

IsPointInLand(landid, Float:x, Float:y)
{
	if((LandInfo[landid][lMinX] <= x <= LandInfo[landid][lMaxX]) && (LandInfo[landid][lMinY] <= y <= LandInfo[landid][lMaxY]))
	{
	    return 1;
	}

	return 0;
}

HasLandPerms(playerid, landid)
{
	return IsLandOwner(playerid, landid) || pData[playerid][pLandPerms] == landid;
}

IsLandOwner(playerid, landid)
{
	return (LandInfo[landid][lOwnerID] == pData[playerid][pID]) || (LandInfo[landid][lOwnerID] > 0 && pData[playerid][pAdminDuty]);
}

SetLandOwner(landid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(LandInfo[landid][lOwner], "Nobody", MAX_PLAYER_NAME);
	    LandInfo[landid][lOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, LandInfo[landid][lOwner], MAX_PLAYER_NAME);
	    LandInfo[landid][lOwnerID] = pData[playerid][pID];
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET ownerid = %i, owner = '%s' WHERE id = %i", LandInfo[landid][lOwnerID], LandInfo[landid][lOwner], LandInfo[landid][lID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadLand(landid);
}

GetLandObjectID(sql_id)
{
    for(new i = 0; i <= Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i ++)
    {
        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID) == sql_id)
        {
            return i;
		}
	}

	return INVALID_OBJECT_ID;
}

GetLandObjectCapacity(level)
{
	switch(level)
	{
	    case 1: return 300;
	    case 2: return 500;
	    case 3: return 1000;
	    case 4: return 500;
	    case 5: return 1000;
	}

	return 0;
}

RemoveLandObject(objectid)
{
    if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_LAND)
	{
 		new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteLandObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM landobjects WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

DeleteLandObject(objectid)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_LAND)
	{
    	new Text3D:textid = Text3D:Streamer_GetExtraInt(objectid, E_OBJECT_3DTEXT_ID);

        if(IsValidDynamic3DTextLabel(textid))
        {
            DestroyDynamic3DTextLabel(textid);
        }

        DestroyDynamicObject(objectid);
	}
}

RemoveAllLandObjects(landid)
{
    if(LandInfo[landid][lExists])
	{
	    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[landid][lID])
	        {
             	DeleteLandObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

ReloadLandObject(objectid, labels)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_LAND)
	{
	    new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteLandObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM landobjects WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, labels);
	}
}

ReloadAllLandObjects(landid)
{
    if(LandInfo[landid][lExists])
	{
	    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == LandInfo[landid][lID])
	        {
             	DeleteLandObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, LandInfo[landid][lLabels]);
	}
}

ReloadLand(landid)
{
	if(LandInfo[landid][lExists])
	{
		DestroyDynamic3DTextLabel(LandInfo[landid][lText]);
		DestroyDynamicPickup(LandInfo[landid][lPickup]);
	    DestroyDynamicArea(LandInfo[landid][lArea]);
	    GangZoneDestroy(LandInfo[landid][lGangZone]);

	    LandInfo[landid][lArea] = CreateDynamicRectangle(LandInfo[landid][lMinX], LandInfo[landid][lMinY], LandInfo[landid][lMaxX], LandInfo[landid][lMaxY]);
	    LandInfo[landid][lGangZone] = GangZoneCreateEx(LandInfo[landid][lMinX], LandInfo[landid][lMinY], LandInfo[landid][lMaxX], LandInfo[landid][lMaxY]);
	   	LandInfo[landid][lText] = CreateDynamic3DTextLabel("Land", COLOR_GREY, LandInfo[landid][lX], LandInfo[landid][lY], LandInfo[landid][lZ], 15.0, .worldid = 0, .interiorid = 0);
	    UpdateLandText(landid);

		LandInfo[landid][lPickup] = CreateDynamicPickup(19523, 1, LandInfo[landid][lX], LandInfo[landid][lY], LandInfo[landid][lZ]);

	    foreach(new i : Player)
	    {
	        if(pData[i][pShowLands])
	        {
	            GangZoneShowForPlayer(i, LandInfo[landid][lGangZone], (LandInfo[landid][lOwnerID] > 0) ? (0x99ffbeAA) : (0x33CC33AA));
			}
		}
	}
}

GangZoneCreateEx(Float:minx, Float:miny, Float:maxx, Float:maxy)
{
	return GangZoneCreate((minx > maxx) ? (maxx) : (minx), (miny > maxy) ? (maxy) : (miny), (minx > maxx) ? (minx) : (maxx), (miny > maxy) ? (miny) : (maxy));
}

Gate_Nearest(playerid)
{
    for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && IsPlayerInRangeOfPoint(playerid, GateData[i][gateRadius], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]))
	{
		if (GetPlayerInterior(playerid) == GateData[i][gateInterior] && GetPlayerVirtualWorld(playerid) == GateData[i][gateWorld])
			return i;
	}
	return -1;
}
Object_Nearest(playerid)
{
    for (new i = 0; i != MAX_MAPOBJECTS; i ++) if (ObjectData[i][mobjExists] && IsPlayerInRangeOfPoint(playerid, 3.0, ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2]))
	{
		if (GetPlayerInterior(playerid) == ObjectData[i][mobjInterior] && GetPlayerVirtualWorld(playerid) == ObjectData[i][mobjWorld])
			return i;
	}
	return -1;
}


forward Toll_G10();
forward Toll_G9();
forward Toll_G8();
forward Toll_G7();
forward Toll_G6();
forward Toll_G5();
forward Toll_G4();
forward Toll_G3();
forward Toll_G2();
forward Toll_G();

public Toll_G10()
{
      DestroyDynamicObject( Border000 );
      Border0 = CreateDynamicObject(968,-173.392,374.704,11.722,0.000,90.000,344.634);
      Border00 = 0;
      return 1;
}
public Toll_G9()
{
      DestroyDynamicObject( Border999 );
      Border9 = CreateDynamicObject(968,-159.520,371.172,11.722,0.000,90.000,166.787);
      Border99 = 0;
      return 1;
}
public Toll_G8()
{
      DestroyDynamicObject( Border888 );
      Border8 = CreateDynamicObject(968,525.827,477.249,18.799,0.000,90.000,217.985);
      Border88 = 0;
      return 1;
}
public Toll_G7()
{
      DestroyDynamicObject( Border777 );
      Border7 = CreateDynamicObject(968,514.546,468.370,18.759,0.000,90.000,38.485);
      Border77 = 0;
      return 1;
}
public Toll_G5()
{
      DestroyDynamicObject( Border555 );
      Border5 = CreateDynamicObject(968,51.067,-1286.589,13.659,0.000,-90.200,-54.806);
      Border55 = 0;
      return 1;
}
public Toll_G6()
{
      DestroyDynamicObject( Border666 );
      Border6 = CreateDynamicObject(968,71.514,-1305.882,12.010,0.000,-89.399,-49.406);
      Border66 = 0;
      return 1;
}
public Toll_G3()
{
      DestroyDynamicObject( Border333 );
	  Border3 = CreateDynamicObject(968,49.9395, -1534.8324, 4.8211,0.0000, 90.0000, -96.4800);
	
      Border33 = 0;
      return 1;
}
public Toll_G4()
{
      DestroyDynamicObject( Border444 );
      Border4 = CreateDynamicObject(968,50.6163, -1527.4373, 4.8211,0.0000, 90.0000, 83.5200);
      Border44 = 0;
      return 1;
}
public Toll_G2()
{
      DestroyDynamicObject( Border222 );
      Border2 = CreateDynamicObject(968, 1791.6895, 810.5111, 10.6400,  0.0000, 270.0000, 0.0000);
      Border22 = 0;
      return 1;
}

public Toll_G()
{
      DestroyDynamicObject( Border111 );
	  Border1 = CreateDynamicObject(968, 1809.9056, 819.3365, 10.4577,   0.0000, 270.0000, 0.0000);//
      Border11 = 0;
      return 1;
}
//
stock ShowGPSTextdraw(playerid) {
	PlayerTextDrawShow(playerid, pData[playerid][pText][0]);
	PlayerTextDrawShow(playerid, pData[playerid][pText][1]);
	PlayerTextDrawShow(playerid, pData[playerid][pText][6]);
	PlayerTextDrawShow(playerid, pData[playerid][pText][7]);
}

stock HideGPSTextdraw(playerid) {
	PlayerTextDrawHide(playerid, pData[playerid][pText][0]);
	PlayerTextDrawHide(playerid, pData[playerid][pText][1]);
	PlayerTextDrawHide(playerid, pData[playerid][pText][6]);
	PlayerTextDrawHide(playerid, pData[playerid][pText][7]);
}

stock IsPlayerNearDynamicObject(playerid, objectid, Float:range = 5.0) {

	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	GetDynamicObjectPos(objectid, fX, fY, fZ);

	return (IsPlayerInRangeOfPoint(playerid, range, fX, fY, fZ));
}

stock GetFactionByID(sqlid)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionInfo[i][fType] == sqlid)
	    return i;

	return -1;
}

stock GetGateByID(sqlid)
{
	for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateID] == sqlid)
	    return i;

	return -1;
}

forward OnObjectCreated(gateid);
public OnObjectCreated(gateid)
{
	if (gateid == -1 || !ObjectData[gateid][mobjExists])
	    return 0;

	ObjectData[gateid][mobjID] = cache_insert_id(connectionID);
	Object_Save(gateid);

	return 1;
}

forward OnGateCreated(gateid);
public OnGateCreated(gateid)
{
	if (gateid == -1 || !GateData[gateid][gateExists])
	    return 0;

	GateData[gateid][gateID] = cache_insert_id(connectionID);
	Gate_Save(gateid);

	return 1;
}

stock Speed_Refresh(speedid)
{
	if (speedid != -1 && SpeedData[speedid][speedExists])
	{
	    new
	        string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "%.0f MPH Speed Limit\n"GREY"(( Type '/rules' > 'Speed Laws' for info. ))", SpeedData[speedid][speedLimit]);

		SpeedData[speedid][speedText3D] = CreateDynamic3DTextLabel(string, 0xFF0000FF, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2] + 2.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
        SpeedData[speedid][speedObject] = CreateDynamicObject(18880, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2], 0.0, 0.0, SpeedData[speedid][speedPos][3]);
		SpeedData[speedid][sMapIcon] = CreateDynamicMapIcon(SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2], 56, 0, .style = MAPICON_GLOBAL);
	}
	return 1;
}

stock Speed_Save(speedid)
{
	new
	    query[255];

	format(query, sizeof(query), "UPDATE `speedcameras` SET `speedRange` = '%.4f', `speedLimit` = '%.4f', `speedX` = '%.4f', `speedY` = '%.4f', `speedZ` = '%.4f', `speedAngle` = '%.4f' WHERE `speedID` = '%d'",
	    SpeedData[speedid][speedRange],
	    SpeedData[speedid][speedLimit],
	    SpeedData[speedid][speedPos][0],
	    SpeedData[speedid][speedPos][1],
	    SpeedData[speedid][speedPos][2],
	    SpeedData[speedid][speedPos][3],
	    SpeedData[speedid][speedID]
	);
	return mysql_tquery(connectionID, query);
}

stock Speed_Nearest(playerid)
{
	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (SpeedData[i][speedExists] && IsPlayerInRangeOfPoint(playerid, SpeedData[i][speedRange], SpeedData[i][speedPos][0], SpeedData[i][speedPos][1], SpeedData[i][speedPos][2]))
	    return i;

	return -1;
}

stock Speed_Delete(speedid)
{
    if (speedid != -1 && SpeedData[speedid][speedExists])
	{
	    new
	        string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "DELETE FROM `speedcameras` WHERE `speedID` = '%d'", SpeedData[speedid][speedID]);
		mysql_tquery(connectionID, string);

		SpeedData[speedid][speedExists] = false;
		SpeedData[speedid][speedLimit] = 0.0;
		SpeedData[speedid][speedRange] = 0.0;
		SpeedData[speedid][speedID] = 0;
	}
	return 1;
}

stock Speed_Create(playerid, Float:limit, Float:range)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (!SpeedData[i][speedExists])
	{
	    SpeedData[i][speedExists] = true;
	    SpeedData[i][speedRange] = range;
        SpeedData[i][speedLimit] = limit;

		SpeedData[i][speedPos][0] = x + (1.5 * floatsin(-angle, degrees));
	    SpeedData[i][speedPos][1] = y + (1.5 * floatcos(-angle, degrees));
	    SpeedData[i][speedPos][2] = z - 1.2;
	    SpeedData[i][speedPos][3] = angle;

	    Speed_Refresh(i);
	    mysql_tquery(connectionID, "INSERT INTO `speedcameras` (`speedRange`) VALUES(0.0)", "OnSpeedCreated", "d", i);
	    return i;
	}
	return -1;
}
forward OnSpeedCreated(speedid);
public OnSpeedCreated(speedid)
{
	if (speedid == -1 || !SpeedData[speedid][speedExists])
	    return 0;

	SpeedData[speedid][speedID] = cache_insert_id(connectionID);
	Speed_Save(speedid);

	return 1;
}
forward Speed_Load();
public Speed_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_SPEED_CAMERAS)
	{
	    SpeedData[i][speedExists] = true;
	    SpeedData[i][speedID] = cache_get_field_content_int(i, "speedID");
	    SpeedData[i][speedRange] = cache_get_field_content_float(i, "speedRange");
	    SpeedData[i][speedLimit] = cache_get_field_content_float(i, "speedLimit");
	    SpeedData[i][speedPos][0] = cache_get_field_content_float(i, "speedX");
	    SpeedData[i][speedPos][1] = cache_get_field_content_float(i, "speedY");
	    SpeedData[i][speedPos][2] = cache_get_field_content_float(i, "speedZ");
	    SpeedData[i][speedPos][3] = cache_get_field_content_float(i, "speedAngle");

	    Speed_Refresh(i);
	}
	return 1;
}

stock Float:GetPlayerSpeed(playerid)
{
	static Float:velocity[3];

	if (IsPlayerInAnyVehicle(playerid))
	    GetVehicleVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);
	else
	    GetPlayerVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);

	return floatsqroot((velocity[0] * velocity[0]) + (velocity[1] * velocity[1]) + (velocity[2] * velocity[2])) * 100.0;
}

stock IsEngineVehicle(vehicleid)
{
	static const g_aEngineStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
    new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aEngineStatus[modelid - 400]);
}

forward HidePlayerBox(playerid, PlayerText:boxid);
public HidePlayerBox(playerid, PlayerText:boxid)
{
	if (!IsPlayerConnected(playerid))
	    return 0;

	PlayerTextDrawHide(playerid, boxid);
	PlayerTextDrawDestroy(playerid, boxid);

	return 1;
}

stock PlayerText:ShowPlayerBox(playerid, color)
{
	new
	    PlayerText:textid;

    textid = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "_");
	PlayerTextDrawFont(playerid, textid, 1);
	PlayerTextDrawLetterSize(playerid, textid, 0.500000, 50.000000);
	PlayerTextDrawColor(playerid, textid, -1);
	PlayerTextDrawUseBox(playerid, textid, 1);
	PlayerTextDrawBoxColor(playerid, textid, color);
	PlayerTextDrawTextSize(playerid, textid, 640.000000, 30.000000);
	PlayerTextDrawShow(playerid, textid);

	return textid;
}

IsACruiser(vehicleid)
{
	switch (GetVehicleModel(vehicleid))
	{
	    case 523, 427, 490, 528, 596..599, 601: return 1;
	}
	return 0;
}

IsAPlane(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 460, 464, 476, 511..513, 519, 520, 553, 577, 592, 593: return 1;
    }
    return 0;
}

IsAHelicopter(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: return 1;
    }

    return 0;
}

forward CheckKeyPress(playerid);
public CheckKeyPress(playerid)
{
    new keys, updown, leftright;
    GetPlayerKeys(playerid, keys, updown, leftright);
	if(CurrentCCTV[playerid] > -1 && PlayerMenu[playerid] == -1)
	{
	    if(leftright == KEY_RIGHT)
	  	{
	  	    if(keys == KEY_SPRINT)
			{
	 	    	CCTVDegree[playerid] = (CCTVDegree[playerid] - 2.0);
			}
			else
			{
			    CCTVDegree[playerid] = (CCTVDegree[playerid] - 0.5);
			}
	  	    if(CCTVDegree[playerid] < 0)
	  	    {
	  	        CCTVDegree[playerid] = 359;
			}
	  	    MovePlayerCCTV(playerid);

		}
	    if(leftright == KEY_LEFT)
	    {
	        if(keys == KEY_SPRINT)
			{
	 	    	CCTVDegree[playerid] = (CCTVDegree[playerid] + 2.0);
			}
			else
			{
			    CCTVDegree[playerid] = (CCTVDegree[playerid] + 0.5);
			}
			if(CCTVDegree[playerid] >= 360)
	  	    {
	  	        CCTVDegree[playerid] = 0;
			}
	        MovePlayerCCTV(playerid);

	    }
	    if(updown == KEY_UP)
	    {
	        if(CCTVRadius[playerid] < 25)
	        {
		        if(keys == KEY_SPRINT)
				{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] + 0.5);
		        	MovePlayerCCTV(playerid);
				}
				else
				{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] + 0.1);
		        	MovePlayerCCTV(playerid);
				}
			}
		}
		if(updown == KEY_DOWN)
	    {
			if(keys == KEY_SPRINT)
			{
			    if(CCTVRadius[playerid] >= 0.6)
	        	{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] - 0.5);
			       	MovePlayerCCTV(playerid);
				}
			}
			else
			{
			    if(CCTVRadius[playerid] >= 0.2)
	        	{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] - 0.1);
			       	MovePlayerCCTV(playerid);
				}
			}
		}
		if(keys == KEY_CROUCH)
		{
		    SetPlayerPos(playerid, LastPos[playerid][LX], LastPos[playerid][LY], LastPos[playerid][LZ]);
			SetPlayerFacingAngle(playerid, LastPos[playerid][LA]);
			SetPlayerInterior(playerid, LastPos[playerid][LInterior]);
			TogglePlayerControllable(playerid, 1);
			KillTimer(KeyTimer[playerid]);
			SetCameraBehindPlayer(playerid);
			TextDrawHideForPlayer(playerid, TD);
			CurrentCCTV[playerid] = -1;
		}
	}
	MovePlayerCCTV(playerid);
}

stock MovePlayerCCTV(playerid)
{
	CCTVLA[playerid][0] = CCTVLAO[CurrentCCTV[playerid]][0] + (floatmul(CCTVRadius[playerid], floatsin(-CCTVDegree[playerid], degrees)));
	CCTVLA[playerid][1] = CCTVLAO[CurrentCCTV[playerid]][1] + (floatmul(CCTVRadius[playerid], floatcos(-CCTVDegree[playerid], degrees)));
 	SetPlayerCameraLookAt(playerid, CCTVLA[playerid][0], CCTVLA[playerid][1], CCTVLA[playerid][2]);
}

stock AddCCTV(name[], Float:X, Float:Y, Float:Z, Float:Angle)
{
	if(TotalCCTVS >= MAX_CCTVS) return 0;
	format(CameraName[TotalCCTVS], 32, "%s", name);
	CCTVCP[TotalCCTVS][0] = X;
	CCTVCP[TotalCCTVS][1] = Y;
	CCTVCP[TotalCCTVS][2] = Z;
	CCTVCP[TotalCCTVS][3] = Angle;
	CCTVLAO[TotalCCTVS][0] = X;
	CCTVLAO[TotalCCTVS][1] = Y;
	CCTVLAO[TotalCCTVS][2] = Z-10;
	TotalCCTVS++;
	return TotalCCTVS-1;
}

SetPlayerToCCTVCamera(playerid, CCTV)
{
	if(CCTV >= TotalCCTVS)
	{
	    SendClientMessage(playerid, 0xFF0000AA, "Invald CCTV");
	    return 1;
	}
	if(CurrentCCTV[playerid] == -1)
    {
	    GetPlayerPos(playerid, LastPos[playerid][LX], LastPos[playerid][LY], LastPos[playerid][LZ]);
		GetPlayerFacingAngle(playerid, LastPos[playerid][LA]);
        LastPos[playerid][LInterior] = GetPlayerInterior(playerid);
	}
	else
	{
		KillTimer(KeyTimer[playerid]);
	}
	CurrentCCTV[playerid] = CCTV;
    TogglePlayerControllable(playerid, 0);
	//SetPlayerPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], (CCTVCP[CCTV][2]-50));
	SetPlayerPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], -100.0);
	SetPlayerCameraPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], CCTVCP[CCTV][2]);
	SetPlayerCameraLookAt(playerid, CCTVLAO[CCTV][0], (CCTVLAO[CCTV][1]+0.2), CCTVLAO[CCTV][2]);
	CCTVLA[playerid][0] = CCTVLAO[CCTV][0];
	CCTVLA[playerid][1] = CCTVLAO[CCTV][1]+0.2;
	CCTVLA[playerid][2] = CCTVLAO[CCTV][2];
	CCTVRadius[playerid] = 12.5;
	CCTVDegree[playerid] = CCTVCP[CCTV][3];
	MovePlayerCCTV(playerid);
    KeyTimer[playerid] = SetTimerEx("CheckKeyPress", 75, 1, "i", playerid);
    TextDrawShowForPlayer(playerid, TD);
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	new Menu:Current = GetPlayerMenu(playerid);
	for(new menu; menu<TotalMenus; menu++)
	{

		if(Current == CCTVMenu[menu])
		{
		    if(MenuType[PlayerMenu[playerid]] == 1)
		    {
		        if(row == 11)
		        {
		            ShowMenuForPlayer(CCTVMenu[menu+1], playerid);
		            TogglePlayerControllable(playerid, 0);
		            PlayerMenu[playerid] = (menu+1);
				}
				else
				{
				    if(PlayerMenu[playerid] == 0)
				    {
				    	SetPlayerToCCTVCamera(playerid, row);
				    	PlayerMenu[playerid] = -1;
					}
					else
					{
					    SetPlayerToCCTVCamera(playerid, ((PlayerMenu[playerid]*11)+row));
					    PlayerMenu[playerid] = -1;
					}
				}
			}
			else
			{
			    if(PlayerMenu[playerid] == 0)
			    {
			    	SetPlayerToCCTVCamera(playerid, row);
			    	PlayerMenu[playerid] = -1;
				}
				else
				{
				    SetPlayerToCCTVCamera(playerid, ((PlayerMenu[playerid]*11)+row));
				    PlayerMenu[playerid] = -1;
				}
			}
		}
	}

	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	TogglePlayerControllable(playerid, 1);
	PlayerMenu[playerid] = -1;
	return 1;
}

/*stock IsValidObjectModel(modelid)
{
	if (modelid < 0 || modelid > 20000)
	    return 0;

    switch (modelid)
	{
		case 18632..18645, 18646..18658, 18659..18667, 18668..19299, 19301..19515, 18631, 331, 333..339, 318..321, 325, 326, 341..344, 346..353, 355..370, 372:
			return 1;
	}
    new const g_arrModelData[] =
	{
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128,
        -515899393, -134217729, -1, -1, 33554431, -1, -1, -1, -14337, -1, -33,
      	127, 0, 0, 0, 0, 0, -8388608, -1, -1, -1, -16385, -1, -1, -1, -1, -1,
       -1, -1, -33, -1, -771751937, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, 33554431, -25, -1, -1, -1, -1, -1, -1,
       -1073676289, -2147483648, 34079999, 2113536, -4825600, -5, -1, -3145729,
       -1, -16777217, -63, -1, -1, -1, -1, -201326593, -1, -1, -1, -1, -1,
       -257, -1, 1073741823, -133122, -1, -1, -65, -1, -1, -1, -1, -1, -1,
       -2146435073, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1073741823, -64, -1,
       -1, -1, -1, -2635777, 134086663, 0, -64, -1, -1, -1, -1, -1, -1, -1,
       -536870927, -131069, -1, -1, -1, -1, -1, -1, -1, -1, -16384, -1,
       -33554433, -1, -1, -1, -1, -1, -1610612737, 524285, -128, -1,
       2080309247, -1, -1, -1114113, -1, -1, -1, 66977343, -524288, -1, -1, -1,
       -1, -2031617, -1, 114687, -256, -1, -4097, -1, -4097, -1, -1,
       1010827263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32768, -1, -1, -1, -1, -1,
       2147483647, -33554434, -1, -1, -49153, -1148191169, 2147483647,
       -100781080, -262145, -57, 134217727, -8388608, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1048577, -1, -449, -1017, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1835009, -2049, -1, -1, -1, -1, -1, -1,
       -8193, -1, -536870913, -1, -1, -1, -1, -1, -87041, -1, -1, -1, -1, -1,
       -1, -209860, -1023, -8388609, -2096897, -1, -1048577, -1, -1, -1, -1,
       -1, -1, -897, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1610612737,
       -3073, -28673, -1, -1, -1, -1537, -1, -1, -13, -1, -1, -1, -1, -1985,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1056964609, -1, -1, -1,
       -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -236716037, -1, -1, -1, -1, -1, -1, -1, -536870913, 3, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -2097153, -2109441, -1, 201326591, -4194304, -1, -1,
       -241, -1, -1, -1, -1, -1, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, -32768, -1, -1, -1, -2, -671096835, -1, -8388609, -66323585, -13,
       -1793, -32257, -247809, -1, -1, -513, 16252911, 0, 0, 0, -131072,
       33554383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8356095, 0, 0, 0, 0, 0,
       0, -256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -268435449, -1, -1, -2049, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       92274627, -65536, -2097153, -268435457, 591191935, 1, 0, -16777216, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127
	};
 	return ((modelid >= 0) && ((modelid / 32) < sizeof(g_arrModelData)) && (g_arrModelData[modelid / 32] & (1 << (modelid % 32))));
}*/

forward CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ);
public CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	new id = -1;

	if (GateData[gateid][gateExists] && GateData[gateid][gateOpened])
 	{
	 	MoveDynamicObject(GateData[gateid][gateObject], fX, fY, fZ, speed, fRotX, fRotY, fRotZ);

	 	if ((id = GetGateByID(linkid)) != -1)
            MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], speed, GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);

		GateData[id][gateOpened] = 0;
		return 1;
	}
	return 0;
}

stock Gate_Operate(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
	    new id = -1;

		if (!GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = true;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gateMove][0], GateData[gateid][gateMove][1], GateData[gateid][gateMove][2], GateData[gateid][gateSpeed], GateData[gateid][gateMove][3], GateData[gateid][gateMove][4], GateData[gateid][gateMove][5]);

            if (GateData[gateid][gateTime] > 0) {
				GateData[gateid][gateTimer] = SetTimerEx("CloseGate", GateData[gateid][gateTime], false, "ddfffffff", gateid, GateData[gateid][gateLinkID], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);
			}
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = true;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gateMove][0], GateData[id][gateMove][1], GateData[id][gateMove][2], GateData[id][gateSpeed], GateData[id][gateMove][3], GateData[id][gateMove][4], GateData[id][gateMove][5]);
			}
		}
		else if (GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = false;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);

            if (GateData[gateid][gateTime] > 0) {
				KillTimer(GateData[gateid][gateTimer]);
		    }
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = false;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gateSpeed], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);
			}
		}
	}
	return 1;
}

stock Object_Duplicate(playerid, idx)
{
	for (new i = 0; i < MAX_MAPOBJECTS; i ++) if (!ObjectData[i][mobjExists])
	{
		ObjectData[i][mobjExists] = true;
		ObjectData[i][mobjModel] = ObjectData[idx][mobjModel];

		ObjectData[i][mobjPos][0] = ObjectData[idx][mobjPos][0];
		ObjectData[i][mobjPos][1] = ObjectData[idx][mobjPos][1];
		ObjectData[i][mobjPos][2] = ObjectData[idx][mobjPos][2];
		ObjectData[i][mobjPos][3] = ObjectData[idx][mobjPos][3];
		ObjectData[i][mobjPos][4] = ObjectData[idx][mobjPos][4];
		ObjectData[i][mobjPos][5] = ObjectData[idx][mobjPos][5];

		ObjectData[i][mobjInterior] = ObjectData[idx][mobjInterior];
		ObjectData[i][mobjWorld] = ObjectData[idx][mobjInterior];

		ObjectData[i][mobjObject] = CreateDynamicObject(ObjectData[idx][mobjModel], ObjectData[idx][mobjPos][0], ObjectData[idx][mobjPos][1], ObjectData[idx][mobjPos][2], ObjectData[idx][mobjPos][3], ObjectData[idx][mobjPos][4], ObjectData[idx][mobjPos][5], ObjectData[idx][mobjWorld], ObjectData[idx][mobjInterior]);

		new string[48];
		format(string, sizeof(string), "[%i]\nID: %i", ObjectData[i][mobjModel], i);
		ObjectData[i][mobjname2] = CreateDynamic3DTextLabel(string, COLOR_GREY, ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], 5.0);

		mysql_tquery(connectionID, "INSERT INTO `object` (`mobjModel`) VALUES(980)", "OnObjectCreated", "d", i);

		pData[playerid][pEditmObject] = -1;
		EditDynamicObject(playerid, ObjectData[i][mobjObject]);
		pData[playerid][pEditmObject] = i;
		pData[playerid][pEditType] = EDIT_OBJECT_PREVIEW;
		SM(playerid, COLOR_WHITE, "You are now adjusting the position of object ID: %d.", i);
		return i;
	}
	return -1;
}

stock Object_Create(playerid, idx)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_MAPOBJECTS; i ++) if (!ObjectData[i][mobjExists])
		{
		    ObjectData[i][mobjExists] = true;
			ObjectData[i][mobjModel] = idx;

			ObjectData[i][mobjPos][0] = x + (3.0 * floatsin(-angle, degrees));
			ObjectData[i][mobjPos][1] = y + (3.0 * floatcos(-angle, degrees));
			ObjectData[i][mobjPos][2] = z;
			ObjectData[i][mobjPos][3] = 0.0;
			ObjectData[i][mobjPos][4] = 0.0;
			ObjectData[i][mobjPos][5] = angle;

            ObjectData[i][mobjInterior] = GetPlayerInterior(playerid);
            ObjectData[i][mobjWorld] = GetPlayerVirtualWorld(playerid);

            ObjectData[i][mobjObject] = CreateDynamicObject(ObjectData[i][mobjModel], ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], ObjectData[i][mobjPos][3], ObjectData[i][mobjPos][4], ObjectData[i][mobjPos][5], ObjectData[i][mobjWorld], ObjectData[i][mobjInterior]);

			new string[48];
			format(string, sizeof(string), "[%i]\nID: %i", ObjectData[i][mobjModel], i);
			ObjectData[i][mobjname2] = CreateDynamic3DTextLabel(string, COLOR_GREY, ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], 5.0);

			mysql_tquery(connectionID, "INSERT INTO `object` (`mobjModel`) VALUES(980)", "OnObjectCreated", "d", i);

			pData[playerid][pEditmObject] = -1;
			EditDynamicObject(playerid, ObjectData[i][mobjObject]);
			pData[playerid][pEditmObject] = i;
			pData[playerid][pEditType] = EDIT_OBJECT_PREVIEW;
			SM(playerid, COLOR_WHITE, "You are now adjusting the position of object ID: %d.", i);
			return i;
		}
	}
	return -1;
}

stock Gate_Create(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_GATES; i ++) if (!GateData[i][gateExists])
		{
		    GateData[i][gateExists] = true;
			GateData[i][gateModel] = 980;
			GateData[i][gateSpeed] = 3.0;
			GateData[i][gateRadius] = 5.0;
			GateData[i][gateOpened] = 0;
			GateData[i][gateTime] = 0;

			GateData[i][gatePos][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gatePos][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gatePos][2] = z;
			GateData[i][gatePos][3] = 0.0;
			GateData[i][gatePos][4] = 0.0;
			GateData[i][gatePos][5] = angle;

			GateData[i][gateMove][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gateMove][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gateMove][2] = z - 10.0;
			GateData[i][gateMove][3] = -1000.0;
			GateData[i][gateMove][4] = -1000.0;
			GateData[i][gateMove][5] = -1000.0;

            GateData[i][gateInterior] = GetPlayerInterior(playerid);
            GateData[i][gateWorld] = GetPlayerVirtualWorld(playerid);

            GateData[i][gateLinkID] = -1;
            GateData[i][gateFaction] = -1;

            GateData[i][gatePass][0] = '\0';
            GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);

			mysql_tquery(connectionID, "INSERT INTO `gates` (`gateModel`) VALUES(980)", "OnGateCreated", "d", i);
			return i;
		}
	}
	return -1;
}

stock Gate_Delete(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
		new
		    query[64];

		format(query, sizeof(query), "DELETE FROM `gates` WHERE `gateID` = '%d'", GateData[gateid][gateID]);
		mysql_tquery(connectionID, query);

		if (IsValidDynamicObject(GateData[gateid][gateObject]))
		    DestroyDynamicObject(GateData[gateid][gateObject]);

		for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateLinkID] == GateData[gateid][gateID]) {
		    GateData[i][gateLinkID] = -1;
		    Gate_Save(i);
		}
		if (GateData[gateid][gateOpened] && GateData[gateid][gateTime] > 0) {
		    KillTimer(GateData[gateid][gateTimer]);
		}
	    GateData[gateid][gateExists] = false;
	    GateData[gateid][gateID] = 0;
	    GateData[gateid][gateOpened] = 0;
	}
	return 1;
}

stock Object_Delete(gateid)
{
	if (gateid != -1 && ObjectData[gateid][mobjExists])
	{
		new
		    query[64];

		format(query, sizeof(query), "DELETE FROM `object` WHERE `mobjID` = '%d'", ObjectData[gateid][mobjID]);
		mysql_tquery(connectionID, query);

		if (IsValidDynamicObject(ObjectData[gateid][mobjObject]))
		    DestroyDynamicObject(ObjectData[gateid][mobjObject]);

		if (IsValidDynamic3DTextLabel(ObjectData[gateid][mobjname2]))
			DestroyDynamic3DTextLabel(ObjectData[gateid][mobjname2]);

	    ObjectData[gateid][mobjExists] = false;
	    ObjectData[gateid][mobjID] = 0;
	}
	return 1;
}

stock Object_Save(gateid)
{
	new
	    query[768];

	format(query, sizeof(query), "UPDATE `object` SET `mobjModel` = '%d', `mobjX` = '%.4f', `mobjY` = '%.4f', `mobjZ` = '%.4f', `mobjRX` = '%.4f', `mobjRY` = '%.4f', `mobjRZ` = '%.4f', `mobjInterior` = '%d', `mobjWorld` = '%d' WHERE `mobjID` = '%d'",
	    ObjectData[gateid][mobjModel],
	    ObjectData[gateid][mobjPos][0],
	    ObjectData[gateid][mobjPos][1],
	    ObjectData[gateid][mobjPos][2],
	    ObjectData[gateid][mobjPos][3],
	    ObjectData[gateid][mobjPos][4],
	    ObjectData[gateid][mobjPos][5],
	    ObjectData[gateid][mobjInterior],
	    ObjectData[gateid][mobjWorld],
	    ObjectData[gateid][mobjID]
	);
	return mysql_tquery(connectionID, query);
}

stock Gate_Save(gateid)
{
	new
	    query[768];

	format(query, sizeof(query), "UPDATE `gates` SET `gateModel` = '%d', `gateSpeed` = '%.4f', `gateRadius` = '%.4f', `gateTime` = '%d', `gateX` = '%.4f', `gateY` = '%.4f', `gateZ` = '%.4f', `gateRX` = '%.4f', `gateRY` = '%.4f', `gateRZ` = '%.4f', `gateInterior` = '%d', `gateWorld` = '%d', `gateMoveX` = '%.4f', `gateMoveY` = '%.4f', `gateMoveZ` = '%.4f', `gateMoveRX` = '%.4f', `gateMoveRY` = '%.4f', `gateMoveRZ` = '%.4f', `gateLinkID` = '%d', `gateFaction` = '%d', `gatePass` = '%s' WHERE `gateID` = '%d'",
	    GateData[gateid][gateModel],
	    GateData[gateid][gateSpeed],
	    GateData[gateid][gateRadius],
	    GateData[gateid][gateTime],
	    GateData[gateid][gatePos][0],
	    GateData[gateid][gatePos][1],
	    GateData[gateid][gatePos][2],
	    GateData[gateid][gatePos][3],
	    GateData[gateid][gatePos][4],
	    GateData[gateid][gatePos][5],
	    GateData[gateid][gateInterior],
	    GateData[gateid][gateWorld],
	    GateData[gateid][gateMove][0],
	    GateData[gateid][gateMove][1],
	    GateData[gateid][gateMove][2],
	    GateData[gateid][gateMove][3],
	    GateData[gateid][gateMove][4],
	    GateData[gateid][gateMove][5],
	    GateData[gateid][gateLinkID],
	    GateData[gateid][gateFaction],
	    SQL_ReturnEscaped(GateData[gateid][gatePass]),
	    GateData[gateid][gateID]
	);
	return mysql_tquery(connectionID, query);
}

forward Gate_Load();
public Gate_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_GATES)
	{
	    GateData[i][gateExists] = true;
	    GateData[i][gateOpened] = false;

	    GateData[i][gateID] = cache_get_field_content_int(i, "gateID");
	    GateData[i][gateModel] = cache_get_field_content_int(i, "gateModel");
	    GateData[i][gateSpeed] = cache_get_field_content_float(i, "gateSpeed");
	    GateData[i][gateRadius] = cache_get_field_content_float(i, "gateRadius");
	    GateData[i][gateTime] = cache_get_field_content_int(i, "gateTime");
	    GateData[i][gateInterior] = cache_get_field_content_int(i, "gateInterior");
	    GateData[i][gateWorld] = cache_get_field_content_int(i, "gateWorld");

	    GateData[i][gatePos][0] = cache_get_field_content_float(i, "gateX");
	    GateData[i][gatePos][1] = cache_get_field_content_float(i, "gateY");
	    GateData[i][gatePos][2] = cache_get_field_content_float(i, "gateZ");
	    GateData[i][gatePos][3] = cache_get_field_content_float(i, "gateRX");
	    GateData[i][gatePos][4] = cache_get_field_content_float(i, "gateRY");
	    GateData[i][gatePos][5] = cache_get_field_content_float(i, "gateRZ");

        GateData[i][gateMove][0] = cache_get_field_content_float(i, "gateMoveX");
	    GateData[i][gateMove][1] = cache_get_field_content_float(i, "gateMoveY");
	    GateData[i][gateMove][2] = cache_get_field_content_float(i, "gateMoveZ");
	    GateData[i][gateMove][3] = cache_get_field_content_float(i, "gateMoveRX");
	    GateData[i][gateMove][4] = cache_get_field_content_float(i, "gateMoveRY");
	    GateData[i][gateMove][5] = cache_get_field_content_float(i, "gateMoveRZ");

        GateData[i][gateLinkID] = cache_get_field_content_int(i, "gateLinkID");
	    GateData[i][gateFaction] = cache_get_field_content_int(i, "gateFaction");

	    cache_get_field_content(i, "gatePass", GateData[i][gatePass], connectionID, 32);

	    GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);
	}
	return 1;
}

forward Object_Load();
public Object_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, connectionID);

	for (new i = 0; i < rows; i ++) if (i < MAX_MAPOBJECTS)
	{
	    ObjectData[i][mobjExists] = true;
	    ObjectData[i][mobjID] = cache_get_field_content_int(i, "mobjID");
	    ObjectData[i][mobjModel] = cache_get_field_content_int(i, "mobjModel");
	    ObjectData[i][mobjInterior] = cache_get_field_content_int(i, "mobjInterior");
	    ObjectData[i][mobjWorld] = cache_get_field_content_int(i, "mobjWorld");
	    ObjectData[i][mobjPos][0] = cache_get_field_content_float(i, "mobjX");
	    ObjectData[i][mobjPos][1] = cache_get_field_content_float(i, "mobjY");
	    ObjectData[i][mobjPos][2] = cache_get_field_content_float(i, "mobjZ");
	    ObjectData[i][mobjPos][3] = cache_get_field_content_float(i, "mobjRX");
	    ObjectData[i][mobjPos][4] = cache_get_field_content_float(i, "mobjRY");
	    ObjectData[i][mobjPos][5] = cache_get_field_content_float(i, "mobjRZ");

	    ObjectData[i][mobjObject] = CreateDynamicObject(ObjectData[i][mobjModel], ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], ObjectData[i][mobjPos][3], ObjectData[i][mobjPos][4], ObjectData[i][mobjPos][5], ObjectData[i][mobjWorld], ObjectData[i][mobjInterior]);

		new string[48];
		format(string, sizeof(string), "[%i]\nID: %i", ObjectData[i][mobjModel], i);
		ObjectData[i][mobjname2] = CreateDynamic3DTextLabel(string, COLOR_GREY, ObjectData[i][mobjPos][0], ObjectData[i][mobjPos][1], ObjectData[i][mobjPos][2], 5.0);
	}
	return 1;
}

stock number_format(number)
{
	new i, string[15];
	FIXES_valstr(string, number);
	if(strfind(string, "-") != -1) i = strlen(string) - 4;
	else i = strlen(string) - 3;
	while (i >= 1)
 	{
		if(strfind(string, "-") != -1) strins(string, ",", i + 1);
		else strins(string, ",", i);
		i -= 3;
	}
	return string;
}

stock RBS(bizid)
{
	new string[128];
	if(BusinessInfo[bizid][bLocked] == 1) format(string, sizeof(string), "{AA3333}Closed"WHITE"");
    else if(BusinessInfo[bizid][bLocked] == 0) format(string, sizeof(string), "{00FF00}Opened"WHITE"");
	return string;
}

stock FIXES_valstr(dest[], value, bool:pack = false)
{
    // format can't handle cellmin properly
    static const cellmin_value[] = !"-2147483648";

    if (value == cellmin)
        pack && strpack(dest, cellmin_value, 12) || strunpack(dest, cellmin_value, 12);
    else
        format(dest, 12, "%d", value) && pack && strpack(dest, dest, 12);
}

stock TerminateInfo(playerid, reason)
{
    if(Reconnecting[playerid] == true)
    {
    	new string[64];
     	format(string, sizeof(string), "unbanip %s", ReconnectIP[playerid]);
      	SendRconCommand(string);
       	Reconnecting[playerid] = false;
       	SendRconCommand("reloadbans");
	}
    if(IsPlayerNPC(playerid)) return 1;


	//DestroyPlayerProgressBar(playerid, HungerBar[playerid]);
	//DestroyPlayerProgressBar(playerid, ThirstBar[playerid]);
	DestroyDynamic3DTextLabel(PlayerLabel[playerid]);
	DestroyDynamic3DTextLabel(InjuredLabel[playerid]);


	/*#if defined Christmas
	#else
		PlayerTextDrawDestroy(playerid, EventTextdraw[playerid]);
	#endif*/

	Maskara[playerid] = 0;

	if(CurrentCCTV[playerid] > -1)
	{
	    KillTimer(KeyTimer[playerid]);
	    TextDrawHideForPlayer(playerid, TD);
	}
	CurrentCCTV[playerid] = -1;

 	DestroyDynamic3DTextLabel(pData[playerid][aMeID]);
 	pData[playerid][aMeStatus] = 0;

	KillTimer(Timer[playerid]);
    pBlood[playerid] = false;
	ResetPlayerVariables(playerid);
	foreach(new i : Player)
	{
	    if(pData[i][pSpectating] == playerid)
	    {
	        SM(i, COLOR_ORANGE, "You are no longer spectating %s (ID %i).", GetRPName(pData[i][pSpectating]), pData[i][pSpectating]);
	    	pData[i][pSpectating] = INVALID_PLAYER_ID;
	    	SetPlayerToSpawn(i);
		}
		if(pData[i][pHouseOffer] == playerid)
		{
		    pData[i][pHouseOffer] = INVALID_PLAYER_ID;
		}
        if(pData[i][pGarageOffer] == playerid)
		{
		    pData[i][pGarageOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pBizOffer] == playerid)
		{
		    pData[i][pBizOffer] = INVALID_PLAYER_ID;
		}
 		if(pData[i][pMarriageOffer] == playerid)
		{
		    pData[i][pMarriageOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pVestOffer] == playerid)
		{
		    pData[i][pVestOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pCarOffer] == playerid)
		{
		    pData[i][pCarOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pFactionOffer] == playerid)
		{
		    pData[i][pFactionOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pGangOffer] == playerid)
		{
		    pData[i][pGangOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pFriskOffer] == playerid)
		{
		    pData[i][pFriskOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pCarryOffer] == playerid)
		{
		    pData[i][pCarryOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pTacoOffer] == playerid)
		{
			pData[i][pTacoOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pJuiceOffer] == playerid)
		{
			pData[i][pJuiceOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pLandOffer] == playerid)
		{
		    pData[i][pLandOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pBurritoOffer] == playerid)
		{
		    pData[i][pBurritoOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pComboOffer] == playerid)
		{
		    pData[i][pComboOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pLocOffer] == playerid)
		{
		    pData[i][pLocOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pTicketOffer] == playerid)
		{
		    pData[i][pTicketOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pLiveOffer] == playerid)
		{
		    pData[i][pLiveOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pLiveBroadcast] == playerid)
		{
		    pData[i][pLiveBroadcast] = INVALID_PLAYER_ID;
		}
		if(pData[i][pShakeOffer] == playerid)
		{
		    pData[i][pShakeOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pSellOffer] == playerid)
		{
		    pData[i][pSellOffer] = INVALID_PLAYER_ID;
		}
 		if(pData[i][pAllianceOffer] == playerid)
		{
		    pData[i][pSellOffer] = INVALID_PLAYER_ID;
		}
        if(pData[i][pDefendOffer] == playerid)
		{
		    pData[i][pDefendOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pDiceOffer] == playerid)
		{
		    pData[i][pDiceOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pDiceOffer1] == playerid)
		{
		    pData[i][pDiceOffer1] = INVALID_PLAYER_ID;
		}
		if(pData[i][pSendRob] == playerid)
		{
		    pData[i][pSendRob] = INVALID_PLAYER_ID;
		}
		if(pData[i][pInviteOffer] == playerid)
		{
		    pData[i][pInviteOffer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pRobberyOffer] == playerid)
		{
		    pData[i][pRobberyOffer] = INVALID_PLAYER_ID;
		}		
		if(pData[i][pRobberyOffer1] == playerid)
		{
		    pData[i][pRobberyOffer1] = INVALID_PLAYER_ID;
		}
		if(pData[i][pTextFrom] == playerid)
		{
		    pData[i][pTextFrom] = INVALID_PLAYER_ID;
		}
		if(pData[i][pWhisperFrom] == playerid)
		{
		    pData[i][pWhisperFrom] = INVALID_PLAYER_ID;
		}
		if(pData[i][pFindPlayer] == playerid)
		{
		    pData[i][pFindPlayer] = INVALID_PLAYER_ID;
		}
		if(pData[i][pRemoveFrom] == playerid)
		{
		    pData[i][pRemoveFrom] = INVALID_PLAYER_ID;
		}
		if(chattingWith[i]{playerid})
		{
		    SM(i, COLOR_YELLOW, "Your chat with %s (ID %i) has ended as they left the server.", GetRPName(playerid), playerid);
		    chattingWith[i]{playerid} = false;
		}
		if(pData[i][pActiveReport] >= 0 && (ReportInfo[pData[i][pActiveReport]][rHandledBy] == playerid || ReportInfo[pData[i][pActiveReport]][rReporter] == playerid))
		{
		    if(ReportInfo[pData[i][pActiveReport]][rHandledBy] == playerid)
				SCM(i, COLOR_YELLOW, "The player who made the report has left the server.");
			else
                SCM(i, COLOR_YELLOW, "The admin who accepted the report has left the server.");

		    ReportInfo[pData[i][pActiveReport]][rExists] = 0;
		    pData[i][pActiveReport] = -1;
		}
		if(pData[i][pDueling] == playerid)
		{
		    SCM(i, COLOR_WHITE, "Your duel target has left the server.");
		    pData[i][pDueling] = INVALID_PLAYER_ID;
		    SetPlayerToSpawn(i);
		}
		if(pData[i][pDueling1] == playerid)
		{
		    SCM(i, COLOR_WHITE, "Your boxing target has left the server.");
		    pData[i][pDueling1] = INVALID_PLAYER_ID;
		    SetPlayerToSpawn(i);
		}
		if(pData[i][pContractTaken] == playerid)
		{
		    SCM(i, COLOR_YELLOW, "Your contract target has disconnected from the server.");
		    pData[i][pContractTaken] = INVALID_PLAYER_ID;
		}
		if(pData[i][pDraggedBy] == playerid)
		{
		    SCM(i, COLOR_AQUA, "The person dragging you has disconnected. You are free!");
			pData[i][pDraggedBy] = INVALID_PLAYER_ID;
		}
		if(pData[i][pTaxiPassenger] == playerid)
		{
		    CancelTaxiRide(i);
		}
		if(pData[i][pCallLine] == playerid)
		{
		    HangupCall(pData[i][pCallLine], HANGUP_DROPPED);
		}
	}
	if(pData[playerid][pLogged])
	{
		/*if(pData[playerid][pHurt])
		{
		    SendAdminMessage(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" possibly left the server while in a gunfight.", GetRPName(playerid));
			pData[playerid][pInjured] = 1;
		}*/
	    SavePlayerVariables(playerid);
	    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0)
		{
	    	SendAdminMessage(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" left the server while tazed or cuffed.", GetRPName(playerid));
        	ResetPlayerWeaponsEx(playerid);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 2, jailtime = 1200, prisonedby = 'Server', prisonreason = 'Logging to avoid arrest' WHERE uid = %i", pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
	/*if(pData[playerid][pActiveReport] >= 0)
	{
	    callcmd::cr(playerid, "\1");
	}*/
	if(pData[playerid][pAcceptedEMS] != INVALID_PLAYER_ID)
	{
		SM(pData[playerid][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has left the server while injured.", GetRPName(playerid));
		pData[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
	}
	foreach(new i : Player)
	{
	    if(pData[i][pAcceptedEMS] == playerid)
	    {
	        SCM(i, COLOR_YELLOW, "Your medic has left the server while rescuing you. (you can now accept your fate)");
	        pData[i][pAcceptedEMS] = INVALID_PLAYER_ID;
	    }
	}
	if(IsValidDynamicObject(pData[playerid][pEditObject]))
	{
	    DestroyDynamicObject(pData[playerid][pEditObject]);
	}
	if(IsValidDynamic3DTextLabel(pData[playerid][pSpecialTag]))
	{
	    DestroyDynamic3DTextLabel(pData[playerid][pSpecialTag]);
	}
	if(IsValidDynamicObject(pData[playerid][pBombObject]))
	{
	    DestroyDynamicObject(pData[playerid][pBombObject]);
	}
	if(IsValidDynamicObject(pData[playerid][pPotObject]))
	{
	    DestroyDynamicObject(pData[playerid][pPotObject]);
	}
	if(pData[playerid][pAdminDuty])
	{
	    SetPlayerName(playerid, pData[playerid][pUsername]);
	}
	if(pData[playerid][pBoomboxPlaced])
	{
	    DestroyBoombox(playerid);
	}
	if(pData[playerid][pZoneID] >= 0)
	{
	    GangZoneDestroy(pData[playerid][pZoneID]);
	}
	if(RobberyInfo[rPlanning] || RobberyInfo[rStarted])
	{
		RemoveFromBankRobbery(playerid);
	}
	if(RobberyInfo1[rPlanning1] || RobberyInfo1[rStarted1])
	{
		RemoveFromBizRobbery(playerid);
	}
	/*if(pData[playerid][pDyuze])
	{
	    KillTimer(pData[playerid][pDyuzeTimer]);
	}*/
	if(pData[playerid][pAdrian])
	{
	    KillTimer(pData[playerid][pAdrianTimer]);
	}
	for(new i = 0; i < 4; i ++)
	{
	    if(IsValidDynamicPickup(pData[playerid][pZonePickups][i]))
	    {
	        DestroyDynamicPickup(pData[playerid][pZonePickups][i]);
	    }
	}

	if(pData[playerid][pLogged])
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(IsValidVehicle(i) && IsVehicleOwner(playerid, i) && VehicleInfo[i][vTimer] == -1)
		    {
				VehicleInfo[i][vTimer] = SetTimerEx("DespawnTimer", 600000, false, "i", i);
	   		}
		}
	}

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(ReportInfo[i][rExists] && ReportInfo[i][rReporter] == playerid)
	    {
	        ReportInfo[i][rExists] = 0;
		}
	}


	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && PointInfo[i][pCaptureTime] > 0 && PointInfo[i][pCapturer] == playerid)
	    {
	        SendProximityMessage(i, 20.0, COLOR_RED, "(( %s disconnected and therefore failed to capture the point. ))", GetRPName(playerid));

	        PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	        PointInfo[i][pCaptureTime] = 0;
	    }
	}

	for(new i = 0; i < MAX_TURFS; i ++)
	{
	    if(TurfInfo[i][tExists] && TurfInfo[i][tCaptureTime] > 0 && TurfInfo[i][tCapturer] == playerid)
	    {
	        if(reason == 0)
			{
				if(pData[playerid][pGang] >= 0)
		        {
		            GangInfo[pData[playerid][pGang]][gTurfTokens]++;
		            SendGangMessage(pData[playerid][pGang], COLOR_YELLOW, "%s crashed while attempting to capture a turf. 1 turf token was refunded to your gang.", GetRPName(playerid));

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = turftokens + 1 WHERE id = %i", pData[playerid][pGang]);
		            mysql_tquery(connectionID, queryBuffer);
				}
				else if(pData[playerid][pFaction] >= 0)
		        {
		            FactionInfo[pData[playerid][pFaction]][fTurfTokens]++;
		            SendFactionMessage(pData[playerid][pFaction], COLOR_YELLOW, "%s crashed while attempting to capture a turf. 1 turf token was refunded to your faction.", GetRPName(playerid));

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens + 1 WHERE id = %i", pData[playerid][pFaction]);
		            mysql_tquery(connectionID, queryBuffer);
				}
			}

	        SendTurfMessage(i, COLOR_RED, "(( %s disconnected and therefore failed to capture the turf. ))", GetRPName(playerid));

	        TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
	        TurfInfo[i][tCaptureTime] = 0;
	        ReloadTurf(i);
	    }
	}

	switch(reason)
	{
	    case 0:
		{	
			SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s has left the server. (Timeout)", GetRPName(playerid));
			SendAdminMessage(COLOR_ROYALBLUE, ""RED"SECURITY[BOT]"WHITE" %s has left the server. (Timeout)", GetRPName(playerid));
	    }
		case 1: 
		{	
			SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s has left the server. (Leaving)", GetRPName(playerid));
			SendAdminMessage(COLOR_ROYALBLUE, ""RED"SECURITY[BOT]"WHITE" %s has left the server. (Leaving)", GetRPName(playerid));
	    }
		case 2: 
		{		
			SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s has left the server. (Kicked)", GetRPName(playerid));
			SendAdminMessage(COLOR_ROYALBLUE, ""RED"SECURITY[BOT]"WHITE" %s has left the server. (Kicked)", GetRPName(playerid));
		}
	}	
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM shots WHERE (playerid = %i) OR (hitid = %i AND hittype = 1)", playerid, playerid);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

// Vehicle Tank Explode
stock Float: GetDistanceCameraToLocation(Float: cam_X, Float: cam_Y, Float: cam_Z, Float: vect_X, Float: vect_Y, Float: vect_Z, Float: dest_X, Float: dest_Y, Float: dest_Z, Float: targetDist = 0.0)
{
        cam_X -= dest_X;
        cam_Y -= dest_Y;
        cam_Z -= dest_Z;

        targetDist = floatsqroot(cam_X * cam_X + cam_Y * cam_Y + cam_Z * cam_Z);

        cam_X += vect_X * targetDist;
        cam_Y += vect_Y * targetDist;
        cam_Z += vect_Z * targetDist;

        return floatsqroot(cam_X * cam_X + cam_Y * cam_Y + cam_Z * cam_Z);
}

stock IsPlayerAimingAtPoint(playerid, Float: pos_X, Float: pos_Y, Float: pos_Z, Float: aimRadius)
{
        new
                Float: cam_Pos[3],
                Float: cam_Vect[3]
        ;
        GetPlayerCameraPos(playerid, cam_Pos[0], cam_Pos[1], cam_Pos[2]);
        GetPlayerCameraFrontVector(playerid, cam_Vect[0], cam_Vect[1], cam_Vect[2]);

        new
                Float: aimOffset
        ;
        switch(GetPlayerWeapon(playerid))
        {
                case 22, 23, 24, 25, 26, 27, 28, 29, 32, 38: aimOffset = -2.1;
                case 30, 31: aimOffset = -1.3;
                case 33: aimOffset = -0.9;
                case 34: return GetDistanceCameraToLocation(cam_Pos[0], cam_Pos[1], cam_Pos[2], cam_Vect[0], cam_Vect[1], cam_Vect[2], pos_X, pos_Y, pos_Z) < aimRadius;
                default: return 0;
        }
        new
                Float: aimAngle = atan2(cam_Vect[2], floatsqroot(cam_Vect[0] * cam_Vect[0] + cam_Vect[1] * cam_Vect[1])),
                Float: tmpVar
        ;
        cam_Vect[2] = floatcos(aimAngle + (aimOffset * -2), degrees) * floatsin(-(atan2(cam_Vect[1], cam_Vect[0]) + aimOffset + 270.0), degrees);
        tmpVar = floatcos(aimAngle + (aimOffset * -2), degrees) * floatcos(-(atan2(cam_Vect[1], cam_Vect[0]) + aimOffset + 270.0), degrees);

        return GetDistanceCameraToLocation(cam_Pos[0], cam_Pos[1], cam_Pos[2], cam_Vect[2], tmpVar, floatsin(aimAngle + (aimOffset * -2), degrees), pos_X, pos_Y, pos_Z) < aimRadius;
}

stock GetPetrolcapOffsets(modelID, &Float: aimOffset_X, &Float: aimOffset_Y, &Float: aimOffset_Z)
{
        enum e_PetrolcapData
        {
                e_ModelID,
                Float: e_Offset_X,
                Float: e_Offset_Y,
                Float: e_Offset_Z
        };
        static const
                g_PetrolcapData[][e_PetrolcapData] =
                {
                        { 400, -1.100, -2.059, -0.070 },
                        { 401, 1.090, -0.939, 0.000 },
                        { 402, 1.039, -1.919, 0.140 },
                        { 403, -1.450, 0.070, -0.800 },
                        { 404, -0.939, -2.359, -0.009 },
                        { 405, -1.039, -2.180, -0.039 },
                        { 407, -1.110, -3.660, -0.540 },
                        { 408, -1.230, 1.299, -0.660 },
                        { 409, -0.980, -2.829, 0.119 },
                        { 410, -1.019, -1.669, 0.209 },
                        { 411, 1.090, -2.099, 0.090 },
                        { 412, 0.000, -3.549, -0.170 },
                        { 413, -1.049, 0.340, -0.529 },
                        { 414, -0.920, -0.740, -0.699 },
                        { 415, -1.129, -2.069, 0.019 },
                        { 416, -1.350, -2.740, -0.189 },
                        { 418, -1.179, -1.769, -0.019 },
                        { 418, 1.210, -1.570, -0.079 },
                        { 419, -1.080, -1.990, 0.029 },
                        { 420, -1.100, -2.150, 0.100 },
                        { 421, -1.070, -2.440, -0.170 },
                        { 422, -1.080, -0.419, -0.200 },
                        { 423, -1.169, -1.899, -0.319 },
                        { 424, 0.180, 1.080, 0.430 },
                        { 426, -1.100, -2.150, 0.090 },
                        { 427, -1.269, -3.200, -0.159 },
                        { 428, -1.009, -3.059, -0.490 },
                        { 429, 0.990, -2.140, 0.140 },
                        { 431, -1.450, -5.469, -0.129 },
                        { 433, -1.519, 0.159, -0.680 },
                        { 434, -0.730, -1.580, 0.289 },
                        { 436, -1.070, -1.820, 0.140 },
                        { 437, -1.490, -4.969, -0.500 },
                        { 438, -1.090, -1.929, -0.019 },
                        { 439, -1.110, -1.509, 0.059 },
                        { 440, -1.090, -0.460, -0.419 },
                        { 442, -1.210, -2.210, 0.059 },
                        { 443, -1.529, 1.240, -0.899 },
                        { 444, 0.000, -2.599, -0.059 },
                        { 445, -1.039, -1.940, 0.129 },
                        { 451, 1.059, -1.220, -0.039 },
                        { 455, -1.529, -0.009, -0.759 },
                        { 456, 0.790, -0.050, -0.610 },
                        { 458, -1.110, -2.049, -0.109 },
                        { 459, -0.819, -2.390, -0.479 },
                        { 459, -1.049, -2.289, 0.219 },
                        { 461, 0.000, 0.140, 0.540 },
                        { 463, 0.000, 0.170, 0.469 },
                        { 466, 0.000, -3.000, -0.129 },
                        { 467, -1.070, -2.299, 0.119 },
                        { 468, 0.000, 0.009, 0.409 },
                        { 470, -1.259, -2.380, 0.239 },
                        { 475, -1.070, -1.600, 0.129 },
                        { 477, -1.200, -1.529, 0.239 },
                        { 478, 1.090, -0.340, 0.230 },
                        { 479, -1.090, -1.970, 0.029 },
                        { 480, -1.000, -0.879, 0.100 },
                        { 482, 1.070, -2.190, 0.000 },
                        { 483, 0.930, -2.509, -0.039 },
                        { 485, -0.889, 0.720, 0.019 },
                        { 486, -0.699, -3.170, 0.579 },
                        { 489, 1.159, -0.740, 0.000 },
                        { 490, 1.370, -1.250, 0.000 },
                        { 491, -1.070, -2.180, 0.000 },
                        { 492, -0.980, -2.240, 0.119 },
                        { 494, -1.019, -2.200, 0.119 },
                        { 495, 1.210, -1.909, -0.100 },
                        { 496, 1.059, -1.860, 0.150 },
                        { 498, -1.299, -0.009, 0.090 },
                        { 499, -1.110, -1.070, -0.349 },
                        { 500, -0.980, -1.710, -0.070 },
                        { 502, -1.080, -1.879, 0.140 },
                        { 503, -1.100, -2.049, 0.029 },
                        { 504, 0.000, -3.000, -0.129 },
                        { 504, -1.159, -1.830, 0.109 },
                        { 505, 1.159, -0.740, 0.000 },
                        { 506, 1.049, -1.110, -0.050 },
                        { 507, -1.169, -2.299, 0.109 },
                        { 508, -1.379, -3.049, -0.670 },
                        { 514, 1.429, 0.379, -0.649 },
                        { 515, -1.450, 0.479, -1.309 },
                        { 516, -1.100, -2.450, -0.029 },
                        { 517, -1.179, -1.950, 0.070 },
                        { 518, 1.210, -2.190, -0.070 },
                        { 521, 0.000, 0.129, 0.610 },
                        { 522, 0.000, 0.140, 0.610 },
                        { 523, 0.000, 0.150, 0.550 },
                        { 524, 1.529, 0.479, -0.990 },
                        { 525, -1.389, -0.509, -0.090 },
                        { 526, -0.990, -1.960, 0.059 },
                        { 527, -1.139, -1.690, 0.140 },
                        { 528, -1.090, -2.029, 0.119 },
                        { 529, -1.200, -2.220, 0.200 },
                        { 531, -0.009, 0.819, 0.430 },
                        { 533, 1.019, -1.960, 0.140 },
                        { 534, -1.039, -0.819, -0.200 },
                        { 535, -1.200, -0.560, 0.270 },
                        { 536, -1.070, -1.690, 0.090 },
                        { 540, -1.169, -2.519, -0.019 },
                        { 541, 1.009, -1.990, 0.150 },
                        { 542, -1.120, -1.919, 0.310 },
                        { 543, -1.100, -0.949, 0.000 },
                        { 544, -1.299, 2.069, 0.319 },
                        { 545, 0.000, -2.220, -0.319 },
                        { 546, 1.090, -2.029, 0.150 },
                        { 547, -1.169, -2.009, 0.119 },
                        { 549, -1.080, -1.179, 0.219 },
                        { 550, -1.070, -2.490, 0.039 },
                        { 551, -1.149, -2.670, 0.090 },
                        { 552, -1.289, -0.959, 0.490 },
                        { 554, 1.210, -2.390, 0.119 },
                        { 555, -0.790, -1.500, 0.180 },
                        { 557, 1.190, -2.569, 0.850 },
                        { 558, -1.090, -1.940, 0.270 },
                        { 559, -1.080, -1.710, 0.270 },
                        { 560, 1.139, -1.899, 0.129 },
                        { 561, 1.110, -2.299, 0.109 },
                        { 562, 1.039, -0.699, 0.070 },
                        { 565, 0.910, -0.870, 0.029 },
                        { 566, 1.080, -2.440, 0.019 },
                        { 567, 0.000, -2.859, -0.460 },
                        { 568, -0.500, -0.660, 0.379 },
                        { 571, 0.000, 0.189, 0.019 },
                        { 572, -0.379, -0.970, 0.159 },
                        { 573, -1.179, 0.479, -0.479 },
                        { 574, -0.750, -0.970, 0.280 },
                        { 575, 0.000, -2.779, -0.050 },
                        { 576, 0.000, -3.160, -0.250 },
                        { 578, -1.240, 2.910, -0.019 },
                        { 579, 1.220, -2.299, 0.170 },
                        { 580, 1.190, -1.820, 0.239 },
                        { 581, 0.000, 0.129, 0.540 },
                        { 582, -1.059, 0.140, -0.280 },
                        { 583, -0.759, 0.409, -0.059 },
                        { 584, 0.000, 0.000, 0.000 },
                        { 585, 1.139, -2.299, 0.200 },
                        { 587, -1.230, -1.220, 0.100 },
                        { 588, -1.460, -2.160, 0.219 },
                        { 589, 0.980, -0.889, 0.119 },
                        { 596, -1.110, -2.160, 0.100 },
                        { 597, -1.100, -2.150, 0.100 },
                        { 598, -1.080, -1.960, 0.159 },
                        { 599, 1.159, -0.740, 0.000 },
                        { 600, 1.090, -2.029, 0.079 },
                        { 601, -1.330, -1.690, 0.920 },
                        { 602, 1.090, -1.990, 0.109 },
                        { 603, 1.179, -2.190, -0.079 },
                        { 604, 0.000, -3.000, -0.129 },
                        { 605, -1.100, -0.949, 0.000 },
                        { 609, -1.299, 0.000, 0.100 }
                }
        ;
        for(new i; i < sizeof(g_PetrolcapData); ++i)
        {
                if(g_PetrolcapData[i][e_ModelID] == modelID)
                {
                        aimOffset_X = g_PetrolcapData[i][e_Offset_X];
                        aimOffset_Y = g_PetrolcapData[i][e_Offset_Y];
                        aimOffset_Z = g_PetrolcapData[i][e_Offset_Z];
                        return 1;
                }
        }
        return 0;
}

GetNearbyLand(playerid)
{
    if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
	{
		for(new i = 0; i < MAX_LANDS; i ++)
		{
			if(LandInfo[i][lExists] && IsPlayerInDynamicArea(playerid, LandInfo[i][lArea]))
			{
			    return i;
			}
		}
	}

	return -1;
}


TurfTaxCheck(playerid, amount)
{
	new turfid = GetNearbyTurf(playerid);

	if(turfid >= 0 && TurfInfo[turfid][tType] == 7 && TurfInfo[turfid][tCapturedGang] >= 0)
	{
	    amount = percent(amount, 10);

	    SM(playerid, COLOR_AQUA, "You have been taxed a 10 percent fee of "SVRCLR"$%i{CCFFFF} for selling in %s's turf.", amount, GangInfo[TurfInfo[turfid][tCapturedGang]][gName]);
	    GivePlayerCash(playerid, -amount);

	    GangInfo[TurfInfo[turfid][tCapturedGang]][gCash] += amount;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[TurfInfo[turfid][tCapturedGang]][gCash], TurfInfo[turfid][tCapturedGang]);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

GetNearbyTurf(playerid)
{
    if(GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0)
	{
		for(new i = 0; i < MAX_TURFS; i ++)
		{
			if(TurfInfo[i][tExists] && IsPlayerInDynamicArea(playerid, TurfInfo[i][tArea]))
			{
			    return i;
			}
		}
	}
	return -1;
}

GetNearbyPoint(playerid, Float:radius = 3.0)
{
    for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && IsPlayerInRangeOfPoint(playerid, radius, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]) && GetPlayerInterior(playerid) == PointInfo[i][pPointInterior] && GetPlayerVirtualWorld(playerid) == PointInfo[i][pPointWorld])
		{
		    return i;
		}
	}
	return -1;
}

GetTurfColor(turfid)
{
	if(TurfInfo[turfid][tCapturedGang] >= 0)
	{
	    return (GangInfo[TurfInfo[turfid][tCapturedGang]][gColor] & ~0xff) + 0xAA;
	}

	return 0x000000AA;
}

ReloadTurf(turfid)
{
	if(TurfInfo[turfid][tExists])
	{
	    DestroyDynamicArea(TurfInfo[turfid][tArea]);
	    GangZoneDestroy(TurfInfo[turfid][tGangZone]);

	    TurfInfo[turfid][tArea] = CreateDynamicRectangle(TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tMaxX], TurfInfo[turfid][tMaxY]);
	    TurfInfo[turfid][tGangZone] = GangZoneCreateEx(TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tMaxX], TurfInfo[turfid][tMaxY]);

	    foreach(new i : Player)
	    {
	        if(pData[i][pShowTurfs])
	        {
	            ShowTurfsOnMap(i, true);
			}
		}
	}
}
GetNearbyEntranceEx(playerid)
{
	return GetNearbyEntrance(playerid) == -1 ? GetInsideEntrance(playerid) : GetNearbyEntrance(playerid);
}

GetNearbyEntrance(playerid)
{
	for(new i = 0; i < MAX_ENTRANCES; i ++)
	{
	    if(EntranceInfo[i][eExists] && IsPlayerInRangeOfPoint(playerid, EntranceInfo[i][eRadius], EntranceInfo[i][ePosX], EntranceInfo[i][ePosY], EntranceInfo[i][ePosZ]) && GetPlayerInterior(playerid) == EntranceInfo[i][eOutsideInt] && GetPlayerVirtualWorld(playerid) == EntranceInfo[i][eOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideEntrance(playerid)
{
	for(new i = 0; i < MAX_ENTRANCES; i ++)
	{
	    if(EntranceInfo[i][eExists] && IsPlayerInRangeOfPoint(playerid, 100.0, EntranceInfo[i][eIntX], EntranceInfo[i][eIntY], EntranceInfo[i][eIntZ]) && GetPlayerInterior(playerid) == EntranceInfo[i][eInterior] && GetPlayerVirtualWorld(playerid) == EntranceInfo[i][eWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetEntranceOwner(entranceid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(EntranceInfo[entranceid][eOwner], "Nobody", MAX_PLAYER_NAME);
	    EntranceInfo[entranceid][eOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, EntranceInfo[entranceid][eOwner], MAX_PLAYER_NAME);
	    EntranceInfo[entranceid][eOwnerID] = pData[playerid][pID];
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET ownerid = %i, owner = '%s' WHERE id = %i", EntranceInfo[entranceid][eOwnerID], EntranceInfo[entranceid][eOwner], EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadEntrance(entranceid);
}

ReloadEntrance(entranceid)
{
	if(EntranceInfo[entranceid][eExists])
	{
	    new
	        string[128];

		DestroyDynamic3DTextLabel(EntranceInfo[entranceid][eText]);
		DestroyDynamicPickup(EntranceInfo[entranceid][ePickup]);
		DestroyDynamicMapIcon(EntranceInfo[entranceid][eMapIconID]);

		if(EntranceInfo[entranceid][eLabel])
		{
			if(EntranceInfo[entranceid][eOwnerID])
			{
			    format(string, sizeof(string), "%s\nOwned by %s\n"WHITE"%s %d", EntranceInfo[entranceid][eName], EntranceInfo[entranceid][eOwner], GetZoneName(EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]), entranceid);
			}
			else
			{
		        format(string, sizeof(string), "%s\n"WHITE"%s %d", EntranceInfo[entranceid][eName], GetZoneName(EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]), entranceid);
			}

			EntranceInfo[entranceid][eText] = CreateDynamic3DTextLabel(string, COLOR_GREY, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], (EntranceInfo[entranceid][eIcon] == 19902) ? (EntranceInfo[entranceid][ePosZ] + 0.1) : (EntranceInfo[entranceid][ePosZ]), 10.0, .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);
        }

		EntranceInfo[entranceid][ePickup] = CreateDynamicPickup(EntranceInfo[entranceid][eIcon], 1, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], (EntranceInfo[entranceid][eIcon] == 19902) ? (EntranceInfo[entranceid][ePosZ] - 1.0) : (EntranceInfo[entranceid][ePosZ]), .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);

		if(EntranceInfo[entranceid][eMapIcon])
		{
		    EntranceInfo[entranceid][eMapIconID] = CreateDynamicMapIcon(EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ], EntranceInfo[entranceid][eMapIcon], 0, .worldid = EntranceInfo[entranceid][eOutsideVW], .interiorid = EntranceInfo[entranceid][eOutsideInt]);
		}
	}
}

IsEntranceOwner(playerid, entranceid)
{
	return (EntranceInfo[entranceid][eOwnerID] == pData[playerid][pID]) || (EntranceInfo[entranceid][eOwnerID] > 0 && pData[playerid][pAdminDuty]);
}

GetClosestBusiness(playerid, type)
{
	new
	    Float:distance[2] = {99999.0, 0.0},
	    index = -1;

	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
		if((BusinessInfo[i][bExists] && BusinessInfo[i][bType] == type) && (BusinessInfo[i][bOutsideInt] == 0 && BusinessInfo[i][bOutsideVW] == 0))
		{
			distance[1] = GetPlayerDistanceFromPoint(playerid, BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]);

			if(distance[0] > distance[1])
			{
			    distance[0] = distance[1];
			    index = i;
			}
		}
	}

	return index;
}

GetNearbyBusinessEx(playerid)
{
	return GetNearbyBusiness(playerid) == -1 ? GetInsideBusiness(playerid) : GetNearbyBusiness(playerid);
}

GetNearbyBusiness(playerid, Float:radius = 2.0)
{
	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists] && IsPlayerInRangeOfPoint(playerid, radius, BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]) && GetPlayerInterior(playerid) == BusinessInfo[i][bOutsideInt] && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideBusiness(playerid)
{
	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists] && IsPlayerInRangeOfPoint(playerid, 100.0, BusinessInfo[i][bIntX], BusinessInfo[i][bIntY], BusinessInfo[i][bIntZ]) && GetPlayerInterior(playerid) == BusinessInfo[i][bInterior] && GetPlayerVirtualWorld(playerid) == BusinessInfo[i][bWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetBusinessOwner(businessid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(BusinessInfo[businessid][bOwner], "Nobody", MAX_PLAYER_NAME);
	    BusinessInfo[businessid][bOwnerID] = 0;
	}
	else
	{
     	GetPlayerName(playerid, BusinessInfo[businessid][bOwner], MAX_PLAYER_NAME);
	    BusinessInfo[businessid][bOwnerID] = pData[playerid][pID];
	}

	BusinessInfo[businessid][bTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET timestamp = %i, ownerid = %i, owner = '%s' WHERE id = %i", BusinessInfo[businessid][bTimestamp], BusinessInfo[businessid][bOwnerID], BusinessInfo[businessid][bOwner], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadBusiness(businessid);
}
ReloadBusiness(businessid)
{
	if(BusinessInfo[businessid][bExists])
	{
	    new
	        string[128*2];

		DestroyDynamic3DTextLabel(BusinessInfo[businessid][bText]);
		DestroyDynamicPickup(BusinessInfo[businessid][bPickup]);
        DestroyDynamicMapIcon(BusinessInfo[businessid][bMapIcon]);

        if(BusinessInfo[businessid][bOwnerID] == 0)
        {
	        format(string, sizeof(string), "%s\n"BIZ"Cost: $%i\nEntry Fee: $%i\n"WHITE"%s %d", bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bPrice], BusinessInfo[businessid][bEntryFee], GetZoneName(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]), businessid);
		}
		else
		{
		    format(string, sizeof(string), "%s\n"BIZ"Owned by %s\nEntry Fee: $%i\n"WHITE"%s %d", BusinessInfo[businessid][bName], BusinessInfo[businessid][bOwner], BusinessInfo[businessid][bEntryFee], GetZoneName(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]),businessid);
		}

		switch(BusinessInfo[businessid][bType])
		{
		    case BUSINESS_STORE:{
				BusinessInfo[businessid][bText] = CreateDynamic3DTextLabel(string, BIZ_COLOR, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ] + 0.1, 5.0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(1274, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}
			case BUSINESS_GUNSHOP: 
			{
				BusinessInfo[businessid][bText] = CreateDynamic3DTextLabel(string, BIZ_COLOR, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ] + 0.1, 5.0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(2061, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}
		    case BUSINESS_CLOTHES:
			{
				BusinessInfo[businessid][bText] = CreateDynamic3DTextLabel(string, BIZ_COLOR, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ] + 0.1, 5.0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(1275, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}
			
			case BUSINESS_RESTAURANT:
			{
				BusinessInfo[businessid][bText] = CreateDynamic3DTextLabel(string, BIZ_COLOR, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ] + 0.1, 5.0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(1582, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}
			case BUSINESS_GYM: 	
			{
				BusinessInfo[businessid][bText] = CreateDynamic3DTextLabel(string, BIZ_COLOR, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ] + 0.1, 5.0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(1239, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}	
		    case BUSINESS_AGENCY: 	
			{
				BusinessInfo[businessid][bText] = CreateDynamic3DTextLabel(string, BIZ_COLOR, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ] + 0.1, 5.0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(19134, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}
		    case BUSINESS_BARCLUB: 
			{
				BusinessInfo[businessid][bText] = CreateDynamic3DTextLabel(string, BIZ_COLOR, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ] + 0.1, 5.0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
				BusinessInfo[businessid][bPickup] = CreateDynamicPickup(1644, 1, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt]);
			}

		}
		switch(BusinessInfo[businessid][bType])
		{
		    case BUSINESS_STORE: 		BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 17, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_GUNSHOP: 		BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 6, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_CLOTHES: 		BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 45, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_GYM: 			BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 54, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_RESTAURANT: 	BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 10, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
			case BUSINESS_AGENCY: 		BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 58, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		    case BUSINESS_BARCLUB: 		BusinessInfo[businessid][bMapIcon] = CreateDynamicMapIcon(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 49, 0, .worldid = BusinessInfo[businessid][bOutsideVW], .interiorid = BusinessInfo[businessid][bOutsideInt], .style = MAPICON_GLOBAL);
		   
	    }
	}  	  	
}

ShowBlood(playerid, time)
{
    for(new i = 0; i < 8;i++)
    {
		if(pData[playerid][pLogged] && !pData[playerid][pAdminDuty]  && !pData[playerid][pPaintball])
        {
        	TextDrawShowForPlayer(playerid, Blood[i]);
		}
    }
    Timer[playerid] = SetTimerEx("RemoveBlood", time*1000, false, "i", playerid);
    return 1;
}

IsBusinessOwner(playerid, businessid)
{
	return (BusinessInfo[businessid][bOwnerID] == pData[playerid][pID]) || (BusinessInfo[businessid][bOwnerID] > 0 && pData[playerid][pAdminDuty]);
}

IsGarageOwner(playerid, garageid)
{
	return (GarageInfo[garageid][gOwnerID] == pData[playerid][pID]) || (GarageInfo[garageid][gOwnerID] > 0 && pData[playerid][pAdminDuty]);
}

GetNearbyGarageEx(playerid)
{
	return GetNearbyGarage(playerid) == -1 ? GetInsideGarage(playerid) : GetNearbyGarage(playerid);
}

GetNearbyGarage(playerid)
{
	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists] && IsPlayerInRangeOfPoint(playerid, 4.0, GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]))
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideGarage(playerid)
{
	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists] && IsPlayerInRangeOfPoint(playerid, 50.0, garageInteriors[GarageInfo[i][gType]][intVX], garageInteriors[GarageInfo[i][gType]][intVY], garageInteriors[GarageInfo[i][gType]][intVZ]) && GetPlayerInterior(playerid) == garageInteriors[GarageInfo[i][gType]][intID] && GetPlayerVirtualWorld(playerid) == GarageInfo[i][gWorld])
	    {
	        return i;
		}
	}

	return -1;
}

ReloadGarage(garageid)
{
	if(GarageInfo[garageid][gExists])
	{
	    new string[128];

		DestroyDynamic3DTextLabel(GarageInfo[garageid][gText]);
		DestroyDynamicPickup(GarageInfo[garageid][gPickup]);

        if(GarageInfo[garageid][gOwnerID] == 0)
        {
	        format(string, sizeof(string), "%s Garage\nPrice: $%i\n> %i cars capacity <\n"WHITE"%s %d", garageInteriors[GarageInfo[garageid][gType]][intName],GarageInfo[garageid][gPrice], GarageInfo[garageid][gType] + 1,GetZoneName(GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]),garageid);
		}
		else
		{
		    format(string, sizeof(string), "%s Garage\nOwned by %s\n> %i cars capacity <\n"WHITE"%s %d", garageInteriors[GarageInfo[garageid][gType]][intName],GarageInfo[garageid][gOwner], GarageInfo[garageid][gType] + 1,GetZoneName(GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]),garageid);
		}

		GarageInfo[garageid][gText] = CreateDynamic3DTextLabel(string, 0xc1ff75ff, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ] + 0.1, 10.0);
        GarageInfo[garageid][gPickup] = CreateDynamicPickup(1316, 1, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	}
}

SetGarageOwner(garageid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(GarageInfo[garageid][gOwner], "Nobody", MAX_PLAYER_NAME);
	    GarageInfo[garageid][gOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, GarageInfo[garageid][gOwner], MAX_PLAYER_NAME);
	    GarageInfo[garageid][gOwnerID] = pData[playerid][pID];
	}

	GarageInfo[garageid][gTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET timestamp = %i, ownerid = %i, owner = '%s' WHERE id = %i", GarageInfo[garageid][gTimestamp], GarageInfo[garageid][gOwnerID], GarageInfo[garageid][gOwner], GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadGarage(garageid);
}
HasFurniturePerms(playerid, houseid)
{
	return IsHouseOwner(playerid, houseid) || pData[playerid][pFurniturePerms] == houseid;
}
IsHouseOwner(playerid, houseid)
{
	return (HouseInfo[houseid][hOwnerID] == pData[playerid][pID]) || (HouseInfo[houseid][hOwnerID] > 0 && pData[playerid][pAdminDuty]);
}

GetVehicleStashCapacity(vehicleid, item)
{

	static const stashCapacities[][] = {
		// Cash   	Mats    WEED    CRACK   METH    PK   	HP   	PT   	FMJ  WEP
	    {500000,	10000,	100,	100,  	50,  	10,  	80,  	60,  	50,  3}, // level 1
	    {1000000,	20000,  200,	200,  	100, 	20, 	100, 	80,  	60,  4}, // level 2
	    {1500000,	30000,  300,	300,  	150, 	30, 	125, 	100, 	70,  5}  // level 3
	};

	if(VehicleInfo[vehicleid][vTrunk] > 0)
	{
		return stashCapacities[VehicleInfo[vehicleid][vTrunk] - 1][item];
	}

	return 0;
}
GetBackpackCapacity(playerid, item)
{
	static const stashCapacities[][] = {
		// Cash   	Mats    WEED    CRACK   METH    PK   	HP   	PT   	FMJ  WEP
	    {30000,		5000,	25,		25,  	10,  	5,  	80,  	60,  	50,  4}, // level 1
	    {55000,		10000,  50,		50,  	25, 	10, 	100, 	80,  	60,  8}, // level 2
	    {120000,	25000,  100,	75,  	50, 	20, 	125, 	100, 	70,  12}  // level 3
	};

	if(pData[playerid][pBackpack] > 0)
	{
		return stashCapacities[pData[playerid][pBackpack] - 1][item];
	}

	return 0;
}
GetGangStashCapacity(gangid, item)
{
	static const stashCapacities[][] = {
		// Cash   	Mats    WEED    CRACK   METH    PK   	HP   	PT   	FMJ  WEP
		{100000000, 	10000000, 500,  	500,  	250,  	50,  	1000, 	500,  	250},
		{200000000, 	20000000, 1000, 	1000, 	500,  	100, 	1500, 	1000, 	500},
		{300000000, 	30000000, 1500, 	1500, 	1000, 	250, 	2000, 	1500, 	1000}
	};

	return stashCapacities[GangInfo[gangid][gLevel] - 1][item];
}

GetHouseStashCapacity(houseid, item)
{
	static const stashCapacities[][] = {
		// Cash   	Mats    WEED    CRACK   METH    PK   	HP   	PT   	FMJ  WEP
	    {500000,	10000,	100,	100,  	50,  	10,  	80,  	60,  	50,  2}, // level 1
	    {1000000,	20000,  200,	200,  	100, 	20, 	100, 	80,  	60,  4}, // level 2
	    {1500000,	30000,  300,	300,  	150, 	30, 	125, 	100, 	70,  6},  // level 3
	    {2000000,  	40000,  400, 	400, 	200,  	40, 	140, 	120, 	80,  8}, // level 4
	    {2500000, 	50000, 	500, 	500, 	250, 	50, 	160, 	140, 	90, 10} // level 5
	};

	return stashCapacities[HouseInfo[houseid][hLevel] - 1][item];
}

GetHouseTenantCapacity(houseid)
{
	switch(HouseInfo[houseid][hLevel])
	{
	    case 0: return 2;
	    case 1: return 4;
	    case 2: return 6;
	    case 3: return 8;
	    case 4: return 10;
	    case 5: return 12;
	}

	return 0;
}

GetHouseFurnitureCapacity(houseid)
{
	switch(HouseInfo[houseid][hLevel])
	{
	    case 0: return 100;
	    case 1: return 200;
	    case 2: return 300;
	    case 3: return 400;
	    case 4: return 500;
	    case 5: return 600;
	}

	return 0;
}

GetRandomHouse(playerid) // For pizzaboy job.
{
	new index, houseIDs[MAX_HOUSES] = {-1, ...};

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && HouseInfo[i][hOutsideInt] == 0 && HouseInfo[i][hOutsideVW] == 0)
	    {
	        if(300.0 <= GetPlayerDistanceFromPoint(playerid, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]) <= 1200.0)
	        {
	        	houseIDs[index++] = i;
			}
		}
	}

	if(index == 0)
	{
	    return -1;
	}

	return houseIDs[random(index)];
}

GetNearbyHouseEx(playerid)
{
	return GetNearbyHouse(playerid) == -1 ? GetInsideHouse(playerid) : GetNearbyHouse(playerid);
}

GetNearbyHouse(playerid)
{
	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]) && GetPlayerInterior(playerid) == HouseInfo[i][hOutsideInt] && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hOutsideVW])
	    {
	        return i;
		}
	}

	return -1;
}

GetInsideHouse(playerid)
{
	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && IsPlayerInRangeOfPoint(playerid, 100.0, HouseInfo[i][hIntX], HouseInfo[i][hIntY], HouseInfo[i][hIntZ]) && GetPlayerInterior(playerid) == HouseInfo[i][hInterior] && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hWorld])
	    {
	        return i;
		}
	}

	return -1;
}

SetHouseOwner(houseid, playerid)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    strcpy(HouseInfo[houseid][hOwner], "Nobody", MAX_PLAYER_NAME);
	    HouseInfo[houseid][hOwnerID] = 0;
	}
	else
	{
	    GetPlayerName(playerid, HouseInfo[houseid][hOwner], MAX_PLAYER_NAME);
	    HouseInfo[houseid][hOwnerID] = pData[playerid][pID];
	}

	HouseInfo[houseid][hTimestamp] = gettime();

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET timestamp = %i, ownerid = %i, owner = '%s' WHERE id = %i", HouseInfo[houseid][hTimestamp], HouseInfo[houseid][hOwnerID], HouseInfo[houseid][hOwner], HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
}
RemoveFurniture(objectid)
{
    if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_FURNITURE)
	{
 		new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteFurnitureObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM furniture WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer);
	}
}

DeleteFurnitureObject(objectid)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_FURNITURE)
	{
    	new Text3D:textid = Text3D:Streamer_GetExtraInt(objectid, E_OBJECT_3DTEXT_ID);

        if(IsValidDynamic3DTextLabel(textid))
        {
            DestroyDynamic3DTextLabel(textid);
        }

        DestroyDynamicObject(objectid);
	}
}

RemoveAllFurniture(houseid)
{
    if(HouseInfo[houseid][hExists])
	{
	    for(new i = 0; i <= Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
	        {
             	DeleteFurnitureObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
		mysql_tquery(connectionID, queryBuffer);
	}
}

ReloadFurniture(objectid, labels)
{
	if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_FURNITURE)
	{
	    new
	        id = Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID);

	    DeleteFurnitureObject(objectid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM furniture WHERE id = %i", id);
	    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, labels);
	}
}
ReloadAllFurniture(houseid)
{
    if(HouseInfo[houseid][hExists])
	{
	    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	    {
	        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
	        {
             	DeleteFurnitureObject(i);
			}
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, HouseInfo[houseid][hLabels]);
	}
}
ReloadHouse(houseid)
{
	if(HouseInfo[houseid][hExists])
	{
	    new
	        housestring[128*2],
			type[16];

		DestroyDynamic3DTextLabel(HouseInfo[houseid][hText]);
		DestroyDynamicPickup(HouseInfo[houseid][hPickup]);
		DestroyDynamicPickup(HouseInfo[houseid][hMapIcon]);
		
		if(HouseInfo[houseid][hType] == -1)
		{
		    type = "Other";
		}
		else
		{
		    strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
		}

        if(HouseInfo[houseid][hOwnerID] == 0)
        {
	        format(housestring, sizeof(housestring), ""TEAL"[For Sale]"WHITE"\n"LIGHTRED"Price: "GREEN"$%i\n"WHITE"%s %d", HouseInfo[houseid][hPrice], GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]), houseid);
			HouseInfo[houseid][hText] = CreateDynamic3DTextLabel(housestring, 0xffea5eff, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ] + 0.1, 10.0, .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
			HouseInfo[houseid][hPickup] = CreateDynamicPickup(19524, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
			HouseInfo[houseid][hMapIcon] = CreateDynamicMapIcon(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 31, 1, -1, -1, -1, 45.0);
		}
		else
		{
		    if(HouseInfo[houseid][hRentPrice] > 0)
		    {
		        format(housestring, sizeof(housestring), "%s\nHouse Level: %i\nOwned by %s\nRent Cost: $%i\n"WHITE"%s %d", type, HouseInfo[houseid][hLevel], HouseInfo[houseid][hOwner], HouseInfo[houseid][hRentPrice], GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]), houseid);
		    }
		    else
		    {
			    format(housestring, sizeof(housestring), "%s\nHouse Level: %i\nOwned by %s\n"WHITE"%s %d", type, HouseInfo[houseid][hLevel], HouseInfo[houseid][hOwner], GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]), houseid);
			}
			HouseInfo[houseid][hText] = CreateDynamic3DTextLabel(housestring, 0xff3838ff, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ] + 0.1, 10.0, .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
	        HouseInfo[houseid][hPickup] = CreateDynamicPickup(19522, 1, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], .worldid = HouseInfo[houseid][hOutsideVW], .interiorid = HouseInfo[houseid][hOutsideInt]);
			HouseInfo[houseid][hMapIcon] = CreateDynamicMapIcon(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 32, 1, -1, -1, -1, 45.0);
		}

	}
}
GetPBPlayers1()
{
	new players;
	foreach(new i : Player)
	{
	    if(pData[i][pPaintball])
	    {
	        players++;
	    }
	}
	return players;
}

ShowSafeZoneOnMap(playerid, enable)
{
	for(new i=0; i<MAX_SAFEZONE; i++)
	{
		if(SafeZoneInfo[i][SZExists])
		{
			if(enable)
			{
				TogglePlayerDynamicArea(playerid, SafeZoneInfo[i][SArea], 1);
				GangZoneShowForPlayer(playerid, SafeZoneInfo[i][Szone], 0x00AA00AA);
			}
			else {
				TogglePlayerDynamicArea(playerid, SafeZoneInfo[i][SArea], 0);
				GangZoneHideForPlayer(playerid, SafeZoneInfo[i][Szone]);
			}
		}
	}
}

ReloadSafeZone(id)
{
    if(SafeZoneInfo[id][SZExists])
    {
        DestroyDynamicArea(SafeZoneInfo[id][SArea]);
		GangZoneDestroy(SafeZoneInfo[id][Szone]);

	    SafeZoneInfo[id][SArea] = CreateDynamicRectangle(SafeZoneInfo[id][SMinX], SafeZoneInfo[id][SMinY], SafeZoneInfo[id][SMaxX], SafeZoneInfo[id][SMaxY]);
	    SafeZoneInfo[id][Szone] = GangZoneCreateEx(SafeZoneInfo[id][SMinX], SafeZoneInfo[id][SMinY], SafeZoneInfo[id][SMaxX], SafeZoneInfo[id][SMaxY]);
	}

	foreach(new i : Player)
	{
		ShowSafeZoneOnMap(i, true);
	}
}

IsPlayerInsideOfSafeZone(playerid)
{
    for(new i=0; i<MAX_SAFEZONE; i++)
    {
    	if(SafeZoneInfo[i][SZExists])
    	{
	        if(SafeZoneInfo[i][SZExists] && IsPlayerInDynamicArea(playerid, SafeZoneInfo[i][SArea]))
			{
			    return i;
			}
	    }
    }
    return -1;
}

IsNumeric(const string[])
{
	new
		len = strlen(string),
		i;

	if(string[0] == '-') i = 1;

	while(i < len)
	{
	    if(!('0' <= string[i++] <= '9'))
	        return 0;
	}

	return 1;
}

GetVehicleParams(vehicleid, param)
{
	new
	    params[7];

	GetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);
	return params[param] == VEHICLE_PARAMS_ON;
}

SetVehicleParams(vehicleid, param, status)
{
	new
	    params[7];

	GetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);

	params[param] = status;

	return SetVehicleParamsEx(vehicleid, params[0], params[1], params[2], params[3], params[4], params[5], params[6]);
}

Float:GetVehicleSpeed(vehicleid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	if(GetVehicleVelocity(vehicleid, x, y, z))
	{
		return floatsqroot((x * x) + (y * y) + (z * z)) * 181.5;
	}

	return 0.0;
}

VehicleHasWindows(vehicleid)
{
    static const vehicleWindows[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
		1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0,
		0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
		0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
		1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1,
		0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};

	new
	    model = GetVehicleModel(vehicleid);

	if(400 <= model <= 611)
	{
	    return vehicleWindows[model - 400];
	}

	return 0;
}

VehicleHasEngine(vehicleid)
{
	static const vehicleEngines[] = {
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
		1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};

	new
	    modelid = GetVehicleModel(vehicleid);

	if(400 <= modelid <= 611)
	{
		return vehicleEngines[modelid - 400];
	}

	return 0;
}

GetVehicleSeatCount(vehicleid)
{
    static const vehicleSeats[] =
	{
		4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
		1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4,
		4, 2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2,
		2, 4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2,
		1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4,
		2, 2, 4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2,
		4, 4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0,
		4, 0, 0
	};

	new
	    modelid = GetVehicleModel(vehicleid);

	if(400 <= modelid <= 611)
	{
		return vehicleSeats[modelid - 400];
	}

	return 0;
}

IsSeatOccupied(vehicleid, seatid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seatid)
	    {
	        return 1;
		}
	}

	return 0;
}
GetVehicleName(vehicleid)
{
	new
		modelid = GetVehicleModel(vehicleid),
		name[32];

	if(400 <= modelid <= 611)
	    strcat(name, vehicleNames[modelid - 400]);
	else
	    name = "Unknown";

	return name;
}

GetVehicleModelByName(const string[])
{
	new
	    modelid = strval(string);

	if(400 <= modelid <= 611)
	{
	    return modelid;
	}

	for(new i = 0; i < sizeof(vehicleNames); i ++)
	{
		if(strfind(vehicleNames[i], string, true) != -1)
  		{
			return i + 400;
		}
	}

	return 0;
}

GetVehicleDriver(vehicleid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
	    {
	        return i;
		}
	}

	return INVALID_PLAYER_ID;
}
IsACluckNBellVehicle(carid)
{
	for(new v = 0; v < sizeof(pizzaVehicles); v++)
	{
	    if(carid == pizzaVehicles[v]) return 1;
	}
	return 0;
}


IsCourierVehicle(carid)
{
	
	for(new v = 0; v < sizeof(lummberveh); v++)
	{
	    if(carid == lummberveh[v]) return 1;
	}
	return 0;
}
IsCourierVehicle1(carid)
{
	for(new v = 0; v < sizeof(courierVehicles); v++)
	{
	    if(carid == courierVehicles[v]) return 1;
	}

	return 0;
}

IsCourierVehicle2(carid)
{
	for(new v = 0; v < sizeof(garbageVehicles); v++)
	{
	    if(carid == garbageVehicles[v]) return 1;
	}


	return 0;
}

IsVehicleOccupied(vehicleid)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
	    {
	        return 1;
		}
	}

	return 0;
}

AnticheatCheck(playerid)
{
	if(gettime() > pData[playerid][pACTime] && !pData[playerid][pKicked])
	{
	    // Speedhacking
		if((gAnticheat) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleSpeed(GetPlayerVehicleID(playerid)) > 300 && pData[playerid][pAdmin] < 7)
		{
		    pData[playerid][pACWarns]++;

		    if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		    {
		        SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] is possibly speedhacking, speed: %.1f km/h.", GetRPName(playerid), playerid, GetVehicleSpeed(GetPlayerVehicleID(playerid)));
		        Log_Write("log_cheat", "%s (uid: %i) possibly speedhacked, speed: %.1f km/h", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleSpeed(GetPlayerVehicleID(playerid)));
				
				new szString[528];
				format(szString, sizeof(szString), "%s[%i] is possibly speedhacking, speed: %.1f km/h.",  GetRPName(playerid), playerid, GetVehicleSpeed(GetPlayerVehicleID(playerid)));
				SendDiscordMessage(22, szString); 
			}
			else
			{
			    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was auto-kicked by %s, reason: Speed hacking", GetRPName(playerid), SERVER_BOT);
			    //BanPlayer(playerid, SERVER_BOT, "Speed hacking");
			    Kick(playerid);
			}
		}

		// Jetpack
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && pData[playerid][pAdmin] < 2 && !pData[playerid][pJetpack])
		{
		    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was auto-kicked by %s, reason: Jetpack", GetRPName(playerid), SERVER_BOT);
	    	//BanPlayer(playerid, SERVER_BOT, "Jetpack");
	    	Kick(playerid);
		}

		// Flying hacks
		if((gAnticheat) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			switch(GetPlayerAnimationIndex(playerid))
			{
			    case 958, 1538, 1539, 1543:
			    {
			        new
			            Float:z,
			            Float:vx,
			            Float:vy,
			            Float:vz;

					GetPlayerPos(playerid, z, z, z);
                    GetPlayerVelocity(playerid, vx, vy, vz);

                    if((z > 20.0) && (0.9 <= floatsqroot((vx * vx) + (vy * vy) + (vz * vz)) <= 1.9) && pData[playerid][pAdmin] < 2)
                    {
                        SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was auto-kicked by %s, reason: Flying hacks", GetRPName(playerid), SERVER_BOT);
	    				//BanPlayer(playerid, SERVER_BOT, "Flying hacks");
	    				Kick(playerid);
						new szString[528];
						format(szString, sizeof(szString), "%s was auto-kicked by bot, reason: Flying hacks", GetRPName(playerid));
						SendDiscordMessage(22, szString); 
					}
				}
			}
		}

		// Armor hacks
		if(!pData[playerid][pJoinedEvent] && !pData[playerid][pPaintball] && pData[playerid][pDueling] == INVALID_PLAYER_ID&& pData[playerid][pDueling1] == INVALID_PLAYER_ID)
		{
		    new
   				Float:armor;

			GetPlayerArmour(playerid, armor);

  			if(!(gettime() - pData[playerid][pLastUpdate] > 5))
  			{
				if(floatround(armor) > floatround(pData[playerid][pArmor]) && gettime() > pData[playerid][pACTime] && gettime() > pData[playerid][pArmorTime] && pData[playerid][pAdmin] < 7)
				{
		            pData[playerid][pACWarns]++;
	    	        pData[playerid][pArmorTime] = gettime() + 10;

				    if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
				    {
				        SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] is possibly armor hacking. (old: %.2f, new: %.2f)", GetRPName(playerid), playerid, pData[playerid][pArmor], armor);
				        Log_Write("log_cheat", "%s (uid: %i) possibly hacked armor. (old: %.2f, new: %.2f)", GetPlayerNameEx(playerid), pData[playerid][pID], pData[playerid][pArmor], armor);
					}
					else
					{
					    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was auto-kicked by %s, reason: Armor hacking", GetRPName(playerid), SERVER_BOT);
					    //BanPlayer(playerid, SERVER_BOT, "Armor hacking");
					    Kick(playerid);
					}
				}
			}

			pData[playerid][pArmor] = armor;
		}		
	}

	// Ammo hacks
	if(!pData[playerid][pJoinedEvent] && pData[playerid][pDueling] == INVALID_PLAYER_ID && pData[playerid][pDueling1] == INVALID_PLAYER_ID && !(pData[playerid][pTazer] && GetPlayerWeapon(playerid) == 23))
	{
	    new
			weapon,
			ammo;

		GetPlayerWeaponData(playerid, 8, weapon, ammo);

		if((16 <= weapon <= 18) && ammo <= 0)
		{
			RemovePlayerWeapon(playerid, weapon);
		}
	}

	// Warping into vehicles while locked
	/*if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleParams(GetPlayerVehicleID(playerid), VEHICLE_DOORS) && (!IsVehicleOwner(playerid, GetPlayerVehicleID(playerid)) && pData[playerid][pVehicleKeys] != GetPlayerVehicleID(playerid)))
    {
        new
            Float:x,
            Float:y,
            Float:z;
        GetPlayerPos(playerid, x, y, z);
        SetPlayerPos(playerid, x, y, z + 1.0);
        GameTextForPlayer(playerid, "~r~This vehicle is locked!", 3000, 3);
    }*/
}

IsAnIP(ip[])
{
	new part[4];

	if(!sscanf(ip, "p<.>iiii", part[0], part[1], part[2], part[3]))
	{
	    return (0 <= part[0] <= 255) && (0 <= part[1] <= 255) && (0 <= part[2] <= 255) && (0 <= part[3] <= 255);
	}
	else if(!sscanf(ip, "p<.>iicc", part[0], part[1], part[2], part[3]))
	{
	    return (0 <= part[0] <= 255) && (0 <= part[1] <= 255) && (part[2] == '*' && part[3] == '*');
	}

	return 0;
}

IsValidName(name[])
{
	for(new i = 0, j = strlen(name); i < j; i ++)
	{
	    if(!(3 <= j <= MAX_PLAYER_NAME))
	        return 0;

	    switch(name[i])
	    {
	        case 'A'..'Z', 'a'..'z', '0'..'9', '_', '.', '[', ']', '(', ')', '=', '@':
	        {
	            continue;
			}
			default:
			{
			    return 0;
			}
		}
	}

	return 1;
}

IsValidModel(modelid)
{
    static modeldat[] =
	{
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128,
        -515899393, -134217729, -1, -1, 33554431, -1, -1, -1, -14337, -1, -33,
      	127, 0, 0, 0, 0, 0, -8388608, -1, -1, -1, -16385, -1, -1, -1, -1, -1,
       -1, -1, -33, -1, -771751937, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, 33554431, -25, -1, -1, -1, -1, -1, -1,
       -1073676289, -2147483648, 34079999, 2113536, -4825600, -5, -1, -3145729,
       -1, -16777217, -63, -1, -1, -1, -1, -201326593, -1, -1, -1, -1, -1,
       -257, -1, 1073741823, -133122, -1, -1, -65, -1, -1, -1, -1, -1, -1,
       -2146435073, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1073741823, -64, -1,
       -1, -1, -1, -2635777, 134086663, 0, -64, -1, -1, -1, -1, -1, -1, -1,
       -536870927, -131069, -1, -1, -1, -1, -1, -1, -1, -1, -16384, -1,
       -33554433, -1, -1, -1, -1, -1, -1610612737, 524285, -128, -1,
       2080309247, -1, -1, -1114113, -1, -1, -1, 66977343, -524288, -1, -1, -1,
       -1, -2031617, -1, 114687, -256, -1, -4097, -1, -4097, -1, -1,
       1010827263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32768, -1, -1, -1, -1, -1,
       2147483647, -33554434, -1, -1, -49153, -1148191169, 2147483647,
       -100781080, -262145, -57, 134217727, -8388608, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1048577, -1, -449, -1017, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1835009, -2049, -1, -1, -1, -1, -1, -1,
       -8193, -1, -536870913, -1, -1, -1, -1, -1, -87041, -1, -1, -1, -1, -1,
       -1, -209860, -1023, -8388609, -2096897, -1, -1048577, -1, -1, -1, -1,
       -1, -1, -897, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1610612737,
       -3073, -28673, -1, -1, -1, -1537, -1, -1, -13, -1, -1, -1, -1, -1985,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1056964609, -1, -1, -1,
       -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -236716037, -1, -1, -1, -1, -1, -1, -1, -536870913, 3, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -2097153, -2109441, -1, 201326591, -4194304, -1, -1,
       -241, -1, -1, -1, -1, -1, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, -32768, -1, -1, -1, -2, -671096835, -1, -8388609, -66323585, -13,
       -1793, -32257, -247809, -1, -1, -513, 16252911, 0, 0, 0, -131072,
       33554383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8356095, 0, 0, 0, 0, 0,
       0, -256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -268435449, -1, -1, -2049, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       92274627, -65536, -2097153, -268435457, 591191935, 1, 0, -16777216, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127
	};

	if((modelid >= 0) && ((modelid / 32) < sizeof (modeldat)) && (modeldat[modelid / 32] & (1 << (modelid % 32))))
  	{
   	    return 1;
	}

	if((18632 <= modelid <= 19999) || (11682 <= modelid <= 11753))
	{
	    return 1;
	}

 	return 0;
}

forward SetVehicleEngine(vehicleid, playerid);
public SetVehicleEngine(vehicleid, playerid)
{
	if(pData[playerid][pLogged])
	{
	    pData[playerid][pEngine] = 0;
		SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns on the engine of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

forward SetVehicleEngineHotwire(vehicleid, playerid);
public SetVehicleEngineHotwire(vehicleid, playerid)
{
	if(pData[playerid][pLogged])
	{
	    pData[playerid][pEngine] = 0;
		SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has successfully hotwired the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

IsPlayerOnline(const name[], &id = INVALID_PLAYER_ID)
{
	foreach(new i : Player)
	{
	    if(!strcmp(GetPlayerNameEx(i), name) && pData[i][pLogged])
	    {
	        id = i;
	        return 1;
		}
	}

	id = INVALID_PLAYER_ID;
	return 0;
}

IsPlayerAimingEx(playerid)
{
    new
		keys,
		ud,
		lr;

	GetPlayerKeys(playerid, keys, ud, lr);

	if((keys & KEY_HANDBRAKE) & KEY_HANDBRAKE && (22 <= GetPlayerWeapon(playerid) <= 38))
	{
		switch(GetPlayerAnimationIndex(playerid))
		{
			case 1160..1167, 360..363, 220, 640, 1189, 1331, 1365, 1453, 1449, 1643:
			{
			    return 1;
			}
		}
	}

	return 0;
}

/*IsPointInRangeOfPoint(Float:x1, Float:y1, Float:z1, Float:radius, Float:x2, Float:y2, Float:z2)
{
	x1 -= x2;
	y1 -= y2;
	z1 -= z2;

	return ((x1 * x1) + (y1 * y1) + (z1 * z1)) < (radius * radius);
}

IsVehicleInGarage(vehicleid, garageid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetVehiclePos(vehicleid, x, y, z);

	return IsPointInRangeOfPoint(x, y, z, 50.0, garageInteriors[GarageInfo[garageid][gType]][intVX], garageInteriors[GarageInfo[garageid][gType]][intVY], garageInteriors[GarageInfo[garageid][gType]][intVZ]) && GetVehicleVirtualWorld(vehicleid) == GarageInfo[garageid][gWorld];
}*/


IsPlayerInMiningArea(playerid)
{
    for(new i = 0; i < sizeof(minerPositions); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, minerPositions[i][0], minerPositions[i][1], minerPositions[i][2]))
	    {
	    	return 1;
	    }
	}

	return 0;
}
IsPlayerInButchergArea(playerid)
{
    for(new i = 0; i < sizeof(butcherPositions); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, butcherPositions[i][0], butcherPositions[i][1], butcherPositions[i][2]))
	    {
	    	return 1;
	    }
	}

	return 0;
}
IsPlayerInATMArea(playerid)
{

    for(new i = 0; i < sizeof(atmMachines); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ]))
		{
	    	return 1;	
		}
	}	
	return 0;
}
IsPlayerCleanarea(playerid)
{
	for(new i = 0; i < sizeof(cleanpoint); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, cleanpoint[i][0], cleanpoint[i][1], cleanpoint[i][2]))
	    {
	    	return 1;
	    }
	}
	return 0;
}
IsPlayerInGarbageArea(playerid)
{
    for(new i = 0; i < sizeof(garbageposition); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, garbageposition[i][0], garbageposition[i][1], garbageposition[i][2]))
	    {
	    	return 1;
	    }
	}

	return 0;
}
IsPlayerInDemolitionArea(playerid)
{
    for(new i = 0; i < sizeof(DemolitionPositions); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, DemolitionPositions[i][0], DemolitionPositions[i][1], DemolitionPositions[i][2]))
	    {
	    	return 1;
	    }
	}

	return 0;
}
IsPlayerInTuneArea(playerid)
{
    for(new i = 0; i < sizeof(tunePositions); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, tunePositions[i][0], tunePositions[i][1], tunePositions[i][2]))
	    {
	    	return 1;
	    }
	}

	return 0;
}
IsPlayaerInBshot(playerid)
{
    for(new i = 0; i < sizeof(bshotpositions); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, bshotpositions[i][0], bshotpositions[i][1], bshotpositions[i][2]))
	    {
	    	return 1;
	    }
	}

	return 0;
}

forward hidetextdraw2(playerid);
public hidetextdraw2(playerid)
{
     TextDrawHideForAll(TextdrawPURGE); // Destroy the created text draw.
     TextDrawHideForAll(TextdrawPURGE1); // Destroy the created text draw.
     TextDrawHideForAll(TextdrawPURGE2); // Destroy the created text draw.
     TextDrawHideForAll(TextdrawPURGE3); // Destroy the created text draw.
     TextDrawHideForAll(TextdrawPURGE4); // Destroy the created text draw.
     TextDrawHideForAll(TextdrawPURGE5); // Destroy the created text draw.
     TextDrawHideForAll(TextdrawPURGE6); // Destroy the created text draw.
     TextDrawHideForAll(TextdrawPURGE7); // Destroy the created text draw.
     TextDrawHideForAll(TextdrawPURGE8); // Destroy the created text draw.
     TextDrawHideForAll(TextdrawPURGE9); // Destroy the created text draw.
     TextDrawHideForAll(TextdrawPURGE10); // Destroy the created text draw.
     return 1;
}

forward Checkin(playerid);
public Checkin(playerid)
{
    /*new hospital[32];
	$switch(pData[playerid][pHospitalType])
	{
	    case HOSPITAL_COUNTY: strcat(hospital, "All Saints General");
	    case HOSPITAL_ALLSAINTS: strcat(hospital, "County General");
	}*/
	new rand = random(sizeof(hospitalspawns));
	SetFreezePos(playerid, hospitalspawns[rand][0], hospitalspawns[rand][1], hospitalspawns[rand][2]);
	TogglePlayerControllable(playerid, 1);
	SetPlayerFacingAngle(playerid, 89.7591);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	ClearAnimations(playerid, 1);
	//SetPlayerVirtualWorld(playerid, pData[playerid][pHospitalType]);
	SetCameraBehindPlayer(playerid);
	SetPlayerHealth(playerid, 100);
	pData[playerid][pBrokenLeg] = 0;
	return 1;
}
forward Checkin2(playerid);
public Checkin2(playerid)
{
    /*new hospital[32];
	$switch(pData[playerid][pHospitalType])
	{
	    case HOSPITAL_COUNTY: strcat(hospital, "All Saints General");
	    case HOSPITAL_ALLSAINTS: strcat(hospital, "County General");
	}*/
	//new rand = random(sizeof(hospitalspawns));
	SetFreezePos(playerid, 1577.0229, 529.3601, 502.9909);
	TogglePlayerControllable(playerid, 1);
	SetPlayerFacingAngle(playerid, 89.7591);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	ClearAnimations(playerid, 1);
	SetCameraBehindPlayer(playerid);
	SetPlayerHealth(playerid, 100);
	pData[playerid][pBrokenLeg] = 0;
	return 1;
}
IsPlayerAtFuelStation(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 12.0, 1004.0070, -939.3102, 42.1797) || IsPlayerInRangeOfPoint(playerid, 12.0, 1944.3260, -1772.9254, 13.3906) || IsPlayerInRangeOfPoint(playerid, 12.0, -90.5515, -1169.4578, 2.4079) || IsPlayerInRangeOfPoint(playerid, 12.0, -1609.7958, -2718.2048, 48.5391)) {
        return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, -2029.4968, 156.4366, 28.9498) || IsPlayerInRangeOfPoint(playerid, 12.0, -2408.7590, 976.0934, 45.4175) || IsPlayerInRangeOfPoint(playerid, 12.0, -2243.9629, -2560.6477, 31.8841) || IsPlayerInRangeOfPoint(playerid, 12.0, -1676.6323, 414.0262, 6.9484)) {
	    return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, 2202.2349, 2474.3494, 10.5258) || IsPlayerInRangeOfPoint(playerid, 12.0, 614.9333, 1689.7418, 6.6968) || IsPlayerInRangeOfPoint(playerid, 12.0, -1328.8250, 2677.2173, 49.7665) || IsPlayerInRangeOfPoint(playerid, 12.0, 70.3882, 1218.6783, 18.5165)) {
	    return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 12.0, 654.9641, -559.7485, 16.5015) || IsPlayerInRangeOfPoint(playerid, 12.0, 654.9617, -570.4176, 16.5015) || IsPlayerInRangeOfPoint(playerid, 12.0, 1382.9899, 461.9903, 20.1245) || IsPlayerInRangeOfPoint(playerid, 12.0, 1380.9395, 457.2494, 19.9260) || IsPlayerInRangeOfPoint(playerid, 12.0, -2238.9214, -1714.1272, 480.2734)) {
	    return 1;
	}

	return 0;
}

IsPlayerAtFishingPlace(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 1.0, 403.8266, -2088.7598, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 398.7553, -2088.7490, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 396.2197, -2088.6692, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 391.1094, -2088.7976, 7.8359)) {
		return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 1.0, 383.4157, -2088.7849, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 374.9598, -2088.7979, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 369.8107, -2088.7927, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 367.3637, -2088.7925, 7.8359)) {
	    return 1;
	} else if(IsPlayerInRangeOfPoint(playerid, 1.0, 362.2244, -2088.7981, 7.8359) || IsPlayerInRangeOfPoint(playerid, 1.0, 354.5382, -2088.7979, 7.8359)) {
	    return 1;
	}

	return 0;
}

IsPlayerInRangeOfDynamicObject(playerid, objectid, Float:radius)
{
	if(IsValidDynamicObject(objectid))
	{
		new
		    interiorid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_INTERIOR_ID),
			worldid = Streamer_GetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_WORLD_ID),
		    Float:x,
		    Float:y,
		    Float:z;

		GetDynamicObjectPos(objectid, x, y, z);

		if(interiorid == -1) {
		    interiorid = GetPlayerInterior(playerid);
		} if(worldid == -1) {
		    worldid = GetPlayerVirtualWorld(playerid);
		}

		if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z) && GetPlayerInterior(playerid) == interiorid && GetPlayerVirtualWorld(playerid) == worldid)
		{
		    return 1;
		}
	}

	return 0;
}

IsPlayerInRangeOfPlayer(playerid, targetid, Float:radius)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

	if(IsPlayerInRangeOfPoint(playerid, radius, x, y, z) && GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
	{
	    return 1;
	}

	return 0;
}

SetMusicStream(type, extraid, url[])
{
	switch(type)
	{
	    case MUSIC_MP3PLAYER:
	    {
	        if(isnull(url) && pData[extraid][pStreamType] == type)
	        {
	            StopAudioStreamForPlayer(extraid);
	            pData[extraid][pStreamType] = MUSIC_NONE;
	        }
	        else
	        {
	            PlayAudioStreamForPlayer(extraid, url);
	            pData[extraid][pStreamType] = type;
	        }
		}
		case MUSIC_BOOMBOX:
		{
		    foreach(new i : Player)
		    {
		        if(pData[i][pBoomboxListen] == extraid)
		        {
				    if(isnull(url) && pData[i][pStreamType] == type)
				    {
				        StopAudioStreamForPlayer(i);
			            pData[i][pStreamType] = MUSIC_NONE;
			        }
			        else if(pData[i][pStreamType] == MUSIC_NONE || pData[i][pStreamType] == MUSIC_BOOMBOX)
			        {
			            PlayAudioStreamForPlayer(i, url);
			            pData[i][pStreamType] = type;
			        }
				}
			}

			strcpy(pData[extraid][pBoomboxURL], url, 128);
		}
		case MUSIC_VEHICLE:
		{
		    foreach(new i : Player)
		    {
		        if(IsPlayerInVehicle(i, extraid))
		        {
				    if(isnull(url) && pData[i][pStreamType] == type)
				    {
		        		StopAudioStreamForPlayer(i);
	            		pData[i][pStreamType] = MUSIC_NONE;
			        }
	    		    else if(pData[i][pStreamType] == MUSIC_NONE || pData[i][pStreamType] == MUSIC_VEHICLE)
			        {
	    		        PlayAudioStreamForPlayer(i, url);
	           		 	pData[i][pStreamType] = type;
					}
				}
			}

			strcpy(vehicleStream[extraid], url, 128);
		}
	}
}

DestroyPotPlant(playerid)
{
	if(pData[playerid][pPotPlanted])
	{
	    DestroyDynamicObject(pData[playerid][pPotObject]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET potplanted = 0, pottime = 0, potgrams = 0, pot_x = 0.0, pot_y = 0.0, pot_z = 0.0, pot_a = 0.0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[playerid][pPotPlanted] = 0;
	    pData[playerid][pPotTime] = 0;
	    pData[playerid][pPotGrams] = 0;
	    pData[playerid][pPotX] = 0.0;
	    pData[playerid][pPotY] = 0.0;
	    pData[playerid][pPotZ] = 0.0;
	    pData[playerid][pPotA] = 0.0;
	}
}

DestroyBoombox(playerid)
{
	if(pData[playerid][pBoomboxPlaced])
	{
    	DestroyDynamicObject(pData[playerid][pBoomboxObject]);
		DestroyDynamic3DTextLabel(pData[playerid][pBoomboxText]);

		pData[playerid][pBoomboxObject] = INVALID_OBJECT_ID;
		pData[playerid][pBoomboxText] = Text3D:INVALID_3DTEXT_ID;
        pData[playerid][pBoomboxPlaced] = 0;
        pData[playerid][pBoomboxURL] = 0;
	}
}

GetNearbyBoombox(playerid)
{
	foreach(new i : Player)
	{
	    if(pData[i][pBoomboxPlaced] && IsPlayerInRangeOfDynamicObject(playerid, pData[i][pBoomboxObject], 30.0))
	    {
	        return i;
		}
	}

	return INVALID_PLAYER_ID;
}

SendClientMessageEx(playerid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    SendClientMessage(playerid, color, text);
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		SendClientMessage(playerid, color, str);

		#emit RETN
	}
	return 1;
}

SendClientMessageFormatted(playerid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    SCM(playerid, color, text);
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		SCM(playerid, color, str);

		#emit RETN
	}
	return 1;
}

SendClientMessageToAllFormatted(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged])
	        {
			    SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged])
	        {
			    SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}


SendMessage(playerid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    SCM(playerid, color, text);
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		SCM(playerid, color, str);

		#emit RETN
	}
	return 1;
}

ShowActionBubble(playerid, text[], {Float, _}:...)
{
	static
		args,
		str[192];

	/*
	 *  Custom function that uses #emit to format variables into a string.
	 *  This code is very fragile; touching any code here will cause crashing!
	*/
	if ((args = numargs()) <= 2)
	{
		SetPlayerChatBubble(playerid, text, COLOR_PURPLE, 25.0, 6000);
	}
	else
	{
		while (--args >= 2)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 192
		#emit PUSH.C str
		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SetPlayerChatBubble(playerid, str, COLOR_PURPLE, 25.0, 6000);

		#emit RETN
	}
	return 1;
}

SendMessageToAll(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged])
	        {
			    SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged])
	        {
			    SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

Log_Write(table[], const text[], {Float,_}:...)
{
	static
  	    args,
	    str[1024];

	if((args = numargs()) <= 2)
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO %e VALUES(null, NOW(), '%e')", table, text);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO %e VALUES(null, NOW(), '%e')", table, str);
	    mysql_tquery(connectionID, queryBuffer);

		#emit RETN
	}
	return 1;
}

SendFactionMessage(factionid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pFaction] == factionid)
	        {
	    		SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pFaction] == factionid)
	        {
	    		SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

SendGangMessage(gangid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pGang] == gangid)
	        {
	    		SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pGang] == gangid)
	        {
	    		SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}
stock SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}
stock IsPlayerNearPlayer(playerid, TargetID, Float:radius)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetPlayerPos(TargetID, fX, fY, fZ);

	return (GetPlayerInterior(playerid) == GetPlayerInterior(TargetID) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(TargetID)) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}
forward SendAdminMessage(color, const text[], {Float,_}:...);
public SendAdminMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pAdmin] > 0)
	        {
	    		SCM(i, color, text);
			}
		}

		print(text);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pAdmin] > 0)
	        {
	    		SCM(i, color, str);
			}
		}

		print(str);

		#emit RETN
	}
	return 1;
}


SendHelperMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pHelper] > 0)
	        {
	    		SCM(i, color, text);
			}
		}

		print(text);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && pData[i][pHelper] > 0)
	        {
	    		SCM(i, color, str);
			}
		}

		print(str);

		#emit RETN
	}
	return 1;
}

SendTurfMessage(turfid, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 3)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && GetNearbyTurf(i) == turfid)
	        {
	    		SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 3)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 	text
		#emit PUSH.C 	192
		#emit PUSH.C 	str
		#emit PUSH.S	8
		#emit SYSREQ.C 	format
		#emit LCTRL 	5
		#emit SCTRL 	4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && GetNearbyTurf(i) == turfid)
	        {
	    		SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}
getTurftype(tid)
{
	new ret[32], id = TurfInfo[tid][tType];
	switch(id)
	{
		case 0: { ret = "Normal"; }
		case 1: { ret = "CASH"; } // hollowpoimt
		case 2: { ret = "MATERIALS"; }// poisontip
		case 3: { ret = "CRACKHOUSE"; }// fmj
		case 4: { ret = "MARIJUANA"; } // old weps
		case 5: { ret = "DRUGHOUSE"; }
		case 6: { ret = "LOW WEPS"; }
		case 7: { ret = "MEDIUM WEPS"; }
		case 8: { ret = "HIGH WEPS"; }
	}
	return ret;
}
SendStaffMessage(color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 2)
	{
	    foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && (pData[i][pAdmin] > 0 || pData[i][pHelper] > 0))
	        {
	    		SCM(i, color, text);
			}
		}

		print(text);
	}
	else
	{
		while(--args >= 2)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri 	8
		#emit ADD.C 		4
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && (pData[i][pAdmin] > 0 || pData[i][pHelper] > 0))
	        {
	    		SCM(i, color, str);
			}
		}

		print(str);

		#emit RETN
	}
	return 1;
}

SetPlayerBubbleText(playerid, Float:drawdistance, color, text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 4)
	{
	    SetPlayerChatBubble(playerid, text, color, drawdistance, 8000);
	}
	else
	{
		while(--args >= 4)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri    8
		#emit CONST.alt     4
		#emit SUB
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		SetPlayerChatBubble(playerid, str, color, drawdistance, 8000);

		#emit RETN
	}
	return 1;
}


SendProximityMessage(playerid, Float:radius, color, const text[], {Float,_}:...)
{
	static
  	    args,
	    str[192];

	if((args = numargs()) <= 4)
	{
	    foreach(new i : Player)
		{
	        if(IsPlayerInRangeOfPlayer(i, playerid, radius) || pData[i][pListen])
	        {
	            SCM(i, color, text);
			}
		}
	}
	else
	{
		while(--args >= 4)
		{
			#emit LCTRL 	5
			#emit LOAD.alt 	args
			#emit SHL.C.alt 2
			#emit ADD.C 	12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S 		text
		#emit PUSH.C 		192
		#emit PUSH.C 		str
		#emit LOAD.S.pri    8
		#emit CONST.alt     4
		#emit SUB
		#emit PUSH.pri
		#emit SYSREQ.C 		format
		#emit LCTRL 		5
		#emit SCTRL 		4

		foreach(new i : Player)
		{
	        if(IsPlayerInRangeOfPlayer(i, playerid, radius) || pData[i][pListen])
	        {
	            SCM(i, color, str);
			}
		}

		#emit RETN
	}
	return 1;
}

SendProximityFadeMessage(playerid, Float:radius, const text[], color1, color2, color3, color4, color5)
{
    foreach(new i : Player)
    {
	    if(IsPlayerInRangeOfPlayer(i, playerid, radius / 16))
		{
            SCM(i, color1, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 8))
		{
            SCM(i, color2, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 4))
		{
            SCM(i, color3, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius / 2))
		{
            SCM(i, color4, text);
        }
		else if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
            SCM(i, color5, text);
        }
        else if(pData[i][pListen])
        {
            SCM(i, color5, text);
        }
	}
}

forward RemoveBlood(playerid);
public RemoveBlood(playerid)
{
    for(new i = 0; i < 8;i++)
    {
        TextDrawHideForPlayer(playerid, Blood[i]);
    }
    pBlood[playerid] = false;
    return 1;
}

forward PlayerSpawn(playerid);
public PlayerSpawn(playerid) {
	if(IsPlayerConnected(playerid)) SetPlayerToSpawn(playerid);
}

forward ShowMainMenuCamera(playerid);
public ShowMainMenuCamera(playerid)
{

 	InterpolateCameraPos(playerid, 2169.808105, -1659.838256, 103.374832, 2167.935058, -1136.155029, 106.361320, 30000);
 	InterpolateCameraLookAt(playerid, 2169.811035, -1659.351928, 103.347076, 2167.435058, -1136.148559, 106.344200, 30000);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM bans WHERE username = '%s' OR ip = '%s' OR ip LIKE '%s'", GetPlayerNameEx(playerid), GetPlayerIP(playerid), GetPlayerIPRange(playerid));
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOOKUP_BANS, playerid);
}

/*stock Dyuze(playerid, title[], string[], time = 5000)
{
	if(pData[playerid][pDyuze])
	{
	    PlayerTextDrawHide(playerid, ModernPlayerText[playerid][0]);
		PlayerTextDrawHide(playerid, ModernPlayerText[playerid][1]);
	    KillTimer(pData[playerid][pDyuzeTimer]);
	}
	new string2[128];
	format(string2, sizeof(string2), "%s~n~_", title);
	PlayerTextDrawSetString(playerid, ModernPlayerText[playerid][0], string2);
	PlayerTextDrawShow(playerid, ModernPlayerText[playerid][0]);

	PlayerTextDrawSetString(playerid, ModernPlayerText[playerid][1], string);
	PlayerTextDrawShow(playerid, ModernPlayerText[playerid][1]);

	pData[playerid][pDyuze] = true;
	pData[playerid][pDyuzeTimer] = SetTimerEx("HidetheDyuze", time, false, "d", playerid);
}*/

stock Adrian(playerid, time = 10000)
{
	if(pData[playerid][pAdrian])
	{
		for(new i = 0; i < 16; i ++)
		{
			PlayerTextDrawHide(playerid, SHOWID[playerid][i]);
		}
	    KillTimer(pData[playerid][pAdrianTimer]);
	}
	for(new i = 0; i < 16; i ++)
	{
		PlayerTextDrawShow(playerid, SHOWID[playerid][i]);
	}

	pData[playerid][pAdrian] = true;
	pData[playerid][pAdrianTimer] = SetTimerEx("HidetheAdrian", time, false, "d", playerid);
}

forward HidetheAdrian(playerid);
public HidetheAdrian(playerid)
{
	if (!pData[playerid][pAdrian])
	    return 0;

	pData[playerid][pAdrian] = false;
	for(new i = 0; i < 16; i ++)
	{
		PlayerTextDrawHide(playerid, SHOWID[playerid][i]);
	}
	return 1;
}

/*forward HidetheDyuze(playerid);
public HidetheDyuze(playerid)
{
	if (!pData[playerid][pDyuze])
	    return 0;

	pData[playerid][pDyuze] = false;
	PlayerTextDrawHide(playerid, ModernPlayerText[playerid][0]);
	PlayerTextDrawHide(playerid, ModernPlayerText[playerid][1]);
	return 1;
}*/

forward Countdown(playerid, count);
public Countdown(playerid, count)
{
	foreach(new i : Player)
	{
	    if(pData[i][pJoinedEvent])
	    {
	        switch(count)
	        {
	        	case 3:
				{
					GameTextForPlayer(i, "~g~3", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 2:
				{
                    GameTextForPlayer(i, "~g~2", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 1:
				{
                    GameTextForPlayer(i, "~g~1", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 0:
				{
                    GameTextForPlayer(i, "~g~Go! Go! Go!", 2000, 3);
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				}
			}
		}
	}

	count--;

	if(count >= 0)
	{
 		SetTimerEx("Countdown", 1000, false, "ii", playerid, count);
	}
}

forward CountdownAll(playerid, count);
public CountdownAll(playerid, count)
{
	foreach(new i : Player)
	{
	    if(pData[i][pLogged])
	    {
	        switch(count)
	        {
	        	case 3:
				{
					GameTextForPlayer(i, "~g~3", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 2:
				{
                    GameTextForPlayer(i, "~g~2", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 1:
				{
                    GameTextForPlayer(i, "~g~1", 1500, 3);
					PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				}
				case 0:
				{
                    GameTextForPlayer(i, "~g~Go! Go! Go!", 2000, 3);
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				}
			}
		}
	}

	count--;

	if(count >= 0)
	{
 		SetTimerEx("CountdownAll", 1000, false, "ii", playerid, count);
	}
}


forward UnfreezeNewbie(playerid);
public UnfreezeNewbie(playerid)
{
    TogglePlayerControllable(playerid, 1);
}

forward VehicleUnfreeze(playerid, vehicleid, Float:x, Float:y, Float:z, interior, world);
public VehicleUnfreeze(playerid, vehicleid, Float:x, Float:y, Float:z, interior, world)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInRangeOfPoint(playerid, 100.0, x, y, z) && GetPlayerInterior(playerid) == interior && GetPlayerVirtualWorld(playerid) == world)
	{
		SetVehiclePos(vehicleid, x, y, z);
	}

	TogglePlayerControllable(playerid, 1);
}

forward UnfreezePlayer(playerid, Float:x, Float:y, Float:z);
public UnfreezePlayer(playerid, Float:x, Float:y, Float:z)
{
	if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
	{
	    SetPlayerPos(playerid, x, y, z);
	    TogglePlayerControllable(playerid, 1);
	}
}

forward UnfreezePlayerEx(playerid);
public UnfreezePlayerEx(playerid)
{
	TogglePlayerControllable(playerid, 1);
	return 1;
}

forward DestroyWater(objectid);
public DestroyWater(objectid)
{
	DestroyDynamicObject(objectid);
}
forward DynamicTimer();
public DynamicTimer()
{
	if(PaintballTimer1 > 0) PaintballTimer1--;
    if(PaintballTimer2 > 0) PaintballTimer2--;
	if(PaintballTimer1 == 0 && GetPBPlayers1() != 0) {
	    foreach(new pb : Player) {
	        if(pData[pb][pPaintball]) {
         		ResetPlayerWeapons(pb);
		        SetPlayerArmedWeapon(pb, 0);
				pData[pb][pPaintball] = 0;
				SetPlayerToSpawn(pb);
				TogglePlayerControllable(pb, 0);
				SetTimerEx("UnfreezePlayerEx", 5000, false, "i", pb);
				// Find the winner
				new winner;
				foreach(new w1 : Player)
				{
				    if(IsPlayerConnected(w1))
				    {
				         if(pbscore1[w1] > pbscore1[winner]) winner = w1;
				    }
				}
				SM(pb, -1, "The paintball round has ended! (Winner: %s | Score: %i)", GetRPName(winner), pbscore1[winner]);
			}
		}
	}
	
	if(PaintballTimer1 < 5 && GetPBPlayers1() != 0) {
    	foreach(new pbo : Player) {
        	if(pData[pbo][pPaintball]) {
            	TogglePlayerControllable(pbo,0);
            	GameTextForPlayer(pbo, "~r~Round is ending...", 800, 4);
			}
		}
	}

}

IsHelicopter(vehid)
{
    new pveh = GetVehicleModel(vehid);
    if(pveh == 417|| pveh == 425 || pveh == 447 || pveh == 469 || pveh == 487
	|| pveh == 488 || pveh == 497 || pveh == 548 || pveh == 563) {
        return true;
    }
	return false;
}

IsSurfable(vehid)
{
	switch(GetVehicleModel(vehid)) {
		case 422, 535, 470, 406, 478, 543, 554, 600, 605, 607, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454:
			return 1;
	}
	if(IsHelicopter(vehid)) return 1;
	return 0;
}

AntiCarSurf(playerid)
{
    new vehid = GetPlayerSurfingVehicleID(playerid);
    if(vehid != INVALID_VEHICLE_ID && GetVehicleSpeed(vehid) >= 20.0)
    {
		if(IsSurfable(vehid)) {
			SetPVarInt(playerid, "DistortAim", 1);
			//SetPlayerDrunkLevel(playerid, 30000);
        }
        else {
        	GetPlayerPos(playerid, pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ]);
            SetPlayerPos(playerid, pData[playerid][pPosX], pData[playerid][pPosY]+1.0, pData[playerid][pPosZ]+1.0);
        }
    }
    /*else {
		if(GetPVarType(playerid, "DistortAim") != 0) {
			DeletePVar(playerid, "DistortAim");
			SetPlayerDrunkLevel(playerid, 0);
        }
    }*/
}

stock GetUniquePlate(vehicleid) {
	new string[128], rows;

	for(new i = 0; i < 10; i++){

		format(string,sizeof(string),"%i-%c%c%c %i%i%i",random(10),(65+random(26)),(65+random(26)),(65+random(26)),random(10),random(10),random(10));
		printf("string begin of loop = %s",string);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT plate FROM vehicles WHERE plate = '%e'", string);
		mysql_tquery(connectionID, queryBuffer);

		if(rows > 0)
		{
			printf("string already exists = %s",string);
			format(string,sizeof(string),"%i-%c%c%c %i%i%i",random(10),(65+random(26)),(65+random(26)),(65+random(26)),random(10),random(10),random(10));
		} else {
			format(VehicleInfo[vehicleid][vPlate],32, "%s", string);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET plate = '%e' WHERE id = %i", VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vID]);
			mysql_tquery(connectionID, queryBuffer);
			SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][vPlate]);
			//SetVehicleToRespawn(vehicleid);
			DespawnVehicle(vehicleid);
			break;
		}
	}
	return 1;
}

forward VehicleTimer();
public VehicleTimer()
{

	foreach(new i : Player) {
    	if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{ // UpdateSpeedo
			new vehicleid = GetPlayerVehicleID(i);
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER && VehicleHasEngine(vehicleid))
		    {

				new
				Float:health,
				Float:damage;
	
				GetVehicleHealth(vehicleid, health);
	
			
				damage = (1000.0 - health) / 7.0;
	
				if(damage > 100.0) damage = 100.0;
			
		
				new string[128];
				if(pData[i][pSpeedometer] == 1) {
				format(string, sizeof(string), "~b~~h~Speed:~w~ %.0f KM/H~n~~b~~h~Fuel:~w~ %i%c~n~~b~~h~Damage:~w~ %.0f%c~n~~b~~h~Doors:~w~ %s", GetVehicleSpeed(vehicleid), vehicleFuel[vehicleid], '%', damage, '%', (GetVehicleParams(vehicleid, VEHICLE_DOORS)) ? ("Locked") : ("Unlocked"));
				} 
				PlayerTextDrawSetString(i, pData[i][pTextx][2], string);
			
				for(new x = 0; x < MAX_DEPLOYABLES; x++)
				{
				    if(DeployInfo[x][dExists] && DeployInfo[x][dType] == DEPLOY_SPIKESTRIP && IsPlayerInRangeOfPoint(x, 3.0, DeployInfo[x][dPosX], DeployInfo[x][dPosY], DeployInfo[x][dPosZ]))
			        {
			            new
			                panels,
			                doors,
			                lights,
			                tires;

			            GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

			            if(tires != 15)
			            {
			                UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 15);
			                SCM(i, COLOR_SYNTAX, "Spiked!");
							//Dyuze(i, "Notice", "Spiked!");
			            }
			        }
				}
			}
		}
	}
}
ComServ(playerid)
{
	if (pData[playerid][pComserv] > 1)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 60.0, 1477.3464, -1667.8080, 14.5532))
		{
			SetPlayerPos(playerid, 1477.3464, -1667.8080, 14.5532);
			SetPlayerFacingAngle(playerid, 9.8095);
			//pData[playerid][pComserv] += 1;
			//SM(playerid, COLOR_GREY2,"** You can not escape. Your community service has been extended to %i", pData[playerid][pComserv]);
		}
	}
}
BedTime(playerid)
{
	if(pData[playerid][pBedType] == 1)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 10.0,2059.2004,1086.4427,1717.2209))
		{
			new rand = random(sizeof(hospitalspawns));
			SetFreezePos(playerid, hospitalspawns[rand][0], hospitalspawns[rand][1], hospitalspawns[rand][2]);
			SetPlayerFacingAngle(playerid, 9.8095);
			SM(playerid, COLOR_GREY2,"** You're still hurt wait %i before you go.", pData[playerid][pBedTime]);
			SetPlayerVirtualWorld(playerid, 2);
			SetPlayerInterior(playerid, 2);
		}
	}
}



JailTIme(playerid)
{
	if (pData[playerid][pJailType] == 2)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 60.0, -12.3625,2086.9216,728.4125))
		{
			new index = random(sizeof(highcellSpawns));
			TeleportToCoords(playerid, highcellSpawns[index][0], highcellSpawns[index][1], highcellSpawns[index][2], highcellSpawns[index][3],1,1);
			SM(playerid, COLOR_GREY2,"** You're still on admin jail wait %i before you go.", pData[playerid][pJailTime]);
		}
	}

	if (pData[playerid][pJailType] == 3)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 60.0, -12.3625,2086.9216,728.4125))
		{
			new index = random(sizeof(highcellSpawns));
			TeleportToCoords(playerid, highcellSpawns[index][0], highcellSpawns[index][1], highcellSpawns[index][2], highcellSpawns[index][3],1,1);
			SM(playerid, COLOR_GREY2,"** You're still on admin jail wait %i before you go.", pData[playerid][pJailTime]);
		}
	}

	if (pData[playerid][pJailType] == 1)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 60.0, -12.3625,2086.9216,728.4125))
		{
			new index = random(sizeof(highcellSpawns));
			TeleportToCoords(playerid, highcellSpawns[index][0], highcellSpawns[index][1], highcellSpawns[index][2], highcellSpawns[index][3],1,1);
			SM(playerid, COLOR_GREY2,"** You're still on ic jail wait %i before you go.", pData[playerid][pJailTime]);
		}
	}
}

EventTimer()
{
	new string[2048];

	// Sabong
	if(SabongInfo[sExist])
	{
		if(SabongInfo[sTimer] > 0)
		{
			SabongInfo[sTimer]--;
			format(string, sizeof(string), "~r~Sabong is going~n~~y~to Start in~n~~r~%i~y~seconds.",SabongInfo[sTimer]);
			foreach(new i : Player) {
				if(pData[i][pLogged] && !pData[i][pKicked] && SabongInfo[sInside][i]) {
					GameTextForPlayer(i,string,1000,3);
					PlayerPlaySound(i, 4203, 0.0, 0.0, 0.0);
				}
			}
		}
		if(!SabongInfo[sStart] && SabongInfo[sTimer] <= 0)
		{
			SabongInfo[sStart] = 1;
			SabongInfo[sTimer] = 0;

			format(string, sizeof(string), "~r~Sabong Has been~n~~b~STARTED~n~~r~Lets~y~Go");
			foreach(new i : Player) {
				if(SabongInfo[sInside][i]) {
					GameTextForPlayer(i,string,2000,3);
					PlayerPlaySound(i, 4203, 0.0, 0.0, 0.0);
				}
			}
		}
	}
}


forward SecondTimer();
public SecondTimer()
{

	new hour, minute, boomboxid, string[128];
	EventTimer();
	gettime(hour, minute);
	foreach(new i : Player)
	{
		//SetPlayerTime(i, hour, minute);
		if(pData[i][pJailTime] > 0) {
			format(string, sizeof(string), "~y~Jail Time: ~w~%d", pData[i][pJailTime]);
			PlayerTextDrawSetString(i, customHUD[i][1], string);
		}
		if(pData[i][pCarrying])
		{
			SetPlayerArmedWeapon(i, 0);
		}
		if((GetNearbyLocker(i)) >= 0)
		{
			new lockerid = GetNearbyLocker(i);
			format(string, sizeof(string), "%s Locker",FactionInfo[LockerInfo[lockerid][lFaction]][fShortName]);
			TextDrawSetString(Locker_Near4, string);
			
			TextDrawShowForPlayer(i, Locker_Near0);
			TextDrawShowForPlayer(i, Locker_Near1);
			TextDrawShowForPlayer(i, Locker_Near2);
			TextDrawShowForPlayer(i, Locker_Near3);
			TextDrawShowForPlayer(i, Locker_Near4);
			TextDrawShowForPlayer(i, Locker_Near5);
		}
		
		if((GetNearbyLocker(i)) == -1)
		{
			TextDrawHideForPlayer(i, Locker_Near0);
			TextDrawHideForPlayer(i, Locker_Near1);
			TextDrawHideForPlayer(i, Locker_Near2);
			TextDrawHideForPlayer(i, Locker_Near3);
			TextDrawHideForPlayer(i, Locker_Near4);
			TextDrawHideForPlayer(i, Locker_Near5);
		}
		//HOUSES NOTI
		if((GetNearbyHouse(i)) >= 0)
		{
			new houseid = GetNearbyHouse(i);
			if(HouseInfo[houseid][hOwnerID] == 0)
			{
				format(string, sizeof(string), " $ %i", HouseInfo[houseid][hPrice]);
				TextDrawSetString(HouseNear_4, string);
				format(string, sizeof(string), " %i %s", houseid, GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]));
				TextDrawSetString(HouseNear_6, string);
				
				TextDrawShowForPlayer(i, HouseNear_4);
				TextDrawShowForPlayer(i, HouseNear_5);
				TextDrawShowForPlayer(i, HouseNear_6);
				TextDrawShowForPlayer(i, HouseNear_8);
				TextDrawShowForPlayer(i, HouseNear_3);
				TextDrawShowForPlayer(i, HouseNear_2);
				TextDrawShowForPlayer(i, HouseNear_1);
				TextDrawShowForPlayer(i, HouseNear_0);
				PlayerTextDrawShow(i, HouseNear_7[i]);
			}
			else
			{
				format(string, sizeof(string), "%s", HouseInfo[houseid][hOwner]);
				TextDrawSetString(HouedOnear_4, string);
				format(string, sizeof(string), " %i %s", houseid, GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]));
				TextDrawSetString(HouedOnear_6, string);
				
				TextDrawShowForPlayer(i, HouedOnear_0);
				TextDrawShowForPlayer(i, HouedOnear_1);
				TextDrawShowForPlayer(i, HouedOnear_2);
				TextDrawShowForPlayer(i, HouedOnear_3);
				TextDrawShowForPlayer(i, HouedOnear_4);//name
				TextDrawShowForPlayer(i, HouedOnear_5);
				TextDrawShowForPlayer(i, HouedOnear_6);
				TextDrawShowForPlayer(i, HouedOnear_8);
				PlayerTextDrawShow(i, HouedOnear_7[i]);
			}
		}
		if((GetNearbyHouse(i)) == -1)
		{

			TextDrawHideForPlayer(i, HouseNear_4);
			TextDrawHideForPlayer(i, HouseNear_5);
			TextDrawHideForPlayer(i, HouseNear_6);
			TextDrawHideForPlayer(i, HouseNear_8);
			TextDrawHideForPlayer(i, HouseNear_3);
			TextDrawHideForPlayer(i, HouseNear_2);
			TextDrawHideForPlayer(i, HouseNear_1);
			TextDrawHideForPlayer(i, HouseNear_0);
			PlayerTextDrawHide(i, HouseNear_7[i]);
			
			TextDrawHideForPlayer(i, HouedOnear_0);
			TextDrawHideForPlayer(i, HouedOnear_1);
			TextDrawHideForPlayer(i, HouedOnear_2);
			TextDrawHideForPlayer(i, HouedOnear_3);
			TextDrawHideForPlayer(i, HouedOnear_4);//name
			TextDrawHideForPlayer(i, HouedOnear_5);
			TextDrawHideForPlayer(i, HouedOnear_6);
			TextDrawHideForPlayer(i, HouedOnear_8);
			PlayerTextDrawHide(i, HouedOnear_7[i]);
		}
		
		// Sabong
		if(IsPlayerInRangeOfPoint(i, 20.0, area_bet_sabong)) { SabongInfo[sInside][i] = 1; } else {SabongInfo[sInside][i] = 0;}
		if(SabongInfo[sInside][i]) {
			if(SabongInfo[sExist]) {
				new bet;
				//Sabong Red
				format(string, sizeof(string), "%s", GetRPName(SabongInfo[sPlayerRed]));
				PlayerTextDrawSetString(i, SabongTD[i][6], string);

				format(string, sizeof(string), "$%s", AddCommas(SabongInfo[sRed]));
				PlayerTextDrawSetString(i, SabongTD[i][7], string);

				SetPlayerProgressBarValue(i, SabongBarTD[i][0], GetPlayerHealth(SabongInfo[sPlayerRed]));

				if(SabongInfo[sBetRed][i]) {
					bet = pData[i][pSabongBet] * 2;
					bet = percent(bet, 70);
					format(string, sizeof(string), "Payout = $%s", AddCommas(bet));
					PlayerTextDrawSetString(i, SabongTD[i][10], string);
				}

				// Sabong Blue
				format(string, sizeof(string), "%s", GetRPName(SabongInfo[sPlayerBlue]));
				PlayerTextDrawSetString(i, SabongTD[i][8], string);

				format(string, sizeof(string), "$%s", AddCommas(SabongInfo[sBlue]));
				PlayerTextDrawSetString(i, SabongTD[i][9], string);

				SetPlayerProgressBarValue(i, SabongBarTD[i][1], GetPlayerHealth(SabongInfo[sPlayerBlue]));

				if(SabongInfo[sBetBlue][i]) {
					bet = pData[i][pSabongBet] * 2;
					bet = percent(bet, 70);
					format(string, sizeof(string), "Payout = $%s", AddCommas(bet));
					PlayerTextDrawSetString(i, SabongTD[i][11], string);
				}
				ShowPlayerSabongTextdraw(i);
			}
			else {
				SabongInfo[sPlayerRed] = INVALID_PLAYER_ID;
				SabongInfo[sPlayerBlue] = INVALID_PLAYER_ID;
				HidePlayerSabongTextdraw(i);
			}
		}
		else {
			HidePlayerSabongTextdraw(i);
		}
		
  		//SetPlayerTime(i, hour, minute);
		if(pData[i][pLogged] && !pData[i][pKicked])
		{
		    AFKCheck(i);
			AntiCarSurf(i);
			BedTime(i);
			ComServ(i);
			Graffity_PlayerTimer(i);
			JailTIme(i);
			/*#if defined Christmas
				#else
				if(pData[i][pLastCarolTime] > 0)
				{
					pData[i][pLastCarolTime] -= 1;
				}
			#endif*/
		    new Float:vhp;
			for(new vehicleid; vehicleid<MAX_VEHICLES;vehicleid++)
			{
				if(GetVehicleModel(vehicleid) == 0) continue; //only returns 0 when vehicle is invalid (not spawned)
				GetVehicleHealth(vehicleid,vhp);
				if(vhp < 300.0) {
					SetVehicleParams(vehicleid, VEHICLE_ENGINE, false);
					SetVehicleHealth(vehicleid, 251.0);
				}
			}
	        if(pData[i][pCapturingPoint] >= 0)
			{
				pData[i][pCaptureTime]--;

				if(pData[i][pCaptureTime] <= 0)
				{
					new Float:x, Float:y, Float:z;

					GetPlayerPos(i, x, y, z);

					if(PointInfo[pData[i][pCapturingPoint]][pTime] == 0 && pData[i][pPointX] == x && pData[i][pPointY] == y && pData[i][pPointZ] == z)
					{
						SMA(COLOR_GREEN, "%s attempted to capture %s for %s. It will be theirs in 10 minutes.", GetRPName(i), PointInfo[pData[i][pCapturingPoint]][pName], GangInfo[pData[i][pGang]][gName]);
						SMA(COLOR_RED, "%s is now redzone!", PointInfo[pData[i][pCapturingPoint]][pName]);

						PointInfo[pData[i][pCapturingPoint]][pCaptureTime] = 10;
						PointInfo[pData[i][pCapturingPoint]][pCapturer] = i;
					}
					else
					{
						SCM(i, COLOR_SYNTAX, "You moved from your position and therefore failed to capture.");
					}

					pData[i][pCapturingPoint] = -1;
					pData[i][pCaptureTime] = 0;
				}
			}
	       	if(Maskara[i] && !pData[i][pAdminDuty])
	    	{
	        	format(string, sizeof(string), "Stranger_%d001", MaskaraID[i]);
				SetPlayerName(i, string);
	    	}
	    	if(!Maskara[i] && !pData[i][pAdminDuty])
	    	{
				SetPlayerName(i, pData[i][pUsername]);
	    	}
			if(pData[i][pLoopAnim] && !pData[i][pToggleTextdraws])
			{
				TextDrawShowForPlayer(i, AnimationTD);
		    }
			else
			{
		        TextDrawHideForPlayer(i, AnimationTD);
		    }

			/*#if defined Christmas
			#else
				if(pData[i][pCandy])
				{
					format(string,sizeof(string),"C%d",pData[i][pCandy]);
					PlayerTextDrawSetString(i, EventTextdraw[i], string);
				}
			#endif*/

		   	if(++pData[i][pHungerTimer] >= 360 && pData[i][pHunger] > 0) // 3 minutes
			{
				pData[i][pHungerTimer] = 0;
				pData[i][pHunger] -= 1;
				if(pData[i][pHunger] == 10)
				{
					SendMessage(i, COLOR_GREY, "You hear your stomach rumble, you need to eat. You can die due to starvation");
				}
				if(pData[i][pHunger] <= 1) // 2 minutes
				{
					SendMessage(i, COLOR_GREY, "You fall unconcious due to starvation.");
					SetPlayerHealth(i, 0);
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO kills VALUES(null, %i, %i, '%s', '%s', '%s', NOW())", pData[i][pID], pData[i][pID], GetPlayerNameEx(i), GetPlayerNameEx(i), "GUTOM");
					mysql_tquery(connectionID, queryBuffer);
					
				}
			}
			if(++pData[i][pThirstTimer] >= 300 && pData[i][pThirst] > 0) // 2 minutes
			{
				pData[i][pThirstTimer] = 0;
				pData[i][pThirst] -= 1;

				if(pData[i][pThirst] == 10)
				{
					SendMessage(i, COLOR_GREY, "You are thirsty, you need to drink. You can die due to thirst!");
				}
   				if(pData[i][pThirst] <= 1) // 2 minutes
				{
					SendMessage(i, COLOR_GREY, "You fall unconcious due to thirst.");
     				SetPlayerHealth(i, 0);
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO kills VALUES(null, %i, %i, '%s', '%s', '%s', NOW())", pData[i][pID], pData[i][pID], GetPlayerNameEx(i), GetPlayerNameEx(i), "UHAW");
					mysql_tquery(connectionID, queryBuffer);
					
				}
			}
			if(++pData[i][pStressTimer] >= 300 && pData[i][pStress] > 0) // 2 minutes
			{
				pData[i][pStressTimer] = 0;
				pData[i][pStress] -= 1;

				if(pData[i][pStress] == 10)
				{
					SendMessage(i, COLOR_GREY, "You are stress, you need to take some sleep or eat.");
				}
   				if(pData[i][pStress] <= 1) // 2 minutes
				{
					SendMessage(i, COLOR_GREY, "You fall unconcious due to stress.");
     				SetPlayerHealth(i, 0);
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO kills VALUES(null, %i, %i, '%s', '%s', '%s', NOW())", pData[i][pID], pData[i][pID], GetPlayerNameEx(i), GetPlayerNameEx(i), "STRESS");
					mysql_tquery(connectionID, queryBuffer);
					
					
				}
			}
			if(pData[i][pBleeding] == 1) // 2 minute
			{
				if(++pData[i][pBleedingTimer] >= 120)
				{
					//GivePlayerHealth(i, -1.00);
				}
			}
			format(string, sizeof(string), "%d", pData[i][pHunger]);
			PlayerTextDrawSetString(i, HungerTD9[i], string);
			format(string, sizeof(string), "%d", pData[i][pThirst]);
			PlayerTextDrawSetString(i, HungerTD10[i], string);
			format(string, sizeof(string), "%d", pData[i][pStress]);
			PlayerTextDrawSetString(i, HungerTD11[i], string);	
			
		    
			if (pData[i][pSpeedTime] > 0)
			{
			    pData[i][pSpeedTime]--;
			}
		    if(pData[i][pShipment] >= 0)
			{
				if((GetPlayerState(i) == PLAYER_STATE_DRIVER) && (GetVehicleModel(GetPlayerVehicleID(i)) != 499 ))
				{
			    	pData[i][pShipment] = -1;
			    	SCM(i, COLOR_SYNTAX, "Shipment cancelled. You went into another vehicle.");
				}
		    }


		    if(pData[i][pPizzas] > 0 && GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
				if(GetVehicleModel(GetPlayerVehicleID(i)) == 586)
				{
				    if(pData[i][pPizzaTime] < 90)
					{
						pData[i][pPizzaTime]++;
					}
				}
				else
				{
				    pData[i][pPizzas] = 0;
				    pData[i][pCP] = 0;

				    DisablePlayerCheckpoint(i);
				    SCM(i, SERVER_COLOR, "delivery cancelled. You went into another vehicle.");
				}
			}
			else if (pData[i][pGraffiti] != -1 && pData[i][pGraffitiTime] > 0)
			{
				if (Graffiti_Nearest(i) != pData[i][pGraffiti])
				{
				    pData[i][pGraffiti] = -1;
            	    pData[i][pGraffitiTime] = 0;
				}
				else
				{
	    	        pData[i][pGraffitiTime]--;

		            if (pData[i][pGraffitiTime] < 1)
					{
                        new str[500];
					    strunpack(str, pData[i][pGraffitiText]);
	        	        format(GraffitiData[pData[i][pGraffiti]][graffitiText], 64, str);

					    GraffitiData[pData[i][pGraffiti]][graffitiColor] = pData[i][pGraffitiColor];

						Graffiti_Refresh(pData[i][pGraffiti]);
					    Graffiti_Save(pData[i][pGraffiti]);

					    ClearAnimations(i, 1);
						SendProximityMessage(i, 30.0, SERVER_COLOR, "**{C2A2DA} %s puts their can of spray paint away.", GetRPName(i));

		   	            pData[i][pGraffiti] = -1;
		   	            pData[i][pGraffitiTime] = 0;
					}
				}
			}
		    if(!pData[i][pToggleTextdraws])
		    {
			    if(pData[i][pGPSOn])
				{
				    if(GetPlayerState(i) == PLAYER_STATE_SPECTATING)
					{
				        HideGPSTextdraw(i);
					}
				    else {
						new Float:rz;
						if(IsPlayerInAnyVehicle(i)) {
							GetVehicleZAngle(GetPlayerVehicleID(i), rz);
						}
						else {
							GetPlayerFacingAngle(i, rz);
						}

						if(rz >= 348.75 || rz < 11.25) PlayerTextDrawSetString(i, pData[i][pText][1], "N");
						else if(rz >= 326.25 && rz < 348.75) PlayerTextDrawSetString(i, pData[i][pText][1], "NNE");
						else if(rz >= 303.75 && rz < 326.25) PlayerTextDrawSetString(i, pData[i][pText][1], "NE");
						else if(rz >= 281.25 && rz < 303.75) PlayerTextDrawSetString(i, pData[i][pText][1], "ENE");
						else if(rz >= 258.75 && rz < 281.25) PlayerTextDrawSetString(i, pData[i][pText][1], "E");
						else if(rz >= 236.25 && rz < 258.75) PlayerTextDrawSetString(i, pData[i][pText][1], "ESE");
						else if(rz >= 213.75 && rz < 236.25) PlayerTextDrawSetString(i, pData[i][pText][1], "SE");
						else if(rz >= 191.25 && rz < 213.75) PlayerTextDrawSetString(i, pData[i][pText][1], "SSE");
						else if(rz >= 168.75 && rz < 191.25) PlayerTextDrawSetString(i, pData[i][pText][1], "S");
						else if(rz >= 146.25 && rz < 168.75) PlayerTextDrawSetString(i, pData[i][pText][1], "SSW");
						else if(rz >= 123.25 && rz < 146.25) PlayerTextDrawSetString(i, pData[i][pText][1], "SW");
						else if(rz >= 101.25 && rz < 123.25) PlayerTextDrawSetString(i, pData[i][pText][1], "WSW");
						else if(rz >= 78.75 && rz < 101.25) PlayerTextDrawSetString(i, pData[i][pText][1], "W");
						else if(rz >= 56.25 && rz < 78.75) PlayerTextDrawSetString(i, pData[i][pText][1], "WNW");
						else if(rz >= 33.75 && rz < 56.25) PlayerTextDrawSetString(i, pData[i][pText][1], "NW");
						else if(rz >= 11.5 && rz < 33.75) PlayerTextDrawSetString(i, pData[i][pText][1], "NNW");
						PlayerTextDrawSetString(i, pData[i][pText][0], GetPlayerZoneName(i));
					}
				}
				if(pData[i][pWatchOn])
				{
					if(GetPlayerState(i) == PLAYER_STATE_SPECTATING)
						TextDrawHideForPlayer(i, TimeTD);
					else
					    TextDrawShowForPlayer(i, TimeTD);
				}
				if(!pData[i][pToggleHUD])
				{
					if(GetPlayerState(i) == PLAYER_STATE_SPECTATING)
					{
						PlayerTextDrawHide(i, pData[i][pText][3]);
					    PlayerTextDrawHide(i, pData[i][pText][4]);
					}
					else
					{
					    PlayerTextDrawShow(i, pData[i][pText][3]);
					    PlayerTextDrawShow(i, pData[i][pText][4]);
					}
				}
			}

		    if(NetStats_PacketLossPercent(i) > 20.0 && gettime() - pData[i][pLastDesync] > 120)
	        {
				new playerIP[32];
	            SCM(i, COLOR_REALRED, "** WARNING: You are desynced. You are advised to relog once you see this message.");
	            pData[i][pLastDesync] = gettime();
				SavePlayerVariables(i);
				ResetPlayer(i);
				pData[i][pLogged] = 0;
				GetPlayerIp(i, playerIP, sizeof(playerIP));
				Reconnecting[i] = true;
 				format(ReconnectIP[i], MAX_IP_SIZE, "%s", playerIP);
  				format(string, sizeof(string), "banip %s", playerIP);
   				SendRconCommand(string);

	        }

		    if(pData[i][pSpectating] != INVALID_PLAYER_ID)
		    {
		        if(GetPlayerInterior(i) != GetPlayerInterior(pData[i][pSpectating])) SetPlayerInterior(i, GetPlayerInterior(pData[i][pSpectating]));
		        if(GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(pData[i][pSpectating])) SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(pData[i][pSpectating]));
		    }
			if(pData[i][pAwaitingClothing])
			{
			    SetPlayerClothing(i);
			}
			if(pData[i][pDraggedBy] != INVALID_PLAYER_ID)
			{
	    		TeleportToPlayer(i, pData[i][pDraggedBy]);
			}
			if(pData[i][pDonator] > 0 && gettime() > pData[i][pVIPTime])
			{
			    pData[i][pDonator] = 0;
			    pData[i][pVIPTime] = 0;
			    pData[i][pSecondJob] = -1;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = 0, viptime = 0, secondjob = -1 WHERE uid = %i", pData[i][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SCM(i, COLOR_LIGHTRED, "Your donator subscription has expired. You are no longer a VIP.");
			}
			if(pData[i][pDonator] < 1 && pData[i][pSecondJob] != JOB_NONE)
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = -1 WHERE uid = %i", pData[i][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    pData[i][pSecondJob] = JOB_NONE;
			    SCM(i, COLOR_LIGHTRED, "Your second job has been removed as you don't have a Donator subscription.");
			}			
			if(pData[i][pFirstaid])
			{
				new
				    Float:health;

				GetPlayerHealth(i, health);

				if((health + 1.0) > 100.0)
				{
				    SetPlayerHealth(i, 100.0);
				    pData[i][pFirstaid] = 0;
				}
				else
				{
				    SetPlayerHealth(i, health + 1.0);
				}
			}
			
			
			if(pData[i][pTazedTime] > 0)
			{
			    pData[i][pTazedTime]--;

			    if(!pData[i][pTazedTime])
			    {
			        ClearAnimations(i, 1);
			        TogglePlayerControllable(i, 1);
			    }
			}
			if(pData[i][pFishTime] > 0)
			{
			    pData[i][pFishTime]--;

				if(!IsPlayerAtFishingPlace(i))
				{
				    ClearAnimations(i, 1);
				    RemovePlayerAttachedObject(i, 9);
				    pData[i][pFishTime] = 0;
				}
			    else if(pData[i][pFishTime] <= 0 && IsPlayerAtFishingPlace(i))
			    {
	          		new rand = Random(1, 100);

					if(1 <= rand <= 20)
	    			{
	 	   				SCM(i, COLOR_SYNTAX, "You reeled in your line and caught nothing...");
					}
					else if(21 <= rand <= 30)
					{
	    				new amount = 10 + random(50);

		    			SM(i, COLOR_AQUA, "You reeled in your line and caught a used wallet with $%i inside.", amount);
						GivePlayerCash(i, amount);
					}
					else if(98 <= rand <= 99)
					{
					    new amount = random(10) + 100;

					    SM(i, COLOR_AQUA, "You reeled in your line and caught a rare 18th century coin valued at $%i!", amount);
						GivePlayerCash(i, amount);
					}
					else
					{
					    new weight;

					    if(pData[i][pUsedBait])
						{
							weight = random(15);
					    }
						else
						{
					        weight = random(10);
	    		        }

	    		        SM(i, COLOR_AQUA, "You reeled in your line and caught a fish weighing %i kg!", weight);
						pData[i][pFishWeight] += weight;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = %i WHERE uid = %i", pData[i][pFishWeight], pData[i][pID]);
						mysql_tquery(connectionID, queryBuffer);

						IncreaseJobSkill(i, JOB_FISHERMAN);

	    				if(GetJobLevel(i, JOB_FISHERMAN) < 5)
	    				{
	        				if(pData[i][pFishingSkill] < 50) {
	        					SM(i, COLOR_YELLOW, "You need to catch %i more fish in order to level up.", 50 - pData[i][pFishingSkill]);
	        				} else if(pData[i][pFishingSkill] < 100) {
	        					SM(i, COLOR_YELLOW, "You need to catch %i more fish in order to level up.", 100 - pData[i][pFishingSkill]);
	        				} else if(pData[i][pFishingSkill] < 200) {
	        					SM(i, COLOR_YELLOW, "You need to catch %i more fish in order to level up.", 200 - pData[i][pFishingSkill]);
            				} else if(pData[i][pFishingSkill] < 350) {
	        					SM(i, COLOR_YELLOW, "You need to catch %i more fish in order to level up.", 350 - pData[i][pFishingSkill]);
							}
						}
						else
						{
							//
						}

						if(GetJobLevel(i, JOB_FISHERMAN) == 1)
						{
							if(pData[i][pFishWeight] >= 50)
		    		        {
		    		            SCM(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
		    		        }
						}
						if(GetJobLevel(i, JOB_FISHERMAN) == 2)
						{
							if(pData[i][pFishWeight] >= 100)
		    		        {
		    		            SCM(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
		    		        }
						}
						if(GetJobLevel(i, JOB_FISHERMAN) == 3)
						{
							if(pData[i][pFishWeight] >= 150)
		    		        {
		    		            SCM(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
		    		        }
						}
						if(GetJobLevel(i, JOB_FISHERMAN) == 4)
						{
							if(pData[i][pFishWeight] >= 200)
		    		        {
		    		            SCM(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
		    		        }
						}
						if(GetJobLevel(i, JOB_FISHERMAN) == 5)
						{
							if(pData[i][pFishWeight] >= 250)
		    		        {
		    		            SCM(i, COLOR_YELLOW, "You have too much fish. You can continue fishing once you sell your load.");
		    		        }
						}
					}

					ClearAnimations(i, 1);
					RemovePlayerAttachedObject(i, 9);
			    }
			}
			if(pData[i][pSweeping] && GetVehicleModel(GetPlayerVehicleID(i)) == 574 && GetVehicleSpeed(GetPlayerVehicleID(i)) > 35.0)
			{
			    pData[i][pSweepTime]--;
				if(IsPlayerInDynamicArea(i, sweeparea))
				{
					if(pData[i][pSweepTime] <= 0)
					{
						new cost = 400 + random(400);
	
						GivePlayerCash(i, cost);
	
						format(string, sizeof(string), "~g~+$%i", cost);
						GameTextForPlayer(i, string, 5000, 1);
	
						pData[i][pSweepEarnings] += cost;
						pData[i][pSweepTime] = 30;
					}
				}
				else
				{
					GameTextForPlayer(i, "~r~ GO BACK TO SWEEPING AREA!!", 5000, 1);
					
				}
			}

			if(IsPlayerInDynamicArea(i, hparea))
			{
				if(pData[i][pLevel] > 1)
				{
					SetPlayerArmedWeapon(i, 0);
				}
			}
			
			
			if(pData[i][pJailType] > 0)
			{
			    pData[i][pJailTime]--;

			    if(pData[i][pJailTime] <= 0)
			    {
			        ResetPlayerWeaponsEx(i);

			        SCM(i, COLOR_GREY2, "Your jail sentence has expired.");
			        SetPlayerPos(i, 1544.4407, -1675.5522, 13.5584);
					SetPlayerFacingAngle(i, 90.0000);
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i, 0);
					SetCameraBehindPlayer(i);

					PlayerTextDrawHide(i, customHUD[i][1]);
					
					pData[i][pJailType] = 0;
			        pData[i][pJailTime] = 0;
				}
			}
			if(pData[i][pBedType] > 0)
			{
			    pData[i][pBedTime]--;

			    if(pData[i][pBedTime] <= 0)
			    {
			        ResetPlayerWeaponsEx(i);

			        SCM(i, COLOR_GREY2, "You're now free to go.");
					GameTextForPlayer(i, "~g~VALUE YOUR LIFE", 3000, 3);
					pData[i][pBedType] = 0;
			        pData[i][pBedTime] = 0;
				}
				else if(pData[i][pBedTime] == 30)
				{
					foreach(new f : Player)
					{
						if(GetFactionType(f) == FACTION_MEDIC)
						{
							 SCM(f, COLOR_YELLOW, "[NURSE]: A Person will be discharge soon check the /listbed.");
						}
					}
				}
			}
			if(pData[i][pHospital] && pData[i][pHospitalTime])
			{
				pData[i][pHospitalTime]--;

				if(pData[i][pHospitalTime] == 0)
				{
					SetPlayerInterior(i, 2);
					SetPlayerVirtualWorld(i, 2);
					SetCameraBehindPlayer(i);
					ApplyAnimationEx(i, "SUNBATHE", "Lay_Bac_in", 4.0, 0, 1, 1, 1, 0);
					if(!enabledpurge) 
					{
					
						new rand = random(sizeof(hospitalspawns));
						SetFreezePos(i, hospitalspawns[rand][0], hospitalspawns[rand][1], hospitalspawns[rand][2]);
						SetPlayerFacingAngle(i, 89.7591);
						GivePlayerCash(i, -5000);
						SCM(i, COLOR_SYNTAX, "Confine we deduct you $5000");
						if(pData[i][pDelivered])
						{
							SCM(i, COLOR_DOCTOR, "You have been billed $5000 for your stay. Your items is safed!");
							pData[i][pDelivered] = 0;
						}
						else
						{
							SCM(i, COLOR_DOCTOR, "You have been billed $5000 for your stay. Your illegal items have been confiscated by staff.");
							SCM(i, COLOR_LIGHTRED, "(( You have lost 30 minutes of your memory. ))");
							pData[i][pBedType] = 1;
							pData[i][pBedTime] = 5 * 60;					
							SetPlayerInBed(i);
						}
					}
					else 
					{
						new rand = random(sizeof(purgespawn));
						SetFreezePos(i, purgespawn[rand][0], purgespawn[rand][1], purgespawn[rand][2]);
						
						SetPlayerFacingAngle(i, 190);
						SetCameraBehindPlayer(i);
						SCM(i, COLOR_DOCTOR, "You have been discharged for free for the purge event. (( Type /purgegun to refill your weapons. ))");
						SetPlayerInterior(i, 0);
						SetPlayerVirtualWorld(i, 0);
					}
					new hospital[32];
					switch(pData[i][pHospitalType])
					{
					    case HOSPITAL_COUNTY: strcat(hospital, "All Saints General");
					    case HOSPITAL_ALLSAINTS: strcat(hospital, "County General");
					}

					UpdateDynamic3DTextLabelText(InjuredLabel[i], COLOR_DOCTOR, "");

					SetPlayerHealth(i, pData[i][pSpawnHealth]);
					SetScriptArmour(i, pData[i][pSpawnArmor]);
					
					pData[i][pStress] = 50; // Hunger
					pData[i][pStressTimer] = 0;
					//YOU WILL LOST
					
					//RMEMOVE
					pData[i][pBrokenLeg] = 0;
					pData[i][pBrokenHP] = 0;
					pData[i][pBleeding] = 0;
                    pData[i][pBandage] = 0;
					pData[i][pHospital] = 0;
		            pData[i][pHospitalTime] = 0;
		        }
			}
			if(pData[i][pRefuel] != INVALID_VEHICLE_ID)
			{
			    pData[i][pRefuelAmount] += 5;
			    vehicleFuel[pData[i][pRefuel]]++;

			    if(vehicleFuel[pData[i][pRefuel]] >= 100 || pData[i][pCash] < pData[i][pRefuelAmount] || GetVehicleParams(pData[i][pRefuel], VEHICLE_ENGINE))
			    {
			        AddPointMoney(POINT_FUEL, pData[i][pRefuelAmount]);
			        GivePlayerCash(i, -pData[i][pRefuelAmount]);
			        SM(i, COLOR_AQUA, "You've refilled your vehicle's gas tank for "SVRCLR"$%i{CCFFFF}.", pData[i][pRefuelAmount]);

			        pData[i][pRefuel] = INVALID_VEHICLE_ID;
			        pData[i][pRefuelAmount] = 0;
			    }
			}
			if(pData[i][pMiningTime] > 0)
			{
			    pData[i][pMiningTime]--;

			    if(pData[i][pMiningTime] <= 0)
				{
					if(IsPlayerInMiningArea(i) && GetPlayerState(i) == PLAYER_STATE_ONFOOT && !pData[i][pTazedTime] && !pData[i][pCuffed])
				    {
				        new number = random(20) + 1;

				        pData[i][pCP] = CHECKPOINT_MINING;

		                SetPlayerAttachedObject(i, 9, 3929, 1, 0.242999, 0.324000, 0.012000, -17.200078, 20.699993, 9.800034, 0.579999, 0.617999, 0.676999);
						SetPlayerSpecialAction(i, SPECIAL_ACTION_CARRY);

						ApplyAnimation(i, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
						SetPlayerCheckpoint(i, 870.9653,-18.1363,63.7156, 3.0);

						if(1 <= number <= 3)
						{
						    pData[i][pMiningRock] = 2;
						    SCM(i, COLOR_AQUA, "You have dug up an old quality stone. Send it to our boss.");
						}
						else if(number == 6)
						{
						    SCM(i, COLOR_AQUA, "You have dug up a 1980's stone. Send it to our boss.");
						    pData[i][pMiningRock] = 3;
						}
						else if(number == 2)
						{
						    SCM(i, COLOR_AQUA, "You have dug up a quality metal. Send it to our boss.");
						    pData[i][pMiningRock] = 4;
						}
						else if(number == 9 && !pData[i][pRareTime])
						{
						    SCM(i, COLOR_AQUA, "Woah, this looks oddly weird to find in the middle of a city, lets show it to the boss.");
						    pData[i][pMiningRock] = 5;
						}
						else
						{
						    pData[i][pMiningRock] = 1;
	                    	SCM(i, COLOR_AQUA, "You have dug up an ordinary stone. Send it to our boss.");
						}
					}
					else
					{
					    RemovePlayerAttachedObject(i, 9);
					    ClearAnimations(i, 1);
					}
				}
			}
			if(pData[i][pButcherTime] > 0)
			{
			    pData[i][pButcherTime]--;

			    if(pData[i][pButcherTime] <= 0)
				{
					if(IsPlayerInButchergArea(i) && GetPlayerState(i) == PLAYER_STATE_ONFOOT && !pData[i][pTazedTime] && !pData[i][pCuffed])
				    {
				        new number = random(20) + 1;

				        pData[i][pCP] = CHECKPOINT_BUTCHER;

		                SetPlayerAttachedObject(i, 9, 2806, 1, 0.242999, 0.324000, 0.012000, -17.200078, 20.699993, 9.800034, 0.579999, 0.617999, 0.676999);
						SetPlayerSpecialAction(i, SPECIAL_ACTION_CARRY);

						ApplyAnimation(i, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
						SetPlayerCheckpoint(i, -286.9680,-2151.0989,28.6339, 2.5);

						if(1 <= number <= 3)
						{
						    pData[i][pButcherMeat] = 2;
						    SCM(i, COLOR_AQUA, "You have chop an a meat. Send it to the Refrigirator.");
						}
						else if(number == 6)
						{
						   
						    SCM(i, COLOR_AQUA, "You have chop an a meat. Send it to the Refrigirator.");
						    pData[i][pButcherMeat] = 3;
						}
						else if(number == 2)
						{
						    
						    SCM(i, COLOR_AQUA, "You have chop an a meat. Send it to the Refrigirator.");
						    pData[i][pButcherMeat] = 4;
						}
						else if(number == 9 && !pData[i][pRareTime])
						{
						    
						    SCM(i, COLOR_AQUA, "You have chop an a meat. Send it to the Refrigirator.");
						    pData[i][pButcherMeat] = 5;
						}
						else
						{
						    pData[i][pButcherMeat] = 1;
	                    	
						    SCM(i, COLOR_AQUA, "You have chop an a meat. Send it to the Refrigirator.");
						}
					}
					else
					{
					    RemovePlayerAttachedObject(i, 9);
					    ClearAnimations(i, 1);
					}
				}
			}
			if(pData[i][pCleanTime] > 0)
			{
			    pData[i][pCleanTime]--;

			    if(pData[i][pCleanTime] <= 0)
				{
					if(IsPlayerCleanarea(i) && GetPlayerState(i) == PLAYER_STATE_ONFOOT && !pData[i][pTazedTime] && !pData[i][pCuffed])
				    {
				        pData[i][pCP] = CHECKPOINT_CLEANING;
						SetPlayerAttachedObject(i, 9, 1265, 1, 0.427999, 0.490999, -0.011004, -51.600051, 86.199821, -39.600048, 0.505999, 0.736000, 1.183001);

						SetPlayerSpecialAction(i, SPECIAL_ACTION_CARRY);

						ApplyAnimation(i, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
						SetPlayerCheckpoint(i, 32.4046,2068.7500,717.0661, 3.0);
						
					}
					else
					{
					    RemovePlayerAttachedObject(i, 9);
					    ClearAnimations(i, 1);
					}
				}	
			}
			if(pData[i][pTacoEattime] > 0)
			{
			    pData[i][pTacoEattime]--;

			    if(pData[i][pTacoEattime] <= 0)
				{
					pData[i][pTaco] -= 1;
					pData[i][pHunger] += 40;
					pData[i][pHungerTimer] = 0;
					if (pData[i][pHunger] > 100)
					{
						pData[i][pHunger] = 100;
					}
					pData[i][pStress] += 3;
					pData[i][pStressTimer] = 0;
					if (pData[i][pStress] > 100)
					{
						pData[i][pStress] = 100;
					}
					RemovePlayerAttachedObject(i, 9);
					ClearAnimations(i, 1);
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET taco = %i WHERE uid = %i", pData[i][pTaco], pData[i][pID]);
					mysql_tquery(connectionID, queryBuffer);
					
					
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i WHERE uid = %i", pData[i][pHunger], pData[i][pHungerTimer], pData[i][pID]);
					mysql_tquery(connectionID, queryBuffer);
				}	
			}
			if(pData[i][pBurritoEattime] > 0)
			{
			    pData[i][pBurritoEattime]--;

			    if(pData[i][pBurritoEattime] <= 0)
				{
					pData[i][pBurrito] -= 1;
					pData[i][pHunger] += 45;
					pData[i][pHungerTimer] = 0;
					if (pData[i][pHunger] > 100)
					{
						pData[i][pHunger] = 100;
					}
					pData[i][pStress] += 4;
					pData[i][pStressTimer] = 0;
					if (pData[i][pStress] > 100)
					{
						pData[i][pStress] = 100;
					}
					RemovePlayerAttachedObject(i, 9);
					ClearAnimations(i, 1);
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET burrito = %i WHERE uid = %i", pData[i][pBurrito], pData[i][pID]);
					mysql_tquery(connectionID, queryBuffer);
					
					
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i WHERE uid = %i", pData[i][pHunger], pData[i][pHungerTimer], pData[i][pID]);
					mysql_tquery(connectionID, queryBuffer);
				}	
			}
			if(pData[i][pJuicetime] > 0)
			{
			    pData[i][pJuicetime]--;

			    if(pData[i][pJuicetime] <= 0)
				{
					pData[i][pJuice] -= 1;
					pData[i][pThirst] += 30;
					pData[i][pThirstTimer] = 0;
					if (pData[i][pThirst] > 100)
					{
						pData[i][pThirst] = 100;
					}
					pData[i][pStress] += 5;
					pData[i][pStressTimer] = 0;
					if (pData[i][pStress] > 100)
					{
						pData[i][pStress] = 100;
					}
					RemovePlayerAttachedObject(i, 9);
					ClearAnimations(i, 1);
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET juice = %i WHERE uid = %i", pData[i][pJuice], pData[i][pID]);
					mysql_tquery(connectionID, queryBuffer);
					
					
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET thirst = %i, thirsttimer = %i WHERE uid = %i", pData[i][pThirst], pData[i][pThirstTimer], pData[i][pID]);
					mysql_tquery(connectionID, queryBuffer);
				}	
			}
			if(pData[i][pTacotime] > 0)
			{
			    pData[i][pTacotime]--;

			    if(pData[i][pTacotime] <= 0)
				{
					if(GetPlayerState(i) == PLAYER_STATE_ONFOOT && !pData[i][pTazedTime] && !pData[i][pCuffed])
					{	
				        
						ClearAnimations(i, 1);
						SCM(i, COLOR_AQUA, "Woah, success for cooking a meal");
						pData[i][pMeat] -= 3;
						pData[i][pTaco] += 1;
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meat = %i WHERE uid = %i", pData[i][pMeat], pData[i][pID]);
						mysql_tquery(connectionID, queryBuffer);
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET taco = %i WHERE uid = %i", pData[i][pTaco], pData[i][pID]);
						mysql_tquery(connectionID, queryBuffer);
					}
					else
					{
					    ClearAnimations(i, 1);
					}
				}	
			}
			if(pData[i][pBurritotime] > 0)
			{
			    pData[i][pBurritotime]--;

			    if(pData[i][pBurritotime] <= 0)
				{
					if(GetPlayerState(i) == PLAYER_STATE_ONFOOT && !pData[i][pTazedTime] && !pData[i][pCuffed])
					{	
				        
						ClearAnimations(i, 1);
						SCM(i, COLOR_AQUA, "Woah, success for cooking a meal");
						pData[i][pMeat] -= 3;
						pData[i][pBurrito] += 1;
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meat = %i WHERE uid = %i", pData[i][pMeat], pData[i][pID]);
						mysql_tquery(connectionID, queryBuffer);
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET burrito = %i WHERE uid = %i", pData[i][pBurrito], pData[i][pID]);
						mysql_tquery(connectionID, queryBuffer);
					}
					else
					{
					    RemovePlayerAttachedObject(i, 9);
					    ClearAnimations(i, 1);
					}
				}	
			}
			if(pData[i][pDemolitionTime] > 0)
			{
			    pData[i][pDemolitionTime]--;

			    if(pData[i][pDemolitionTime] <= 0)
				{
					if(IsPlayerInDemolitionArea(i) && GetPlayerState(i) == PLAYER_STATE_ONFOOT && !pData[i][pTazedTime] && !pData[i][pCuffed])
				    {
				        new number = random(20) + 1;

				        pData[i][pCP] = CHECKPOINT_Demolition;

		                SetPlayerAttachedObject(i, 9, 3931, 1, 0.242999, 0.324000, 0.012000, -17.200078, 20.699993, 9.800034, 0.579999, 0.617999, 0.676999);
						SetPlayerSpecialAction(i, SPECIAL_ACTION_CARRY);

						ApplyAnimation(i, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
						SetPlayerCheckpoint(i, 2498.6509,74.2400,26.8766, 2.0);


						if(1 <= number <= 3)
						{
						    pData[i][pDemolition] = 2;
						    SCM(i, COLOR_AQUA, "Drop it to the checkpoint");
						}
						else if(number == 6)
						{
						    SCM(i, COLOR_AQUA, "Drop it to the checkpoint");
						    pData[i][pDemolition] = 3;
						}
						else if(number == 2)
						{
						    SCM(i, COLOR_AQUA, "Drop it to the checkpoint");
						    pData[i][pDemolition] = 4;
						}
						else if(number == 9)
						{
						    SCM(i, COLOR_AQUA, "Drop it to the checkpoint");
						    pData[i][pDemolition] = 5;
						}
						else
						{
						    pData[i][pDemolition] = 1;
	                    	SCM(i, COLOR_AQUA, "Drop it to the checkpoint");
						}
					}
					else
					{
					    RemovePlayerAttachedObject(i, 9);
					    ClearAnimations(i, 1);
					}
				}
			}
			if(pData[i][pTaxiPassenger] != INVALID_PLAYER_ID)
			{
			    if((GetVehicleModel(GetPlayerVehicleID(i)) != 420 && GetVehicleModel(GetPlayerVehicleID(i)) != 438) || !IsPlayerInVehicle(pData[i][pTaxiPassenger], GetPlayerVehicleID(i)) || pData[i][pTaxiFare] == 0 || pData[pData[i][pTaxiPassenger]][pCash] < pData[i][pTaxiBill])
			    {
			        CancelTaxiRide(i);
			    }
			    else
			    {
			        pData[i][pTaxiTime]++;

			        if(pData[i][pTaxiTime] >= 15)
			        {
			            pData[i][pTaxiTime] = 0;
			            pData[i][pTaxiBill] += pData[i][pTaxiFare];
					}

					format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~g~Taxi Meter:~w~ $%i", pData[i][pTaxiBill]);
					GameTextForPlayer(i, string, 3000, 3);
			    }
			}
			if(pData[i][pMuted] > 0)
			{
			    pData[i][pMuted]--;

			    if(pData[i][pMuted] <= 0)
			    {
			        SCM(i, SERVER_COLOR, "**"WHITE" You are no longer muted.");
				}
			}
			if(pData[i][pVendorTime] > 0)
			{
			    pData[i][pVendorTime]--;
			}
			if(pData[i][pBarTime] > 0)
			{
			    pData[i][pBarTime]--;
			}
			if(pData[i][pSpamTime] > 0)
			{
			    pData[i][pSpamTime]--;
			}
			if(pData[i][pVehicleCount] > 0)
			{
			    pData[i][pVehicleCount]--;
			}
			if(pData[i][pMechanicCall] > 0)
			{
			    pData[i][pMechanicCall]--;
			}
			if(pData[i][pTaxiCall] > 0)
			{
			    pData[i][pTaxiCall]--;
			}
			if(pData[i][pEmergencyCall] > 0)
			{
			    pData[i][pEmergencyCall]--;
			}
			if(pData[i][pCourierCooldown] > 0)
			{
			    pData[i][pCourierCooldown]--;
			}
   			if(pData[i][pPizzaCooldown] > 0)
			{
       			pData[i][pPizzaCooldown]--;
			}
			if(pData[i][pRareTime] > 0)
			{
		    	pData[i][pRareTime]--;
			}
   			if(pData[i][pDeathCooldown] > 0)
			{
       			pData[i][pDeathCooldown]--;
			}
			if(pData[i][pDetectiveCooldown] > 0)
			{
       			pData[i][pDetectiveCooldown]--;
			}
			if(pData[i][pLootTime] > 0)
			{
			    pData[i][pLootTime]--;

			    if(IsPlayerInBankRobbery(i) && pData[i][pLootTime] <= 0)
			    {	
					if(pData[i][pRobCash] >= 50000)
					{
						pData[i][pLootTime] = 0;
					}
			        new amount = random(5000) + 2000;
		
			        ClearAnimations(i, 1);

			        pData[i][pRobCash] += amount;
			        pData[i][pCP] = CHECKPOINT_ROBBERY;
			        pData[i][pLastLoad] = gettime();

					format(string, sizeof(string), "~g~+$%i", amount);
					GameTextForPlayer(i, string, 5000, 1);

			        SM(i, COLOR_AQUA, "You have looted "WHITE"$%i"TEAL" and now have "WHITE"$%i"TEAL". You can keep looting or deliver the cash to the "SVRCLR"marker{CCFFFF}.", amount, pData[i][pRobCash]);
					SetPlayerCheckpoint(i, 1463.0541,-1025.2123,23.8281, 3.0);
			    }
			    if(IsPlayerInBizRobbery(i) && pData[i][pLootTime] <= 0)
			    {	
					if(pData[i][pRobCash] >= 50000)
					{
						pData[i][pLootTime] = 0;
					}
			        new amount = random(5000) + 2000;
		
			        ClearAnimations(i, 1);

			        pData[i][pRobCash] += amount;
			        pData[i][pCP] = CHECKPOINT_BROBBERY;
			        pData[i][pLastLoad] = gettime();

					format(string, sizeof(string), "~g~+$%i", amount);
					GameTextForPlayer(i, string, 5000, 1);

			        SM(i, COLOR_AQUA, "You have looted "WHITE"$%i"TEAL" and now have "WHITE"$%i"TEAL". You can keep looting or deliver the cash to the "SVRCLR"marker{CCFFFF}.", amount, pData[i][pRobCash]);
					SetPlayerCheckpoint(i, 1314.6233,-896.3295,39.6563, 3.0);
			    }
				
				else if((pData[i][pRobbingBiz] >= 0 && pData[i][pRobbingBiz] == GetInsideBusiness(i)) && pData[i][pLootTime] <= 0)
			    {
					if(pData[i][pRobCash] >= BusinessInfo[pData[i][pRobbingBiz]][bCash])
					{
						SCM(i, COLOR_GREY2, "Your pockets can't hold anymore!");
						pData[i][pLootTime] = 0;
					} else {
						pData[i][pLootTime] = 5;
						SCM(i, COLOR_SYNTAX, "Looting business vault...");
					}

			        new amount = random(500) + 500;

			        //ClearAnimations(i, 1);

			        pData[i][pRobCash] += amount;
			        pData[i][pCP] = CHECKPOINT_ROBBERYBIZ;
			        pData[i][pLastLoad] = gettime();

					format(string, sizeof(string), "~g~+P%i", amount);
					GameTextForPlayer(i, string, 5000, 1);

			        SM(i, COLOR_TEAL, "You have looted "WHITE"P%i"TEAL" and now have "WHITE"P%i"TEAL". You can keep looting or deliver the cash to the "SVRCLR"marker{CCFFFF}.", amount, pData[i][pRobCash]);
					SetPlayerCheckpoint(i, BusinessInfo[pData[i][pRobbingBiz]][bPosX], BusinessInfo[pData[i][pRobbingBiz]][bPosY], BusinessInfo[pData[i][pRobbingBiz]][bPosZ], 3.0);
			    }
				else if((pData[i][pRobbingHouse] >= 0 && pData[i][pRobbingHouse] == GetInsideHouse(i)) && pData[i][pLootTime] <= 0)
			    {
					if(pData[i][pRobCash] >= HouseInfo[pData[i][pRobbingHouse]][hCash])
					{
						SCM(i, COLOR_GREY2, "Your pockets can't hold anymore!");
						pData[i][pLootTime] = 0;
					} else {
						pData[i][pLootTime] = 5;
						SCM(i, COLOR_SYNTAX, "Looting house vault...");
					}

			        new amount = random(500) + 500;

			        //ClearAnimations(i, 1);

			        pData[i][pRobCash] += amount;
			        pData[i][pCP] = CHECKPOINT_ROBBERYHOUSE;
			        pData[i][pLastLoad] = gettime();

					format(string, sizeof(string), "~g~+P%i", amount);
					GameTextForPlayer(i, string, 5000, 1);

			        SM(i, COLOR_TEAL, "You have looted "WHITE"P%i"TEAL" and now have "WHITE"P%i"TEAL". You can keep looting or deliver the cash to the "SVRCLR"marker{CCFFFF}.", amount, pData[i][pRobCash]);
					SetPlayerCheckpoint(i, HouseInfo[pData[i][pRobbingHouse]][hPosX], HouseInfo[pData[i][pRobbingHouse]][hPosY], HouseInfo[pData[i][pRobbingHouse]][hPosZ], 3.0);
			    }
			}
			if(pData[i][pFindTime] > 0)
			{
			    pData[i][pFindTime]--;

			    if(pData[i][pFindTime] == 0)
			    {
			        SetPlayerMarkerForPlayer(i, pData[i][pFindPlayer], GetPlayerColor(pData[i][pFindPlayer]));
					pData[i][pFindPlayer] = INVALID_PLAYER_ID;
				}
			}
			if((pData[i][pToggleMusic]) || (pData[i][pBoomboxListen] != INVALID_PLAYER_ID && GetNearbyBoombox(i) != pData[i][pBoomboxListen]))
			{
				pData[i][pBoomboxListen] = INVALID_PLAYER_ID;

				if(pData[i][pStreamType] == MUSIC_BOOMBOX)
				{
				    StopAudioStreamForPlayer(i);
				    pData[i][pStreamType] = MUSIC_NONE;
				}
			}
			if((!pData[i][pToggleMusic]) && ((boomboxid = GetNearbyBoombox(i)) != INVALID_PLAYER_ID && pData[i][pBoomboxListen] != boomboxid))
			{
			    pData[i][pBoomboxListen] = boomboxid;

			    if(pData[i][pStreamType] == MUSIC_NONE)
			    {
			        PlayAudioStreamForPlayer(i, pData[boomboxid][pBoomboxURL]);
			        pData[i][pStreamType] = MUSIC_BOOMBOX;
			    }
			}
            if(pData[i][pPickPlant] != INVALID_PLAYER_ID)
            {
                pData[i][pPickTime]--;

                if(pData[i][pPickTime] <= 0)
                {
                    new planterid = pData[i][pPickPlant];

                    if(!IsPlayerConnected(planterid) || !pData[planterid][pLogged] || !pData[planterid][pPotPlanted])
                    {
                        SCM(i, COLOR_SYNTAX, "This plant is no longer available to pick.");
					}
					else if(!IsPlayerInRangeOfPoint(i, 3.0, pData[planterid][pPotX], pData[planterid][pPotY], pData[planterid][pPotZ]))
					{
					    SCM(i, COLOR_SYNTAX, "Picking failed. You left the area of the plant.");
					}
					else if(GetPlayerSpecialAction(i) != SPECIAL_ACTION_DUCK)
					{
					    SCM(i, COLOR_SYNTAX, "Picking failed. You must stay crouched when picking a plant.");
					}
					else
					{
					    pData[i][pPot] += pData[planterid][pPotGrams];

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[i][pPot], pData[i][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(i, COLOR_AQUA, "You have harvested %i grams of pot from this plant.", pData[planterid][pPotGrams]);
					    DestroyPotPlant(planterid);
					}

					pData[i][pPickPlant] = INVALID_PLAYER_ID;
					pData[i][pPickTime] = 0;
				}
			}
			if(pData[i][pCookMeth] > 0)
			{
                pData[i][pCookTime]--;

                if(pData[i][pCookTime] <= 0)
                {
                    if(!IsPlayerInRangeOfPoint(i, 10.0, 333.5727, 1121.8536, 1083.8903))
                    {
                        SCM(i, COLOR_SYNTAX, "Cooking failed. You have left the cooking spot.");
                        ResetCooking(i);
                    }
                    else if(pData[i][pEphedrine] <= 0)
                    {
                        SCM(i, COLOR_SYNTAX, "Cooking failed. You have ran out of ephedrine.");
                        ResetCooking(i);
					}
                    else if(pData[i][pBakingSoda] <= 0)
                    {
                        SCM(i, COLOR_SYNTAX, "Cooking failed. You have ran out of baking soda.");
                        ResetCooking(i);
					}
					else if(pData[i][pMeth] + 2 > GetPlayerCapacity(CAPACITY_METH))
                    {
                        SCM(i, COLOR_SYNTAX, "Cooking failed. You have ran out of inventory space for meth.");
                        ResetCooking(i);
					}
					else
					{
						SCM(i, COLOR_SYNTAX, "+2 grams of meth!");

						pData[i][pEphedrine] -= 1;
						pData[i][pMeth] += 2;
						pData[i][pCookGrams] += 2;

						if((pData[i][pCookGrams] % 4) == 0)
						{
						    pData[i][pMuriaticAcid]--;
						    pData[i][pBakingSoda]--;
						}

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i, meth = %i, muriaticacid = %i, bakingsoda = %i WHERE uid = %i", pData[i][pEphedrine], pData[i][pMeth], pData[i][pMuriaticAcid], pData[i][pBakingSoda], pData[i][pID]);
						mysql_tquery(connectionID, queryBuffer);

						if(!pData[i][pEphedrine])
						{
						    SM(i, COLOR_LIGHTRED, "You ran out of ephedrine therefore ending your cookoff. You made %i grams of meth from %i grams of ephedrine.", pData[i][pCookGrams], pData[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else if(!pData[i][pMuriaticAcid])
						{
						    SM(i, COLOR_LIGHTRED, "You ran out of muriatic acid therefore ending your cookoff. You made %i grams of meth from %i grams of ephedrine.", pData[i][pCookGrams], pData[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
       					else if(!pData[i][pBakingSoda])
						{
						    SM(i, COLOR_LIGHTRED, "You ran out of baking soda therefore ending your cookoff. You made %i grams of meth from %i grams of ephedrine.", pData[i][pCookGrams], pData[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else if(pData[i][pMeth] >= GetPlayerCapacity(CAPACITY_METH))
	                    {
	                        SM(i, COLOR_LIGHTRED, "You ran out of inventory space for meth therefore ending your cookoff. You made %i grams of meth from %i grams of ephedrine.", pData[i][pCookGrams], pData[i][pCookGrams] / 2);
							ResetCooking(i);
					    }
					    else
					    {
					        pData[i][pCookTime] = 15;
						}
                    }
                }
			}
			if(pData[i][pDrugsUsed] >= 4)
			{
			    pData[i][pDrugsTime]--;

			    if(pData[i][pDrugsTime] <= 0)
			    {
			        SCM(i, SERVER_COLOR, "**"WHITE" You are no longer stoned.");
			        SetPlayerWeather(i, gWeather);

					SetPlayerTime(i, gWorldTime, 0);

			        pData[i][pDrugsUsed] = 0;
			        pData[i][pDrugsTime] = 0;
			    }
			    else
			    {
			        SetPlayerWeather(i, -66);
			        SetPlayerTime(i, 12, 0);
				}
			}
			if(pData[i][pPoisonTime] > 0)
			{
			    new
			        Float:health;
			    GetPlayerHealth(i, health);
			    SetPlayerHealth(i, health - 3.0 < 1.0 ? 1.0 : health - 3.0);
			    pData[i][pPoisonTime]--;
			}

			AnticheatCheck(i);

			//GetPlayerHealth(i, pData[i][pHealth]);

			if(pData[i][pGang] >= 0 && !pData[i][pBandana])
			{
				new id, gang = pData[i][pGang], color;
				if(GangInfo[gang][gColor] == -1 || GangInfo[gang][gColor] == -256)
				{
					color = 0xC8C8C8FF;
				}
				else
				{
					color = GangInfo[gang][gColor];
				}
				if((id = GetNearbyTurf(i)) >= 0 && TurfInfo[id][tTime] == 0 && TurfInfo[id][tCapturer] != INVALID_PLAYER_ID)
				{
					format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", color >>> 8, GangInfo[gang][gName],GangRanks[gang][pData[i][pGangRank]]);
					//UpdateDynamic3DTextLabelText(PlayerLabel[i], COLOR_WHITE, string);
					pData[i][pBandana] = 1;
					SendClientMessage(i, COLOR_WHITE, "Your bandana was enabled automatically as you entered a turf in an active war.");
				}
				if((id = GetNearbyPoint(i, 30.0)) >= 0 && PointInfo[id][pTime] == 0 && PointInfo[id][pCapturer] != INVALID_PLAYER_ID)
				{
					format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", color >>> 8, GangInfo[gang][gName],GangRanks[gang][pData[i][pGangRank]]);
					//UpdateDynamic3DTextLabelText(PlayerLabel[i], COLOR_WHITE, string);
					pData[i][pBandana] = 1;
					SendClientMessage(i, COLOR_WHITE, "Your bandana was enabled automatically as you are in range of an active point.");
				}
			}

			if(IsPlayerInsideOfSafeZone(i) != -1)
			{
				SetPlayerArmedWeapon(i, 0);
			}
			
			if(pData[i][pGang] >= 0 && !pData[i][pBandana])
			{
				new id, gang = pData[i][pGang], color;
				if(GangInfo[gang][gColor] == -1 || GangInfo[gang][gColor] == -256)
				{
					color = 0xC8C8C8FF;
				}
				else
				{
					color = GangInfo[gang][gColor];
				}
				if((id = GetNearbyTurf(i)) >= 0 && TurfInfo[id][tTime] == 0 && TurfInfo[id][tCapturer] != INVALID_PLAYER_ID)
				{
					format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", color >>> 8, GangInfo[gang][gName],GangRanks[gang][pData[i][pGangRank]]);
					//UpdateDynamic3DTextLabelText(PlayerLabel[i], COLOR_WHITE, string);
					pData[i][pBandana] = 1;
					SendClientMessage(i, COLOR_WHITE, "Your bandana was enabled automatically as you entered a turf in an active war.");
				}
				if((id = GetNearbyPoint(i, 30.0)) >= 0 && PointInfo[id][pTime] == 0 && PointInfo[id][pCapturer] != INVALID_PLAYER_ID)
				{
					format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", color >>> 8, GangInfo[gang][gName],GangRanks[gang][pData[i][pGangRank]]);
					//UpdateDynamic3DTextLabelText(PlayerLabel[i], COLOR_WHITE, string);
					pData[i][pBandana] = 1;
					SendClientMessage(i, COLOR_WHITE, "Your bandana was enabled automatically as you are in range of an active point.");
				}
			}
			
			
			if(!pData[i][pBackup] && !IsPlayerBeingFound(i))
			{
				// Nametag colors gang colors bandana badge
				if(pData[i][pJoinedEvent] && EventInfo[eType] == 2)
				{
				    SetPlayerColor(i, (pData[i][pEventTeam] == RED_TEAM) ? (0xFF000000) : (0x0000FF00));
				}
				else if(pData[i][pPaintball] == 2)
				{
				    SetPlayerColor(i, (pData[i][pPaintballTeam] == 1) ? (0x33CCFF00) : (0xFFFF9900));
				}
				else if(pData[i][pJailType] == 2)
				{
				    SetPlayerColor(i, 0xF4A41900);
				}
				else if(PlayerHasJob(i, JOB_TAXIDRIVER) && pData[i][pTaxiFare] > 0)
				{
				    SetPlayerColor(i, 0xFFD70000);
				}
				else if(pData[i][pFaction] >= 0 && pData[i][pDuty] && FactionInfo[pData[i][pFaction]][fType] != FACTION_HITMAN)
				{
					SetPlayerColor(i, FactionInfo[pData[i][pFaction]][fColor] & ~0xff);
				}
				else if(pData[i][pGang] >= 0 && pData[i][pBandana])
				{
				    SetPlayerColor(i, GangInfo[pData[i][pGang]][gColor] & ~0xff);
				}
				else if(pData[i][pDonator] > 0 && pData[i][pVIPColor])
				{
				    SetPlayerColor(i, 0xC2A2DA00);
				}
          		else if(pData[i][pAdmin] > 0 && pData[i][pAdminColor])
				{
				    SetPlayerColor(i, 0xFFFFFF00);
				}
				/*else if(pData[i][pAdmin] > 0 && pData[i][pAdminDuty])
				{
                    SetPlayerSpecialTag(i, TAG_ADMIN);
				}*/
   				else if(pData[i][pAFK])
				{
					SetPlayerSpecialTag(i, TAG_AFK);
				}
				else
				{
				    SetPlayerColor(i, 0xFFFFFF00);
				    //SetPlayerSpecialTag(i, TAG_NORMAL);
				}
			}
		}
	}
	if((gGMX) && mysql_unprocessed_queries(connectionID) == 0)
	{
	    SendRconCommand("gmx");
		SendRconCommand("reloadfs propamap");
		//SendRconCommand("reloadfs propawound");
	}

	for(new i = 0; i < MAX_ACTORS; i ++)
	{
	    if(IsValidActor(i))
	    {
	        new
	            Float:x,
	            Float:y,
	            Float:z;
	        GetActorPos(i, x, y, z);
	        SetActorPos(i, x, y, z);
	    }
	}
	format(string, sizeof(string), "Marijuana Seeds\n"WHITE"Stock: %i\nPrice: $1500/seed\n/getdrug seeds [amount]", gSeedsStock);
	UpdateDynamic3DTextLabelText(gSeedsStockText, COLOR_YELLOW, string);

	gOverallstock = (gTacoStock + gBugerStock);

	format(string, sizeof(string), "TACO SHOP \n"WHITE"Stock: %i\n/get", gOverallstock);
	UpdateDynamic3DTextLabelText(gTacoStockText, COLOR_YELLOW, string);

	format(string, sizeof(string), "Raw Ephedrine\n"WHITE"Stock: %i\nPrice: $1500/gram\n/getdrug ephedrine [amount]", gEphedrineStock);
	UpdateDynamic3DTextLabelText(gEphedrineStockText, COLOR_YELLOW, string);

	format(string, sizeof(string), "Crack\n"WHITE"Stock: %i\nPrice: $1500/gram\n/getdrug crack [amount]", gCrackStock);
    UpdateDynamic3DTextLabelText(gCrackText, COLOR_YELLOW, string);

	if(Iter_Count(Player) > gPlayerRecord)
	{
		gPlayerRecord = Iter_Count(Player);
		gRecordDate = GetDate();
		SaveServerInfo();
	}
}

forward MinuteTimer();
public MinuteTimer()
{
	new hour;
	gettime(.hour = hour);
	RefreshTime();
	if(gHour != hour)
	{
	    SMA(COLOR_WHITE, "The server time is now: %02d:00.", hour);
    	foreach(new i : Player)
	    {
	        if(pData[i][pLogged] && !pData[i][pKicked])
	        {
		        if(pData[i][pAFK] && pData[i][pAFKTime] > 900)
		        {
		            SCM(i, COLOR_TEAL, "You didn't receive a paycheck this hour as you were AFK for more than "WHITE"15 minutes"TEAL".");
		        }
		        else if(pData[i][pMinutes] < 40)
		        {
		            SCM(i, COLOR_TEAL, "You are ineligible for a paycheck as you played less than "WHITE"25 minutes"TEAL" this hour.");
		        }
		        else
		        {
					SendPaycheck(i);
					SCM(i, COLOR_SYNTAX, "You have earned your paycheck.");
					//Dyuze(i, "Payday", "You have earned your paycheck.");
				}
				if(pData[i][pReportMuted])
				{
					pData[i][pReportMuted]--;

					if(pData[i][pReportMuted] <= 0)
					{
					    pData[i][pReportMuted] = 0;
					    pData[i][pReportWarns] = 0;

					    SCM(i, COLOR_YELLOW, "Your report mute has automatically been lifted.");
				    }
				}
			}
	    }

	    for(new i = 0; i < MAX_POINTS; i ++)
	    {
	        if(PointInfo[i][pExists])
	        {
	            if(PointInfo[i][pTime] > 0)
	            {
	                PointInfo[i][pTime]--;
	                ReloadPoint(i);
				}

				if(!PointInfo[i][pTime])
				{
				    SMA(COLOR_TEAL, ""WHITE"%s"TEAL" is now available to capture.", PointInfo[i][pName]);
				    PointInfo[i][pCapturedGang] = -1;
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET time = %i, capturedgang = %i WHERE id = %i", PointInfo[i][pTime], PointInfo[i][pCapturedGang], i);
             	mysql_tquery(connectionID, queryBuffer);
	        }
		}

		for(new i = 0; i < MAX_TURFS; i ++)
	    {
	        if(TurfInfo[i][tExists])
	        {
	            if(TurfInfo[i][tTime] > 0)
	            {
	                TurfInfo[i][tTime]--;
	                ReloadTurf(i);
				}

				if(!TurfInfo[i][tTime] && TurfInfo[i][tType] != 8)
				{
				    SendTurfMessage(i, COLOR_GREEN, "%s is now available to capture.", TurfInfo[i][tName]);
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET time = %i WHERE id = %i", TurfInfo[i][tTime], i);
             	mysql_tquery(connectionID, queryBuffer);
	        }
		}


		switch(hour)
		{
		    case 0, 6, 12, 18:
		    {
		        for(new i = 0; i < MAX_GANGS; i ++)
		        {
		            if(GangInfo[i][gSetup] && GangInfo[i][gTurfTokens] < 10)
		            {
		                GangInfo[i][gTurfTokens]++;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = turftokens + 1 WHERE id = %i", i);
		                mysql_tquery(connectionID, queryBuffer);
		            }
		        }

		        for(new i = 0; i < MAX_FACTIONS; i ++)
		        {
		            if(FactionInfo[i][fType] == FACTION_POLICE && FactionInfo[i][fTurfTokens] < 3)
		            {
		                FactionInfo[i][fTurfTokens]++;

		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens + 1 WHERE id = %i", i);
		                mysql_tquery(connectionID, queryBuffer);
		            }
		        }
		    }
		}

		if(RobberyInfo[rTime] > 0)
		{
		    RobberyInfo[rTime]--;
		}
		if(RobberyInfo1[rTime1] > 0)
		{
		    RobberyInfo1[rTime1]--;
		}
		if(ChopInfo[cTime] > 0)
		{
		    ChopInfo[cTime]--;
		}
		if(RobInfo[rTime] > 0)
		{
		    RobInfo[rTime]--;
		}
		if(YachtInfo[yTime] > 0) // Timer
		{
		    YachtInfo[yTime]--;
		}		
		if(RobInfo1[rTime1] > 0)
		{
		    RobInfo1[rTime1]--;
		}
		for(new i = 0; i < MAX_BUSINESSES; i ++)
		{
			if(BusinessInfo[i][bRobbed] > 0)
			{
				BusinessInfo[i][bRobbed]--;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET robbed = %i WHERE id = %i", BusinessInfo[i][bRobbed], BusinessInfo[i][bID]);
				mysql_tquery(connectionID, queryBuffer);

			}
		}
		for(new i = 0; i < MAX_HOUSES; i ++)
		{
			if(HouseInfo[i][hRobbed] > 0)
			{
				HouseInfo[i][hRobbed]--;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET robbed = %i WHERE id = %i", HouseInfo[i][hRobbed], HouseInfo[i][hID]);
				mysql_tquery(connectionID, queryBuffer);

			}
		}

	    SetWorldTime(hour);

		gWorldTime = hour;
	    gHour = hour;

	    gCharityHealth = 0;
	    gCharityArmor = 0;
	}
	else
	{
	    foreach(new i : Player)
		{
		    if(pData[i][pPotPlanted] && pData[i][pPotTime] > 0)
		    {
		        pData[i][pPotTime]--;

		        if((pData[i][pPotTime] % 2) == 0)
		        {
		            pData[i][pPotGrams]++;
		        }
		    }
		    if(pData[i][pLogged] && pData[i][pAFKTime] < 900)
		    {
				//new amount = 35 * min(pData[i][pLevel], 21);
		        //AddToPaycheck(i, amount);

		        pData[i][pMinutes]++;
			}
		}

		for(new i = 0; i < MAX_POINTS; i ++)
	    {
	        if(PointInfo[i][pExists] && PointInfo[i][pCapturer] != INVALID_PLAYER_ID && PointInfo[i][pCaptureTime] > 0)
	        {
	            if(pData[PointInfo[i][pCapturer]][pGang] == -1)// || pData[PointInfo[i][pCapturer]][pGangRank] < 5)
	            {
	                PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	                PointInfo[i][pCaptureTime] = 0;
	            }
	            else
	            {
		            PointInfo[i][pCaptureTime]--;

		            if(PointInfo[i][pCaptureTime] <= 0)
		            {
		                GiveGangPoints(pData[PointInfo[i][pCapturer]][pGang], 10);

		                GetPlayerName(PointInfo[i][pCapturer], PointInfo[i][pCapturedBy], MAX_PLAYER_NAME);
					    PointInfo[i][pCapturedGang] = pData[PointInfo[i][pCapturer]][pGang];

						GangInfo[PointInfo[i][pCapturedGang]][gCash] += PointInfo[i][pProfits];
						SMA(COLOR_GREEN, "{%06x}%s has successfully captured %s for %s.", GangInfo[PointInfo[i][pCapturedGang]][gColor] >>> 8, GetRPName(PointInfo[i][pCapturer]), PointInfo[i][pName], GangInfo[PointInfo[i][pCapturedGang]][gName]);
						SendGangMessage(PointInfo[i][pCapturedGang], COLOR_YELLOW, "Your gang has earned $%i and 10 GP for successfully capturing this point.", PointInfo[i][pProfits]);

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[PointInfo[i][pCapturedGang]][gCash], PointInfo[i][pCapturedGang]);
					    mysql_tquery(connectionID, queryBuffer);

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedby = '%s', capturedgang = %i, profits = 0, time = 20 WHERE id = %i", PointInfo[i][pCapturedBy], PointInfo[i][pCapturedGang], i);
					    mysql_tquery(connectionID, queryBuffer);

	                    PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
		                PointInfo[i][pCaptureTime] = 0;
		                PointInfo[i][pProfits] = 0;
		                PointInfo[i][pTime] = 20;

		                ReloadPoint(i);
					}
				}
			}
		}

		for(new i = 0; i < MAX_TURFS; i ++)
	    {
	        if(TurfInfo[i][tExists] && TurfInfo[i][tCapturer] != INVALID_PLAYER_ID && TurfInfo[i][tCaptureTime] > 0)
	        {
	            if((GetFactionType(TurfInfo[i][tCapturer]) != FACTION_POLICE) && (pData[TurfInfo[i][tCapturer]][pGang] == -1))// || pData[TurfInfo[i][tCapturer]][pGangRank] < 5))
	            {
	                TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
	                TurfInfo[i][tCaptureTime] = 0;
	                ReloadTurf(i);
	            }
	            else
	            {
		            TurfInfo[i][tCaptureTime]--;

		            if(TurfInfo[i][tCaptureTime] <= 0)
		            {
		                GetPlayerName(TurfInfo[i][tCapturer], TurfInfo[i][tCapturedBy], MAX_PLAYER_NAME);

		                if(GetFactionType(TurfInfo[i][tCapturer]) == FACTION_POLICE)
		                {
		                    TurfInfo[i][tCapturedGang] = -1;
							SMA(COLOR_GREEN, "%s has been successfully claimed back as a civilian turf by Officer %s.", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]));
						}
						else
						{
						    new gangid = pData[TurfInfo[i][tCapturer]][pGang];

						    TurfInfo[i][tCapturedGang] = gangid;

						    GiveGangPoints(gangid, 10);
						    SMA(COLOR_GREEN, "%s has been successfully claimed by %s for %s.", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]), GangInfo[gangid][gName]);

							switch(TurfInfo[i][tType])
							{
							   case 1:
								{
								
									GangInfo[gangid][gCash] = GangInfo[gangid][gCash] + 45000 > GetGangStashCapacity(gangid, STASH_CAPACITY_CASH) ? GetGangStashCapacity(gangid, STASH_CAPACITY_CASH) : GangInfo[gangid][gHPAmmo] + 45000;
									SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned 45000 dollars of clean money in its stash for capturing this turf!");
									new amount = 45000;
								
									mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", amount, gangid);
									mysql_tquery(connectionID, queryBuffer);
								}
								case 2:
								{
									new amount = 50000;
									GangInfo[gangid][gMaterials] = GangInfo[gangid][gMaterials] + amount > GetGangStashCapacity(gangid, STASH_CAPACITY_MATERIALS) ? GetGangStashCapacity(gangid, STASH_CAPACITY_MATERIALS) : GangInfo[gangid][gMaterials] + 50000;
									SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned %i materials in the stash for capturing this turf!", amount);
								
									mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET materials = %i WHERE id = %i", GangInfo[gangid][gMaterials], gangid);
									mysql_tquery(connectionID, queryBuffer);
								}
								case 3:
								{
								
									GangInfo[gangid][gCrack] = GangInfo[gangid][gCrack] + 100 > GetGangStashCapacity(gangid, STASH_CAPACITY_COCAINE) ? GetGangStashCapacity(gangid, STASH_CAPACITY_COCAINE) : GangInfo[gangid][gCrack] + 100;
									SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned 100 grams of Crack in the stash for capturing this turf!");
								
									mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET crack = %i WHERE id = %i", GangInfo[gangid][gCrack], gangid);
									mysql_tquery(connectionID, queryBuffer);
								}
								case 4:
								{
									GangInfo[gangid][gPot] = GangInfo[gangid][gPot] + 100 > GetGangStashCapacity(gangid, STASH_CAPACITY_WEED) ? GetGangStashCapacity(gangid, STASH_CAPACITY_WEED) : GangInfo[gangid][gPot] + 100;
								
									SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned 100 grams of pot in the stash for capturing this turf!");
								
									mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot = %i, WHERE id = %i", GangInfo[gangid][gPot], gangid);
									mysql_tquery(connectionID, queryBuffer);
								}
								case 5:
								{
									GangInfo[gangid][gPot] = GangInfo[gangid][gPot] + 50 > GetGangStashCapacity(gangid, STASH_CAPACITY_WEED) ? GetGangStashCapacity(gangid, STASH_CAPACITY_WEED) : GangInfo[gangid][gPot] + 50;
									GangInfo[gangid][gPot] = GangInfo[gangid][gPot] + 50 > GetGangStashCapacity(gangid, STASH_CAPACITY_WEED) ? GetGangStashCapacity(gangid, STASH_CAPACITY_WEED) : GangInfo[gangid][gPot] + 50;
									GangInfo[gangid][gMeth] = GangInfo[gangid][gMeth] + 50 > GetGangStashCapacity(gangid, STASH_CAPACITY_METH) ? GetGangStashCapacity(gangid, STASH_CAPACITY_METH) : GangInfo[gangid][gMeth] + 50;
									SendGangMessage(gangid, COLOR_YELLOW, "Your gang earned 50 grams of pot, 50 grams of crack & 50 grams meth in the stash for capturing this turf!");
								
									mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot = %i,crack = %i, meth = %i WHERE id = %i", GangInfo[gangid][gPot],GangInfo[gangid][gCrack],  GangInfo[gangid][gMeth], gangid);
									mysql_tquery(connectionID, queryBuffer);
								}
								case 6:
								{
									GangInfo[gangid][gWeapons][GANGWEAPON_VEST] += 2;
									GangInfo[gangid][gWeapons][GANGWEAPON_9MM] += 4;
									GangInfo[gangid][gWeapons][GANGWEAPON_TEC9] += 1;
									SendGangMessage(gangid, COLOR_YELLOW, "Your gang has earned vest(2), 9mm(4) and Uzi (1)  in its stash for capturing this turf!");
								
									mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_vest = %i, weapon_9mm = %i,weapon_uzi = %i WHERE id = %i", GangInfo[gangid][gWeapons][GANGWEAPON_VEST], GangInfo[gangid][gWeapons][GANGWEAPON_9MM], GangInfo[gangid][gWeapons][GANGWEAPON_TEC9],  gangid);
									mysql_tquery(connectionID, queryBuffer);
								}
								case 7:
								{
									GangInfo[gangid][gWeapons][GANGWEAPON_MP5] += 3;
									GangInfo[gangid][gWeapons][GANGWEAPON_TEC9] += 3;
									GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN] += 2;
								
								
									SendGangMessage(gangid, COLOR_YELLOW, "Your gang has earned mp5(3), uzi(3) shotgun(2) in its stash for capturing this turf!");
								
									mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_mp5 = %i, weapon_uzi = %i, weapon_shotgun = %i WHERE id = %i", GangInfo[gangid][gWeapons][GANGWEAPON_MP5], GangInfo[gangid][gWeapons][GANGWEAPON_TEC9], GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN], gangid);
									mysql_tquery(connectionID, queryBuffer);
								}
								case 8:
								{
									GangInfo[gangid][gWeapons][GANGWEAPON_DEAGLE] += 3;
									GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN] += 3;
									GangInfo[gangid][gWeapons][GANGWEAPON_RIFLE] += 2;
								
								
									SendGangMessage(gangid, COLOR_YELLOW, "Your gang has earned Deagle(3), shotgun(2) and rifle(2) in its stash for capturing this turf!");
								
									mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_deagle = %i, weapon_shotgun = %i,  weapon_rifle = %i WHERE id = %i", GangInfo[gangid][gWeapons][GANGWEAPON_DEAGLE], GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN], GangInfo[gangid][gWeapons][GANGWEAPON_RIFLE], gangid);
									mysql_tquery(connectionID, queryBuffer);
								}
							}
						}

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedby = '%s', capturedgang = %i, time = 12 WHERE id = %i", TurfInfo[i][tCapturedBy], TurfInfo[i][tCapturedGang], i);
					    mysql_tquery(connectionID, queryBuffer);

	                    TurfInfo[i][tCapturer] = INVALID_PLAYER_ID;
		                TurfInfo[i][tCaptureTime] = 0;
		                TurfInfo[i][tTime] = 24;

						ReloadTurf(i);
					}
				}
			}
		}

		for(new i = 0; i < MAX_REPORTS; i ++)
		{
		    if(ReportInfo[i][rExists] && ReportInfo[i][rTime] > 0)
		    {
		        ReportInfo[i][rTime]--;

		        if(ReportInfo[i][rTime] <= 0)
		        {
		            SCM(ReportInfo[i][rReporter], COLOR_SYNTAX, "Your report has expired. You can make an admin request on "SERVER_URL" if you still need help.");
		            ReportInfo[i][rExists] = 0;
		        }
			}
	    }
	}
}

forward FuelTimer();
public FuelTimer()
{
	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(VehicleHasEngine(i) && GetVehicleParams(i, VEHICLE_ENGINE))
	    {
			if(vehicleFuel[i] > 0)
			{
			    vehicleFuel[i]--;

			    switch(vehicleFuel[i])
			    {
			        case 15, 10, 5:
			        {
			            SCM(GetVehicleDriver(i), COLOR_LIGHTRED, "** This vehicle is running low on fuel. Visit the nearest gas station to fill up. (/refuel)");
					}
				}
			}

			if(vehicleFuel[i] <= 0)
			{
			    SetVehicleParams(i, VEHICLE_ENGINE, false);
			}

		}
	}
}

forward InjuredTimer();
public InjuredTimer()
{
	foreach(new i : Player)
	{
	    if(pData[i][pLogged] && pData[i][pInjured] && GetVehicleModel(GetPlayerVehicleID(i)) != 416)
		{
  			new
     			Float:health;
	    	GetPlayerHealth(i, health);
		    SetPlayerHealth(i, health - 1.0);
		}
	}
}

forward RandomFire(check);
public RandomFire(check)
{
	new count, index, announced, rand = random(10);

	if(!IsFireActive())
	{
	    if(check)
	    {
			foreach(new i : Player)
			{
			    if(GetFactionType(i) == FACTION_MEDIC)
		    	{
		        	count++;
	        	}
	    	}
	    }
	    else
	    {
	        count = 3;
	    }

	    if(count >= 20)
	    {
	        for(new i = 0; i < sizeof(randomFireSpawns); i ++)
	        {
	            if(randomFireSpawns[i][fireIndex] == rand)
	            {
	                if(!announced)
	                {
	                    foreach(new x : Player)
	                    {
	                        if(IsPlayerInRangeOfPoint(x, 30.0, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ]))
	                        {
	                            SCM(x, SERVER_COLOR, "**{C2A2DA} An explosion can be heard. Smoke is rising from a building nearby.");
	                        }
	                        if(GetFactionType(x) == FACTION_MEDIC)
	                        {
	                            pData[x][pCP] = CHECKPOINT_MISC;
	                            SetPlayerCheckpoint(x, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ], 3.0);
	                            SM(x, COLOR_DOCTOR, "** All units, a fire has been reported in %s. Please head to the beacon on your map. **", GetZoneName(randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ]));
							}
							SM(x, COLOR_LIGHTGREEN, "Breaking News"WHITE": %s is on fire!", GetZoneName(randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ]));
	                    }
						announced = 1;
					}

	                gFireObjects[index] = CreateDynamicObject(18691, randomFireSpawns[i][fireX], randomFireSpawns[i][fireY], randomFireSpawns[i][fireZ], 0.0, 0.0, randomFireSpawns[i][fireA], .streamdistance = 50.0);
	                gFireHealth[index++] = 50.0;
	            }
	        }

	        gFires = index;
	    }
	}
}

forward KickPlayer(playerid);
public KickPlayer(playerid)
{
	if(!pData[playerid][pKicked])
	{
	    pData[playerid][pKicked] = 1;
	    SetTimerEx("KickPlayer", 200, false, "i", playerid);
	}
	else
	{
	    pData[playerid][pKicked] = 0;
	    Kick(playerid);
	}
}

forward DespawnTimer(vehicleid);
public DespawnTimer(vehicleid)
{
	if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOccupied(vehicleid))
	{
	    DespawnVehicle(vehicleid);
	}
	else
	{
	    // ANOTHER TEN MINUTES!
	    VehicleInfo[vehicleid][vTimer] = SetTimerEx("DespawnTimer", 600000, false, "i", vehicleid);
	}
}

forward HTTP_OnMusicFetchResponse(index, response_code, data[]);
public HTTP_OnMusicFetchResponse(index, response_code, data[])
{
    if(response_code == 200)
    {
        new
            buffer[2048],
            string[288],
			count,
			start,
			pos;

		strcpy(buffer, data);

        while((pos = strfind(buffer, "<br/>")) != -1)
        {
            strdel(buffer, pos, pos + 5);

            if(++count == 8)
            {
                strmid(string, buffer, start, pos);
                SCM(index, COLOR_YELLOW, string);

				start = pos;
                count = 0;
			}
			else
			{
			    if((strlen(buffer) - pos) < 6)
			    {
			        strmid(string, buffer, start, pos);
			        SCM(index, COLOR_YELLOW, string);
			        break;
			    }

			    strins(buffer, ", ", pos);
            }
        }
    }
    else
    {
        SM(index, COLOR_RED, "The music database is currently not available. (error %i)", response_code);
    }
}

forward MDC_ListCharges(playerid);
public MDC_ListCharges(playerid)
{
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "This player has no active charges on them.");
	}
	else
	{
	    new chargedby[MAX_PLAYER_NAME], date[24], reason[128], string[512];

	    string = "Charged by\tDate\tReason";

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "chargedby", chargedby);
	        cache_get_field_content(i, "date", date);
	        cache_get_field_content(i, "reason", reason);

	        format(string, sizeof(string), "%s\n%s\t%s\t%s", string, chargedby, date, reason);
		}

		ShowPlayerDialog(playerid, DIALOG_MDCCHARGES, DIALOG_STYLE_TABLIST_HEADERS, "Active charges:", string, "<<", "");
	}

	return 1;
}

forward MDC_ClearCharges(playerid);
public MDC_ClearCharges(playerid)
{
	if(cache_get_row_count(connectionID))
	{
	    new username[MAX_PLAYER_NAME], id = pData[playerid][pSelected];

	    cache_get_field_content(0, "username", username);

    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", id);
        mysql_tquery(connectionID, queryBuffer);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", id);
        mysql_tquery(connectionID, queryBuffer);

        foreach(new i : Player)
        {
            if(!strcmp(GetPlayerNameEx(i), username))
            {
                SM(i, COLOR_WHITE, "** Your crimes were cleared by %s.", GetRPName(playerid));
                pData[i][pWantedLevel] = 0;
            }
        }

        SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has cleared %s's charges and wanted level.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), username);
	}
}

forward MDC_PlayerLookup(playerid, username[]);
public MDC_PlayerLookup(playerid, username[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "That player doesn't exist and therefore has no information to view.");
	    ShowPlayerDialog(playerid, DIALOG_PLAYERLOOKUP, DIALOG_STYLE_INPUT, "Player lookup", "Enter the full name of the player to lookup:", "Submit", "Cancel");
	}
	else
	{
	    new string[512];

	    pData[playerid][pSelected] = cache_get_field_content_int(0, "uid");

	    format(string, sizeof(string), "Name: %s\nGender: %s\nAge: %i years old\nCrimes commited: %i\nTimes arrested: %i\nWanted level: %i/6\nDrivers License: %s\nGun License: %s", username, (cache_get_field_content_int(0, "gender") == 2) ? ("Female") : ("Male"), cache_get_field_content_int(0, "age"), cache_get_field_content_int(0, "crimes"), cache_get_field_content_int(0, "arrested"), cache_get_field_content_int(0, "wantedlevel"), cache_get_field_content_int(0, "carlicense") ? ("Yes") : ("No"), cache_get_field_content_int(0, "gunlicense") ? ("Yes") : ("No"));
		ShowPlayerDialog(playerid, DIALOG_MDCPLAYER1, DIALOG_STYLE_MSGBOX, "Player lookup", string, "Options", "Cancel");
	}
}

forward OnPlayerUseCarStorage(playerid);
public OnPlayerUseCarStorage(playerid)
{
	new vehicleid = GetVehicleLinkedID(cache_get_field_content_int(0, "id"));
	new closestcar = GetNearbyVehicle(playerid);
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		if(IsVehicleOccupied(vehicleid) && GetVehicleDriver(vehicleid) != playerid)
        {
            SCM(playerid, COLOR_SYNTAX, "This vehicle is occupied.");
        }
		else if(closestcar != vehicleid)
		{
		    SCM(playerid, COLOR_SYNTAX, "You are not near to this vehicle you cant despawn it.");
		}
        else //SCM(playerid, COLOR_SYNTAX, "This command is disabled.");
        {
            new
				Float:health;

			GetVehicleHealth(vehicleid, health);
            if(health < 600.0)
            {
                SCM(playerid, COLOR_SYNTAX, "This vehicle is too damaged to be despawned.");
            }
            else
            {
		        SM(playerid, COLOR_AQUA, "Your "SVRCLR"%s{CCFFFF} which is located in %s has been despawned.", GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
				DespawnVehicle(vehicleid);
			}
		}
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i AND ownerid = %i", cache_get_field_content_int(0, "id"), pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, false);
	}
}
forward OnPlayerDMVRelease(playerid);
public OnPlayerDMVRelease(playerid)
{
	new tickets = cache_get_field_content_int(0, "tickets");

	if(pData[playerid][pCash] < tickets)
	{
		return SCMf(playerid, COLOR_ERROR, "[ERROR]{ffffff} You need %s to release this impounded vehicle.", FormatNumber(tickets));
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET impounded = '0', tickets = '0' WHERE id = %i", cache_get_field_content_int(0, "id"));
	mysql_tquery(connectionID, queryBuffer);
	GivePlayerCash(playerid, -tickets);
	AddToTaxVault(tickets);
	SCMf(playerid, -1, "You have paid %s to release your %s...", FormatNumber(tickets), vehicleNames[cache_get_field_content_int(0, "modelid") - 400]);
	return 1;
}
forward OnPlayerBuyParts(playerid);
public OnPlayerBuyParts(playerid)
{
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET parts = %i WHERE uid = %i", pData[playerid][pParts], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	
	if(pData[playerid][pParts] <= 0)
    {
        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You need vehicle parts to restore this broken vehicle.");
    }
    
	pData[playerid][pParts] -= 1;
	
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET broken = '0' WHERE id = %i", cache_get_field_content_int(0, "id"));
	mysql_tquery(connectionID, queryBuffer);
	SCMf(playerid, -1, "You have use vehicle parts to release your %s..", vehicleNames[cache_get_field_content_int(0, "modelid") - 400]);
	return 1;
}
forward OnBanAttempt(username[], ip[], from[], reason[], permanent);
public OnBanAttempt(username[], ip[], from[], reason[], permanent)
{
	if(cache_get_row_count(connectionID))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE bans SET reason = '%e' WHERE id = %i", reason, cache_get_row_int(0, 0));
		mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO bans VALUES(null, '%s', '%s', '%s', NOW(), '%e', %i)", username, ip, from, reason, permanent);
		mysql_tquery(connectionID, queryBuffer);
	}
}

forward OnPlayerAttemptInviteGang(playerid, targetid);
public OnPlayerAttemptInviteGang(playerid, targetid)
{
    if(cache_get_row_int(0, 0) >= GetGangMemberLimit(pData[playerid][pGang]))
    {
        SM(playerid, COLOR_SYNTAX, "Your gang can't have more than %i members at its level.", GetGangMemberLimit(pData[playerid][pGang]));
    }
    else
    {
    	pData[targetid][pGangOffer] = playerid;
		pData[targetid][pGangOffered] = pData[playerid][pGang];

		SM(targetid, COLOR_AQUA, "%s has invited you to join "SVRCLR"%s{CCFFFF} (/accept gang).", GetRPName(playerid), GangInfo[pData[playerid][pGang]][gName]);
		SM(playerid, COLOR_AQUA, "You have invited %s to join your gang.", GetRPName(targetid));
	}
}

forward OnPlayerAttemptBuyVehicle(playerid, index);
public OnPlayerAttemptBuyVehicle(playerid, index)
{
	new count = cache_get_row_int(0, 0);

	if(count >= GetPlayerAssetLimit(playerid, LIMIT_VEHICLES))
	{
	    SM(playerid, COLOR_SYNTAX, "You currently own %i/%i vehicles. You can't own anymore unless you upgrade your asset perk.", count, GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
	}
	else
	{
	    new string[20];

        if(pData[playerid][pCash] < vehicleArray[index][cARPrice])
        {
            SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this vehicle.");
        }
        if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)
	    {
	        SCMf(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't have more than %i vehicles spawned at a time.", MAX_SPAWNED_VEHICLES);
	    }
		else
		{
	        switch(random(3))
    	    {
        	    case 0:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '2131.7834','-1907.0691','13.0880','0.9830')", pData[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][cARPrice]);
					mysql_tquery(connectionID, queryBuffer);
				}
            	case 1:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '2131.8723','-1915.2103','13.0881','0.9633')", pData[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][cARPrice]);
					mysql_tquery(connectionID, queryBuffer);
				}
            	case 2:
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, price, pos_x, pos_y, pos_z, pos_a) VALUES(%i, '%s', %i, %i, '2132.0107','-1923.4807','13.0876','0.9633')", pData[playerid][pID], GetPlayerNameEx(playerid), vehicleArray[index][carModel], vehicleArray[index][cARPrice]);
                    mysql_tquery(connectionID, queryBuffer);
				}
			}

	        AddPointMoney(POINT_AUTOEXPORT, percent(vehicleArray[index][cARPrice], 3));
    	    GivePlayerCash(playerid, -vehicleArray[index][cARPrice]);

	        format(string, sizeof(string), "~r~-$%i", vehicleArray[index][cARPrice]);
    	    GameTextForPlayer(playerid, string, 5000, 1);

	        SM(playerid, COLOR_YELLOW, "%s purchased for $%i...", vehicleNames[vehicleArray[index][carModel] - 400], vehicleArray[index][cARPrice]);
    	    Log_Write("log_property", "%s (uid: %i) purchased a %s for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], vehicleNames[vehicleArray[index][carModel] - 400], vehicleArray[index][cARPrice]);
		}
	}
}

forward OnHitmanPassport(playerid, name[], level, skinid);
public OnHitmanPassport(playerid, name[], level, skinid)
{
    if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "That name is already taken, please choose another.");
	}
	else
	{
	    strcpy(pData[playerid][pNameChange], name, MAX_PLAYER_NAME);

		pData[playerid][pFreeNamechange] = 2;
		pData[playerid][pChosenLevel] = level;
	    pData[playerid][pChosenSkin] = skinid;

		SM(playerid, COLOR_AQUA, "You have requested a namechange to "SVRCLR"%s{CCFFFF} for free, please wait for admin approval.", name);
		SM(playerid, COLOR_AQUA, "Once the namechange has been approved, you will receive your chosen name, level and skin.");

		SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] is requesting a namechange to %s. (/acceptname %i or /denyname %i)", GetRPName(playerid), playerid, name, playerid, playerid);
	}
}

forward OnPlayerAttemptNameChange(playerid, name[]);
public OnPlayerAttemptNameChange(playerid, name[])
{
	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "That name is already taken, please choose another.");

	    if(pData[playerid][pFreeNamechange])
	    {
	        ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
		}
	}
	else
	{
	    strcpy(pData[playerid][pNameChange], name, MAX_PLAYER_NAME);

		if(pData[playerid][pFreeNamechange]) {
			SM(playerid, COLOR_AQUA, "You have requested a namechange to "SVRCLR"%s{CCFFFF} for free, please wait for admin approval.", name);
		} else {
		    SM(playerid, COLOR_AQUA, "You have requested a namechange to "SVRCLR"%s{CCFFFF} for $%i, please wait for admin approval.", name, pData[playerid][pLevel] * 50000);
		}

		SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] is requesting a namechange to %s. (/acceptname %i or /denyname %i)", GetRPName(playerid), playerid, name, playerid, playerid);
	}
}

forward OnPlayerLockFurnitureDoor(playerid, id);
public OnPlayerLockFurnitureDoor(playerid, id)
{
	new status = !cache_get_field_content_int(0, "door_locked");

	if(status) {
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks the door.", GetRPName(playerid));
	} else {
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks the door.", GetRPName(playerid));
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE furniture SET door_locked = %i WHERE id = %i", status, id);
	mysql_tquery(connectionID, queryBuffer);
}

forward OnPlayerUseFurnitureDoor(playerid, objectid, id);
public OnPlayerUseFurnitureDoor(playerid, objectid, id)
{
    if(cache_get_row_int(0, 1))
	{
	    SCM(playerid, COLOR_SYNTAX, "This door is locked.");
	}
	else
	{
		new
			status = !cache_get_row_int(0, 0),
			Float:rx,
			Float:ry,
			Float:rz;

		GetDynamicObjectRot(objectid, rx, ry, rz);

		if(status) {
		    rz -= 90.0;
		} else {
			rz += 90.0;
		}

		SetDynamicObjectRot(objectid, rx, ry, rz);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE furniture SET rot_z = '%f', door_opened = %i WHERE id = %i", rz, status, id);
		mysql_tquery(connectionID, queryBuffer);

		if(status)
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s opens the door.", GetRPName(playerid));
		else
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s closes the door.", GetRPName(playerid));
	}
}

forward OnPlayerAddToPhonebook(playerid, number, name[]);
public OnPlayerAddToPhonebook(playerid, number, name[])
{
	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "That number is already in the phonebook.");
	}
	else
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO phonebook VALUES('%e', %i)", name, number);
		mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_YELLOW, "You have added %s with number %i to the phonebook directory.", name, number);
	    Log_Write("log_faction", "%s (uid: %i) added %s with number %i to the phonebook.", GetRPName(playerid), pData[playerid][pID], name, number);
	}

	return 1;
}

forward OnPlayerRemoveFromPhonebook(playerid, number);
public OnPlayerRemoveFromPhonebook(playerid, number)
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "That number is not in the phonebook.");
	}
	else
	{
	    new name[MAX_PLAYER_NAME];

	    cache_get_row(0, 0, name);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM phonebook WHERE number = %i", number);
		mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_YELLOW, "You have removed %s with number %i from the phonebook directory.", name, number);
	    Log_Write("log_faction", "%s (uid: %i) removed %s with number %i from the phonebook.", GetRPName(playerid), pData[playerid][pID], name, number);
	}

	return 1;
}

forward OnPlayerListInjuries(playerid, targetid);
public OnPlayerListInjuries(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "That player doesn't have any injuries.");
	}
	else
	{
	    SM(playerid, SERVER_COLOR, "%s's Injuries", GetRPName(targetid));

	    for(new i = 0; i < rows; i ++)
	    {
			SM(playerid, COLOR_YELLOW, "[%i seconds ago] %s was shot with a %s", gettime() - cache_get_row_int(i, 1), GetRPName(targetid), GetWeaponNameEx(cache_get_row_int(i, 0)));
		}
	}
}

forward OnPlayerOfflineKickFaction(playerid, username[]);
public OnPlayerOfflineKickFaction(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else if(cache_get_row_int(0, 1) != pData[playerid][pFaction])
	{
	    SCM(playerid, COLOR_SYNTAX, "That player is not apart of your faction.");
	}
	else if(cache_get_row_int(0, 2) > pData[playerid][pFactionRank])
	{
	    SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
	}
	else
	{
	    new uid = cache_get_row_int(0, 0), factionid = cache_get_row_int(0, 1), rankid = cache_get_row_int(0, 2);

		Log_Write("log_faction", "%s (uid: %i) offline kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], username, uid, FactionInfo[factionid][fName], factionid, FactionRanks[factionid][rankid], rankid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE uid = %i", uid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have offline kicked %s from your faction.", username);
		new szString[528];
		format(szString, sizeof(szString), "%s (uid: %i) offline kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).",GetPlayerNameEx(playerid), pData[playerid][pID], username, uid, FactionInfo[factionid][fName], factionid, FactionRanks[factionid][rankid], rankid);
		SendDiscordMessage(19, szString);
	}
}

forward OnPlayerOfflineKickGang(playerid, username[]);
public OnPlayerOfflineKickGang(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else if(cache_get_row_int(0, 1) != pData[playerid][pGang])
	{
	    SCM(playerid, COLOR_SYNTAX, "That player is not apart of your gang.");
	}
	else if(cache_get_row_int(0, 2) > pData[playerid][pGangRank])
	{
	    SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
	}
	else
	{
	    new uid = cache_get_row_int(0, 0), gangid = cache_get_row_int(0, 1), rankid = cache_get_row_int(0, 2);

		Log_Write("log_gang", "%s (uid: %i) offline kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], username, uid, GangInfo[gangid][gName], gangid, GangRanks[gangid][rankid], rankid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0, cooldown = 30 WHERE uid = %i", uid);
		mysql_tquery(connectionID, queryBuffer);
		
		SM(playerid, COLOR_AQUA, "You have offline kicked %s from your gang.", username);
	}
}

forward OnPlayerListGangs(playerid, gangid);
public OnPlayerListGangs(playerid, gangid)
{
	new color, members = cache_get_row_int(0, 0), color2, allyname[32];

	if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = GangInfo[gangid][gColor];
	}

	new alliance = GangInfo[gangid][gAlliance];

	if(alliance >= 0)
	{
		strcpy(allyname, GangInfo[alliance][gName]);
		if(GangInfo[alliance][gColor] == -1 || GangInfo[alliance][gColor] == -256)
		{
	    	color2 = 0xC8C8C8FF;
		}
		else
		{
		    color2 = GangInfo[alliance][gColor];
		}
	}
	if(alliance >= 0)
	{
	    SM(playerid, COLOR_GREY2, "{%06x}%i. %s | Leader: %s | Members: %i/%i | Strikes: %i/3 | Ally: {%06x}%s", color >>> 8, gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes], color2 >>> 8, allyname);
	}
	else if(alliance >= 0)
	{
	    SM(playerid, COLOR_GREY2, "{%06x}%i. %s | Leader: %s | Members: %i/%i | Strikes: %i/3 | Ally: {%06x}%s", color >>> 8, gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes], color2 >>> 8, allyname);
	}
	else
	{
		SM(playerid, COLOR_GREY2, "{%06x}%i. %s | Leader: %s | Members: %i/%i | Strikes: %i/3", color >>> 8, gangid, GangInfo[gangid][gName], GangInfo[gangid][gLeader], members, GetGangMemberLimit(gangid), GangInfo[gangid][gStrikes]);
	}
}

/*forward OnPlayerListFactions(playerid, factionid);
public OnPlayerListFactions(playerid, factionid)
{
	new color, members = cache_get_row_int(0, 0), szMessage[1080];

	if(FactionInfo[factionid][fColor] == -1 || FactionInfo[factionid][fColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = FactionInfo[factionid][fColor];
	}
	if(FactionInfo[factionid][fType] == FACTION_HITMAN || FactionInfo[factionid][fType] == FACTION_FEDERAL && pData[playerid][pAdmin] < 6)
	{
    	format(szMessage, sizeof(szMessage), "{%06x}%i. %s | "RED"Confidential", color >>> 8, factionid, FactionInfo[factionid][fName]);
	}
   	else
   	{
		format(szMessage, sizeof(szMessage), "{%06x}%i. %s | Leader: %s | Members: %i", color >>> 8, factionid, FactionInfo[factionid][fName], FactionInfo[factionid][fLeader], members);
	}
	SCM(playerid, COLOR_GREY, szMessage);
}*/

forward OnPlayerBuyPhoneNumber(playerid, number);
public OnPlayerBuyPhoneNumber(playerid, number)
{
	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The specified phone number is already taken.");
	}
	else
	{
	    pData[playerid][pPhone] = number;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phone = %i WHERE uid = %i", number, pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    GivePlayerCash(playerid, -100000);
	    GameTextForPlayer(playerid, "~r~-$100000", 5000, 1);

	    SM(playerid, COLOR_WHITE, "** You paid $100000 to change your phone number to %i.", number);
	    Log_Write("log_vip", "%s Donator %s (uid: %i) has purchased phone number: %i for $100000.", GetDonatorRank(pData[playerid][pDonator]), GetPlayerNameEx(playerid), pData[playerid][pID], number);
	}

}

forward OnPlayerSpawnVehiclePGValley(playerid, parked);
public OnPlayerSpawnVehiclePGValley(playerid, parked)
{
	new label[208];
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The slot specified contains no valid vehicle which you can spawn.");
	}

	else
	{
        for(new i = 0; i < MAX_VEHICLES; i ++)
	    {
	        if(IsValidVehicle(i) && VehicleInfo[i][vID] == cache_get_field_content_int(0, "id"))
	        {
	            return SCM(playerid, COLOR_SYNTAX, "This vehicle is spawned already. /findcar to track it.");
	    	}
	    }
	    if(cache_get_field_content_int(0, "impounded"))
        {
	    	return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} This vehicle is impounded. You can release it from the DMV. (/Phone > Gps > Google Map > Police Department)");
	    }
	    new
			modelid = cache_get_field_content_int(0, "modelid"),
			Float:x = cache_get_field_content_float(0, "pos_x"),
			Float:y = cache_get_field_content_float(0, "pos_y"),
			Float:z = cache_get_field_content_float(0, "pos_z"),
			Float:a = cache_get_field_content_float(0, "pos_a"),
			color1 = cache_get_field_content_int(0, "color1"),
			color2 = cache_get_field_content_int(0, "color2"),
			vehicleid;

		vehicleid = CreateVehicle(modelid, x, y, z, a, color1, color2, -1);
		GetPlayerPos(playerid, x, y, z);
		SetVehiclePos(vehicleid, x + 5, y + 5, z + 2.0);
		new rand = Random(100, 500);
		GivePlayerCash(playerid, -rand);

		if(vehicleid != INVALID_VEHICLE_ID)
		{
		    ResetVehicle(vehicleid);

		    cache_get_field_content(0, "owner", VehicleInfo[vehicleid][vOwner], connectionID, MAX_PLAYER_NAME);
		    cache_get_field_content(0, "plate", VehicleInfo[vehicleid][vPlate], connectionID, 32);

		    VehicleInfo[vehicleid][vID] = cache_get_field_content_int(0, "id");
		    VehicleInfo[vehicleid][vOwnerID] = cache_get_field_content_int(0, "ownerid");
		    VehicleInfo[vehicleid][vPrice] = cache_get_field_content_int(0, "price");
		    VehicleInfo[vehicleid][vTickets] = cache_get_field_content_int(0, "tickets");
		    VehicleInfo[vehicleid][vLocked] = cache_get_field_content_int(0, "locked");
		    VehicleInfo[vehicleid][vHealth] = cache_get_field_content_float(0, "health");
		    VehicleInfo[vehicleid][vPaintjob] = cache_get_field_content_int(0, "paintjob");
		    VehicleInfo[vehicleid][vInterior] = cache_get_field_content_int(0, "interior");
	        VehicleInfo[vehicleid][vWorld] = cache_get_field_content_int(0, "world");
	        VehicleInfo[vehicleid][vNeon] = cache_get_field_content_int(0, "neon");
	        VehicleInfo[vehicleid][vNeonEnabled] = cache_get_field_content_int(0, "neonenabled");
	        VehicleInfo[vehicleid][vTrunk] = cache_get_field_content_int(0, "trunk");
	        VehicleInfo[vehicleid][vMods][0] = cache_get_field_content_int(0, "mod_1");
	        VehicleInfo[vehicleid][vMods][1] = cache_get_field_content_int(0, "mod_2");
	        VehicleInfo[vehicleid][vMods][2] = cache_get_field_content_int(0, "mod_3");
	        VehicleInfo[vehicleid][vMods][3] = cache_get_field_content_int(0, "mod_4");
	        VehicleInfo[vehicleid][vMods][4] = cache_get_field_content_int(0, "mod_5");
	        VehicleInfo[vehicleid][vMods][5] = cache_get_field_content_int(0, "mod_6");
	        VehicleInfo[vehicleid][vMods][6] = cache_get_field_content_int(0, "mod_7");
	        VehicleInfo[vehicleid][vMods][7] = cache_get_field_content_int(0, "mod_8");
	        VehicleInfo[vehicleid][vMods][8] = cache_get_field_content_int(0, "mod_9");
	        VehicleInfo[vehicleid][vMods][9] = cache_get_field_content_int(0, "mod_10");
	        VehicleInfo[vehicleid][vMods][10] = cache_get_field_content_int(0, "mod_11");
	        VehicleInfo[vehicleid][vMods][11] = cache_get_field_content_int(0, "mod_12");
	        VehicleInfo[vehicleid][vMods][12] = cache_get_field_content_int(0, "mod_13");
	        VehicleInfo[vehicleid][vMods][13] = cache_get_field_content_int(0, "mod_14");
	        VehicleInfo[vehicleid][vCash] = cache_get_field_content_int(0, "cash");
	        VehicleInfo[vehicleid][vMaterials] = cache_get_field_content_int(0, "materials");
	        VehicleInfo[vehicleid][vPot] = cache_get_field_content_int(0, "pot");
	        VehicleInfo[vehicleid][vCrack] = cache_get_field_content_int(0, "crack");
	        VehicleInfo[vehicleid][vMeth] = cache_get_field_content_int(0, "meth");
	        VehicleInfo[vehicleid][vPainkillers] = cache_get_field_content_int(0, "painkillers");
	        VehicleInfo[vehicleid][vWeapons][0] = cache_get_field_content_int(0, "weapon_1");
	        VehicleInfo[vehicleid][vWeapons][1] = cache_get_field_content_int(0, "weapon_2");
	        VehicleInfo[vehicleid][vWeapons][2] = cache_get_field_content_int(0, "weapon_3");
            VehicleInfo[vehicleid][vHPAmmo] = cache_get_field_content_int(0, "hpammo");
            VehicleInfo[vehicleid][vPoisonAmmo] = cache_get_field_content_int(0, "poisonammo");
            VehicleInfo[vehicleid][vFMJAmmo] = cache_get_field_content_int(0, "fmjammo");
	        VehicleInfo[vehicleid][vGang] = -1;
	        VehicleInfo[vehicleid][vFactionType] = FACTION_NONE;
	        VehicleInfo[vehicleid][vJob] = JOB_NONE;
	        VehicleInfo[vehicleid][vRespawnDelay] = -1;
	        VehicleInfo[vehicleid][vModel] = modelid;
		    VehicleInfo[vehicleid][vPosX] = x;
		    VehicleInfo[vehicleid][vPosY] = y;
		    VehicleInfo[vehicleid][vPosZ] = z;
		    VehicleInfo[vehicleid][vPosA] = a;
		    VehicleInfo[vehicleid][vColor1] = color1;
		    VehicleInfo[vehicleid][vColor2] = color2;
		    VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vTimer] = -1;

			vehicleFuel[vehicleid] = cache_get_field_content_int(0, "fuel");
			adminVehicle{vehicleid} = false;

			format(label, sizeof(label), "Plate: LSV-0%d", VehicleInfo[vehicleid][vPlate]);
			CreateDynamic3DTextLabel(label, COLOR_VIP, 0.0, -3.0, 0.0, 10.0, .attachedvehicle = vehicleid);

			ReloadVehicle(vehicleid);

		    if(!parked)
			{
			    SM(playerid, COLOR_AQUA, "You have spawned your "SVRCLR"%s{CCFFFF} which is located in {F7A763}%s{CCFFFF}. /findcar to track it.", GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
			}
	    }
	}

	return 1;
}

forward OnPlayerUseCarValley(playerid);
public OnPlayerUseCarValley(playerid)
{
	new vehicleid = GetVehicleLinkedID(cache_get_field_content_int(0, "id"));

	if(vehicleid != INVALID_VEHICLE_ID)
	{
		if(IsVehicleOccupied(vehicleid) && GetVehicleDriver(vehicleid) != playerid)
        {
            SCM(playerid, COLOR_SYNTAX, "This vehicle is occupied.");
        }
        else //SCM(playerid, COLOR_SYNTAX, "This command is disabled.");
        {
            new
				Float:health;

			GetVehicleHealth(vehicleid, health);

            if(health < 600.0)
            {
                SCM(playerid, COLOR_SYNTAX, "This vehicle is too damaged to be despawned.");
            }
            else
            {
		        SCM(playerid, COLOR_SYNTAX, "This vehicle is spawned already. /findcar to track it.");
			}
		}
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i AND ownerid = %i", cache_get_field_content_int(0, "id"), pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehiclePGValley", "ii", playerid, false);
	}
}

forward OnPlayerSpawnVehicle(playerid, parked);
public OnPlayerSpawnVehicle(playerid, parked)
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The slot specified contains no valid vehicle which you can spawn.");
	}
	else
	{
        for(new i = 0; i < MAX_VEHICLES; i ++)
	    {
	        if(IsValidVehicle(i) && VehicleInfo[i][vID] == cache_get_field_content_int(0, "id"))
	        {
	            return SCM(playerid, COLOR_SYNTAX, "This vehicle is spawned already. /findcar to track it.");
	    	}
	    }
		if(cache_get_field_content_int(0, "impounded"))
		{
			return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} This vehicle is impounded. You can release it from the DMV. (/gps)");
		}
 		if(cache_get_field_content_int(0, "broken"))
		{
			return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} Some parts are broken after getting stoled, (( You can spawned it after 5 days ))");
		}
 	    if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)//vipveh
	    {
	        return SendClientMessageEx(playerid, COLOR_GREY, "You can't have more than %i vehicles spawned at a time.", MAX_SPAWNED_VEHICLES);
	    }
	    new
			modelid = cache_get_field_content_int(0, "modelid"),
			Float:x = cache_get_field_content_float(0, "pos_x"),
			Float:y = cache_get_field_content_float(0, "pos_y"),
			Float:z = cache_get_field_content_float(0, "pos_z"),
			Float:a = cache_get_field_content_float(0, "pos_a"),
			color1 = cache_get_field_content_int(0, "color1"),
			color2 = cache_get_field_content_int(0, "color2"),
			vehicleid;

		vehicleid = CreateVehicle(modelid, x, y, z, a, color1, color2, -1);


		if(vehicleid != INVALID_VEHICLE_ID)
		{
		    ResetVehicle(vehicleid);

		    cache_get_field_content(0, "owner", VehicleInfo[vehicleid][vOwner], connectionID, MAX_PLAYER_NAME);
		    cache_get_field_content(0, "plate", VehicleInfo[vehicleid][vPlate], connectionID, 32);

		    VehicleInfo[vehicleid][vID] = cache_get_field_content_int(0, "id");
		    VehicleInfo[vehicleid][vOwnerID] = cache_get_field_content_int(0, "ownerid");
		    VehicleInfo[vehicleid][vPrice] = cache_get_field_content_int(0, "price");
		    VehicleInfo[vehicleid][vTickets] = cache_get_field_content_int(0, "tickets");
		    VehicleInfo[vehicleid][vLocked] = cache_get_field_content_int(0, "locked");
		    VehicleInfo[vehicleid][vStolen] = cache_get_field_content_int(0, "broken");
		    VehicleInfo[vehicleid][vHealth] = cache_get_field_content_float(0, "health");
		    VehicleInfo[vehicleid][vPaintjob] = cache_get_field_content_int(0, "paintjob");
		    VehicleInfo[vehicleid][vInterior] = cache_get_field_content_int(0, "interior");
	        VehicleInfo[vehicleid][vWorld] = cache_get_field_content_int(0, "world");
	        VehicleInfo[vehicleid][vNeon] = cache_get_field_content_int(0, "neon");
	        VehicleInfo[vehicleid][vNeonEnabled] = cache_get_field_content_int(0, "neonenabled");
	        VehicleInfo[vehicleid][vTrunk] = cache_get_field_content_int(0, "trunk");
	        VehicleInfo[vehicleid][vMods][0] = cache_get_field_content_int(0, "mod_1");
	        VehicleInfo[vehicleid][vMods][1] = cache_get_field_content_int(0, "mod_2");
	        VehicleInfo[vehicleid][vMods][2] = cache_get_field_content_int(0, "mod_3");
	        VehicleInfo[vehicleid][vMods][3] = cache_get_field_content_int(0, "mod_4");
	        VehicleInfo[vehicleid][vMods][4] = cache_get_field_content_int(0, "mod_5");
	        VehicleInfo[vehicleid][vMods][5] = cache_get_field_content_int(0, "mod_6");
	        VehicleInfo[vehicleid][vMods][6] = cache_get_field_content_int(0, "mod_7");
	        VehicleInfo[vehicleid][vMods][7] = cache_get_field_content_int(0, "mod_8");
	        VehicleInfo[vehicleid][vMods][8] = cache_get_field_content_int(0, "mod_9");
	        VehicleInfo[vehicleid][vMods][9] = cache_get_field_content_int(0, "mod_10");
	        VehicleInfo[vehicleid][vMods][10] = cache_get_field_content_int(0, "mod_11");
	        VehicleInfo[vehicleid][vMods][11] = cache_get_field_content_int(0, "mod_12");
	        VehicleInfo[vehicleid][vMods][12] = cache_get_field_content_int(0, "mod_13");
	        VehicleInfo[vehicleid][vMods][13] = cache_get_field_content_int(0, "mod_14");
	        VehicleInfo[vehicleid][vCash] = cache_get_field_content_int(0, "cash");
	        VehicleInfo[vehicleid][vMaterials] = cache_get_field_content_int(0, "materials");
	        VehicleInfo[vehicleid][vPot] = cache_get_field_content_int(0, "pot");
	        VehicleInfo[vehicleid][vCrack] = cache_get_field_content_int(0, "crack");
	        VehicleInfo[vehicleid][vMeth] = cache_get_field_content_int(0, "meth");
	        VehicleInfo[vehicleid][vPainkillers] = cache_get_field_content_int(0, "painkillers");
	        VehicleInfo[vehicleid][vWeapons][0] = cache_get_field_content_int(0, "weapon_1");
	        VehicleInfo[vehicleid][vWeapons][1] = cache_get_field_content_int(0, "weapon_2");
	        VehicleInfo[vehicleid][vWeapons][2] = cache_get_field_content_int(0, "weapon_3");
	        VehicleInfo[vehicleid][vWeapons][3] = cache_get_field_content_int(0, "weapon_4");
	        VehicleInfo[vehicleid][vWeapons][4] = cache_get_field_content_int(0, "weapon_5");
	        VehicleInfo[vehicleid][vWeapons][5] = cache_get_field_content_int(0, "weapon_6");
            VehicleInfo[vehicleid][vHPAmmo] = cache_get_field_content_int(0, "hpammo");
            VehicleInfo[vehicleid][vPoisonAmmo] = cache_get_field_content_int(0, "poisonammo");
            VehicleInfo[vehicleid][vFMJAmmo] = cache_get_field_content_int(0, "fmjammo");
	        VehicleInfo[vehicleid][vGang] = -1;
	        VehicleInfo[vehicleid][vFactionType] = FACTION_NONE;
	        VehicleInfo[vehicleid][vJob] = JOB_NONE;
	        VehicleInfo[vehicleid][vRespawnDelay] = -1;
	        VehicleInfo[vehicleid][vModel] = modelid;
		    VehicleInfo[vehicleid][vPosX] = x;
		    VehicleInfo[vehicleid][vPosY] = y;
		    VehicleInfo[vehicleid][vPosZ] = z;
		    VehicleInfo[vehicleid][vPosA] = a;
		    VehicleInfo[vehicleid][vColor1] = color1;
		    VehicleInfo[vehicleid][vColor2] = color2;
		    VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vTimer] = -1;

			vehicleFuel[vehicleid] = cache_get_field_content_int(0, "fuel");
			adminVehicle{vehicleid} = false;

			ReloadVehicle(vehicleid);

		    if(!parked)
			{
			    SCMf(playerid, COLOR_WHITE, "You have spawned your {C2A2DA}%s{FFFFFF} which is located in {F7A763}%s | Vehicle ID: "BLUE"%i{FFFFFF}, 	/findcar to track it.", GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid), vehicleid);
			}
	    }
	}

	return 1;
}
/*forward OnPlayerSpawnVehicle(playerid, parked);
public OnPlayerSpawnVehicle(playerid, parked)
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The slot specified contains no valid vehicle which you can spawn.");
	}
	else
	{
        for(new i = 0; i < MAX_VEHICLES; i ++)
	    {
	        if(IsValidVehicle(i) && VehicleInfo[i][vID] == cache_get_field_content_int(0, "id"))
	        {
	            return SCM(playerid, COLOR_SYNTAX, "This vehicle is spawned already. /findcar to track it.");
	    	}
	    }
		if(cache_get_field_content_int(0, "impounded"))
		{
			return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} This vehicle is impounded. You can release it from the DMV. (/gps)");
		}
 	    if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)//vipveh
	    {
	        return SendClientMessageEx(playerid, COLOR_GREY, "You can't have more than %i vehicles spawned at a time.", MAX_SPAWNED_VEHICLES);
	    }
	    new
			modelid = cache_get_field_content_int(0, "modelid"),
			Float:x = cache_get_field_content_float(0, "pos_x"),
			Float:y = cache_get_field_content_float(0, "pos_y"),
			Float:z = cache_get_field_content_float(0, "pos_z"),
			Float:a = cache_get_field_content_float(0, "pos_a"),
			color1 = cache_get_field_content_int(0, "color1"),
			color2 = cache_get_field_content_int(0, "color2"),
			vehicleid;

		vehicleid = CreateVehicle(modelid, x, y, z, a, color1, color2, -1);

		if(vehicleid != INVALID_VEHICLE_ID)
		{
		    ResetVehicle(vehicleid);

		    cache_get_field_content(0, "owner", VehicleInfo[vehicleid][vOwner], connectionID, MAX_PLAYER_NAME);
		    cache_get_field_content(0, "plate", VehicleInfo[vehicleid][vPlate], connectionID, 32);

		    VehicleInfo[vehicleid][vID] = cache_get_field_content_int(0, "id");
		    VehicleInfo[vehicleid][vOwnerID] = cache_get_field_content_int(0, "ownerid");
		    VehicleInfo[vehicleid][vPrice] = cache_get_field_content_int(0, "price");
		    VehicleInfo[vehicleid][vTickets] = cache_get_field_content_int(0, "tickets");
		    VehicleInfo[vehicleid][vLocked] = cache_get_field_content_int(0, "locked");
		    VehicleInfo[vehicleid][vHealth] = cache_get_field_content_float(0, "health");
		    VehicleInfo[vehicleid][vPaintjob] = cache_get_field_content_int(0, "paintjob");
		    VehicleInfo[vehicleid][vInterior] = cache_get_field_content_int(0, "interior");
	        VehicleInfo[vehicleid][vWorld] = cache_get_field_content_int(0, "world");
	        VehicleInfo[vehicleid][vNeon] = cache_get_field_content_int(0, "neon");
	        VehicleInfo[vehicleid][vNeonEnabled] = cache_get_field_content_int(0, "neonenabled");
	        VehicleInfo[vehicleid][vTrunk] = cache_get_field_content_int(0, "trunk");
	        VehicleInfo[vehicleid][vMods][0] = cache_get_field_content_int(0, "mod_1");
	        VehicleInfo[vehicleid][vMods][1] = cache_get_field_content_int(0, "mod_2");
	        VehicleInfo[vehicleid][vMods][2] = cache_get_field_content_int(0, "mod_3");
	        VehicleInfo[vehicleid][vMods][3] = cache_get_field_content_int(0, "mod_4");
	        VehicleInfo[vehicleid][vMods][4] = cache_get_field_content_int(0, "mod_5");
	        VehicleInfo[vehicleid][vMods][5] = cache_get_field_content_int(0, "mod_6");
	        VehicleInfo[vehicleid][vMods][6] = cache_get_field_content_int(0, "mod_7");
	        VehicleInfo[vehicleid][vMods][7] = cache_get_field_content_int(0, "mod_8");
	        VehicleInfo[vehicleid][vMods][8] = cache_get_field_content_int(0, "mod_9");
	        VehicleInfo[vehicleid][vMods][9] = cache_get_field_content_int(0, "mod_10");
	        VehicleInfo[vehicleid][vMods][10] = cache_get_field_content_int(0, "mod_11");
	        VehicleInfo[vehicleid][vMods][11] = cache_get_field_content_int(0, "mod_12");
	        VehicleInfo[vehicleid][vMods][12] = cache_get_field_content_int(0, "mod_13");
	        VehicleInfo[vehicleid][vMods][13] = cache_get_field_content_int(0, "mod_14");
	        VehicleInfo[vehicleid][vCash] = cache_get_field_content_int(0, "cash");
	        VehicleInfo[vehicleid][vMaterials] = cache_get_field_content_int(0, "materials");
	        VehicleInfo[vehicleid][vPot] = cache_get_field_content_int(0, "pot");
	        VehicleInfo[vehicleid][vCrack] = cache_get_field_content_int(0, "crack");
	        VehicleInfo[vehicleid][vMeth] = cache_get_field_content_int(0, "meth");
	        VehicleInfo[vehicleid][vPainkillers] = cache_get_field_content_int(0, "painkillers");
	        VehicleInfo[vehicleid][vWeapons][0] = cache_get_field_content_int(0, "weapon_1");
	        VehicleInfo[vehicleid][vWeapons][1] = cache_get_field_content_int(0, "weapon_2");
	        VehicleInfo[vehicleid][vWeapons][2] = cache_get_field_content_int(0, "weapon_3");
	        VehicleInfo[vehicleid][vWeapons][3] = cache_get_field_content_int(0, "weapon_4");
	        VehicleInfo[vehicleid][vWeapons][4] = cache_get_field_content_int(0, "weapon_5");
	        VehicleInfo[vehicleid][vWeapons][5] = cache_get_field_content_int(0, "weapon_6");
            VehicleInfo[vehicleid][vHPAmmo] = cache_get_field_content_int(0, "hpammo");
            VehicleInfo[vehicleid][vPoisonAmmo] = cache_get_field_content_int(0, "poisonammo");
            VehicleInfo[vehicleid][vFMJAmmo] = cache_get_field_content_int(0, "fmjammo");
	        VehicleInfo[vehicleid][vGang] = -1;
	        VehicleInfo[vehicleid][vFactionType] = FACTION_NONE;
	        VehicleInfo[vehicleid][vJob] = JOB_NONE;
	        VehicleInfo[vehicleid][vRespawnDelay] = -1;
	        VehicleInfo[vehicleid][vModel] = modelid;
		    VehicleInfo[vehicleid][vPosX] = x;
		    VehicleInfo[vehicleid][vPosY] = y;
		    VehicleInfo[vehicleid][vPosZ] = z;
		    VehicleInfo[vehicleid][vPosA] = a;
		    VehicleInfo[vehicleid][vColor1] = color1;
		    VehicleInfo[vehicleid][vColor2] = color2;
		    VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
		    VehicleInfo[vehicleid][vTimer] = -1;

			vehicleFuel[vehicleid] = cache_get_field_content_int(0, "fuel");
			adminVehicle{vehicleid} = false;

			ReloadVehicle(vehicleid);

		    if(!parked)
			{
			    SCMf(playerid, COLOR_WHITE, "You have spawned your {C2A2DA}%s{FFFFFF} which is located in {F7A763}%s | Vehicle ID: "BLUE"%i{FFFFFF}, 	/findcar to track it.", GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid), vehicleid);
			}
	    }
	}

	return 1;
}*/

forward OnPlayerAttachCopClothing(playerid, name[], clothingid);
public OnPlayerAttachCopClothing(playerid, name[], clothingid)
{
	strcpy(ClothingInfo[playerid][clothingid][cName], name, 32);

    ClothingInfo[playerid][clothingid][cID] = cache_insert_id(connectionID);
    ClothingInfo[playerid][clothingid][cExists] = 1;
	ClothingInfo[playerid][clothingid][cAttached] = 0;
	ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;

 	SCMf(playerid, COLOR_AQUA, "%s added to clothing inventory. /clothing to attach your new item.", name);
}


forward OnPlayerBuyClothingItem(playerid, name[], price, businessid, clothingid);
public OnPlayerBuyClothingItem(playerid, name[], price, businessid, clothingid)
{
    new string[16];

	strcpy(ClothingInfo[playerid][clothingid][cName], name, 32);

    ClothingInfo[playerid][clothingid][cID] = cache_insert_id(connectionID);
    ClothingInfo[playerid][clothingid][cExists] = 1;
	ClothingInfo[playerid][clothingid][cAttached] = 0;
	ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;

	BusinessInfo[businessid][bCash] += price;
	BusinessInfo[businessid][bProducts]--;

 	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
 	mysql_tquery(connectionID, queryBuffer);

	GivePlayerCash(playerid, -price);
 	SM(playerid, COLOR_AQUA, "%s purchased for $%i. /clothing to find your new item.", name, price);

    format(string, sizeof(string), "~r~-$%i", price);
	GameTextForPlayer(playerid, string, 5000, 1);
}

forward OnPlayerSendTextMessage(playerid, number, msg[]);
public OnPlayerSendTextMessage(playerid, number, msg[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_ERROR, "Error:"WHITE" The number you're trying to reach does not belong to any particular person.");
	}
	else if(cache_get_row_int(0, 1))
	{
	    SCM(playerid, COLOR_ERROR, "Error:"WHITE" That player is currently imprisoned and cannot use their phone.");
 	}
 	else if(cache_get_row_int(0, 2))
 	{
 	    SCM(playerid, COLOR_ERROR, "Error:"WHITE" That player has their mobile phone switched off.");
	}
 	else
	{
	    new
	        username[MAX_PLAYER_NAME];

	    cache_get_row(0, 0, username);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO texts VALUES(null, %i, %i, '%s', NOW(), '%e')", pData[playerid][pPhone], number, GetPlayerNameEx(playerid), msg);
	    mysql_tquery(connectionID, queryBuffer);

        SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s takes out a cellphone and sends a message.", GetRPName(playerid));
	    SCMf(playerid, COLOR_YELLOW, "** SMS to %s (%i): %s **", username, number, msg);
	    SCM(playerid, COLOR_WHITE, "** The player who owns the number is offline, but will receive your text when they log in.");

        GivePlayerCash(playerid, -1);
        GameTextForPlayer(playerid, "~w~Text sent!~n~~r~-$1", 5000, 1);
	}
}

forward OnPlayerRentHouse(playerid, houseid);
public OnPlayerRentHouse(playerid, houseid)
{
	if(cache_get_row_int(0, 0) >= GetHouseTenantCapacity(houseid))
	{
	    SM(playerid, COLOR_SYNTAX, "This house has reached its limit of %i tenants.", GetHouseTenantCapacity(houseid));
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = %i WHERE uid = %i", HouseInfo[houseid][hID], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		pData[playerid][pRentingHouse] = HouseInfo[houseid][hID];
		SM(playerid, COLOR_YELLOW, "You are now renting at %s's house. You will pay $%i every paycheck.", HouseInfo[houseid][hOwner], HouseInfo[houseid][hRentPrice]);
	}
}

forward OnPlayerEvict(playerid, username[]);
public OnPlayerEvict(playerid, username[])
{
	if(!cache_get_row_count(connectionID))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player doesn't exist, or is not renting at your home.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        if(!strcmp(GetPlayerNameEx(i), username) && pData[i][pLogged])
	        {
	            pData[i][pRentingHouse] = 0;
	            SCM(i, COLOR_RED, "You have been evicted from your home by the owner.");
	        }
	    }

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

        SM(playerid, COLOR_WHITE, "** You have evicted %s from your property.", username);
	}

	return 1;
}

forward OnListPlayerFlags(playerid, targetid);
public OnListPlayerFlags(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "This player has no flags listed under their account.");
	}
	else
	{
	    new flaggedby[24], date[24], desc[128];

	    SM(playerid, SERVER_COLOR, "%s's Flags", GetRPName(targetid));

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "flaggedby", flaggedby);
	        cache_get_field_content(i, "date", date);
	        cache_get_field_content(i, "description", desc);

	        SM(playerid, COLOR_GREY2, "[%i][%s] %s (from: %s)", i + 1, date, desc, flaggedby);
	    }
	}
}

forward OnUpdatePartner(playerid);
public OnUpdatePartner(playerid)
{
    if(cache_get_row_count(connectionID))
	{
	    cache_get_field_content(0, "username", pData[playerid][pMarriedName], connectionID, MAX_PLAYER_NAME);
	}
}

forward OnVerifyRemoveFlag(playerid, targetid, slot);
public OnVerifyRemoveFlag(playerid, targetid, slot)
{
	if(cache_get_row_count(connectionID))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM flags WHERE id = %i", cache_get_row_int(0, 0));
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_YELLOW, "** %s's flag in slot %i was removed.", GetRPName(targetid), slot);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "That player has no outstanding flag in that slot.");
	}
}

forward OnAdminCreateLocker(playerid, lockerid, factionid, Float:x, Float:y, Float:z, interior, world);
public OnAdminCreateLocker(playerid, lockerid, factionid, Float:x, Float:y, Float:z, interior, world)
{
	LockerInfo[lockerid][lID] = cache_insert_id(connectionID);
	LockerInfo[lockerid][lExists] = 1;
	LockerInfo[lockerid][lFaction] = factionid;
    LockerInfo[lockerid][lPosX] = x;
    LockerInfo[lockerid][lPosY] = y;
    LockerInfo[lockerid][lPosZ] = z;
    LockerInfo[lockerid][lInterior] = interior;
    LockerInfo[lockerid][lWorld] = world;
	LockerInfo[lockerid][lIcon] = 1242;
	LockerInfo[lockerid][lLabel] = 1;

    // CHANGE SQL TOO PLS
    LockerInfo[lockerid][locKevlar] = { 1, 100 };
    LockerInfo[lockerid][locMedKit] = { 1, 50 };
    LockerInfo[lockerid][locNitestick] = { 0, 0 };
    LockerInfo[lockerid][locMace] = { 0, 0 };
    LockerInfo[lockerid][locDeagle] = { 1, 850 };
    LockerInfo[lockerid][locShotgun] = { 1, 1000 };
    LockerInfo[lockerid][locMP5] = { 1, 1500 };
    LockerInfo[lockerid][locM4] = { 1, 2500 };
    LockerInfo[lockerid][locSpas12] = { 1, 3500 };
    LockerInfo[lockerid][locSniper] = { 1, 5000 };
    LockerInfo[lockerid][locCamera] = { 0, 0 };
    LockerInfo[lockerid][locFireExt] = { 0, 0 };
    LockerInfo[lockerid][locPainKillers] = { 0, 0 };

    LockerInfo[lockerid][lText] = Text3D:INVALID_3DTEXT_ID;
    LockerInfo[lockerid][lPickup] = -1;

    ReloadLocker(lockerid);
    SCMf(playerid, COLOR_GREEN, "* Locker %i created for %s.", lockerid, FactionInfo[factionid][fName]);
}


forward OnAdminCreateAtm(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreateAtm(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    AtmInfo[atm][aID] = cache_insert_id(connectionID);
	AtmInfo[atm][aExists] = true;
    AtmInfo[atm][aPosX] = x;
    AtmInfo[atm][aPosY] = y;
    AtmInfo[atm][aPosZ] = z;
    AtmInfo[atm][aPosA] = a;

	ReloadAtm(atm);
	SCMf(playerid, COLOR_GREEN, "** ATM [%i] created at %.1f, %.1f, %.1f.", atm, x, y, z);
}

forward OnAdminCreateVen(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreateVen(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    VenInfo[atm][aID] = cache_insert_id(connectionID);
	VenInfo[atm][aExists] = true;
    VenInfo[atm][aPosX] = x;
    VenInfo[atm][aPosY] = y;
    VenInfo[atm][aPosZ] = z;
    VenInfo[atm][aPosA] = a;

	ReloadVen(atm);
	SCMf(playerid, COLOR_TEAL, "** VENDOR "WHITE"[%i]"TEAL" created at %.1f, %.1f, %.1f.", atm, x, y, z);
}
forward OnAdminCreateMdc(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreateMdc(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    MdcInfo[atm][aID] = cache_insert_id(connectionID);
	MdcInfo[atm][aExists] = true;
    MdcInfo[atm][aPosX] = x;
    MdcInfo[atm][aPosY] = y;
    MdcInfo[atm][aPosZ] = z;
    MdcInfo[atm][aPosA] = a;

	ReloadMdc(atm);
	SCMf(playerid, COLOR_TEAL, "** Mdc "WHITE"[%i]"TEAL" created at %.1f, %.1f, %.1f.", atm, x, y, z);
}

forward OnAdminCreateSur(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreateSur(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    SurInfo[atm][aID] = cache_insert_id(connectionID);
	SurInfo[atm][aExists] = true;
    SurInfo[atm][aPosX] = x;
    SurInfo[atm][aPosY] = y;
    SurInfo[atm][aPosZ] = z;
    SurInfo[atm][aPosA] = a;

	ReloadSur(atm);
	SCMf(playerid, COLOR_TEAL, "** SURGERY "WHITE"[%i]"TEAL" created at %.1f, %.1f, %.1f.", atm, x, y, z);
}

forward OnAdminCreateBar(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreateBar(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    BarInfo[atm][aID] = cache_insert_id(connectionID);
	BarInfo[atm][aExists] = true;
    BarInfo[atm][aPosX] = x;
    BarInfo[atm][aPosY] = y;
    BarInfo[atm][aPosZ] = z;
    BarInfo[atm][aPosA] = a;

	ReloadBar(atm);
	SCMf(playerid, COLOR_TEAL, "** BAR "WHITE"[%i]"TEAL" created at %.1f, %.1f, %.1f.", atm, x, y, z);
}
forward OnAdminCreatePG(playerid, atm, Float:x, Float:y, Float:z, Float:a);
public OnAdminCreatePG(playerid, atm, Float:x, Float:y, Float:z, Float:a)
{
    PGInfo[atm][aID] = cache_insert_id(connectionID);
	PGInfo[atm][aExists] = true;
    PGInfo[atm][aPosX] = x;
    PGInfo[atm][aPosY] = y;
    PGInfo[atm][aPosZ] = z;
    PGInfo[atm][aPosA] = a;

	ReloadPG(atm);
	SCMf(playerid, COLOR_TEAL, "** Public Garage "WHITE"[%i]"TEAL" created at %.1f, %.1f, %.1f.", atm, x, y, z);
}


forward OnAdminListVehiclesForRemoval(playerid, targetid);
public OnAdminListVehiclesForRemoval(playerid, targetid)
{
    new rows = cache_get_row_count(connectionID);

    if(!rows)
    {
        SendClientMessage(playerid, COLOR_GREY, "This player owns no vehicles.");
	}
	else
	{
		static string[1024];

		string = "#\tModel\tLocation";

		for(new i = 0; i < rows; i ++)
    	{
			new
				vehicleid = GetVehicleLinkedID(cache_get_field_content_int(i, "id"));

			if(vehicleid == INVALID_VEHICLE_ID)
			{
				format(string, sizeof(string), "%s\nn/a\t%s\t%s", string, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "interior")) ? ("Garage") : GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z")));
			}
			else
			{
				format(string, sizeof(string), "%s\nID %i\t%s\t%s", string, vehicleid, GetVehicleName(vehicleid), GetVehicleZoneName(vehicleid));
			}
		}
		pData[playerid][pRemoveFrom] = targetid;
		ShowPlayerDialog(playerid, DIALOG_REMOVEPVEH, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to remove.", string, "Select", "Cancel");
	}
}



forward OnVerifyRemoveVehicle(playerid, targetid);
public OnVerifyRemoveVehicle(playerid, targetid)
{
	if(cache_get_row_count(connectionID))
	{
	    new vehicleid = GetVehicleLinkedID(cache_get_field_content_int(0, "id")), modelid = cache_get_field_content_int(0, "modelid");

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", cache_get_field_content_int(0, "id"));
	    mysql_tquery(connectionID, queryBuffer);

	    if(vehicleid != INVALID_VEHICLE_ID)
	    {
	        DespawnVehicle(vehicleid, false);
		}

	    SendAdminMessage(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's %s.", GetRPName(playerid), GetRPName(targetid), vehicleNames[modelid - 400]);
	    SM(targetid, COLOR_AQUA, "%s has removed your {FF6347}%s{33CCFF} from your vehicle list.", GetRPName(playerid), vehicleNames[modelid - 400]);
	}
}

forward OnAdminOfflineCheck(playerid, username[]);
public OnAdminOfflineCheck(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
	    // At first I didn't know how I was going to do this. But then I came up with a plan.
	    // Load everything into an unused player slot, use DisplayStats as normal, then destroy the data.
	    // This ensures that whenever I add a new thing to /stats for instance, I don't have to maintain
	    // two stats functions, I can just call DisplayStats and let the work do itself.

	    pData[MAX_PLAYERS][pID] = cache_get_field_content_int(0, "uid");
	    pData[MAX_PLAYERS][pFirstSpawn] = cache_get_field_content_int(0, "firstspawn");
		pData[MAX_PLAYERS][pSetup] = cache_get_field_content_int(0, "setup");
        pData[MAX_PLAYERS][pGender] = cache_get_field_content_int(0, "gender");
        pData[MAX_PLAYERS][pAge] = cache_get_field_content_int(0, "age");
        pData[MAX_PLAYERS][pSkin] = cache_get_field_content_int(0, "skin");
        pData[MAX_PLAYERS][pCameraX] = cache_get_field_content_float(0, "camera_x");
        pData[MAX_PLAYERS][pCameraY] = cache_get_field_content_float(0, "camera_y");
        pData[MAX_PLAYERS][pCameraZ] = cache_get_field_content_float(0, "camera_z");
        pData[MAX_PLAYERS][pPosX] = cache_get_field_content_float(0, "pos_x");
        pData[MAX_PLAYERS][pPosY] = cache_get_field_content_float(0, "pos_y");
        pData[MAX_PLAYERS][pPosZ] = cache_get_field_content_float(0, "pos_z");
        pData[MAX_PLAYERS][pPosA] = cache_get_field_content_float(0, "pos_a");
        pData[MAX_PLAYERS][pInterior] = cache_get_field_content_int(0, "interior");
        pData[MAX_PLAYERS][pWorld] = cache_get_field_content_int(0, "world");
        pData[MAX_PLAYERS][pCash] = cache_get_field_content_int(0, "cash");
        pData[MAX_PLAYERS][pBank] = cache_get_field_content_int(0, "bank");
        pData[MAX_PLAYERS][pPaycheck] = cache_get_field_content_int(0, "paycheck");
        pData[MAX_PLAYERS][pLevel] = cache_get_field_content_int(0, "level");
        pData[MAX_PLAYERS][pCrowbar] = cache_get_field_content_int(0, "crowbar");
        pData[MAX_PLAYERS][pHelmet] = cache_get_field_content_int(0, "helmet");
        pData[MAX_PLAYERS][pFirework] = cache_get_field_content_int(0, "firework");
        pData[MAX_PLAYERS][pEXP] = cache_get_field_content_int(0, "exp");
        pData[MAX_PLAYERS][pMinutes] = cache_get_field_content_int(0, "minutes");
        pData[MAX_PLAYERS][pHours] = cache_get_field_content_int(0, "hours");
        pData[MAX_PLAYERS][pAdmin] = cache_get_field_content_int(0, "adminlevel");
        pData[MAX_PLAYERS][pHelper] = cache_get_field_content_int(0, "helperlevel");
        pData[MAX_PLAYERS][pHealth] = cache_get_field_content_float(0, "health");
        pData[MAX_PLAYERS][pArmor] = cache_get_field_content_float(0, "armor");
		pData[MAX_PLAYERS][pWarnings] = cache_get_field_content_int(0, "warnings");
		pData[MAX_PLAYERS][pComserv] = cache_get_field_content_int(0, "comserv");
		pData[MAX_PLAYERS][pInjured] = cache_get_field_content_int(0, "injured");
		pData[MAX_PLAYERS][pBrokenLeg] = cache_get_field_content_int(0, "brokenleg");
		pData[MAX_PLAYERS][pBrokenHP] = cache_get_field_content_int(0, "brokenHP");
		pData[MAX_PLAYERS][pAntiFall] = cache_get_field_content_int(0, "antifall");
		pData[MAX_PLAYERS][pHospital] = cache_get_field_content_int(0, "hospital");
		pData[MAX_PLAYERS][pSpawnHealth] = cache_get_field_content_float(0, "spawnhealth");
        pData[MAX_PLAYERS][pSpawnArmor] = cache_get_field_content_float(0, "spawnarmor");
        pData[MAX_PLAYERS][pJailType] = cache_get_field_content_int(0, "jailtype");
        pData[MAX_PLAYERS][pJailTime] = cache_get_field_content_int(0, "jailtime");
        pData[MAX_PLAYERS][pBedType] = cache_get_field_content_int(0, "bedtype");
        pData[MAX_PLAYERS][pBedTime] = cache_get_field_content_int(0, "bedtime");
    	pData[MAX_PLAYERS][pAMute] = cache_get_field_content_int(0, "amuted");
		pData[MAX_PLAYERS][pAMCount] = cache_get_field_content_int(0, "amcount");
        pData[MAX_PLAYERS][pNewbieMuted] = cache_get_field_content_int(0, "newbiemuted");
        pData[MAX_PLAYERS][pHelpMuted] = cache_get_field_content_int(0, "helpmuted");
        pData[MAX_PLAYERS][pAdMuted] = cache_get_field_content_int(0, "admuted");
		pData[MAX_PLAYERS][pVerifySystem] = cache_get_field_content_int(0, "verify"); 	
		pData[MAX_PLAYERS][pVerifyCode] = cache_get_field_content_int(0, "verifycode");
        pData[MAX_PLAYERS][pLiveMuted] = cache_get_field_content_int(0, "livemuted");
        pData[MAX_PLAYERS][pGlobalMuted] = cache_get_field_content_int(0, "globalmuted");
        pData[MAX_PLAYERS][pReportMuted] = cache_get_field_content_int(0, "reportmuted");
        pData[MAX_PLAYERS][pReportWarns] = cache_get_field_content_int(0, "reportwarns");
        pData[MAX_PLAYERS][pFightStyle] = cache_get_field_content_int(0, "fightstyle");
        pData[MAX_PLAYERS][pDirtyCash] = cache_get_field_content_int(0, "dirtycash");

		/*#if defined Christmas
	#else
			pData[MAX_PLAYERS][pCandy] = cache_get_field_content_int(0, "candy");
		#endif*/

		pData[MAX_PLAYERS][pPhone] = cache_get_field_content_int(0, "phone");
		pData[MAX_PLAYERS][pLottery] = cache_get_field_content_int(0, "lottery");
		pData[MAX_PLAYERS][pJob] = cache_get_field_content_int(0, "job");
		pData[MAX_PLAYERS][pSecondJob] = cache_get_field_content_int(0, "secondjob");
		pData[MAX_PLAYERS][pCrimes] = cache_get_field_content_int(0, "crimes");
		pData[MAX_PLAYERS][pArrested] = cache_get_field_content_int(0, "arrested");
		pData[MAX_PLAYERS][pWantedLevel] = cache_get_field_content_int(0, "wantedlevel");
		pData[MAX_PLAYERS][pMaterials] = cache_get_field_content_int(0, "materials");
		pData[MAX_PLAYERS][pPot] = cache_get_field_content_int(0, "pot");
		pData[MAX_PLAYERS][pCrack] = cache_get_field_content_int(0, "crack");
		pData[MAX_PLAYERS][pMeth] = cache_get_field_content_int(0, "meth");
		pData[MAX_PLAYERS][pMeat] = cache_get_field_content_int(0, "meat");
		pData[MAX_PLAYERS][pTaco] = cache_get_field_content_int(0, "taco");
		pData[MAX_PLAYERS][pJuice] = cache_get_field_content_int(0, "juice");
		
		pData[MAX_PLAYERS][pEmptyCan] = cache_get_field_content_int(0, "emptycan");
		pData[MAX_PLAYERS][pBurrito] = cache_get_field_content_int(0, "burrito");
		pData[MAX_PLAYERS][pPainkillers] = cache_get_field_content_int(0, "painkillers");
		pData[MAX_PLAYERS][pSeeds] = cache_get_field_content_int(0, "seeds");
		pData[MAX_PLAYERS][pEphedrine] = cache_get_field_content_int(0, "ephedrine");
		pData[MAX_PLAYERS][pMuriaticAcid] = cache_get_field_content_int(0, "muriaticacid");
		pData[MAX_PLAYERS][pBakingSoda] = cache_get_field_content_int(0, "bakingsoda");
		pData[MAX_PLAYERS][pCigars] = cache_get_field_content_int(0, "cigars");
		pData[MAX_PLAYERS][pFood] = cache_get_field_content_int(0, "food");
		pData[MAX_PLAYERS][pDrink] = cache_get_field_content_int(0, "drink");
		pData[MAX_PLAYERS][pVest] = cache_get_field_content_int(0, "vest");
		pData[MAX_PLAYERS][pWalkieTalkie] = cache_get_field_content_int(0, "walkietalkie");
		pData[MAX_PLAYERS][pChannel] = cache_get_field_content_int(0, "channel");
		pData[MAX_PLAYERS][pRentingHouse] = cache_get_field_content_int(0, "rentinghouse");
		pData[MAX_PLAYERS][pSpraycans] = cache_get_field_content_int(0, "spraycans");
		pData[MAX_PLAYERS][pChatstyle] = cache_get_field_content_int(0, "chatstyle");
		pData[MAX_PLAYERS][pBandage] = cache_get_field_content_int(0, "bandage");
		pData[MAX_PLAYERS][pMedkit] = cache_get_field_content_int(0, "medkit");
		pData[MAX_PLAYERS][pRepairKit] = cache_get_field_content_int(0, "repairkit");
		pData[MAX_PLAYERS][pParts] = cache_get_field_content_int(0, "parts");
		pData[MAX_PLAYERS][pBoombox] = cache_get_field_content_int(0, "boombox");
		pData[MAX_PLAYERS][pMP3Player] = cache_get_field_content_int(0, "mp3player");
		pData[MAX_PLAYERS][pPhonebook] = cache_get_field_content_int(0, "phonebook");
		pData[MAX_PLAYERS][pFishingRod] = cache_get_field_content_int(0, "fishingrod");
		pData[MAX_PLAYERS][pFishingBait] = cache_get_field_content_int(0, "fishingbait");
		pData[MAX_PLAYERS][pFishWeight] = cache_get_field_content_int(0, "fishweight");
		pData[MAX_PLAYERS][pFishingSkill] = cache_get_field_content_int(0, "fishingskill");
		pData[MAX_PLAYERS][pGuardSkill] = cache_get_field_content_int(0, "guardskill");
		pData[MAX_PLAYERS][pWeaponSkill] = cache_get_field_content_int(0, "weaponskill");
		pData[MAX_PLAYERS][pLawyerSkill] = cache_get_field_content_int(0, "lawyerskill");
		pData[MAX_PLAYERS][pSmugglerSkill] = cache_get_field_content_int(0, "smugglerskill");
		pData[MAX_PLAYERS][pToggleTextdraws] = cache_get_field_content_int(0, "toggletextdraws");
		pData[MAX_PLAYERS][pToggleOOC] = cache_get_field_content_int(0, "toggleooc");
		pData[MAX_PLAYERS][pTogglePhone] = cache_get_field_content_int(0, "togglephone");
		pData[MAX_PLAYERS][pToggleAdmin] = cache_get_field_content_int(0, "toggleadmin");
		pData[MAX_PLAYERS][pToggleHelper] = cache_get_field_content_int(0, "togglehelper");
		pData[MAX_PLAYERS][pToggleNewbie] = cache_get_field_content_int(0, "togglenewbie");
		pData[MAX_PLAYERS][pToggleWT] = cache_get_field_content_int(0, "togglewt");
		pData[MAX_PLAYERS][pToggleRadio] = cache_get_field_content_int(0, "toggleradio");
		pData[MAX_PLAYERS][pToggleVIP] = cache_get_field_content_int(0, "togglevip");
		pData[MAX_PLAYERS][pToggleMusic] = cache_get_field_content_int(0, "togglemusic");
		pData[MAX_PLAYERS][pToggleFaction] = cache_get_field_content_int(0, "togglefaction");
		pData[MAX_PLAYERS][pToggleNews] = cache_get_field_content_int(0, "togglenews");
		pData[MAX_PLAYERS][pToggleGlobal] = cache_get_field_content_int(0, "toggleglobal");
		pData[MAX_PLAYERS][pToggleCam] = cache_get_field_content_int(0, "togglecam");
		pData[MAX_PLAYERS][pToggleHUD] = cache_get_field_content_int(0, "togglehud");
		pData[MAX_PLAYERS][pCarLicense] = cache_get_field_content_int(0, "carlicense");
		pData[MAX_PLAYERS][pWeaponLicense] = cache_get_field_content_int(0, "gunlicense");
		pData[MAX_PLAYERS][pVIPgun1] = cache_get_field_content_int(0, "vipgun1");
		pData[MAX_PLAYERS][pVIPgun2] = cache_get_field_content_int(0, "vipgun2");
		pData[MAX_PLAYERS][pVIPgun3] = cache_get_field_content_int(0, "vipgun3");
		pData[MAX_PLAYERS][pVIPgun4] = cache_get_field_content_int(0, "vipgun4");
		pData[MAX_PLAYERS][pVIPgun5] = cache_get_field_content_int(0, "vipgun5");
		pData[MAX_PLAYERS][pDonator] = cache_get_field_content_int(0, "vippackage");
		pData[MAX_PLAYERS][pVIPTime] = cache_get_field_content_int(0, "viptime");
		pData[MAX_PLAYERS][pVIPCooldown] = cache_get_field_content_int(0, "vipcooldown");
		pData[MAX_PLAYERS][pWeapons][0] = cache_get_field_content_int(0, "weapon_0");
		pData[MAX_PLAYERS][pWeapons][1] = cache_get_field_content_int(0, "weapon_1");
		pData[MAX_PLAYERS][pWeapons][2] = cache_get_field_content_int(0, "weapon_2");
		pData[MAX_PLAYERS][pWeapons][3] = cache_get_field_content_int(0, "weapon_3");
		pData[MAX_PLAYERS][pWeapons][4] = cache_get_field_content_int(0, "weapon_4");
		pData[MAX_PLAYERS][pWeapons][5] = cache_get_field_content_int(0, "weapon_5");
		pData[MAX_PLAYERS][pWeapons][6] = cache_get_field_content_int(0, "weapon_6");
		pData[MAX_PLAYERS][pWeapons][7] = cache_get_field_content_int(0, "weapon_7");
		pData[MAX_PLAYERS][pWeapons][8] = cache_get_field_content_int(0, "weapon_8");
		pData[MAX_PLAYERS][pWeapons][9] = cache_get_field_content_int(0, "weapon_9");
		pData[MAX_PLAYERS][pWeapons][10] = cache_get_field_content_int(0, "weapon_10");
		pData[MAX_PLAYERS][pWeapons][11] = cache_get_field_content_int(0, "weapon_11");
		pData[MAX_PLAYERS][pWeapons][12] = cache_get_field_content_int(0, "weapon_12");
		pData[MAX_PLAYERS][pFaction] = cache_get_field_content_int(0, "faction");
		pData[MAX_PLAYERS][pFactionRank] = cache_get_field_content_int(0, "factionrank");
		pData[MAX_PLAYERS][pGang] = cache_get_field_content_int(0, "gang");
		pData[MAX_PLAYERS][pGangRank] = cache_get_field_content_int(0, "gangrank");
		pData[MAX_PLAYERS][pDivision] = cache_get_field_content_int(0, "division");
		pData[MAX_PLAYERS][pContracted] = cache_get_field_content_int(0, "contracted");
		pData[MAX_PLAYERS][pBombs] = cache_get_field_content_int(0, "bombs");
		pData[MAX_PLAYERS][pCompletedHits] = cache_get_field_content_int(0, "completedhits");
		pData[MAX_PLAYERS][pFailedHits] = cache_get_field_content_int(0, "failedhits");
		pData[MAX_PLAYERS][pReports] = cache_get_field_content_int(0, "reports");
		pData[MAX_PLAYERS][pNewbies] = cache_get_field_content_int(0, "newbies");
		pData[MAX_PLAYERS][pHelpRequests] = cache_get_field_content_int(0, "helprequests");
		pData[MAX_PLAYERS][pSpeedometer] = cache_get_field_content_int(0, "speedometer");
		pData[MAX_PLAYERS][pFactionMod] = cache_get_field_content_int(0, "factionmod");
		pData[MAX_PLAYERS][pAdminPersonnel] = cache_get_field_content_int(0, "adminpersonnel");
		pData[MAX_PLAYERS][pGangMod] = cache_get_field_content_int(0, "gangmod");
		pData[MAX_PLAYERS][pBanAppealer] = cache_get_field_content_int(0, "banappealer");
  		pData[MAX_PLAYERS][pEventMod] = cache_get_field_content_int(0, "eventmod");
  		pData[MAX_PLAYERS][pDev] = cache_get_field_content_int(0, "dev");
		pData[MAX_PLAYERS][pPotPlanted] = cache_get_field_content_int(0, "potplanted");
		pData[MAX_PLAYERS][pPotTime] = cache_get_field_content_int(0, "pottime");
		pData[MAX_PLAYERS][pPotGrams] = cache_get_field_content_int(0, "potgrams");
		pData[MAX_PLAYERS][pPotX] = cache_get_field_content_float(0, "pot_x");
		pData[MAX_PLAYERS][pPotY] = cache_get_field_content_float(0, "pot_y");
		pData[MAX_PLAYERS][pPotZ] = cache_get_field_content_float(0, "pot_z");
		pData[MAX_PLAYERS][pPotA] = cache_get_field_content_float(0, "pot_a");
		pData[MAX_PLAYERS][pInventoryUpgrade] = cache_get_field_content_int(0, "inventoryupgrade");
		pData[MAX_PLAYERS][pAddictUpgrade] = cache_get_field_content_int(0, "addictupgrade");
        pData[MAX_PLAYERS][pTraderUpgrade] = cache_get_field_content_int(0, "traderupgrade");
        pData[MAX_PLAYERS][pAssetUpgrade] = cache_get_field_content_int(0, "assetupgrade");
		pData[MAX_PLAYERS][pHPAmmo] = cache_get_field_content_int(0, "hpammo");
		pData[MAX_PLAYERS][pPoisonAmmo] = cache_get_field_content_int(0, "poisonammo");
		pData[MAX_PLAYERS][pFMJAmmo] = cache_get_field_content_int(0, "fmjammo");
		pData[MAX_PLAYERS][pAmmoType] = cache_get_field_content_int(0, "ammotype");
		pData[MAX_PLAYERS][pAmmoWeapon] = cache_get_field_content_int(0, "ammoweapon");
		pData[MAX_PLAYERS][pDMWarnings] = cache_get_field_content_int(0, "dmwarnings");
		pData[MAX_PLAYERS][pWeaponRestricted] = cache_get_field_content_int(0, "weaponrestricted");
		pData[MAX_PLAYERS][pFgRestricted] = cache_get_field_content_int(0, "cooldown");
		pData[MAX_PLAYERS][pReferralUID] = cache_get_field_content_int(0, "referral_uid");
		pData[MAX_PLAYERS][pWatch] = cache_get_field_content_int(0, "watch");
		pData[MAX_PLAYERS][pGPS] = cache_get_field_content_int(0, "gps");
		pData[MAX_PLAYERS][pRefunded] = cache_get_field_content_int(0, "refunded");
		pData[MAX_PLAYERS][pMask] = cache_get_field_content_int(0, "mask");
		pData[MAX_PLAYERS][pBlindfold] = cache_get_field_content_int(0, "blindfold");
		pData[MAX_PLAYERS][pHunger] = cache_get_field_content_int(0, "hunger");
		pData[MAX_PLAYERS][pHungerTimer] = cache_get_field_content_int(0, "hungertimer");
		pData[MAX_PLAYERS][pStress] = cache_get_field_content_int(0, "stress");
		pData[MAX_PLAYERS][pStressTimer] = cache_get_field_content_int(0, "stresstimer");
		pData[MAX_PLAYERS][pThirst] = cache_get_field_content_int(0, "thirst");
		pData[MAX_PLAYERS][pThirstTimer] = cache_get_field_content_int(0, "thirsttimer");


		strcpy(pData[MAX_PLAYERS][pUsername], username, MAX_PLAYER_NAME);
		DisplayStats(MAX_PLAYERS, playerid);
	}
}

forward OnAdminOfflineFlag(playerid, username[], desc[]);
public OnAdminOfflineFlag(playerid, username[], desc[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, '%s', NOW(), '%e')", cache_get_field_content_int(0, "uid"), GetPlayerNameEx(playerid), desc);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s offline flagged %s's account for '%s'.", GetRPName(playerid), username, desc);
	}
}
forward Onacceptapp(playerid, username[]);
public Onacceptapp(playerid, username[]) {
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
		SCM(playerid, COLOR_RED, "This player does not exist.");
	} else {
		new approved, locked, answers[9][128];
		for(new i = 0; i < rows; i++) {
			approved = cache_get_field_content_int(i, "approved");
			locked = cache_get_field_content_int(i, "locked");
			cache_get_field_content(i, "application_answer1", answers[0], 128);
			cache_get_field_content(i, "application_answer2", answers[1], 128);
			cache_get_field_content(i, "application_answer3", answers[2], 128);
			cache_get_field_content(i, "application_answer4", answers[3], 128);
			cache_get_field_content(i, "application_answer5", answers[4], 128);
			cache_get_field_content(i, "application_answer6", answers[5], 128);
			cache_get_field_content(i, "application_answer7", answers[6], 128);
			cache_get_field_content(i, "application_answer8", answers[7], 128);			
			cache_get_field_content(i, "application_answer9", answers[8], 128);			
		}

		for(new i = 0; i < 9; i++) {
			if(isnull(answers[i])) {
				SCM(playerid, COLOR_ERROR, "Player has not answered the application properly yet.");
				break;
			}
		}
	
		if(locked) {
			SCM(playerid, COLOR_RED, "You cannot approve an application that already has been denied!");
		} else {
			if(approved) {
				SCM(playerid, COLOR_RED, "Player has no pending application.");
			} else {
				SM(playerid, COLOR_YELLOW, "You have accepted %s pending application.", username);
				
				SendStaffMessage(COLOR_NEWBIE, "AdmCmd: %s pending application was accepted by %s", username, GetPlayerNameEx(playerid));

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET approved = 1 WHERE username = '%e' LIMIT 1", username);
				mysql_tquery(connectionID, queryBuffer);
				
				Log_Write("log_applications", "%s (uid: %i) approved %s pending application (offline)", GetPlayerNameEx(playerid), pData[playerid][pID], username);
			} 
		}
	}
	return 1;
}

forward Ondenyapp(playerid, username[], reason[]);
public Ondenyapp(playerid, username[], reason[]) {
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
		SCM(playerid, COLOR_RED, "This player does not exist.");
	} else {
		new approved, locked, answers[9][128];
		for(new i = 0; i < rows; i++) {
			locked = cache_get_field_content_int(i, "locked");
			approved = cache_get_field_content_int(i, "approved");
			cache_get_field_content(i, "application_answer1", answers[0], 128);
			cache_get_field_content(i, "application_answer2", answers[1], 128);
			cache_get_field_content(i, "application_answer3", answers[2], 128);
			cache_get_field_content(i, "application_answer4", answers[3], 128);
			cache_get_field_content(i, "application_answer5", answers[4], 128);
			cache_get_field_content(i, "application_answer6", answers[5], 128);
			cache_get_field_content(i, "application_answer7", answers[6], 128);
			cache_get_field_content(i, "application_answer8", answers[7], 128);			
			cache_get_field_content(i, "application_answer9", answers[8], 128);			
		}	
	
		for(new i = 0; i < 9; i++) {
			if(isnull(answers[i])) {
				SCM(playerid, COLOR_ERROR, "Player has not answered the application properly yet.");
				break;
			}
		}
		
		if(locked)
		{
			SCM(playerid, COLOR_RED, "This account is locked and was probably denied, contact a higher admin for more info.");
		} else {
			if(approved) {
				SCM(playerid, COLOR_RED, "Player has no pending application.");
			} else {
				SM(playerid, COLOR_YELLOW, "You have denied %s pending application for %s.", username, reason);
				
				SendStaffMessage(COLOR_NEWBIE, "AdmCmd: %s pending application was denied by %s (%s)", username, GetPlayerNameEx(playerid), reason);
				
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM users WHERE username = '%e'", username);
				mysql_tquery(connectionID, queryBuffer);	
				Log_Write("log_applications", "%s (uid: %i) denied %s pending application for %s", GetPlayerNameEx(playerid), pData[playerid][pID], username, reason);
			}
		}
	}
	return 1;
}

forward OnReviewAnswer(playerid, username[]);
public OnReviewAnswer(playerid, username[]) {
	new rows = cache_get_row_count(connectionID), string[1024];
	
	if(!rows) {
		format(string, sizeof(string), "The account '%s' does not exist.", username);
		SCM(playerid, COLOR_RED, string);
	} else {
		new answers[9][128];
		
		for(new i = 0; i < rows; i ++) {
			cache_get_field_content(i, "application_answer1", answers[0], 128);
			cache_get_field_content(i, "application_answer2", answers[1], 128);
			cache_get_field_content(i, "application_answer3", answers[2], 128);
			cache_get_field_content(i, "application_answer4", answers[3], 128);
			cache_get_field_content(i, "application_answer5", answers[4], 128);
			cache_get_field_content(i, "application_answer6", answers[5], 128);
			cache_get_field_content(i, "application_answer7", answers[6], 128);
			cache_get_field_content(i, "application_answer8", answers[7], 128);			
			cache_get_field_content(i, "application_answer9", answers[8], 128);			
		}
		
		format(string, sizeof(string), "{E08B3E}Answers of %s on their application...\n\n", username);
		format(string, sizeof(string), "%s{FF6347}1. Describe DM.\n{E08B3E}- %s\n\n", string, answers[0]);
		format(string, sizeof(string), "%s{FF6347}2. Describe MG.\n{E08B3E}- %s\n\n", string, answers[1]);
		format(string, sizeof(string), "%s{FF6347}3. Give an example on how to use /do\n{E08B3E}- %s\n\n", string, answers[2]);
		format(string, sizeof(string), "%s{FF6347}3. Describe RK.\n{E08B3E}- %s\n\n", string, answers[3]);
		format(string, sizeof(string), "%s{FF6347}4. Describe PG.\n{E08B3E}- %s\n\n", string, answers[4]);
		format(string, sizeof(string), "%s{FF6347}5. What is level required to rob players?\n{E08B3E}- %s\n\n", string, answers[5]);
		format(string, sizeof(string), "%s{FF6347}6. Are you allowed to kill the players after robbing them?\n{E08B3E}- %s\n\n", string, answers[6]);
		format(string, sizeof(string), "%s{FF6347}7. Describe CK.\n{E08B3E}- %s\n\n", string, answers[7]);
		format(string, sizeof(string), "%s{FF6347}8. Rate your roleplay skill (+ additionals)\n{E08B3E}- %s\n\n", string, answers[8]);
		ShowPlayerDialog(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "{FF6347}Review Application", string, "Close", "");
	}
	return 1;
}
forward OnAdminCheckBanHistory(playerid, username[]);
public OnAdminCheckBanHistory(playerid, username[])
{
	new rows = cache_get_row_count(connectionID);

	if(!rows)
	{
		SCM(playerid, COLOR_SYNTAX, "This player has no ban history recorded.");
	}
	else
	{
	    new date[24], description[255];

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_row(i, 0, date);
	        cache_get_row(i, 1, description);

	        SM(playerid, COLOR_LIGHTRED, "[%s] %s", date, description);
	    }
	}
}

forward OnAdminCheckLastActive(playerid, username[]);
public OnAdminCheckLastActive(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
	    new
	        date[40];

     	cache_get_row(0, 0, date);
		SM(playerid, COLOR_YELLOW, "%s last logged in on the %s (server time).", username, date);
	}
}

forward OnAdminSetHelperLevel(playerid, username[], level);
public OnAdminSetHelperLevel(playerid, username[], level)
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else if((pData[playerid][pAdmin] < 6) && cache_get_row_int(0, 0) > pData[playerid][pHelper] && level < cache_get_row_int(0, 0))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified has a higher helper level than you. They cannot be demoted.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helperlevel = %i WHERE username = '%e'", level, username);
	    mysql_tquery(connectionID, queryBuffer);

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" has offline set %s's helper level to %i.", GetRPName(playerid), username, level);
	    Log_Write("log_admin", "%s (uid: %i) has offline set %s's helper level to %i.", GetPlayerNameEx(playerid), pData[playerid][pID], username, level);
	}
}

forward OnAdminSetAdminLevel(playerid, username[], level);
public OnAdminSetAdminLevel(playerid, username[], level)
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else if(cache_get_row_int(0, 0) > pData[playerid][pAdmin] && level < cache_get_row_int(0, 0))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be demoted.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminlevel = %i WHERE username = '%e'", level, username);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has offline set %s's admin level to %i.", GetRPName(playerid), username, level);
	    Log_Write("log_admin", "%s (uid: %i) has offline set %s's admin level to %i.", GetPlayerNameEx(playerid), pData[playerid][pID], username, level);
	}
}

forward OnAdminCreateSafeZone(playerid, zoneid, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height, int, vw);
public OnAdminCreateSafeZone(playerid, zoneid, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height, int, vw)
{

	SafeZoneInfo[zoneid][SZExists] = 1;
	SafeZoneInfo[zoneid][SMinX] = minx;
	SafeZoneInfo[zoneid][SMinY] = miny;
	SafeZoneInfo[zoneid][SMaxX] = maxx;
	SafeZoneInfo[zoneid][SMaxY] = maxy;
	SafeZoneInfo[zoneid][SHeight] = height;
	SafeZoneInfo[zoneid][SzoneInt] = int;
	SafeZoneInfo[zoneid][SzoneVW] = vw;

	ReloadSafeZone(zoneid);
	SendMessage(playerid, COLOR_YELLOW, "** SafeZone %i created successfully.", zoneid);
}

forward OnAdminCreateTurf(playerid, turfid, name[], type, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height);
public OnAdminCreateTurf(playerid, turfid, name[], type, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height)
{
	strcpy(TurfInfo[turfid][tName], name, 32);
	strcpy(TurfInfo[turfid][tCapturedBy], "Pending", MAX_PLAYER_NAME);

	TurfInfo[turfid][tExists] = 1;
	TurfInfo[turfid][tCapturedGang] = -1;
	TurfInfo[turfid][tTime] = 24;
	TurfInfo[turfid][tType] = type;
	TurfInfo[turfid][tMinX] = minx;
	TurfInfo[turfid][tMinY] = miny;
	TurfInfo[turfid][tMaxX] = maxx;
	TurfInfo[turfid][tMaxY] = maxy;
	TurfInfo[turfid][tHeight] = height;
	TurfInfo[turfid][tGangZone] = -1;
	TurfInfo[turfid][tArea] = -1;
	TurfInfo[turfid][tCaptureTime] = 0;
	TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;

	ReloadTurf(turfid);
	SM(playerid, COLOR_YELLOW, "** Turf %i created successfully.", turfid);
}

forward OnAdminCreateLand(playerid, landid, price, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height, Float:x, Float:y, Float:z);
public OnAdminCreateLand(playerid, landid, price, Float:minx, Float:miny, Float:maxx, Float:maxy, Float:height, Float:x, Float:y, Float:z)
{
	strcpy(LandInfo[landid][lOwner], "Nobody", MAX_PLAYER_NAME);

	LandInfo[landid][lExists] = 1;
	LandInfo[landid][lID] = cache_insert_id(connectionID);
	LandInfo[landid][lOwnerID] = 0;
	LandInfo[landid][lPrice] = price;
	LandInfo[landid][lLevel] = 1;	
	LandInfo[landid][lMinX] = minx;
	LandInfo[landid][lMinY] = miny;
	LandInfo[landid][lMaxX] = maxx;
	LandInfo[landid][lMaxY] = maxy;
	LandInfo[landid][lX] = x;
	LandInfo[landid][lY] = y;
	LandInfo[landid][lZ] = z;
	LandInfo[landid][lHeight] = height;
	LandInfo[landid][lGangZone] = -1;
    LandInfo[landid][lArea] = -1;
    LandInfo[landid][lText] = Text3D:INVALID_3DTEXT_ID;
	LandInfo[landid][lPickup] = -1;

    ReloadLand(landid);
    SM(playerid, SERVER_COLOR, "** Land %i created successfully.", landid);
}


forward OnAdminCreateEntrance(playerid, entranceid, name[], Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateEntrance(playerid, entranceid, name[], Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(EntranceInfo[entranceid][eOwner], "Nobody", MAX_PLAYER_NAME);
	strcpy(EntranceInfo[entranceid][eName], name, 40);
	strcpy(EntranceInfo[entranceid][ePassword], "None", 64);

	EntranceInfo[entranceid][eExists] = 1;
	EntranceInfo[entranceid][eID] = cache_insert_id(connectionID);
	EntranceInfo[entranceid][eOwnerID] = 0;
	EntranceInfo[entranceid][eIcon] = 1239;
	EntranceInfo[entranceid][eLocked] = 0;
	EntranceInfo[entranceid][eRadius] = 3.0;
	EntranceInfo[entranceid][ePosX] = x;
	EntranceInfo[entranceid][ePosY] = y;
	EntranceInfo[entranceid][ePosZ] = z;
	EntranceInfo[entranceid][ePosA] = angle;
	EntranceInfo[entranceid][eIntX] = 0.0;
	EntranceInfo[entranceid][eIntY] = 0.0;
	EntranceInfo[entranceid][eIntZ] = 0.0;
	EntranceInfo[entranceid][eIntA] = 0.0;
	EntranceInfo[entranceid][eInterior] = 0;
	EntranceInfo[entranceid][eWorld] = EntranceInfo[entranceid][eID] + 4000000;
	EntranceInfo[entranceid][eOutsideInt] = GetPlayerInterior(playerid);
	EntranceInfo[entranceid][eOutsideVW] = GetPlayerVirtualWorld(playerid);
	EntranceInfo[entranceid][eAdminLevel] = 0;
	EntranceInfo[entranceid][eFactionType] = FACTION_NONE;
	EntranceInfo[entranceid][eVIP] = 0;
	EntranceInfo[entranceid][eVehicles] = 0;
	EntranceInfo[entranceid][eFreeze] = 0;
	EntranceInfo[entranceid][eLabel] = 1;
	EntranceInfo[entranceid][eText] = Text3D:INVALID_3DTEXT_ID;
	EntranceInfo[entranceid][ePickup] = -1;
	EntranceInfo[entranceid][eMapIcon] = 0;
	EntranceInfo[entranceid][eMapIconID] = -1;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET world = %i WHERE id = %i", EntranceInfo[entranceid][eWorld], EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadEntrance(entranceid);
	SM(playerid, SERVER_COLOR, "** Entrance %i created successfully.", entranceid);
}

forward OnAdminCreateBusiness(playerid, businessid, type, Float:x, Float:y, Float:z, Float:angle, description[]);
public OnAdminCreateBusiness(playerid, businessid, type, Float:x, Float:y, Float:z, Float:angle, description[])
{
	strcpy(BusinessInfo[businessid][bOwner], "Nobody", MAX_PLAYER_NAME);
    format(BusinessInfo[businessid][bName], 64, "");
    strcpy(BusinessInfo[businessid][bDescription], description, 128);

	//strmid(BusinessInfo[businessid][bDescription], name, 0, strlen(name), 128);
	
	BusinessInfo[businessid][bExists] = 1;
	BusinessInfo[businessid][bID] = cache_insert_id(connectionID);
	BusinessInfo[businessid][bOwnerID] = 0;
	BusinessInfo[businessid][bType] = type;
	BusinessInfo[businessid][bPrice] = bizInteriors[type][intPrice];
	BusinessInfo[businessid][bEntryFee] = 0;
	BusinessInfo[businessid][bLocked] = 1;
	BusinessInfo[businessid][bPosX] = x;
	BusinessInfo[businessid][bPosY] = y;
	BusinessInfo[businessid][bPosZ] = z;
	BusinessInfo[businessid][bPosA] = angle;
	BusinessInfo[businessid][bIntX] = bizInteriors[type][intX];
	BusinessInfo[businessid][bIntY] = bizInteriors[type][intY];
	BusinessInfo[businessid][bIntZ] = bizInteriors[type][intZ];
	BusinessInfo[businessid][bIntA] = bizInteriors[type][intA];
	BusinessInfo[businessid][bInterior] = bizInteriors[type][intID];
	BusinessInfo[businessid][bWorld] = BusinessInfo[businessid][bID] + 3000000;
	BusinessInfo[businessid][bOutsideInt] = GetPlayerInterior(playerid);
	BusinessInfo[businessid][bOutsideVW] = GetPlayerVirtualWorld(playerid);
	BusinessInfo[businessid][bCash] = 0;
	BusinessInfo[businessid][bProducts] = 500;
	BusinessInfo[businessid][bText] = Text3D:INVALID_3DTEXT_ID;
	BusinessInfo[businessid][bPickup] = -1;
	BusinessInfo[businessid][bMapIcon] = -1;
	BusinessInfo[businessid][bRobbed] = 3;
	BusinessInfo[businessid][bRobbing] = 0;

	for (new j = 0; j < 25; j ++)
	{
		BusinessInfo[businessid][bPrices][j] = 10000;
	}
	switch(BusinessInfo[businessid][bType])
	{
		case BUSINESS_STORE, BUSINESS_GUNSHOP, BUSINESS_CLOTHES, BUSINESS_RESTAURANT, BUSINESS_BARCLUB:
			format(BusinessInfo[businessid][bMessage], 128, "Welcome to "WHITE"%s's{32CD32} %s. Type /buy to purchase from this business.", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType]);
		case BUSINESS_GYM:
		    format(BusinessInfo[businessid][bMessage], 128, "Welcome to "WHITE"%s's{32CD32} %s. /buy to purchase a fighting style.", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType]);
		case BUSINESS_AGENCY:
			format(BusinessInfo[businessid][bMessage], 128, "Welcome to "WHITE"%s's{32CD32} %s. /(ad)vertise to make an advertisement.", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType]);
	}


	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET world = %i, name = '%e', message = '%e' WHERE id = %i", BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bName], BusinessInfo[businessid][bMessage], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadBusiness(businessid);
	SM(playerid, SERVER_COLOR, "** Business %i created successfully.", businessid);
}

forward OnAdminCreateGarage(playerid, garageid, type, Float:x, Float:y, Float:z, Float:angle);
public OnAdminCreateGarage(playerid, garageid, type, Float:x, Float:y, Float:z, Float:angle)
{
	strcpy(GarageInfo[garageid][gOwner], "Nobody", MAX_PLAYER_NAME);

	GarageInfo[garageid][gExists] = 1;
	GarageInfo[garageid][gID] = cache_insert_id(connectionID);
	GarageInfo[garageid][gOwnerID] = 0;
	GarageInfo[garageid][gType] = type;
	GarageInfo[garageid][gPrice] = garageInteriors[type][intPrice];
	GarageInfo[garageid][gLocked] = 0;
	GarageInfo[garageid][gPosX] = x;
	GarageInfo[garageid][gPosY] = y;
	GarageInfo[garageid][gPosZ] = z;
	GarageInfo[garageid][gPosA] = angle;
	GarageInfo[garageid][gExitX] = x - 3.0 * floatsin(-angle, degrees);
	GarageInfo[garageid][gExitY] = y - 3.0 * floatsin(-angle, degrees);
	GarageInfo[garageid][gExitZ] = z;
	GarageInfo[garageid][gExitA] = angle - 180.0;
	GarageInfo[garageid][gWorld] = GarageInfo[garageid][gID] + 2000000;
    GarageInfo[garageid][gText] = Text3D:INVALID_3DTEXT_ID;
    GarageInfo[garageid][gPickup] = -1;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET world = %i WHERE id = %i", GarageInfo[garageid][gWorld], GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadGarage(garageid);
	SM(playerid, SERVER_COLOR, "** Garage %i created successfully.", garageid);
}
forward OnAdminCreateHouse(playerid, houseid, type, Float:x, Float:y, Float:z, Float:angle, description[]);
public OnAdminCreateHouse(playerid, houseid, type, Float:x, Float:y, Float:z, Float:angle, description[])
{
	strcpy(HouseInfo[houseid][hOwner], "Nobody", MAX_PLAYER_NAME);
	strcpy(HouseInfo[houseid][hDescription], description, 128);

	HouseInfo[houseid][hExists] = 1;
	HouseInfo[houseid][hID] = cache_insert_id(connectionID);
	HouseInfo[houseid][hOwnerID] = 0;
	HouseInfo[houseid][hType] = type;
	HouseInfo[houseid][hPrice] = houseInteriors[type][intPrice];
	HouseInfo[houseid][hRentPrice] = 0;
	HouseInfo[houseid][hLevel] = 1;
	HouseInfo[houseid][hLocked] = 0;
	HouseInfo[houseid][hPosX] = x;
	HouseInfo[houseid][hPosY] = y;
	HouseInfo[houseid][hPosZ] = z;
	HouseInfo[houseid][hPosA] = angle;
	HouseInfo[houseid][hIntX] = houseInteriors[type][intX];
	HouseInfo[houseid][hIntY] = houseInteriors[type][intY];
	HouseInfo[houseid][hIntZ] = houseInteriors[type][intZ];
	HouseInfo[houseid][hIntA] = houseInteriors[type][intA];
	HouseInfo[houseid][hInterior] = houseInteriors[type][intID];
	HouseInfo[houseid][hWorld] = HouseInfo[houseid][hID] + 1000000;
	HouseInfo[houseid][hOutsideInt] = GetPlayerInterior(playerid);
	HouseInfo[houseid][hOutsideVW] = GetPlayerVirtualWorld(playerid);
	HouseInfo[houseid][hCash] = 0;
	HouseInfo[houseid][hMaterials] = 0;
	HouseInfo[houseid][hPot] = 0;
	HouseInfo[houseid][hCrack] = 0;
	HouseInfo[houseid][hMeth] = 0;
	HouseInfo[houseid][hPainkillers] = 0;
	HouseInfo[houseid][hHPAmmo] = 0;
	HouseInfo[houseid][hPoisonAmmo] = 0;
	HouseInfo[houseid][hFMJAmmo] = 0;
	HouseInfo[houseid][hLabels] = 0;
	HouseInfo[houseid][hText] = Text3D:INVALID_3DTEXT_ID;
	HouseInfo[houseid][hPickup] = -1;
	HouseInfo[houseid][hRobbed] = 3;
	HouseInfo[houseid][hRobbing] = 0;


	for(new i = 0; i < 10; i ++)
	{
	    HouseInfo[houseid][hWeapons][i] = 0;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET world = %i WHERE id = %i", HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
	SM(playerid, SERVER_COLOR, "** House %i created successfully.", houseid);
}

forward OnAdminDeleteAccount(playerid, username[]);
public OnAdminDeleteAccount(playerid, username[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else if(cache_get_row_int(0, 0) > pData[playerid][pAdmin])
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. You cannot delete them.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM users WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

		new szString[528];
		format(szString, sizeof(szString), "%s has deleted %s's account.",GetPlayerNameEx(playerid), username);
		SendDiscordMessage(23, szString); 
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has deleted %s's account.", GetPlayerNameEx(playerid), username);
	}
}

forward OnAdminListKills(playerid, targetid);
public OnAdminListKills(playerid, targetid)
{
    new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "That player hasn't killed, or has been killed, by anyone since they registered.");
	}
	else
	{
	    new date[24], killer[24], target[24], reason[24];

	    SCM(playerid, SERVER_COLOR, "Kills & Deaths");

	    for(new i = 0; i < rows; i ++)
	    {
	        cache_get_field_content(i, "date", date);
	        cache_get_field_content(i, "killer", killer);
	        cache_get_field_content(i, "target", target);
	        cache_get_field_content(i, "reason", reason);

	        if(cache_get_field_content_int(i, "killer_uid") == pData[targetid][pID])
	        {
		        SM(playerid, COLOR_YELLOW, "[%s] %s killed %s (%s)", date, killer, target, reason);
	        }
	        else if(cache_get_field_content_int(i, "target_uid") == pData[targetid][pID])
	        {
	            SM(playerid, COLOR_YELLOW, "[%s] %s was killed by %s (%s)", date, target, killer, reason);
	        }
	    }
	}
}

forward OnAdminListDamages(playerid, targetid);
public OnAdminListDamages(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "That player hasn't been damaged by anyone since they connected.");
	}
	else
	{
	    SCM(playerid, SERVER_COLOR, "Damage Received");

	    for(new i = 0; i < rows; i ++)
	    {
	        SM(playerid, COLOR_YELLOW, "[%i seconds ago] %s was shot by %s with a %s", gettime() - cache_get_row_int(i, 2), GetRPName(targetid), GetRPName(cache_get_row_int(1, 1)), GetWeaponNameEx(cache_get_row_int(i, 0)));
			//SM(playerid, COLOR_GREY2, "(Weapon: %s) - (From: %s) - (Time: %i seconds ago)", GetWeaponNameEx(cache_get_row_int(i, 0)), GetRPName(cache_get_row_int(i, 1)), gettime() - cache_get_row_int(i, 2));
		}
	}
}

forward OnAdminListShots(playerid, targetid);
public OnAdminListShots(playerid, targetid)
{
	new rows = cache_get_row_count(connectionID);

    if(!rows)
	{
	    SCM(playerid, COLOR_SYNTAX, "That player hasn't registered any shots since they connected.");
	}
	else
	{
	    new weaponid, hittype, timestamp, where[48];

	    SM(playerid, SERVER_COLOR, "%i Last Shots", rows);

	    for(new i = 0; i < rows; i ++)
	    {
	        weaponid 	= cache_get_field_content_int(i, "weaponid");
	        hittype 	= cache_get_field_content_int(i, "hittype");
	        timestamp 	= cache_get_field_content_int(i, "timestamp");

			switch(hittype)
			{
       			case BULLET_HIT_TYPE_PLAYER:
					cache_get_field_content(i, "hitplayer", where);
          		case BULLET_HIT_TYPE_VEHICLE:
          		    format(where, sizeof(where), "Vehicle (ID %i)", cache_get_field_content_int(i, "hitid"));
    			default:
    			    where = "Missed";
			}

			SM(playerid, COLOR_YELLOW, "[%i seconds ago] %s shot a %s and hit: %s", gettime() - timestamp, GetRPName(targetid), GetWeaponNameEx(weaponid), where);
		}
	}
}

forward OnAdminBanIP(playerid, ip[], reason[]);
public OnAdminBanIP(playerid, ip[], reason[])
{
	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "This IP address is already banned.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        if(!strcmp(GetPlayerIP(i), ip))
			{
				SM(i, COLOR_YELLOW, "** Your IP address has been banned by %s, reason: %s", GetRPName(playerid), reason);
				KickPlayer(i);
			}
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO bans VALUES(null, 'n/a', '%s', '%s', NOW(), '%s', 0)", ip, GetPlayerNameEx(playerid), reason);
	    mysql_tquery(connectionID, queryBuffer);

		new szString[528];
		format(szString, sizeof(szString), "%s has banned IP '%s', reason: %s",GetRPName(playerid), ip, reason);
		SendDiscordMessage(23, szString); 	
		
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has banned IP '%s', reason: %s", GetRPName(playerid), ip, reason);
	    Log_Write("log_punishments", "%s (uid: %i) has banned IP: %s, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], ip, reason);
	}
}

forward OnAdminCheckBan(playerid, string[]);
public OnAdminCheckBan(playerid, string[])
{
	new bannedby[MAX_PLAYER_NAME], username[MAX_PLAYER_NAME], ip[16], date[24], reason[128];

	if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "There are no bans that match your criteria.");
	}
	else
	{
	    cache_get_field_content(0, "bannedby", bannedby);
	    cache_get_field_content(0, "username", username);
	    cache_get_field_content(0, "ip", ip);
	    cache_get_field_content(0, "date", date);
	    cache_get_field_content(0, "reason", reason);

		if(!strcmp(username, "n/a", true)) {
		    if(strfind(ip, "*", true) != -1) {
		    	SM(playerid, COLOR_LIGHTRED, "[%s] IP address '%s' was rangebanned by %s, reason: %s", date, ip, bannedby, reason);
	        } else {
	            SM(playerid, COLOR_LIGHTRED, "[%s] IP address '%s' was banned by %s, reason: %s", date, ip, bannedby, reason);
	        }
		}
		else {
		    if(strfind(ip, "*", true) != -1) {
		    	SM(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) was rangebanned by %s, reason: %s", date, username, ip, bannedby, reason);
	        } else if(cache_get_field_content_int(0, "permanent")) {
	            SM(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) was permanently banned by %s, reason: %s", date, username, ip, bannedby, reason);
	        } else {
	            SM(playerid, COLOR_LIGHTRED, "[%s] %s (IP: %s) was banned by %s, reason: %s", date, username, ip, bannedby, reason);
	        }
		}
	}
}

forward OnAdminUnbanUser(playerid, username[]);
public OnAdminUnbanUser(playerid, username[])
{
	if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 1) && pData[playerid][pAdmin] < 7)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This player is permanently banned. Permabans may only be lifted by Community Owner.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM bans WHERE id = %i", cache_get_row_int(0, 0));
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has unbanned %s.", GetRPName(playerid), username);
		Log_Write("log_punishments", "%s (uid: %i) has unbanned %s.", GetPlayerNameEx(playerid), pData[playerid][pID], username);
		
		new szString[528];
		format(szString, sizeof(szString), "%s has unbanned %s.",GetRPName(playerid), username);
		SendDiscordMessage(23, szString); 
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "There is no banned player known by that name.");
	}

	return 1;
}

forward OnAdminLockAccount(playerid, username[]);
public OnAdminLockAccount(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET locked = 1 WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has whitelist %s's account.", GetRPName(playerid), username);
	    Log_Write("log_admin", "%s (uid: %i) whitelist %s's account.", GetPlayerNameEx(playerid), pData[playerid][pID], username);
	}
}

forward OnAdminUnlockAccount(playerid, username[]);
public OnAdminUnlockAccount(playerid, username[])
{
    if(!cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The player specified doesn't exist, or their account is not locked.");
	}
	else
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET locked = 0 WHERE username = '%e'", username);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has unwhitelist %s's account.", GetRPName(playerid), username);
	    Log_Write("log_admin", "%s (uid: %i) unwhitelist %s's account.", GetPlayerNameEx(playerid), pData[playerid][pID], username);
	}
}


forward OnAdminChangeName(playerid, targetid, name[]);
public OnAdminChangeName(playerid, targetid, name[])
{
	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "The name specified is taken already.");
	}
	else
	{
	    Log_Write("log_admin", "%s (uid: %i) changed %s's (uid: %i) name to %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], name);
		Log_Write("log_namechanges", "%s (uid: %i) changed %s's (uid: %i) name to %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], name);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has changed %s's name to %s.", GetRPName(playerid), GetRPName(targetid), name);
		SM(targetid, COLOR_WHITE, "** %s changed your name from %s to %s.", GetRPName(playerid), GetRPName(targetid), name);
		DCC_SetGuildMemberNickname(GUILDSVR, DCC_FindUserByName(pData[targetid][pDiscordName], pData[targetid][pDiscordTag]), pData[targetid][pNameChange]);	
		
		Namechange(targetid, GetPlayerNameEx(targetid), name);
	}
}


forward OnAdminOfflineBan(playerid, username[], reason[]);
public OnAdminOfflineBan(playerid, username[], reason[])
{
    if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 0) > pData[playerid][pAdmin])
	    {
			return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
		}

		new
		    ip[16];

		cache_get_row(0, 1, ip);

        AddBan(username, ip, GetPlayerNameEx(playerid), reason);

    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO log_bans VALUES(null, %i, NOW(), '%s (IP: %s) was banned by %s, reason: %e')", cache_get_field_content_int(0, "uid"), username, ip, GetPlayerNameEx(playerid), reason);
		mysql_tquery(connectionID, queryBuffer);
		
		new szString[528];
		format(szString, sizeof(szString), "%s was offline banned by %s, reason: %s",username, GetPlayerNameEx(playerid),reason);
		SendDiscordMessage(23, szString); 

        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s was offline banned by %s, reason: %s", username, GetPlayerNameEx(playerid), reason);
        Log_Write("log_punishments", "%s (uid: %i) offline banned %s, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], username, reason);
	}

	return 1;
}

forward OnAdminOfflinePrison(playerid, username[], minutes, reason[]);
public OnAdminOfflinePrison(playerid, username[], minutes, reason[])
{
	if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 0) > pData[playerid][pAdmin])
	    {
			return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be prisoned.");
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 2, jailtime = %i, prisonedby = '%e', prisonreason = '%e' WHERE username = '%e'", minutes * 60, GetPlayerNameEx(playerid), reason, username);
	    mysql_tquery(connectionID, queryBuffer);
		
		new szString[528];
		format(szString, sizeof(szString), "AdmCmd: %s was offline prisoned for %i minutes by %s, reason: %s", username, minutes, GetRPName(playerid), reason);
		SendDiscordMessage(15, szString);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s was offline prisoned for %i minutes by %s, reason: %s", username, minutes, GetRPName(playerid), reason);
		Log_Write("log_punishments", "%s (uid: %i) offline prisoned %s for %i minutes, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], username, minutes, reason);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "That player is not registered.");
	}

	return 1;
}

forward OnAdminOfflineComserv(playerid, username[], minutes, reason[]);
public OnAdminOfflineComserv(playerid, username[], minutes, reason[])
{
	if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 0) > pData[playerid][pAdmin])
	    {
			return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be prisoned.");
		}


		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = 50 WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun1 = 0 WHERE username = '%e'",username);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun2 = 0 WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun3 = 0 WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun4 = 0 WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun5 = 0 WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer);
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET comserv =  %i WHERE username = '%e'", minutes , username);
	    mysql_tquery(connectionID, queryBuffer);

		
		new szString[528];
		format(szString, sizeof(szString), "AdmCmd: %s was offline comserv for %i minutes by %s, reason: %s", username, minutes, GetRPName(playerid), reason);
		SendDiscordMessage(15, szString);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s was offline comserv for %i months by %i, reason: %s", username, minutes, GetRPName(playerid), reason);
		Log_Write("log_punishments", "%s (uid: %i) offline comserv %s for %i months, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], username, minutes, reason);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "That player is not registered.");
	}

	return 1;
}

forward OnAdminOfflineFine(playerid, username[], amount, reason[]);
public OnAdminOfflineFine(playerid, username[], amount, reason[])
{
	if(cache_get_row_count(connectionID))
	{
	    if(cache_get_row_int(0, 0) > pData[playerid][pAdmin])
	    {
			return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be fined.");
		}

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = cash - %i WHERE username = '%e'", amount, username);
	    mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s was offline fined for $%i by %s, reason: %s", username, amount, GetRPName(playerid), reason);
        Log_Write("log_admin", "%s (uid: %i) offline fined %s for $%i, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], username, amount, reason);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "That player is not registered.");
	}

	return 1;
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	new
	    File:file = fopen("mysql_error.txt", io_append);

	if(file)
	{
	    new
	        string[2048];

		format(string, sizeof(string), "[%s]\r\nError ID: %i\r\nCallback: %s\r\nQuery: %s\r\n[!] %s\r\n\r\n", GetDate(), errorid, callback, query, error);
		fwrite(file, string);
		fclose(file);
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" A MySQL error occurred (error %i). Details written to mysql_error.txt.", errorid);
	return 1;
}
forward Login1time(playerid);
public Login1time(playerid)
{

	PlayerTextDrawHide(playerid, ECRPLOGIN_4[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_5[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_6[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_8[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_9[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_10[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_11[playerid]);
	
	PlayerTextDrawHide(playerid, ECRPLOGIN_3[playerid]);
	
	PlayerTextDrawShow(playerid, ECRPLOGIN_12[playerid]);
	SetTimerEx("Login2time", 1200, false, "i", playerid);
}
forward Login2time(playerid);
public Login2time(playerid)
{
	PlayerTextDrawShow(playerid, ECRPLOGIN_4[playerid]);
	PlayerTextDrawShow(playerid, ECRPLOGIN_5[playerid]);
	PlayerTextDrawShow(playerid, ECRPLOGIN_6[playerid]);
	PlayerTextDrawShow(playerid, ECRPLOGIN_8[playerid]);
	PlayerTextDrawShow(playerid, ECRPLOGIN_9[playerid]);
	PlayerTextDrawShow(playerid, ECRPLOGIN_10[playerid]);
	PlayerTextDrawShow(playerid, ECRPLOGIN_11[playerid]);
	
	PlayerTextDrawHide(playerid, ECRPLOGIN_3[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_12[playerid]);
	
	PlayerTextDrawShow(playerid, ECRPLOGIN_13[playerid]);
	SetTimerEx("Login3time", 1100, false, "i", playerid);
}
forward Login3time(playerid);
public Login3time(playerid)
{

	PlayerTextDrawHide(playerid, ECRPLOGIN_4[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_5[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_6[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_8[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_9[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_10[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_11[playerid]);
	
	PlayerTextDrawHide(playerid, ECRPLOGIN_3[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_12[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_13[playerid]);
	
	PlayerTextDrawShow(playerid, ECRPLOGIN_14[playerid]);
	SetTimerEx("Login4time", 1200, false, "i", playerid);
}
forward Login4time(playerid);
public Login4time(playerid)
{

	PlayerTextDrawShow(playerid, ECRPLOGIN_4[playerid]);
	PlayerTextDrawShow(playerid, ECRPLOGIN_5[playerid]);
	PlayerTextDrawShow(playerid, ECRPLOGIN_6[playerid]);
	PlayerTextDrawShow(playerid, ECRPLOGIN_7[playerid]);
	PlayerTextDrawShow(playerid, ECRPLOGIN_8[playerid]);
	PlayerTextDrawShow(playerid, ECRPLOGIN_9[playerid]);
	PlayerTextDrawShow(playerid, ECRPLOGIN_10[playerid]);
	PlayerTextDrawShow(playerid, ECRPLOGIN_11[playerid]);
	
	PlayerTextDrawHide(playerid, ECRPLOGIN_3[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_12[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_13[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_14[playerid]);
	
	SetTimerEx("Login5time", 1000, false, "i", playerid);
}

forward Login5time(playerid);
public Login5time(playerid)
{
	/*
	PlayerTextDrawHide(playerid, ECRPLOGIN_0[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_1[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_2[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_3[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_4[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_5[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_6[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_7[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_8[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_9[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_10[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_11[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_12[playerid]);
	
	PlayerTextDrawHide(playerid, ECRPLOGIN_13[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_14[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_15[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_16[playerid]);
	PlayerTextDrawHide(playerid, ECRPLOGIN_17[playerid]);
	*/

	PlayerTextDrawShow(playerid, MCRP_LOGIN_0[playerid]);
	PlayerTextDrawShow(playerid, MCRP_LOGIN_1[playerid]);
	PlayerTextDrawShow(playerid, MCRP_LOGIN_2[playerid]);
	PlayerTextDrawShow(playerid, MCRP_LOGIN_3[playerid]);
	PlayerTextDrawShow(playerid, MCRP_LOGIN_4[playerid]);
	PlayerTextDrawShow(playerid, MCRP_LOGIN_5[playerid]);
	PlayerTextDrawShow(playerid, MCRP_LOGIN_6[playerid]);

	SetTimerEx("ShowMainMenuCamera", 400, false, "i", playerid);
}
forward OnQueryFinished(threadid, extraid);
public OnQueryFinished(threadid, extraid)
{
	new rows = cache_get_row_count(connectionID);

	switch(threadid)
	{
	    case THREAD_LOOKUP_BANS:
	    {
	        if(rows)
        	{
	            new playername[24], bannedby[24], date[24], reason[128];
                GetPlayerName(extraid, playername, sizeof(playername));
	            cache_get_field_content(0, "bannedby", bannedby);
	            cache_get_field_content(0, "date", date);
	            cache_get_field_content(0, "reason", reason);

				if(cache_get_field_content_int(0, "permanent"))
				    SCMf(extraid, COLOR_LIGHTRED, "You are permanently banned from this server.");
				else
					SCMf(extraid, COLOR_LIGHTRED, "You are banned from this server. You can appeal your ban at "SERVER_URL"");
            
                SCMf(extraid, COLOR_LIME, "========================================================================");
				SCMf(extraid, COLOR_LIGHTRED, "Admin: "ORANGE"%s", bannedby);
	            SCMf(extraid, COLOR_LIGHTRED, "Issue Date: "ORANGE"%s", date);
	            SCMf(extraid, COLOR_LIGHTRED, "Reason: "ORANGE"%s", reason);
	            SCMf(extraid, COLOR_LIME, "========================================================================");
				KickPlayer(extraid);

				SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s has attempted to log in while banned. with a reason of %s", playername, reason);
	        }
	        else
	        {
    			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%s'", GetPlayerNameEx(extraid));
				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOOKUP_ACCOUNT, extraid);
	        }
		}
	    case THREAD_LOOKUP_ACCOUNT:
	    {
	        if(rows)
	        {
				SetPlayerCameraPos(extraid, 1441.1740,-2282.9890,13.5469);
				ShowDialogToPlayer(extraid, DIALOG_LOGIN);
			}
			else
			{
				if(strfind(GetPlayerNameEx(extraid), "_") == -1)
			    {
			        ShowPlayerDialog(extraid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-Roleplay Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "");
			    }
			    else
			    {
    				ShowDialogToPlayer(extraid, DIALOG_REGISTER);
				}
			}
	    }
	    case THREAD_ACCOUNT_REGISTER:
	    {
	        new
	            id = cache_insert_id(connectionID);

			if(id)
	        {
	        	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM users WHERE uid = %i", id);
	        	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, extraid);
	        }
	    }
	    case THREAD_PROCESS_LOGIN:
	    {	// OnPlayerLogin
	        if(!rows)
	        {
	            pData[extraid][pLoginTries]++;

				if(pData[extraid][pLoginTries] < 3)
				{
					ShowDialogToPlayer(extraid, DIALOG_LOGIN);
					SM(extraid, COLOR_LIGHTRED, "Incorrect password. You have %i more attempts before you are kicked.", 3 - pData[extraid][pLoginTries]);
				}
				else
				{
					Kick(extraid);
				}

		    } 
			else
   			{
	            new date[64];

	            cache_get_field_content(0, "login_date", date);
	            cache_get_field_content(0, "accent", pData[extraid][pAccent], connectionID, 16);
	            cache_get_field_content(0, "adminname", pData[extraid][pAdminName], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "contractby", pData[extraid][pContractBy], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "prisonedby", pData[extraid][pPrisonedBy], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "prisonreason", pData[extraid][pPrisonReason], connectionID, 128);
	            cache_get_field_content(0, "passportname", pData[extraid][pPassportName], connectionID, MAX_PLAYER_NAME);
	            cache_get_field_content(0, "customtitle", pData[extraid][pCustomTitle], connectionID, 64);
	            pData[extraid][pCustomTColor] = cache_get_field_content_int(0, "customcolor");

				cache_get_field_content(0, "bindslot1", pData[extraid][pBind], connectionID, 128);
				cache_get_field_content(0, "bindslot2", pData[extraid][pBind2], connectionID, 128);
				cache_get_field_content(0, "bindslot3", pData[extraid][pBind3], connectionID, 128);
				cache_get_field_content(0, "bindslot4", pData[extraid][pBind4], connectionID, 128);
				cache_get_field_content(0, "bindslot5", pData[extraid][pBind5], connectionID, 128);
				cache_get_field_content(0, "bindslot6", pData[extraid][pBind6], connectionID, 128);
				cache_get_field_content(0, "bindslot7", pData[extraid][pBind7], connectionID, 128);
				cache_get_field_content(0, "bindslot8", pData[extraid][pBind8], connectionID, 128);
				cache_get_field_content(0, "bindslot9", pData[extraid][pBind9], connectionID, 128);
				cache_get_field_content(0, "bindslot10", pData[extraid][pBind10], connectionID, 128);

	            pData[extraid][pID] = cache_get_field_content_int(0, "uid");
				pData[extraid][pSetup] = cache_get_field_content_int(0, "setup");
				pData[extraid][pFirstSpawn] = cache_get_field_content_int(0, "firstspawn");
                pData[extraid][pGender] = cache_get_field_content_int(0, "gender");
                pData[extraid][pAge] = cache_get_field_content_int(0, "age");
                pData[extraid][pSkin] = cache_get_field_content_int(0, "skin");
                pData[extraid][pCameraX] = cache_get_field_content_float(0, "camera_x");
                pData[extraid][pCameraY] = cache_get_field_content_float(0, "camera_y");
                pData[extraid][pCameraZ] = cache_get_field_content_float(0, "camera_z");
                pData[extraid][pPosX] = cache_get_field_content_float(0, "pos_x");
                pData[extraid][pPosY] = cache_get_field_content_float(0, "pos_y");
                pData[extraid][pPosZ] = cache_get_field_content_float(0, "pos_z");
                pData[extraid][pPosA] = cache_get_field_content_float(0, "pos_a");
                pData[extraid][pInterior] = cache_get_field_content_int(0, "interior");
                pData[extraid][pWorld] = cache_get_field_content_int(0, "world");
                pData[extraid][pCash] = cache_get_field_content_int(0, "cash");
                pData[extraid][pBank] = cache_get_field_content_int(0, "bank");
                pData[extraid][pPaycheck] = cache_get_field_content_int(0, "paycheck");
                pData[extraid][pLevel] = cache_get_field_content_int(0, "level");
                pData[extraid][pCrowbar] = cache_get_field_content_int(0, "crowbar");
                pData[extraid][pHelmet] = cache_get_field_content_int(0, "helmet");
                pData[extraid][pFirework] = cache_get_field_content_int(0, "firework");
                pData[extraid][pEXP] = cache_get_field_content_int(0, "exp");
                pData[extraid][pMinutes] = cache_get_field_content_int(0, "minutes");
                pData[extraid][pHours] = cache_get_field_content_int(0, "hours");
                pData[extraid][pAdmin] = cache_get_field_content_int(0, "adminlevel");
                pData[extraid][pHelper] = cache_get_field_content_int(0, "helperlevel");
                pData[extraid][pHealth] = cache_get_field_content_float(0, "health");
                pData[extraid][pArmor] = cache_get_field_content_float(0, "armor");
				pData[extraid][pWarnings] = cache_get_field_content_int(0, "warnings");
				pData[extraid][pComserv] = cache_get_field_content_int(0, "comserv");
				pData[extraid][pInjured] = cache_get_field_content_int(0, "injured");
				pData[extraid][pBrokenLeg] = cache_get_field_content_int(0, "brokenleg");
				pData[extraid][pBrokenHP] = cache_get_field_content_int(0, "brokenHP");
				pData[extraid][pAntiFall] = cache_get_field_content_int(0, "antifall");
				pData[extraid][pHospital] = cache_get_field_content_int(0, "hospital");
				pData[extraid][pSpawnHealth] = cache_get_field_content_float(0, "spawnhealth");
                pData[extraid][pSpawnArmor] = cache_get_field_content_float(0, "spawnarmor");
                pData[extraid][pJailType] = cache_get_field_content_int(0, "jailtype");
                pData[extraid][pJailTime] = cache_get_field_content_int(0, "jailtime");
             	pData[extraid][pBedType] = cache_get_field_content_int(0, "bedtype");
				pData[extraid][pVerifySystem] = cache_get_field_content_int(0, "verify");
				pData[extraid][pVerifyCode] = cache_get_field_content_int(0, "verifycode");
                pData[extraid][pBedTime] = cache_get_field_content_int(0, "bedtime");
                pData[extraid][pFormerAdmin] = cache_get_field_content_int(0, "formeradmin");
  				pData[MAX_PLAYERS][pAMute] = cache_get_field_content_int(0, "amuted");
				pData[MAX_PLAYERS][pAMCount] = cache_get_field_content_int(0, "amcount");
                pData[extraid][pNewbieMuted] = cache_get_field_content_int(0, "newbiemuted");
                pData[extraid][pHelpMuted] = cache_get_field_content_int(0, "helpmuted");
                pData[extraid][pAdMuted] = cache_get_field_content_int(0, "admuted");
                pData[extraid][pLiveMuted] = cache_get_field_content_int(0, "livemuted");
                pData[extraid][pGlobalMuted] = cache_get_field_content_int(0, "globalmuted");
                pData[extraid][pReportMuted] = cache_get_field_content_int(0, "reportmuted");
                pData[extraid][pReportWarns] = cache_get_field_content_int(0, "reportwarns");
                pData[extraid][pFightStyle] = cache_get_field_content_int(0, "fightstyle");
                pData[extraid][pDirtyCash] = cache_get_field_content_int(0, "dirtycash");

				/*#if defined Christmas
	#else
					pData[extraid][pCandy] = cache_get_field_content_int(0, "candy");
				#endif*/

				pData[extraid][pPhone] = cache_get_field_content_int(0, "phone");
				pData[extraid][pLottery] = cache_get_field_content_int(0, "lottery");
				pData[extraid][pJob] = cache_get_field_content_int(0, "job");
				pData[extraid][pSecondJob] = cache_get_field_content_int(0, "secondjob");
				pData[extraid][pCrimes] = cache_get_field_content_int(0, "crimes");
				pData[extraid][pArrested] = cache_get_field_content_int(0, "arrested");
				pData[extraid][pWantedLevel] = cache_get_field_content_int(0, "wantedlevel");
				pData[extraid][pMaterials] = cache_get_field_content_int(0, "materials");
				pData[extraid][pPot] = cache_get_field_content_int(0, "pot");
				pData[extraid][pCrack] = cache_get_field_content_int(0, "crack");
				pData[extraid][pTaco] = cache_get_field_content_int(0, "taco");
				pData[extraid][pJuice] = cache_get_field_content_int(0, "juice");
				pData[extraid][pEmptyCan] = cache_get_field_content_int(0, "emptycan");
	
				pData[extraid][pBurrito] = cache_get_field_content_int(0, "burrito");
				pData[extraid][pMeat] = cache_get_field_content_int(0, "meat");
				pData[extraid][pMeth] = cache_get_field_content_int(0, "meth");
				pData[extraid][pPainkillers] = cache_get_field_content_int(0, "painkillers");
				pData[extraid][pSeeds] = cache_get_field_content_int(0, "seeds");
				pData[extraid][pEphedrine] = cache_get_field_content_int(0, "ephedrine");
				pData[extraid][pMuriaticAcid] = cache_get_field_content_int(0, "muriaticacid");
				pData[extraid][pBakingSoda] = cache_get_field_content_int(0, "bakingsoda");
				pData[extraid][pCigars] = cache_get_field_content_int(0, "cigars");
				pData[extraid][pVest] = cache_get_field_content_int(0, "vest");
				pData[extraid][pFood] = cache_get_field_content_int(0, "food");
				pData[extraid][pDrink] = cache_get_field_content_int(0, "drink");
				pData[extraid][pWalkieTalkie] = cache_get_field_content_int(0, "walkietalkie");
				pData[extraid][pChannel] = cache_get_field_content_int(0, "channel");
				pData[extraid][pRentingHouse] = cache_get_field_content_int(0, "rentinghouse");
				pData[extraid][pSpraycans] = cache_get_field_content_int(0, "spraycans");
				pData[extraid][pChatstyle] = cache_get_field_content_int(0, "chatstyle");
				pData[extraid][pBandage] = cache_get_field_content_int(0, "bandage");
				pData[extraid][pMedkit] = cache_get_field_content_int(0, "medkit");
				pData[extraid][pRepairKit] = cache_get_field_content_int(0, "repairkit");
				pData[extraid][pParts] = cache_get_field_content_int(0, "parts");
				pData[extraid][pBoombox] = cache_get_field_content_int(0, "boombox");
				pData[extraid][pMP3Player] = cache_get_field_content_int(0, "mp3player");
				pData[extraid][pPhonebook] = cache_get_field_content_int(0, "phonebook");
				pData[extraid][pFishingRod] = cache_get_field_content_int(0, "fishingrod");
				pData[extraid][pFishingBait] = cache_get_field_content_int(0, "fishingbait");
				pData[extraid][pFishWeight] = cache_get_field_content_int(0, "fishweight");
				pData[extraid][pFishingSkill] = cache_get_field_content_int(0, "fishingskill");
				pData[extraid][pGuardSkill] = cache_get_field_content_int(0, "guardskill");
				pData[extraid][pWeaponSkill] = cache_get_field_content_int(0, "weaponskill");
				pData[extraid][pLawyerSkill] = cache_get_field_content_int(0, "lawyerskill");
				pData[extraid][pSmugglerSkill] = cache_get_field_content_int(0, "smugglerskill");
            	pData[extraid][pDetectiveSkill] = cache_get_field_content_int(0, "detectiveskill");
				pData[extraid][pToggleTextdraws] = cache_get_field_content_int(0, "toggletextdraws");
				pData[extraid][pToggleOOC] = cache_get_field_content_int(0, "toggleooc");
				pData[extraid][pTogglePhone] = cache_get_field_content_int(0, "togglephone");
				pData[extraid][pToggleAdmin] = cache_get_field_content_int(0, "toggleadmin");
				pData[extraid][pToggleHelper] = cache_get_field_content_int(0, "togglehelper");
				pData[extraid][pToggleNewbie] = cache_get_field_content_int(0, "togglenewbie");
				pData[extraid][pToggleWT] = cache_get_field_content_int(0, "togglewt");
				pData[extraid][pToggleRadio] = cache_get_field_content_int(0, "toggleradio");
				pData[extraid][pToggleVIP] = cache_get_field_content_int(0, "togglevip");
				pData[extraid][pToggleMusic] = cache_get_field_content_int(0, "togglemusic");
				pData[extraid][pToggleFaction] = cache_get_field_content_int(0, "togglefaction");
				pData[extraid][pToggleNews] = cache_get_field_content_int(0, "togglenews");
				pData[extraid][pToggleGlobal] = cache_get_field_content_int(0, "toggleglobal");
				pData[extraid][pToggleCam] = cache_get_field_content_int(0, "togglecam");
				pData[extraid][pToggleHUD] = cache_get_field_content_int(0, "togglehud");
				pData[extraid][pCarLicense] = cache_get_field_content_int(0, "carlicense");
				pData[extraid][pWeaponLicense] = cache_get_field_content_int(0, "gunlicense");
				pData[extraid][pVIPgun1] = cache_get_field_content_int(0, "vipgun1");
				pData[extraid][pVIPgun2] = cache_get_field_content_int(0, "vipgun2");
				pData[extraid][pVIPgun3] = cache_get_field_content_int(0, "vipgun3");
				pData[extraid][pVIPgun4] = cache_get_field_content_int(0, "vipgun4");
				pData[extraid][pVIPgun5] = cache_get_field_content_int(0, "vipgun5");
				pData[extraid][pDonator] = cache_get_field_content_int(0, "vippackage");
				pData[extraid][pVIPTime] = cache_get_field_content_int(0, "viptime");
				pData[extraid][pVIPCooldown] = cache_get_field_content_int(0, "vipcooldown");
				pData[extraid][pWeapons][0] = cache_get_field_content_int(0, "weapon_0");
				pData[extraid][pWeapons][1] = cache_get_field_content_int(0, "weapon_1");
				pData[extraid][pWeapons][2] = cache_get_field_content_int(0, "weapon_2");
				pData[extraid][pWeapons][3] = cache_get_field_content_int(0, "weapon_3");
				pData[extraid][pWeapons][4] = cache_get_field_content_int(0, "weapon_4");
				pData[extraid][pWeapons][5] = cache_get_field_content_int(0, "weapon_5");
				pData[extraid][pWeapons][6] = cache_get_field_content_int(0, "weapon_6");
				pData[extraid][pWeapons][7] = cache_get_field_content_int(0, "weapon_7");
				pData[extraid][pWeapons][8] = cache_get_field_content_int(0, "weapon_8");
				pData[extraid][pWeapons][9] = cache_get_field_content_int(0, "weapon_9");
				pData[extraid][pWeapons][10] = cache_get_field_content_int(0, "weapon_10");
				pData[extraid][pWeapons][11] = cache_get_field_content_int(0, "weapon_11");
				pData[extraid][pWeapons][12] = cache_get_field_content_int(0, "weapon_12");
				pData[extraid][pFaction] = cache_get_field_content_int(0, "faction");
				pData[extraid][pFactionRank] = cache_get_field_content_int(0, "factionrank");
				pData[extraid][pGang] = cache_get_field_content_int(0, "gang");
				pData[extraid][pGangRank] = cache_get_field_content_int(0, "gangrank");
				pData[extraid][pDivision] = cache_get_field_content_int(0, "division");
				pData[extraid][pContracted] = cache_get_field_content_int(0, "contracted");
				pData[extraid][pBombs] = cache_get_field_content_int(0, "bombs");
				pData[extraid][pCompletedHits] = cache_get_field_content_int(0, "completedhits");
				pData[extraid][pFailedHits] = cache_get_field_content_int(0, "failedhits");
				pData[extraid][pReports] = cache_get_field_content_int(0, "reports");
				pData[extraid][pNewbies] = cache_get_field_content_int(0, "newbies");
				pData[extraid][pHelpRequests] = cache_get_field_content_int(0, "helprequests");
				pData[extraid][pSpeedometer] = cache_get_field_content_int(0, "speedometer");
				pData[extraid][pFactionMod] = cache_get_field_content_int(0, "factionmod");
				pData[extraid][pAdminPersonnel] = cache_get_field_content_int(0, "adminpersonnel");
				pData[extraid][pGangMod] = cache_get_field_content_int(0, "gangmod");
				pData[extraid][pBanAppealer] = cache_get_field_content_int(0, "banappealer");
				pData[extraid][pEventMod] = cache_get_field_content_int(0, "eventmod");				
				pData[extraid][pDev] = cache_get_field_content_int(0, "dev");
				pData[extraid][pPotPlanted] = cache_get_field_content_int(0, "potplanted");
				pData[extraid][pPotTime] = cache_get_field_content_int(0, "pottime");
				pData[extraid][pPotGrams] = cache_get_field_content_int(0, "potgrams");
				pData[extraid][pPotX] = cache_get_field_content_float(0, "pot_x");
				pData[extraid][pPotY] = cache_get_field_content_float(0, "pot_y");
				pData[extraid][pPotZ] = cache_get_field_content_float(0, "pot_z");
				pData[extraid][pPotA] = cache_get_field_content_float(0, "pot_a");
				pData[extraid][pInventoryUpgrade] = cache_get_field_content_int(0, "inventoryupgrade");
				pData[extraid][pAddictUpgrade] = cache_get_field_content_int(0, "addictupgrade");
                pData[extraid][pTraderUpgrade] = cache_get_field_content_int(0, "traderupgrade");
                pData[extraid][pAssetUpgrade] = cache_get_field_content_int(0, "assetupgrade");
   				pData[extraid][pHPAmmo] = cache_get_field_content_int(0, "hpammo");
				pData[extraid][pPoisonAmmo] = cache_get_field_content_int(0, "poisonammo");
				pData[extraid][pFMJAmmo] = cache_get_field_content_int(0, "fmjammo");
				pData[extraid][pAmmoType] = cache_get_field_content_int(0, "ammotype");
				pData[extraid][pAmmoWeapon] = cache_get_field_content_int(0, "ammoweapon");
				pData[extraid][pDMWarnings] = cache_get_field_content_int(0, "dmwarnings");
				pData[extraid][pWeaponRestricted] = cache_get_field_content_int(0, "weaponrestricted");
				pData[extraid][pFgRestricted] = cache_get_field_content_int(0, "cooldown");
				pData[extraid][pReferralUID] = cache_get_field_content_int(0, "referral_uid");
				pData[extraid][pWatch] = cache_get_field_content_int(0, "watch");
				pData[extraid][pRefunded] = cache_get_field_content_int(0, "refunded");
				pData[extraid][pGPS] = cache_get_field_content_int(0, "gps");
				pData[extraid][pClothes] = cache_get_field_content_int(0, "clothes");
				pData[extraid][pShowTurfs] = cache_get_field_content_int(0, "showturfs");
				pData[extraid][pWatchOn] = cache_get_field_content_int(0, "watchon");
				pData[extraid][pGPSOn] = cache_get_field_content_int(0, "gpson");
				pData[extraid][pDoubleXP] = cache_get_field_content_int(0, "doublexp");
				pData[extraid][pCourierCooldown] = cache_get_field_content_int(0, "couriercooldown");
                pData[extraid][pPizzaCooldown] = cache_get_field_content_int(0, "pizzacooldown");
                pData[extraid][pDeathCooldown] = cache_get_field_content_int(0, "deathcooldown");
                pData[extraid][pDetectiveCooldown] = cache_get_field_content_int(0, "detectivecooldown");
            	pData[extraid][pGasCan] = cache_get_field_content_int(0, "gascan");
            	pData[extraid][pDuty] = cache_get_field_content_int(0, "duty");
            	pData[extraid][pBackpack] = cache_get_field_content_int(0, "backpack");
            	pData[extraid][bpCash] = cache_get_field_content_int(0, "bpcash");
				pData[extraid][bpMaterials] = cache_get_field_content_int(0, "bpmaterials");
				pData[extraid][bpPot] = cache_get_field_content_int(0, "bppot");
				pData[extraid][bpCrack] = cache_get_field_content_int(0, "bpcrack");
				pData[extraid][bpMeth] = cache_get_field_content_int(0, "bpmeth");
				pData[extraid][bpPainkillers] = cache_get_field_content_int(0, "bppainkillers");
    			pData[extraid][bpWeapons][0] = cache_get_field_content_int(0, "bpweapon_0");
				pData[extraid][bpWeapons][1] = cache_get_field_content_int(0, "bpweapon_1");
				pData[extraid][bpWeapons][2] = cache_get_field_content_int(0, "bpweapon_2");
				pData[extraid][bpWeapons][3] = cache_get_field_content_int(0, "bpweapon_3");
				pData[extraid][bpWeapons][4] = cache_get_field_content_int(0, "bpweapon_4");
				pData[extraid][bpWeapons][5] = cache_get_field_content_int(0, "bpweapon_5");
				pData[extraid][bpWeapons][6] = cache_get_field_content_int(0, "bpweapon_6");
				pData[extraid][bpWeapons][7] = cache_get_field_content_int(0, "bpweapon_7");
				pData[extraid][bpWeapons][8] = cache_get_field_content_int(0, "bpweapon_8");
				pData[extraid][bpWeapons][9] = cache_get_field_content_int(0, "bpweapon_9");
				pData[extraid][bpWeapons][10] = cache_get_field_content_int(0, "bpweapon_10");
				pData[extraid][bpWeapons][11] = cache_get_field_content_int(0, "bpweapon_11");
				pData[extraid][bpWeapons][13] = cache_get_field_content_int(0, "bpweapon_13");
				pData[extraid][bpWeapons][14] = cache_get_field_content_int(0, "bpweapon_14");
				pData[extraid][bpHPAmmo] = cache_get_field_content_int(0, "bphpammo");
				pData[extraid][bpPoisonAmmo] = cache_get_field_content_int(0, "bppoisonammo");
				pData[extraid][bpFMJAmmo] = cache_get_field_content_int(0, "bpfmjammo");
                pData[extraid][pPassport] = cache_get_field_content_int(0, "passport");
                pData[extraid][pPassportLevel] = cache_get_field_content_int(0, "passportlevel");
                pData[extraid][pPassportSkin] = cache_get_field_content_int(0, "passportskin");
                pData[extraid][pPassportPhone] = cache_get_field_content_int(0, "passportphone");
                pData[extraid][pRope] = cache_get_field_content_int(0, "rope");
                pData[extraid][pVoucher1] = cache_get_field_content_int(0, "voucher1");
                pData[extraid][pVoucher2] = cache_get_field_content_int(0, "voucher2");
                pData[extraid][pVoucher3] = cache_get_field_content_int(0, "voucher3");
                pData[extraid][pVoucher4] = cache_get_field_content_int(0, "voucher4");
                pData[extraid][pVoucher5] = cache_get_field_content_int(0, "voucher5");
                pData[extraid][pBlindfold] = cache_get_field_content_int(0, "blindfold");
                pData[extraid][pInsurance] = cache_get_field_content_int(0, "insurance");
                pData[extraid][pMask] = cache_get_field_content_int(0, "mask");
    			pData[extraid][pTotalPatients] = cache_get_field_content_int(0, "totalpatients");
				pData[extraid][pTotalFires] = cache_get_field_content_int(0, "totalfires");
				pData[extraid][pChatAnim] = cache_get_field_content_int(0, "chatanim");

                pData[extraid][pLogged] = 1;
                pData[extraid][pACTime] = gettime() + 5;

                pData[extraid][pRareTime] = cache_get_field_content_int(0, "rarecooldown");
                pData[extraid][pDiamonds] = cache_get_field_content_int(0, "diamonds");
				pData[extraid][pHunger] = cache_get_field_content_int(0, "hunger");
				pData[extraid][pHungerTimer] = cache_get_field_content_int(0, "hungertimer");
				pData[extraid][pStress] = cache_get_field_content_int(0, "stress");
				pData[extraid][pStressTimer] = cache_get_field_content_int(0, "stresstimer");
				pData[extraid][pThirst] = cache_get_field_content_int(0, "thirst");
				pData[extraid][pThirstTimer] = cache_get_field_content_int(0, "thirsttimer");
				pData[extraid][pMarriedTo] = cache_get_field_content_int(0, "marriedto");
				pData[extraid][pSkates] = cache_get_field_content_int(0, "rollerskates");
				cache_get_field_content(0, "discordtag", pData[extraid][pDiscordTag], connectionID, 8);
				cache_get_field_content(0, "discordname", pData[extraid][pDiscordName], connectionID, 16);

				TogglePlayerControllable(extraid, 0);
				SetTimerEx("UnfreezePlayerEx", 8000, false, "i", extraid);

				if(pData[extraid][pMarriedTo] != -1)
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username FROM users WHERE uid = %i", pData[extraid][pMarriedTo]);
    				mysql_tquery(connectionID, queryBuffer, "OnUpdatePartner", "i", extraid);
				}
				else
				{
				    strcpy(pData[extraid][pMarriedName], "Nobody", MAX_PLAYER_NAME);
				}

				pData[extraid][pApproved] = cache_get_field_content_int(0, "approved");
				

                if(!pData[extraid][pAdminDuty])
				{
					ClearChat(extraid);
                }

				if(!pData[extraid][pToggleTextdraws])
				{
					if(!pData[extraid][pToggleHUD])
					{
					    PlayerTextDrawShow(extraid, pData[extraid][pText][3]);
					    PlayerTextDrawShow(extraid, pData[extraid][pText][4]);
					}
					if(pData[extraid][pWatchOn])
					{
					    TextDrawShowForPlayer(extraid, TimeTD);
					}
					if(pData[extraid][pGPSOn])
					{
                        ShowGPSTextdraw(extraid);
					}
				}

            	if(!isnull(gServerMOTD))
            	{
            		SM(extraid, SERVER_COLOR, "News:"WHITE" %s", gServerMOTD);
            	}
            	if(!isnull(adminMOTD) && pData[extraid][pAdmin] > 0)
            	{
            		SM(extraid, COLOR_LIGHTRED, "Admin News:"WHITE" %s", adminMOTD);
            	}
            	if(!isnull(helperMOTD) && (pData[extraid][pHelper] > 0 || pData[extraid][pAdmin] > 0))
            	{
            		SM(extraid, COLOR_AQUA, "Helper News:"WHITE" %s", helperMOTD);
            	}
            	if(pData[extraid][pGang] >= 0 && strcmp(GangInfo[pData[extraid][pGang]][gMOTD], "None", true) != 0)
            	{
            		SM(extraid, COLOR_GREEN, "Gang News:"WHITE" %s", GangInfo[pData[extraid][pGang]][gMOTD]);
            	}
				if(IsPlayerAndroid(extraid))
				{
					SendClientMessage(extraid, COLOR_YELLOW, "You are connected from "GREEN"Mobile"WHITE"");
				} 
				else 
				{
					SendClientMessage(extraid, COLOR_YELLOW, "You are connected from "RED"PC"WHITE"");
				}				
				if(cache_get_field_content_int(extraid, "refercount") > 0)
				{
				    new
						count = cache_get_field_content_int(0, "refercount");

				    SM(extraid, COLOR_YELLOW, "%i players who you've referred reached level 3. Therefore you received +1 level!", count);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET refercount = 0 WHERE uid = %i", pData[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
				}

                if(!pData[extraid][pSetup])
                {
                    if(!pData[extraid][pAdminDuty] && !pData[extraid][pToggleCam])
                    {
                        pData[extraid][pLoginCamera] = 1;
					}
                    if(pData[extraid][pPotPlanted] && pData[extraid][pPotObject] == INVALID_OBJECT_ID)
                    {
                        pData[extraid][pPotObject] = CreateDynamicObject(3409, pData[extraid][pPotX], pData[extraid][pPotY], pData[extraid][pPotZ] - 1.8, 0.0, 0.0, pData[extraid][pPotA]);
					}
					if(pData[extraid][pShowTurfs])
					{
					    ShowTurfsOnMap(extraid, true);
					}
					
					ShowSafeZoneOnMap(extraid, true);
					
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lastlogin = NOW(), ip = '%s' WHERE uid = %i", GetPlayerIP(extraid), pData[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM flags WHERE uid = %i", pData[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_FLAGS, extraid);

			     	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM clothing WHERE uid = %i", pData[extraid][pID]);
				    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_CLOTHING, extraid);

				    if(!pData[extraid][pTogglePhone])
				    {
					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM texts WHERE recipient_number = %i", pData[extraid][pPhone]);
					    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_TEXTS, extraid);
					}

					for(new i = 1; i < MAX_VEHICLES; i ++)
					{
					    if(IsValidVehicle(i) && IsVehicleOwner(extraid, i) && VehicleInfo[i][vTimer] >= 0)
					    {
							KillTimer(VehicleInfo[i][vTimer]);
							VehicleInfo[i][vTimer] = -1;
					    }
					}

					// Just in case.
					//SetPlayerSpecialTag(extraid, TAG_NORMAL);
					for(new i = 0; i < 3; i++) {
						TextDrawShowForPlayer(extraid, LogoTD[i]);
					}

				    if(pData[extraid][pAdminDuty])
				    {
				    	pData[extraid][pAdminDuty] = 0;
				    	SetPlayerName(extraid, pData[extraid][pUsername]);

				        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s is no longer on admin duty.", GetRPName(extraid));
				        SCM(extraid, COLOR_WHITE, "** You are no longer on admin duty. Your account's statistics have been preserved.");
				    }
				    else
				    {
					    if(pData[extraid][pAdmin])
					    {
					        SAM(COLOR_TEAL, ""WHITE"%s "TEAL"has logged in as a "WHITE"%s"TEAL".", GetRPName(extraid), GetAdminRank(extraid));
					    }
					    if(pData[extraid][pGang] >= 0)
					    {
							SendGangMessage(pData[extraid][pGang], COLOR_TEAL, "(( "WHITE"%s %s"TEAL" has logged in. ))", GangRanks[pData[extraid][pGang]][pData[extraid][pGangRank]], GetRPName(extraid));
						}
						if(pData[extraid][pFaction] >= 0)
					    {
							SendFactionMessage(pData[extraid][pFaction], COLOR_TEAL, "(( "WHITE"%s %s"TEAL" has logged in. ))", FactionRanks[pData[extraid][pFaction]][pData[extraid][pFactionRank]], GetRPName(extraid));
						}

					    //format(string, sizeof(string), "Welcome to "SERVER_NAME", %s.", GetRPName(extraid));
						//Dyuze(extraid, "Notice", string);

        	        	if(pData[extraid][pAdmin] > 0) {
							SM(extraid, COLOR_WHITE, "Welcome back to "SVRCLR""SERVER_NAME""WHITE". You have logged in as a level %i %s.", pData[extraid][pAdmin], GetAdminRank(extraid));
						} else if(pData[extraid][pHelper] > 0) {
						    SM(extraid, COLOR_WHITE, "Welcome back to "SVRCLR""SERVER_NAME""WHITE". You have logged in as a %s.", GetHelperRank(extraid));
						} else if(pData[extraid][pDonator] > 0) {
						    SM(extraid, COLOR_WHITE, "Welcome back to "SVRCLR""SERVER_NAME""WHITE". You have logged in as a %s Donator.", GetDonatorRank(pData[extraid][pDonator]));
        	        	} else {
        	        	    SM(extraid, COLOR_WHITE, "Welcome back to "SVRCLR""SERVER_NAME""WHITE". You have logged in as a level %i player.", pData[extraid][pLevel]);
        	        	}

					    StopAudioStreamForPlayer(extraid);
					}

					if(pData[extraid][pFaction] >= 0 && FactionInfo[pData[extraid][pFaction]][fType] == FACTION_NONE)
					{
			         	ResetPlayerWeaponsEx(extraid);
				        SM(extraid, COLOR_LIGHTRED, "You were either kicked from the faction while offline or it was deleted.");
			            SetPlayerSkin(extraid, 230);

				        pData[extraid][pFaction] = -1;
				        pData[extraid][pFactionRank] = 0;
				        pData[extraid][pDivision] = -1;
				        pData[extraid][pDuty] = 0;

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE uid = %i", pData[extraid][pID]);
					    mysql_tquery(connectionID, queryBuffer);
					}
					if(pData[extraid][pGang] >= 0 && !GangInfo[pData[extraid][pGang]][gSetup])
					{
					    SCM(extraid, COLOR_LIGHTRED, "You have either been kicked from the gang while offline or it was deleted.");
					    pData[extraid][pGang] = -1;
					    pData[extraid][pGangRank] = 0;

					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", pData[extraid][pID]);
					    mysql_tquery(connectionID, queryBuffer);
					}
				}

				if(pData[extraid][pBrokenLeg]) 
				{
					SCM(extraid, COLOR_ERROR, "(( You have a broken leg the last time you logged out. ))");
				}
				if(pData[extraid][pBrokenHP] > 0 && pData[extraid][pInjured] > 0) 
				{
					SCM(extraid, COLOR_ERROR, "(( You have been injured the last time you logged out. ))");
					SetTimerEx("autohp", 1000, false, "i", extraid);
				}
				if(pData[extraid][pAntiFall] > 0 ) 
				{
					SCM(extraid, COLOR_ERROR, "(( You are in the demolition last time you logged out to prevent fall. ))");
					SetTimerEx("autominer", 1000, false, "i", extraid);
				}
				if(pData[extraid][pApproved]) 
				{
					SetPlayerToSpawn(extraid);
				} 
				
			}
			if(pData[extraid][pSetup])
			{
			    SetPlayerInterior(extraid, 0);
				SetPlayerVirtualWorld(extraid, 0);

				ShowDialogToPlayer(extraid, DIALOG_AGE);

			}
	    }
	    case THREAD_COUNT_FLAGS:
	    {
	        if(rows)
	        {
				SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] has %i pending flags. (/listflags %i)", GetRPName(extraid), extraid, rows, extraid);
			}
		}
		case THREAD_DMVRELEASE:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_ERROR, "[ERROR]{ffffff} You do not have any impounded vehicles.");
		    }
		    else
		    {
		        new string[1024];

		        string = "#\tModel\tTickets";

		        for(new i = 0; i < rows; i ++)
					format(string, sizeof(string), "%s\n%i\t%s\t{ff0000}%s{ffffff}", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], FormatNumber(cache_get_field_content_int(i, "tickets")));

				ShowPlayerDialog(extraid, DIALOG_DMVRELEASE, DIALOG_STYLE_TABLIST_HEADERS, "Impound Department", string, "Release", "Cancel");
		    }
		}
		case THREAD_BUYPARTS:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_ERROR, "[ERROR]{ffffff} You do not have broken vehicles.");
		    }
		    else
		    {
		        new string[1024];

		        string = "#\tModel";

		        for(new i = 0; i < rows; i ++)
					format(string, sizeof(string), "%s\n%i\t%s", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400]);

				ShowPlayerDialog(extraid, DIALOG_BUYPARTS, DIALOG_STYLE_TABLIST_HEADERS, "Broken Vehicles", string, "Choose", "Cancel");
		    }
		}
		case THREAD_TRACE_IP:
		{
		    if(rows)
		    {
		        new username[24], date[24];

		        SM(extraid, COLOR_RED, "%i Results Found", rows);

		        for(new i = 0; i < rows; i ++)
		        {
		            cache_get_field_content(i, "username", username);
		            cache_get_field_content(i, "lastlogin", date);
		            SM(extraid, COLOR_GREY2, "Name: %s - Last Seen: %s", username, date);
		        }
		    }
		    else
		    {
		        SCM(extraid, COLOR_SYNTAX, "This IP address is not associated with any accounts.");
			}
		}
		case THREAD_TRACE_IPX:
		{
		    if(rows)
		    {
		        //new string[144];
				new string[528];
				format(string, sizeof(string), "[BOT] {FFFFFF}(ID: %i) %s joined using {ffe101}%s{FFFFFF} [{33AA33}IP:{ff0000} %s{FFFFFF}] with %i acc in the ip", extraid, ReturnName(extraid), IsPlayerAndroid(extraid) ? ("Mobile") : ("PC"), GetPlayerIP(extraid), rows );
				SendAdminMessage(COLOR_TEAL, string, 2);
		    }
		    else
		    {
		        new string[528];
				format(string, sizeof(string), "[BOT] {FFFFFF}(ID: %i) %s joined using {ffe101}%s{FFFFFF} [{33AA33}IP:{ff0000} %s{FFFFFF}] with 1 acc in the ip", extraid, ReturnName(extraid), IsPlayerAndroid(extraid) ? ("Mobile") : ("PC"), GetPlayerIP(extraid));
				SendAdminMessage(COLOR_TEAL, string, 2);
				
			}
		}
		case THREAD_LIST_CHANGES:
		{
		    new text[128];

		    SCM(extraid, SERVER_COLOR, ""REVISION"");

		    for(new i = 0; i < rows; i ++)
			{
			    cache_get_field_content(i, "text", text);
			    SM(extraid, COLOR_GREY1, "%s", text);
			}
		}
		case THREAD_LIST_HELPERS:
		{
		    new username[MAX_PLAYER_NAME], lastlogin[24];

		    SCM(extraid, SERVER_COLOR, "Helper Roster:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", lastlogin);

		        switch(cache_get_field_content_int(i, "helperlevel"))
				{
					case 1: SM(extraid, COLOR_AQUA, "[H1]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 2: SM(extraid, COLOR_AQUA, "[H2]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 3: SM(extraid, COLOR_AQUA, "[H3]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 4: SM(extraid, COLOR_AQUA, "[H4]"WHITE" %s - Last Seen: %s", username, lastlogin);
				}
		    }
		}
		case THREAD_LIST_ADMINS:
		{
		    new username[MAX_PLAYER_NAME], lastlogin[24];

		    SCM(extraid, SERVER_COLOR, "Admin Roster:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", lastlogin);

		        switch(cache_get_field_content_int(i, "adminlevel"))
				{
					case 1: SM(extraid, SERVER_COLOR, "[A1]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 2: SM(extraid, SERVER_COLOR, "[A2]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 3: SM(extraid, SERVER_COLOR, "[A3]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 4: SM(extraid, SERVER_COLOR, "[A4]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 5: SM(extraid, SERVER_COLOR, "[A5]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 6: SM(extraid, SERVER_COLOR, "[A6]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 7: SM(extraid, SERVER_COLOR, "[A7]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 8: SM(extraid, SERVER_COLOR, "[A8]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 9: SM(extraid, SERVER_COLOR, "[A9]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 10: SM(extraid, SERVER_COLOR, "[A10]"WHITE" %s - Last Seen: %s", username, lastlogin);
					case 11: SM(extraid, SERVER_COLOR, "[A11]"WHITE" %s - Last Seen: %s", username, lastlogin);
					
				}
		    }
		}
		case THREAD_UPDATE_LANDLABELS:
		{
		    new landid = extraid;
			new string[128];
			if(IsValidDynamic3DTextLabel(LandInfo[landid][lText]))
			{
				if(LandInfo[landid][lOwnerID] > 0)
				{
					format(string, sizeof(string), "This land is owned by %s\n{FFD700}Level: %i/3\n{FFFFFF}%i/%i Objects", LandInfo[landid][lOwner], LandInfo[landid][lLevel], cache_get_row_int(0, 0), GetLandObjectCapacity(LandInfo[landid][lLevel]));
            		UpdateDynamic3DTextLabelText(LandInfo[landid][lText], COLOR_GREY, string);
				}
				else
				{
				    format(string, sizeof(string), "This land is for sale by the state\n{00AA00}Price: %s{FFFFFF}\n{FFD700}Level: %i/3\n{FFFFFF}%i/%i Objects", FormatNumber(LandInfo[landid][lPrice]), LandInfo[landid][lLevel], cache_get_row_int(0, 0), GetLandObjectCapacity(LandInfo[landid][lLevel]));
				    UpdateDynamic3DTextLabelText(LandInfo[landid][lText], COLOR_GREY, string);
				}
			}
		}
		case THREAD_LOAD_LOCATIONS:
		{
		    for(new i = 0; i < rows && i < MAX_LOCATIONS; i ++)
		    {
      			cache_get_field_content(i, "name", LocationInfo[i][locName], connectionID, 64);

		        LocationInfo[i][locID] = cache_get_field_content_int(i, "id");
		        LocationInfo[i][locPosX] = cache_get_field_content_float(i, "pos_x");
		        LocationInfo[i][locPosY] = cache_get_field_content_float(i, "pos_y");
			   	LocationInfo[i][locPosZ] = cache_get_field_content_float(i, "pos_z");
				LocationInfo[i][locExists] = true;
			}
			printf("[Script] %i locations loaded", (rows < MAX_LOCATIONS) ? (rows) : (MAX_LOCATIONS));
		}
		case THREAD_LOAD_LOCKERS:
		{
		    for(new i = 0; i < rows && i < MAX_LOCKERS; i ++)
		    {
		        LockerInfo[i][lID] = cache_get_field_content_int(i, "id");
		        LockerInfo[i][lFaction] = cache_get_field_content_int(i, "factionid");
		        LockerInfo[i][lPosX] = cache_get_field_content_float(i, "pos_x");
		        LockerInfo[i][lPosY] = cache_get_field_content_float(i, "pos_y");
		        LockerInfo[i][lPosZ] = cache_get_field_content_float(i, "pos_z");
		        LockerInfo[i][lInterior] = cache_get_field_content_int(i, "interior");
		        LockerInfo[i][lWorld] = cache_get_field_content_int(i, "world");
				LockerInfo[i][lIcon] = cache_get_field_content_int(i, "iconid");
				LockerInfo[i][lLabel] = cache_get_field_content_int(i, "label");

				LockerInfo[i][locKevlar][0] = cache_get_field_content_int(i, "weapon_kevlar");
			    LockerInfo[i][locMedKit][0] = cache_get_field_content_int(i, "weapon_medkit");
			    LockerInfo[i][locNitestick][0] = cache_get_field_content_int(i, "weapon_nitestick");
			    LockerInfo[i][locMace][0] = cache_get_field_content_int(i, "weapon_mace");
			    LockerInfo[i][locDeagle][0] = cache_get_field_content_int(i, "weapon_deagle");
			    LockerInfo[i][locShotgun][0] = cache_get_field_content_int(i, "weapon_shotgun");
			    LockerInfo[i][locMP5][0] = cache_get_field_content_int(i, "weapon_mp5");
			    LockerInfo[i][locM4][0] = cache_get_field_content_int(i, "weapon_m4");
			    LockerInfo[i][locSpas12][0] = cache_get_field_content_int(i, "weapon_spas12");
			    LockerInfo[i][locSniper][0] = cache_get_field_content_int(i, "weapon_sniper");
			    LockerInfo[i][locCamera][0] = cache_get_field_content_int(i, "weapon_camera");
			    LockerInfo[i][locFireExt][0] = cache_get_field_content_int(i, "weapon_fire_extinguisher");
			    LockerInfo[i][locPainKillers][0] = cache_get_field_content_int(i, "weapon_painkillers");

                LockerInfo[i][locKevlar][1] = cache_get_field_content_int(i, "price_kevlar");
			    LockerInfo[i][locMedKit][1] = cache_get_field_content_int(i, "price_medkit");
			    LockerInfo[i][locNitestick][1] = cache_get_field_content_int(i, "price_nitestick");
			    LockerInfo[i][locMace][1] = cache_get_field_content_int(i, "price_mace");
			    LockerInfo[i][locDeagle][1] = cache_get_field_content_int(i, "price_deagle");
			    LockerInfo[i][locShotgun][1] = cache_get_field_content_int(i, "price_shotgun");
			    LockerInfo[i][locMP5][1] = cache_get_field_content_int(i, "price_mp5");
			    LockerInfo[i][locM4][1] = cache_get_field_content_int(i, "price_m4");
			    LockerInfo[i][locSpas12][1] = cache_get_field_content_int(i, "price_spas12");
			    LockerInfo[i][locSniper][1] = cache_get_field_content_int(i, "price_sniper");
			    LockerInfo[i][locCamera][1] = cache_get_field_content_int(i, "price_camera");
			    LockerInfo[i][locFireExt][1] = cache_get_field_content_int(i, "price_fire_extinguisher");
			    LockerInfo[i][locPainKillers][1] = cache_get_field_content_int(i, "price_painkillers");

		        LockerInfo[i][lText] = Text3D:INVALID_3DTEXT_ID;
		        LockerInfo[i][lPickup] = -1;
		        LockerInfo[i][lExists] = 1;

		        ReloadLocker(i);
		    }
		}
		case THREAD_LOAD_HOUSES:
		{
		    for(new i = 0; i < rows && i < MAX_HOUSES; i ++)
		    {
		        cache_get_field_content(i, "owner", HouseInfo[i][hOwner], connectionID, MAX_PLAYER_NAME);

		        HouseInfo[i][hID] = cache_get_field_content_int(i, "id");
		        HouseInfo[i][hOwnerID] = cache_get_field_content_int(i, "ownerid");
		        HouseInfo[i][hType] = cache_get_field_content_int(i, "type");
		        HouseInfo[i][hPrice] = cache_get_field_content_int(i, "price");
		        HouseInfo[i][hRentPrice] = cache_get_field_content_int(i, "rentprice");
		        HouseInfo[i][hLevel] = cache_get_field_content_int(i, "level");
		        HouseInfo[i][hLocked] = cache_get_field_content_int(i, "locked");
		        HouseInfo[i][hTimestamp] = cache_get_field_content_int(i, "timestamp");
		        HouseInfo[i][hPosX] = cache_get_field_content_float(i, "pos_x");
		        HouseInfo[i][hPosY] = cache_get_field_content_float(i, "pos_y");
		        HouseInfo[i][hPosZ] = cache_get_field_content_float(i, "pos_z");
		        HouseInfo[i][hPosA] = cache_get_field_content_float(i, "pos_a");
                HouseInfo[i][hIntX] = cache_get_field_content_float(i, "int_x");
		        HouseInfo[i][hIntY] = cache_get_field_content_float(i, "int_y");
		        HouseInfo[i][hIntZ] = cache_get_field_content_float(i, "int_z");
		        HouseInfo[i][hIntA] = cache_get_field_content_float(i, "int_a");
		        HouseInfo[i][hInterior] = cache_get_field_content_int(i, "interior");
		        HouseInfo[i][hWorld] = cache_get_field_content_int(i, "world");
		        HouseInfo[i][hOutsideInt] = cache_get_field_content_int(i, "outsideint");
		        HouseInfo[i][hOutsideVW] = cache_get_field_content_int(i, "outsidevw");
		        HouseInfo[i][hCash] = cache_get_field_content_int(i, "cash");
		        HouseInfo[i][hMaterials] = cache_get_field_content_int(i, "materials");
                HouseInfo[i][hPot] = cache_get_field_content_int(i, "pot");
                HouseInfo[i][hCrack] = cache_get_field_content_int(i, "crack");
                HouseInfo[i][hMeth] = cache_get_field_content_int(i, "meth");
                HouseInfo[i][hPainkillers] = cache_get_field_content_int(i, "painkillers");
                HouseInfo[i][hWeapons][0] = cache_get_field_content_int(i, "weapon_1");
                HouseInfo[i][hWeapons][1] = cache_get_field_content_int(i, "weapon_2");
                HouseInfo[i][hWeapons][2] = cache_get_field_content_int(i, "weapon_3");
                HouseInfo[i][hWeapons][3] = cache_get_field_content_int(i, "weapon_4");
                HouseInfo[i][hWeapons][4] = cache_get_field_content_int(i, "weapon_5");
                HouseInfo[i][hWeapons][5] = cache_get_field_content_int(i, "weapon_6");
                HouseInfo[i][hWeapons][6] = cache_get_field_content_int(i, "weapon_7");
                HouseInfo[i][hWeapons][7] = cache_get_field_content_int(i, "weapon_8");
                HouseInfo[i][hWeapons][8] = cache_get_field_content_int(i, "weapon_9");
                HouseInfo[i][hWeapons][9] = cache_get_field_content_int(i, "weapon_10");
                HouseInfo[i][hHPAmmo] = cache_get_field_content_int(i, "hpammo");
                HouseInfo[i][hPoisonAmmo] = cache_get_field_content_int(i, "poisonammo");
                HouseInfo[i][hFMJAmmo] = cache_get_field_content_int(i, "fmjammo");
                HouseInfo[i][hText] = Text3D:INVALID_3DTEXT_ID;
                HouseInfo[i][hPickup] = -1;
                HouseInfo[i][hLabels] = 0;
                HouseInfo[i][hExists] = 1;
				HouseInfo[i][hRobbed] = cache_get_field_content_int(i, "robbed");
				HouseInfo[i][hRobbing] = cache_get_field_content_int(i, "robbing");
                ReloadHouse(i);
		    }

		    printf("[Script] %i houses loaded.", rows);
		}
		case THREAD_LOAD_SAFEZONE:
		{
		    for(new i = 0; i<rows && i<MAX_SAFEZONE; i ++)
			{
				new zoneid = cache_get_field_content_int(i, "id");

		        SafeZoneInfo[zoneid][SZExists] = 1;
				SafeZoneInfo[zoneid][SMinX] = cache_get_field_content_float(i, "minx");
				SafeZoneInfo[zoneid][SMinY] = cache_get_field_content_float(i, "miny");
				SafeZoneInfo[zoneid][SMaxX] = cache_get_field_content_float(i, "maxx");
				SafeZoneInfo[zoneid][SMaxY] = cache_get_field_content_float(i, "maxy");
				SafeZoneInfo[zoneid][SHeight] = cache_get_field_content_float(i, "height");
		        SafeZoneInfo[zoneid][SzoneInt] = cache_get_field_content_int(i, "interior");
		        SafeZoneInfo[zoneid][SzoneVW] = cache_get_field_content_int(i, "view");
				SafeZoneInfo[zoneid][SArea] = -1;
	    		SafeZoneInfo[zoneid][Szone] = -1;

		        ReloadSafeZone(zoneid);
		    }
			printf("[Script] %i SafeZone loaded.", rows);
		}
		case THREAD_LIST_TENANTS:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "There is nobody currently renting at your home.");
			}
			else
			{
			    new username[MAX_PLAYER_NAME], date[24];

				SCM(extraid, SERVER_COLOR, "List of Tenants");

			    for(new i = 0; i < rows; i ++)
			    {
			        cache_get_field_content(i, "username", username);
			        cache_get_field_content(i, "lastlogin", date);

			        SM(extraid, COLOR_GREY2, "Name: %s - Last Seen: %s", username, date);
				}
			}
		}
		case THREAD_LOAD_FURNITURE:
		{
		    for(new i = 0; i < rows; i ++)
		    {
		        new objectid = CreateDynamicObject(cache_get_field_content_int(i, "modelid"), cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"), cache_get_field_content_float(i, "rot_x"), cache_get_field_content_float(i, "rot_y"), cache_get_field_content_float(i, "rot_z"), cache_get_field_content_int(i, "world"), cache_get_field_content_int(i, "interior"));

				Streamer_SetExtraInt(objectid, E_OBJECT_TYPE, E_OBJECT_FURNITURE);
				Streamer_SetExtraInt(objectid, E_OBJECT_INDEX_ID, cache_get_field_content_int(i, "id"));
				Streamer_SetExtraInt(objectid, E_OBJECT_EXTRA_ID, cache_get_field_content_int(i, "houseid"));

				if(extraid)
				{
				    new
				        string[48];

				    cache_get_field_content(i, "name", string);

					format(string, sizeof(string), "[%i] - %s", objectid, string);
					Streamer_SetExtraInt(objectid, E_OBJECT_3DTEXT_ID, _:CreateDynamic3DTextLabel(string, COLOR_GREY2, cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"), 10.0, .worldid = cache_get_field_content_int(i, "world"), .interiorid = cache_get_field_content_int(i, "interior")));
				}
			}
		}
		case THREAD_LOAD_GARAGES:
		{
		    for(new i = 0; i < rows && i < MAX_GARAGES; i ++)
		    {
		        cache_get_field_content(i, "owner", GarageInfo[i][gOwner], connectionID, MAX_PLAYER_NAME);

		        GarageInfo[i][gID] = cache_get_field_content_int(i, "id");
		        GarageInfo[i][gOwnerID] = cache_get_field_content_int(i, "ownerid");
		        GarageInfo[i][gType] = cache_get_field_content_int(i, "type");
		        GarageInfo[i][gPrice] = cache_get_field_content_int(i, "price");
		        GarageInfo[i][gLocked] = cache_get_field_content_int(i, "locked");
		        GarageInfo[i][gTimestamp] = cache_get_field_content_int(i, "timestamp");
		        GarageInfo[i][gPosX] = cache_get_field_content_float(i, "pos_x");
		        GarageInfo[i][gPosY] = cache_get_field_content_float(i, "pos_y");
		        GarageInfo[i][gPosZ] = cache_get_field_content_float(i, "pos_z");
		        GarageInfo[i][gPosA] = cache_get_field_content_float(i, "pos_a");
		        GarageInfo[i][gExitX] = cache_get_field_content_float(i, "exit_x");
		        GarageInfo[i][gExitY] = cache_get_field_content_float(i, "exit_y");
		        GarageInfo[i][gExitZ] = cache_get_field_content_float(i, "exit_z");
		        GarageInfo[i][gExitA] = cache_get_field_content_float(i, "exit_a");
		        GarageInfo[i][gWorld] = cache_get_field_content_int(i, "world");
		        GarageInfo[i][gText] = Text3D:INVALID_3DTEXT_ID;
		        GarageInfo[i][gPickup] = -1;
		        GarageInfo[i][gExists] = 1;

				ReloadGarage(i);
		    }

		    printf("[Script] %i garages loaded.", rows);
		}
        case THREAD_LOAD_BUSINESSES:
		{
		    for(new i = 0; i < rows && i < MAX_BUSINESSES; i ++)
		    {
		        cache_get_field_content(i, "owner", BusinessInfo[i][bOwner], connectionID, MAX_PLAYER_NAME);

		        BusinessInfo[i][bID] = cache_get_field_content_int(i, "id");
		        BusinessInfo[i][bOwnerID] = cache_get_field_content_int(i, "ownerid");
		        cache_get_field_content(i, "biz_desc", BusinessInfo[i][bDescription]);
		        BusinessInfo[i][bType] = cache_get_field_content_int(i, "type");
		        BusinessInfo[i][bPrice] = cache_get_field_content_int(i, "price");
		        BusinessInfo[i][bEntryFee] = cache_get_field_content_int(i, "entryfee");
		        BusinessInfo[i][bLocked] = cache_get_field_content_int(i, "locked");
		        BusinessInfo[i][bTimestamp] = cache_get_field_content_int(i, "timestamp");
		        BusinessInfo[i][bPosX] = cache_get_field_content_float(i, "pos_x");
		        BusinessInfo[i][bPosY] = cache_get_field_content_float(i, "pos_y");
		        BusinessInfo[i][bPosZ] = cache_get_field_content_float(i, "pos_z");
		        BusinessInfo[i][bPosA] = cache_get_field_content_float(i, "pos_a");
                BusinessInfo[i][bIntX] = cache_get_field_content_float(i, "int_x");
		        BusinessInfo[i][bIntY] = cache_get_field_content_float(i, "int_y");
		        BusinessInfo[i][bIntZ] = cache_get_field_content_float(i, "int_z");
		        BusinessInfo[i][bIntA] = cache_get_field_content_float(i, "int_a");
		        BusinessInfo[i][bInterior] = cache_get_field_content_int(i, "interior");
		        BusinessInfo[i][bWorld] = cache_get_field_content_int(i, "world");
		        BusinessInfo[i][bOutsideInt] = cache_get_field_content_int(i, "outsideint");
		        BusinessInfo[i][bOutsideVW] = cache_get_field_content_int(i, "outsidevw");
		        BusinessInfo[i][bCash] = cache_get_field_content_int(i, "cash");
                BusinessInfo[i][bProducts] = cache_get_field_content_int(i, "products");
                BusinessInfo[i][bText] = Text3D:INVALID_3DTEXT_ID;
                BusinessInfo[i][bPickup] = -1;
                BusinessInfo[i][bMapIcon] = -1;
                BusinessInfo[i][bExists] = 1;
          		cache_get_field_content(i, "name", BusinessInfo[i][bName], connectionID, 64);
                cache_get_field_content(i, "message", BusinessInfo[i][bMessage], connectionID, 128);
				BusinessInfo[i][bRobbed] = cache_get_field_content_int(i, "robbed");
				BusinessInfo[i][bRobbing] = cache_get_field_content_int(i, "robbing");

				new str[64];
				for (new j = 0; j < 25; j ++)
				{
					format(str, 32, "prices%d", j);
					BusinessInfo[i][bPrices][j] = cache_get_field_content_int(i, str);
				}

                ReloadBusiness(i);
		    }

		    printf("[Script] %i businesses loaded.", rows);
		}
		case THREAD_LOAD_ENTRANCES:
		{
		    for(new i = 0; i < rows && i < MAX_ENTRANCES; i ++)
		    {
		        cache_get_field_content(i, "owner", EntranceInfo[i][eOwner], connectionID, MAX_PLAYER_NAME);
		        cache_get_field_content(i, "name", EntranceInfo[i][eName], connectionID, 40);
		        cache_get_field_content(i, "password", EntranceInfo[i][ePassword], connectionID, 64);

				EntranceInfo[i][eID] = cache_get_field_content_int(i, "id");
				EntranceInfo[i][eOwnerID] = cache_get_field_content_int(i, "ownerid");
				EntranceInfo[i][eIcon] = cache_get_field_content_int(i, "iconid");
                EntranceInfo[i][eLocked] = cache_get_field_content_int(i, "locked");
                EntranceInfo[i][eRadius] = cache_get_field_content_float(i, "radius");
                EntranceInfo[i][ePosX] = cache_get_field_content_float(i, "pos_x");
                EntranceInfo[i][ePosY] = cache_get_field_content_float(i, "pos_y");
                EntranceInfo[i][ePosZ] = cache_get_field_content_float(i, "pos_z");
                EntranceInfo[i][ePosA] = cache_get_field_content_float(i, "pos_a");
                EntranceInfo[i][eIntX] = cache_get_field_content_float(i, "int_x");
                EntranceInfo[i][eIntY] = cache_get_field_content_float(i, "int_y");
                EntranceInfo[i][eIntZ] = cache_get_field_content_float(i, "int_z");
                EntranceInfo[i][eIntA] = cache_get_field_content_float(i, "int_a");
                EntranceInfo[i][eInterior] = cache_get_field_content_int(i, "interior");
                EntranceInfo[i][eWorld] = cache_get_field_content_int(i, "world");
                EntranceInfo[i][eOutsideInt] = cache_get_field_content_int(i, "outsideint");
                EntranceInfo[i][eOutsideVW] = cache_get_field_content_int(i, "outsidevw");
                EntranceInfo[i][eAdminLevel] = cache_get_field_content_int(i, "adminlevel");
                EntranceInfo[i][eFactionType] = cache_get_field_content_int(i, "factiontype");
                EntranceInfo[i][eVIP] = cache_get_field_content_int(i, "vip");
                EntranceInfo[i][eVehicles] = cache_get_field_content_int(i, "vehicles");
                EntranceInfo[i][eFreeze] = cache_get_field_content_int(i, "freeze");
                EntranceInfo[i][eLabel] = cache_get_field_content_int(i, "label");
                EntranceInfo[i][eMapIcon] = cache_get_field_content_int(i, "mapicon");
                EntranceInfo[i][eText] = Text3D:INVALID_3DTEXT_ID;
                EntranceInfo[i][ePickup] = -1;
                EntranceInfo[i][eExists] = 1;
                EntranceInfo[i][eMapIconID] = -1;

                ReloadEntrance(i);
			}

			printf("[Script] %i entrances loaded.", rows);
		}
		case THREAD_LOAD_FACTIONS:
		{
		    for(new i = 0; i < rows && i < MAX_FACTIONS; i ++)
		    {
		        new factionid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", FactionInfo[factionid][fName], connectionID, 48);
		        cache_get_field_content(i, "shortname", FactionInfo[factionid][fShortName], connectionID, 24);
		        cache_get_field_content(i, "leader", FactionInfo[factionid][fLeader], connectionID, MAX_PLAYER_NAME);

		        FactionInfo[factionid][fType] = cache_get_field_content_int(i, "type");
		        FactionInfo[factionid][fColor] = cache_get_field_content_int(i, "color");
		        FactionInfo[factionid][fRankCount] = cache_get_field_content_int(i, "rankcount");
		        FactionInfo[factionid][fTurfTokens] = cache_get_field_content_int(i, "turftokens");
                FactionInfo[factionid][fText] = Text3D:INVALID_3DTEXT_ID;
                FactionInfo[factionid][fPickup] = -1;
                if(FactionInfo[factionid][fType] != FACTION_NONE)
			    {
			    	factionstream[factionid] = SvCreateGStream(0xFFFF00FF, "Faction Radio");
			    }
		    }

		    printf("[Script] %i factions loaded.", rows);
		}
		case THREAD_LOAD_FACTIONRANKS:
		{
		    for(new i = 0; i < MAX_FACTIONS; i ++)
	    	{
		        for(new r = 0; r < MAX_FACTION_RANKS; r ++)
		        {
		            strcpy(FactionRanks[i][r], "Unspecified", 32);
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", FactionRanks[cache_get_field_content_int(i, "id")][cache_get_field_content_int(i, "rank")], connectionID, 32);
      		}
		}
        case THREAD_LOAD_FACTIONSKINS:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				FactionInfo[cache_get_field_content_int(i, "id")][fSkins][cache_get_field_content_int(i, "slot")] = cache_get_field_content_int(i, "skinid");
		    }
		}
		case THREAD_LOAD_FACTIONPAY:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				FactionInfo[cache_get_field_content_int(i, "id")][fPaycheck][cache_get_field_content_int(i, "rank")] = cache_get_field_content_int(i, "amount");
		    }
		}
		case THREAD_LOAD_DIVISIONS:
		{
		    for(new i = 0; i < MAX_FACTIONS; i ++)
	    	{
		        for(new r = 0; r < MAX_FACTION_DIVISIONS; r ++)
		        {
		            FactionDivisions[i][r][0] = 0;
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", FactionDivisions[cache_get_field_content_int(i, "id")][cache_get_field_content_int(i, "divisionid")], connectionID, 32);
      		}
		}
		case THREAD_LOAD_LANDS:
		{
		    for(new i = 0; i < rows && i < MAX_LANDS; i ++)
		    {
		        cache_get_field_content(i, "owner", LandInfo[i][lOwner], connectionID, MAX_PLAYER_NAME);

		        LandInfo[i][lID] = cache_get_field_content_int(i, "id");
		        LandInfo[i][lOwnerID] = cache_get_field_content_int(i, "ownerid");
		        LandInfo[i][lLevel] = cache_get_field_content_int(i, "level");
		        LandInfo[i][lPrice] = cache_get_field_content_int(i, "price");
		        LandInfo[i][lMinX] = cache_get_field_content_float(i, "min_x");
		        LandInfo[i][lMinY] = cache_get_field_content_float(i, "min_y");
		        LandInfo[i][lMaxX] = cache_get_field_content_float(i, "max_x");
		        LandInfo[i][lMaxY] = cache_get_field_content_float(i, "max_y");
		        LandInfo[i][lHeight] = cache_get_field_content_float(i, "height");
		        LandInfo[i][lX] = cache_get_field_content_float(i, "lx");
		        LandInfo[i][lY] = cache_get_field_content_float(i, "ly");
		        LandInfo[i][lZ] = cache_get_field_content_float(i, "lz");
		        LandInfo[i][lGangZone] = -1;
		        LandInfo[i][lArea] = -1;
		        LandInfo[i][lLabels] = 0;
		        LandInfo[i][lExists] = 1;
				LandInfo[i][lPickup] = -1;

		        ReloadLand(i);
			}

			printf("[Script] %i lands loaded.", rows);
		}
		case THREAD_LOAD_LANDOBJECTS:
		{
		    for(new i = 0; i < rows; i ++)
		    {
		        new objectid = CreateDynamicObject(cache_get_field_content_int(i, "modelid"), cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"), cache_get_field_content_float(i, "rot_x"), cache_get_field_content_float(i, "rot_y"), cache_get_field_content_float(i, "rot_z"));

				Streamer_SetExtraInt(objectid, E_OBJECT_TYPE, E_OBJECT_LAND);
				Streamer_SetExtraInt(objectid, E_OBJECT_INDEX_ID, cache_get_field_content_int(i, "id"));
				Streamer_SetExtraInt(objectid, E_OBJECT_EXTRA_ID, cache_get_field_content_int(i, "landid"));
				Streamer_SetExtraFloat(objectid, E_OBJECT_X, cache_get_field_content_float(i, "pos_x"));
                Streamer_SetExtraFloat(objectid, E_OBJECT_Y, cache_get_field_content_float(i, "pos_y"));
                Streamer_SetExtraFloat(objectid, E_OBJECT_Z, cache_get_field_content_float(i, "pos_z"));

				if(extraid)
				{
				    new
				        landstring[48];

				    cache_get_field_content(i, "name", landstring);

					format(landstring, sizeof(landstring), "[%i] - %s", objectid, landstring);
					Streamer_SetExtraInt(objectid, E_OBJECT_3DTEXT_ID, _:CreateDynamic3DTextLabel(landstring, COLOR_GREY2, cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"), 10.0));
				}
			}
		}
		case THREAD_LOAD_GANGS:
		{
		    for(new i = 0; i < rows && i < MAX_GANGS; i ++)
		    {
		        new gangid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", GangInfo[gangid][gName], connectionID, 32);
		        cache_get_field_content(i, "motd", GangInfo[gangid][gMOTD], connectionID, 128);
		        cache_get_field_content(i, "leader", GangInfo[gangid][gLeader], connectionID, MAX_PLAYER_NAME);

		        GangInfo[gangid][gColor] = cache_get_field_content_int(i, "color");
		        GangInfo[gangid][gStrikes] = cache_get_field_content_int(i, "strikes");
		        GangInfo[gangid][gLevel] = cache_get_field_content_int(i, "level");
		        GangInfo[gangid][gPoints] = cache_get_field_content_int(i, "points");
		        GangInfo[gangid][gTurfTokens] = cache_get_field_content_int(i, "turftokens");
		        GangInfo[gangid][gStashX] = cache_get_field_content_float(i, "stash_x");
		        GangInfo[gangid][gStashY] = cache_get_field_content_float(i, "stash_y");
		        GangInfo[gangid][gStashZ] = cache_get_field_content_float(i, "stash_z");
		        GangInfo[gangid][gStashInterior] = cache_get_field_content_int(i, "stashinterior");
		        GangInfo[gangid][gStashWorld] = cache_get_field_content_int(i, "stashworld");
		        GangInfo[gangid][gCash] = cache_get_field_content_int(i, "cash");
		        GangInfo[gangid][gMaterials] = cache_get_field_content_int(i, "materials");
		        GangInfo[gangid][gPot] = cache_get_field_content_int(i, "pot");
		        GangInfo[gangid][gCrack] = cache_get_field_content_int(i, "crack");
		        GangInfo[gangid][gMeth] = cache_get_field_content_int(i, "meth");
		        GangInfo[gangid][gPainkillers] = cache_get_field_content_int(i, "painkillers");
				GangInfo[gangid][gHPAmmo] = cache_get_field_content_int(i, "hpammo");
				GangInfo[gangid][gPoisonAmmo] = cache_get_field_content_int(i, "poisonammo");
				GangInfo[gangid][gFMJAmmo] = cache_get_field_content_int(i, "fmjammo");
				GangInfo[gangid][gAlliance] = cache_get_field_content_int (i, "alliance");

				// Gang stash weapons
				GangInfo[gangid][gWeapons][GANGWEAPON_VEST] = cache_get_field_content_int(i, "weapon_vest");
		        GangInfo[gangid][gWeapons][GANGWEAPON_9MM] = cache_get_field_content_int(i, "weapon_9mm");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SDPISTOL] = cache_get_field_content_int(i, "weapon_sdpistol");
		        GangInfo[gangid][gWeapons][GANGWEAPON_DEAGLE] = cache_get_field_content_int(i, "weapon_deagle");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SHOTGUN] = cache_get_field_content_int(i, "weapon_shotgun");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SPAS12] = cache_get_field_content_int(i, "weapon_spas12");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SAWNOFF] = cache_get_field_content_int(i, "weapon_sawnoff");
		        GangInfo[gangid][gWeapons][GANGWEAPON_TEC9] = cache_get_field_content_int(i, "weapon_tec9");
		        GangInfo[gangid][gWeapons][GANGWEAPON_UZI] = cache_get_field_content_int(i, "weapon_uzi");
		        GangInfo[gangid][gWeapons][GANGWEAPON_MP5] = cache_get_field_content_int(i, "weapon_mp5");
		        GangInfo[gangid][gWeapons][GANGWEAPON_AK47] = cache_get_field_content_int(i, "weapon_ak47");
		        GangInfo[gangid][gWeapons][GANGWEAPON_M4] = cache_get_field_content_int(i, "weapon_m4");
		        GangInfo[gangid][gWeapons][GANGWEAPON_RIFLE] = cache_get_field_content_int(i, "weapon_rifle");
		        GangInfo[gangid][gWeapons][GANGWEAPON_SNIPER] = cache_get_field_content_int(i, "weapon_sniper");
		        GangInfo[gangid][gWeapons][GANGWEAPON_MOLOTOV] = cache_get_field_content_int(i, "weapon_molotov");

				// Gang arms & drug dealer
		        GangInfo[gangid][gArmsDealer] = cache_get_field_content_int(i, "armsdealer");
		        GangInfo[gangid][gDrugDealer] = cache_get_field_content_int(i, "drugdealer");
		        GangInfo[gangid][gArmsX] = cache_get_field_content_float(i, "arms_x");
		        GangInfo[gangid][gArmsY] = cache_get_field_content_float(i, "arms_y");
		        GangInfo[gangid][gArmsZ] = cache_get_field_content_float(i, "arms_z");
		        GangInfo[gangid][gArmsA] = cache_get_field_content_float(i, "arms_a");
		        GangInfo[gangid][gDrugX] = cache_get_field_content_float(i, "drug_x");
		        GangInfo[gangid][gDrugY] = cache_get_field_content_float(i, "drug_y");
		        GangInfo[gangid][gDrugZ] = cache_get_field_content_float(i, "drug_z");
		        GangInfo[gangid][gDrugA] = cache_get_field_content_float(i, "drug_a");
		        GangInfo[gangid][gArmsWorld] = cache_get_field_content_int(i, "armsworld");
		        GangInfo[gangid][gDrugWorld] = cache_get_field_content_int(i, "drugworld");
                GangInfo[gangid][gDrugPot] = cache_get_field_content_int(i, "drugpot");
                GangInfo[gangid][gDrugCrack] = cache_get_field_content_int(i, "drugcrack");
                GangInfo[gangid][gDrugMeth] = cache_get_field_content_int(i, "drugmeth");
                GangInfo[gangid][gArmsMaterials] = cache_get_field_content_int(i, "armsmaterials");
                GangInfo[gangid][gArmsPrices][0] = cache_get_field_content_int(i, "armsprice_1");
                GangInfo[gangid][gArmsPrices][1] = cache_get_field_content_int(i, "armsprice_2");
                GangInfo[gangid][gArmsPrices][2] = cache_get_field_content_int(i, "armsprice_3");
                GangInfo[gangid][gArmsPrices][3] = cache_get_field_content_int(i, "armsprice_4");
                GangInfo[gangid][gArmsPrices][4] = cache_get_field_content_int(i, "armsprice_5");
                GangInfo[gangid][gArmsPrices][5] = cache_get_field_content_int(i, "armsprice_6");
                GangInfo[gangid][gArmsPrices][6] = cache_get_field_content_int(i, "armsprice_7");
                GangInfo[gangid][gArmsPrices][7] = cache_get_field_content_int(i, "armsprice_8");
                GangInfo[gangid][gArmsPrices][8] = cache_get_field_content_int(i, "armsprice_9");
                GangInfo[gangid][gArmsPrices][9] = cache_get_field_content_int(i, "armsprice_10");
                GangInfo[gangid][gArmsPrices][10] = cache_get_field_content_int(i, "armsprice_11");
                GangInfo[gangid][gArmsPrices][11] = cache_get_field_content_int(i, "armsprice_12");
                GangInfo[gangid][gDrugPrices][0] = cache_get_field_content_int(i, "pot_price");
                GangInfo[gangid][gDrugPrices][1] = cache_get_field_content_int(i, "crack_price");
                GangInfo[gangid][gDrugPrices][2] = cache_get_field_content_int(i, "meth_price");
                GangInfo[gangid][gArmsHPAmmo] = cache_get_field_content_int(i, "armshpammo");
                GangInfo[gangid][gArmsPoisonAmmo] = cache_get_field_content_int(i, "armspoisonammo");
                GangInfo[gangid][gArmsFMJAmmo] = cache_get_field_content_int(i, "armsfmjammo");

		        GangInfo[gangid][gText][0] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gText][1] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gText][2] = Text3D:INVALID_3DTEXT_ID;
		        GangInfo[gangid][gActors][0] = INVALID_ACTOR_ID;
    			GangInfo[gangid][gActors][1] = INVALID_ACTOR_ID;
		        GangInfo[gangid][gPickup] = -1;
		        GangInfo[gangid][gSetup] = 1;
				gangstream[gangid] = SvCreateGStream(0xAA3333FF, "Gang Radio");
				ReloadGang(gangid);
			}

			printf("[Script] %i gangs loaded.", rows);
		}
		case THREAD_LOAD_GANGRANKS:
		{
		    for(new i = 0; i < MAX_GANGS; i ++)
	    	{
		        for(new r = 0; r < 7; r ++)
		        {
		            strcpy(GangRanks[i][r], "Unspecified", 32);
		        }
		    }

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", GangRanks[cache_get_field_content_int(i, "id")][cache_get_field_content_int(i, "rank")], connectionID, 32);
      		}
		}
        case THREAD_LOAD_GANGSKINS:
		{
		    for(new i = 0; i < rows; i ++)
		    {
				GangInfo[cache_get_field_content_int(i, "id")][gSkins][cache_get_field_content_int(i, "slot")] = cache_get_field_content_int(i, "skinid");
		    }
		}
		case THREAD_LOAD_POINTS:
		{
		    for(new i = 0; i < rows && i < MAX_POINTS; i ++)
		    {
		        new pointid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", PointInfo[pointid][pName], connectionID, 32);
		        cache_get_field_content(i, "capturedby", PointInfo[pointid][pCapturedBy], connectionID, MAX_PLAYER_NAME);

		        PointInfo[pointid][pCapturedGang] = cache_get_field_content_int(i, "capturedgang");
		        PointInfo[pointid][pType] = cache_get_field_content_int(i, "type");
		        PointInfo[pointid][pProfits] = cache_get_field_content_int(i, "profits");
		        PointInfo[pointid][pTime] = cache_get_field_content_int(i, "time");
		        PointInfo[pointid][pPointX] = cache_get_field_content_float(i, "point_x");
		        PointInfo[pointid][pPointY] = cache_get_field_content_float(i, "point_y");
		        PointInfo[pointid][pPointZ] = cache_get_field_content_float(i, "point_z");
		        PointInfo[pointid][pPointInterior] = cache_get_field_content_int(i, "pointinterior");
		        PointInfo[pointid][pPointWorld] = cache_get_field_content_int(i, "pointworld");
		        PointInfo[pointid][pCaptureTime] = 0;
		        PointInfo[pointid][pCapturer] = INVALID_PLAYER_ID;
		        PointInfo[pointid][pText] = Text3D:INVALID_3DTEXT_ID;
		        PointInfo[pointid][pPickup] = -1;
		        PointInfo[pointid][pExists] = 1;

				if(PointInfo[pointid][pCapturedGang] >= 0 && !GangInfo[PointInfo[pointid][pCapturedGang]][gSetup])
				{
				    PointInfo[pointid][pCapturedGang] = -1;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = -1 WHERE id = %i", pointid);
				    mysql_tquery(connectionID, queryBuffer);
				}

				ReloadPoint(pointid);
		    }

		    printf("[Script] %i points loaded.", rows);
		}
		case THREAD_LOAD_TURFS:
		{
		    for(new i = 0; i < rows && i < MAX_TURFS; i ++)
		    {
		        new turfid = cache_get_field_content_int(i, "id");

		        cache_get_field_content(i, "name", TurfInfo[turfid][tName], connectionID, 32);
		        cache_get_field_content(i, "capturedby", TurfInfo[turfid][tCapturedBy], connectionID, MAX_PLAYER_NAME);

		        TurfInfo[turfid][tCapturedGang] = cache_get_field_content_int(i, "capturedgang");
		        TurfInfo[turfid][tType] = cache_get_field_content_int(i, "type");
		        TurfInfo[turfid][tTime] = cache_get_field_content_int(i, "time");
		        TurfInfo[turfid][tMinX] = cache_get_field_content_float(i, "min_x");
		        TurfInfo[turfid][tMinY] = cache_get_field_content_float(i, "min_y");
		        TurfInfo[turfid][tMaxX] = cache_get_field_content_float(i, "max_x");
		        TurfInfo[turfid][tMaxY] = cache_get_field_content_float(i, "max_y");
		        TurfInfo[turfid][tHeight] = cache_get_field_content_float(i, "height");
		        TurfInfo[turfid][tGangZone] = -1;
		        TurfInfo[turfid][tArea] = -1;
		        TurfInfo[turfid][tCaptureTime] = 0;
				TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
		        TurfInfo[turfid][tExists] = 1;

		        ReloadTurf(turfid);
			}

			printf("[Script] %i turfs loaded.", rows);
		}
		case THREAD_LOAD_CLOTHING:
		{
		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "name", ClothingInfo[extraid][i][cName], connectionID, 32);

		        ClothingInfo[extraid][i][cID] = cache_get_field_content_int(i, "id");
		        ClothingInfo[extraid][i][cModel] = cache_get_field_content_int(i, "modelid");
		        ClothingInfo[extraid][i][cBone] = cache_get_field_content_int(i, "boneid");
		        ClothingInfo[extraid][i][cAttached] = cache_get_field_content_int(i, "attached");
		        ClothingInfo[extraid][i][cPosX] = cache_get_field_content_float(i, "pos_x");
		        ClothingInfo[extraid][i][cPosY] = cache_get_field_content_float(i, "pos_y");
		        ClothingInfo[extraid][i][cPosZ] = cache_get_field_content_float(i, "pos_z");
		        ClothingInfo[extraid][i][cRotX] = cache_get_field_content_float(i, "rot_x");
		        ClothingInfo[extraid][i][cRotY] = cache_get_field_content_float(i, "rot_y");
		        ClothingInfo[extraid][i][cRotZ] = cache_get_field_content_float(i, "rot_z");
		        ClothingInfo[extraid][i][cScaleX] = cache_get_field_content_float(i, "scale_x");
		        ClothingInfo[extraid][i][cScaleY] = cache_get_field_content_float(i, "scale_y");
		        ClothingInfo[extraid][i][cScaleZ] = cache_get_field_content_float(i, "scale_z");
		        ClothingInfo[extraid][i][cExists] = 1;
		        ClothingInfo[extraid][i][cAttachedIndex] = -1;
		    }

		    pData[extraid][pAwaitingClothing] = 1;
		}
		case THREAD_HOUSE_INFORMATION:
		{
			new type[16], houseid = GetNearbyHouseEx(extraid);

		    if(HouseInfo[houseid][hType] == -1)
			{
				type = "Other";
			}
			else
			{
				strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
			}

			SM(extraid, SERVER_COLOR, "House ID %i", houseid);
			SM(extraid, COLOR_GREY2, "(Value: $%i) - (Rent Price: $%i) - (Level: %i/5) - (Active: %s) - (Locked: %s)", HouseInfo[houseid][hPrice], HouseInfo[houseid][hRentPrice], HouseInfo[houseid][hLevel], (gettime() - HouseInfo[houseid][hTimestamp] > 1209600) ? ("{FFA500}No{C8C8C8}") : ("Yes"), (HouseInfo[houseid][hLocked]) ? ("Yes") : ("No"));
			SM(extraid, COLOR_GREY2, "(Class: %s) - (Location: %s) - (Furniture: %i/%i) - (Tenants: %i/%i)", type, GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]), cache_get_row_int(0, 0), GetHouseFurnitureCapacity(houseid), cache_get_row_int(0, 1), GetHouseTenantCapacity(houseid));
		}
		case THREAD_COUNT_FURNITURE:
		{
		    new houseid = GetInsideHouse(extraid);

		    if(cache_get_row_int(0, 0) >= GetHouseFurnitureCapacity(houseid))
		    {
		        SM(extraid, COLOR_SYNTAX, "Your house is only allowed up to %i furniture at its current level.", GetHouseFurnitureCapacity(houseid));
		    }
		    else
		    {
				ShowDialogToPlayer(extraid, DIALOG_BUYFURNITURE1);
			}
		}
		case THREAD_SELL_FURNITURE:
		{
		    if(cache_get_row_count(connectionID))
		    {
		        new name[32], price = percent(cache_get_field_content_int(0, "price"), 75);

		        cache_get_field_content(0, "name", name);
		        GivePlayerCash(extraid, price);

		        SM(extraid, COLOR_AQUA, "You have sold "SVRCLR"%s{CCFFFF} and received a 75 percent refund of $%i.", name, price);
		        RemoveFurniture(pData[extraid][pSelected]);
			}
		}
		case THREAD_CLEAR_FURNITURE:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "Your home contains no furniture which can be sold.");
		    }
		    else
		    {
		        new price, houseid = GetInsideHouse(extraid);

			    for(new i = 0; i < rows; i ++)
				{
				    price += percent(cache_get_field_content_int(i, "price"), 75);
				}

				RemoveAllFurniture(houseid);

				GivePlayerCash(extraid, price);
				SM(extraid, COLOR_AQUA, "You have sold a total of %i items and received $%i back.", rows, price);
			}
		}
		/*case THREAD_COUNT_TEXTS:
		{
		    rows = cache_get_row_int(0, 0);

		    if(rows)
		    {
		        SCMf(extraid, COLOR_YELLOW, "** You have %i unread text messages. (/texts)", rows);
			}
		}*/
		case THREAD_VIEW_TEXTS:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_ERROR, "Error:"WHITE" You have no more unread text messages to read.");
			}
			else
			{
		    	static listString[4096], sender[MAX_PLAYER_NAME], date[24], message[128];

				listString = "Texts sent to you while offline (recent first):\n";

			    for(new i = 0; i < min(rows, 25); i ++)
			    {
			        cache_get_field_content(i, "sender", sender);
		    	    cache_get_field_content(i, "date", date);
		        	cache_get_field_content(i, "message", message);

			        format(listString, sizeof(listString), "%s\n[%s] SMS from %s (%i): %s", listString, date, sender, cache_get_field_content_int(i, "sender_number"), message);
				}

				if(rows > 25)
				{
				    ShowPlayerDialog(extraid, DIALOG_UNREADTEXTS, DIALOG_STYLE_MSGBOX, "Unread Texts", listString, "Next", "OK");
				}
				else
				{
				    ShowPlayerDialog(extraid, DIALOG_UNREADTEXTS, DIALOG_STYLE_MSGBOX, "Unread Texts", listString, "OK", "");
				}
			}
		}
		case THREAD_LIST_VEHICLES:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "You own no vehicles which you can spawn.");
		    }
		    else
		    {
		        new string[1024];

		        string = "#\tModel\tLocation";

		        for(new i = 0; i < rows; i ++)
		        {
		            format(string, sizeof(string), "%s\n%i\t%s\t%s", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "world")) ? ("Garage") : (GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"))));
				}

				ShowPlayerDialog(extraid, DIALOG_SPAWNCAR, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to spawn.", string, "Select", "Cancel");
		    }
		}
		case THREAD_LIST_PGVEHICLES_VALLEY:
        {
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "You own no vehicles which you can spawn.");
		    }
		    else
		    {
		        new string[1024], vehicleid;

		        string = "#\tModel\tStatus\tLocation";

		        for(new i = 0; i < rows; i ++)
		        {
		            if((vehicleid = GetVehicleLinkedID(cache_get_field_content_int(i, "id"))) != INVALID_VEHICLE_ID)
		                format(string, sizeof(string), "%s\n%i\t%s\t"GREEN"Spawned"WHITE"\t%s", string, i + 1, vehicleNames[GetVehicleModel(vehicleid) - 400], GetVehicleZoneName(vehicleid));
		            else if(cache_get_field_content_int(i, "impounded"))
						format(string, sizeof(string), "%s\n%i\t%s\t{FF0000}Impounded{FFFFFF}\tDMV", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400]);
					else
						format(string, sizeof(string), "%s\n%i\t%s\t"RED"Despawned"WHITE"\t%s", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "world")) ? ("Garage") : (GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"))));
				}

				ShowPlayerDialog(extraid, DIALOG_VALLEY, DIALOG_STYLE_TABLIST_HEADERS, "[VALLEY]", string, "Select", "Cancel");
		    }
		}
		case THREAD_CAR_STORAGE:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "You own no vehicles which you can spawn.");
		    }
		    else
		    {
		        new string[1024], vehicleid;

		        string = "#\tModel\tStatus\tLocation";

		        for(new i = 0; i < rows; i ++)
		        {
		            if((vehicleid = GetVehicleLinkedID(cache_get_field_content_int(i, "id"))) != INVALID_VEHICLE_ID)
		                format(string, sizeof(string), "%s\n%i\t%s\t"GREEN"Spawned"WHITE"\t%s", string, i + 1, vehicleNames[GetVehicleModel(vehicleid) - 400], GetVehicleZoneName(vehicleid));
					else if(cache_get_field_content_int(i, "impounded"))
						format(string, sizeof(string), "%s\n%i\t%s\t{FF0000}Impounded{FFFFFF}\tDMV", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400]);
					else if(cache_get_field_content_int(i, "broken"))
						format(string, sizeof(string), "%s\n%i\t%s\t"LIGHTRED"Broken{FFFFFF}\tGarage", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400]);
					else
						format(string, sizeof(string), "%s\n%i\t%s\t"RED"Despawned"WHITE"\t%s", string, i + 1, vehicleNames[cache_get_field_content_int(i, "modelid") - 400], (cache_get_field_content_int(i, "world")) ? ("Garage") : (GetZoneName(cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z"))));
				}

				ShowPlayerDialog(extraid, DIALOG_CARSTORAGE, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to (de)spawn.", string, "Select", "Cancel");
		    }
		}
		case THREAD_FACTION_ROSTER:
		{
		    new username[MAX_PLAYER_NAME], date[24];

		    SCM(extraid, SERVER_COLOR, "Faction Roster:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", date);

		        SM(extraid, COLOR_GREY2, "%s %s - Last Seen: %s", FactionRanks[pData[extraid][pFaction]][cache_get_field_content_int(i, "factionrank")], username, date);
		    }
		}
		case THREAD_GANG_ROSTER:
		{
		    new username[MAX_PLAYER_NAME], date[24];

		    SCM(extraid, SERVER_COLOR, "Gang Roster:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_field_content(i, "username", username);
		        cache_get_field_content(i, "lastlogin", date);

		        SM(extraid, COLOR_GREY2, "[%i] %s %s - Last Seen: %s", cache_get_field_content_int(i, "gangrank"), GangRanks[pData[extraid][pGang]][cache_get_field_content_int(i, "gangrank")], username, date);
		    }
		}
		case THREAD_VIEW_PHONEBOOK:
		{
		    if((!rows) && pData[extraid][pPage] == 1)
		    {
		        SCM(extraid, COLOR_SYNTAX, "The phonebook directory is currently empty.");
		    }
		    else
		    {
		        static string[MAX_LISTED_NUMBERS * 32], name[MAX_PLAYER_NAME];

		        string = "#\tName\tNumber";

		        for(new i = 0; i < rows; i ++)
		        {
		            cache_get_field_content(i, "name", name);
		            format(string, sizeof(string), "%s\n%i\t%s\t%i", string, ((pData[extraid][pPage] - 1) * MAX_LISTED_NUMBERS) + (i + 1), name, cache_get_field_content_int(i, "number"));
				}

				if(pData[extraid][pPage] > 1)
				{
				    strcat(string, "\n"SVRCLR"<< Go back"WHITE"");
				}
    			if(rows == MAX_LISTED_NUMBERS)
    			{
    			    strcat(string, "\n"SVRCLR">> Next page"WHITE"");
				}

				ShowPlayerDialog(extraid, DIALOG_PHONEBOOK, DIALOG_STYLE_TABLIST_HEADERS, "Phonebook directory", string, "Select", "Close");
		    }
		}
		
		case THREAD_COUNT_LANDOBJECTS:
		{
			new landid = GetNearbyLand(extraid);
		    if(cache_get_row_int(0, 0) >= GetLandObjectCapacity(LandInfo[landid][lLevel]))
		    {
		        SM(extraid, COLOR_GREY, "You are only only allowed up to %i objects for your land.", GetLandObjectCapacity(LandInfo[landid][lLevel]));
		    }
		    else
		    {
		        ShowDialogToPlayer(extraid, DIALOG_LANDBUILDTYPE);
				//ShowDialogToPlayer(extraid, DIALOG_LANDBUILD1);
			}
		}
		case THREAD_SELL_LANDOBJECT:
		{
		    if(cache_get_row_count(connectionID))
		    {
		        new name[32], price = percent(cache_get_field_content_int(0, "price"), 75);

		        cache_get_field_content(0, "name", name);
		        GivePlayerCash(extraid, price);

		        SM(extraid, COLOR_GREEN, "You have sold "SVRCLR"%s{CCFFFF} and received a 75 percent refund of $%i.", name, price);
		        RemoveLandObject(pData[extraid][pSelected]);
			}
		}
		case THREAD_DUPLICATE_LANDOBJECT:
		{
			//name, modelid, price, pos_x, pos_y, pos_z, rot_x, rot_y, rot_z

  			if(cache_get_row_count(connectionID))
			{
			    new string[20], name[32], landid = GetNearbyLand(extraid);

			    new modelid = cache_get_field_content_int(0, "modelid");
			    new price = cache_get_field_content_int(0, "price");
			    new Float:x = cache_get_field_content_float(0, "pos_x");
			    new Float:y = cache_get_field_content_float(0, "pos_y");
			    new Float:z = cache_get_field_content_float(0, "pos_z");
			    new Float:rx = cache_get_field_content_float(0, "rot_x");
			    new Float:ry = cache_get_field_content_float(0, "rot_y");
			    new Float:rz = cache_get_field_content_float(0, "rot_z");

			    if(pData[extraid][pCash] < price)
			    {
			        SCM(extraid, COLOR_SYNTAX, "You can't afford to duplicate this object.");
			    }
			    else
			    {
			    	if(cache_get_row_int(0, 0) >= GetLandObjectCapacity(LandInfo[pData[extraid][pObjectLand]][lLevel]))
					{
		 				SM(extraid, COLOR_GREY, "You are only allowed up to %i objects for your land.", GetLandObjectCapacity(LandInfo[pData[extraid][pObjectLand]][lLevel]));
		   			}
			        pData[extraid][pObjectLand] = landid;
				    cache_get_field_content(0, "name", name);

			    	GivePlayerCash(extraid, -price);
			    	SM(extraid, COLOR_YELLOW, "%s duplicated for $%i. You will now edit this object.", name, price);

				    format(string, sizeof(string), "~r~-$%i", price);
				    GameTextForPlayer(extraid, string, 5000, 1);

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO landobjects VALUES(null, %i, %i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', 0, 0, '%f', '%f', '%f', '-1000.0', '-1000.0', '-1000.0')", LandInfo[landid][lID], modelid, name, price, x, y, z, rx, ry, rz, x, y, z - 10.0);
					mysql_tquery(connectionID, queryBuffer);

					mysql_tquery(connectionID, "SELECT * FROM landobjects WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, LandInfo[landid][lLabels]);
					mysql_tquery(connectionID, "SELECT LAST_INSERT_ID() FROM landobjects LIMIT 1", "OnQueryFinished", "ii", THREAD_DUPLICATED_OBJECT, extraid);
				}
			}
		}
		case THREAD_DUPLICATED_OBJECT:
		{
			if(cache_get_row_count(connectionID))
			{
			    new id = cache_get_row_int(0, 0);

			    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
			    {
			        if(IsValidDynamicObject(i) && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_LAND && Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID) == id)
			        {
			            pData[extraid][pEditType] = EDIT_LAND_OBJECT;
		    	    	pData[extraid][pEditObject] = i;

						EditDynamicObject(extraid, i);
	    		    	GameTextForPlayer(extraid, "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel", 5000, 1);

			            //pData[extraid][pSelected] = i;
						//ShowDialogToPlayer(extraid, DIALOG_LANDOBJECTMENU);
			            break;
					}
			    }
		    }
		}
		case THREAD_CLEAR_LANDOBJECTS:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "Your land contains no furniture which can be sold.");
		    }
		    else
		    {
		        new price, landid = GetNearbyLand(extraid);

			    for(new i = 0; i < rows; i ++)
				{
				    price += percent(cache_get_field_content_int(i, "price"), 75);
				}

				RemoveAllLandObjects(landid);

				GivePlayerCash(extraid, price);
				SM(extraid, COLOR_GREEN, "You have sold a total of %i items and received $%i back.", rows, price);
			}
		}
		case THREAD_LIST_LANDOBJECTS:
		{
		    if((!rows) && pData[extraid][pPage] == 1)
		    {
		        SCM(extraid, COLOR_SYNTAX, "Your land contains no objects which can be listed.");
		    }
		    else
		    {
		        static string[MAX_LISTED_OBJECTS * 48], name[32];

		        string = "#\tName\tCost\tDistance";

		        for(new i = 0; i < rows; i ++)
		        {
		            cache_get_field_content(i, "name", name);
		            format(string, sizeof(string), "%s\n%i\t%s\t"SVRCLR"$%i"WHITE"\t%.1fm", string, GetLandObjectID(cache_get_field_content_int(i, "id")), name, cache_get_field_content_int(i, "price"), GetPlayerDistanceFromPoint(extraid, cache_get_field_content_float(i, "pos_x"), cache_get_field_content_float(i, "pos_y"), cache_get_field_content_float(i, "pos_z")));
				}

				if(pData[extraid][pPage] > 1)
				{
				    strcat(string, "\n"SVRCLR"<< Go back"WHITE"");
				}
    			if(rows == MAX_LISTED_OBJECTS)
    			{
    			    strcat(string, "\n"SVRCLR">> Next page"WHITE"");
				}

				ShowPlayerDialog(extraid, DIALOG_LANDOBJECTS, DIALOG_STYLE_TABLIST_HEADERS, "List of objects", string, "Select", "Back");
		    }
		}
		case THREAD_LAND_MAINMENU:
		{
			new
		        landid = GetNearbyLand(extraid),
		        string[64];

			format(string, sizeof(string), "Land Menu {FFD700}(Level: %i/3) (%i/%i objects)", LandInfo[landid][lLevel], cache_get_row_int(0, 0), GetLandObjectCapacity(LandInfo[landid][lLevel]));
		    ShowPlayerDialog(extraid, DIALOG_LANDMENU, DIALOG_STYLE_LIST, string, "Build object\nEdit object\nToggle labels\nSell all objects\nPermissions\nUpgrade Land", "Select", "Cancel");
		}
		case THREAD_LAND_INFORMATION:
		{
		    new landid = GetNearbyLand(extraid);

		    SCM(extraid, SERVER_COLOR, "Land Info:");
			SM(extraid, COLOR_WHITE, "** Your level %i/3 land in %s is worth {00AA00}%s{FFFFFF} and contains %i/%i objects.", LandInfo[landid][lLevel], GetZoneName(LandInfo[landid][lMinX], LandInfo[landid][lMinY], LandInfo[landid][lHeight]), FormatNumber(LandInfo[landid][lPrice]), cache_get_row_int(0, 0), GetLandObjectCapacity(LandInfo[landid][lLevel]));
		}
		case THREAD_LOAD_VEHICLES:
		{
		    new modelid, Float:pos_x, Float:pos_y, Float:pos_z, Float:pos_a, color1, color2, respawndelay, vehicleid;

		    for(new i = 0; i < rows; i ++)
		    {
	            modelid 		= cache_get_field_content_int(i, "modelid"),
				pos_x 			= cache_get_field_content_float(i, "pos_x"),
				pos_y 			= cache_get_field_content_float(i, "pos_y"),
				pos_z 			= cache_get_field_content_float(i, "pos_z"),
				pos_a 			= cache_get_field_content_float(i, "pos_a"),
				color1 			= cache_get_field_content_int(i, "color1"),
				color2 			= cache_get_field_content_int(i, "color2"),
				respawndelay 	= cache_get_field_content_int(i, "respawndelay");
		        vehicleid 		= CreateVehicle(modelid, pos_x, pos_y, pos_z, pos_a, color1, color2, respawndelay);

				if(vehicleid != INVALID_VEHICLE_ID)
				{
					VehicleInfo[vehicleid][vID] = cache_get_field_content_int(i, "id");
					VehicleInfo[vehicleid][vGang] = cache_get_field_content_int(i, "gangid");
					VehicleInfo[vehicleid][vFactionType] = cache_get_field_content_int(i, "factiontype");
					VehicleInfo[vehicleid][vJob] = cache_get_field_content_int(i, "job");
					VehicleInfo[vehicleid][vHealth] = cache_get_field_content_int(i, "health");

					if(VehicleInfo[vehicleid][vGang] >= 0)
					{
					    VehicleInfo[vehicleid][vPrice] = cache_get_field_content_int(i, "price");
					    VehicleInfo[vehicleid][vLocked] = cache_get_field_content_int(i, "locked");
					    VehicleInfo[vehicleid][vStolen] = cache_get_field_content_int(i, "broken");
					    VehicleInfo[vehicleid][vPaintjob] = cache_get_field_content_int(i, "paintjob");
					    VehicleInfo[vehicleid][vInterior] = cache_get_field_content_int(i, "interior");
				        VehicleInfo[vehicleid][vWorld] = cache_get_field_content_int(i, "world");
				        VehicleInfo[vehicleid][vMods][0] = cache_get_field_content_int(i, "mod_1");
				        VehicleInfo[vehicleid][vMods][1] = cache_get_field_content_int(i, "mod_2");
				        VehicleInfo[vehicleid][vMods][2] = cache_get_field_content_int(i, "mod_3");
				        VehicleInfo[vehicleid][vMods][3] = cache_get_field_content_int(i, "mod_4");
				        VehicleInfo[vehicleid][vMods][4] = cache_get_field_content_int(i, "mod_5");
				        VehicleInfo[vehicleid][vMods][5] = cache_get_field_content_int(i, "mod_6");
				        VehicleInfo[vehicleid][vMods][6] = cache_get_field_content_int(i, "mod_7");
				        VehicleInfo[vehicleid][vMods][7] = cache_get_field_content_int(i, "mod_8");
				        VehicleInfo[vehicleid][vMods][8] = cache_get_field_content_int(i, "mod_9");
				        VehicleInfo[vehicleid][vMods][9] = cache_get_field_content_int(i, "mod_10");
				        VehicleInfo[vehicleid][vMods][10] = cache_get_field_content_int(i, "mod_11");
				        VehicleInfo[vehicleid][vMods][11] = cache_get_field_content_int(i, "mod_12");
				        VehicleInfo[vehicleid][vMods][12] = cache_get_field_content_int(i, "mod_13");
				        VehicleInfo[vehicleid][vMods][13] = cache_get_field_content_int(i, "mod_14");
						ReloadVehicle(vehicleid);
					}

					VehicleInfo[vehicleid][vModel] = modelid;
					VehicleInfo[vehicleid][vPosX] = pos_x;
					VehicleInfo[vehicleid][vPosY] = pos_y;
					VehicleInfo[vehicleid][vPosZ] = pos_z;
					VehicleInfo[vehicleid][vPosA] = pos_a;
					VehicleInfo[vehicleid][vColor1] = color1;
					VehicleInfo[vehicleid][vColor2] = color2;
					VehicleInfo[vehicleid][vRespawnDelay] = respawndelay;
					VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
					VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;
					VehicleInfo[vehicleid][vTimer] = -1;
					vehicleFuel[vehicleid] = 100;

					SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
		        }
			}
		}
		case THREAD_LOAD_ATMS:
		{
		    for(new i = 0; i < rows && i < MAX_ATMS; i ++)
		    {
		        AtmInfo[i][aID] = cache_get_field_content_int(i, "id");
		        AtmInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        AtmInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	AtmInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	AtmInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				AtmInfo[i][aExists] = true;
				ReloadAtm(i);
			}
			printf("[Script] %i atms loaded", (rows < MAX_ATMS) ? (rows) : (MAX_ATMS));
		}
		
		case THREAD_LOAD_VENDORS:
		{
		    for(new i = 0; i < rows && i < MAX_VENDORS; i ++)
		    {
		        VenInfo[i][aID] = cache_get_field_content_int(i, "id");
		        VenInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        VenInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	VenInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	VenInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				VenInfo[i][aExists] = true;
				ReloadVen(i);
			}
			printf("[Script] %i vendors loaded", (rows < MAX_VENDORS) ? (rows) : (MAX_VENDORS));
		}
		case THREAD_LOAD_MDC:
		{
		    for(new i = 0; i < rows && i < MAX_MDC; i ++)
		    {
		        MdcInfo[i][aID] = cache_get_field_content_int(i, "id");
		        MdcInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        MdcInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	MdcInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	MdcInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				MdcInfo[i][aExists] = true;
				ReloadMdc(i);
			}
			printf("[Script] %i mdc loaded", (rows < MAX_MDC) ? (rows) : (MAX_MDC));
		}
		case THREAD_LOAD_PGARAGE:
		{
		    for(new i = 0; i < rows && i < MAX_PGARAGE; i ++)
		    {
		        PGInfo[i][aID] = cache_get_field_content_int(i, "id");
		        PGInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        PGInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	PGInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	PGInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				PGInfo[i][aExists] = true;
				ReloadPG(i);
			}
			printf("[Script] %i Public Garage loaded", (rows < MAX_PGARAGE) ? (rows) : (MAX_PGARAGE));
		}
		case THREAD_LOAD_SURGERY:
		{
		    for(new i = 0; i < rows && i < MAX_SURGERY; i ++)
		    {
		        SurInfo[i][aID] = cache_get_field_content_int(i, "id");
		        VenInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        VenInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	VenInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	VenInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				VenInfo[i][aExists] = true;
				ReloadSur(i);
			}
			printf("[Script] %i surgery room loaded", (rows < MAX_SURGERY) ? (rows) : (MAX_SURGERY));
		}
		case THREAD_LOAD_BAR:
		{
		    for(new i = 0; i < rows && i < MAX_BAR; i ++)
		    {
		        BarInfo[i][aID] = cache_get_field_content_int(i, "id");
		        BarInfo[i][aPosX] = cache_get_field_content_float(i, "pos_x");
		        BarInfo[i][aPosY] = cache_get_field_content_float(i, "pos_y");
			   	BarInfo[i][aPosZ] = cache_get_field_content_float(i, "pos_z");
			   	BarInfo[i][aPosA] = cache_get_field_content_float(i, "pos_r");
				BarInfo[i][aExists] = true;
				ReloadBar(i);
			}
			printf("[Script] %i Bars loaded", (rows < MAX_BAR) ? (rows) : (MAX_BAR));
		}
		case THREAD_GANG_INFORMATION:
		{
			if(rows)
			{
			    new count, total;

			    for(new i = 0; i < MAX_TURFS; i ++)
			    {
			        if(TurfInfo[i][tExists])
			        {
			            if(TurfInfo[i][tCapturedGang] == pData[extraid][pGang])
			                count++;
			            else if(TurfInfo[i][tType] != 8)
			                total++;
			        }
				}
			    SM(extraid, SERVER_COLOR, "%s:", GangInfo[pData[extraid][pGang]][gName]);
			    SM(extraid, COLOR_GREY2, "Leader: %s - Level: %i/3 - Strikes: %i/3 - Members: %i/%i - Vehicles: %i/%i", GangInfo[pData[extraid][pGang]][gLeader], GangInfo[pData[extraid][pGang]][gLevel], GangInfo[pData[extraid][pGang]][gStrikes], cache_get_row_int(0, 0), GetGangMemberLimit(pData[extraid][pGang]), GetGangVehicles(pData[extraid][pGang]), GetGangVehicleLimit(pData[extraid][pGang]));
			    SM(extraid, COLOR_GREY2, "Gang Points: %i GP - Turf Tokens: %i - Cash: $%i/$%i - Materials: %i/%i", GangInfo[pData[extraid][pGang]][gPoints], GangInfo[pData[extraid][pGang]][gTurfTokens], GangInfo[pData[extraid][pGang]][gCash], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_CASH), GangInfo[pData[extraid][pGang]][gMaterials], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_MATERIALS));
			    SM(extraid, COLOR_GREY2, "Turfs: %i/%i - Pot: %i/%ig - Crack: %i/%ig - Meth: %i/%ig - Painkillers: %i/%i", count, total, GangInfo[pData[extraid][pGang]][gPot], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_WEED), GangInfo[pData[extraid][pGang]][gCrack], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_COCAINE), GangInfo[pData[extraid][pGang]][gMeth], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_METH),
					GangInfo[pData[extraid][pGang]][gPainkillers], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_PAINKILLERS));
				SM(extraid, COLOR_GREY2, "Hollow point: %i/%i - Poison tip: %i/%i - Full metal jacket: %i/%i", GangInfo[pData[extraid][pGang]][gHPAmmo], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_HPAMMO), GangInfo[pData[extraid][pGang]][gPoisonAmmo], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_POISONAMMO), GangInfo[pData[extraid][pGang]][gFMJAmmo], GetGangStashCapacity(pData[extraid][pGang], STASH_CAPACITY_FMJAMMO));
			}
		}
		case THREAD_OFFLINE_IP:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "The username specified is not registered.");
		    }
		    else
		    {
		        new username[MAX_PLAYER_NAME], ip[16];

		        cache_get_field_content(0, "username", username);
		        cache_get_field_content(0, "ip", ip);

		        SM(extraid, COLOR_WHITE, "** %s's IP: %s **", username, ip);

		    }
		}
		case THREAD_CHECK_REFERRAL:
		{
		    if(!rows)
		    {
		        SCM(extraid, COLOR_SYNTAX, "The player specified doesn't exist.");
		        ShowDialogToPlayer(extraid, DIALOG_REFERRAL);
		    }
		    else
		    {
		        new username[MAX_PLAYER_NAME], ip[16];

		        cache_get_field_content(0, "username", username);
		        cache_get_field_content(0, "ip", ip);

		        if(!strcmp(GetPlayerIP(extraid), ip))
		        {
		            SCM(extraid, COLOR_SYNTAX, "This account is listed under your own IP address. You can't refer yourself.");
		            ShowDialogToPlayer(extraid, DIALOG_REFERRAL);
		        }
		        else
		        {
		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET referral_uid = %i WHERE uid = %i", cache_get_field_content_int(0, "uid"), pData[extraid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

					//pData[extraid][pTutorialTimer] = SetTimerEx("PlayerSpawn", 3000, false, "ii", extraid);
					//ShowDialogToPlayer(extraid, DIALOG_SPAWN);
					
	                SM(extraid, COLOR_YELLOW, "** You have chosen %s as your referrer. They will be rewarded once you reach level 3.", username);
				}
		    }
		}
		case THREAD_REWARD_REFERRER:
		{
		    if(rows)
		    {
			    new username[MAX_PLAYER_NAME], ip[16], referralid = INVALID_PLAYER_ID;

				cache_get_field_content(0, "username", username);
				cache_get_field_content(0, "ip", ip);

				// Check to see if any of the players online match the player's referral UID.
			    foreach(new i : Player)
			    {
			        if(i != extraid && pData[i][pLogged] && pData[i][pID] == pData[extraid][pReferralUID])
			        {
			            referralid = i;
			            break;
			        }
			    }

				// Referrer is online.
			    if(referralid != INVALID_PLAYER_ID && strcmp(GetPlayerIP(referralid), GetPlayerIP(extraid)) != 0)
			    {
			        pData[referralid][pLevel]++;
			        SCM(referralid, COLOR_YELLOW, "A player who you've referred reached level 3. Therefore you received 1 level!");
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = level + 1 WHERE uid = %i", pData[referralid][pID]);
					mysql_tquery(connectionID, queryBuffer);

				}
				else
				{
				    // Referrer is offline. Let's give them their dirtycash and increment refercount which sends them an alert on login!
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = level + 1, refercount = refercount + 1 WHERE uid = %i AND ip != '%s'", pData[extraid][pReferralUID], GetPlayerIP(extraid));
					mysql_tquery(connectionID, queryBuffer);
				}

				// Finally, remove the player's link to the referrer as the prize has been given.
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET referral_uid = 0 WHERE uid = %i", pData[extraid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
		case THREAD_APPLICATIONS:
		{
			new dialogStr[1024], count;
			new userid, approved, locked, reason[128], username[24];
			
			for(new i = 0; i < rows; i++) {
				userid = cache_get_field_content_int(i, "uid");
				cache_get_field_content(i, "username", username);
				locked = cache_get_field_content_int(i, "locked");
				approved = cache_get_field_content_int(i, "approved");
				cache_get_field_content(i, "application_reason", reason);
				
				if(approved < 1 && !locked && !isnull(reason)) {
					format(dialogStr, sizeof(dialogStr), "%s(%d) %s\n", dialogStr, userid, username);
					count++;
				}
			}	

			if(count) {
				format(dialogStr, sizeof(dialogStr), "List of pending applications...\n\n%s", dialogStr);	
				format(dialogStr, sizeof(dialogStr), "%s\n{E08B3E}Use {AA3333}/ra {E08B3E}before accepting or denying the application!", dialogStr);
				format(dialogStr, sizeof(dialogStr), "%s\n{FF6347}Do not deny the application if all, if not one of their answers are NULL.", dialogStr);
			} else {
				format(dialogStr, sizeof(dialogStr), "No pending applications.");
			}
			ShowPlayerDialog(extraid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "Pending Applications", dialogStr, "Close", "");		
		}
		case THREAD_D_APPLICATIONS:
		{
			new dialogStr[1024], count;
			new userid, approved, locked, reason[128], username[24];
			
			for(new i = 0; i < rows; i++) {
				userid = cache_get_field_content_int(i, "uid");
				cache_get_field_content(i, "username", username);
				locked = cache_get_field_content_int(i, "locked");
				approved = cache_get_field_content_int(i, "approved");
				cache_get_field_content(i, "application_reason", reason);
				
				if(approved < 1 && locked && !isnull(reason)) {
					format(dialogStr, sizeof(dialogStr), "%s(%d) %s\n", dialogStr, userid, username);
					count++;
				}
			}	

			if(count) {
				format(dialogStr, sizeof(dialogStr), "List of denied applications...\n\n%s", dialogStr);	
			} else {
				format(dialogStr, sizeof(dialogStr), "No denied applications.");
			}
			ShowPlayerDialog(extraid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "Denied Applications", dialogStr, "Close", "");		
		}
		case THREAD_LIST_FLAGGED:
		{
		    new
				flags[MAX_PLAYERS],
				username[MAX_PLAYER_NAME],
				targetid;

		    SCM(extraid, SERVER_COLOR, "Flagged Players:");

		    for(new i = 0; i < rows; i ++)
		    {
		        cache_get_row(i, 0, username);

		        if(IsPlayerOnline(username, targetid))
		        {
		            flags[targetid]++;
				}
		    }

		    foreach(new i : Player)
		    {
		        if(flags[i] > 0)
		        {
		            SM(extraid, COLOR_WHITE, "** %s[%i] has %i active flags.", GetRPName(i), i, flags[i]);
				}
			}
		}
	}
}
stock GetNameWithSpace(oldName[]) {
	new name[MAX_PLAYER_NAME];
	format(name, sizeof(name), "%s", oldName);
	for(new i = 0; i < strlen(name); i++) {
		if(name[i] == '_') {
			name[i] = ' ';
		}
	}
	return name;
}
public OnPlayerClickTextDraw(playerid, Text:clickedid) {
	
	if(clickedid == ATMTD[12]) {
		pData[playerid][pToggleAtm] = 0;

		CancelSelectTextDraw(playerid);	
		PlayerTextDrawHide(playerid, PlayerCashTD[playerid][1]);
		for(new g = 0; g < 20; g++) {
		TextDrawHideForPlayer(playerid, ATMTD[g]);
		}

	}	
	if(clickedid == PhoneTD[12]) 
	{
		CancelSelectTextDraw(playerid);	
		ListContacts(playerid);
	}
	if(clickedid == PhoneTD[14])
	{
		//CancelSelectTextDraw(playerid);	
		for(new i = 0; i < 22; i++) 
		{
			TextDrawHideForPlayer(playerid, PhoneTD[i]);
		}
		TextDrawShowForPlayer(playerid, PhoneTD[0]);
		TextDrawShowForPlayer(playerid, PhoneTD[1]);
		TextDrawShowForPlayer(playerid, PhoneTD[2]);
		TextDrawShowForPlayer(playerid, PhoneTD[4]);
		TextDrawShowForPlayer(playerid, PhoneTD[5]);
		TextDrawShowForPlayer(playerid, PhoneTD[6]);
		new cash[32];	
		format(cash, sizeof(cash), "$%s",  AddCommas(pData[playerid][pBank]));
		PlayerTextDrawSetString(playerid, PlayerCashTD[playerid][2], cash);
		PlayerTextDrawShow(playerid, PlayerCashTD[playerid][2]);
		for(new g = 0; g < 6; g++) 
		{
			TextDrawShowForPlayer(playerid, PhoneBankTD[g]);
		}

		
	}
	if(clickedid == PhoneTD[4]) 
	{
		CancelSelectTextDraw(playerid);	
		for(new i = 0; i < 22; i++) {
		
			TextDrawHideForPlayer(playerid, PhoneTD[i]);
		}
		PlayerTextDrawHide(playerid, PlayerCashTD[playerid][2]);
		for(new g = 0; g < 6; g++) 
		{
			TextDrawHideForPlayer(playerid, PhoneBankTD[g]);
		}

	}
	if(clickedid == PhoneBankTD[4]) 
	{
		ShowDialogToPlayer(playerid, DIALOG_BTRANSFER1);
	}
	if(clickedid == PhoneTD[13]) {
		ShowPlayerDialog(playerid, DIALOG_TWEET, DIALOG_STYLE_INPUT, "Tweet", "What's on your mind?", "Post", "Back");
	}
	if(clickedid == PhoneTD[16]) {
		for(new i = 0; i < 22; i++) {
		TextDrawHideForPlayer(playerid, PhoneTD[i]);
		}

		callcmd::selfie(playerid, "");
	}
	if(clickedid == PhoneTD[15]) {
		ShowDialogToPlayer(playerid, DIALOG_LOCATE);
	}	

	if(clickedid == ATMTD[11]) 
	{
		TextDrawHideForPlayer(playerid, ATMTD[3]);
		TextDrawHideForPlayer(playerid, ATMTD[4]);
		TextDrawHideForPlayer(playerid, ATMTD[5]);
		TextDrawHideForPlayer(playerid, ATMTD[6]);
		TextDrawHideForPlayer(playerid, ATMTD[8]);
		TextDrawHideForPlayer(playerid, ATMTD[9]);
		TextDrawHideForPlayer(playerid, ATMTD[10]);
		TextDrawHideForPlayer(playerid, ATMTD[11]);
	
		for(new g = 13; g < 20; g++) {
		TextDrawShowForPlayer(playerid, ATMTD[g]);
		}

	}	
	if(clickedid == ATMTD[19]) 
	{
		new cash[32];	
		format(cash, sizeof(cash), "$%s",  AddCommas(pData[playerid][pBank]));
		PlayerTextDrawSetString(playerid, PlayerCashTD[playerid][1], cash);
		PlayerTextDrawShow(playerid, PlayerCashTD[playerid][1]);
	}
	if(clickedid == ATMTD[18]) 
	{
		pData[playerid][pToggleAtm] = 0;

		PlayerTextDrawHide(playerid, PlayerCashTD[playerid][1]);
		for(new g = 0; g < 20; g++) {
		TextDrawHideForPlayer(playerid, ATMTD[g]);
		}
		CancelSelectTextDraw(playerid);	
		ShowDialogToPlayer(playerid, DIALOG_ATM);

	}

	if(clickedid == BANKTD[21]) {
		ShowDialogToPlayer(playerid, DIALOG_BWITHDRAW);
		PlayerTextDrawHide(playerid, PlayerCashTD[playerid][0]);
		for(new g = 0; g < 27; g++) {
			TextDrawHideForPlayer(playerid, BANKTD[g]);
		}
		pData[playerid][pToggleAtm] = 0;
		CancelSelectTextDraw(playerid);
	}	
	if(clickedid == BANKTD[20]) {
		ShowDialogToPlayer(playerid, DIALOG_BDEPOSIT);
		PlayerTextDrawHide(playerid, PlayerCashTD[playerid][0]);
		for(new g = 0; g < 27; g++) {
			TextDrawHideForPlayer(playerid, BANKTD[g]);
		}
		pData[playerid][pToggleAtm] = 0;
		CancelSelectTextDraw(playerid);
	}	
	if(clickedid == BANKTD[22]) {
		ShowDialogToPlayer(playerid, DIALOG_BTRANSFER1);
		PlayerTextDrawHide(playerid, PlayerCashTD[playerid][0]);
		for(new g = 0; g < 27; g++) {
			TextDrawHideForPlayer(playerid, BANKTD[g]);
		}
		pData[playerid][pToggleAtm] = 0;
		CancelSelectTextDraw(playerid);
	}	
	if(clickedid == BANKTD[3]) {
		TextDrawHideForPlayer(playerid, BANKTD[1]);
		TextDrawHideForPlayer(playerid, BANKTD[2]);
		TextDrawHideForPlayer(playerid, BANKTD[3]);
		TextDrawHideForPlayer(playerid, BANKTD[4]);
		TextDrawHideForPlayer(playerid, BANKTD[5]);
		TextDrawHideForPlayer(playerid, BANKTD[6]);
		
		new cash[32];	
		format(cash, sizeof(cash), "$%s",  AddCommas(pData[playerid][pBank]));
		PlayerTextDrawSetString(playerid, PlayerCashTD[playerid][0], cash);
		PlayerTextDrawShow(playerid, PlayerCashTD[playerid][0]);
		for(new g = 7; g < 27; g++) {
			TextDrawShowForPlayer(playerid, BANKTD[g]);
		}
	}
	if(clickedid == BANKTD[9]) {
		PlayerTextDrawHide(playerid, PlayerCashTD[playerid][0]);
		for(new g = 0; g < 27; g++) {
			TextDrawHideForPlayer(playerid, BANKTD[g]);
		}
		pData[playerid][pToggleAtm] = 0;
		CancelSelectTextDraw(playerid);
	}	
	
 	if(clickedid == Text:INVALID_TEXT_DRAW && !pData[playerid][pLogged])
	{
		SelectTextDraw(playerid, COLOR_LIGHTBLUE);
	}
	return 1;
}

/*forward Firework(playerid, type);
public Firework(playerid, type)
{
	if(!IsPlayerConnected(playerid))
	{
		DestroyDynamicObject(Rocket[playerid]);
		DestroyDynamicObject(RocketLight[playerid]);
		DestroyDynamicObject(RocketSmoke[playerid]);
		return 1;
	}
	new Float:x, Float:y, Float:z;
	x = GetPVarFloat(playerid, "fxpos");
	y = GetPVarFloat(playerid, "fypos");
	z = GetPVarFloat(playerid, "fzpos");
	if (type == TYPE_COUNTDOWN)
	{
     	SCMf(playerid, COLOR_GREEN, "* STAND BACK! 5 seconds till launch!", GetPlayerNameEx(playerid));
		SetTimerEx("Firework", 5000, 0, "ii", playerid, TYPE_LAUNCH);
	}
	else if(type == TYPE_LAUNCH)
	{
		CreateExplosion(x ,y, z, 13, 5);
		new time = MoveDynamicObject(Rocket[playerid], x, y, z + RocketHeight, 10);
		MoveDynamicObject(RocketLight[playerid], x, y, z + 2 + RocketHeight, 10);
		MoveDynamicObject(RocketSmoke[playerid], x, y, z + RocketHeight, 10);
		SetTimerEx("Firework", time, 0, "ii", playerid, TYPE_EXPLODE);
	}
	else if(type == TYPE_EXPLODE)
	{
		z += RocketHeight;
		if (RocketExplosions[playerid] == 0)
		{
			DestroyDynamicObject(Rocket[playerid]);
			DestroyDynamicObject(RocketLight[playerid]);
			DestroyDynamicObject(RocketSmoke[playerid]);
			CreateExplosion(x ,y, z, 4, 10);
			CreateExplosion(x ,y, z, 5, 10);
			CreateExplosion(x ,y, z, 6, 10);
		}
		else if (RocketExplosions[playerid] >= MAX_FIREWORKS)
		{
			for (new i = 0; i <= FireworkSpread; i++)
			{
				CreateExplosion(x + float(i - (FireworkSpread / 2)), y, z, 7, 10);
				CreateExplosion(x, y + float(i - (FireworkSpread / 2)), z, 7, 10);
				CreateExplosion(x, y, z + float(i - (FireworkSpread / 2)), 7, 10);
			}
			RocketExplosions[playerid] = -1;
			return 1;
		}
		else
		{
			x += float(random(FireworkSpread) - (FireworkSpread / 2));
			y += float(random(FireworkSpread) - (FireworkSpread / 2));
			z += float(random(FireworkSpread) - (FireworkSpread / 2));
			CreateExplosion(x, y, z, 7, 10);
		}
		RocketExplosions[playerid]++;
		SetTimerEx("Firework", 250, 0, "ii", playerid, TYPE_EXPLODE);
	}
	return 1;
}*/

public OnGameModeInit()
{
	new string[128];
	connectionID = mysql_connect(MYSQL_HOSTNAME, MYSQL_USERNAME, MYSQL_DATABASE, MYSQL_PASSWORD);
	
	// DISCORD
	REMDCROLE = DCC_FindRoleById("1257131750329417808");
	DCROLE = DCC_FindRoleById("1271844040584855684");
	GUILDSVR = DCC_FindGuildById("1271660618600026183");
	
	if(mysql_errno(connectionID))
	{
	    print("Unable to establish a connection with the MySQL server...");
	    SendRconCommand("exit");
	    return 0;
	}
    for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	    SetPlayerHealth(i, 100);
	}
    for(new i = 0; i < MAX_VEHICLES; i ++)
	{
	    ResetVehicle(i);
	}
	mysql_tquery(connectionID, "TRUNCATE TABLE shots");
	mysql_tquery(connectionID, "SELECT * FROM atms", "OnQueryFinished", "ii", THREAD_LOAD_ATMS, 0);
	mysql_tquery(connectionID, "SELECT * FROM furniture", "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, 0);
	mysql_tquery(connectionID, "SELECT * FROM factionlockers", "OnQueryFinished", "ii", THREAD_LOAD_LOCKERS, 0);
	mysql_tquery(connectionID, "SELECT * FROM vendors", "OnQueryFinished", "ii", THREAD_LOAD_VENDORS, 0);
	mysql_tquery(connectionID, "SELECT * FROM mdc", "OnQueryFinished", "ii", THREAD_LOAD_MDC, 0);
	mysql_tquery(connectionID, "SELECT * FROM surgery", "OnQueryFinished", "ii", THREAD_LOAD_SURGERY, 0);
	mysql_tquery(connectionID, "SELECT * FROM publicgarage", "OnQueryFinished", "ii", THREAD_LOAD_PGARAGE, 0);
	mysql_tquery(connectionID, "SELECT * FROM bars", "OnQueryFinished", "ii", THREAD_LOAD_BAR, 0);
	mysql_tquery(connectionID, "SELECT * FROM houses", "OnQueryFinished", "ii", THREAD_LOAD_HOUSES, 0);
	mysql_tquery(connectionID, "SELECT * FROM garages", "OnQueryFinished", "ii", THREAD_LOAD_GARAGES, 0);
	mysql_tquery(connectionID, "SELECT * FROM speedcameras", "Speed_Load", "");
	mysql_tquery(connectionID, "SELECT * FROM businesses", "OnQueryFinished", "ii", THREAD_LOAD_BUSINESSES, 0);
	mysql_tquery(connectionID, "SELECT * FROM entrances", "OnQueryFinished", "ii", THREAD_LOAD_ENTRANCES, 0);
	mysql_tquery(connectionID, "SELECT * FROM factions", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONS, 0);
	mysql_tquery(connectionID, "SELECT * FROM factionranks", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONRANKS, 0);
	mysql_tquery(connectionID, "SELECT * FROM factionskins", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONSKINS, 0);
    mysql_tquery(connectionID, "SELECT * FROM factionpay", "OnQueryFinished", "ii", THREAD_LOAD_FACTIONPAY, 0);
    mysql_tquery(connectionID, "SELECT * FROM divisions", "OnQueryFinished", "ii", THREAD_LOAD_DIVISIONS, 0);
	mysql_tquery(connectionID, "SELECT * FROM lands", "OnQueryFinished", "ii", THREAD_LOAD_LANDS, 0);
    mysql_tquery(connectionID, "SELECT * FROM landobjects", "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, 0);
    mysql_tquery(connectionID, "SELECT * FROM vehicles WHERE ownerid = 0", "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, 0);
    mysql_tquery(connectionID, "SELECT * FROM gangs", "OnQueryFinished", "ii", THREAD_LOAD_GANGS, 0);
	mysql_tquery(connectionID, "SELECT * FROM `locations`", "OnQueryFinished", "ii", THREAD_LOAD_LOCATIONS, 0);
    mysql_tquery(connectionID, "SELECT * FROM gangranks", "OnQueryFinished", "ii", THREAD_LOAD_GANGRANKS, 0);
	mysql_tquery(connectionID, "SELECT * FROM gangskins", "OnQueryFinished", "ii", THREAD_LOAD_GANGSKINS, 0);
	mysql_tquery(connectionID, "SELECT * FROM points", "OnQueryFinished", "ii", THREAD_LOAD_POINTS, 0);
	mysql_tquery(connectionID, "SELECT * FROM turfs", "OnQueryFinished", "ii", THREAD_LOAD_TURFS, 0);
	mysql_tquery(connectionID, "SELECT * FROM safezone", "OnQueryFinished", "ii", THREAD_LOAD_SAFEZONE, 0);
	mysql_tquery(connectionID, "SELECT * FROM actors", "Load_Server_Actor", "");
	mysql_tquery(connectionID, "SELECT * FROM `gates`", "Gate_Load", "");
	mysql_tquery(connectionID, "SELECT * FROM `graffiti`", "LoadDynamicGraffities", "");
	mysql_tquery(connectionID, "SELECT * FROM `object`", "Object_Load", "");
	UploadAntiCheatSettings();
	for(new x=0; x<MAX_VEHICLES; x++)
	{
		Flasher[x] = 0;
		FlasherState[x] = 0;
	}
	FlashTimer = SetTimer("FlasherFunc", 200, 1);
	SetTimer("SendGTAPinasMsg", 1000 * 60 * 4, true); // Random Message
	SetTimer("Timerx", 500, true); //faster == less mistakes
	DoubleSalary = 0;
	sweeparea = CreateDynamicRectangle(1291, -2516, 2806, -1557);
	hparea = CreateDynamicRectangle(1131, -1392, 1253, -1284);
	loadarea = CreateDynamicRectangle(2421, -2145, 2533.25, -2113);
	loadwoodarea = CreateDynamicRectangle(-547, -125, -467, -60);
	SetWeather(gWeather);
	EnableStuntBonusForAll(0);
	DisableInteriorEnterExits();
	AllowInteriorWeapons(0);
	ManualVehicleEngineAndLights();

	SetDamageFeed(true);
	SetDamageSounds(true, true);
	SetVehicleUnoccupiedDamage(false);
	SetVehiclePassengerDamage(true);
	ShowNameTags(1);
	SetNameTagDrawDistance(10.0);

	HeadShotSystem = false;
	
	SabongInfo[sPlayerRed] = INVALID_PLAYER_ID;
	SabongInfo[sPlayerBlue] = INVALID_PLAYER_ID;
	
	enabledGlobal = 0;
	//Streamer_TickRate(100);
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 1000);
	gDoubleXP = false;

	// CCTV's (10 MAX)
	AddCCTV("LS Grovestreet", 2491.7839, -1666.6194, 46.3232, 0.0);
	AddCCTV("LS Downtown", 1102.6440, -837.8973, 122.7000, 180.0);
	AddCCTV("SF Wang Cars", -1952.4282,285.9786,57.7031, 90.0);
	AddCCTV("SF Airport", -1275.8070, 52.9402, 82.9162, 0.0);
	AddCCTV("SF Crossroad", -1899.0861,731.0627,65.2969, 90.0);
	AddCCTV("SF Tower", -1753.6606,884.7520,305.8750, 150.0);
	AddCCTV("LV The Strip 1", 2137.2390, 2143.8286, 30.6719, 270.0);
	AddCCTV("LV The Strip 2", 1971.7627, 1423.9323, 82.1563, 270.0);
    AddCCTV("Mount Chiliad", -2432.5852, -1620.1143, 546.8554, 270.0);
	AddCCTV("Sherman Dam", -702.9260, 1848.8094, 116.0507, 0.0);
	AddCCTV("Desert", 35.1291, 2245.0901, 146.6797, 310.0);
	AddCCTV("Query", 588.1079,889.4715,-14.9023, 270.0);
	AddCCTV("Water", 635.6223,498.1748,20.3451, 90.0);

	TD = TextDrawCreate(160, 400, "~y~Keys:~n~Arrow-Keys: ~w~Move The Camera~n~~y~Sprint-Key: ~w~Speed Up~n~~y~Crouch-Key: ~w~Exit Camera");
    TextDrawLetterSize(TD, 0.4, 0.9);
    TextDrawSetShadow(TD, 0);
    TextDrawUseBox(TD,1);
	TextDrawBoxColor(TD,0x00000055);
	TextDrawTextSize(TD, 380, 400);

	new Count, Left = TotalCCTVS;
	for(new menu; menu<MAX_CCTVMENUS; menu++)
	{
	    if(Left > 12)
	    {
	        CCTVMenu[menu] = CreateMenu("Choose Camera:", 1, 200, 100, 220);
	        TotalMenus++;
	        MenuType[menu] = 1;
	        for(new i; i<11; i++)
	        {
	        	AddMenuItem(CCTVMenu[menu], 0, CameraName[Count]);
	        	Count++;
	        	Left--;
			}
			AddMenuItem(CCTVMenu[menu], 0, "Next");
		}
		else if(Left<13 && Left > 0)
		{
		    CCTVMenu[menu] = CreateMenu("Choose Camera:", 1, 200, 100, 220);
		    TotalMenus++;
		    MenuType[menu] = 2;
		    new tmp = Left;
	        for(new i; i<tmp; i++)
	        {
	        	AddMenuItem(CCTVMenu[menu], 0, CameraName[Count]);
	        	Count++;
	        	Left--;
			}
		}
	}
	/*-----------------------------*/

	// Point bounds
	pointboundaries[0] = GangZoneCreate(2545.8984375 ,-2153.3203125, 2707.03125, -2062.5); // FFC
	pointboundaries[1] = GangZoneCreate(1361.328125,-1435.546875,1478.515625,-1236.328125); // MP1
	pointboundaries[2] = GangZoneCreate(2077.1484375, -2361.328125, 2285.15625, -2179.6875); // MF1
	pointboundaries[3] = GangZoneCreate(2298.828125,-2064.453125,2546.875,-1935.546875); // MP2
	pointboundaries[4] = GangZoneCreate(2156.25, -1151.3671875, 2320.3125, -1001.953125); // MF2
	pointboundaries[5] = GangZoneCreate(2581.0546875, -2586.9140625, 2862.3046875, -2329.1015625); // AEC
	pointboundaries[6] = GangZoneCreate(2105.46875,-1753.90625,2177.734375,-1626.953125); // Drug House
	pointboundaries[7] = GangZoneCreate(2304.6875,-1181.640625,2361.328125,-1160.15625); // Crack Lab
	pointboundaries[8] = GangZoneCreate(13.671875,-402.34375,167.96875,-208.984375); // Drug Factory


	for(new i = 0; i < sizeof(comservpoint); i ++)
	{
		//CreateDynamicPickup(19132, 1, comservpoint[i][0], comservpoint[i][1], comservpoint[i][2]);
		CreateDynamic3DTextLabel(""TEAL"Dirt"WHITE"\nType "TEAL"'/clean'"WHITE" to start cleaning.", COLOR_WHITE, comservpoint[i][0], comservpoint[i][1], comservpoint[i][2], 15.0);
	}
	for(new i = 0; i < sizeof(cleanpoint); i ++)
	{
		//CreateDynamicPickup(19132, 1, cleanpoint[i][0], cleanpoint[i][1], cleanpoint[i][2]);
		CreateDynamic3DTextLabel(""TEAL"TRASH"WHITE"\nType "TEAL"'/JAILCLEAN'"WHITE" to start cleaning.", COLOR_WHITE, cleanpoint[i][0], cleanpoint[i][1], cleanpoint[i][2], 15.0);
	}

    // Yacht
	CreateDynamic3DTextLabel("yacht vault\n"SVRCLR"(( Type '/robyacht' to rob the yatch. ))",COLOR_GREY, 693.640136, -2159.000488, 10.592424, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
 	

    // Materials Pickup 1
	CreateDynamic3DTextLabel("Materials\nCost: $2000\n"SVRCLR"(( Type '/getmaterials' to begin. ))", COLOR_GREY, 1421.6913, -1318.4719, 13.5547, 10.0);
	CreateDynamicPickup(1575, 1, 1421.6913, -1318.4719, 13.5547);
	CreateDynamic3DTextLabel("Materials\nCost: $2000\n"SVRCLR"(( Type '/getmaterials' to begin. ))", COLOR_GREY, 2393.4885, -2008.5726, 13.3467, 10.0);
	CreateDynamicPickup(1575, 1, 2393.4885, -2008.5726, 13.3467); // Materials Pickup 2

	CreateDynamic3DTextLabel("Loading Dock\n"SVRCLR"(( Type '/loadtruck' and pick a load to begin delivery. ))", COLOR_GREY, 2460.9790,-2119.2590,13.5530, 10.0);
	CreateDynamicPickup(1239, 1, 2460.9790,-2119.2590,13.5530);

	CreateDynamic3DTextLabel("Pawnshop\n"SVRCLR"(( Type '/exchange' to exchange your diamonds. ))",COLOR_GREY, 2415.4158,-1504.3625,24.0250,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);


	CreateDynamic3DTextLabel("Drivers Test\nCost: $5000\n"SVRCLR"(( Type '/taketest' to begin. ))", COLOR_GREY, -2039.2168, -123.6363, -50.9141, 10.0);
	CreateDynamicPickup(1239, 1, -2039.2168, -123.6363, -50.9141);

	CreateDynamic3DTextLabel("Miner exit\n"SVRCLR"(( Press Y' to exit. ))", COLOR_GREY, -565.4080,-1506.7500,-33.7427, 10.0);
	CreateDynamicPickup(1316, 1, -565.4080,-1506.7500,-33.7427);
	
	

	CreateDynamic3DTextLabel("Casino Locker\n"SVRCLR"(( Type '/boxing' to begin. ))", COLOR_GREY, 1470.1754,1787.8226,1014.7407, 10.0);
	CreateDynamicPickup(1239, 1, 1470.1754,1787.8226,1014.7407);

	CreateDynamic3DTextLabel("Front Deskt\nGun License Exam\n"SVRCLR"(( Type '/getweplic' to take a weapon license exam. ))", COLOR_GREY, 45.5967,2039.3578,733.8567, 10.0);
	CreateDynamicPickup(1239, 1, 45.5967,2039.3578,733.8567);

	CreateDynamic3DTextLabel("MINISTOP\nCost: $2000\n"SVRCLR"(( Type '/ministop' to buy. ))", COLOR_GREY, 936.2162,-1653.4504,13.6662, 10.0);
	CreateDynamicPickup(1274, 1,936.2162,-1653.4504,13.6662);
	CreateDynamicMapIcon(936.2162,-1653.4504,13.6662,17,0);
		
	CreateDynamic3DTextLabel("Insurance\nCost: $5000\n"SVRCLR"(( Type '/buyinsurance' to spawn here. ))", COLOR_DOCTOR, 1160.9899,-1331.9058,14.5401, 10.0);
	CreateDynamicPickup(1240, 1,  1160.9899,-1331.9058,14.5401);

	CreateDynamic3DTextLabel("Pharmcay\n\n"SVRCLR"(( Type '/buymedicine' to spawn here. ))", COLOR_DOCTOR,1155.5896,-1323.3613,14.5401, 10.0);
	CreateDynamicPickup(1240, 1, 1155.5896,-1323.3613,14.5401);

	CreateDynamic3DTextLabel("Refrigirator\nCost: $50\n"SVRCLR"(( Type '/buymeat' to get a meat. ))", COLOR_GREY,1254.7689,-1434.3564,1388.7070, 3.0);
	CreateDynamic3DTextLabel("Coke Area\n> Requires EmptyCan <\n"SVRCLR"(( Type '/getcoke' to take a coke. ))", COLOR_GREY, 1254.306518, -1430.190917, 1300.707036, 3.0);

	CreateDynamic3DTextLabel("VIP CLOTHING\nCost: $5000\n"SVRCLR"(( Type '/vipskin' to buy a skin. ))", COLOR_GREY, 1968.6278,1980.5131,2714.0464, 10.0);

	CreateDynamic3DTextLabel("Stove\n\n"SVRCLR"(( Type '/cook [type]' to cook a meal. ))", COLOR_GREY, 1257.0536,-1431.0723,13.7070, 2.0);
	CreateDynamic3DTextLabel("Weapon License\n\n"SVRCLR"(( Type '/getweplic [type]' to tke an exam. ))", COLOR_GREY, 671.6107,-1498.4056,17.4984, 5.0);

	CreateDynamic3DTextLabel("Car Dealership\nType "WHITE"'/buyvehicle'"TEAL" to view catalog.", COLOR_TEAL,2125.7119,-1867.8989,13.5038, 10.0);
	CreateDynamicPickup(1274, 1, 2125.7119,-1867.8989,13.5038);

	CreateDynamic3DTextLabel("Verification System\nType "WHITE"'/getcode'"TEAL" to get a code and !linkaccount on dc.", COLOR_TEAL,1220.9506,-1817.5813,17.9530, 10.0);
	CreateDynamicPickup(1274, 1, 1220.9506,-1817.5813,17.9530);
	
  	CreateDynamic3DTextLabel(""TEAL"VIP ARMOR\n"TEAL" GO HERE TO USE THE VIP ARMOR.",COLOR_TEAL, 1987.4819,1985.6667,2714.05691+0.4,4.0);// Insurance
	pickup777 = CreatePickup(1242, 1, 1987.4819,1985.6667,2714.0569, -1);
	
	CreateDynamic3DTextLabel(""TEAL"VIP HEALTH\n"TEAL" GO HERE TO USE THE VIP HEALTH.",COLOR_TEAL,1989.3992,1982.8719,2714.0571+0.4,4.0);// Insurance
	pickup888 = CreatePickup(1240, 1, 1989.3992,1982.8719,2714.0571, -1);
  	

	for(new i = 0; i < sizeof(lumberPositions); i ++)
	{
	    CreateDynamic3DTextLabel(""TEAL"Tree\nType "WHITE"'/chop'"TEAL" to begin", COLOR_WHITE, lumberPositions[i][0], lumberPositions[i][1], lumberPositions[i][2], 60.0);
	}
	for(new i = 0; i < sizeof(garbageposition); i ++)
	{
	    CreateDynamic3DTextLabel(""TEAL"Dumpster\nType "WHITE"'/getgarbage'"TEAL" to get", COLOR_WHITE, garbageposition[i][0], garbageposition[i][1], garbageposition[i][2], 1.0);
	}
	
	CreateDynamic3DTextLabel("Garbage Pickup\nType "WHITE"'/garbage'"TEAL" to begin.", COLOR_TEAL,-83.8111,-1577.1749,2.6107, 10.0);
	CreateDynamicPickup(19132, 1, -83.8111,-1577.1749,2.6107);

	
	CreateDynamic3DTextLabel("/changename'"TEAL" to changename.", COLOR_TEAL,222.4565,2343.4070,1017.0952, 20.0);
	CreateDynamicPickup(1239, 1, 222.4565,2343.4070,1017.0952);
	
	CreateDynamic3DTextLabel("/upgrade'"TEAL" to upgrade.", COLOR_TEAL,222.2921,2353.8506,1017.1298, 20.0);
	CreateDynamicPickup(1239, 1, 222.2921,2353.8506,1017.1298);
	// FC
	CreateDynamic3DTextLabel("/upgrade'"TEAL" to upgrade.", COLOR_TEAL, -382.2034,-1481.1987,4004.5400, 20.0);
	CreateDynamicPickup(1239, 1 ,-382.2034,-1481.1987,4004.5400);
	

	CreateDynamicPickup(1239, 1, -64.7425,-1120.7697,1.0781); // Creates a checkpoint at -2112.7422,-753.4459,32.1719 with a range of 4, in any virtualworld, interior and for every player
	CreateDynamic3DTextLabel("Dirty Money\n"SVRCLR"(( Type /changemoney to change the money from clean to dirty or vice versa. ))", COLOR_GREY, -64.7425,-1120.7697,1.0781, 10.0);

	CreateDynamic3DTextLabel("Drug Smuggling\nCost: $75\n"SVRCLR"(( Type '/getcrate' to begin smuggling. ))", COLOR_GREY, 415.5813,-1726.8542,9.0025, 10.0);
	CreateDynamicPickup(1279, 1, 415.5813,-1726.8542,9.0025);

	CreateDynamic3DTextLabel("Meth Cookoff\n> Requires Ephedrine <\n"SVRCLR"(( Type '/cookmeth' to begin cooking. ))", COLOR_GREY, 333.5727, 1121.8536, 1083.8903, 10.0);
	CreateDynamicPickup(1577, 1, 333.5727, 1121.8536, 1083.8903);

	CreateDynamic3DTextLabel("Bank\n"SVRCLR"(( Type '/bankhelp' for more help. ))", COLOR_GREY, 1116.7744,1705.7791,-35.0973, 10.0);
	CreateDynamicPickup(1239, 1, 1116.7744,1705.7791,-35.0973);

	gSeedsStockText = CreateDynamic3DTextLabel("Marijuana Seeds\nStock: 100\n"SVRCLR"(( Type '/getdrug seeds [amount]' ))", COLOR_GREY, 323.7289, 1117.4187, 1083.8828, 10.0);
	CreateDynamicPickup(1578, 1, 323.7289, 1117.4187, 1083.8828);

	CreateDynamic3DTextLabel("Black Market area\n"SVRCLR"(( Type '/bm to buy' ))", COLOR_GREY,  1961.5903,2322.5999,16.4688, 10.0);
	CreateDynamicPickup(1558, 1,  1961.5903,2322.5999,16.4688);

	gTacoStockText = CreateDynamic3DTextLabel("TACO SHOP\nStock: 100\n"SVRCLR"(( Type '/get ' ))", COLOR_GREY, 1841.3550,-1838.9431,13.5981, 10.0);
	
	gEphedrineStockText = CreateDynamic3DTextLabel("Raw Ephedrine\nStock: 100\n"SVRCLR"(( '/getdrug ephedrine [amount]' ))", COLOR_GREY, 321.6007, 1117.3717, 1083.8828, 10.0);
	CreateDynamicPickup(1577, 1, 321.6007, 1117.3717, 1083.8828);

	gCrackText = CreateDynamic3DTextLabel("Crack\nStock: 100\n"SVRCLR"(( Type '/getdrug Crack [amount]' ))", COLOR_GREY, 2345.8250,-1185.5159,1031.9766, 10.0);
    CreateDynamicPickup(1575, 1, 2345.8250,-1185.5159,1031.9766);

	// HELP
	CreateDynamicPickup(1239, 23, 1829.9071, -1366.5021, 13.8285);
	CreateDynamic3DTextLabel("Welcome to "SVRCLR""SERVER_NAME""WHITE"\nUse {33AA33}/newb {FFFFFF}to ask questions\nUse {33AA33}/am {FFFFFF}to communicate with the admins", 0x33CCFFFF, 1829.9071, -1366.5021, 13.8285 + 1.0, 15.0);

	CreateDynamic3DTextLabel("Welcome to Manila Reality Roleplay!\n"GREY"Type '/help' for the list of commands.\nType '/newb' if you have any questions.\nType '/am' if you want to talk to an admin\nType '/helpme' to request for helper's assistance", SERVER_COLOR, -80.5589, 1388.4001, 9.9049, 10.0);
	CreateDynamicPickup(1239, 1, -80.5589, 1388.4001, 9.9049);

    gParachutes[0] = CreateDynamicPickup(371, 1, 1542.9038, -1353.0352, 329.4744); // Star tower
	gParachutes[1] = CreateDynamicPickup(371, 1, 315.9415, 1010.6052, 1953.0031); // Andromada interior


	//CreateDynamic3DTextLabel("King Lux\n"LIGHTRED"Development Team", COLOR_CYAN, 1228.6761,-1366.5840,14.1510, 10.0);

	casino1= CreateActor(11, 1435.8147,1805.4171,1012.3203,178.4669);// porter
	ApplyActorAnimation(casino1, "GANGS", "prtial_gngtlkB", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(casino1, true);	
	
	casino2= CreateActor(11, 1435.7523,1799.9985,1012.3203,3.8108);// porter
	ApplyActorAnimation(casino2, "GANGS", "prtial_gngtlkB", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(casino2, true);	
	
	casino3= CreateActor(11, 1439.3785,1787.0914,1012.3203,87.0315);// porter
	ApplyActorAnimation(casino3, "GANGS", "prtial_gngtlkB", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(casino3, true);	
	
	casino4= CreateActor(11, 1432.4624,1787.2888,1012.3203,273.2345);// porter
	ApplyActorAnimation(casino4, "GANGS", "prtial_gngtlkB", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(casino4, true);	

	// Job NPC
 	ActorJob[0] = CreateActor(73, 1370.2173,-1311.9095,13.5469,139.7047);// ArmsDealerActor
    ApplyActorAnimation(ActorJob[0], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
  	SetActorInvulnerable(ActorJob[0], true);

 	ActorJob[1] = CreateActor(163, 2227.3613,-1715.8910,13.5260, 145.1277);// BodyguardActor
    ApplyActorAnimation(ActorJob[1], "DEALER", "DEALER_IDLE_01", 4.0, 1, 0, 0, 0, 0);
  	SetActorInvulnerable(ActorJob[1], true);

   	ActorJob[2] = CreateActor(261, 2434.4448, -2125.6113, 13.5469, 0.0);// TruckerActor
	ApplyActorAnimation(ActorJob[2], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[2], true);

    ActorJob[3] = CreateActor(20, 791.7366,-1622.5624,13.3828,101.4343);// FoodPanda
	ApplyActorAnimation(ActorJob[3], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[3], true);

   	ActorJob[4] = CreateActor(173,-52.0537,-1562.4709,2.6172,150.7412);// DetectiveActor
	ApplyActorAnimation(ActorJob[4], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[4], true);

	ActorJob[5] = CreateActor(14, 393.2632,-2070.5837,7.8359, 56.3435);// FisherActor
	ApplyActorAnimation(ActorJob[5], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[5], true);

	ActorJob[7] = CreateActor(27, 857.8130,-23.0132,63.3025,145.1658);// MinerActor
	ApplyActorAnimation(ActorJob[7], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[7], true);

	ActorJob[8] = CreateActor(15, 1748.1373, -1863.0981, 1300.5755, 357.0072);// TaxiActor
	ApplyActorAnimation(ActorJob[8], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[8], true);

	ActorJob[9] = CreateActor(28, 2165.3611, -1673.0824, 15.0778, 257.0941);// DrugsmugActor
	ApplyActorAnimation(ActorJob[9], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[9], true);

	ActorJob[10] = CreateActor(113, 1381.0668, -1086.6857, 27.3906, 121.4697);// LawyerActor
	ApplyActorAnimation(ActorJob[10], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[10], true);

	ActorJob[11] = CreateActor(260, 2483.7581,65.3144,26.6444,184.0155);// cons
	ApplyActorAnimation(ActorJob[11], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[11], true);
	
	ActorJob[12] = CreateActor(16, -525.6659,-95.2307,63.0690,347.7645);// sweeper
	ApplyActorAnimation(ActorJob[12], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[12], true);

	ActorJob[13] = CreateActor(168, -257.7483,-2176.0459,29.0666,21.9770);// butcher
	ApplyActorAnimation(ActorJob[13], "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
	SetActorInvulnerable(ActorJob[13], true);
	
	for(new i = 0; i < sizeof(jobLocations); i ++)
	{
	    format(string, sizeof(string), ""WHITE"%s\n"SVRCLR"Press "WHITE"'N'"SVRCLR" to get job.", jobLocations[i][jobName]);
	    CreateDynamic3DTextLabel(string, SERVER_COLOR, jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ], 10.0);
	}

	for(new i = 0; i < sizeof(atmMachines); i ++)
	{
	    CreateDynamicObject(19324, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ], 0.0, 0.0, atmMachines[i][atmA]);
	    CreateDynamic3DTextLabel("ATM Machine\nType "WHITE"'/atm'"TEAL" to use. ))", COLOR_TEAL, atmMachines[i][atmX], atmMachines[i][atmY], atmMachines[i][atmZ] + 0.4, 10.0);
	}
	for(new i = 0; i < sizeof(FuelStation); i ++)
	{
		CreateDynamicPickup(1650, 1, FuelStation[i][FuelX], FuelStation[i][FuelY], FuelStation[i][FuelZ]);
	    CreateDynamic3DTextLabel("Fuel Station\nType "WHITE"'/refuel'"TEAL" to refill.", COLOR_TEAL, FuelStation[i][FuelX], FuelStation[i][FuelY], FuelStation[i][FuelZ] + 0.4, 12.0);
	}

	// - PLATE REGISTRATION CENTER
	CreateDynamic3DTextLabel("Front Desk\n"WHITE"'/registervehicle'"TEAL" to get a plate number for your vehicle.", COLOR_TEAL, -2772.9460, 376.7526, 3000.6462+ 0.4, 15.0);
	// - PLATE REGISTRATION CENTER
	CreateDynamic3DTextLabel("Front Desk\n"WHITE"'/registervehicle'"TEAL" to get a plate number for your vehicle.", COLOR_TEAL, -709.9255, 2606.4180, 1005.7650+ 0.4, 15.0);

	CreateDynamic3DTextLabel("Impound Area\nPress"WHITE"'N'"LIGHTRED" to releases your vehicle from impound.", COLOR_LIGHTRED, 2050.3113, -1911.2911, 12.8366+ 0.4, 15.0);
	CreateDynamicPickup(1316, 1, 2050.3113, -1911.2911, 12.8366);
	
	CreateDynamic3DTextLabel("Mechanic Counter\nPress "WHITE"N"TEAL".", COLOR_TEAL,2870.6211,-1966.9380,11.1119, 10.0);
	CreateDynamic3DTextLabel("Ems Counter\nPress "WHITE"N"TEAL".", COLOR_TEAL,2055.5212,1099.9314,1717.2209, 10.0);
	CreateDynamic3DTextLabel("Doctor Here\nType "WHITE"/sendtodoctor"TEAL".", COLOR_TEAL,2050.5938,1099.6853,1717.2209, 10.0);
	

	new mechact = CreateActor(50, 2157.4629,-2174.6443,13.5469,45.4088);// mechanic
    ApplyActorAnimation(mechact, "PED", "IDLE_CHAT", 4.1, 1, 1, 1, 1, 1);
  	SetActorInvulnerable(mechact, true);
	
   	CreateDynamic3DTextLabel(""TEAL"Hospital Desk\nPress "WHITE"'n'"TEAL" to open menu.",COLOR_TEAL,1392.4878,-25.0938,1001.01322+0.6,15.0);// Insurance
  	CreateDynamic3DTextLabel(""TEAL"Hospital Desk\nPress "WHITE"'n'"TEAL" to open menu.",COLOR_TEAL,1602.7094, 537.6455, 501.9966+0.6,4.0);// Insurance

    CreateDynamic3DTextLabel(""TEAL"CAFETERIA\nType "WHITE"'/cafeteria'"TEAL" to purchase food.",COLOR_YELLOW,2042.9763, -2031.3365, 871.1051+0.6,4.0);/// VIP locker room

	CreateDynamic3DTextLabel("Paintball\n"SVRCLR"(( Type '/joinpb' to play paintball! ))", COLOR_GREY, 2114.0562,-1742.5917,13.5547, 10.0);
	CreateDynamicPickup(1254, 1, 2114.0562,-1742.5917,13.5547);
	
	for(new i = 0; i < sizeof(minerPositions); i ++)
	{
		CreateDynamicPickup(18634, 1, minerPositions[i][0], minerPositions[i][1], minerPositions[i][2]);
	    CreateDynamic3DTextLabel(""TEAL"Mining Area\n"WHITE" Press "TEAL"'n'"WHITE" to begin mining rocks.", SERVER_COLOR, minerPositions[i][0], minerPositions[i][1], minerPositions[i][2], 50.0);
	}

	for(new i = 0; i < sizeof(butcherPositions); i ++)
	{
		CreateDynamicPickup(18634, 1, butcherPositions[i][0], butcherPositions[i][1], butcherPositions[i][2]);
	    CreateDynamic3DTextLabel(""TEAL"Butcher Area\n"WHITE" Press "TEAL"'n'"WHITE" to begin mining chopping a meat.", SERVER_COLOR, butcherPositions[i][0], butcherPositions[i][1], butcherPositions[i][2], 50.0);
	}
	for(new i = 0; i < sizeof(DemolitionPositions); i ++)
	{
	    CreateDynamic3DTextLabel(""TEAL"Demolition Area\n"WHITE" Press "TEAL"'n'"WHITE" to begin.", SERVER_COLOR, DemolitionPositions[i][0], DemolitionPositions[i][1], DemolitionPositions[i][2], 50.0);
	}
	for(new i = 0; i < sizeof(tunePositions); i ++)
	{
	    CreateDynamic3DTextLabel("Type "WHITE"'/tune'"LIGHTRED" to tune the vehicle\nType "WHITE" '/upgradevehicle' "LIGHTRED"to upgrade the vehicle.", COLOR_LIGHTRED, tunePositions[i][0], tunePositions[i][1], tunePositions[i][2], 8.0);
	}
	for(new i = 0; i < sizeof(bshotpositions); i ++)
	{
	    CreateDynamic3DTextLabel("Burgershot Counter\nPress "WHITE"N"TEAL".", COLOR_LIGHTRED, bshotpositions[i][0], bshotpositions[i][1], bshotpositions[i][2], 8.0);
	}
	CreateDynamic3DTextLabel("Flowershop\nCost: $2000\n"TEAL"(( Type '/buyflower' to buy. ))", COLOR_GREY, 1288.2645,-1019.3158,31.9159, 10.0);
	CreateDynamicPickup(1239, 1, 1288.2645,-1019.3158,31.9159);
	
	for(new i = 0; i < sizeof(casinopos); i ++)
	{
	    CreateDynamic3DTextLabel("Type "WHITE"'/dicebet'"LIGHTRED" to bet with other players "LIGHTRED"to upgrade the vehicle.", COLOR_LIGHTRED, casinopos[i][0], casinopos[i][1], casinopos[i][2], 8.0);
	}
	/*for(new i = 0; i < sizeof(arrestPoints); i ++)
	{
	    CreateDynamic3DTextLabel("Arrest\n"SVRCLR"(( Type '/arrest' to arrest a suspect. ))", COLOR_GREY, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2], 7.0);
	    CreateDynamicPickup(1247, 1, arrestPoints[i][0], arrestPoints[i][1], arrestPoints[i][2]);
	}*/


	emsonly = CreateButton(1401.92944, -28.17850, 1001.637825, 5.0); // ONLYS ONLY
	emseveryone = CreateButton(1403.22949, -31.73850, 1001.63782, 92.0); // People, ^^==LSPD

	CreateDynamicObject(2886, 1401.92944, -28.17850, 1001.63782,   0.00000, 0.00000, -90.00000); //EMSONLY
	CreateDynamicObject(2886, 1403.22949, -31.73850, 1001.63782,   0.00000, 0.00000, 180.00000); //emseveryone

	mechdoor1 = CreateDynamicObject(1569, 2158.149414, -2181.766113, 17.214397, 0.000000, 0.000000, -43.900016); 

	emsdoor1 = CreateDynamicObject(1569, 1401.96570, -28.62340, 1000.01367,   0.00000, 0.00000, -90.00000);
	emsdoor2 = CreateDynamicObject(1569, 1401.96570, -31.62340, 1000.01367,   0.00000, 0.00000, 90.00000);
	
	emsdoor3 = CreateDynamicObject(1569, 1382.69250, -31.60880, 1000.01190,   0.00000, 0.00000, 90.00000);
	emsdoor4 = CreateDynamicObject(1569, 1382.70239, -28.61662, 1000.01190,   0.00000, 0.00000, -90.00000);
	
	pddoor1 = CreateDynamicObject(1569, 50.409233, 2037.005004, 732.856689, 0.000000, 0.000000, 0.000000); 
	pddoor2 = CreateDynamicObject(1569, 27.095270, 2041.494384, 732.856689, 0.000000, 0.000000, 90.000000);  
	pddoor3 = CreateDynamicObject(1569, 17.465286, 2039.983520, 732.856689, 0.000000, 0.000000, 180.000000); 
	pddoor4 = CreateDynamicObject(1569, 40.822780, 2053.516357, 732.856689, 0.000000, 0.000000, 540.000000); 
	pddoor5 = CreateDynamicObject(1569, 36.622779, 2053.516357, 732.856689, 0.000000, 0.000000, 360.000000); 

	ANN[0] = TextDrawCreate(118.000000, 140.000000, "Preview_Model");
    TextDrawFont(ANN[0], 5);
    TextDrawLetterSize(ANN[0], 0.600000, 2.000000);
    TextDrawTextSize(ANN[0], 112.500000, 150.000000);
    TextDrawSetOutline(ANN[0], 0);
    TextDrawSetShadow(ANN[0], 0);
    TextDrawAlignment(ANN[0], 1);
    TextDrawColor(ANN[0], -1);
    TextDrawBackgroundColor(ANN[0], 0);
    TextDrawBoxColor(ANN[0], 0);
    TextDrawUseBox(ANN[0], 0);
    TextDrawSetProportional(ANN[0], 1);
    TextDrawSetSelectable(ANN[0], 0);
    TextDrawSetPreviewModel(ANN[0], 4);
    TextDrawSetPreviewRot(ANN[0], -10.000000, 0.000000, 21.000000, 1.000000);
    TextDrawSetPreviewVehCol(ANN[0], 1, 1);

    ANN[1] = TextDrawCreate(192.000000, 171.000000, "Manila Reality");
    TextDrawFont(ANN[1], 0);
    TextDrawLetterSize(ANN[1], 0.533333, 1.300000);
    TextDrawTextSize(ANN[1], 360.000000, 27.000000);
    TextDrawSetOutline(ANN[1], 0);
    TextDrawSetShadow(ANN[1], 1);
    TextDrawAlignment(ANN[1], 1);
    TextDrawColor(ANN[1], -16776961);
    TextDrawBackgroundColor(ANN[1], 255);
    TextDrawBoxColor(ANN[1], 50);
    TextDrawUseBox(ANN[1], 0);
    TextDrawSetProportional(ANN[1], 1);
    TextDrawSetSelectable(ANN[1], 0);

    ANN[2] = TextDrawCreate(196.000000, 186.000000, "Hello Citizen! This is just a test anouncement!");
    TextDrawFont(ANN[2], 1);
    TextDrawLetterSize(ANN[2], 0.220833, 1.150000);
    TextDrawTextSize(ANN[2], 360.000000, 27.000000);
    TextDrawSetOutline(ANN[2], 0);
    TextDrawSetShadow(ANN[2], 1);
    TextDrawAlignment(ANN[2], 1);
    TextDrawColor(ANN[2], -1);
    TextDrawBackgroundColor(ANN[2], 255);
    TextDrawBoxColor(ANN[2], 50);
    TextDrawUseBox(ANN[2], 0);
    TextDrawSetProportional(ANN[2], 1);
    TextDrawSetSelectable(ANN[2], 0);

	//PURGE
	TextdrawPURGE = TextDrawCreate(324.000000, 129.000000, "_");
	TextDrawFont(TextdrawPURGE, 1);
	TextDrawLetterSize(TextdrawPURGE, 0.641664, 22.200006);
	TextDrawTextSize(TextdrawPURGE, 298.500000, 390.000000);
	TextDrawSetOutline(TextdrawPURGE, 1);
	TextDrawSetShadow(TextdrawPURGE, 0);
	TextDrawAlignment(TextdrawPURGE, 2);
	TextDrawColor(TextdrawPURGE, -1);
	TextDrawBackgroundColor(TextdrawPURGE, 255);
	TextDrawBoxColor(TextdrawPURGE, 135);
	TextDrawUseBox(TextdrawPURGE, 1);
	TextDrawSetProportional(TextdrawPURGE, 1);
	TextDrawSetSelectable(TextdrawPURGE, 0);
	
	TextdrawPURGE1 = TextDrawCreate(324.000000, 135.000000, "_");
	TextDrawFont(TextdrawPURGE1, 1);
	TextDrawLetterSize(TextdrawPURGE1, 0.600000, 20.649997);
	TextDrawTextSize(TextdrawPURGE1, 298.500000, 382.000000);
	TextDrawSetOutline(TextdrawPURGE1, 1);
	TextDrawSetShadow(TextdrawPURGE1, 0);
	TextDrawAlignment(TextdrawPURGE1, 2);
	TextDrawColor(TextdrawPURGE1, -1);
	TextDrawBackgroundColor(TextdrawPURGE1, 255);
	TextDrawBoxColor(TextdrawPURGE1, -1);
	TextDrawUseBox(TextdrawPURGE1, 1);
	TextDrawSetProportional(TextdrawPURGE1, 1);
	TextDrawSetSelectable(TextdrawPURGE1, 0);
	
	TextdrawPURGE2 = TextDrawCreate(172.000000, 126.000000, "Preview_Model");
	TextDrawFont(TextdrawPURGE2, 5);
	TextDrawLetterSize(TextdrawPURGE2, 0.600000, 2.000000);
	TextDrawTextSize(TextdrawPURGE2, 70.500000, 64.000000);
	TextDrawSetOutline(TextdrawPURGE2, 0);
	TextDrawSetShadow(TextdrawPURGE2, 0);
	TextDrawAlignment(TextdrawPURGE2, 1);
	TextDrawColor(TextdrawPURGE2, -1);
	TextDrawBackgroundColor(TextdrawPURGE2, 0);
	TextDrawBoxColor(TextdrawPURGE2, 255);
	TextDrawUseBox(TextdrawPURGE2, 0);
	TextDrawSetProportional(TextdrawPURGE2, 1);
	TextDrawSetSelectable(TextdrawPURGE2, 0);
	TextDrawSetPreviewModel(TextdrawPURGE2, 11704);
	TextDrawSetPreviewRot(TextdrawPURGE2, 0.000000, 0.000000, -20.000000, 1.000000);
	TextDrawSetPreviewVehCol(TextdrawPURGE2, 1, 1);
	
	TextdrawPURGE3 = TextDrawCreate(233.000000, 141.000000, "ANNOUNCEMENT");
	TextDrawFont(TextdrawPURGE3, 2);
	TextDrawLetterSize(TextdrawPURGE3, 0.600000, 2.000000);
	TextDrawTextSize(TextdrawPURGE3, 400.000000, 17.000000);
	TextDrawSetOutline(TextdrawPURGE3, 1);
	TextDrawSetShadow(TextdrawPURGE3, 0);
	TextDrawAlignment(TextdrawPURGE3, 1);
	TextDrawColor(TextdrawPURGE3, -16776961);
	TextDrawBackgroundColor(TextdrawPURGE3, 255);
	TextDrawBoxColor(TextdrawPURGE3, 50);
	TextDrawUseBox(TextdrawPURGE3, 0);
	TextDrawSetProportional(TextdrawPURGE3, 1);
	TextDrawSetSelectable(TextdrawPURGE3, 0);
	
	TextdrawPURGE4 = TextDrawCreate(282.000000, 135.000000, "Preview_Model");
	TextDrawFont(TextdrawPURGE4, 5);
	TextDrawLetterSize(TextdrawPURGE4, 0.600000, 2.000000);
	TextDrawTextSize(TextdrawPURGE4, 77.500000, 111.500000);
	TextDrawSetOutline(TextdrawPURGE4, 0);
	TextDrawSetShadow(TextdrawPURGE4, 0);
	TextDrawAlignment(TextdrawPURGE4, 1);
	TextDrawColor(TextdrawPURGE4, -1);
	TextDrawBackgroundColor(TextdrawPURGE4, 0);
	TextDrawBoxColor(TextdrawPURGE4, 255);
	TextDrawUseBox(TextdrawPURGE4, 0);
	TextDrawSetProportional(TextdrawPURGE4, 1);
	TextDrawSetSelectable(TextdrawPURGE4, 0);
	TextDrawSetPreviewModel(TextdrawPURGE4, 2045);
	TextDrawSetPreviewRot(TextdrawPURGE4, 47.000000, 51.000000, 90.000000, 1.000000);
	TextDrawSetPreviewVehCol(TextdrawPURGE4, 1, 1);
	
	TextdrawPURGE5 = TextDrawCreate(272.000000, 152.000000, "Preview_Model");
	TextDrawFont(TextdrawPURGE5, 5);
	TextDrawLetterSize(TextdrawPURGE5, 0.600000, 2.000000);
	TextDrawTextSize(TextdrawPURGE5, 77.500000, 111.500000);
	TextDrawSetOutline(TextdrawPURGE5, 0);
	TextDrawSetShadow(TextdrawPURGE5, 0);
	TextDrawAlignment(TextdrawPURGE5, 1);
	TextDrawColor(TextdrawPURGE5, -1);
	TextDrawBackgroundColor(TextdrawPURGE5, 0);
	TextDrawBoxColor(TextdrawPURGE5, 255);
	TextDrawUseBox(TextdrawPURGE5, 0);
	TextDrawSetProportional(TextdrawPURGE5, 1);
	TextDrawSetSelectable(TextdrawPURGE5, 0);
	TextDrawSetPreviewModel(TextdrawPURGE5, 19914);
	TextDrawSetPreviewRot(TextdrawPURGE5, 19.000000, -38.000000, 1.000000, 1.000000);
	TextDrawSetPreviewVehCol(TextdrawPURGE5, 1, 1);
	
	TextdrawPURGE6 = TextDrawCreate(328.000000, 182.000000, "THIS IS THE Manila Reality GOVERMENT");
	TextDrawFont(TextdrawPURGE6, 2);
	TextDrawLetterSize(TextdrawPURGE6, 0.349999, 2.000000);
	TextDrawTextSize(TextdrawPURGE6, 845.000000, 282.000000);
	TextDrawSetOutline(TextdrawPURGE6, 1);
	TextDrawSetShadow(TextdrawPURGE6, 0);
	TextDrawAlignment(TextdrawPURGE6, 2);
	TextDrawColor(TextdrawPURGE6, -1);
	TextDrawBackgroundColor(TextdrawPURGE6, 255);
	TextDrawBoxColor(TextdrawPURGE6, 50);
	TextDrawUseBox(TextdrawPURGE6, 0);
	TextDrawSetProportional(TextdrawPURGE6, 1);
	TextDrawSetSelectable(TextdrawPURGE6, 0);
	
	TextdrawPURGE7 = TextDrawCreate(143.000000, 241.000000, "MGA NASASAKUPAN NG GOBYERNO AY HINDI PWEDENG RUMESPONDE HABANG MAY PURGE ANG SYUDAD");
	TextDrawFont(TextdrawPURGE7, 2);
	TextDrawLetterSize(TextdrawPURGE7, 0.170833, 3.200000);
	TextDrawTextSize(TextdrawPURGE7, 607.000000, 17.000000);
	TextDrawSetOutline(TextdrawPURGE7, 1);
	TextDrawSetShadow(TextdrawPURGE7, 0);
	TextDrawAlignment(TextdrawPURGE7, 1);
	TextDrawColor(TextdrawPURGE7, 255);
	TextDrawBackgroundColor(TextdrawPURGE7, 0);
	TextDrawBoxColor(TextdrawPURGE7, 50);
	TextDrawUseBox(TextdrawPURGE7, 0);
	TextDrawSetProportional(TextdrawPURGE7, 1);
	TextDrawSetSelectable(TextdrawPURGE7, 0);
	
	TextdrawPURGE8 = TextDrawCreate(163.000000, 265.000000, "ETO NA ANG PAGKAKATAON MO NA PATAYIN ANG NG BUSTED SAYO AT UMAGAW SA  JOWA MO");
	TextDrawFont(TextdrawPURGE8, 2);
	TextDrawLetterSize(TextdrawPURGE8, 0.162498, 3.399996);
	TextDrawTextSize(TextdrawPURGE8, 790.000000, 102.000000);
	TextDrawSetOutline(TextdrawPURGE8, 1);
	TextDrawSetShadow(TextdrawPURGE8, 0);
	TextDrawAlignment(TextdrawPURGE8, 1);
	TextDrawColor(TextdrawPURGE8, 255);
	TextDrawBackgroundColor(TextdrawPURGE8, 0);
	TextDrawBoxColor(TextdrawPURGE8, 50);
	TextDrawUseBox(TextdrawPURGE8, 0);
	TextDrawSetProportional(TextdrawPURGE8, 1);
	TextDrawSetSelectable(TextdrawPURGE8, 0);
	
	TextdrawPURGE9 = TextDrawCreate(424.000000, 126.000000, "Preview_Model");
	TextDrawFont(TextdrawPURGE9, 5);
	TextDrawLetterSize(TextdrawPURGE9, 0.600000, 2.000000);
	TextDrawTextSize(TextdrawPURGE9, 70.500000, 64.000000);
	TextDrawSetOutline(TextdrawPURGE9, 0);
	TextDrawSetShadow(TextdrawPURGE9, 0);
	TextDrawAlignment(TextdrawPURGE9, 1);
	TextDrawColor(TextdrawPURGE9, -1);
	TextDrawBackgroundColor(TextdrawPURGE9, 0);
	TextDrawBoxColor(TextdrawPURGE9, 255);
	TextDrawUseBox(TextdrawPURGE9, 0);
	TextDrawSetProportional(TextdrawPURGE9, 1);
	TextDrawSetSelectable(TextdrawPURGE9, 0);
	TextDrawSetPreviewModel(TextdrawPURGE9, 11704);
	TextDrawSetPreviewRot(TextdrawPURGE9, 0.000000, 0.000000, -20.000000, 1.000000);
	TextDrawSetPreviewVehCol(TextdrawPURGE9, 1, 1);
	
	TextdrawPURGE10 = TextDrawCreate(155.000000, 216.000000, "LAHAT NG CRIMEN,PATI ANG PAG PATAY AY MAGIGING LEGAL SA LOOB NG ISANG BUONG ARAW");
	TextDrawFont(TextdrawPURGE10, 2);
	TextDrawLetterSize(TextdrawPURGE10, 0.174998, 2.950000);
	TextDrawTextSize(TextdrawPURGE10, 607.000000, 17.000000);
	TextDrawSetOutline(TextdrawPURGE10, 1);
	TextDrawSetShadow(TextdrawPURGE10, 0);
	TextDrawAlignment(TextdrawPURGE10, 1);
	TextDrawColor(TextdrawPURGE10, 255);
	TextDrawBackgroundColor(TextdrawPURGE10, 0);
	TextDrawBoxColor(TextdrawPURGE10, 50);
	TextDrawUseBox(TextdrawPURGE10, 0);
	TextDrawSetProportional(TextdrawPURGE10, 1);
	TextDrawSetSelectable(TextdrawPURGE10, 0);

	//LTO_FAIL
	LTO_FAIL_0 = TextDrawCreate(318.000000, 187.000000, "_");
	TextDrawFont(LTO_FAIL_0, 1);
	TextDrawLetterSize(LTO_FAIL_0, 0.933332, 9.100056);
	TextDrawTextSize(LTO_FAIL_0, 315.500000, 163.500000);
	TextDrawSetOutline(LTO_FAIL_0, 1);
	TextDrawSetShadow(LTO_FAIL_0, 0);
	TextDrawAlignment(LTO_FAIL_0, 2);
	TextDrawColor(LTO_FAIL_0, -1);
	TextDrawBackgroundColor(LTO_FAIL_0, 255);
	TextDrawBoxColor(LTO_FAIL_0, 1296911784);
	TextDrawUseBox(LTO_FAIL_0, 1);
	TextDrawSetProportional(LTO_FAIL_0, 1);
	TextDrawSetSelectable(LTO_FAIL_0, 0);

	LTO_FAIL_1 = TextDrawCreate(260.000000, 184.000000, "DMV DRIVING TEST");
	TextDrawFont(LTO_FAIL_1, 2);
	TextDrawLetterSize(LTO_FAIL_1, 0.324998, 2.349998);
	TextDrawTextSize(LTO_FAIL_1, 505.000000, 17.000000);
	TextDrawSetOutline(LTO_FAIL_1, 1);
	TextDrawSetShadow(LTO_FAIL_1, 0);
	TextDrawAlignment(LTO_FAIL_1, 1);
	TextDrawColor(LTO_FAIL_1, -1);
	TextDrawBackgroundColor(LTO_FAIL_1, 255);
	TextDrawBoxColor(LTO_FAIL_1, 50);
	TextDrawUseBox(LTO_FAIL_1, 0);
	TextDrawSetProportional(LTO_FAIL_1, 1);
	TextDrawSetSelectable(LTO_FAIL_1, 0);

	LTO_FAIL_2 = TextDrawCreate(239.000000, 206.000000, "ld_drv:naward");
	TextDrawFont(LTO_FAIL_2, 4);
	TextDrawLetterSize(LTO_FAIL_2, 0.600000, 2.000000);
	TextDrawTextSize(LTO_FAIL_2, 43.500000, 48.500000);
	TextDrawSetOutline(LTO_FAIL_2, 1);
	TextDrawSetShadow(LTO_FAIL_2, 0);
	TextDrawAlignment(LTO_FAIL_2, 1);
	TextDrawColor(LTO_FAIL_2, -1);
	TextDrawBackgroundColor(LTO_FAIL_2, 255);
	TextDrawBoxColor(LTO_FAIL_2, 50);
	TextDrawUseBox(LTO_FAIL_2, 1);
	TextDrawSetProportional(LTO_FAIL_2, 1);
	TextDrawSetSelectable(LTO_FAIL_2, 0);

	LTO_FAIL_3 = TextDrawCreate(288.000000, 211.000000, "TEST failed");
	TextDrawFont(LTO_FAIL_3, 3);
	TextDrawLetterSize(LTO_FAIL_3, 0.454165, 3.299998);
	TextDrawTextSize(LTO_FAIL_3, 400.000000, 17.000000);
	TextDrawSetOutline(LTO_FAIL_3, 1);
	TextDrawSetShadow(LTO_FAIL_3, 0);
	TextDrawAlignment(LTO_FAIL_3, 1);
	TextDrawColor(LTO_FAIL_3, -16776961);
	TextDrawBackgroundColor(LTO_FAIL_3, 255);
	TextDrawBoxColor(LTO_FAIL_3, 50);
	TextDrawUseBox(LTO_FAIL_3, 0);
	TextDrawSetProportional(LTO_FAIL_3, 1);
	TextDrawSetSelectable(LTO_FAIL_3, 0);

	LTO_FAIL_4 = TextDrawCreate(282.000000, 250.000000, "Try again later");
	TextDrawFont(LTO_FAIL_4, 1);
	TextDrawLetterSize(LTO_FAIL_4, 0.270833, 1.399999);
	TextDrawTextSize(LTO_FAIL_4, 400.000000, 17.000000);
	TextDrawSetOutline(LTO_FAIL_4, 1);
	TextDrawSetShadow(LTO_FAIL_4, 1);
	TextDrawAlignment(LTO_FAIL_4, 1);
	TextDrawColor(LTO_FAIL_4, 255);
	TextDrawBackgroundColor(LTO_FAIL_4, 0);
	TextDrawBoxColor(LTO_FAIL_4, 50);
	TextDrawUseBox(LTO_FAIL_4, 0);
	TextDrawSetProportional(LTO_FAIL_4, 1);
	TextDrawSetSelectable(LTO_FAIL_4, 0);

	LTO_FAIL_5 = TextDrawCreate(318.000000, 184.000000, "_");
	TextDrawFont(LTO_FAIL_5, 1);
	TextDrawLetterSize(LTO_FAIL_5, 0.933332, -0.099996);
	TextDrawTextSize(LTO_FAIL_5, 315.500000, 163.000000);
	TextDrawSetOutline(LTO_FAIL_5, 1);
	TextDrawSetShadow(LTO_FAIL_5, 0);
	TextDrawAlignment(LTO_FAIL_5, 2);
	TextDrawColor(LTO_FAIL_5, -1);
	TextDrawBackgroundColor(LTO_FAIL_5, 255);
	TextDrawBoxColor(LTO_FAIL_5, 255);
	TextDrawUseBox(LTO_FAIL_5, 1);
	TextDrawSetProportional(LTO_FAIL_5, 1);
	TextDrawSetSelectable(LTO_FAIL_5, 0);

	//LTO_PASS
	LTO_PASS_0 = TextDrawCreate(318.000000, 187.000000, "_");
	TextDrawFont(LTO_PASS_0, 1);
	TextDrawLetterSize(LTO_PASS_0, 0.933332, 9.100056);
	TextDrawTextSize(LTO_PASS_0, 315.500000, 163.500000);
	TextDrawSetOutline(LTO_PASS_0, 1);
	TextDrawSetShadow(LTO_PASS_0, 0);
	TextDrawAlignment(LTO_PASS_0, 2);
	TextDrawColor(LTO_PASS_0, -1);
	TextDrawBackgroundColor(LTO_PASS_0, 255);
	TextDrawBoxColor(LTO_PASS_0, 1296911784);
	TextDrawUseBox(LTO_PASS_0, 1);
	TextDrawSetProportional(LTO_PASS_0, 1);
	TextDrawSetSelectable(LTO_PASS_0, 0);

	LTO_PASS_1 = TextDrawCreate(260.000000, 184.000000, "DMV DRIVING TEST");
	TextDrawFont(LTO_PASS_1, 2);
	TextDrawLetterSize(LTO_PASS_1, 0.324998, 2.349998);
	TextDrawTextSize(LTO_PASS_1, 505.000000, 17.000000);
	TextDrawSetOutline(LTO_PASS_1, 1);
	TextDrawSetShadow(LTO_PASS_1, 0);
	TextDrawAlignment(LTO_PASS_1, 1);
	TextDrawColor(LTO_PASS_1, -1);
	TextDrawBackgroundColor(LTO_PASS_1, 255);
	TextDrawBoxColor(LTO_PASS_1, 50);
	TextDrawUseBox(LTO_PASS_1, 0);
	TextDrawSetProportional(LTO_PASS_1, 1);
	TextDrawSetSelectable(LTO_PASS_1, 0);

	LTO_PASS_2 = TextDrawCreate(239.000000, 206.000000, "ld_drv:gold");
	TextDrawFont(LTO_PASS_2, 4);
	TextDrawLetterSize(LTO_PASS_2, 0.600000, 2.000000);
	TextDrawTextSize(LTO_PASS_2, 43.500000, 48.500000);
	TextDrawSetOutline(LTO_PASS_2, 1);
	TextDrawSetShadow(LTO_PASS_2, 0);
	TextDrawAlignment(LTO_PASS_2, 1);
	TextDrawColor(LTO_PASS_2, -1);
	TextDrawBackgroundColor(LTO_PASS_2, 255);
	TextDrawBoxColor(LTO_PASS_2, 50);
	TextDrawUseBox(LTO_PASS_2, 1);
	TextDrawSetProportional(LTO_PASS_2, 1);
	TextDrawSetSelectable(LTO_PASS_2, 0);

	LTO_PASS_3 = TextDrawCreate(288.000000, 211.000000, "TEST PASSED");
	TextDrawFont(LTO_PASS_3, 3);
	TextDrawLetterSize(LTO_PASS_3, 0.454165, 3.299998);
	TextDrawTextSize(LTO_PASS_3, 400.000000, 17.000000);
	TextDrawSetOutline(LTO_PASS_3, 1);
	TextDrawSetShadow(LTO_PASS_3, 0);
	TextDrawAlignment(LTO_PASS_3, 1);
	TextDrawColor(LTO_PASS_3, -3861761);
	TextDrawBackgroundColor(LTO_PASS_3, 255);
	TextDrawBoxColor(LTO_PASS_3, 50);
	TextDrawUseBox(LTO_PASS_3, 0);
	TextDrawSetProportional(LTO_PASS_3, 1);
	TextDrawSetSelectable(LTO_PASS_3, 0);

	LTO_PASS_4 = TextDrawCreate(281.000000, 245.000000, "Congrats now you have");
	TextDrawFont(LTO_PASS_4, 2);
	TextDrawLetterSize(LTO_PASS_4, 0.120833, 2.249999);
	TextDrawTextSize(LTO_PASS_4, 400.000000, 17.000000);
	TextDrawSetOutline(LTO_PASS_4, 1);
	TextDrawSetShadow(LTO_PASS_4, 1);
	TextDrawAlignment(LTO_PASS_4, 1);
	TextDrawColor(LTO_PASS_4, 255);
	TextDrawBackgroundColor(LTO_PASS_4, 0);
	TextDrawBoxColor(LTO_PASS_4, 50);
	TextDrawUseBox(LTO_PASS_4, 0);
	TextDrawSetProportional(LTO_PASS_4, 1);
	TextDrawSetSelectable(LTO_PASS_4, 0);

	LTO_PASS_5 = TextDrawCreate(351.000000, 246.000000, "DRIVER LICENSE");
	TextDrawFont(LTO_PASS_5, 2);
	TextDrawLetterSize(LTO_PASS_5, 0.129166, 1.999999);
	TextDrawTextSize(LTO_PASS_5, 400.000000, 17.000000);
	TextDrawSetOutline(LTO_PASS_5, 1);
	TextDrawSetShadow(LTO_PASS_5, 2);
	TextDrawAlignment(LTO_PASS_5, 1);
	TextDrawColor(LTO_PASS_5, -3861761);
	TextDrawBackgroundColor(LTO_PASS_5, 81);
	TextDrawBoxColor(LTO_PASS_5, 50);
	TextDrawUseBox(LTO_PASS_5, 0);
	TextDrawSetProportional(LTO_PASS_5, 1);
	TextDrawSetSelectable(LTO_PASS_5, 0);

	LTO_PASS_6 = TextDrawCreate(318.000000, 184.000000, "_");
	TextDrawFont(LTO_PASS_6, 1);
	TextDrawLetterSize(LTO_PASS_6, 0.933332, -0.099996);
	TextDrawTextSize(LTO_PASS_6, 315.500000, 163.000000);
	TextDrawSetOutline(LTO_PASS_6, 1);
	TextDrawSetShadow(LTO_PASS_6, 0);
	TextDrawAlignment(LTO_PASS_6, 2);
	TextDrawColor(LTO_PASS_6, -1);
	TextDrawBackgroundColor(LTO_PASS_6, 255);
	TextDrawBoxColor(LTO_PASS_6, 255);
	TextDrawUseBox(LTO_PASS_6, 1);
	TextDrawSetProportional(LTO_PASS_6, 1);
	TextDrawSetSelectable(LTO_PASS_6, 0);


	//HOUSE_OWNED
	HouedOnear_0 = TextDrawCreate(83.000000, 239.000000, "_");
	TextDrawFont(HouedOnear_0, 1);
	TextDrawLetterSize(HouedOnear_0, 0.600000, 8.300004);
	TextDrawTextSize(HouedOnear_0, 363.500000, 140.000000);
	TextDrawSetOutline(HouedOnear_0, 1);
	TextDrawSetShadow(HouedOnear_0, 0);
	TextDrawAlignment(HouedOnear_0, 2);
	TextDrawColor(HouedOnear_0, -1);
	TextDrawBackgroundColor(HouedOnear_0, 255);
	TextDrawBoxColor(HouedOnear_0, 135);
	TextDrawUseBox(HouedOnear_0, 1);
	TextDrawSetProportional(HouedOnear_0, 1);
	TextDrawSetSelectable(HouedOnear_0, 0);
	
	HouedOnear_1 = TextDrawCreate(81.000000, 241.000000, "Property Owned");
	TextDrawFont(HouedOnear_1, 1);
	TextDrawLetterSize(HouedOnear_1, 0.408333, 1.899999);
	TextDrawTextSize(HouedOnear_1, 400.000000, 192.000000);
	TextDrawSetOutline(HouedOnear_1, 1);
	TextDrawSetShadow(HouedOnear_1, 0);
	TextDrawAlignment(HouedOnear_1, 2);
	TextDrawColor(HouedOnear_1, -16776961);
	TextDrawBackgroundColor(HouedOnear_1, 255);
	TextDrawBoxColor(HouedOnear_1, 50);
	TextDrawUseBox(HouedOnear_1, 0);
	TextDrawSetProportional(HouedOnear_1, 1);
	TextDrawSetSelectable(HouedOnear_1, 0);
	
	HouedOnear_2 = TextDrawCreate(83.000000, 239.000000, "_");
	TextDrawFont(HouedOnear_2, 1);
	TextDrawLetterSize(HouedOnear_2, 0.600000, -0.299995);
	TextDrawTextSize(HouedOnear_2, 363.500000, 140.000000);
	TextDrawSetOutline(HouedOnear_2, 1);
	TextDrawSetShadow(HouedOnear_2, 0);
	TextDrawAlignment(HouedOnear_2, 2);
	TextDrawColor(HouedOnear_2, -1);
	TextDrawBackgroundColor(HouedOnear_2, 255);
	TextDrawBoxColor(HouedOnear_2, -1);
	TextDrawUseBox(HouedOnear_2, 1);
	TextDrawSetProportional(HouedOnear_2, 1);
	TextDrawSetSelectable(HouedOnear_2, 0);
	
	HouedOnear_3 = TextDrawCreate(56.000000, 263.000000, "Owned By:");
	TextDrawFont(HouedOnear_3, 2);
	TextDrawLetterSize(HouedOnear_3, 0.179165, 1.799998);
	TextDrawTextSize(HouedOnear_3, 400.000000, 17.000000);
	TextDrawSetOutline(HouedOnear_3, 1);
	TextDrawSetShadow(HouedOnear_3, 0);
	TextDrawAlignment(HouedOnear_3, 3);
	TextDrawColor(HouedOnear_3, -1);
	TextDrawBackgroundColor(HouedOnear_3, 255);
	TextDrawBoxColor(HouedOnear_3, 50);
	TextDrawUseBox(HouedOnear_3, 0);
	TextDrawSetProportional(HouedOnear_3, 1);
	TextDrawSetSelectable(HouedOnear_3, 0);
	
	HouedOnear_4 = TextDrawCreate(57.000000, 263.000000, "Triton_Luxxxxxxx");
	TextDrawFont(HouedOnear_4, 2);
	TextDrawLetterSize(HouedOnear_4, 0.179165, 1.799998);
	TextDrawTextSize(HouedOnear_4, 400.000000, 17.000000);
	TextDrawSetOutline(HouedOnear_4, 1);
	TextDrawSetShadow(HouedOnear_4, 0);
	TextDrawAlignment(HouedOnear_4, 1);
	TextDrawColor(HouedOnear_4, -2686721);
	TextDrawBackgroundColor(HouedOnear_4, 255);
	TextDrawBoxColor(HouedOnear_4, 50);
	TextDrawUseBox(HouedOnear_4, 0);
	TextDrawSetProportional(HouedOnear_4, 1);
	TextDrawSetSelectable(HouedOnear_4, 0);
	
	HouedOnear_5 = TextDrawCreate(52.000000, 280.000000, "ADDRESS:");
	TextDrawFont(HouedOnear_5, 2);
	TextDrawLetterSize(HouedOnear_5, 0.179165, 1.799998);
	TextDrawTextSize(HouedOnear_5, 400.000000, 17.000000);
	TextDrawSetOutline(HouedOnear_5, 1);
	TextDrawSetShadow(HouedOnear_5, 0);
	TextDrawAlignment(HouedOnear_5, 3);
	TextDrawColor(HouedOnear_5, -1);
	TextDrawBackgroundColor(HouedOnear_5, 255);
	TextDrawBoxColor(HouedOnear_5, 50);
	TextDrawUseBox(HouedOnear_5, 0);
	TextDrawSetProportional(HouedOnear_5, 1);
	TextDrawSetSelectable(HouedOnear_5, 0);
	
	HouedOnear_6 = TextDrawCreate(53.000000, 280.000000, "6969 Downtown Los Santos");
	TextDrawFont(HouedOnear_6, 2);
	TextDrawLetterSize(HouedOnear_6, 0.149996, 1.799998);
	TextDrawTextSize(HouedOnear_6, 400.000000, 17.000000);
	TextDrawSetOutline(HouedOnear_6, 1);
	TextDrawSetShadow(HouedOnear_6, 0);
	TextDrawAlignment(HouedOnear_6, 1);
	TextDrawColor(HouedOnear_6, 1097458175);
	TextDrawBackgroundColor(HouedOnear_6, 255);
	TextDrawBoxColor(HouedOnear_6, 50);
	TextDrawUseBox(HouedOnear_6, 0);
	TextDrawSetProportional(HouedOnear_6, 1);
	TextDrawSetSelectable(HouedOnear_6, 0);
	
	HouedOnear_8 = TextDrawCreate(37.000000, 302.000000, "Press ~G~Y ~W~ to enter");
	TextDrawFont(HouedOnear_8, 2);
	TextDrawLetterSize(HouedOnear_8, 0.204163, 1.199998);
	TextDrawTextSize(HouedOnear_8, 400.000000, 17.000000);
	TextDrawSetOutline(HouedOnear_8, 1);
	TextDrawSetShadow(HouedOnear_8, 0);
	TextDrawAlignment(HouedOnear_8, 1);
	TextDrawColor(HouedOnear_8, -1);
	TextDrawBackgroundColor(HouedOnear_8, 255);
	TextDrawBoxColor(HouedOnear_8, 50);
	TextDrawUseBox(HouedOnear_8, 0);
	TextDrawSetProportional(HouedOnear_8, 1);
	TextDrawSetSelectable(HouedOnear_8, 0);



	//LOCKER NEAR
	Locker_Near0 = TextDrawCreate(80.000000, 260.000000, "_");
	TextDrawFont(Locker_Near0, 1);
	TextDrawLetterSize(Locker_Near0, 0.600000, 7.300003);
	TextDrawTextSize(Locker_Near0, 353.500000, 140.000000);
	TextDrawSetOutline(Locker_Near0, 1);
	TextDrawSetShadow(Locker_Near0, 0);
	TextDrawAlignment(Locker_Near0, 2);
	TextDrawColor(Locker_Near0, -1);
	TextDrawBackgroundColor(Locker_Near0, 255);
	TextDrawBoxColor(Locker_Near0, 135);
	TextDrawUseBox(Locker_Near0, 1);
	TextDrawSetProportional(Locker_Near0, 1);
	TextDrawSetSelectable(Locker_Near0, 0);
	
	Locker_Near1 = TextDrawCreate(80.000000, 260.000000, "_");
	TextDrawFont(Locker_Near1, 1);
	TextDrawLetterSize(Locker_Near1, 0.600000, -0.349996);
	TextDrawTextSize(Locker_Near1, 353.500000, 140.000000);
	TextDrawSetOutline(Locker_Near1, 1);
	TextDrawSetShadow(Locker_Near1, 0);
	TextDrawAlignment(Locker_Near1, 2);
	TextDrawColor(Locker_Near1, -1);
	TextDrawBackgroundColor(Locker_Near1, 255);
	TextDrawBoxColor(Locker_Near1, 1644232703);
	TextDrawUseBox(Locker_Near1, 1);
	TextDrawSetProportional(Locker_Near1, 1);
	TextDrawSetSelectable(Locker_Near1, 0);
	
	Locker_Near2 = TextDrawCreate(32.000000, 259.000000, "YOUR LOCKER");
	TextDrawFont(Locker_Near2, 2);
	TextDrawLetterSize(Locker_Near2, 0.325000, 1.500000);
	TextDrawTextSize(Locker_Near2, 400.000000, 17.000000);
	TextDrawSetOutline(Locker_Near2, 1);
	TextDrawSetShadow(Locker_Near2, 0);
	TextDrawAlignment(Locker_Near2, 1);
	TextDrawColor(Locker_Near2, -764862721);
	TextDrawBackgroundColor(Locker_Near2, 255);
	TextDrawBoxColor(Locker_Near2, 50);
	TextDrawUseBox(Locker_Near2, 0);
	TextDrawSetProportional(Locker_Near2, 1);
	TextDrawSetSelectable(Locker_Near2, 0);
	
	Locker_Near3 = TextDrawCreate(15.000000, 312.000000, "Use /Locker to use");
	TextDrawFont(Locker_Near3, 2);
	TextDrawLetterSize(Locker_Near3, 0.304166, 1.500000);
	TextDrawTextSize(Locker_Near3, 400.000000, 17.000000);
	TextDrawSetOutline(Locker_Near3, 1);
	TextDrawSetShadow(Locker_Near3, 0);
	TextDrawAlignment(Locker_Near3, 1);
	TextDrawColor(Locker_Near3, -1);
	TextDrawBackgroundColor(Locker_Near3, 255);
	TextDrawBoxColor(Locker_Near3, 50);
	TextDrawUseBox(Locker_Near3, 0);
	TextDrawSetProportional(Locker_Near3, 1);
	TextDrawSetSelectable(Locker_Near3, 0);
	
	Locker_Near4 = TextDrawCreate(75.000000, 285.000000, "ECPD LOCKER");
	TextDrawFont(Locker_Near4, 2);
	TextDrawLetterSize(Locker_Near4, 0.325000, 1.500000);
	TextDrawTextSize(Locker_Near4, 400.000000, 147.000000);
	TextDrawSetOutline(Locker_Near4, 1);
	TextDrawSetShadow(Locker_Near4, 0);
	TextDrawAlignment(Locker_Near4, 2);
	TextDrawColor(Locker_Near4, 65535);
	TextDrawBackgroundColor(Locker_Near4, 255);
	TextDrawBoxColor(Locker_Near4, 50);
	TextDrawUseBox(Locker_Near4, 0);
	TextDrawSetProportional(Locker_Near4, 1);
	TextDrawSetSelectable(Locker_Near4, 0);
	
	Locker_Near5 = TextDrawCreate(138.000000, 244.000000, "HUD:radar_gangb");
	TextDrawFont(Locker_Near5, 4);
	TextDrawLetterSize(Locker_Near5, 0.600000, 2.000000);
	TextDrawTextSize(Locker_Near5, 27.000000, 31.000000);
	TextDrawSetOutline(Locker_Near5, 1);
	TextDrawSetShadow(Locker_Near5, 0);
	TextDrawAlignment(Locker_Near5, 1);
	TextDrawColor(Locker_Near5, -1);
	TextDrawBackgroundColor(Locker_Near5, 255);
	TextDrawBoxColor(Locker_Near5, 50);
	TextDrawUseBox(Locker_Near5, 1);
	TextDrawSetProportional(Locker_Near5, 1);
	TextDrawSetSelectable(Locker_Near5, 0);


	//error
	Error_0 = TextDrawCreate(74.000000, 308.000000, "_");
	TextDrawFont(Error_0, 1);
	TextDrawLetterSize(Error_0, 0.600000, 1.750003);
	TextDrawTextSize(Error_0, 298.500000, 125.000000);
	TextDrawSetOutline(Error_0, 1);
	TextDrawSetShadow(Error_0, 0);
	TextDrawAlignment(Error_0, 2);
	TextDrawColor(Error_0, -1);
	TextDrawBackgroundColor(Error_0, 255);
	TextDrawBoxColor(Error_0, 135);
	TextDrawUseBox(Error_0, 1);
	TextDrawSetProportional(Error_0, 1);
	TextDrawSetSelectable(Error_0, 0);
	
	Error_1 = TextDrawCreate(21.000000, 308.000000, "ERROR USE ~Y~/HELP");
	TextDrawFont(Error_1, 2);
	TextDrawLetterSize(Error_1, 0.275000, 1.700000);
	TextDrawTextSize(Error_1, 400.000000, 17.000000);
	TextDrawSetOutline(Error_1, 1);
	TextDrawSetShadow(Error_1, 0);
	TextDrawAlignment(Error_1, 1);
	TextDrawColor(Error_1, -1);
	TextDrawBackgroundColor(Error_1, 255);
	TextDrawBoxColor(Error_1, 50);
	TextDrawUseBox(Error_1, 0);
	TextDrawSetProportional(Error_1, 1);
	TextDrawSetSelectable(Error_1, 0);
	
	Error_2 = TextDrawCreate(74.000000, 306.000000, "_");
	TextDrawFont(Error_2, 1);
	TextDrawLetterSize(Error_2, 0.600000, -0.299995);
	TextDrawTextSize(Error_2, 290.000000, 125.000000);
	TextDrawSetOutline(Error_2, 1);
	TextDrawSetShadow(Error_2, 0);
	TextDrawAlignment(Error_2, 2);
	TextDrawColor(Error_2, -16776961);
	TextDrawBackgroundColor(Error_2, -16776961);
	TextDrawBoxColor(Error_2, -16776961);
	TextDrawUseBox(Error_2, 1);
	TextDrawSetProportional(Error_2, 1);
	TextDrawSetSelectable(Error_2, 0);
	
	Error_3 = TextDrawCreate(132.000000, 297.000000, "ld_chat:thumbdn");
	TextDrawFont(Error_3, 4);
	TextDrawLetterSize(Error_3, 0.600000, 2.000000);
	TextDrawTextSize(Error_3, 17.000000, 17.000000);
	TextDrawSetOutline(Error_3, 1);
	TextDrawSetShadow(Error_3, 0);
	TextDrawAlignment(Error_3, 1);
	TextDrawColor(Error_3, -1);
	TextDrawBackgroundColor(Error_3, 255);
	TextDrawBoxColor(Error_3, 50);
	TextDrawUseBox(Error_3, 1);
	TextDrawSetProportional(Error_3, 1);
	TextDrawSetSelectable(Error_3, 0);

	//PAYCHECK
	Paycheck_0 = TextDrawCreate(74.000000, 245.000000, "_");
	TextDrawFont(Paycheck_0, 1);
	TextDrawLetterSize(Paycheck_0, 0.600000, 8.950003);
	TextDrawTextSize(Paycheck_0, 298.500000, 125.000000);
	TextDrawSetOutline(Paycheck_0, 1);
	TextDrawSetShadow(Paycheck_0, 0);
	TextDrawAlignment(Paycheck_0, 2);
	TextDrawColor(Paycheck_0, -1);
	TextDrawBackgroundColor(Paycheck_0, 255);
	TextDrawBoxColor(Paycheck_0, 135);
	TextDrawUseBox(Paycheck_0, 1);
	TextDrawSetProportional(Paycheck_0, 1);
	TextDrawSetSelectable(Paycheck_0, 0);
	
	Paycheck_1 = TextDrawCreate(44.000000, 244.000000, "PAYCHECK");
	TextDrawFont(Paycheck_1, 2);
	TextDrawLetterSize(Paycheck_1, 0.275000, 1.700000);
	TextDrawTextSize(Paycheck_1, 400.000000, 17.000000);
	TextDrawSetOutline(Paycheck_1, 1);
	TextDrawSetShadow(Paycheck_1, 0);
	TextDrawAlignment(Paycheck_1, 1);
	TextDrawColor(Paycheck_1, -1);
	TextDrawBackgroundColor(Paycheck_1, 255);
	TextDrawBoxColor(Paycheck_1, 50);
	TextDrawUseBox(Paycheck_1, 0);
	TextDrawSetProportional(Paycheck_1, 1);
	TextDrawSetSelectable(Paycheck_1, 0);
	
	Paycheck_2 = TextDrawCreate(74.000000, 245.000000, "_");
	TextDrawFont(Paycheck_2, 1);
	TextDrawLetterSize(Paycheck_2, 0.600000, -0.299995);
	TextDrawTextSize(Paycheck_2, 290.000000, 125.000000);
	TextDrawSetOutline(Paycheck_2, 1);
	TextDrawSetShadow(Paycheck_2, 0);
	TextDrawAlignment(Paycheck_2, 2);
	TextDrawColor(Paycheck_2, -16776961);
	TextDrawBackgroundColor(Paycheck_2, 255);
	TextDrawBoxColor(Paycheck_2, -280821761);
	TextDrawUseBox(Paycheck_2, 1);
	TextDrawSetProportional(Paycheck_2, 1);
	TextDrawSetSelectable(Paycheck_2, 0);
	
	Paycheck_3 = TextDrawCreate(13.000000, 262.000000, "JOB PAY:");
	TextDrawFont(Paycheck_3, 2);
	TextDrawLetterSize(Paycheck_3, 0.187500, 1.250000);
	TextDrawTextSize(Paycheck_3, 400.000000, 17.000000);
	TextDrawSetOutline(Paycheck_3, 1);
	TextDrawSetShadow(Paycheck_3, 0);
	TextDrawAlignment(Paycheck_3, 1);
	TextDrawColor(Paycheck_3, -1);
	TextDrawBackgroundColor(Paycheck_3, 255);
	TextDrawBoxColor(Paycheck_3, 50);
	TextDrawUseBox(Paycheck_3, 0);
	TextDrawSetProportional(Paycheck_3, 1);
	TextDrawSetSelectable(Paycheck_3, 0);
	
	Paycheck_4 = TextDrawCreate(12.000000, 277.000000, "FACTION PAY:");
	TextDrawFont(Paycheck_4, 2);
	TextDrawLetterSize(Paycheck_4, 0.158333, 1.250000);
	TextDrawTextSize(Paycheck_4, 400.000000, 17.000000);
	TextDrawSetOutline(Paycheck_4, 1);
	TextDrawSetShadow(Paycheck_4, 0);
	TextDrawAlignment(Paycheck_4, 1);
	TextDrawColor(Paycheck_4, -1);
	TextDrawBackgroundColor(Paycheck_4, 255);
	TextDrawBoxColor(Paycheck_4, 50);
	TextDrawUseBox(Paycheck_4, 0);
	TextDrawSetProportional(Paycheck_4, 1);
	TextDrawSetSelectable(Paycheck_4, 0);
	
	Paycheck_5 = TextDrawCreate(12.000000, 293.000000, "OLD BAL:");
	TextDrawFont(Paycheck_5, 2);
	TextDrawLetterSize(Paycheck_5, 0.158333, 1.250000);
	TextDrawTextSize(Paycheck_5, 400.000000, 17.000000);
	TextDrawSetOutline(Paycheck_5, 1);
	TextDrawSetShadow(Paycheck_5, 0);
	TextDrawAlignment(Paycheck_5, 1);
	TextDrawColor(Paycheck_5, -1);
	TextDrawBackgroundColor(Paycheck_5, 255);
	TextDrawBoxColor(Paycheck_5, 50);
	TextDrawUseBox(Paycheck_5, 0);
	TextDrawSetProportional(Paycheck_5, 1);
	TextDrawSetSelectable(Paycheck_5, 0);
	
	Paycheck_6 = TextDrawCreate(12.000000, 308.000000, "NEW BAL:");
	TextDrawFont(Paycheck_6, 2);
	TextDrawLetterSize(Paycheck_6, 0.158333, 1.250000);
	TextDrawTextSize(Paycheck_6, 400.000000, 17.000000);
	TextDrawSetOutline(Paycheck_6, 1);
	TextDrawSetShadow(Paycheck_6, 0);
	TextDrawAlignment(Paycheck_6, 1);
	TextDrawColor(Paycheck_6, -1);
	TextDrawBackgroundColor(Paycheck_6, 255);
	TextDrawBoxColor(Paycheck_6, 50);
	TextDrawUseBox(Paycheck_6, 0);
	TextDrawSetProportional(Paycheck_6, 1);
	TextDrawSetSelectable(Paycheck_6, 0);
	
	Paycheck_7 = TextDrawCreate(50.000000, 262.000000, "50,000");
	TextDrawFont(Paycheck_7, 2);
	TextDrawLetterSize(Paycheck_7, 0.187500, 1.250000);
	TextDrawTextSize(Paycheck_7, 400.000000, 17.000000);
	TextDrawSetOutline(Paycheck_7, 1);
	TextDrawSetShadow(Paycheck_7, 0);
	TextDrawAlignment(Paycheck_7, 1);
	TextDrawColor(Paycheck_7, 16777215);
	TextDrawBackgroundColor(Paycheck_7, 255);
	TextDrawBoxColor(Paycheck_7, 50);
	TextDrawUseBox(Paycheck_7, 0);
	TextDrawSetProportional(Paycheck_7, 1);
	TextDrawSetSelectable(Paycheck_7, 0);
	
	Paycheck_8 = TextDrawCreate(58.000000, 277.000000, "100,000,000");
	TextDrawFont(Paycheck_8, 2);
	TextDrawLetterSize(Paycheck_8, 0.187500, 1.250000);
	TextDrawTextSize(Paycheck_8, 400.000000, 17.000000);
	TextDrawSetOutline(Paycheck_8, 1);
	TextDrawSetShadow(Paycheck_8, 0);
	TextDrawAlignment(Paycheck_8, 1);
	TextDrawColor(Paycheck_8, 16777215);
	TextDrawBackgroundColor(Paycheck_8, 255);
	TextDrawBoxColor(Paycheck_8, 50);
	TextDrawUseBox(Paycheck_8, 0);
	TextDrawSetProportional(Paycheck_8, 1);
	TextDrawSetSelectable(Paycheck_8, 0);
	
	Paycheck_9 = TextDrawCreate(44.000000, 293.000000, "200,000,000");
	TextDrawFont(Paycheck_9, 2);
	TextDrawLetterSize(Paycheck_9, 0.187500, 1.250000);
	TextDrawTextSize(Paycheck_9, 400.000000, 17.000000);
	TextDrawSetOutline(Paycheck_9, 1);
	TextDrawSetShadow(Paycheck_9, 0);
	TextDrawAlignment(Paycheck_9, 1);
	TextDrawColor(Paycheck_9, 16777215);
	TextDrawBackgroundColor(Paycheck_9, 255);
	TextDrawBoxColor(Paycheck_9, 50);
	TextDrawUseBox(Paycheck_9, 0);
	TextDrawSetProportional(Paycheck_9, 1);
	TextDrawSetSelectable(Paycheck_9, 0);
	
	Paycheck_10 = TextDrawCreate(44.000000, 308.000000, "500,000,000");
	TextDrawFont(Paycheck_10, 2);
	TextDrawLetterSize(Paycheck_10, 0.187500, 1.250000);
	TextDrawTextSize(Paycheck_10, 400.000000, 17.000000);
	TextDrawSetOutline(Paycheck_10, 1);
	TextDrawSetShadow(Paycheck_10, 0);
	TextDrawAlignment(Paycheck_10, 1);
	TextDrawColor(Paycheck_10, 16777215);
	TextDrawBackgroundColor(Paycheck_10, 255);
	TextDrawBoxColor(Paycheck_10, 50);
	TextDrawUseBox(Paycheck_10, 0);
	TextDrawSetProportional(Paycheck_10, 1);
	TextDrawSetSelectable(Paycheck_10, 0);
	
	Paycheck_11 = TextDrawCreate(96.000000, 242.000000, "Preview_Model");
	TextDrawFont(Paycheck_11, 5);
	TextDrawLetterSize(Paycheck_11, 0.600000, 2.000000);
	TextDrawTextSize(Paycheck_11, 89.000000, 100.500000);
	TextDrawSetOutline(Paycheck_11, 0);
	TextDrawSetShadow(Paycheck_11, 0);
	TextDrawAlignment(Paycheck_11, 1);
	TextDrawColor(Paycheck_11, -1);
	TextDrawBackgroundColor(Paycheck_11, 0);
	TextDrawBoxColor(Paycheck_11, 255);
	TextDrawUseBox(Paycheck_11, 0);
	TextDrawSetProportional(Paycheck_11, 1);
	TextDrawSetSelectable(Paycheck_11, 0);
	TextDrawSetPreviewModel(Paycheck_11, 2332);
	TextDrawSetPreviewRot(Paycheck_11, 0.000000, 0.000000, 180.000000, 1.000000);
	TextDrawSetPreviewVehCol(Paycheck_11, 1, 1);


	//HOUSE_NEAR
	HouseNear_0 = TextDrawCreate(89.000000, 266.000000, "_");
	TextDrawFont(HouseNear_0, 1);
	TextDrawLetterSize(HouseNear_0, 0.600000, 7.300003);
	TextDrawTextSize(HouseNear_0, 298.500000, 151.500000);
	TextDrawSetOutline(HouseNear_0, 1);
	TextDrawSetShadow(HouseNear_0, 0);
	TextDrawAlignment(HouseNear_0, 2);
	TextDrawColor(HouseNear_0, -1);
	TextDrawBackgroundColor(HouseNear_0, 255);
	TextDrawBoxColor(HouseNear_0, 135);
	TextDrawUseBox(HouseNear_0, 1);
	TextDrawSetProportional(HouseNear_0, 1);
	TextDrawSetSelectable(HouseNear_0, 0);
	
	HouseNear_1 = TextDrawCreate(24.000000, 267.000000, "Property For Sale");
	TextDrawFont(HouseNear_1, 1);
	TextDrawLetterSize(HouseNear_1, 0.408333, 1.899999);
	TextDrawTextSize(HouseNear_1, 445.000000, 17.000000);
	TextDrawSetOutline(HouseNear_1, 1);
	TextDrawSetShadow(HouseNear_1, 0);
	TextDrawAlignment(HouseNear_1, 1);
	TextDrawColor(HouseNear_1, 16711935);
	TextDrawBackgroundColor(HouseNear_1, 255);
	TextDrawBoxColor(HouseNear_1, 50);
	TextDrawUseBox(HouseNear_1, 0);
	TextDrawSetProportional(HouseNear_1, 1);
	TextDrawSetSelectable(HouseNear_1, 0);
	
	HouseNear_2 = TextDrawCreate(88.000000, 266.000000, "_");
	TextDrawFont(HouseNear_2, 1);
	TextDrawLetterSize(HouseNear_2, 0.600000, -0.299999);
	TextDrawTextSize(HouseNear_2, 298.500000, 152.500000);
	TextDrawSetOutline(HouseNear_2, 1);
	TextDrawSetShadow(HouseNear_2, 0);
	TextDrawAlignment(HouseNear_2, 2);
	TextDrawColor(HouseNear_2, -1);
	TextDrawBackgroundColor(HouseNear_2, 255);
	TextDrawBoxColor(HouseNear_2, -121);
	TextDrawUseBox(HouseNear_2, 1);
	TextDrawSetProportional(HouseNear_2, 1);
	TextDrawSetSelectable(HouseNear_2, 0);
	
	HouseNear_3 = TextDrawCreate(16.000000, 304.000000, "PRICE:");
	TextDrawFont(HouseNear_3, 2);
	TextDrawLetterSize(HouseNear_3, 0.133333, 1.799999);
	TextDrawTextSize(HouseNear_3, 445.000000, 17.000000);
	TextDrawSetOutline(HouseNear_3, 1);
	TextDrawSetShadow(HouseNear_3, 0);
	TextDrawAlignment(HouseNear_3, 1);
	TextDrawColor(HouseNear_3, -1);
	TextDrawBackgroundColor(HouseNear_3, 255);
	TextDrawBoxColor(HouseNear_3, 50);
	TextDrawUseBox(HouseNear_3, 0);
	TextDrawSetProportional(HouseNear_3, 1);
	TextDrawSetSelectable(HouseNear_3, 0);
	
	HouseNear_4 = TextDrawCreate(36.000000, 304.000000, "$ 100000000");
	TextDrawFont(HouseNear_4, 2);
	TextDrawLetterSize(HouseNear_4, 0.133333, 1.799999);
	TextDrawTextSize(HouseNear_4, 445.000000, 17.000000);
	TextDrawSetOutline(HouseNear_4, 1);
	TextDrawSetShadow(HouseNear_4, 0);
	TextDrawAlignment(HouseNear_4, 1);
	TextDrawColor(HouseNear_4, -16776961);
	TextDrawBackgroundColor(HouseNear_4, 255);
	TextDrawBoxColor(HouseNear_4, 50);
	TextDrawUseBox(HouseNear_4, 0);
	TextDrawSetProportional(HouseNear_4, 1);
	TextDrawSetSelectable(HouseNear_4, 0);
	
	HouseNear_5 = TextDrawCreate(16.000000, 286.000000, "ADDRESS:");
	TextDrawFont(HouseNear_5, 2);
	TextDrawLetterSize(HouseNear_5, 0.133333, 1.799999);
	TextDrawTextSize(HouseNear_5, 445.000000, 17.000000);
	TextDrawSetOutline(HouseNear_5, 1);
	TextDrawSetShadow(HouseNear_5, 0);
	TextDrawAlignment(HouseNear_5, 1);
	TextDrawColor(HouseNear_5, -1);
	TextDrawBackgroundColor(HouseNear_5, 255);
	TextDrawBoxColor(HouseNear_5, 50);
	TextDrawUseBox(HouseNear_5, 0);
	TextDrawSetProportional(HouseNear_5, 1);
	TextDrawSetSelectable(HouseNear_5, 0);
	
	HouseNear_6 = TextDrawCreate(46.000000, 286.000000, "6969 Los Santos Downtown");
	TextDrawFont(HouseNear_6, 2);
	TextDrawLetterSize(HouseNear_6, 0.133333, 1.799999);
	TextDrawTextSize(HouseNear_6, 445.000000, 17.000000);
	TextDrawSetOutline(HouseNear_6, 1);
	TextDrawSetShadow(HouseNear_6, 0);
	TextDrawAlignment(HouseNear_6, 1);
	TextDrawColor(HouseNear_6, 1097458175);
	TextDrawBackgroundColor(HouseNear_6, 255);
	TextDrawBoxColor(HouseNear_6, 50);
	TextDrawUseBox(HouseNear_6, 0);
	TextDrawSetProportional(HouseNear_6, 1);
	TextDrawSetSelectable(HouseNear_6, 0);
	
	HouseNear_8 = TextDrawCreate(29.000000, 321.000000, "TO BUY TYPE ~Y~ /BUYHOUSE");
	TextDrawFont(HouseNear_8, 2);
	TextDrawLetterSize(HouseNear_8, 0.216667, 1.149999);
	TextDrawTextSize(HouseNear_8, 490.000000, 2.000000);
	TextDrawSetOutline(HouseNear_8, 1);
	TextDrawSetShadow(HouseNear_8, 0);
	TextDrawAlignment(HouseNear_8, 1);
	TextDrawColor(HouseNear_8, -1);
	TextDrawBackgroundColor(HouseNear_8, 255);
	TextDrawBoxColor(HouseNear_8, 50);
	TextDrawUseBox(HouseNear_8, 0);
	TextDrawSetProportional(HouseNear_8, 1);
	TextDrawSetSelectable(HouseNear_8, 0);
	
	
	
	// Blindfold - Ez
	Blind = TextDrawCreate(641.199951, 1.500000, "usebox");
	TextDrawLetterSize(Blind, 0.000000, 49.378147);
	TextDrawTextSize(Blind, -2.000000, 0.000000);
	TextDrawAlignment(Blind, 3);
	TextDrawColor(Blind, -1);
	TextDrawUseBox(Blind, true);
	TextDrawBoxColor(Blind, 255);
	TextDrawSetShadow(Blind, 0);
	TextDrawSetOutline(Blind, 0);
	TextDrawBackgroundColor(Blind, 255);
	TextDrawFont(Blind, 1);

	LogoTD[0] = TextDrawCreate(525.000000, 412.000000, "GTA: MANILA REALITY");
	TextDrawFont(LogoTD[0], 3);
	TextDrawLetterSize(LogoTD[0], 0.308333, 2.000000);
	TextDrawTextSize(LogoTD[0], 760.000000, 17.000000);
	TextDrawSetOutline(LogoTD[0], 1);
	TextDrawSetShadow(LogoTD[0], 0);
	TextDrawAlignment(LogoTD[0], 1);
	TextDrawColor(LogoTD[0], -1);
	TextDrawBackgroundColor(LogoTD[0], 255);
	TextDrawBoxColor(LogoTD[0], 50);
	TextDrawUseBox(LogoTD[0], 0);
	TextDrawSetProportional(LogoTD[0], 1);
	TextDrawSetSelectable(LogoTD[0], 0);
	
	LogoTD[1] = TextDrawCreate(550.000000, 428.000000, "ROLEPLAY");
	TextDrawFont(LogoTD[1], 3);
	TextDrawLetterSize(LogoTD[1], 0.425000, 1.350000);
	TextDrawTextSize(LogoTD[1], 400.000000, 17.000000);
	TextDrawSetOutline(LogoTD[1], 1);
	TextDrawSetShadow(LogoTD[1], 0);
	TextDrawAlignment(LogoTD[1], 1);
	TextDrawColor(LogoTD[1], -1);
	TextDrawBackgroundColor(LogoTD[1], 255);
	TextDrawBoxColor(LogoTD[1], 50);
	TextDrawUseBox(LogoTD[1], 0);
	TextDrawSetProportional(LogoTD[1], 1);
	TextDrawSetSelectable(LogoTD[1], 0);

	DieText = TextDrawCreate(310.000000, 407.000000, "Type ~y~/phone~w~ to call a ~r~medic~w~ or ~y~/accept death~w~ to skip.");
	TextDrawFont(DieText, 2);
	TextDrawLetterSize(DieText, 0.258332, 1.900000);
	TextDrawTextSize(DieText, 1085.000000, 222.000000);
	TextDrawSetOutline(DieText, 1);
	TextDrawSetShadow(DieText, 0);
	TextDrawAlignment(DieText, 2);
	TextDrawColor(DieText, -1);
	TextDrawBackgroundColor(DieText, 255);
	TextDrawBoxColor(DieText, 50);
	TextDrawUseBox(DieText, 0);
	TextDrawSetProportional(DieText, 1);
	TextDrawSetSelectable(DieText, 0);
	
	InjuredText = TextDrawCreate(314.000000, 394.000000, "You are injured");
	TextDrawFont(InjuredText, 2);
	TextDrawLetterSize(InjuredText, 0.225000, 1.500000);
	TextDrawTextSize(InjuredText, 400.000000, 212.000000);
	TextDrawSetOutline(InjuredText, 1);
	TextDrawSetShadow(InjuredText, 0);
	TextDrawAlignment(InjuredText, 2);
	TextDrawColor(InjuredText, -16776961);
	TextDrawBackgroundColor(InjuredText, 255);
	TextDrawBoxColor(InjuredText, 50);
	TextDrawUseBox(InjuredText, 0);
	TextDrawSetProportional(InjuredText, 1);
	TextDrawSetSelectable(InjuredText, 0);


	////ReportTD = TextDrawCreate(261.000000, 372.000000, "~y~NEW ADMIN REPORT!");
	//TextDrawFont(ReportTD, 2);
	//TextDrawLetterSize(ReportTD, 0.404166, 2.199999);
	//TextDrawTextSize(ReportTD, 630.000000, -213.000000);
	//TextDrawSetOutline(ReportTD, 1);
	//TextDrawSetShadow(ReportTD, 0);
	//TextDrawAlignment(ReportTD, 1);
	//TextDrawColor(ReportTD, -1);
	//TextDrawBackgroundColor(ReportTD, 255);
	//TextDrawBoxColor(ReportTD, 50);
	//TextDrawUseBox(ReportTD, 0);
	//TextDrawSetProportional(ReportTD, 1);
	//TextDrawSetSelectable(ReportTD, 0);
	

	TimeTD = TextDrawCreate(138.000000, 390.000000, "00:00");
	TextDrawFont(TimeTD, 2);
	TextDrawLetterSize(TimeTD, 0.287497, 1.149996);
	TextDrawTextSize(TimeTD, 400.000000, 17.000000);
	TextDrawSetOutline(TimeTD, 1);
	TextDrawSetShadow(TimeTD, 0);
	TextDrawAlignment(TimeTD, 1);
	TextDrawColor(TimeTD, -1);
	TextDrawBackgroundColor(TimeTD, 255);
	TextDrawBoxColor(TimeTD, 50);
	TextDrawUseBox(TimeTD, 0);
	TextDrawSetProportional(TimeTD, 1);
	TextDrawSetSelectable(TimeTD, 0);
	
	//BANK
	BANKTD[0] = TextDrawCreate(323.000000, 101.000000, "_");
	TextDrawFont(BANKTD[0], 1);
	TextDrawLetterSize(BANKTD[0], 0.891666, 28.450008);
	TextDrawTextSize(BANKTD[0], 298.500000, 345.000000);
	TextDrawSetOutline(BANKTD[0], 1);
	TextDrawSetShadow(BANKTD[0], 0);
	TextDrawAlignment(BANKTD[0], 2);
	TextDrawColor(BANKTD[0], -1);
	TextDrawBackgroundColor(BANKTD[0], 255);
	TextDrawBoxColor(BANKTD[0], -1);
	TextDrawUseBox(BANKTD[0], 1);
	TextDrawSetProportional(BANKTD[0], 1);
	TextDrawSetSelectable(BANKTD[0], 0);
	
	BANKTD[1] = TextDrawCreate(323.000000, 101.000000, "_");
	TextDrawFont(BANKTD[1], 1);
	TextDrawLetterSize(BANKTD[1], 0.891666, 21.950008);
	TextDrawTextSize(BANKTD[1], 298.500000, 345.000000);
	TextDrawSetOutline(BANKTD[1], 1);
	TextDrawSetShadow(BANKTD[1], 0);
	TextDrawAlignment(BANKTD[1], 2);
	TextDrawColor(BANKTD[1], -1);
	TextDrawBackgroundColor(BANKTD[1], 255);
	TextDrawBoxColor(BANKTD[1], -65281);
	TextDrawUseBox(BANKTD[1], 1);
	TextDrawSetProportional(BANKTD[1], 1);
	TextDrawSetSelectable(BANKTD[1], 0);
	
	BANKTD[2] = TextDrawCreate(308.000000, 290.000000, "ld_pool:ball");
	TextDrawFont(BANKTD[2], 4);
	TextDrawLetterSize(BANKTD[2], 0.600000, 2.000000);
	TextDrawTextSize(BANKTD[2], 25.000000, 25.000000);
	TextDrawSetOutline(BANKTD[2], 1);
	TextDrawSetShadow(BANKTD[2], 0);
	TextDrawAlignment(BANKTD[2], 1);
	TextDrawColor(BANKTD[2], 9109759);
	TextDrawBackgroundColor(BANKTD[2], 255);
	TextDrawBoxColor(BANKTD[2], 50);
	TextDrawUseBox(BANKTD[2], 1);
	TextDrawSetProportional(BANKTD[2], 1);
	TextDrawSetSelectable(BANKTD[2], 0);
	
	BANKTD[3] = TextDrawCreate(310.000000, 292.000000, "ld_pool:ball");
	TextDrawFont(BANKTD[3], 4);
	TextDrawLetterSize(BANKTD[3], 0.600000, 2.000000);
	TextDrawTextSize(BANKTD[3], 21.000000, 21.000000);
	TextDrawSetOutline(BANKTD[3], 1);
	TextDrawSetShadow(BANKTD[3], 0);
	TextDrawAlignment(BANKTD[3], 1);
	TextDrawColor(BANKTD[3], -1);
	TextDrawBackgroundColor(BANKTD[3], 255);
	TextDrawBoxColor(BANKTD[3], 50);
	TextDrawUseBox(BANKTD[3], 1);
	TextDrawSetProportional(BANKTD[3], 1);
	TextDrawSetSelectable(BANKTD[3], true);
	
	BANKTD[4] = TextDrawCreate(265.000000, 274.000000, "PLEASE ~R~TAP ~W~ TO LOGIN");
	TextDrawFont(BANKTD[4], 2);
	TextDrawLetterSize(BANKTD[4], 0.229166, 1.050000);
	TextDrawTextSize(BANKTD[4], 400.000000, 17.000000);
	TextDrawSetOutline(BANKTD[4], 1);
	TextDrawSetShadow(BANKTD[4], 0);
	TextDrawAlignment(BANKTD[4], 1);
	TextDrawColor(BANKTD[4], -1);
	TextDrawBackgroundColor(BANKTD[4], 255);
	TextDrawBoxColor(BANKTD[4], 50);
	TextDrawUseBox(BANKTD[4], 0);
	TextDrawSetProportional(BANKTD[4], 1);
	TextDrawSetSelectable(BANKTD[4], 0);
	
	BANKTD[5] = TextDrawCreate(268.000000, 109.000000, "MR");
	TextDrawFont(BANKTD[5], 3);
	TextDrawLetterSize(BANKTD[5], 1.808332, 12.500000);
	TextDrawTextSize(BANKTD[5], 400.000000, 17.000000);
	TextDrawSetOutline(BANKTD[5], 1);
	TextDrawSetShadow(BANKTD[5], 0);
	TextDrawAlignment(BANKTD[5], 1);
	TextDrawColor(BANKTD[5], -1);
	TextDrawBackgroundColor(BANKTD[5], 255);
	TextDrawBoxColor(BANKTD[5], 50);
	TextDrawUseBox(BANKTD[5], 0);
	TextDrawSetProportional(BANKTD[5], 1);
	TextDrawSetSelectable(BANKTD[5], 0);
	
	BANKTD[6] = TextDrawCreate(287.000000, 217.000000, "BANK");
	TextDrawFont(BANKTD[6], 2);
	TextDrawLetterSize(BANKTD[6], 0.604166, 1.550000);
	TextDrawTextSize(BANKTD[6], 400.000000, 17.000000);
	TextDrawSetOutline(BANKTD[6], 0);
	TextDrawSetShadow(BANKTD[6], 1);
	TextDrawAlignment(BANKTD[6], 1);
	TextDrawColor(BANKTD[6], -1);
	TextDrawBackgroundColor(BANKTD[6], 255);
	TextDrawBoxColor(BANKTD[6], 50);
	TextDrawUseBox(BANKTD[6], 0);
	TextDrawSetProportional(BANKTD[6], 1);
	TextDrawSetSelectable(BANKTD[6], 0);
	
	BANKTD[7] = TextDrawCreate(323.000000, 101.000000, "_");
	TextDrawFont(BANKTD[7], 1);
	TextDrawLetterSize(BANKTD[7], 0.891666, 28.450008);
	TextDrawTextSize(BANKTD[7], 298.500000, 345.000000);
	TextDrawSetOutline(BANKTD[7], 1);
	TextDrawSetShadow(BANKTD[7], 0);
	TextDrawAlignment(BANKTD[7], 2);
	TextDrawColor(BANKTD[7], -1);
	TextDrawBackgroundColor(BANKTD[7], 255);
	TextDrawBoxColor(BANKTD[7], -1);
	TextDrawUseBox(BANKTD[7], 1);
	TextDrawSetProportional(BANKTD[7], 1);
	TextDrawSetSelectable(BANKTD[7], 0);
	
	BANKTD[8] = TextDrawCreate(323.000000, 101.000000, "_");
	TextDrawFont(BANKTD[8], 1);
	TextDrawLetterSize(BANKTD[8], 0.891666, 1.750007);
	TextDrawTextSize(BANKTD[8], 298.500000, 345.000000);
	TextDrawSetOutline(BANKTD[8], 1);
	TextDrawSetShadow(BANKTD[8], 0);
	TextDrawAlignment(BANKTD[8], 2);
	TextDrawColor(BANKTD[8], -1);
	TextDrawBackgroundColor(BANKTD[8], 255);
	TextDrawBoxColor(BANKTD[8], -65281);
	TextDrawUseBox(BANKTD[8], 1);
	TextDrawSetProportional(BANKTD[8], 1);
	TextDrawSetSelectable(BANKTD[8], 0);
	
	BANKTD[9] = TextDrawCreate(475.000000, 101.000000, "ld_beat:cross");
	TextDrawFont(BANKTD[9], 4);
	TextDrawLetterSize(BANKTD[9], 0.600000, 2.000000);
	TextDrawTextSize(BANKTD[9], 17.000000, 17.000000);
	TextDrawSetOutline(BANKTD[9], 1);
	TextDrawSetShadow(BANKTD[9], 0);
	TextDrawAlignment(BANKTD[9], 1);
	TextDrawColor(BANKTD[9], -1);
	TextDrawBackgroundColor(BANKTD[9], 255);
	TextDrawBoxColor(BANKTD[9], 50);
	TextDrawUseBox(BANKTD[9], 1);
	TextDrawSetProportional(BANKTD[9], 1);
	TextDrawSetSelectable(BANKTD[9], true);
	
	BANKTD[10] = TextDrawCreate(340.000000, 103.000000, "WOULD YOU LIKE TO DISCONNECT?");
	TextDrawFont(BANKTD[10], 2);
	TextDrawLetterSize(BANKTD[10], 0.187500, 1.350000);
	TextDrawTextSize(BANKTD[10], 590.000000, 17.000000);
	TextDrawSetOutline(BANKTD[10], 1);
	TextDrawSetShadow(BANKTD[10], 0);
	TextDrawAlignment(BANKTD[10], 1);
	TextDrawColor(BANKTD[10], 255);
	TextDrawBackgroundColor(BANKTD[10], 0);
	TextDrawBoxColor(BANKTD[10], 50);
	TextDrawUseBox(BANKTD[10], 0);
	TextDrawSetProportional(BANKTD[10], 1);
	TextDrawSetSelectable(BANKTD[10], 0);
	
	BANKTD[11] = TextDrawCreate(277.000000, 138.000000, "_");
	TextDrawFont(BANKTD[11], 1);
	TextDrawLetterSize(BANKTD[11], 1.016666, 15.750014);
	TextDrawTextSize(BANKTD[11], 298.500000, 225.000000);
	TextDrawSetOutline(BANKTD[11], 1);
	TextDrawSetShadow(BANKTD[11], 0);
	TextDrawAlignment(BANKTD[11], 2);
	TextDrawColor(BANKTD[11], -1);
	TextDrawBackgroundColor(BANKTD[11], 255);
	TextDrawBoxColor(BANKTD[11], 88);
	TextDrawUseBox(BANKTD[11], 1);
	TextDrawSetProportional(BANKTD[11], 1);
	TextDrawSetSelectable(BANKTD[11], 0);
	
	BANKTD[12] = TextDrawCreate(235.000000, 301.000000, "_");
	TextDrawFont(BANKTD[12], 1);
	TextDrawLetterSize(BANKTD[12], 1.016666, 4.800003);
	TextDrawTextSize(BANKTD[12], 298.500000, 140.500000);
	TextDrawSetOutline(BANKTD[12], 1);
	TextDrawSetShadow(BANKTD[12], 0);
	TextDrawAlignment(BANKTD[12], 2);
	TextDrawColor(BANKTD[12], -1);
	TextDrawBackgroundColor(BANKTD[12], 255);
	TextDrawBoxColor(BANKTD[12], 88);
	TextDrawUseBox(BANKTD[12], 1);
	TextDrawSetProportional(BANKTD[12], 1);
	TextDrawSetSelectable(BANKTD[12], 0);
	
	BANKTD[13] = TextDrawCreate(451.000000, 301.000000, "_");
	TextDrawFont(BANKTD[13], 1);
	TextDrawLetterSize(BANKTD[13], 1.016666, 4.800003);
	TextDrawTextSize(BANKTD[13], 298.500000, 71.500000);
	TextDrawSetOutline(BANKTD[13], 1);
	TextDrawSetShadow(BANKTD[13], 0);
	TextDrawAlignment(BANKTD[13], 2);
	TextDrawColor(BANKTD[13], -1);
	TextDrawBackgroundColor(BANKTD[13], 255);
	TextDrawBoxColor(BANKTD[13], 88);
	TextDrawUseBox(BANKTD[13], 1);
	TextDrawSetProportional(BANKTD[13], 1);
	TextDrawSetSelectable(BANKTD[13], 0);
	
	BANKTD[14] = TextDrawCreate(445.000000, 138.000000, "_");
	TextDrawFont(BANKTD[14], 1);
	TextDrawLetterSize(BANKTD[14], 0.600000, 4.300001);
	TextDrawTextSize(BANKTD[14], 298.500000, 86.000000);
	TextDrawSetOutline(BANKTD[14], 1);
	TextDrawSetShadow(BANKTD[14], 0);
	TextDrawAlignment(BANKTD[14], 2);
	TextDrawColor(BANKTD[14], -1);
	TextDrawBackgroundColor(BANKTD[14], 255);
	TextDrawBoxColor(BANKTD[14], 16711865);
	TextDrawUseBox(BANKTD[14], 1);
	TextDrawSetProportional(BANKTD[14], 1);
	TextDrawSetSelectable(BANKTD[14], 0);
	
	BANKTD[15] = TextDrawCreate(445.000000, 190.000000, "_");
	TextDrawFont(BANKTD[15], 1);
	TextDrawLetterSize(BANKTD[15], 0.600000, 4.300001);
	TextDrawTextSize(BANKTD[15], 298.500000, 86.000000);
	TextDrawSetOutline(BANKTD[15], 1);
	TextDrawSetShadow(BANKTD[15], 0);
	TextDrawAlignment(BANKTD[15], 2);
	TextDrawColor(BANKTD[15], -1);
	TextDrawBackgroundColor(BANKTD[15], 255);
	TextDrawBoxColor(BANKTD[15], 1687547321);
	TextDrawUseBox(BANKTD[15], 1);
	TextDrawSetProportional(BANKTD[15], 1);
	TextDrawSetSelectable(BANKTD[15], 0);
	
	BANKTD[16] = TextDrawCreate(445.000000, 242.000000, "_");
	TextDrawFont(BANKTD[16], 1);
	TextDrawLetterSize(BANKTD[16], 0.600000, 4.300001);
	TextDrawTextSize(BANKTD[16], 298.500000, 86.000000);
	TextDrawSetOutline(BANKTD[16], 1);
	TextDrawSetShadow(BANKTD[16], 0);
	TextDrawAlignment(BANKTD[16], 2);
	TextDrawColor(BANKTD[16], -1);
	TextDrawBackgroundColor(BANKTD[16], 255);
	TextDrawBoxColor(BANKTD[16], -764862791);
	TextDrawUseBox(BANKTD[16], 1);
	TextDrawSetProportional(BANKTD[16], 1);
	TextDrawSetSelectable(BANKTD[16], 0);
	
	BANKTD[17] = TextDrawCreate(174.000000, 141.000000, "WELCOME");
	TextDrawFont(BANKTD[17], 2);
	TextDrawLetterSize(BANKTD[17], 0.358333, 1.700000);
	TextDrawTextSize(BANKTD[17], 400.000000, 17.000000);
	TextDrawSetOutline(BANKTD[17], 1);
	TextDrawSetShadow(BANKTD[17], 0);
	TextDrawAlignment(BANKTD[17], 1);
	TextDrawColor(BANKTD[17], -1);
	TextDrawBackgroundColor(BANKTD[17], 255);
	TextDrawBoxColor(BANKTD[17], 50);
	TextDrawUseBox(BANKTD[17], 0);
	TextDrawSetProportional(BANKTD[17], 1);
	TextDrawSetSelectable(BANKTD[17], 0);
	
	BANKTD[18] = TextDrawCreate(202.000000, 163.000000, "TRITON_Lux");
	TextDrawFont(BANKTD[18], 3);
	TextDrawLetterSize(BANKTD[18], 0.358333, 1.950000);
	TextDrawTextSize(BANKTD[18], 400.000000, 17.000000);
	TextDrawSetOutline(BANKTD[18], 1);
	TextDrawSetShadow(BANKTD[18], 0);
	TextDrawAlignment(BANKTD[18], 1);
	TextDrawColor(BANKTD[18], -65281);
	TextDrawBackgroundColor(BANKTD[18], 255);
	TextDrawBoxColor(BANKTD[18], 50);
	TextDrawUseBox(BANKTD[18], 0);
	TextDrawSetProportional(BANKTD[18], 1);
	TextDrawSetSelectable(BANKTD[18], 0);
	
	BANKTD[19] = TextDrawCreate(174.000000, 211.000000, "you have");
	TextDrawFont(BANKTD[19], 2);
	TextDrawLetterSize(BANKTD[19], 0.358333, 1.450000);
	TextDrawTextSize(BANKTD[19], 400.000000, 17.000000);
	TextDrawSetOutline(BANKTD[19], 1);
	TextDrawSetShadow(BANKTD[19], 0);
	TextDrawAlignment(BANKTD[19], 1);
	TextDrawColor(BANKTD[19], -1);
	TextDrawBackgroundColor(BANKTD[19], 255);
	TextDrawBoxColor(BANKTD[19], 50);
	TextDrawUseBox(BANKTD[19], 0);
	TextDrawSetProportional(BANKTD[19], 1);
	TextDrawSetSelectable(BANKTD[19], 0);
	
	
	BANKTD[20] = TextDrawCreate(421.000000, 149.000000, "DEPOSIT");
	TextDrawFont(BANKTD[20], 1);
	TextDrawLetterSize(BANKTD[20], 0.358332, 1.950000);
	TextDrawTextSize(BANKTD[20], 480.000000, 17.000000);
	TextDrawSetOutline(BANKTD[20], 1);
	TextDrawSetShadow(BANKTD[20], 0);
	TextDrawAlignment(BANKTD[20], 1);
	TextDrawColor(BANKTD[20], -1);
	TextDrawBackgroundColor(BANKTD[20], 255);
	TextDrawBoxColor(BANKTD[20], 50);
	TextDrawUseBox(BANKTD[20], 0);
	TextDrawSetProportional(BANKTD[20], 1);
	TextDrawSetSelectable(BANKTD[20], true);
	
	BANKTD[21] = TextDrawCreate(413.000000, 200.000000, "WITHDRAW");
	TextDrawFont(BANKTD[21], 1);
	TextDrawLetterSize(BANKTD[21], 0.358332, 1.950000);
	TextDrawTextSize(BANKTD[21], 480.000000, 17.000000);
	TextDrawSetOutline(BANKTD[21], 1);
	TextDrawSetShadow(BANKTD[21], 0);
	TextDrawAlignment(BANKTD[21], 1);
	TextDrawColor(BANKTD[21], -1);
	TextDrawBackgroundColor(BANKTD[21], 255);
	TextDrawBoxColor(BANKTD[21], 50);
	TextDrawUseBox(BANKTD[21], 0);
	TextDrawSetProportional(BANKTD[21], 1);
	TextDrawSetSelectable(BANKTD[21], true);
	
	BANKTD[22] = TextDrawCreate(416.000000, 251.000000, "TRANSFER");
	TextDrawFont(BANKTD[22], 1);
	TextDrawLetterSize(BANKTD[22], 0.358332, 1.950000);
	TextDrawTextSize(BANKTD[22], 485.000000, 17.000000);
	TextDrawSetOutline(BANKTD[22], 1);
	TextDrawSetShadow(BANKTD[22], 0);
	TextDrawAlignment(BANKTD[22], 1);
	TextDrawColor(BANKTD[22], -1);
	TextDrawBackgroundColor(BANKTD[22], 255);
	TextDrawBoxColor(BANKTD[22], 50);
	TextDrawUseBox(BANKTD[22], 0);
	TextDrawSetProportional(BANKTD[22], 1);
	TextDrawSetSelectable(BANKTD[22], true);
	
	BANKTD[23] = TextDrawCreate(165.000000, 304.000000, "YOU CAN TRUST US");
	TextDrawFont(BANKTD[23], 2);
	TextDrawLetterSize(BANKTD[23], 0.250000, 1.550000);
	TextDrawTextSize(BANKTD[23], 400.000000, 17.000000);
	TextDrawSetOutline(BANKTD[23], 1);
	TextDrawSetShadow(BANKTD[23], 0);
	TextDrawAlignment(BANKTD[23], 1);
	TextDrawColor(BANKTD[23], 255);
	TextDrawBackgroundColor(BANKTD[23], 0);
	TextDrawBoxColor(BANKTD[23], 50);
	TextDrawUseBox(BANKTD[23], 0);
	TextDrawSetProportional(BANKTD[23], 1);
	TextDrawSetSelectable(BANKTD[23], 0);
	
	BANKTD[24] = TextDrawCreate(165.000000, 321.000000, "THE MOST TRUSTED BANK IN Manila Reality");
	TextDrawFont(BANKTD[24], 2);
	TextDrawLetterSize(BANKTD[24], 0.162500, 1.450001);
	TextDrawTextSize(BANKTD[24], 400.000000, 17.000000);
	TextDrawSetOutline(BANKTD[24], 1);
	TextDrawSetShadow(BANKTD[24], 0);
	TextDrawAlignment(BANKTD[24], 1);
	TextDrawColor(BANKTD[24], 255);
	TextDrawBackgroundColor(BANKTD[24], 35);
	TextDrawBoxColor(BANKTD[24], 50);
	TextDrawUseBox(BANKTD[24], 0);
	TextDrawSetProportional(BANKTD[24], 1);
	TextDrawSetSelectable(BANKTD[24], 0);
	
	BANKTD[25] = TextDrawCreate(441.000000, 313.000000, "MR");
	TextDrawFont(BANKTD[25], 3);
	TextDrawLetterSize(BANKTD[25], 0.600000, 2.000000);
	TextDrawTextSize(BANKTD[25], 585.000000, 17.000000);
	TextDrawSetOutline(BANKTD[25], 1);
	TextDrawSetShadow(BANKTD[25], 0);
	TextDrawAlignment(BANKTD[25], 1);
	TextDrawColor(BANKTD[25], -65281);
	TextDrawBackgroundColor(BANKTD[25], 255);
	TextDrawBoxColor(BANKTD[25], 50);
	TextDrawUseBox(BANKTD[25], 0);
	TextDrawSetProportional(BANKTD[25], 1);
	TextDrawSetSelectable(BANKTD[25], 0);
	
	BANKTD[26] = TextDrawCreate(421.000000, 317.000000, "BA        NK");
	TextDrawFont(BANKTD[26], 2);
	TextDrawLetterSize(BANKTD[26], 0.300000, 1.250000);
	TextDrawTextSize(BANKTD[26], 520.000000, 17.000000);
	TextDrawSetOutline(BANKTD[26], 1);
	TextDrawSetShadow(BANKTD[26], 0);
	TextDrawAlignment(BANKTD[26], 1);
	TextDrawColor(BANKTD[26], 255);
	TextDrawBackgroundColor(BANKTD[26], 0);
	TextDrawBoxColor(BANKTD[26], 50);
	TextDrawUseBox(BANKTD[26], 0);
	TextDrawSetProportional(BANKTD[26], 1);
	TextDrawSetSelectable(BANKTD[26], 0);
	

	//PHONE
	PhoneTD[0] = TextDrawCreate(525.000000, 179.000000, "ld_pool:ball");
	TextDrawFont(PhoneTD[0], 4);
	TextDrawLetterSize(PhoneTD[0], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[0], 112.000000, 36.000000);
	TextDrawSetOutline(PhoneTD[0], 1);
	TextDrawSetShadow(PhoneTD[0], 0);
	TextDrawAlignment(PhoneTD[0], 2);
	TextDrawColor(PhoneTD[0], 255);
	TextDrawBackgroundColor(PhoneTD[0], 255);
	TextDrawBoxColor(PhoneTD[0], 50);
	TextDrawUseBox(PhoneTD[0], 1);
	TextDrawSetProportional(PhoneTD[0], 1);
	TextDrawSetSelectable(PhoneTD[0], 0);
	
	PhoneTD[1] = TextDrawCreate(525.000000, 350.000000, "ld_pool:ball");
	TextDrawFont(PhoneTD[1], 4);
	TextDrawLetterSize(PhoneTD[1], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[1], 112.000000, 36.000000);
	TextDrawSetOutline(PhoneTD[1], 1);
	TextDrawSetShadow(PhoneTD[1], 0);
	TextDrawAlignment(PhoneTD[1], 2);
	TextDrawColor(PhoneTD[1], 255);
	TextDrawBackgroundColor(PhoneTD[1], 255);
	TextDrawBoxColor(PhoneTD[1], 50);
	TextDrawUseBox(PhoneTD[1], 1);
	TextDrawSetProportional(PhoneTD[1], 1);
	TextDrawSetSelectable(PhoneTD[1], 0);
	
	PhoneTD[2] = TextDrawCreate(582.000000, 198.000000, "_");
	TextDrawFont(PhoneTD[2], 1);
	TextDrawLetterSize(PhoneTD[2], 0.516664, 18.800025);
	TextDrawTextSize(PhoneTD[2], 298.500000, 105.500000);
	TextDrawSetOutline(PhoneTD[2], 1);
	TextDrawSetShadow(PhoneTD[2], 0);
	TextDrawAlignment(PhoneTD[2], 2);
	TextDrawColor(PhoneTD[2], 255);
	TextDrawBackgroundColor(PhoneTD[2], 255);
	TextDrawBoxColor(PhoneTD[2], 255);
	TextDrawUseBox(PhoneTD[2], 1);
	TextDrawSetProportional(PhoneTD[2], 1);
	TextDrawSetSelectable(PhoneTD[2], 0);
	
	PhoneTD[3] = TextDrawCreate(532.000000, 198.000000, "ld_grav:sky");
	TextDrawFont(PhoneTD[3], 4);
	TextDrawLetterSize(PhoneTD[3], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[3], 101.500000, 162.500000);
	TextDrawSetOutline(PhoneTD[3], 1);
	TextDrawSetShadow(PhoneTD[3], 0);
	TextDrawAlignment(PhoneTD[3], 1);
	TextDrawColor(PhoneTD[3], -1);
	TextDrawBackgroundColor(PhoneTD[3], 255);
	TextDrawBoxColor(PhoneTD[3], 50);
	TextDrawUseBox(PhoneTD[3], 1);
	TextDrawSetProportional(PhoneTD[3], 1);
	TextDrawSetSelectable(PhoneTD[3], 0);
	
	PhoneTD[4] = TextDrawCreate(574.000000, 363.000000, "ld_pool:nib");
	TextDrawFont(PhoneTD[4], 4);
	TextDrawLetterSize(PhoneTD[4], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[4], 20.000000, 20.000000);
	TextDrawSetOutline(PhoneTD[4], 1);
	TextDrawSetShadow(PhoneTD[4], 0);
	TextDrawAlignment(PhoneTD[4], 1);
	TextDrawColor(PhoneTD[4], -1);
	TextDrawBackgroundColor(PhoneTD[4], 255);
	TextDrawBoxColor(PhoneTD[4], 50);
	TextDrawUseBox(PhoneTD[4], 1);
	TextDrawSetProportional(PhoneTD[4], 1);
	TextDrawSetSelectable(PhoneTD[4], true);
	
	PhoneTD[5] = TextDrawCreate(578.000000, 181.000000, "-");
	TextDrawFont(PhoneTD[5], 2);
	TextDrawLetterSize(PhoneTD[5], 1.483332, 2.000000);
	TextDrawTextSize(PhoneTD[5], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[5], 1);
	TextDrawSetShadow(PhoneTD[5], 0);
	TextDrawAlignment(PhoneTD[5], 1);
	TextDrawColor(PhoneTD[5], -1);
	TextDrawBackgroundColor(PhoneTD[5], 0);
	TextDrawBoxColor(PhoneTD[5], 50);
	TextDrawUseBox(PhoneTD[5], 0);
	TextDrawSetProportional(PhoneTD[5], 1);
	TextDrawSetSelectable(PhoneTD[5], 0);
	
	PhoneTD[6] = TextDrawCreate(572.000000, 188.000000, "ld_pool:ball");
	TextDrawFont(PhoneTD[6], 4);
	TextDrawLetterSize(PhoneTD[6], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[6], 7.000000, 7.000000);
	TextDrawSetOutline(PhoneTD[6], 1);
	TextDrawSetShadow(PhoneTD[6], 0);
	TextDrawAlignment(PhoneTD[6], 1);
	TextDrawColor(PhoneTD[6], -1);
	TextDrawBackgroundColor(PhoneTD[6], 255);
	TextDrawBoxColor(PhoneTD[6], 50);
	TextDrawUseBox(PhoneTD[6], 1);
	TextDrawSetProportional(PhoneTD[6], 1);
	TextDrawSetSelectable(PhoneTD[6], 0);
	
	PhoneTD[7] = TextDrawCreate(552.000000, 205.000000, "_");
	TextDrawFont(PhoneTD[7], 1);
	TextDrawLetterSize(PhoneTD[7], 4.000000, 3.500000);
	TextDrawTextSize(PhoneTD[7], 298.500000, 25.000000);
	TextDrawSetOutline(PhoneTD[7], 1);
	TextDrawSetShadow(PhoneTD[7], 0);
	TextDrawAlignment(PhoneTD[7], 2);
	TextDrawColor(PhoneTD[7], -1);
	TextDrawBackgroundColor(PhoneTD[7], 255);
	TextDrawBoxColor(PhoneTD[7], 135);
	TextDrawUseBox(PhoneTD[7], 1);
	TextDrawSetProportional(PhoneTD[7], 1);
	TextDrawSetSelectable(PhoneTD[7], 0);
	
	PhoneTD[8] = TextDrawCreate(610.000000, 205.000000, "_");
	TextDrawFont(PhoneTD[8], 1);
	TextDrawLetterSize(PhoneTD[8], 4.000000, 3.500000);
	TextDrawTextSize(PhoneTD[8], 298.500000, 25.000000);
	TextDrawSetOutline(PhoneTD[8], 1);
	TextDrawSetShadow(PhoneTD[8], 0);
	TextDrawAlignment(PhoneTD[8], 2);
	TextDrawColor(PhoneTD[8], -1);
	TextDrawBackgroundColor(PhoneTD[8], 255);
	TextDrawBoxColor(PhoneTD[8], 135);
	TextDrawUseBox(PhoneTD[8], 1);
	TextDrawSetProportional(PhoneTD[8], 1);
	TextDrawSetSelectable(PhoneTD[8], 0);
	
	PhoneTD[9] = TextDrawCreate(583.000000, 260.000000, "_");
	TextDrawFont(PhoneTD[9], 1);
	TextDrawLetterSize(PhoneTD[9], 4.000000, 3.500000);
	TextDrawTextSize(PhoneTD[9], 298.500000, 25.000000);
	TextDrawSetOutline(PhoneTD[9], 1);
	TextDrawSetShadow(PhoneTD[9], 0);
	TextDrawAlignment(PhoneTD[9], 2);
	TextDrawColor(PhoneTD[9], -1);
	TextDrawBackgroundColor(PhoneTD[9], 255);
	TextDrawBoxColor(PhoneTD[9], 135);
	TextDrawUseBox(PhoneTD[9], 1);
	TextDrawSetProportional(PhoneTD[9], 1);
	TextDrawSetSelectable(PhoneTD[9], 0);
	
	PhoneTD[10] = TextDrawCreate(552.000000, 314.000000, "_");
	TextDrawFont(PhoneTD[10], 1);
	TextDrawLetterSize(PhoneTD[10], 4.000000, 3.500000);
	TextDrawTextSize(PhoneTD[10], 298.500000, 25.000000);
	TextDrawSetOutline(PhoneTD[10], 1);
	TextDrawSetShadow(PhoneTD[10], 0);
	TextDrawAlignment(PhoneTD[10], 2);
	TextDrawColor(PhoneTD[10], -1);
	TextDrawBackgroundColor(PhoneTD[10], 255);
	TextDrawBoxColor(PhoneTD[10], 135);
	TextDrawUseBox(PhoneTD[10], 1);
	TextDrawSetProportional(PhoneTD[10], 1);
	TextDrawSetSelectable(PhoneTD[10], 0);
	
	PhoneTD[11] = TextDrawCreate(610.000000, 314.000000, "_");
	TextDrawFont(PhoneTD[11], 1);
	TextDrawLetterSize(PhoneTD[11], 4.000000, 3.500000);
	TextDrawTextSize(PhoneTD[11], 298.500000, 25.000000);
	TextDrawSetOutline(PhoneTD[11], 1);
	TextDrawSetShadow(PhoneTD[11], 0);
	TextDrawAlignment(PhoneTD[11], 2);
	TextDrawColor(PhoneTD[11], -1);
	TextDrawBackgroundColor(PhoneTD[11], 255);
	TextDrawBoxColor(PhoneTD[11], 135);
	TextDrawUseBox(PhoneTD[11], 1);
	TextDrawSetProportional(PhoneTD[11], 1);
	TextDrawSetSelectable(PhoneTD[11], 0);
	
	PhoneTD[12] = TextDrawCreate(540.000000, 210.000000, "HUD:radar_gangn");
	TextDrawFont(PhoneTD[12], 4);
	TextDrawLetterSize(PhoneTD[12], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[12], 21.500000, 22.000000);
	TextDrawSetOutline(PhoneTD[12], 1);
	TextDrawSetShadow(PhoneTD[12], 0);
	TextDrawAlignment(PhoneTD[12], 1);
	TextDrawColor(PhoneTD[12], -1);
	TextDrawBackgroundColor(PhoneTD[12], 255);
	TextDrawBoxColor(PhoneTD[12], -16777166);
	TextDrawUseBox(PhoneTD[12], 0);
	TextDrawSetProportional(PhoneTD[12], 1);
	TextDrawSetSelectable(PhoneTD[12], true);
	
	PhoneTD[13] = TextDrawCreate(603.000000, 202.000000, "t");
	TextDrawFont(PhoneTD[13], 3);
	TextDrawLetterSize(PhoneTD[13], 0.712499, 3.499998);
	TextDrawTextSize(PhoneTD[13], 621.500000, 17.000000);
	TextDrawSetOutline(PhoneTD[13], 1);
	TextDrawSetShadow(PhoneTD[13], 0);
	TextDrawAlignment(PhoneTD[13], 1);
	TextDrawColor(PhoneTD[13], 16777215);
	TextDrawBackgroundColor(PhoneTD[13], 255);
	TextDrawBoxColor(PhoneTD[13], 50);
	TextDrawUseBox(PhoneTD[13], 0);
	TextDrawSetProportional(PhoneTD[13], 1);
	TextDrawSetSelectable(PhoneTD[13], true);
	
	PhoneTD[14] = TextDrawCreate(541.000000, 320.000000, "HUD:radar_cash");
	TextDrawFont(PhoneTD[14], 4);
	TextDrawLetterSize(PhoneTD[14], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[14], 21.500000, 22.000000);
	TextDrawSetOutline(PhoneTD[14], 1);
	TextDrawSetShadow(PhoneTD[14], 0);
	TextDrawAlignment(PhoneTD[14], 1);
	TextDrawColor(PhoneTD[14], -1);
	TextDrawBackgroundColor(PhoneTD[14], 255);
	TextDrawBoxColor(PhoneTD[14], 50);
	TextDrawUseBox(PhoneTD[14], 1);
	TextDrawSetProportional(PhoneTD[14], 1);
	TextDrawSetSelectable(PhoneTD[14], true);
	
	PhoneTD[15] = TextDrawCreate(600.000000, 320.000000, "HUD:arrow");
	TextDrawFont(PhoneTD[15], 4);
	TextDrawLetterSize(PhoneTD[15], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[15], 21.500000, 22.000000);
	TextDrawSetOutline(PhoneTD[15], 1);
	TextDrawSetShadow(PhoneTD[15], 0);
	TextDrawAlignment(PhoneTD[15], 1);
	TextDrawColor(PhoneTD[15], -1);
	TextDrawBackgroundColor(PhoneTD[15], 255);
	TextDrawBoxColor(PhoneTD[15], 50);
	TextDrawUseBox(PhoneTD[15], 1);
	TextDrawSetProportional(PhoneTD[15], 1);
	TextDrawSetSelectable(PhoneTD[15], true);
	
	PhoneTD[16] = TextDrawCreate(569.000000, 261.000000, "Preview_Model");
	TextDrawFont(PhoneTD[16], 5);
	TextDrawLetterSize(PhoneTD[16], 0.600000, 2.000000);
	TextDrawTextSize(PhoneTD[16], 26.500000, 31.000000);
	TextDrawSetOutline(PhoneTD[16], 0);
	TextDrawSetShadow(PhoneTD[16], 0);
	TextDrawAlignment(PhoneTD[16], 1);
	TextDrawColor(PhoneTD[16], -1);
	TextDrawBackgroundColor(PhoneTD[16], 0);
	TextDrawBoxColor(PhoneTD[16], 255);
	TextDrawUseBox(PhoneTD[16], 0);
	TextDrawSetProportional(PhoneTD[16], 1);
	TextDrawSetSelectable(PhoneTD[16], true);
	TextDrawSetPreviewModel(PhoneTD[16], 1253);
	TextDrawSetPreviewRot(PhoneTD[16], 0.000000, 0.000000, 178.000000, 1.000000);
	TextDrawSetPreviewVehCol(PhoneTD[16], 1, 1);
	
	PhoneTD[17] = TextDrawCreate(541.000000, 238.000000, "Contacts");
	TextDrawFont(PhoneTD[17], 2);
	TextDrawLetterSize(PhoneTD[17], 0.108332, 1.399999);
	TextDrawTextSize(PhoneTD[17], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[17], 1);
	TextDrawSetShadow(PhoneTD[17], 0);
	TextDrawAlignment(PhoneTD[17], 1);
	TextDrawColor(PhoneTD[17], 255);
	TextDrawBackgroundColor(PhoneTD[17], 0);
	TextDrawBoxColor(PhoneTD[17], 50);
	TextDrawUseBox(PhoneTD[17], 0);
	TextDrawSetProportional(PhoneTD[17], 1);
	TextDrawSetSelectable(PhoneTD[17], 0);
	
	PhoneTD[18] = TextDrawCreate(600.000000, 238.000000, "TWITTER");
	TextDrawFont(PhoneTD[18], 2);
	TextDrawLetterSize(PhoneTD[18], 0.108332, 1.399999);
	TextDrawTextSize(PhoneTD[18], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[18], 1);
	TextDrawSetShadow(PhoneTD[18], 0);
	TextDrawAlignment(PhoneTD[18], 1);
	TextDrawColor(PhoneTD[18], 255);
	TextDrawBackgroundColor(PhoneTD[18], 0);
	TextDrawBoxColor(PhoneTD[18], 50);
	TextDrawUseBox(PhoneTD[18], 0);
	TextDrawSetProportional(PhoneTD[18], 1);
	TextDrawSetSelectable(PhoneTD[18], 0);
	
	PhoneTD[19] = TextDrawCreate(575.000000, 293.000000, "CAMERA");
	TextDrawFont(PhoneTD[19], 2);
	TextDrawLetterSize(PhoneTD[19], 0.108332, 1.399999);
	TextDrawTextSize(PhoneTD[19], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[19], 1);
	TextDrawSetShadow(PhoneTD[19], 0);
	TextDrawAlignment(PhoneTD[19], 1);
	TextDrawColor(PhoneTD[19], 255);
	TextDrawBackgroundColor(PhoneTD[19], 0);
	TextDrawBoxColor(PhoneTD[19], 50);
	TextDrawUseBox(PhoneTD[19], 0);
	TextDrawSetProportional(PhoneTD[19], 1);
	TextDrawSetSelectable(PhoneTD[19], 0);
	
	PhoneTD[20] = TextDrawCreate(546.000000, 347.000000, "BANK");
	TextDrawFont(PhoneTD[20], 2);
	TextDrawLetterSize(PhoneTD[20], 0.108332, 1.399999);
	TextDrawTextSize(PhoneTD[20], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[20], 1);
	TextDrawSetShadow(PhoneTD[20], 0);
	TextDrawAlignment(PhoneTD[20], 1);
	TextDrawColor(PhoneTD[20], 255);
	TextDrawBackgroundColor(PhoneTD[20], 0);
	TextDrawBoxColor(PhoneTD[20], 50);
	TextDrawUseBox(PhoneTD[20], 0);
	TextDrawSetProportional(PhoneTD[20], 1);
	TextDrawSetSelectable(PhoneTD[20], 0);
	
	PhoneTD[21] = TextDrawCreate(608.000000, 347.000000, "GPS");
	TextDrawFont(PhoneTD[21], 2);
	TextDrawLetterSize(PhoneTD[21], 0.108332, 1.399999);
	TextDrawTextSize(PhoneTD[21], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneTD[21], 1);
	TextDrawSetShadow(PhoneTD[21], 0);
	TextDrawAlignment(PhoneTD[21], 1);
	TextDrawColor(PhoneTD[21], 255);
	TextDrawBackgroundColor(PhoneTD[21], 0);
	TextDrawBoxColor(PhoneTD[21], 50);
	TextDrawUseBox(PhoneTD[21], 0);
	TextDrawSetProportional(PhoneTD[21], 1);
	TextDrawSetSelectable(PhoneTD[21], 0);

	PhoneBankTD[0] = TextDrawCreate(583.000000, 200.000000, "_");
	TextDrawFont(PhoneBankTD[0], 0);
	TextDrawLetterSize(PhoneBankTD[0], 0.600000, 17.549985);
	TextDrawTextSize(PhoneBankTD[0], 298.500000, 97.500000);
	TextDrawSetOutline(PhoneBankTD[0], 1);
	TextDrawSetShadow(PhoneBankTD[0], 0);
	TextDrawAlignment(PhoneBankTD[0], 2);
	TextDrawColor(PhoneBankTD[0], -1);
	TextDrawBackgroundColor(PhoneBankTD[0], 1296911871);
	TextDrawBoxColor(PhoneBankTD[0], -1061109505);
	TextDrawUseBox(PhoneBankTD[0], 1);
	TextDrawSetProportional(PhoneBankTD[0], 1);
	TextDrawSetSelectable(PhoneBankTD[0], 0);
	
	PhoneBankTD[1] = TextDrawCreate(556.000000, 202.000000, "G");
	TextDrawFont(PhoneBankTD[1], 1);
	TextDrawLetterSize(PhoneBankTD[1], 0.937500, 4.099999);
	TextDrawTextSize(PhoneBankTD[1], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneBankTD[1], 1);
	TextDrawSetShadow(PhoneBankTD[1], 0);
	TextDrawAlignment(PhoneBankTD[1], 1);
	TextDrawColor(PhoneBankTD[1], 65535);
	TextDrawBackgroundColor(PhoneBankTD[1], 255);
	TextDrawBoxColor(PhoneBankTD[1], 50);
	TextDrawUseBox(PhoneBankTD[1], 0);
	TextDrawSetProportional(PhoneBankTD[1], 1);
	TextDrawSetSelectable(PhoneBankTD[1], 0);
	
	PhoneBankTD[2] = TextDrawCreate(550.000000, 206.000000, "ld_pool:ball");
	TextDrawFont(PhoneBankTD[2], 4);
	TextDrawLetterSize(PhoneBankTD[2], 0.600000, 2.000000);
	TextDrawTextSize(PhoneBankTD[2], 32.000000, 34.000000);
	TextDrawSetOutline(PhoneBankTD[2], 1);
	TextDrawSetShadow(PhoneBankTD[2], 0);
	TextDrawAlignment(PhoneBankTD[2], 1);
	TextDrawColor(PhoneBankTD[2], -1);
	TextDrawBackgroundColor(PhoneBankTD[2], 255);
	TextDrawBoxColor(PhoneBankTD[2], 50);
	TextDrawUseBox(PhoneBankTD[2], 1);
	TextDrawSetProportional(PhoneBankTD[2], 1);
	TextDrawSetSelectable(PhoneBankTD[2], 0);
	
	PhoneBankTD[3] = TextDrawCreate(579.000000, 213.000000, "cash");
	TextDrawFont(PhoneBankTD[3], 1);
	TextDrawLetterSize(PhoneBankTD[3], 0.470833, 1.600002);
	TextDrawTextSize(PhoneBankTD[3], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneBankTD[3], 1);
	TextDrawSetShadow(PhoneBankTD[3], 0);
	TextDrawAlignment(PhoneBankTD[3], 1);
	TextDrawColor(PhoneBankTD[3], 65535);
	TextDrawBackgroundColor(PhoneBankTD[3], 255);
	TextDrawBoxColor(PhoneBankTD[3], 50);
	TextDrawUseBox(PhoneBankTD[3], 0);
	TextDrawSetProportional(PhoneBankTD[3], 1);
	TextDrawSetSelectable(PhoneBankTD[3], 0);
	
	PhoneBankTD[4] = TextDrawCreate(583.000000, 322.000000, "SEND MONEY");
	TextDrawFont(PhoneBankTD[4], 2);
	TextDrawLetterSize(PhoneBankTD[4], 0.258332, 2.499999);
	TextDrawTextSize(PhoneBankTD[4], 16.500000, 70.500000);
	TextDrawSetOutline(PhoneBankTD[4], 1);
	TextDrawSetShadow(PhoneBankTD[4], 0);
	TextDrawAlignment(PhoneBankTD[4], 2);
	TextDrawColor(PhoneBankTD[4], -1);
	TextDrawBackgroundColor(PhoneBankTD[4], 255);
	TextDrawBoxColor(PhoneBankTD[4], 200);
	TextDrawUseBox(PhoneBankTD[4], 1);
	TextDrawSetProportional(PhoneBankTD[4], 1);
	TextDrawSetSelectable(PhoneBankTD[4], 1);
	
	PhoneBankTD[5] = TextDrawCreate(539.000000, 248.000000, "Balance");
	TextDrawFont(PhoneBankTD[5], 2);
	TextDrawLetterSize(PhoneBankTD[5], 0.233333, 1.200000);
	TextDrawTextSize(PhoneBankTD[5], 400.000000, 17.000000);
	TextDrawSetOutline(PhoneBankTD[5], 1);
	TextDrawSetShadow(PhoneBankTD[5], 0);
	TextDrawAlignment(PhoneBankTD[5], 1);
	TextDrawColor(PhoneBankTD[5], -1);
	TextDrawBackgroundColor(PhoneBankTD[5], 255);
	TextDrawBoxColor(PhoneBankTD[5], 50);
	TextDrawUseBox(PhoneBankTD[5], 0);
	TextDrawSetProportional(PhoneBankTD[5], 1);
	TextDrawSetSelectable(PhoneBankTD[5], 0);	
	
	// ATM TEXTDRAWS
	ATMTD[0] = TextDrawCreate(320.000000, 124.000000, "_");
	TextDrawFont(ATMTD[0], 1);
	TextDrawLetterSize(ATMTD[0], 0.600000, 21.800003);
	TextDrawTextSize(ATMTD[0], 298.500000, 275.000000);
	TextDrawSetOutline(ATMTD[0], 1);
	TextDrawSetShadow(ATMTD[0], 0);
	TextDrawAlignment(ATMTD[0], 2);
	TextDrawColor(ATMTD[0], -1);
	TextDrawBackgroundColor(ATMTD[0], 255);
	TextDrawBoxColor(ATMTD[0], -1);
	TextDrawUseBox(ATMTD[0], 1);
	TextDrawSetProportional(ATMTD[0], 1);
	TextDrawSetSelectable(ATMTD[0], 0);
	
	ATMTD[1] = TextDrawCreate(274.000000, 161.000000, "_");
	TextDrawFont(ATMTD[1], 1);
	TextDrawLetterSize(ATMTD[1], 0.600000, 14.800003);
	TextDrawTextSize(ATMTD[1], 298.500000, 155.000000);
	TextDrawSetOutline(ATMTD[1], 1);
	TextDrawSetShadow(ATMTD[1], 0);
	TextDrawAlignment(ATMTD[1], 2);
	TextDrawColor(ATMTD[1], -1);
	TextDrawBackgroundColor(ATMTD[1], 255);
	TextDrawBoxColor(ATMTD[1], 135);
	TextDrawUseBox(ATMTD[1], 1);
	TextDrawSetProportional(ATMTD[1], 1);
	TextDrawSetSelectable(ATMTD[1], 0);
	
	ATMTD[2] = TextDrawCreate(320.000000, 124.000000, "_");
	TextDrawFont(ATMTD[2], 1);
	TextDrawLetterSize(ATMTD[2], 0.600000, 1.500002);
	TextDrawTextSize(ATMTD[2], 298.500000, 275.500000);
	TextDrawSetOutline(ATMTD[2], 1);
	TextDrawSetShadow(ATMTD[2], 0);
	TextDrawAlignment(ATMTD[2], 2);
	TextDrawColor(ATMTD[2], -65281);
	TextDrawBackgroundColor(ATMTD[2], 255);
	TextDrawBoxColor(ATMTD[2], -65281);
	TextDrawUseBox(ATMTD[2], 1);
	TextDrawSetProportional(ATMTD[2], 1);
	TextDrawSetSelectable(ATMTD[2], 0);
	
	ATMTD[3] = TextDrawCreate(404.000000, 236.000000, "_");
	TextDrawFont(ATMTD[3], 1);
	TextDrawLetterSize(ATMTD[3], 0.600000, -0.149996);
	TextDrawTextSize(ATMTD[3], 298.500000, 69.500000);
	TextDrawSetOutline(ATMTD[3], 1);
	TextDrawSetShadow(ATMTD[3], 0);
	TextDrawAlignment(ATMTD[3], 2);
	TextDrawColor(ATMTD[3], -1);
	TextDrawBackgroundColor(ATMTD[3], 255);
	TextDrawBoxColor(ATMTD[3], 255);
	TextDrawUseBox(ATMTD[3], 1);
	TextDrawSetProportional(ATMTD[3], 1);
	TextDrawSetSelectable(ATMTD[3], 0);
	
	ATMTD[4] = TextDrawCreate(404.000000, 245.000000, "_");
	TextDrawFont(ATMTD[4], 1);
	TextDrawLetterSize(ATMTD[4], 0.600000, -0.149996);
	TextDrawTextSize(ATMTD[4], 298.500000, 69.500000);
	TextDrawSetOutline(ATMTD[4], 1);
	TextDrawSetShadow(ATMTD[4], 0);
	TextDrawAlignment(ATMTD[4], 2);
	TextDrawColor(ATMTD[4], -1);
	TextDrawBackgroundColor(ATMTD[4], 255);
	TextDrawBoxColor(ATMTD[4], 255);
	TextDrawUseBox(ATMTD[4], 1);
	TextDrawSetProportional(ATMTD[4], 1);
	TextDrawSetSelectable(ATMTD[4], 0);
	
	ATMTD[5] = TextDrawCreate(374.000000, 236.000000, "_");
	TextDrawFont(ATMTD[5], 1);
	TextDrawLetterSize(ATMTD[5], 0.600000, 0.850003);
	TextDrawTextSize(ATMTD[5], 163.500000, 10.500000);
	TextDrawSetOutline(ATMTD[5], 1);
	TextDrawSetShadow(ATMTD[5], 0);
	TextDrawAlignment(ATMTD[5], 2);
	TextDrawColor(ATMTD[5], -1);
	TextDrawBackgroundColor(ATMTD[5], 255);
	TextDrawBoxColor(ATMTD[5], 255);
	TextDrawUseBox(ATMTD[5], 1);
	TextDrawSetProportional(ATMTD[5], 1);
	TextDrawSetSelectable(ATMTD[5], 0);
	
	ATMTD[6] = TextDrawCreate(435.000000, 236.000000, "_");
	TextDrawFont(ATMTD[6], 1);
	TextDrawLetterSize(ATMTD[6], 0.600000, 0.850003);
	TextDrawTextSize(ATMTD[6], 163.500000, 10.500000);
	TextDrawSetOutline(ATMTD[6], 1);
	TextDrawSetShadow(ATMTD[6], 0);
	TextDrawAlignment(ATMTD[6], 2);
	TextDrawColor(ATMTD[6], -1);
	TextDrawBackgroundColor(ATMTD[6], 255);
	TextDrawBoxColor(ATMTD[6], 255);
	TextDrawUseBox(ATMTD[6], 1);
	TextDrawSetProportional(ATMTD[6], 1);
	TextDrawSetSelectable(ATMTD[6], 0);
	
	ATMTD[7] = TextDrawCreate(318.000000, 126.000000, "Would you like to cancel ?");
	TextDrawFont(ATMTD[7], 2);
	TextDrawLetterSize(ATMTD[7], 0.191666, 1.000000);
	TextDrawTextSize(ATMTD[7], 540.000000, 17.000000);
	TextDrawSetOutline(ATMTD[7], 0);
	TextDrawSetShadow(ATMTD[7], 0);
	TextDrawAlignment(ATMTD[7], 1);
	TextDrawColor(ATMTD[7], 255);
	TextDrawBackgroundColor(ATMTD[7], 115);
	TextDrawBoxColor(ATMTD[7], 50);
	TextDrawUseBox(ATMTD[7], 0);
	TextDrawSetProportional(ATMTD[7], 1);
	TextDrawSetSelectable(ATMTD[7], 0);
	
	ATMTD[8] = TextDrawCreate(237.000000, 183.000000, "MR");
	TextDrawFont(ATMTD[8], 3);
	TextDrawLetterSize(ATMTD[8], 1.349999, 5.500000);
	TextDrawTextSize(ATMTD[8], 400.000000, 17.000000);
	TextDrawSetOutline(ATMTD[8], 1);
	TextDrawSetShadow(ATMTD[8], 0);
	TextDrawAlignment(ATMTD[8], 1);
	TextDrawColor(ATMTD[8], -65281);
	TextDrawBackgroundColor(ATMTD[8], 255);
	TextDrawBoxColor(ATMTD[8], 50);
	TextDrawUseBox(ATMTD[8], 0);
	TextDrawSetProportional(ATMTD[8], 1);
	TextDrawSetSelectable(ATMTD[8], 0);
	
	ATMTD[9] = TextDrawCreate(221.000000, 233.000000, "BANK ATM MACHINE");
	TextDrawFont(ATMTD[9], 2);
	TextDrawLetterSize(ATMTD[9], 0.254166, 2.000000);
	TextDrawTextSize(ATMTD[9], 400.000000, 17.000000);
	TextDrawSetOutline(ATMTD[9], 1);
	TextDrawSetShadow(ATMTD[9], 0);
	TextDrawAlignment(ATMTD[9], 1);
	TextDrawColor(ATMTD[9], -1);
	TextDrawBackgroundColor(ATMTD[9], 255);
	TextDrawBoxColor(ATMTD[9], 50);
	TextDrawUseBox(ATMTD[9], 0);
	TextDrawSetProportional(ATMTD[9], 1);
	TextDrawSetSelectable(ATMTD[9], 0);
	
	ATMTD[10] = TextDrawCreate(358.000000, 219.000000, "~B~PLEASE ~R~ TAP ~B~ TO INSERT THE ATM CARD");
	TextDrawFont(ATMTD[10], 2);
	TextDrawLetterSize(ATMTD[10], 0.116666, 1.500000);
	TextDrawTextSize(ATMTD[10], 625.000000, 17.000000);
	TextDrawSetOutline(ATMTD[10], 0);
	TextDrawSetShadow(ATMTD[10], 0);
	TextDrawAlignment(ATMTD[10], 1);
	TextDrawColor(ATMTD[10], 255);
	TextDrawBackgroundColor(ATMTD[10], 255);
	TextDrawBoxColor(ATMTD[10], 50);
	TextDrawUseBox(ATMTD[10], 0);
	TextDrawSetProportional(ATMTD[10], 1);
	TextDrawSetSelectable(ATMTD[10], 0);
	
	ATMTD[11] = TextDrawCreate(348.000000, 192.000000, "Preview_Model");
	TextDrawFont(ATMTD[11], 5);
	TextDrawLetterSize(ATMTD[11], 0.600000, 2.000000);
	TextDrawTextSize(ATMTD[11], 112.500000, 150.000000);
	TextDrawSetOutline(ATMTD[11], 0);
	TextDrawSetShadow(ATMTD[11], 0);
	TextDrawAlignment(ATMTD[11], 1);
	TextDrawColor(ATMTD[11], -1);
	TextDrawBackgroundColor(ATMTD[11], 0);
	TextDrawBoxColor(ATMTD[11], 0);
	TextDrawUseBox(ATMTD[11], 0);
	TextDrawSetProportional(ATMTD[11], 1);
	TextDrawSetSelectable(ATMTD[11], true);
	TextDrawSetPreviewModel(ATMTD[11], 1581);
	TextDrawSetPreviewRot(ATMTD[11], 49.000000, 90.000000, 180.000000, 1.000000);
	TextDrawSetPreviewVehCol(ATMTD[11], 1, 1);
	
	ATMTD[12] = TextDrawCreate(438.000000, 123.000000, "ld_beat:cross");
	TextDrawFont(ATMTD[12], 4);
	TextDrawLetterSize(ATMTD[12], 0.600000, 2.000000);
	TextDrawTextSize(ATMTD[12], 16.000000, 16.000000);
	TextDrawSetOutline(ATMTD[12], 1);
	TextDrawSetShadow(ATMTD[12], 0);
	TextDrawAlignment(ATMTD[12], 1);
	TextDrawColor(ATMTD[12], -1);
	TextDrawBackgroundColor(ATMTD[12], 255);
	TextDrawBoxColor(ATMTD[12], 50);
	TextDrawUseBox(ATMTD[12], 1);
	TextDrawSetProportional(ATMTD[12], 1);
	TextDrawSetSelectable(ATMTD[12], true);
	
	ATMTD[13] = TextDrawCreate(218.000000, 201.000000, "tRITON_LUX");
	TextDrawFont(ATMTD[13], 3);
	TextDrawLetterSize(ATMTD[13], 0.254166, 2.000000);
	TextDrawTextSize(ATMTD[13], 600.000000, 17.000000);
	TextDrawSetOutline(ATMTD[13], 1);
	TextDrawSetShadow(ATMTD[13], 0);
	TextDrawAlignment(ATMTD[13], 1);
	TextDrawColor(ATMTD[13], -65281);
	TextDrawBackgroundColor(ATMTD[13], 255);
	TextDrawBoxColor(ATMTD[13], -65486);
	TextDrawUseBox(ATMTD[13], 0);
	TextDrawSetProportional(ATMTD[13], 1);
	TextDrawSetSelectable(ATMTD[13], 0);
	
	ATMTD[14] = TextDrawCreate(202.000000, 231.000000, "YOUR BALANCE");
	TextDrawFont(ATMTD[14], 2);
	TextDrawLetterSize(ATMTD[14], 0.254166, 2.000000);
	TextDrawTextSize(ATMTD[14], 400.000000, 17.000000);
	TextDrawSetOutline(ATMTD[14], 1);
	TextDrawSetShadow(ATMTD[14], 0);
	TextDrawAlignment(ATMTD[14], 1);
	TextDrawColor(ATMTD[14], -1);
	TextDrawBackgroundColor(ATMTD[14], 255);
	TextDrawBoxColor(ATMTD[14], 50);
	TextDrawUseBox(ATMTD[14], 0);
	TextDrawSetProportional(ATMTD[14], 1);
	TextDrawSetSelectable(ATMTD[14], 0);
	
	ATMTD[15] = TextDrawCreate(202.000000, 177.000000, "WELCOME");
	TextDrawFont(ATMTD[15], 2);
	TextDrawLetterSize(ATMTD[15], 0.254166, 2.000000);
	TextDrawTextSize(ATMTD[15], 400.000000, 17.000000);
	TextDrawSetOutline(ATMTD[15], 1);
	TextDrawSetShadow(ATMTD[15], 0);
	TextDrawAlignment(ATMTD[15], 1);
	TextDrawColor(ATMTD[15], -1);
	TextDrawBackgroundColor(ATMTD[15], 255);
	TextDrawBoxColor(ATMTD[15], 50);
	TextDrawUseBox(ATMTD[15], 0);
	TextDrawSetProportional(ATMTD[15], 1);
	TextDrawSetSelectable(ATMTD[15], 0);
	
	ATMTD[16] = TextDrawCreate(404.000000, 161.000000, "_");
	TextDrawFont(ATMTD[16], 1);
	TextDrawLetterSize(ATMTD[16], 0.600000, 3.550002);
	TextDrawTextSize(ATMTD[16], 298.500000, 75.000000);
	TextDrawSetOutline(ATMTD[16], 1);
	TextDrawSetShadow(ATMTD[16], 0);
	TextDrawAlignment(ATMTD[16], 2);
	TextDrawColor(ATMTD[16], -1);
	TextDrawBackgroundColor(ATMTD[16], 255);
	TextDrawBoxColor(ATMTD[16], 16777095);
	TextDrawUseBox(ATMTD[16], 1);
	TextDrawSetProportional(ATMTD[16], 1);
	TextDrawSetSelectable(ATMTD[16], 0);
	
	ATMTD[17] = TextDrawCreate(404.000000, 213.000000, "_");
	TextDrawFont(ATMTD[17], 1);
	TextDrawLetterSize(ATMTD[17], 0.600000, 3.550002);
	TextDrawTextSize(ATMTD[17], 298.500000, 75.000000);
	TextDrawSetOutline(ATMTD[17], 1);
	TextDrawSetShadow(ATMTD[17], 0);
	TextDrawAlignment(ATMTD[17], 2);
	TextDrawColor(ATMTD[17], -1);
	TextDrawBackgroundColor(ATMTD[17], 255);
	TextDrawBoxColor(ATMTD[17], 1097458055);
	TextDrawUseBox(ATMTD[17], 1);
	TextDrawSetProportional(ATMTD[17], 1);
	TextDrawSetSelectable(ATMTD[17], 0);
	
	ATMTD[18] = TextDrawCreate(371.000000, 169.000000, "WITHDRAW");
	TextDrawFont(ATMTD[18], 1);
	TextDrawLetterSize(ATMTD[18], 0.350000, 1.750000);
	TextDrawTextSize(ATMTD[18], 438.000000, 17.000000);
	TextDrawSetOutline(ATMTD[18], 1);
	TextDrawSetShadow(ATMTD[18], 0);
	TextDrawAlignment(ATMTD[18], 1);
	TextDrawColor(ATMTD[18], -1);
	TextDrawBackgroundColor(ATMTD[18], 255);
	TextDrawBoxColor(ATMTD[18], 50);
	TextDrawUseBox(ATMTD[18], 0);
	TextDrawSetProportional(ATMTD[18], 1);
	TextDrawSetSelectable(ATMTD[18], true);
	
	ATMTD[19] = TextDrawCreate(371.000000, 220.000000, "BALANCE");
	TextDrawFont(ATMTD[19], 1);
	TextDrawLetterSize(ATMTD[19], 0.454166, 1.750000);
	TextDrawTextSize(ATMTD[19], 438.000000, 17.000000);
	TextDrawSetOutline(ATMTD[19], 1);
	TextDrawSetShadow(ATMTD[19], 0);
	TextDrawAlignment(ATMTD[19], 1);
	TextDrawColor(ATMTD[19], -1);
	TextDrawBackgroundColor(ATMTD[19], 255);
	TextDrawBoxColor(ATMTD[19], 50);
	TextDrawUseBox(ATMTD[19], 0);
	TextDrawSetProportional(ATMTD[19], 1);
	TextDrawSetSelectable(ATMTD[19], true);
	
	// Animation textdraw
	AnimationTD = TextDrawCreate(321.000000, 431.000000, "PRESS ~r~SPACE ~W~ TO to stop animation");
	TextDrawFont(AnimationTD, 2);
	TextDrawLetterSize(AnimationTD, 0.225000, 1.500000);
	TextDrawTextSize(AnimationTD, 475.000000, 502.000000);
	TextDrawSetOutline(AnimationTD, 1);
	TextDrawSetShadow(AnimationTD, 0);
	TextDrawAlignment(AnimationTD, 2);
	TextDrawColor(AnimationTD, -1);
	TextDrawBackgroundColor(AnimationTD, 255);
	TextDrawBoxColor(AnimationTD, 50);
	TextDrawUseBox(AnimationTD, 0);
	TextDrawSetProportional(AnimationTD, 1);
	TextDrawSetSelectable(AnimationTD, 0);

	DOWNTD = TextDrawCreate(315.000000, -41.000000, "_");
	TextDrawFont(DOWNTD, 1);
	TextDrawLetterSize(DOWNTD, 0.600000, 55.300003);
	TextDrawTextSize(DOWNTD, 298.500000, 725.000000);
	TextDrawSetOutline(DOWNTD, 2);
	TextDrawSetShadow(DOWNTD, 0);
	TextDrawAlignment(DOWNTD, 2);
	TextDrawColor(DOWNTD, -1);
	TextDrawBackgroundColor(DOWNTD, 0);
	TextDrawBoxColor(DOWNTD, -741092523);
	TextDrawUseBox(DOWNTD, 1);
	TextDrawSetProportional(DOWNTD, 1);
	TextDrawSetSelectable(DOWNTD, 0);
	
	Tagastd1 = TextDrawCreate(315.000000, -41.000000, "_");
	TextDrawFont(Tagastd1, 1);
	TextDrawLetterSize(Tagastd1, 0.600000, 55.300003);
	TextDrawTextSize(Tagastd1, 298.500000, 725.000000);
	TextDrawSetOutline(Tagastd1, 2);
	TextDrawSetShadow(Tagastd1, 0);
	TextDrawAlignment(Tagastd1, 2);
	TextDrawColor(Tagastd1, -1);
	TextDrawBackgroundColor(Tagastd1, 0);
	TextDrawBoxColor(Tagastd1, 1296911791);
	TextDrawUseBox(Tagastd1, 1);
	TextDrawSetProportional(Tagastd1, 1);
	TextDrawSetSelectable(Tagastd1, 0);
	
	Tagastd2 = TextDrawCreate(330.000000, 122.000000, "wASTED");
	TextDrawFont(Tagastd2, 3);
	TextDrawLetterSize(Tagastd2, 0.975000, 8.500000);
	TextDrawTextSize(Tagastd2, 475.000000, 502.000000);
	TextDrawSetOutline(Tagastd2, 1);
	TextDrawSetShadow(Tagastd2, 0);
	TextDrawAlignment(Tagastd2, 2);
	TextDrawColor(Tagastd2, -14273793);
	TextDrawBackgroundColor(Tagastd2, 255);
	TextDrawBoxColor(Tagastd2, 50);
	TextDrawUseBox(Tagastd2, 0);
	TextDrawSetProportional(Tagastd2, 1);
	TextDrawSetSelectable(Tagastd2, 0);
	

    Textdraw2 = TextDrawCreate(620.000000, 10.000000, "~w~Illegal Activity: ~y~Priority on Hold");
    TextDrawFont(Textdraw2, 1);
    TextDrawLetterSize(Textdraw2, 0.229166, 1.049998);
    TextDrawTextSize(Textdraw2, 400.000000, 17.000000);
    TextDrawSetOutline(Textdraw2, 1);
    TextDrawSetShadow(Textdraw2, 0);
    TextDrawAlignment(Textdraw2, 3);
    TextDrawColor(Textdraw2, -1);
    TextDrawBackgroundColor(Textdraw2, 255);
    TextDrawBoxColor(Textdraw2, 50);
    TextDrawUseBox(Textdraw2, 0);
    TextDrawSetProportional(Textdraw2, 1);
    TextDrawSetSelectable(Textdraw2, 0);
    
	// Blood Effects
    Blood[0] = TextDrawCreate(86.666648, 121.814811, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[0], 0.000000, 0.000000);
    TextDrawTextSize(Blood[0], 24.000000, 34.000000);
    TextDrawAlignment(Blood[0], 1);
    TextDrawColor(Blood[0], -1);
    TextDrawSetShadow(Blood[0], 0);
    TextDrawSetOutline(Blood[0], 0);
    TextDrawBackgroundColor(Blood[0], 255);
    TextDrawFont(Blood[0], 4);
    TextDrawSetProportional(Blood[0], 0);
    TextDrawSetShadow(Blood[0], 0);

    Blood[1] = TextDrawCreate(477.333312, 246.674102, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[1], 0.000000, 0.000000);
    TextDrawTextSize(Blood[1], 36.000000, 41.000000);
    TextDrawAlignment(Blood[1], 1);
    TextDrawColor(Blood[1], -1);
    TextDrawSetShadow(Blood[1], 0);
    TextDrawSetOutline(Blood[1], 0);
    TextDrawBackgroundColor(Blood[1], 255);
    TextDrawFont(Blood[1], 4);
    TextDrawSetProportional(Blood[1], 0);
    TextDrawSetShadow(Blood[1], 0);

    Blood[2] = TextDrawCreate(24.000041, 249.992660, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[2], 0.000000, 0.000000);
    TextDrawTextSize(Blood[2], 70.000000, 57.000000);
    TextDrawAlignment(Blood[2], 1);
    TextDrawColor(Blood[2], -1);
    TextDrawSetShadow(Blood[2], 0);
    TextDrawSetOutline(Blood[2], 0);
    TextDrawBackgroundColor(Blood[2], 255);
    TextDrawFont(Blood[2], 4);
    TextDrawSetProportional(Blood[2], 0);
    TextDrawSetShadow(Blood[2], 0);

    Blood[3] = TextDrawCreate(546.333374, 323.414916, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[3], 0.000000, 0.000000);
    TextDrawTextSize(Blood[3], 70.000000, 57.000000);
    TextDrawAlignment(Blood[3], 1);
    TextDrawColor(Blood[3], -1);
    TextDrawSetShadow(Blood[3], 0);
    TextDrawSetOutline(Blood[3], 0);
    TextDrawBackgroundColor(Blood[3], 255);
    TextDrawFont(Blood[3], 4);
    TextDrawSetProportional(Blood[3], 0);
    TextDrawSetShadow(Blood[3], 0);

    Blood[4] = TextDrawCreate(276.666717, 340.007568, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[4], 0.000000, 0.000000);
    TextDrawTextSize(Blood[4], 70.000000, 57.000000);
    TextDrawAlignment(Blood[4], 1);
    TextDrawColor(Blood[4], -1);
    TextDrawSetShadow(Blood[4], 0);
    TextDrawSetOutline(Blood[4], 0);
    TextDrawBackgroundColor(Blood[4], 255);
    TextDrawFont(Blood[4], 4);
    TextDrawSetProportional(Blood[4], 0);
    TextDrawSetShadow(Blood[4], 0);

    Blood[5] = TextDrawCreate(442.666748, 12.718672, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[5], 0.000000, 0.000000);
    TextDrawTextSize(Blood[5], 17.000000, 25.000000);
    TextDrawAlignment(Blood[5], 1);
    TextDrawColor(Blood[5], -1);
    TextDrawSetShadow(Blood[5], 0);
    TextDrawSetOutline(Blood[5], 0);
    TextDrawBackgroundColor(Blood[5], 255);
    TextDrawFont(Blood[5], 4);
    TextDrawSetProportional(Blood[5], 0);
    TextDrawSetShadow(Blood[5], 0);

    Blood[6] = TextDrawCreate(201.666732, 16.866807, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[6], 0.000000, 0.000000);
    TextDrawTextSize(Blood[6], 48.000000, 49.000000);
    TextDrawAlignment(Blood[6], 1);
    TextDrawColor(Blood[6], -1);
    TextDrawSetShadow(Blood[6], 0);
    TextDrawSetOutline(Blood[6], 0);
    TextDrawBackgroundColor(Blood[6], 255);
    TextDrawFont(Blood[6], 4);
    TextDrawSetProportional(Blood[6], 0);
    TextDrawSetShadow(Blood[6], 0);

    Blood[7] = TextDrawCreate(117.000106, 148.777893, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[7], 0.000000, 0.000000);
    TextDrawTextSize(Blood[7], 127.000000, 70.000000);
    TextDrawAlignment(Blood[7], 1);
    TextDrawColor(Blood[7], -1);
    TextDrawSetShadow(Blood[7], 0);
    TextDrawSetOutline(Blood[7], 0);
    TextDrawBackgroundColor(Blood[7], 255);
    TextDrawFont(Blood[7], 4);
    TextDrawSetProportional(Blood[7], 0);
    TextDrawSetShadow(Blood[7], 0);

    Blood[8] = TextDrawCreate(428.666717, 118.911254, "particle:bloodpool_64");
    TextDrawLetterSize(Blood[8], 0.000000, 0.000000);
    TextDrawTextSize(Blood[8], 59.000000, 50.000000);
    TextDrawAlignment(Blood[8], 1);
    TextDrawColor(Blood[8], -1);
    TextDrawSetShadow(Blood[8], 0);
    TextDrawSetOutline(Blood[8], 0);
    TextDrawBackgroundColor(Blood[8], 255);
    TextDrawFont(Blood[8], 4);
    TextDrawSetProportional(Blood[8], 0);
    TextDrawSetShadow(Blood[8], 0);

	Border5 = CreateDynamicObject(968,51.067,-1286.589,13.659,0.000,-90.200,-54.806);
    Border6 = CreateDynamicObject(968,71.514,-1305.882,12.010,0.000,-89.399,-49.406);
	
    Border7 = CreateDynamicObject(968,514.546,468.370,18.759,0.000,90.000,38.485);
    Border8 = CreateDynamicObject(968,525.827,477.249,18.799,0.000,90.000,217.985);
  
	Border9 = CreateDynamicObject(968,-159.520,371.172,11.722,0.000,90.000,166.787);
    Border0 = CreateDynamicObject(968,-173.392,374.704,11.722,0.000,90.000,344.634);
    
	Border4 = CreateDynamicObject(968,50.6163, -1527.4373, 4.8211,0.0000, 90.0000, 83.5200);
	Border3 = CreateDynamicObject(968,49.9395, -1534.8324, 4.8211,0.0000, 90.0000, -96.4800);
	
	Border1 = CreateDynamicObject(968, 1809.9446, 819.3456, 10.4577,   0.00000, 270.00000, 0.00000);
	Border2 = CreateDynamicObject(968, 1791.6895, 810.5111, 10.6400,  0.0000, 270.0000, 0.0000);

    CreateDynamic3DTextLabel("Before you enter you need "GREEN"$1000"GREY" to pass this gate\n"SVRCLR"(( Press 'Y' to open the toll gate. ))",COLOR_GREY, 50.6199,-1538.0898,5.1446, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$1000"GREY" to pass this gate\n"SVRCLR"(( Press 'Y' to open the toll gate. ))",COLOR_GREY, 52.2940,-1523.8521,5.0458, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$1000"GREY" to pass this gate\n"SVRCLR"(( Press 'Y' to open the toll gate. ))",COLOR_GREY, 1806.2926, 818.0422, 9.9457,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$1000"GREY" to pass this gate\n"SVRCLR"(( Press 'Y' to open the toll gate. ))",COLOR_GREY, 1788.2649, 810.4255,11.0599,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$1000"GREY" to pass this gate\n"SVRCLR"(( Press 'Y' to open the toll gate. ))",COLOR_GREY, 50.1882,-1282.9015,14.0709,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$1000"GREY" to pass this gate\n"SVRCLR"(( Press 'Y' to open the toll gate. ))",COLOR_GREY, 68.1923,-1304.1959,12.4487,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$1000"GREY" to pass this gate\n"SVRCLR"(( Press 'Y' to open the toll gate. ))",COLOR_GREY, 517.2233,472.0292,18.9297,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$1000"GREY" to pass this gate\n"SVRCLR"(( Press 'Y' to open the toll gate. ))",COLOR_GREY, 523.5045,473.5910,18.9297,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$1000"GREY" to pass this gate\n"SVRCLR"(( Press 'Y' to open the toll gate. ))",COLOR_GREY, -169.2154,374.7297,12.0781,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Before you enter you need "GREEN"$1000"GREY" to pass this gate\n"SVRCLR"(( Press 'Y' to open the toll gate. ))",COLOR_GREY, -163.9199,370.8330,12.0781,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);

    CreateDynamic3DTextLabel("Mechanic\n"SVRCLR"(( Type '/upgradevehicle' for car upgrades. ))",COLOR_GREY, 1002.9619,-1433.0162,14.7320,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Mechanic\n"SVRCLR"(( Type '/upgradevehicle' for car upgrades. ))",COLOR_GREY, 996.0955,-1432.9041,14.7320,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Mechanic\n"SVRCLR"(( Type '/tune' for tune upgrades. ))",COLOR_GREY, 989.3073,-1432.9618,14.7320,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);
	CreateDynamic3DTextLabel("Mechanic\n"SVRCLR"(( Type '/tune' for tune upgrades. ))",COLOR_GREY, 982.6109,-1433.0951,14.7320,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);

	CreateDynamic3DTextLabel("/viplocker\n"SVRCLR"(( To open the donator's locker. ))",COLOR_GREY,1989.1609,1984.7026,2714.0569,15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 30.0);

	
	gPrisonCells[0] = CreateDynamicObject(19302, -10.420631, 2063.483642, 727.626220, 0.000000, 0.000000, 90.000000); 
	gPrisonCells[1] = CreateDynamicObject(19302, -10.420631, 2066.713867, 727.626220, 0.000000, 0.000000, 90.000000); 
	gPrisonCells[2] = CreateDynamicObject(19302, -10.420631, 2069.906250, 727.626220, -0.000002, 0.000000, 90.000000); 
	gPrisonCells[3] = CreateDynamicObject(19302, -10.420631, 2073.136474, 727.626220, -0.000002, 0.000000, 90.000000); 
	gPrisonCells[4] = CreateDynamicObject(19302, -10.420631, 2076.307373, 727.626220, -0.000005, 0.000000, 90.000000); 
	gPrisonCells[5] = CreateDynamicObject(19302, -10.420631, 2079.537597, 727.626220, -0.000005, 0.000000, 90.000000); 
	gPrisonCells[6] = CreateDynamicObject(19302, -10.470632, 2082.927001, 727.626220, -0.000007, 0.000000, 90.000000); 
	gPrisonCells[7] = CreateDynamicObject(19302, -10.470632, 2086.157226, 727.626220, -0.000007, 0.000000, 90.000000); 


	gPrisonCells[8] = CreateDynamicObject(19302,1215.30004883,-1334.50000000,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[9] = CreateDynamicObject(19302,1215.29980469,-1337.69921875,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[10] = CreateDynamicObject(19302,1215.30004883,-1340.90002441,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[11] = CreateDynamicObject(19302,1215.30004883,-1340.90002441,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[12] = CreateDynamicObject(19302,1215.30004883,-1337.69995117,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[13] = CreateDynamicObject(19302,1215.30004883,-1334.50000000,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[14] = CreateDynamicObject(19302,1205.69995117,-1334.50000000,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[15] = CreateDynamicObject(19302,1205.69995117,-1337.69995117,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[16] = CreateDynamicObject(19302,1205.69995117,-1340.90002441,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[17] = CreateDynamicObject(19302,1205.69995117,-1334.50000000,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[18] = CreateDynamicObject(19302,1205.69995117,-1337.69995117,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[19] = CreateDynamicObject(19302,1205.69995117,-1340.90002441,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[20] = CreateDynamicObject(19302,1215.30004883,-1344.09997559,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[21] = CreateDynamicObject(19302,1215.30004883,-1344.09997559,797.00000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[22] = CreateDynamicObject(19302,1205.69995117,-1344.09997559,800.50000000,0.00000000,0.00000000,90.00000000);
	gPrisonCells[23] = CreateDynamicObject(19302,1205.69995117,-1344.09997559,797.00000000,0.00000000,0.00000000,90.00000000);

	for(new i = 0; i < 24; i ++)
	{
		SetDynamicObjectMaterial(gPrisonCells[i], 0, 19302, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
	}
	// Hospital Garage Doors (Main)
	CreateDynamicObject(10149, 1150.004394, -1345.316284, 14.201147, 0.000000, 0.000000, 270.000000);
    CreateDynamicObject(10149, 2007.520874, -1408.116088, 16.992187, 0.000000, 0.000000, 0.000000);
    /*CreateDynamic3DTextLabel("/deliverpatient\nto drop off a patient.", COLOR_DOCTOR, 1141.6477, -1326.3889, 13.6398, 10.0);
    CreateDynamicPickup(1240, 1, 1141.6477, -1326.3889, 13.6398);
    CreateDynamic3DTextLabel("/deliverpatient\nto drop off a patient.", COLOR_DOCTOR, 2007.6256, -1410.2455, 16.9922, 10.0);
    CreateDynamicPickup(1240, 1, 2007.6256, -1410.2455, 16.9922);*/

	// Job Vehicles (Main)
	pizzaVehicles[0] = AddStaticVehicleEx(586, 	780.8365,-1632.6361,12.9015,272.9283, 5, 1, 300); // bike 1
	pizzaVehicles[1] = AddStaticVehicleEx(586, 	780.9269,-1634.6879,12.8768,271.1844, 5, 1, 300); // bike 2
	pizzaVehicles[2] = AddStaticVehicleEx(586,  781.0136,-1636.0692,12.9018,269.9211, 5, 1, 300); // bike 3
	pizzaVehicles[3] = AddStaticVehicleEx(586,  781.0084,-1638.4603,12.9015,270.1765, 5, 1, 300); // bike 4
	
	courierVehicles[0] = AddStaticVehicleEx(499, 2428.4609, -2079.6228, 13.6406, 180.0, 11,11, 300); // mule
	courierVehicles[1] = AddStaticVehicleEx(499, 2435.7002, -2079.4829, 13.6406, 180.0, 11,11, 300); // mule
	courierVehicles[2] = AddStaticVehicleEx(499, 2440.4299, -2079.9658, 13.6406, 180.0, 11,11, 300); // mule
	courierVehicles[3] = AddStaticVehicleEx(499, 2445.4907, -2079.4810, 13.6144, 180.0, 11,11, 300); // benson
	courierVehicles[4] = AddStaticVehicleEx(499, 2450.9763, -2079.6001, 13.6142, 180.0, 11,11, 300); // benson
	courierVehicles[5] = AddStaticVehicleEx(499, 2428.3293, -2102.2959, 13.6132, 270.0, 11,11, 300); // boxville
	courierVehicles[6] = AddStaticVehicleEx(499, 2428.3030, -2107.6719, 13.6155, 270.0, 11,11, 300); // boxville
    courierVehicles[7] = AddStaticVehicleEx(499, 2455.4595, -2079.3115, 13.6159, 180.0, 11,11, 300); // benson
    courierVehicles[8] = AddStaticVehicleEx(499, 2461.5056, -2079.6157, 13.6145, 180.0, 11,11, 300); // benson
    courierVehicles[9] = AddStaticVehicleEx(499, 2428.3015, -2112.9250, 13.6170, 270.0, 11,11, 300); // boxville

	garbageVehicles[0] = AddStaticVehicleEx(408,-83.2573,-1608.2902,3.4238,296.4465,-1,-1,300); // Garbage 1
	garbageVehicles[1] = AddStaticVehicleEx(408,-86.3299,-1603.7037,3.1868,299.6139,-1,-1,300); // Garbage 2
	garbageVehicles[2] = AddStaticVehicleEx(408,-88.3847,-1598.7819,3.1799,296.01051,-1,-1,300); // Garbage 3
	garbageVehicles[3] = AddStaticVehicleEx(408,-90.5656,-1594.2034,3.1690,298.30381,-1,-1,300); // Garbage 4
	garbageVehicles[4] = AddStaticVehicleEx(408,-92.7535,-1589.5505,3.1653,298.71951,-1,-1,300); // Garbage 5
	garbageVehicles[5] = AddStaticVehicleEx(408,-94.4143,-1584.0763,3.1745,299.4539,-1,-1,300); // Garbage 6

    sweeperVehicles[0] = AddStaticVehicleEx(574, 2187.6636, -1975.8738, 13.3012, 180.0000, 26, 26, 10); // sweeper 1
	sweeperVehicles[1] = AddStaticVehicleEx(574, 2184.9255, -1975.8738, 13.3029, 180.0000, 26, 26, 10); // sweeper 2
	sweeperVehicles[2] = AddStaticVehicleEx(574, 2181.8672, -1975.8738, 13.3005, 180.0000, 26, 26, 10); // sweeper 3
	sweeperVehicles[3] = AddStaticVehicleEx(574, 2179.0005, -1975.8738, 13.2679, 180.0000, 26, 26, 10); // sweeper 4
	
	lummberveh[0]=AddStaticVehicleEx(422,	-526.5285,	-73.4262,	62.6774,	261.2614,	11,	11,	 300); // 
	lummberveh[1]=AddStaticVehicleEx(422,	-525.8801,	-69.8351,	62.7038,	264.5168,	11,	11,	 300); // 
	lummberveh[2]=AddStaticVehicleEx(422,	-527.2864,	-77.7827,	62.6427,	257.7425,	11,	11,	 300); // 
	lummberveh[3]=AddStaticVehicleEx(422,	-525.2802,	-63.5084,	62.6200,	264.6508,	11,	11,	 300); // 
	lummberveh[4]=AddStaticVehicleEx(422,	-525.3847,	-66.5863,	62.6339,	264.5176,	11,	11,	 300); // 
	lummberveh[5]=AddStaticVehicleEx(422,	-524.7733,	-60.5449,	62.5154,	265.0909,	11,	11,	 300); // 
	lummberveh[6]=AddStaticVehicleEx(422,	-524.5450,	-57.2978,	62.4063,	270.1288,	11,	11,	 300); // 
    	
	forkliftVehicles[0] = AddStaticVehicleEx(530,2767.1179,-2394.0667,13.3978,181.0095,6,6,	 300); // 
	forkliftVehicles[1]= AddStaticVehicleEx(530,2764.7432,-2394.0798,13.3969,179.8309,6,6, 300); // 
	forkliftVehicles[2]= AddStaticVehicleEx(530,2762.1157,-2394.1372,13.3977,181.9230,6,6, 300); // 
	forkliftVehicles[3]= AddStaticVehicleEx(530,2759.4133,-2394.2871,13.3957,182.9617,6,6, 300); // 
	forkliftVehicles[4]= AddStaticVehicleEx(530,2765.5581,-2389.1992,13.3966,179.4482,6,6, 300); // 
	forkliftVehicles[5]= AddStaticVehicleEx(530,2760.7737,-2388.7375,13.3973,177.0651,6,6, 300); // 


	new tmpobjid;

	//ls-lv ls sf toll

	//lslv
	tmpobjid = CreateDynamicObject(18762,-174.415,369.180,15.000,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,-162.478,368.772,17.086,90.000,0.000,73.950);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,-159.026,375.341,14.732,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,-174.413,369.160,13.607,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,-167.718,377.790,17.106,90.000,0.000,164.753);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,-167.272,370.147,17.086,90.000,0.000,73.950);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,-172.066,371.521,17.086,90.000,0.000,73.950);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,-162.906,376.464,17.086,90.000,0.000,164.753);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,-161.526,365.598,14.111,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,-161.545,365.605,13.607,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,-171.902,378.478,13.607,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,-159.028,375.315,13.607,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,-171.907,378.506,14.881,0.000,0.000,344.615);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(4642,-173.404,372.267,12.282,0.000,0.000,256.216);
	tmpobjid = CreateDynamicObject(966,-173.223,374.666,10.971,0.000,0.000,164.770);
	tmpobjid = CreateDynamicObject(4642,-160.784,369.254,12.282,0.000,0.000,74.593);
	tmpobjid = CreateDynamicObject(966,-159.701,371.221,10.971,0.000,0.000,346.603);
	tmpobjid = CreateDynamicObject(19121,-173.342,368.963,11.392,0.000,0.000,0.000);
	tmpobjid = CreateDynamicObject(19121,-162.446,366.341,11.392,0.000,0.000,0.000);
	tmpobjid = CreateDynamicObject(14680,-162.359,366.875,15.100,0.000,0.000,349.729);
	tmpobjid = CreateDynamicObject(14680,-168.301,367.673,15.100,0.000,0.000,349.729);
	tmpobjid = CreateDynamicObject(14680,-167.511,372.740,15.100,0.000,0.000,349.729);
	tmpobjid = CreateDynamicObject(14680,-160.851,371.996,15.100,0.000,0.000,349.729);
	//lslv
	tmpobjid = CreateDynamicObject(18762,528.709,472.548,21.722,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,520.149,478.753,24.532,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,512.488,472.244,21.551,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,515.241,475.290,24.558,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,518.088,471.233,24.573,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,512.479,472.262,20.272,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,520.911,467.199,24.579,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,517.779,464.663,20.272,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,517.768,464.680,21.783,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,523.539,480.218,20.272,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,528.709,472.528,20.272,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,523.525,480.231,21.913,0.000,0.000,35.681);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,525.837,470.665,24.565,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18766,522.995,474.713,24.559,90.000,0.000,35.039);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(4642,526.546,475.264,19.328,0.000,0.000,127.839);
	tmpobjid = CreateDynamicObject(4642,513.856,470.669,19.328,0.000,0.000,307.676);
	tmpobjid = CreateDynamicObject(966,514.699,468.479,17.927,0.000,0.000,218.256);
	tmpobjid = CreateDynamicObject(966,525.697,477.131,17.927,0.000,0.000,38.170);
	tmpobjid = CreateDynamicObject(3785,529.058,472.096,20.172,0.000,0.000,311.995);
	tmpobjid = CreateDynamicObject(3785,518.181,464.204,20.172,0.000,0.000,314.744);
	tmpobjid = CreateDynamicObject(14699,527.491,469.917,22.644,0.000,0.000,31.781);
	tmpobjid = CreateDynamicObject(14699,519.045,471.209,22.644,0.000,0.000,29.281);
	tmpobjid = CreateDynamicObject(14699,521.971,466.295,22.644,0.000,0.000,29.281);
	tmpobjid = CreateDynamicObject(14699,523.986,475.240,22.644,0.000,0.000,29.281);
	tmpobjid = CreateDynamicObject(19121,524.896,478.571,18.432,0.000,0.000,0.000);
	tmpobjid = CreateDynamicObject(19121,516.247,466.653,18.432,0.000,0.000,0.000);
	
	//tunnel ls to sf
	tmpobjid = CreateDynamicObject(18766,70.748,-1306.056,16.045,90.000,90.000,37.497);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,54.956,-1288.669,15.315,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,45.729,-1276.558,15.315,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,46.969,-1281.114,17.903,90.000,90.000,37.496);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,42.827,-1278.711,15.315,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,72.016,-1310.522,13.554,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,52.047,-1290.854,15.315,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,51.033,-1286.384,17.903,90.000,90.000,37.496);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,63.031,-1298.765,13.554,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18766,66.926,-1301.117,16.045,90.000,90.000,37.497);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "redbrickground256", 0);
	tmpobjid = CreateDynamicObject(18762,65.597,-1296.385,13.554,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(18762,74.939,-1308.251,13.554,0.000,0.000,37.866);
	SetDynamicObjectMaterial(tmpobjid, 0, 13691, "bevcunto2_lahills", "crazypave", 0);
	tmpobjid = CreateDynamicObject(966,71.390,-1305.729,11.374,0.000,0.000,-49.339);
	tmpobjid = CreateDynamicObject(4642,45.687,-1279.371,14.450,0.000,0.000,306.604);
	tmpobjid = CreateDynamicObject(4642,72.817,-1307.641,12.724,0.000,0.000,306.604);
	tmpobjid = CreateDynamicObject(4642,52.394,-1288.195,14.450,0.000,0.000,306.604);
	tmpobjid = CreateDynamicObject(4642,65.381,-1298.697,12.724,0.000,0.000,306.604);
	tmpobjid = CreateDynamicObject(966,50.972,-1286.448,12.811,0.000,0.000,305.521);

	tmpobjid = Exx_CreateDynamicObject(18980, 56.107200, -1544.986328, 4.124100, 0.000000, 90.000000, -7.739999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18980, 46.581100, -1543.674560, 4.114099, 0.000000, 90.000000, -7.739999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18980, 50.755569, -1531.646484, 14.411700, 0.000000, 90.000000, 85.079902, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18980, 47.355850, -1518.483520, 4.114099, 0.000000, 90.000000, -7.739999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18980, 49.943401, -1528.175537, 8.978099, 0.000000, 90.000000, -7.739999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 48.758998, -1543.635864, 2.538000, 0.000000, 0.000000, 352.275207, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 48.758998, -1543.635864, 7.525400, 0.000000, 0.000000, 352.275207, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 48.758968, -1543.635864, 12.507470, 0.000000, 0.000000, 352.275238, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 51.652088, -1518.995849, 2.538000, 0.000000, 0.000000, 352.275207, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 51.652099, -1518.995849, 7.525400, 0.000000, 0.000000, 352.275207, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 51.652099, -1518.995849, 12.507499, 0.000000, 0.000000, 352.275207, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18980, 50.685131, -1532.241210, 2.387500, 0.000000, 18.000000, 84.800003, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18980, 50.787361, -1530.249633, 2.387500, 0.000000, 18.000000, 266.179718, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18980, 52.294109, -1519.132324, 14.411700, 0.000000, 90.000000, 172.199890, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18980, 68.245796, -1521.388671, 2.938199, 0.000000, 18.000000, 171.380096, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18980, 52.316940, -1544.409301, 14.411700, 0.000000, 90.000000, 172.199890, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18980, 68.616043, -1546.687377, 2.938199, 0.000000, 18.000000, 171.380096, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18980, 34.162761, -1541.980712, 2.938199, 0.000000, 18.000000, -6.639900, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18980, 49.977588, -1544.088012, 14.401700, 0.000000, 90.000000, 172.199905, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18980, 34.933528, -1516.762451, 2.938199, 0.000000, 18.000000, -6.639900, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18980, 50.656810, -1518.902709, 14.401700, 0.000000, 90.000000, 172.199905, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19435, 51.259910, -1522.136108, 11.809700, 90.000000, 90.000000, 84.839988, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19435, 50.967388, -1525.505249, 11.809700, 90.000000, 90.000000, 84.839988, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19435, 49.283718, -1540.976440, 11.809700, 90.000000, 90.000000, 84.839988, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19435, 49.585998, -1537.574340, 11.809700, 90.000000, 90.000000, 84.839996, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 61.201030, -1520.322753, 2.538000, 0.000000, 0.000000, 352.275207, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 61.201000, -1520.322753, 7.525400, 0.000000, 0.000000, 352.275207, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 43.252311, -1517.729003, 2.538000, 0.000000, 0.000000, 352.275207, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 43.252300, -1517.729003, 7.525400, 0.000000, 0.000000, 352.275207, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762, 57.395950, -1519.991088, 7.941699, 0.000000, 90.000000, -7.559999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762, 52.452220, -1519.323486, 7.941699, 0.000000, 90.000000, -7.559999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762, 47.507968, -1518.663452, 7.941699, 0.000000, 90.000000, -7.559999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762, 45.266201, -1518.365722, 7.931700, 0.000000, 90.000000, -7.559999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 38.923400, -1517.750000, 13.885800, 0.000000, 18.000000, -6.599999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 38.320598, -1516.645507, 14.868300, 0.000000, 18.000000, -6.599999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 67.602996, -1520.737060, 4.613599, 0.000000, 90.000000, -7.739999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 37.533699, -1541.889770, 14.795800, 0.000000, 18.000000, -6.599999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 51.862899, -1519.749145, 7.416399, 0.000000, 90.000000, -7.559999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 51.862899, -1518.589111, 4.633600, 0.000000, 90.000000, -7.559999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 60.101501, -1519.789062, 8.442700, 0.000000, 90.000000, -7.079999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 60.306198, -1520.833862, 8.442700, 0.000000, 90.000000, -7.079999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 67.670700, -1546.054321, 4.613599, 0.000000, 90.000000, -7.619999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 60.519481, -1519.763305, 4.633600, 0.000000, 90.000000, -7.619999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 51.862899, -1519.609130, 4.593599, 0.000000, 90.000000, -7.559999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 64.132156, -1521.279907, 13.907600, 0.000000, 90.000000, -7.920000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 43.231399, -1517.415893, 4.613599, 0.000000, 90.000000, -7.739999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 67.471702, -1521.715209, 4.613599, 0.000000, 90.000000, -7.739999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 36.343830, -1542.700195, 11.523300, 0.000000, 18.000000, -6.599999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 37.249500, -1516.526489, 11.523300, 0.000000, 18.000000, -6.599999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 51.922901, -1519.709106, 8.442700, 0.000000, 90.000000, -7.079999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 43.294200, -1518.437622, 4.613599, 0.000000, 90.000000, -7.739999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 52.775081, -1519.746704, 14.903699, 0.000000, 90.000000, -8.100000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 64.881202, -1545.622680, 13.907600, 0.000000, 90.000000, -7.920000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 60.714099, -1520.810546, 13.907600, 0.000000, 90.000000, -7.920000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 46.236400, -1518.802612, 13.907600, 0.000000, 90.000000, -7.920000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 45.501899, -1518.704467, 14.903699, 0.000000, 90.000000, -8.100000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 60.714099, -1520.810546, 14.903699, 0.000000, 90.000000, -7.920000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 53.511001, -1519.827880, 14.903699, 0.000000, 90.000000, -7.920000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 64.132202, -1521.279907, 14.903699, 0.000000, 90.000000, -7.920000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 58.081501, -1545.499755, 2.538000, 0.000000, 0.000000, 352.275207, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 58.081501, -1545.499755, 7.525400, 0.000000, 0.000000, 352.275207, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762, 54.593601, -1544.764160, 7.941699, 0.000000, 90.000000, 352.231903, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762, 49.671070, -1544.104125, 7.941699, 0.000000, 90.000000, 352.231903, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762, 48.198539, -1543.900268, 7.941699, 0.000000, 90.000000, 352.231903, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762, 43.279319, -1543.222412, 7.941699, 0.000000, 90.000000, 352.231903, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 41.293010, -1543.280151, 2.538000, 0.000000, 0.000000, 352.275207, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 41.292999, -1543.280151, 7.525400, 0.000000, 0.000000, 352.275207, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19450, 49.054111, -1543.399536, 10.164529, 90.000000, 90.000000, -325.200134, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 60.374000, -1520.742797, 4.613599, 0.000000, 90.000000, -7.619999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 60.503898, -1546.088989, 4.613599, 0.000000, 90.000000, -7.619999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 67.743598, -1547.048828, 4.613599, 0.000000, 90.000000, -7.619999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 57.617050, -1544.654418, 7.466199, 0.000000, 90.000000, -7.679999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 53.226459, -1545.082763, 4.613599, 0.000000, 90.000000, -7.559999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 48.270301, -1544.409667, 4.613599, 0.000000, 90.000000, -7.559999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 60.395580, -1545.025024, 4.613599, 0.000000, 90.000000, -7.679999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 49.215198, -1543.527465, 8.436200, 0.000000, 90.000000, -7.679999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 49.215198, -1543.527465, 7.446199, 0.000000, 90.000000, -7.679999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 57.617099, -1544.654418, 8.436200, 0.000000, 90.000000, -7.679999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18981, 49.894618, -1528.128540, -7.127930, 0.000000, 0.000000, 82.027030, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18981, 49.237800, -1533.651733, -7.127900, 0.000000, 0.000000, 82.027000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 60.739700, -1530.600708, 7.000599, 0.000000, 0.000000, -7.380000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 60.353321, -1533.505859, 6.933800, 0.000000, 0.000000, -7.380000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 38.374729, -1531.104492, 5.603799, 0.000000, 0.000000, -7.860000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 38.853458, -1527.621704, 5.603799, 0.000000, 0.000000, -7.860000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 38.623989, -1529.342651, 5.603799, 0.000000, 0.000000, -7.860000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19377, 54.741371, -1528.637329, 2.559099, 0.000000, 0.000000, 82.235992, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19377, 45.316299, -1527.346069, 2.559099, 0.000000, 0.000000, 82.235992, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762, 51.213951, -1528.380004, 6.932360, 0.000000, 0.000000, -7.679999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18980, 56.002059, -1519.649414, 4.124100, 0.000000, 90.000000, -7.739999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 60.717060, -1530.613159, 5.603799, 0.000000, 0.000000, -7.380000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18980, 49.943401, -1528.175537, 8.234000, 0.000000, 90.000000, -7.739999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 60.353321, -1533.505859, 6.723488, 0.000000, 0.000000, -7.380000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 60.265769, -1534.204467, 6.963490, 0.000000, 0.000000, -7.380000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19377, 53.939510, -1534.263427, 2.559099, 0.000000, 0.000000, 82.235992, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19377, 44.451179, -1532.967163, 2.559099, 0.000000, 0.000000, 82.235992, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 3292, "cxrf_payspray", "newindow4", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762, 50.497570, -1533.754150, 6.932360, 0.000000, 0.000000, -7.679999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18980, 49.211120, -1533.596069, 8.234040, 0.000000, 90.000000, -7.739999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18980, 49.211101, -1533.596069, 8.978099, 0.000000, 90.000000, -7.739999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 38.374729, -1531.104492, 6.983729, 0.000000, 0.000000, -7.860000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 38.624000, -1529.342651, 6.983699, 0.000000, 0.000000, -7.860000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763, 38.853500, -1527.621704, 6.983699, 0.000000, 0.000000, -7.860000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454, 44.646091, -1531.671508, 9.479999, 0.000000, 90.000000, 82.259979, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454, 45.058631, -1528.717651, 9.479999, 0.000000, 90.000000, 82.259979, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454, 54.559028, -1530.024047, 9.479999, 0.000000, 90.000000, 82.259979, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454, 54.091259, -1532.961547, 9.479999, 0.000000, 90.000000, 82.259979, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19325, 67.867111, -1533.795288, 2.510040, 90.000000, 90.000000, 85.439956, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF003366);
	tmpobjid = Exx_CreateDynamicObject(19454, 57.532501, -1530.485107, 9.244899, 0.000000, 90.000000, 82.260002, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454, 57.375598, -1531.015502, 8.734800, 0.000000, 90.000000, 82.260002, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454, 57.375598, -1531.015502, 8.124699, 0.000000, 90.000000, 82.260002, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454, 57.375598, -1530.926391, 4.444399, 0.000000, 90.000000, 82.260002, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454, 57.375598, -1531.015502, 7.514599, 0.000000, 90.000000, 82.260002, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454, 57.375598, -1531.015502, 6.803500, 0.000000, 90.000000, 82.260002, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454, 57.375598, -1531.015502, 5.885300, 0.000000, 90.000000, 82.260002, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19377, 57.216701, -1532.340576, 3.907500, 0.000000, 0.000000, 77.639999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19377, 58.025970, -1531.103515, 4.108479, 0.000000, 0.000000, 111.900016, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454, 57.375598, -1531.015502, 5.151400, 0.000000, 90.000000, 82.260002, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19377, 57.629199, -1529.202758, 4.108500, 0.000000, 0.000000, 82.080001, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19377, 57.681968, -1533.041381, 4.108479, 0.000000, 0.000000, 53.940021, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454, 57.077331, -1533.379150, 9.244879, 0.000000, 90.000000, 82.259979, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 68.043296, -1531.731079, 5.834000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 33.527709, -1530.808105, 5.834000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(2734, 67.953880, -1533.844482, 4.542549, 0.000000, 0.000000, 85.499992, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "TOLL", 140, "Ariel", 120, 1, 0xFFFFFFFF, 0x00000000, 0);
	tmpobjid = Exx_CreateDynamicObject(19450, 45.041149, -1528.668823, 5.319590, 0.000000, 90.000000, 81.977851, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 53.113601, -1544.055908, 4.613599, 0.000000, 90.000000, -7.559999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 45.838298, -1543.088378, 4.613599, 0.000000, 90.000000, -7.559999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 42.035598, -1542.558471, 4.613599, 0.000000, 90.000000, -7.559999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 42.417270, -1543.596069, 4.613599, 0.000000, 90.000000, -7.559999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19450, 54.469841, -1530.018188, 7.769670, 0.000000, 90.000000, 81.977851, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19450, 44.666080, -1531.788940, 7.801770, 0.000000, 90.000000, 81.977897, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19450, 45.041099, -1528.668823, 7.769700, 0.000000, 90.000000, 81.977897, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19450, 54.469841, -1530.018188, 5.319590, 0.000000, 90.000000, 81.977851, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19450, 54.126781, -1533.120483, 5.299600, 0.000000, 90.000000, 81.977897, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19450, 44.613220, -1531.760620, 5.299600, 0.000000, 90.000000, 81.977897, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19450, 54.126800, -1533.120483, 7.801799, 0.000000, 90.000000, 81.977897, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19325, 33.715320, -1528.742309, 2.510040, 90.000000, 90.000000, 85.439956, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, -1, "none", "none", 0xFF003366);
	tmpobjid = Exx_CreateDynamicObject(19089, 67.685401, -1535.864868, 5.834000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 33.894439, -1526.692138, 5.834000, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 38.182399, -1517.551757, 14.795800, 0.000000, 18.000000, -6.599999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 37.126338, -1517.437133, 11.523349, 0.000000, 18.000000, -6.599999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 65.000183, -1520.476318, 14.918199, 0.000000, 18.000000, -187.259994, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 37.401901, -1542.830810, 14.795800, 0.000000, 18.000000, -6.599999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 53.511001, -1519.827880, 13.907600, 0.000000, 90.000000, -7.920000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 45.441200, -1542.960327, 14.887800, 0.000000, 90.000000, -7.920000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 52.724369, -1543.965454, 13.907600, 0.000000, 90.000000, -7.920000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 60.008499, -1544.961303, 13.907600, 0.000000, 90.000000, -7.920000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 36.478401, -1541.742919, 11.523300, 0.000000, 18.000000, -6.599999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 45.441169, -1542.960327, 13.907600, 0.000000, 90.000000, -7.920000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 64.721801, -1545.598510, 14.887800, 0.000000, 90.000000, -7.800000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 52.661300, -1543.958496, 14.887800, 0.000000, 90.000000, -7.920000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 59.350200, -1544.859375, 14.887800, 0.000000, 90.000000, -7.800000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 66.082397, -1520.627197, 11.523300, 0.000000, 18.000000, -187.259994, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 65.234596, -1546.669433, 14.918199, 0.000000, 18.000000, -187.320007, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 66.483589, -1545.896118, 11.523300, 0.000000, 18.000000, -186.180053, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 66.300697, -1546.840576, 11.523300, 0.000000, 18.000000, -186.360000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 65.923301, -1521.557739, 11.523300, 0.000000, 18.000000, -187.259994, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 65.382270, -1545.721923, 14.918199, 0.000000, 18.000000, -187.260009, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 64.822998, -1521.409179, 14.918199, 0.000000, 18.000000, -187.259994, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 52.232898, -1520.494018, 13.931099, 0.000000, 90.000000, 85.057800, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 51.234600, -1520.344116, 14.896100, 0.000000, 90.000000, 85.057800, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 52.232898, -1520.494018, 14.896100, 0.000000, 90.000000, 85.057800, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 51.618370, -1527.765502, 14.896100, 0.000000, 90.000000, 85.057800, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 51.618400, -1527.765502, 13.931099, 0.000000, 90.000000, 85.057800, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 50.984600, -1535.052246, 13.931099, 0.000000, 90.000000, 85.057800, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 50.984569, -1535.052246, 14.896100, 0.000000, 90.000000, 85.057800, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 49.978630, -1534.925903, 14.896100, 0.000000, 90.000000, 85.057800, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 50.606998, -1527.659545, 14.896100, 0.000000, 90.000000, 85.057800, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 51.234600, -1520.344116, 13.931099, 0.000000, 90.000000, 85.057800, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 50.606998, -1527.659545, 13.931099, 0.000000, 90.000000, 85.057800, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19089, 49.978599, -1534.925903, 13.931099, 0.000000, 90.000000, 85.057800, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(997, 45.132453, -1519.445190, 4.176949, 0.000000, 0.000000, -7.419998, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(997, 43.535331, -1542.312255, 4.196950, 0.000000, 0.000000, -8.399999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(997, 54.720405, -1520.526123, 4.126948, 0.000000, 0.000000, -8.419999, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(997, 51.975128, -1543.648315, 4.186949, 0.000000, 0.000000, -6.480000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "black64", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19327, 49.527103, -1539.840820, 11.421985, 0.000000, 0.000000, 85.559967, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "San", 140, "Ariel", 190, 1, 0xFFFFFFFF, 0x00000000, 0);
	tmpobjid = Exx_CreateDynamicObject(19327, 49.670352, -1538.068481, 11.421988, 0.000000, 0.000000, 85.559967, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "Fierro", 140, "Ariel", 190, 1, 0xFFFFFFFF, 0x00000000, 0);
	tmpobjid = Exx_CreateDynamicObject(19327, 51.142616, -1525.226074, 11.461991, 0.000000, 0.000000, 85.559967, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "San", 140, "Ariel", 190, 1, 0xFFFFFFFF, 0x00000000, 0);
	tmpobjid = Exx_CreateDynamicObject(19327, 51.042060, -1523.030883, 11.481986, 0.000000, 0.000000, 264.051635, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "Los", 140, "Ariel", 190, 1, 0xFFFFFFFF, 0x00000000, 0);
	tmpobjid = Exx_CreateDynamicObject(19327, 51.327232, -1523.274291, 11.461988, 0.000000, 0.000000, 85.559967, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "Fierro", 140, "Ariel", 190, 1, 0xFFFFFFFF, 0x00000000, 0);
	tmpobjid = Exx_CreateDynamicObject(19327, 50.920154, -1524.892211, 11.451988, 0.000000, 0.000000, -94.648391, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "Santos", 140, "Ariel", 180, 1, 0xFFFFFFFF, 0x00000000, 0);
	tmpobjid = Exx_CreateDynamicObject(19327, 49.446567, -1537.761230, 11.501988, 0.000000, 0.000000, 264.051635, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "Los", 140, "Ariel", 190, 1, 0xFFFFFFFF, 0x00000000, 0);
	tmpobjid = Exx_CreateDynamicObject(19327, 49.270782, -1539.717041, 11.501988, 0.000000, 0.000000, 264.051635, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterialText(tmpobjid, 0, "Santos", 140, "Ariel", 180, 1, 0xFFFFFFFF, 0x00000000, 0);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = Exx_CreateDynamicObject(19089, 38.169300, -1517.661743, 11.523349, 0.000000, 18.000000, -6.599999, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 51.356410, -1519.276733, 1.179039, 90.000000, 90.000000, -144.419998, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 43.020378, -1517.430541, 5.120999, 90.000000, 90.000000, -231.780090, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 61.577991, -1520.153808, 5.120950, 90.000000, 90.000000, 40.259998, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 52.044700, -1518.867675, 10.107850, 90.000000, 90.000000, -318.779937, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 42.942600, -1517.949340, 5.120999, 90.000000, 90.000000, -141.960006, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 43.654819, -1517.576660, 5.120999, 90.000000, 90.000000, -316.380065, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 51.983039, -1519.277709, 10.107850, 90.000000, 90.000000, -55.199981, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 51.399398, -1518.716064, 1.179000, 90.000000, 90.000000, -232.860000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 51.399440, -1518.716064, 10.107850, 90.000000, 90.000000, -232.860031, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 52.044700, -1518.867675, 1.179000, 90.000000, 90.000000, -318.779907, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 51.356410, -1519.276733, 10.107850, 90.000000, 90.000000, -144.419998, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 51.983001, -1519.277709, 1.179000, 90.000000, 90.000000, -55.200000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 43.573760, -1518.001098, 5.120950, 90.000000, 90.000000, -55.799999, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 60.847869, -1520.534057, 5.120950, 90.000000, 90.000000, -142.199996, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 60.804698, -1520.119384, 5.120950, 90.000000, 90.000000, -241.259994, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 58.388900, -1545.270019, 5.120950, 90.000000, 90.000000, 38.219989, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 61.451629, -1520.609741, 5.120950, 90.000000, 90.000000, -55.799999, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 57.538681, -1545.474609, 5.120950, 90.000000, 90.000000, -130.140075, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 58.430229, -1545.733032, 5.120950, 90.000000, 90.000000, -57.780010, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 41.580001, -1543.019775, 5.181000, 90.000000, 90.000000, -324.060089, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 48.626518, -1543.226440, 0.953610, 90.000000, 90.000000, -227.640151, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1569, 61.837448, -1533.494140, 4.168389, 0.000000, 0.000000, -97.259986, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 38.774940, -1529.809570, 4.028049, 90.000000, 90.000000, -185.580078, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 38.070060, -1531.324584, 4.610849, 90.000000, 90.000000, -143.220092, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 38.581268, -1531.072753, 2.287539, 90.000000, 90.000000, -185.580078, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 38.956909, -1528.674316, 4.028049, 90.000000, 90.000000, -185.580078, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 39.094020, -1527.589233, 2.287539, 90.000000, 90.000000, -185.580078, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 57.690731, -1545.298950, 5.120950, 90.000000, 90.000000, -239.160095, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 40.917030, -1543.485961, 5.120950, 90.000000, 90.000000, -140.580154, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 40.899341, -1543.032836, 5.120950, 90.000000, 90.000000, -239.160095, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 41.799839, -1543.442626, 5.120950, 90.000000, 90.000000, -65.040153, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 38.993778, -1526.941650, 4.510459, 90.000000, 90.000000, -213.420074, -1, -1, -1, 300.00, 300.00);


	tmpobjid = Exx_CreateDynamicObject(1228, 65.236419, -1533.500122, 4.544189, 0.000000, 0.000000, 172.499969, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1237, 65.325332, -1531.696166, 4.139180, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1237, 65.108947, -1535.391845, 4.139180, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1237, 53.400779, -1520.318969, 4.139180, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(966, 49.932170, -1534.817504, 4.069809, 0.000000, 0.000000, 83.879997, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(966, 50.639751, -1527.385742, 4.069809, 0.000000, 0.000000, 263.580169, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1237, 59.029960, -1521.070678, 4.139180, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1237, 43.682090, -1519.869995, 4.139180, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1237, 49.286300, -1519.735351, 4.139180, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1237, 56.300331, -1544.143920, 4.139180, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1237, 50.828369, -1543.263305, 4.139180, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1237, 37.396751, -1532.940795, 4.139180, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 49.054111, -1543.399536, 0.953610, 90.000000, 90.000000, -325.200134, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(19450, 48.626499, -1543.226440, 10.164500, 90.000000, 90.000000, -227.640197, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1237, 39.301540, -1541.596069, 4.139180, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1228, 59.783050, -1536.029418, 4.376900, 0.000000, 0.000000, 82.259979, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1280, 35.819381, -1528.984008, 4.833700, 0.000000, 0.000000, 355.492919, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1231, 33.807678, -1525.682373, 6.923049, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1231, 33.357368, -1531.309570, 6.923049, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1231, 16.280620, -1524.078979, 5.615029, 0.000000, 0.000000, -99.180007, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1231, 3.269730, -1521.622314, 4.673850, 0.000000, 0.000000, -100.800010, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1231, 63.467090, -1531.705078, 6.723050, 0.000000, 0.000000, 77.460006, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1215, 67.249298, -1531.173217, 4.152830, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1215, 66.755279, -1545.733032, 4.252830, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1215, 67.222579, -1536.895629, 4.252830, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = Exx_CreateDynamicObject(1215, 67.446609, -1522.194335, 4.352829, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);

    //rampazalsott = Exx_CreateDynamicObject(968, 50.616279, -1527.437255, 4.821100, 0.000000, 90.000000, 83.519973);//rampa za LS zatvorena
	//Exx_CreateDynamicObject(968, 50.616279, -1527.437255, 4.821100, 0.000000, 0.000000, 83.519973); //rampa za LS otvorena
	
	//Exx_CreateDynamicObject(968, 49.939498, -1534.832397, 4.821100, 0.000000, 0.000000, -96.480003); //rampa za SF otvorena
	//rampazasfot = Exx_CreateDynamicObject(968, 49.939498, -1534.832397, 4.821100, 0.000000, 90.000000, -96.480003); //rampa za SF zatvorena
    
	
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~LV toll~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
    tmpobjid = Exx_CreateDynamicObject(19449,1799.007,823.117,11.873,90.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1795.527,823.106,11.873,90.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1793.856,821.432,11.873,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1793.857,814.911,14.942,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1793.867,814.931,9.611,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1800.682,821.437,11.873,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1800.686,814.888,14.942,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1800.686,814.888,9.611,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1800.682,808.357,11.873,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1793.856,808.357,11.873,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1799.007,806.677,11.873,90.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1795.527,806.677,11.873,90.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19448,1793.912,814.883,11.836,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10763, "airport1_sfse", "ws_airportdoors1", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19448,1800.658,814.891,11.826,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10763, "airport1_sfse", "ws_airportdoors1", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19449,1811.902,808.357,11.873,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1811.902,814.888,9.611,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1811.902,821.437,11.873,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1811.902,814.888,14.942,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1813.582,806.677,11.873,90.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1813.582,823.117,11.873,90.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19448,1811.942,814.891,11.826,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10763, "airport1_sfse", "ws_airportdoors1", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19449,1815.042,806.687,11.873,90.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1815.042,823.106,11.873,90.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1780.867,823.106,11.873,90.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1779.327,823.096,11.873,90.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1782.546,821.432,11.873,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1782.546,814.931,9.611,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1782.546,814.911,14.942,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1782.546,808.357,11.873,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1780.867,806.677,11.873,90.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19449,1779.327,806.687,11.873,90.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "lightblue", 0xFF3399FF);
	tmpobjid = Exx_CreateDynamicObject(19448,1782.526,814.883,11.806,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10763, "airport1_sfse", "ws_airportdoors1", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19377,1816.709,818.340,11.447,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19377,1816.719,811.420,11.447,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19377,1777.653,818.352,11.447,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19377,1777.643,811.420,11.447,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1778.639,806.508,18.630,0.000,30.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1777.455,806.499,14.220,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1777.455,806.499,9.220,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1781.860,806.504,21.847,0.000,60.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1786.272,806.502,23.033,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1791.272,806.502,23.033,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1796.272,806.502,23.033,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1801.272,806.502,23.033,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1806.272,806.502,23.033,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1816.725,806.499,9.220,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1816.725,806.499,14.220,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1815.543,806.459,18.630,0.000,330.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1812.312,806.499,21.847,0.000,300.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1807.902,806.512,23.023,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1816.725,823.279,14.220,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1816.725,823.279,9.220,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1777.455,823.279,9.220,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1777.455,823.279,14.220,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1778.639,823.269,18.630,0.000,30.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1781.860,823.279,21.847,0.000,60.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1786.272,823.279,23.033,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1791.272,823.279,23.033,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1796.272,823.279,23.033,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1801.272,823.279,23.033,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1806.272,823.279,23.033,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1815.543,823.269,18.630,0.000,330.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1812.312,823.279,21.847,0.000,300.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1807.902,823.269,23.013,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19450,1795.017,821.975,11.893,90.000,0.000,45.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19377,1789.020,811.726,22.901,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19377,1789.020,818.340,22.891,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19377,1799.500,818.340,22.891,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19377,1799.500,811.726,22.901,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19377,1805.220,811.726,22.911,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19377,1805.220,818.340,22.901,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454,1811.924,811.789,22.044,0.000,300.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454,1811.924,818.340,22.054,0.000,300.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454,1812.920,811.777,21.442,0.000,300.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454,1812.920,818.340,21.452,0.000,300.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454,1815.268,818.340,19.083,0.000,330.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454,1815.268,811.789,19.093,0.000,330.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454,1815.848,811.789,18.133,0.000,330.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454,1815.848,818.340,18.143,0.000,330.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454,1782.369,817.997,22.054,0.000,60.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454,1782.369,811.726,22.044,0.000,60.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454,1781.369,817.997,21.462,0.000,60.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454,1781.369,811.726,21.442,0.000,60.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454,1779.027,811.792,19.093,0.000,30.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454,1779.027,817.997,19.103,0.000,30.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454,1778.488,811.792,18.133,0.000,30.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(19454,1778.498,817.997,18.133,0.000,30.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763,1798.696,808.208,15.344,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763,1798.696,821.568,15.344,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763,1797.196,815.068,20.344,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763,1797.196,815.068,15.344,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18766,1781.952,811.800,19.101,0.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18766,1781.942,818.020,19.081,0.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1780.942,822.520,18.531,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1780.952,807.300,18.531,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18766,1812.492,811.800,19.021,0.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18766,1812.502,818.020,19.021,0.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1813.502,822.520,18.371,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1813.492,807.300,18.391,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763,1795.696,821.568,15.344,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763,1795.696,821.568,20.344,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763,1798.696,821.568,20.344,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763,1795.696,808.208,15.344,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763,1795.696,808.208,20.344,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18763,1798.696,808.208,20.344,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);

	tmpobjid = Exx_CreateDynamicObject(18762,1810.647,819.386,7.906,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1802.277,819.371,7.906,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1801.277,819.371,7.906,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1811.647,819.386,7.906,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1792.383,810.526,8.312,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1793.383,810.526,8.312,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1784.060,810.548,8.312,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);
	tmpobjid = Exx_CreateDynamicObject(18762,1783.060,810.548,8.312,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 18646, "matcolours", "grey-95-percent", 0x00000000);

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = Exx_CreateDynamicObject(1569,1800.754,807.670,9.927,0.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(1569,1811.815,807.450,9.927,0.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(1569,1793.789,807.721,9.927,0.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(1569,1782.602,807.925,9.927,0.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1798.973,808.290,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1798.473,808.290,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1797.973,808.290,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1797.473,808.290,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1796.973,808.290,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1796.473,808.290,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1795.973,808.290,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1795.473,808.290,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1798.973,821.490,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1798.473,821.490,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1797.973,821.490,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1797.473,821.490,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1796.973,821.490,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1796.473,821.490,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1795.973,821.490,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1795.473,821.490,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1813.393,808.290,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1813.893,808.290,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1814.393,808.290,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1814.893,808.290,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1780.733,808.290,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1780.233,808.290,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1779.733,808.290,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1779.233,808.290,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1780.733,821.490,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1780.233,821.490,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1779.733,821.490,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1779.233,821.490,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1813.393,821.490,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1813.893,821.490,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1814.393,821.490,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1814.893,821.490,11.893,90.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1813.030,821.969,11.893,90.000,0.000,45.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1799.543,807.830,11.893,90.000,0.000,45.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1781.396,807.825,11.893,90.000,0.000,45.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1781.403,821.958,11.893,90.000,0.000,135.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1799.540,821.957,11.893,90.000,0.000,135.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1794.986,807.801,11.893,90.000,0.000,135.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1813.039,807.820,11.893,90.000,0.000,135.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1795.478,809.861,11.886,90.000,0.000,270.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1795.470,814.903,14.228,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1795.470,814.903,14.728,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1795.470,814.903,15.228,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1795.470,814.903,15.728,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1780.917,809.861,11.886,90.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1780.910,814.903,15.728,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1780.910,814.903,15.228,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1780.910,814.903,14.728,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1780.910,814.903,14.228,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1780.917,819.961,11.886,90.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1795.478,819.961,11.886,90.000,0.000,270.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1799.057,809.861,11.886,90.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1799.057,819.961,11.886,90.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1799.050,814.903,15.728,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1799.050,814.903,15.228,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1799.050,814.903,14.728,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1799.050,814.903,14.228,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1813.537,809.861,11.886,90.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1813.537,819.961,11.886,90.000,0.000,90.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1813.537,814.903,15.728,0.000,270.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1813.537,814.903,15.228,0.000,270.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1813.537,814.903,14.228,0.000,270.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19450,1813.537,814.903,14.728,0.000,270.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19449,1799.007,811.437,16.645,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19449,1795.527,811.437,16.645,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19449,1795.527,818.356,16.655,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19449,1799.007,818.356,16.655,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19449,1813.587,811.437,16.645,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19449,1813.587,818.356,16.655,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19449,1814.967,811.437,16.635,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19449,1814.967,818.356,16.645,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19449,1780.847,811.437,16.645,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19449,1780.847,818.356,16.655,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19449,1779.386,811.437,16.635,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(19449,1779.386,818.356,16.645,0.000,90.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(966,1809.841,819.337,9.719,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);
	tmpobjid = Exx_CreateDynamicObject(966,1791.570,810.519,9.862,0.000,0.000,0.000,-1,-1,-1,500.000,500.000);


	// VIP GARAGE
    VIPVehicles[0] = AddStaticVehicleEx(411,-4365.93212891,839.28680420,986.18029785,0.00000000,-1,-1,180); //Infernus
	VIPVehicles[1] = AddStaticVehicleEx(429,-4370.52832031,840.57843018,986.13031006,0.00000000,-1,-1,180); //Banshee
	VIPVehicles[2] = AddStaticVehicleEx(451,-4374.41894531,840.36810303,986.14465332,0.00000000,-1,-1,180); //Turismo
	VIPVehicles[3] = AddStaticVehicleEx(541,-4378.48046875,840.84783936,986.08032227,0.00000000,-1,-1,180); //Bullet
	VIPVehicles[4] = AddStaticVehicleEx(559,-4382.43701172,840.60235596,986.13439941,0.00000000,-1,-1,180); //Jester
	VIPVehicles[5] = AddStaticVehicleEx(560,-4386.68066406,841.29382324,986.18530273,0.00000000,-1,-1,180); //Sultan
	VIPVehicles[6] = AddStaticVehicleEx(603,-4390.54345703,841.60748291,986.38299561,0.00000000,-1,-1,180); //Phoenix
	VIPVehicles[7] = AddStaticVehicleEx(480,-4394.61035156,841.88873291,986.23028564,0.00000000,-1,-1,180); //Comet
	VIPVehicles[8] = AddStaticVehicleEx(506,-4399.16455078,842.31146240,986.17242432,0.00000000,-1,-1,180); //Super GT
	VIPVehicles[9] = AddStaticVehicleEx(587,-4402.89990234,842.34979248,986.19030762,0.00000000,-1,-1,180); //Euros
	VIPVehicles[10] = AddStaticVehicleEx(411,-4407.21337891,842.98492432,986.18029785,0.00000000,-1,-1,180); //Infernus
	VIPVehicles[11] = AddStaticVehicleEx(429,-4410.96923828,843.07391357,986.13031006,0.00000000,-1,-1,180); //Banshee
	VIPVehicles[12] = AddStaticVehicleEx(451,-4415.64257812,843.46972656,986.14465332,0.00000000,-1,-1,180); //Turismo
	VIPVehicles[13] = AddStaticVehicleEx(541,-4419.40478516,843.48645020,986.08032227,0.00000000,-1,-1,180); //Bullet
	VIPVehicles[14] = AddStaticVehicleEx(559,-4423.40332031,843.19854736,986.13439941,0.00000000,-1,-1,180); //Jester
	VIPVehicles[15] = AddStaticVehicleEx(560,-4427.88232422,843.82849121,986.18530273,0.00000000,-1,-1,180); //Sultan
	VIPVehicles[16] = AddStaticVehicleEx(603,-4431.95849609,844.09509277,986.38299561,0.00000000,-1,-1,180); //Phoenix
	VIPVehicles[17] = AddStaticVehicleEx(480,-4436.15429688,844.76721191,986.23028564,0.00000000,-1,-1,180); //Comet
	VIPVehicles[18] = AddStaticVehicleEx(506,-4441.21337891,850.94598389,986.17242432,270.00000000,-1,-1,180); //Super GT
	VIPVehicles[19] = AddStaticVehicleEx(587,-4441.05224609,854.70550537,986.19030762,270.00000000,-1,-1,180); //Euros
	VIPVehicles[20] = AddStaticVehicleEx(522,-4418.77490234,858.65576172,986.04071045,180.00000000,-1,-1,180); //NRG-500
	VIPVehicles[21] = AddStaticVehicleEx(522,-4414.77441406,858.50390625,986.04071045,180.00000000,-1,-1,180); //NRG-500
	VIPVehicles[22] = AddStaticVehicleEx(522,-4410.77441406,858.35253906,986.04071045,180.00000000,-1,-1,180); //NRG-500
	VIPVehicles[23] = AddStaticVehicleEx(522,-4406.30957031,857.78234863,986.04071045,180.00000000,-1,-1,180); //NRG-500
	VIPVehicles[24] = AddStaticVehicleEx(522,-4394.11425781,856.77416992,986.04071045,180.00000000,-1,-1,180); //NRG-500
	VIPVehicles[25] = AddStaticVehicleEx(522,-4390.35644531,856.70147705,986.04071045,180.00000000,-1,-1,180); //NRG-500
	VIPVehicles[26] = AddStaticVehicleEx(522,-4386.21923828,856.22369385,986.04071045,180.00000000,-1,-1,180); //NRG-500
	VIPVehicles[27] = AddStaticVehicleEx(522,-4382.18164062,855.81323242,986.04071045,180.00000000,-1,-1,180); //NRG-500
	VIPVehicles[28] = AddStaticVehicleEx(522,-4417.77832031,876.99304199,986.04071045,0.00000000,-1,-1,180); //NRG-500
	VIPVehicles[29] = AddStaticVehicleEx(522,-4414.06494141,876.46301270,986.04071045,0.00000000,-1,-1,180); //NRG-500
	VIPVehicles[30] = AddStaticVehicleEx(522,-4409.78320312,876.41296387,986.04071045,0.00000000,-1,-1,180); //NRG-500
	VIPVehicles[31] = AddStaticVehicleEx(522,-4405.26074219,876.33081055,986.04071045,0.00000000,-1,-1,180); //NRG-500
	VIPVehicles[32] = AddStaticVehicleEx(522,-4393.28417969,875.69360352,986.04071045,0.00000000,-1,-1,180); //NRG-500
	VIPVehicles[33] = AddStaticVehicleEx(522,-4389.04248047,875.41735840,986.04071045,0.00000000,-1,-1,180); //NRG-500
	VIPVehicles[34] = AddStaticVehicleEx(522,-4385.04980469,875.21435547,986.04071045,0.00000000,-1,-1,180); //NRG-500
	VIPVehicles[35] = AddStaticVehicleEx(522,-4381.05761719,875.00488281,986.04071045,0.00000000,-1,-1,180); //NRG-500
	VIPVehicles[36] = AddStaticVehicleEx(411,-4407.94287109,891.34375000,986.18029785,180.00000000,-1,-1,180); //Infernus
	VIPVehicles[37] = AddStaticVehicleEx(411,-4403.66748047,891.17761230,986.18029785,180.00000000,-1,-1,180); //Infernus
	VIPVehicles[38] = AddStaticVehicleEx(411,-4399.91601562,891.28747559,986.18029785,180.00000000,-1,-1,180); //Infernus
	VIPVehicles[39] = AddStaticVehicleEx(411,-4395.91601562,891.31347656,986.18029785,180.00000000,-1,-1,180); //Infernus
	VIPVehicles[40] = AddStaticVehicleEx(451,-4391.23242188,891.03985596,986.14465332,180.00000000,-1,-1,180); //Turismo
	VIPVehicles[41] = AddStaticVehicleEx(451,-4387.48339844,891.00421143,986.14465332,180.00000000,-1,-1,180); //Turismo
	VIPVehicles[42] = AddStaticVehicleEx(451,-4383.49218750,890.44665527,986.14465332,180.00000000,-1,-1,180); //Turismo
	VIPVehicles[43] = AddStaticVehicleEx(429,-4374.92187500,890.17211914,986.13031006,180.00000000,-1,-1,180); //Banshee
	VIPVehicles[44] = AddStaticVehicleEx(429,-4370.80273438,889.91503906,986.13031006,180.00000000,-1,-1,180); //Banshee
	VIPVehicles[45] = AddStaticVehicleEx(429,-4379.33349609,890.09112549,986.13031006,180.00000000,-1,-1,180); //Banshee
	VIPVehicles[46] = AddStaticVehicleEx(560,-4366.63867188,889.44537354,986.18530273,180.00000000,-1,-1,180); //Sultan
	VIPVehicles[47] = AddStaticVehicleEx(560,-4358.66015625,888.96386719,986.18530273,180.00000000,-1,-1,180); //Sultan
	VIPVehicles[48] = AddStaticVehicleEx(560,-4354.67675781,888.44500732,986.18530273,180.00000000,-1,-1,180); //Sultan
	VIPVehicles[49] = AddStaticVehicleEx(560,-4362.83789062,889.30908203,986.18530273,180.00000000,-1,-1,180); //Sultan


	// Driving Test (Main)
    testVehicles[0] = AddStaticVehicleEx(507, 2476.5671, -1953.2145, 13.2578, 0.2236, 1, 1, 3); // test car 1
	testVehicles[1] = AddStaticVehicleEx(507, 2482.8169, -1953.1364, 13.2587, 0.2589, 1, 1, 3); // test car 2
	testVehicles[2] = AddStaticVehicleEx(507, 2489.2576, -1953.3109, 13.2583, 1.2624, 1, 1, 3); // test car 3
	testVehicles[3] = AddStaticVehicleEx(507, 2495.7410, -1953.5852, 13.2540, 0.0837, 1, 1, 3); // test car 4
	testVehicles[4] = AddStaticVehicleEx(507, 2502.0532, -1953.4550, 13.2564, 359.77, 1, 1, 3); // test car 5
	

	gettime(.hour = gHour);
 	gettime(.hour = gWorldTime);
	SetWorldTime(gWorldTime);

	// Timers
	SetTimer("MinuteTimer", 60000, true);

	SetTimer("VehicleTimer", 100, true);
	SetTimer("HOUSETIMER", 100, true);
	SetTimer("HudTimer", 100, true);
	SetTimer("SecondTimer", 1000, true);
	SetTimer("FuelTimer", 75000, true);
	SetTimer("InjuredTimer", 5000, true);
	SetTimerEx("RandomFire", 720000000000, true, "i", 1);
	gLottoTimer = SetTimer("PrepareLotto", 1000 * 60 * 5, true);

	// Misc
    LoadServerInfo();
    RefreshTime();
    ResetEvent();
    ResetRobbery();
	ResetYachtRobbery();
    ResetBizRobbery();
    ResetChop();
    ResetRob();
    ResetRob1();
	gLastSave = 0;

	SetGameModeText(REVISION);
	print(SERVER_NAME);

	// Small garage
	new objectid = CreateObjectEx(19377, 1517.224853, -1643.668823, 1123.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19451, 1512.922851, -1643.237792, 1125.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19451, 1512.932983, -1652.857666, 1125.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1654.129028, 1123.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1643.668823, 1127.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19451, 1517.271484, -1638.827636, 1125.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    CreateObjectEx(9093, 1516.615600, -1638.889160, 1125.194335, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1498, 1520.439941, -1638.885986, 1123.454101, 0.000000, 0.000000, 0.000000);
    objectid = CreateObjectEx(19451, 1522.032226, -1643.237792, 1125.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19451, 1522.032958, -1652.857666, 1125.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1654.149291, 1127.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19451, 1517.161743, -1649.707275, 1125.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    CreateObjectEx(19815, 1521.958862, -1644.184448, 1125.385009, 0.000000, 0.000000, 270.000000);
    CreateObjectEx(19929, 1521.474243, -1642.943847, 1123.494262, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(19929, 1521.474243, -1645.803222, 1123.494262, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1328, 1521.372802, -1647.677978, 1123.984008, 0.000000, 0.000000, 270.000000);
    CreateObjectEx(19899, 1518.888671, -1649.152709, 1123.504028, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19921, 1521.317626, -1644.767700, 1124.524536, 0.000000, 0.000000, -78.023918);
    CreateObjectEx(19903, 1517.034545, -1649.131347, 1123.533813, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19917, 1521.330322, -1646.477294, 1124.424438, 0.000000, 0.000000, 174.000000);
    CreateObjectEx(1348, 1515.315185, -1649.160888, 1124.144897, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1098, 1521.330200, -1643.426879, 1124.914916, 0.000000, 0.000000, -17.151069);
    CreateObjectEx(19627, 1521.519287, -1644.724609, 1124.624633, 0.000000, 0.000000, 272.669464);
    CreateObjectEx(18634, 1521.386962, -1642.228393, 1124.434448, 0.000000, 90.000000, 155.093902);
    CreateObjectEx(16779, 1517.025878, -1644.597290, 1127.035156, 0.000000, 0.000000, 180.631195);
    CreateObjectEx(1738, 1513.752319, -1649.391357, 1124.094116, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1428, 1521.027343, -1649.170898, 1125.004516, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1098, 1513.130737, -1647.329101, 1125.744506, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1513.130737, -1646.249023, 1125.744506, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1513.130981, -1647.329101, 1124.714355, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1513.130371, -1646.268554, 1124.714355, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1185, 1513.152221, -1642.557250, 1125.574951, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1010, 1513.028320, -1640.495727, 1124.564086, 0.000000, 90.000000, 0.000000);
    CreateObjectEx(2063, 1513.311157, -1643.594726, 1124.384521, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1193, 1513.027954, -1639.594482, 1125.194580, 0.000000, 0.000000, 91.062004);

    // Medium garage
    objectid = CreateObjectEx(19377, 1517.224853, -1643.668823, 1373.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19451, 1511.712158, -1643.237792, 1375.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19451, 1511.712280, -1652.857666, 1375.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1654.129028, 1373.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1643.668823, 1377.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19451, 1517.271484, -1638.827636, 1375.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    CreateObjectEx(9093, 1515.464721, -1638.889160, 1375.194335, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1498, 1519.789550, -1638.885986, 1373.454101, 0.000000, 0.000000, 0.000000);
    objectid = CreateObjectEx(19451, 1522.032226, -1643.237792, 1375.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19451, 1522.032958, -1652.857666, 1375.234863, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19377, 1517.224853, -1654.149291, 1377.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19451, 1517.161743, -1651.258422, 1375.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    CreateObjectEx(19815, 1521.958862, -1644.184448, 1375.385009, 0.000000, 0.000000, 270.000000);
    CreateObjectEx(19929, 1521.474243, -1642.943847, 1373.494262, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(19929, 1521.474243, -1645.803222, 1373.494262, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1328, 1521.372802, -1647.677978, 1373.984008, 0.000000, 0.000000, 270.000000);
    CreateObjectEx(19899, 1518.668579, -1650.662597, 1373.504028, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19921, 1521.317626, -1644.767700, 1374.524536, 0.000000, 0.000000, -78.023918);
    CreateObjectEx(19903, 1516.784301, -1650.541381, 1373.533813, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19917, 1521.330322, -1646.477294, 1374.424438, 0.000000, 0.000000, 174.000000);
    CreateObjectEx(1348, 1514.635620, -1650.671386, 1374.144897, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1098, 1521.330200, -1643.426879, 1374.914916, 0.000000, 0.000000, -17.151069);
    CreateObjectEx(19627, 1521.519287, -1644.724609, 1374.624633, 0.000000, 0.000000, 272.669464);
    CreateObjectEx(18634, 1521.386962, -1642.228393, 1374.434448, 0.000000, 90.000000, 155.093902);
    CreateObjectEx(16779, 1517.025878, -1644.597290, 1377.035156, 0.000000, 0.000000, 180.631195);
    CreateObjectEx(1738, 1512.762207, -1651.041992, 1374.094116, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1428, 1521.027343, -1650.722290, 1375.004516, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(1098, 1511.920654, -1648.459716, 1375.744506, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1511.920654, -1647.409667, 1375.744506, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1511.920654, -1648.459716, 1374.724487, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1098, 1511.920654, -1647.409667, 1374.724487, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(1185, 1512.062988, -1643.247314, 1375.574951, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1010, 1511.827880, -1640.815917, 1374.564086, 0.000000, 90.000000, 0.000000);
    CreateObjectEx(2063, 1512.140991, -1644.314697, 1374.384521, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(1193, 1511.774658, -1639.957275, 1375.194580, 0.000000, 0.000000, 91.062004);
    objectid = CreateObjectEx(19377, 1507.614990, -1643.668823, 1373.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1507.614990, -1654.158447, 1373.418579, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1507.604125, -1643.668823, 1377.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1507.604125, -1654.168457, 1377.009277, 0.000000, 90.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19451, 1507.531738, -1651.258422, 1375.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);
    objectid = CreateObjectEx(19451, 1507.661621, -1638.827636, 1375.234863, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 14798, "int_kbsgarage3", "ab_wall_flake", 0);

	// Large garage
	CreateObjectEx(11389, 1665.187500, -2352.026367, 1537.641723, 0.000000, 0.000000, 0.000000);
    objectid = CreateObjectEx(19377, 1668.767822, -2340.866943, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1658.277832, -2340.866943, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1668.767822, -2350.427001, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1668.767822, -2360.037597, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1668.767822, -2369.637939, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1658.277832, -2350.467041, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1658.277832, -2360.087646, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1658.277832, -2369.697265, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1661.437255, -2363.377929, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1671.937988, -2363.377929, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1671.937988, -2353.787353, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1671.937988, -2344.167480, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1671.937988, -2334.539306, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1661.437988, -2353.787353, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1661.527465, -2344.167480, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    objectid = CreateObjectEx(19377, 1661.509521, -2334.539306, 1540.185913, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_peeling_ceiling1_BIG", 0);
    CreateObjectEx(2885, 1674.234375, -2340.028320, 1541.174072, 0.000000, 0.000000, 270.000000);
    CreateObjectEx(2885, 1674.234375, -2348.668212, 1541.174072, 0.000000, 0.000000, 270.000000);
    objectid = CreateObjectEx(19377, 1679.248168, -2340.866943, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    objectid = CreateObjectEx(19377, 1679.248168, -2350.476562, 1534.396972, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 11389, "hubint1_sfse", "ws_sub_pen_conc2", 0);
    CreateObjectEx(2885, 1660.494262, -2368.226806, 1541.143798, 0.000000, 0.000000, 180.000000);
    CreateObjectEx(11390, 1665.046875, -2351.977050, 1538.903198, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(11391, 1657.228515, -2360.088378, 1535.773193, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(11393, 1669.819946, -2357.343994, 1536.022583, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(19817, 1662.070068, -2340.035888, 1533.891967, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19872, 1659.912719, -2348.421630, 1533.882324, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19903, 1658.435546, -2345.552978, 1534.542480, 0.000000, 0.000000, -47.000000);
    CreateObjectEx(19377, 1656.129028, -2362.886718, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1656.129028, -2352.425048, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1656.129028, -2341.955322, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1656.129028, -2331.505126, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1661.448364, -2335.926269, 1539.213256, 90.000000, 0.000000, 90.000000);
    CreateObjectEx(19377, 1671.927612, -2335.926269, 1539.213256, 90.000000, 0.000000, 90.000000);
    CreateObjectEx(19377, 1671.157470, -2368.107421, 1539.213256, 90.000000, 0.000000, 90.000000);
    CreateObjectEx(19377, 1674.139404, -2363.225585, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1674.149414, -2359.344726, 1539.213256, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19437, 1666.590942, -2361.146240, 1535.482910, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(19437, 1666.300659, -2361.146240, 1535.482910, 0.000000, 0.000000, 0.000000);
    CreateObjectEx(19437, 1666.350463, -2363.697021, 1534.622070, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19437, 1666.350463, -2367.177734, 1534.622070, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19437, 1667.490478, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19437, 1669.050048, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19437, 1670.640380, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19437, 1672.190063, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19437, 1674.090454, -2367.398193, 1535.482910, 0.000000, 0.000000, 90.000000);
    CreateObjectEx(19377, 1674.367797, -2348.886474, 1539.123413, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1674.367797, -2338.387207, 1539.123413, 90.000000, 0.000000, 0.000000);
    CreateObjectEx(19377, 1660.698242, -2368.378906, 1539.123413, 90.000000, 0.000000, 90.000000);
    CreateObjectEx(19377, 1660.257812, -2368.418945, 1539.123413, 90.000000, 0.000000, 90.000000);
    objectid = CreateObjectEx(19369, 1666.348266, -2366.564208, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1666.348266, -2363.353759, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1666.348266, -2362.022460, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1667.818969, -2357.771972, 1537.142822, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1670.998901, -2357.771972, 1537.142822, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1673.869873, -2357.771972, 1537.142822, 0.000000, 0.000000, 90.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1673.898559, -2359.502197, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1673.878540, -2362.103515, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1673.878540, -2365.273437, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19369, 1673.878540, -2368.443115, 1537.142822, 0.000000, 0.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(19377, 1671.468505, -2363.267089, 1537.988037, 0.000000, 90.000000, 0.000000);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);
    objectid = CreateObjectEx(9131, 1666.443969, -2358.310058, 1535.482910, 0.000000, 0.000000, 270.520568);
    SetObjectMaterial(objectid, 0, 19389, "all_walls", "concretenewb256", 16711680);


	// Idlewood Gas Station (Main)
    CreateDynamicObject(970, 1942.256469, -1767.598266, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1942.256469, -1771.718627, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1942.256469, -1775.848876, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1942.256469, -1777.948974, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1941.095825, -1777.948974, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1941.096191, -1775.848876, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1941.096679, -1771.718627, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(970, 1941.095703, -1767.598266, 13.092811, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(1215, 1941.625610, -1780.841918, 13.160593, 0.000000, 0.000000, 95.991020);
    CreateDynamicObject(1215, 1941.636230, -1765.047241, 13.160593, 0.000000, 0.000000, 95.991020);
    CreateDynamicObject(1291, 1928.692382, -1767.511352, 13.032809, 0.000000, 0.000000, 90.000000);
    CreateDynamicObject(1287, 1928.503662, -1768.784423, 13.076869, 0.000000, 0.000000, -90.000000);
    CreateDynamicObject(1289, 1928.507202, -1769.368896, 13.092813, 0.000000, 0.000000, -90.228660);
    CreateDynamicObject(1250, 1908.817138, -1782.609863, 13.582806, 0.000000, 0.000000, 90.000000);

	// Fixed Trailer (Main)
 	CreateDynamicObject(11015, 4.2412109375, -0.25, 1002.3616333008, 0, 90, 179.99450683594, .interiorid = 2);
    CreateDynamicObject(11015, -3.7464447021484, -0.46751827001572, 1002.3616333008, 0, 90, 0, .interiorid = 2);
    CreateDynamicObject(11015, -2.0341796875, -0.2255859375, 996.58734130859, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(11015, -1.7412109375, -8.029296875, 1002.3616333008, 0, 90, 89.994506835938, .interiorid = 2);
    CreateDynamicObject(11015, 2.349609375, 9.3095703125, 1002.3616333008, 0, 90, 270, .interiorid = 2);
    CreateDynamicObject(976, -8.3762712478638, 5.4238820075989, 998.02801513672, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(976, 10.326154708862, 5.4526047706604, 998.02801513672, 0, 0, 180, .interiorid = 2);
    CreateDynamicObject(976, -0.78860986232758, 4.5294494628906, 998.02801513672, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(976, -9.4923362731934, 2.8067343235016, 998.30328369141, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(968, -0.78987210988998, 3.085230588913, 996.65313720703, 0, 0, 88.375030517578, .interiorid = 2);
    CreateDynamicObject(2424, -1.1989899873734, 2.1414895057678, 998.20440673828, 0, 0, 270, .interiorid = 2);
    CreateDynamicObject(2424, -1.4444495439529, 1.2195072174072, 998.20440673828, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.2420085668564, 0.15943863987923, 998.20440673828, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.2046113014221, -0.27639570832253, 998.20440673828, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.6594306230545, -1.5798351764679, 998.40460205078, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.6048280000687, -3.7030065059662, 998.50469970703, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.3431304693222, -4.7396554946899, 997.82904052734, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -1.3272333145142, -5.6384997367859, 997.85406494141, 0, 0, 269.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, -0.82665449380875, -5.819974899292, 997.82904052734, 0, 0, 0.07452392578125, .interiorid = 2);
    CreateDynamicObject(2424, 0.90103495121002, -5.7934393882751, 997.82904052734, 0, 0, 0.0714111328125, .interiorid = 2);
    CreateDynamicObject(2424, 1.8007507324219, -5.7772388458252, 997.82904052734, 0, 0, 0.0714111328125, .interiorid = 2);
    CreateDynamicObject(2424, 2.0067005157471, -4.656822681427, 997.82904052734, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 2.0016891956329, -5.5176014900208, 997.82904052734, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 0.095220312476158, -5.8064684867859, 997.85406494141, 0, 0, 0.0714111328125, .interiorid = 2);
    CreateDynamicObject(2424, 1.9964281320572, -1.4732304811478, 997.82904052734, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 2.0242736339569, -0.59229171276093, 997.82904052734, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 1.105211853981, -0.25799462199211, 997.82904052734, 0, 0, 180, .interiorid = 2);
    CreateDynamicObject(2424, 0.85449481010437, -0.25893545150757, 997.82904052734, 0, 0, 179.99450683594, .interiorid = 2);
    CreateDynamicObject(2424, 0.94933843612671, 0.93138349056244, 998.40460205078, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2424, 1.9278947114944, 1.8640511035919, 998.40386962891, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 1.912776350975, 2.7815411090851, 998.40386962891, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 1.9282813072205, 3.7311086654663, 998.40386962891, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2424, 0.94268548488617, 0.38233369588852, 998.40460205078, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2424, 1.8336682319641, 0.42996874451637, 998.40460205078, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(1814, -0.070350080728531, -4.9489212036133, 998.45343017578, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2108, 0.87250107526779, -1.5103777647018, 997.35357666016, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2738, -1.3212617635727, 5.0136914253235, 998.98120117188, 0, 0, 0, .interiorid = 2);
    CreateDynamicObject(2558, -0.45861941576004, 3.3949182033539, 999.67913818359, 0, 0, 90, .interiorid = 2);
    CreateDynamicObject(2558, -1.1560896635056, 4.4181189537048, 999.70416259766, 0, 0, 270, .interiorid = 2);
    CreateDynamicObject(1745, 2.4512000083923, 6.3230948448181, 998.07806396484, 0, 0, 90, .interiorid = 2);

	// Crack Lab Fixes (Main)
    CreateDynamicObject(7191,2338.39135742,-1182.56323242,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(1)
	CreateDynamicObject(13656,2292.93872070,-1132.04724121,1017.29772949,0.00000000,0.00000000,0.00000000, -1, 5); //object(fuckknows)(1)
	CreateDynamicObject(7191,2337.95458984,-1182.54309082,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(2)
	CreateDynamicObject(7191,2338.43408203,-1182.39440918,1032.95129395,90.00000000,180.00000000,90.24850464, -1, 5); //object(vegasnnewfence2b)(3)
	CreateDynamicObject(7191,2337.97314453,-1182.39111328,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(4)
	CreateDynamicObject(7191,2328.80346680,-1180.43066406,1034.70544434,0.00000000,270.00000000,88.50006104, -1, 5); //object(vegasnnewfence2b)(5)
	CreateDynamicObject(3055,2319.78198242,-1184.82641602,1032.36450195,63.75003052,269.99996948,178.5001220, -1, 5); //object(kmb_shutter)(1)
	CreateDynamicObject(7191,2328.83715820,-1186.81262207,1030.70446777,0.00000000,90.74990845,359.99481201, -1, 5); //object(vegasnnewfence2b)(6)
	CreateDynamicObject(7191,2326.84863281,-1187.03125000,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(8)
	CreateDynamicObject(7191,2337.31689453,-1186.55639648,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(9)
	CreateDynamicObject(7191,2339.06689453,-1186.13159180,1030.70446777,0.00000000,91.24694824,359.99453735, -1, 5); //object(vegasnnewfence2b)(10)
	CreateDynamicObject(7191,2338.39062500,-1182.56250000,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(11)
	CreateDynamicObject(7191,2337.95947266,-1179.38879395,1032.95129395,90.00000000,180.00000000,270.00000000, -1, 5); //object(vegasnnewfence2b)(12)
	CreateDynamicObject(7191,2338.38476562,-1179.43066406,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(13)
	CreateDynamicObject(7191,2337.96630859,-1179.23559570,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(14)

	new count;
	for(new i = 0; i < MAX_OBJECTS; i ++)
	{
	    if(IsValidObject(i)) count++;
	}

	printf("%i objects loaded.", count);
	return 1;
}

public OnGameModeExit()
{
	for(new i = 0; i < MAX_OBJECTS; i ++)
	{
	    if(IsValidObject(i) && gScriptObject{i})
	    {
	        DestroyObject(i);
		}
	}

	KillTimer(FlashTimer);
	mysql_close(connectionID);

	// CCTV
	TextDrawHideForAll(TD);
	TextDrawDestroy(TD);
	for(new i; i<TotalMenus; i++)
	{
		DestroyMenu(CCTVMenu[i]);
	}
	/*--------------------*/

	if(gDoubleXP)
	{
	    gDoubleXP = 0;
	}

	return 1;
}

public SV_VOID:OnPlayerActivationKeyPress(SV_UINT:playerid,SV_UINT:keyid)
{
	if (keyid == 0x42 && lstream[playerid]) SvAttachSpeakerToStream(lstream[playerid], playerid);

	if(pData[playerid][pCallStage] == 2)
    {
    	if (keyid == 0x5A && callstream[playerid]) SvAttachSpeakerToStream(callstream[playerid], playerid);
    }
	if(pData[playerid][pFactionRadio] == 1)
    {
		if(keyid == 0x5A && factionstream[pData[playerid][pFaction]])
		{		
			SvAttachSpeakerToStream(factionstream[pData[playerid][pFaction]], playerid);
			lstream[playerid] = SvCreateDLStreamAtPlayer(8.0, SV_INFINITY, playerid, 0xFFFF00FF, "Faction Radio");
		}
	}	
    if(pData[playerid][pGangRadio] == 1)
    {
		if(keyid == 0x5A && gangstream[pData[playerid][pGang]])
		{		
			SvAttachSpeakerToStream(gangstream[pData[playerid][pGang]], playerid);
			lstream[playerid] = SvCreateDLStreamAtPlayer(8.0, SV_INFINITY, playerid, 0xFFFF00FF, "Gang Radio");
		}
	}
    else
	{
		if (keyid == 0x5A && lstream[playerid]) SvAttachSpeakerToStream(lstream[playerid], playerid);
	}
}	

public SV_VOID:OnPlayerActivationKeyRelease(SV_UINT:playerid,SV_UINT:keyid) 
{
	if (keyid == 0x42 && lstream[playerid]) SvDetachSpeakerFromStream(lstream[playerid], playerid);

    if(pData[playerid][pCallStage] == 2)
    {
    	if (keyid == 0x5A && callstream[playerid]) SvDetachSpeakerFromStream(callstream[playerid], playerid);
    }
	if(pData[playerid][pFactionRadio] == 1)
    {
		if(keyid == 0x5A && factionstream[pData[playerid][pFaction]])
		{		
			SvDetachSpeakerFromStream(factionstream[pData[playerid][pFaction]], playerid);
		}
	}	
    if(pData[playerid][pGangRadio] == 1)
    {
		if(keyid == 0x5A && gangstream[pData[playerid][pGang]])
		{	
			SvDetachSpeakerFromStream(gangstream[pData[playerid][pGang]], playerid);
		}
	}	
	else
	{
		if (keyid == 0x5A && lstream[playerid]) SvDetachSpeakerFromStream(lstream[playerid], playerid); 
	}
}


public OnPlayerPressButton(playerid, buttonid)
{
	// ems
   	if(buttonid == emsonly)
    {
	    if(GetFactionType(playerid) == FACTION_MEDIC)
		{
				DoorOpen(playerid);
				SetTimer("DoorClose", 4000, 0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   You're not a EMS / PARAMEDICS!");
		}

	}
   	if(buttonid == emseveryone)
    {

		DoorOpen(playerid);
		SetTimer("DoorClose", 3500, 0);

	}

	return false;
}

forward DoorOpen(playerid);
public DoorOpen(playerid)
{
	PlayerPlaySound(playerid, 6400, 0.0, 0.0, 0.0);
	MoveDynamicObject(emsdoor1, 1401.9657, -27.7434, 1000.0137, 3.5000);

 	MoveDynamicObject(emsdoor2, 1401.9657, -32.5434, 1000.0137, 3.5000);
  	return 1;
}

forward DoorOpen1ems(playerid);
public DoorOpen1ems(playerid)
{
	PlayerPlaySound(playerid, 6400, 0.0, 0.0, 0.0);
	MoveDynamicObject(emsdoor3, 1382.71460, -32.21667, 1000.01190, 3.5000);

 	MoveDynamicObject(emsdoor4, 1382.70154, -28.05276, 1000.01190, 3.5000);
  	return 1;
}


forward DoorClose(playerid);
public DoorClose(playerid)
{
	PlayerPlaySound(playerid, 1036, 0.0, 0.0, 0.0);
	MoveDynamicObject(emsdoor1, 1401.96570, -28.62340, 1000.01367, 3.5000);
 	MoveDynamicObject(emsdoor2, 1401.96570, -31.62340, 1000.01367, 3.5000);

  	return 1;
}
forward DoorClose1ems(playerid);
public DoorClose1ems(playerid)
{
	PlayerPlaySound(playerid, 1036, 0.0, 0.0, 0.0);
	MoveDynamicObject(emsdoor3, 1382.69250, -31.60880, 1000.01190, 3.5000);
 	MoveDynamicObject(emsdoor4, 1382.70239, -28.61662, 1000.01190, 3.5000);
	return 1;
}
 
forward DoorClose2(playerid);
public DoorClose2(playerid)
{
	PlayerPlaySound(playerid, 1036, 0.0, 0.0, 0.0);
	MoveDynamicObject(mechdoor1, 2158.149414, -2181.766113, 17.214397, 3.5000);
  	return 1;
}

forward DoorClose1pd(playerid);
public DoorClose1pd(playerid)
{
	PlayerPlaySound(playerid, 1036, 0.0, 0.0, 0.0);
	MoveDynamicObject(pddoor1, 50.409233, 2037.005004, 732.856689, 3.5000);
  	return 1;
}
forward DoorClose2pd(playerid);
public DoorClose2pd(playerid)
{
	PlayerPlaySound(playerid, 1036, 0.0, 0.0, 0.0);
	MoveDynamicObject(pddoor2, 27.095270, 2041.494384, 732.856689, 3.5000);
  	return 1;
}

forward DoorClose3pd(playerid);
public DoorClose3pd(playerid)
{
	PlayerPlaySound(playerid, 1036, 0.0, 0.0, 0.0);
	MoveDynamicObject(pddoor3,  17.465286, 2039.983520, 732.856689, 3.5000);
  	return 1;
}


forward DoorClose4pd(playerid);
public DoorClose4pd(playerid)
{
	PlayerPlaySound(playerid, 1036, 0.0, 0.0, 0.0);
	MoveDynamicObject(pddoor4,  40.822780, 2053.516357, 732.856689, 3.5000);
	MoveDynamicObject(pddoor5,  36.622779, 2053.516357, 732.856689, 3.5000);
  	return 1;
}

forward DoorOpen2(playerid);
public DoorOpen2(playerid)
{
	PlayerPlaySound(playerid, 6400, 0.0, 0.0, 0.0);
	MoveDynamicObject(mechdoor1, 2157.195312, -2180.852539, 17.214397, 3.5000);
  	return 1;
}

forward DoorOpen1pd(playerid);
public DoorOpen1pd(playerid)
{
	PlayerPlaySound(playerid, 6400, 0.0, 0.0, 0.0);
	MoveDynamicObject(pddoor1, 49.079216, 2037.005004, 732.856689, 3.5000);
  	return 1;
}
forward DoorOpen2pd(playerid);
public DoorOpen2pd(playerid)
{
	PlayerPlaySound(playerid, 6400, 0.0, 0.0, 0.0);
	MoveDynamicObject(pddoor2,27.095270, 2040.263793, 732.856689, 3.5000);
  	return 1;
}

forward DoorOpen3pd(playerid);
public DoorOpen3pd(playerid)
{
	PlayerPlaySound(playerid, 6400, 0.0, 0.0, 0.0);
	MoveDynamicObject(pddoor3, 18.735290, 2039.983520, 732.856689, 3.5000);
  	return 1;
}

forward DoorOpen4pd(playerid);
public DoorOpen4pd(playerid)
{
	PlayerPlaySound(playerid, 6400, 0.0, 0.0, 0.0);
	MoveDynamicObject(pddoor4, 42.072776, 2053.516357, 732.856689, 3.5000);
	MoveDynamicObject(pddoor5, 35.422809, 2053.516357, 732.856689, 3.5000);
  	return 1;
}


forward PrepareLotto();
public PrepareLotto()
{
	if(!LottoStarted)
	{
		LottoStarted = 1;
		SetTimerEx("StartLotto", 1000 * 60 * 30, false, "d", 1);
		foreach(new i : Player) SCM(i, COLOR_TEAL, "Lottery: A Lottery Number Selection is about to start, please get a lottery ticket at any 24/7. "WHITE"60 minutes left.");
	}
	return 1;
}

forward StartLotto(stage);
public StartLotto(stage)
{
	if(stage == 1)
	{
		foreach(new i : Player) SCM(i, COLOR_TEAL, "Lottery: A Lottery Number Selection is about to start, please get a lottery ticket at any 24/7. "WHITE"30 minutes left.");
		SetTimerEx("StartLotto", 1000 * 60 * 30, false, "d", 2);
	}
	else if(stage == 2)
	{
	    SetTimerEx("EndLotto", 1000, false, "d", 3);
	}
	else
	{
		foreach(new i : Player) SCMf(i, COLOR_TEAL, "Lottery: A Lottery Number Selection is about to start, please get a lottery ticket at any 24/7. "WHITE"%d minutes left.", stage);
		SetTimerEx("StartLotto", 1000 * 60 * stage, false, "d", 2);
	}
	return 1;
}

forward EndLotto(second);
public EndLotto(second)
{
	if(second != 0)
	{
		//foreach(new i : Player) SCMf(i, COLOR_WHITE, "LOTTERY COUNTDOWN: %d.", second);
		SetTimerEx("EndLotto", 1000, false, "d", second-1);
	}
	else
	{
		foreach(new i : Player) SCM(i, COLOR_TEAL, "Lottery: We have announced the Lottery Number Selection.");

		if(!gDrawNumber)
		{
			gDrawNumber = random(99);
			if(gDrawNumber < 77) { gDrawNumber += 3; }
		}

		Lotto(gDrawNumber);
		LottoStarted = 0;
	}
	return 1;
}
stock Exx_CreateDynamicObject(objectID, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worldid = 0, interiorid = 0, playerid = 0, Float:viewdist = 1000.000 , Float:drdist = 1000.000)
{
    if(worldid == 0) worldid = -1;
    if(interiorid == 0) interiorid = -1;
    if(playerid == 0) playerid = -1;
    return CreateDynamicObjectEx(objectID, x, y, z, rx, ry, rz, viewdist, drdist);
}
stock Lotto(number)
{
	new JackpotFallen = 0, number_winner = 0, rand;

	foreach(new i : Player)
	{
		SCMf(i, COLOR_TEAL, "[Lottery]: Today the winning number has fallen on... "WHITE"%d!.", number);

		if(pData[i][pLottery] == number && pData[i][pLottery] > 0)
		{
			number_winner ++;

			if(number_winner <= 1)
			{
				JackpotFallen = 1;
				foreach(new x : Player) SCMf(x, COLOR_TEAL, "Lottery: "WHITE"%s"TEAL" has won the jackpot of "WHITE"$%d"TEAL" with their lottery ticket.", GetRPName(i), gLotto);
				SCMf(i, COLOR_TEAL, "* You have won $%d with your lottery ticket - congratulations!", gLotto);
				GivePlayerCash(i, gLotto);
			} else {
				JackpotFallen = 1;
				foreach(new x : Player)
				{
					SCMf(x, COLOR_TEAL, "[Lottery]: There are "WHITE"(%d)"TEAL" jackpot winners for this draw, the jackpot prize was split to "WHITE"%d"TEAL". "WHITE"($%d)", number_winner, number_winner, floatround(gLotto / number_winner));
					SCMf(x, COLOR_TEAL, "[Lottery]: "WHITE"%s"TEAL" has won the jackpot of "WHITE"$%d"TEAL" with their lottery ticket.", GetRPName(i), floatround(gLotto / number_winner));
				}
				SCMf(i, COLOR_TEAL, "* You have won "WHITE"$%d"TEAL" with your lottery ticket - congratulations!", floatround(gLotto / number_winner));
				GivePlayerCash(i, floatround(gLotto / number_winner));
			}
		}

		pData[i][pLottery] = 0;
	}

	if(JackpotFallen) // change lotto price here (CTRL + F to find me)
	{
		rand = random(50000); rand += 25000;
		gLotto = rand;
		foreach(new i : Player) SCMf(i, COLOR_TEAL, "[Lottery]: The new jackpot has been started with "WHITE"$%d.", gLotto);
	}
	else
	{
		rand = random(10000);
		gLotto += rand;
		foreach(new i : Player) SCMf(i, COLOR_TEAL, "[Lottery]: The jackpot has been raised to "WHITE"$%d.", gLotto);
	}

	gDrawNumber = 0;
	SaveServerInfo();
	return 1;
}

SampVoice(playerid)
{
	if (!SvGetVersion(playerid))
	{
		SendClientMessage(playerid, COLOR_GLOBAL, "You don't have SampVoice installed");
		SendClientMessage(playerid, COLOR_GLOBAL, "Status::"WHITE"Your device doesn't have Voice Chat installed.");
		KickPlayer(playerid);
	}
	else if (!SvHasMicro(playerid))
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're holding an old version of the plugin, possibly incompatiable. update it.");
	}
	else if((lstream[playerid] = SvCreateDLStreamAtPlayer(10.0, SV_INFINITY, playerid, 0xff0000ff, "Normal")))
	{
		SendClientMessage(playerid, COLOR_WHITE, "Your voice chat is working. You can activate it by pressing 'Z'");
		SvAddKey(playerid, 0x5A);
		SvAddKey(playerid, 0x42);
	}
}

stock SendDiscordMessage(channel, message[]) {
	new DCC_Channel:ChannelId;
	switch(channel)
	{
		case 0:
		{
			//GLOBAL
			ChannelId = DCC_FindChannelById("1272495872076283985");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 1:
		{
			//OOC /B
			ChannelId = DCC_FindChannelById("1273306657237106729");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 2:
		{
			//WHISPER 
			ChannelId = DCC_FindChannelById("1272492204891574364");
			DCC_SendChannelMessage(ChannelId, message);

		}
		case 3:
		{
			//CHAT LOGS
			ChannelId = DCC_FindChannelById("1273306826103849070");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 4:
		{
			//CELLPHONE
			ChannelId = DCC_FindChannelById("976494624615067719");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 5:
		{
			//PortableRadio
			ChannelId = DCC_FindChannelById("1272492243806191668");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 6:
		{
			//PM LOGS
			ChannelId = DCC_FindChannelById("1272492003845996544");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 7:
		{
			//GANG CHAT LOGS
			ChannelId = DCC_FindChannelById("1272492519531221073");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 8:
		{
			//FACTION CHAT
			ChannelId = DCC_FindChannelById("1272492465818959942");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 9:
		{
			//ADMIN MESSAGE
			ChannelId = DCC_FindChannelById("976494808438820924");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 10:
		{
			//START CHAT
			ChannelId = DCC_FindChannelById("976494838507790346");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 11:
		{
			//TWEET AND FB
			ChannelId = DCC_FindChannelById("1285230172508913685");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 12:
		{
			//DO ADO ME
			ChannelId = DCC_FindChannelById("1272490725472210995");
			DCC_SendChannelMessage(ChannelId, message);
		}

		case 13:
		{
			//HELPER LOGS
			ChannelId = DCC_FindChannelById("976494936713220096");
			DCC_SendChannelMessage(ChannelId, message);
		}

		case 14:
		{
			/// KILL logs
			ChannelId = DCC_FindChannelById("1272491438466269287");
			DCC_SendChannelMessage(ChannelId, message);
		}

		case 15:
		{ //ARREST AND COMSERV
		    ChannelId = DCC_FindChannelById("1272515842931949600");
		    DCC_SendChannelMessage(ChannelId, message);
		}
		case 16:
		{
			//STASH
			ChannelId = DCC_FindChannelById("1285230525203615855");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 17:
		{
			//GIVELOGS
			ChannelId = DCC_FindChannelById("976495166905004112");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 18:
		{
			//PAY LOGS
			ChannelId = DCC_FindChannelById("1272492024876105780");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 19:
		{
			//FACTION LOGS
			ChannelId = DCC_FindChannelById("976495232961085450");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 20:
		{
			//GANG LOGS
			ChannelId = DCC_FindChannelById("951442179560198174");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 21:
		{
			//REPORT LOGS
			ChannelId = DCC_FindChannelById("976495760310951957");
			DCC_SendChannelMessage(ChannelId, message);
		}		
		case 22:
		{
			//CHEAT LOGS
			ChannelId = DCC_FindChannelById("1272502320852242493");
			DCC_SendChannelMessage(ChannelId, message);
		}	
		case 23:
		{
			//BAN LOGS
			ChannelId = DCC_FindChannelById("1272502337319079997");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 24:
		{
			//CMD FOR ADMIN
			ChannelId = DCC_FindChannelById("1277656593197957150");
			DCC_SendChannelMessage(ChannelId, message);
		}		
		case 25:
		{
			
			ChannelId = DCC_FindChannelById("1272873371230801960");
			DCC_SendChannelMessage(ChannelId, message);
		}		
		case 26:
		{
			//ROB BIZ AND HOUSE
			ChannelId = DCC_FindChannelById("965291762606309436");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 27:
		{
			//ar tr AND report
			ChannelId = DCC_FindChannelById("976495760310951957");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 28:
		{
			//ar tr AND report
			ChannelId = DCC_FindChannelById("973521718956138506");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 29:
		{
			//MASK LOGS
			ChannelId = DCC_FindChannelById("1272490835249725440");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 30:
		{
			//TURF LOGS
			ChannelId = DCC_FindChannelById("1272492115091525727");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 31:
		{
			//grab and drop
			ChannelId = DCC_FindChannelById("1276112808488079400");
			DCC_SendChannelMessage(ChannelId, message);
		}

		case 32:
		{
			//muted logs
			ChannelId = DCC_FindChannelById("1285230302821879932");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 33:
		{
			//whitelisted logs
			ChannelId = DCC_FindChannelById("1148129627584352356");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 34:
		{
			//accept name
			ChannelId = DCC_FindChannelById("1276113430209626195");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 35:
		{
			//EXCHANGELOGS
			ChannelId = DCC_FindChannelById("1277582013402058863");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 36:
		{
			//SELLGUN
			ChannelId = DCC_FindChannelById("1277581061903093835");
			DCC_SendChannelMessage(ChannelId, message);
		}		
		case 37:
		{
			//finelogs
			ChannelId = DCC_FindChannelById("1277583192966299648");
			DCC_SendChannelMessage(ChannelId, message);
		}		
		case 38:
		{
			///BM LOGS
			ChannelId = DCC_FindChannelById("1277591208155156602");
			DCC_SendChannelMessage(ChannelId, message);
		}
		case 39:
		{
			///VIP LOGS
			ChannelId = DCC_FindChannelById("1272495855001145345");
			DCC_SendChannelMessage(ChannelId, message);
		}
	
	}
	return 1;
}
public OnPlayerConnect(playerid)
{
	SampVoice(playerid);
	if(IsPlayerNPC(playerid)) return 1;
    ExBJck[playerid] = 0;
    pBlind[playerid] = 0;
    Maskara[playerid] = 0;
    ShowingBounds[playerid] = 0;
	aimWarnings[playerid] = 0;
	Lumber1[playerid] = 0;
	lumberman{playerid} = false;
	Lumbered[playerid] = 0;
	Lumberedx[playerid] = 0;		
	Sliding[playerid] = 0;
    CurrentCCTV[playerid] = -1;
	pvehicleid[playerid] = GetPlayerVehicleID(playerid);
	pvehicleid[playerid] = 0;
    pmodelid[playerid] = 0;
	pData[playerid][pPaintball] = 0;
	pData[playerid][pPaintballTeam] = -1;
	pData[playerid][pCarrying] = false;
	pData[playerid][pCarry] = 0;


	pData[playerid][pSkates] = 0;
	pData[playerid][pSkateObj] = 0;
	pData[playerid][pSkating] = false;
	pData[playerid][pCrowbar] = 0;
	pData[playerid][pHelmet] = 0;
	pData[playerid][pUseHelmet] = 0;

	// Default values are handled via MySQL/PhpMyAdmin. Don't assign default values here.
	pData[playerid][pRobbingHouse] = -1;
	pData[playerid][pToolkit] = 0;
    pData[playerid][pGraffiti] = -1;
    pData[playerid][pChatAnim] = 0;
    pData[playerid][pGraffitiTime] = 0;
    pData[playerid][pGraffitiColor] = 0;
    pData[playerid][pEditGraffiti] = -1;
	pData[playerid][pEditGate] = -1;
	pData[playerid][pEditmObject] = -1;
	pData[playerid][pRobbingBiz] = -1;
	pData[playerid][pProductChoose] = -1;
	pData[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
	pData[playerid][pDiamonds] = 0;
	pData[playerid][pEngine] = 0;
	pData[playerid][pID] = 0;
	pData[playerid][pLogged] = 0;
	pData[playerid][pKicked] = 0;
	pData[playerid][pLoginTries] = 0;
	pData[playerid][pSetup] = 0;
	pData[playerid][pGender] = 0;
	
	pData[playerid][pTutorial] = 0;
	pData[playerid][pAge] = 0;
	pData[playerid][pSkin] = 0;
	pData[playerid][pCameraX] = 0;
	pData[playerid][pFormerAdmin] = 0;
	pData[playerid][pCameraY] = 0;
	pData[playerid][pCameraZ] = 0;
	pData[playerid][pPosX] = 0;
	pData[playerid][pPosY] = 0;
	pData[playerid][pPosZ] = 0;
	pData[playerid][pPosA] = 0;
	pData[playerid][pInterior] = 0;
	pData[playerid][pWorld] = 0;
	pData[playerid][pCash] = 100;
	pData[playerid][pBank] = 500;
	pData[playerid][pPaycheck] = 0;
	pData[playerid][pLevel] = 1;
	pData[playerid][pFirework] = 0;
	//RocketExplosions[playerid] = -1;
	pData[playerid][pAdvertWarnings] = 0;
	pData[playerid][pEXP] = 0;
	pData[playerid][pMinutes] = 0;
	pData[playerid][pHours] = 0;
	pData[playerid][pAdmin] = 0;
	pData[playerid][pAdminName] = 0;
	pData[playerid][pHelper] = 0;
	pData[playerid][pHealth] = 100.0;
	pData[playerid][pArmor] = 0.0;
	pData[playerid][pWarnings] = 0;
	pData[playerid][pComserv] = 0;
	pData[playerid][pInjured] = 0;
	pData[playerid][pBrokenLeg] = 0;
	pData[playerid][pBrokenHP] = 0;
	pData[playerid][pVoiceChat] = 0;
	pData[playerid][pHospital] = 0;
	pData[playerid][pVerifyCode] = 0;	
	pData[playerid][pVerifySystem] = 1;
	pData[playerid][pSpawnHealth] = 50.0;
	pData[playerid][pSpawnArmor] = 0;
	pData[playerid][pJailType] = 0;
	pData[playerid][pJailTime] = 0;
	pData[playerid][pBedType] = 0;
	pData[playerid][pBedTime] = 0;
	pData[playerid][pNewbieMuted] = 0;
	pData[playerid][pHelpMuted] = 0;
	pData[playerid][pAdMuted] = 0;
	pData[playerid][pLiveMuted] = 0;
	pData[playerid][pCBug] = 0;
	pData[playerid][pGlobalMuted] = 0;
	pData[playerid][pReportMuted] = 0;
	pData[playerid][pReportWarns] = 0;
	pData[playerid][pFightStyle] = 0;
	pData[playerid][pAccent] = 0;
	pData[playerid][pDirtyCash] = 0;

	/*#if defined Christmas
	#else
		pData[playerid][pCandy] = 0;
	#endif*/

    //Voice chat
    pData[playerid][pDisconnect] = 0;
   	pData[playerid][pWhisper] = 0;
	pData[playerid][pNormal] = 1;
	pData[playerid][pShout] = 0;
	pData[playerid][pFactionRadio] = 0;
	pData[playerid][pGangRadio] = 0;

	pData[playerid][pPhone] = 0;
	pData[playerid][pLottery] = 0;
	pData[playerid][pJob] = JOB_NONE;
	pData[playerid][pSecondJob] = JOB_NONE;
	pData[playerid][pCrimes] = 0;
	pData[playerid][pArrested] = 0;
	pData[playerid][pWantedLevel] = 0;
	pData[playerid][pMaterials] = 0;
	pData[playerid][pPot] = 0;
	pData[playerid][pMeat] = 0;
	pData[playerid][pTaco] = 0;
	pData[playerid][pJuice] = 0;
	pData[playerid][pEmptyCan] = 0;
	pData[playerid][pBurrito] = 0;
	pData[playerid][pCrack] = 0;
	pData[playerid][pMeth] = 0;
	pData[playerid][pPainkillers] = 0;
	pData[playerid][pSeeds] = 0;
	pData[playerid][pEphedrine] = 0;
	pData[playerid][pMuriaticAcid] = 0;
	pData[playerid][pBakingSoda] = 0;
	pData[playerid][pCigars] = 0;
	pData[playerid][pFood] = 0;
	pData[playerid][pDrink] = 0;
	pData[playerid][pVest] = 0;
	TazerHolster[playerid] = 1;
	for(new i = 0; i < AC_MAX_CODES; i++)
	{
		pAntiCheatLastCodeTriggerTime[playerid][i] = -1;
	}
	pAntiCheatSettingsPage{playerid} = 0; // ÐŸÑ€Ð¸ÑÐ²Ð°Ð¸Ð²Ð°ÐµÐ¼ Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¸Ðµ 0 Ð¿ÐµÑ€ÐµÐ¼ÐµÐ½Ð½Ð¾Ð¹, Ñ…Ñ€Ð°Ð½ÑÑ‰ÐµÐ¹ Ð½Ð¾Ð¼ÐµÑ€ ÑÑ‚Ñ€Ð°Ð½Ð¸Ñ†Ñ‹ Ð½Ð°ÑÑ‚Ñ€Ð¾ÐµÐº Ð°Ð½Ñ‚Ð¸-Ñ‡Ð¸Ñ‚Ð°, Ð½Ð° ÐºÐ¾Ñ‚Ð¾Ñ€Ð¾Ð¹ Ð½Ð°Ñ…Ð¾Ð´Ð¸Ñ‚ÑÑ Ð¸Ð³Ñ€Ð¾Ðº
    pAntiCheatSettingsEditCodeId[playerid] = -1;

	pData[playerid][pEquipVest] = false;
	KillTimer(pData[playerid][pEquipTimer]);
	pData[playerid][pEquipTimer] = -1;
	
	pData[playerid][pWalkieTalkie] = 0;
	pData[playerid][pChannel] = 0;
	pData[playerid][pRentingHouse] = 0;
	pData[playerid][pSpraycans] = 0;
	pData[playerid][pBoombox] = 0;
	pData[playerid][pMask] = 0;
	
  	pData[playerid][pDrivingTime] = 0;
	pData[playerid][pDrivingFail] = 0;
	pData[playerid][pDrivingWait] = 0;
	pData[playerid][pDrivingTest] = 0;
	pData[playerid][pDrivingCP] = 0;
	pData[playerid][pDrivingScore] = 0;
	pData[playerid][pDrivingStart] = 0;
	pData[playerid][pSweeping] = 0;
	pData[playerid][pBlindfold] = 0;
	pData[playerid][pMP3Player] = 0;
	pData[playerid][pPhonebook] = 0;
	pData[playerid][pFishingRod] = 0;
	pData[playerid][pFishingBait] = 0;
	pData[playerid][pFishWeight] = 0;
	pData[playerid][pFishingSkill] = 0;
	pData[playerid][pGuardSkill] = 0;
	pData[playerid][pWeaponSkill] = 0;
	pData[playerid][pLawyerSkill] = 0;
	pData[playerid][pSmugglerSkill] = 0;
	pData[playerid][pToggleTextdraws] = 0;
	pData[playerid][pToggleAtm] = 0;
	pData[playerid][pToggleOOC] = 0;
	pData[playerid][pTogglePhone] = 0;
	pData[playerid][pToggleAdmin] = 0;
	pData[playerid][pToggleHelper] = 0;
	pData[playerid][pToggleNewbie] = 0;
	pData[playerid][pToggleWT] = 0;
	pData[playerid][pToggleRadio] = 0;
	pData[playerid][pToggleVIP] = 0;
	pData[playerid][pToggleMusic] = 0;
	pData[playerid][pToggleFaction] = 0;
	pData[playerid][pToggleGang] = 0;
	pData[playerid][pToggleNews] = 0;
	pData[playerid][pToggleGlobal] = 1;
	pData[playerid][pToggleCam] = 0;
	pData[playerid][pCarLicense] = 0;
	pData[playerid][pWeaponLicense] = 0;
	pData[playerid][pVIPgun1] = 0;
	pData[playerid][pVIPgun2] = 0;
	pData[playerid][pVIPgun3] = 0;
	pData[playerid][pVIPgun4] = 0;
	pData[playerid][pVIPgun5] = 0;
	pData[playerid][pDonator] = 0;
	pData[playerid][pVIPTime] = 14;
	pData[playerid][pVIPCooldown] = 0;
	pData[playerid][pWeapons] = 0;
	pData[playerid][pAmmo] = 0;
	pData[playerid][pFaction] = 0;
	pData[playerid][pFactionRank] = 0;
	pData[playerid][pGang] = 0;
	pData[playerid][pGangRank] = 0;
	pData[playerid][pDivision] = 0;
	pData[playerid][pContracted] = 0;
	pData[playerid][pContractBy] = 0;
	pData[playerid][pBombs] = 0;
	pData[playerid][pCompletedHits] = 0;
	pData[playerid][pFailedHits] = 0;
	pData[playerid][pReports] = 0;
	pData[playerid][pNewbies] = 0;
	pData[playerid][pHelpRequests] = 0;
	pData[playerid][pSpeedometer] = 0;
	pData[playerid][pFactionMod] = 0;
	pData[playerid][pAdminPersonnel] = 0;
	pData[playerid][pGangMod] = 0;
	pData[playerid][pBanAppealer] = 0;
	pData[playerid][pEventMod] = 0;
	pData[playerid][pDev] = 0;
	pData[playerid][pPotPlanted] = 0;
	pData[playerid][pPotTime] = 0;
	pData[playerid][pPotGrams] = 0;
	pData[playerid][pPotX] = 0;
	pData[playerid][pPotY] = 0;
	pData[playerid][pPotZ] = 0;
	pData[playerid][pPotA] = 0;
	pData[playerid][pInventoryUpgrade] = 0;
	pData[playerid][pAddictUpgrade] = 0;
	pData[playerid][pTraderUpgrade] = 0;
	pData[playerid][pAssetUpgrade] = 0;
	pData[playerid][pHPAmmo] = 0;
	pData[playerid][pPoisonAmmo] = 0;
	pData[playerid][pFMJAmmo] = 0;
	pData[playerid][pAmmoType] = 0;
	pData[playerid][pAmmoWeapon] = 0;
	pData[playerid][pLastReport] = 0;
	pData[playerid][pLastAM] = 0;
	pData[playerid][pLastChop] = 0;
	pData[playerid][pLastCharity] = 0;
	pData[playerid][pLastDamage] = 0;
	pData[playerid][pFirstSpawn] = 1; 
	pData[playerid][pLastNewbie] = 0;
	pData[playerid][pLastRequest] = 0;
	pData[playerid][pLastPay] = 0;
	pData[playerid][pLastRepair] = 0;
	pData[playerid][pLastRefuel] = 0;
	pData[playerid][pLastDrug] = 0;
	pData[playerid][pLastSell] = 0;
	pData[playerid][pLastEnter] = 0;
	pData[playerid][pLastPress] = 0;
	pData[playerid][pLastDeath] = 0;
	pData[playerid][pLastDesync] = 0;
	pData[playerid][pLastGlobal] = 0;
	pData[playerid][pSpectating] = INVALID_PLAYER_ID;
	pData[playerid][pAdminDuty] = 0;
	pData[playerid][pActiveReport] = -1;
	pData[playerid][pHospitalTime] = 0;
	pData[playerid][pListen] = 0;
	pData[playerid][pPMListen] = 0;
	pData[playerid][pJoinedEvent] = 0;
	pData[playerid][pDueling] = INVALID_PLAYER_ID;
	pData[playerid][pDueling1] = INVALID_PLAYER_ID;
	pData[playerid][pEventTeam] = 0;
	pData[playerid][pAwaitingClothing] = 0;
	pData[playerid][pFreezeTimer] = -1;
	pData[playerid][pNameChange][0] = 0;
	pData[playerid][pHelpRequest][0] = 0;
	pData[playerid][pAcceptedHelp] = 0;
	pData[playerid][pHouseOffer] = INVALID_PLAYER_ID;
	pData[playerid][pGarageOffer] = INVALID_PLAYER_ID;
	pData[playerid][pBizOffer] = INVALID_PLAYER_ID;
	pData[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	pData[playerid][pVestOffer] = INVALID_PLAYER_ID;
	pData[playerid][pCarOffer] = INVALID_PLAYER_ID;
	pData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	pData[playerid][pGangOffer] = INVALID_PLAYER_ID;
	pData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	pData[playerid][pLandOffer] = INVALID_PLAYER_ID;
	pData[playerid][pCarryOffer] = INVALID_PLAYER_ID;
	pData[playerid][pTacoOffer] = INVALID_PLAYER_ID;
	pData[playerid][pComboOffer] = INVALID_PLAYER_ID;
	pData[playerid][pBurritoOffer] = INVALID_PLAYER_ID;
	pData[playerid][pJuiceOffer] = INVALID_PLAYER_ID;
	pData[playerid][pLocOffer] = INVALID_PLAYER_ID;
	pData[playerid][pTicketOffer] = INVALID_PLAYER_ID;
	pData[playerid][pLiveOffer] = INVALID_PLAYER_ID;
	pData[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	pData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
	pData[playerid][pAllianceOffer] = INVALID_PLAYER_ID;
	pData[playerid][pDefendOffer] = INVALID_PLAYER_ID;
	pData[playerid][pDiceOffer] = INVALID_PLAYER_ID;	
	pData[playerid][pDiceOffer1] = INVALID_PLAYER_ID;
	pData[playerid][pSendRob] = INVALID_PLAYER_ID;
	pData[playerid][pInviteOffer] = INVALID_PLAYER_ID;
	pData[playerid][pRobberyOffer] = INVALID_PLAYER_ID;
	pData[playerid][pRobberyOffer1] = INVALID_PLAYER_ID;
	pData[playerid][pEditType] = 0;
    pData[playerid][pEditObject] = INVALID_OBJECT_ID;
    pData[playerid][pFurniturePerms] = -1;
	pData[playerid][pLandPerms] = -1;
	pData[playerid][pPizzas] = 0;
	pData[playerid][pLastPizza] = 0;
	pData[playerid][pLastStuck] = 0;
	pData[playerid][pLastUpdate] = 0;
	pData[playerid][pLastLoad] = 0;
	pData[playerid][pLastBet] = 0;
	pData[playerid][pLastClean] = 0;
	pData[playerid][pCP] = CHECKPOINT_NONE;
	pData[playerid][pShipment] = -1;
	pData[playerid][pWoodment] = -1;
	pData[playerid][pIllegalCargo] = -1;
	pData[playerid][pFishTime] = 0;
	pData[playerid][pUsedBait] = 0;
	pData[playerid][pSmuggleMats] = 0;
	pData[playerid][pSmuggleTime] = 0;
	pData[playerid][pSmuggleDrugs] = 0;
	pData[playerid][pRefuel] = INVALID_VEHICLE_ID;
	pData[playerid][pCallLine] = INVALID_PLAYER_ID;
    pData[playerid][pAFK] = 0;
    pData[playerid][pAFKTime] = 0;
	pData[playerid][pLoopAnim] = 0;
	pData[playerid][pCleanTime] = 0;	
	pData[playerid][pTacoEattime] = 0;	
	pData[playerid][pBurritoEattime] = 0;	
	pData[playerid][pJuicetime] = 0;	
	pData[playerid][pTacotime] = 0;		
	pData[playerid][pBurritotime] = 0;	
	pData[playerid][pMiningTime] = 0;
	pData[playerid][pMiningRock] = 0;
	pData[playerid][pButcherTime] = 0;
	pData[playerid][pButcherMeat] = 0;
	pData[playerid][pDemolitionTime] = 0;
	pData[playerid][pDemolition] = 0;
	pData[playerid][pDrivingTest] = 0;
	pData[playerid][pSpecialTag] = Text3D:INVALID_3DTEXT_ID;
	pData[playerid][pTagType] = TAG_NORMAL;
	pData[playerid][pVIPColor] = 0;
	pData[playerid][pAdminColor] = 0;
    pData[playerid][pTaxiFare] = 0;
    pData[playerid][pTaxiPassenger] = INVALID_PLAYER_ID;
    pData[playerid][pTaxiBill] = 0;
    pData[playerid][pTaxiTime] = 0;
    pData[playerid][pFaction] = -1;
    pData[playerid][pFactionRank] = 0;
    pData[playerid][pGang] = -1;
    pData[playerid][pGangRank] = 0;
	pData[playerid][pDuty] = 0;
	pData[playerid][pBackup] = 0;
	pData[playerid][pTazer] = 0;
	pData[playerid][pTazedTime] = 0;
	pData[playerid][pBeanbag] = 0;
	pData[playerid][pBeanbagTime] = 0;
	pData[playerid][pCuffed] = 0;
	pData[playerid][pTied] = 0;
	pData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	pData[playerid][pSkinSelected] = -1;
	pData[playerid][pChatstyle] = 0;
	pData[playerid][pApproved] = 1;


	pData[playerid][pBandage] = 0;
	pData[playerid][pRepairKit] = 0;
	pData[playerid][pParts] = 0;
	pData[playerid][pMedkit] = 0;
    pData[playerid][pDelivered] = 0;
    pData[playerid][pFirstaid] = 0;
    pData[playerid][pPlantedBomb] = 0;
    pData[playerid][pBombObject] = INVALID_OBJECT_ID;
    pData[playerid][pContractTaken] = INVALID_PLAYER_ID;
	pData[playerid][pSpamTime] = 0;
	pData[playerid][pVendorTime] = 0;
	pData[playerid][pBarTime] = 0;
    pData[playerid][pMuted] = 0;
    pData[playerid][pBoomboxPlaced] = 0;
    pData[playerid][pBoomboxObject] = INVALID_OBJECT_ID;
	pData[playerid][pBoomboxListen] = INVALID_PLAYER_ID;
    pData[playerid][pZonePickups][0] = -1;
    pData[playerid][pZonePickups][1] = -1;
    pData[playerid][pZonePickups][2] = -1;
    pData[playerid][pZonePickups][3] = -1;
    pData[playerid][pZoneID] = -1;
    pData[playerid][pZoneCreation] = 0;
    pData[playerid][pShowTurfs] = true;
    pData[playerid][pStreamType] = MUSIC_NONE;
    pData[playerid][pFreeNamechange] = 0;
	pData[playerid][pVehicleKeys] = INVALID_VEHICLE_ID;
    pData[playerid][pCurrentWeapon] = 0;
    pData[playerid][pCurrentAmmo] = 0;
    pData[playerid][pCurrentVehicle] = 0;
    pData[playerid][pVehicleCount] = 0;
    pData[playerid][pACWarns] = 0;
    pData[playerid][pACTime] = 0;
    pData[playerid][pArmorTime] = 0;
    pData[playerid][pACFired] = 0;
    pData[playerid][pPotObject] = INVALID_OBJECT_ID;
    pData[playerid][pPickPlant] = INVALID_PLAYER_ID;
    pData[playerid][pPickTime] = 0;
    pData[playerid][pCookMeth] = 0;
    pData[playerid][pCookTime] = 0;
    pData[playerid][pCookGrams] = 0;
    pData[playerid][pDrugsUsed] = 0;
    pData[playerid][pDrugsTime] = 0;
    pData[playerid][pBandana] = 0;
	pData[playerid][pCapturingPoint] = -1;
	pData[playerid][pCaptureTime] = 0;
	pData[playerid][pWatchingIntro] = 0;
	pData[playerid][pLoginCamera] = 0;
	pData[playerid][pPoisonTime] = 0;
	pData[playerid][pJetpack] = 0;
    pData[playerid][pWatchOn] = 0;
    pData[playerid][pGPSOn] = 0;
    pData[playerid][pTextFrom] = INVALID_PLAYER_ID;
    pData[playerid][pWhisperFrom] = INVALID_PLAYER_ID;
    pData[playerid][pMechanicCall] = 0;
	pData[playerid][pTaxiCall] = 0;
    pData[playerid][pEmergencyCall] = 0;
	pData[playerid][pClip] = 0;
	pData[playerid][pReloading] = 0;
    pData[playerid][pFindTime] = 0;
    pData[playerid][pFindPlayer] = INVALID_PLAYER_ID;
    pData[playerid][pRobCash] = 0;
	pData[playerid][pLootTime] = 0;
	pData[playerid][pRemoveFrom] = INVALID_PLAYER_ID;
	pData[playerid][pToggleWhisper] = 0;
	pData[playerid][pRareTime] = 0;
	pData[playerid][pBL] = 0;
	pData[playerid][pBackpack] = 0;
	pData[playerid][bpWearing] = 0;
	pData[playerid][bpCash] = 0;
	pData[playerid][bpMaterials] = 0;
	pData[playerid][bpPot] = 0;
	pData[playerid][bpCrack] = 0;
	pData[playerid][bpMeth] = 0;
	pData[playerid][bpPainkillers] = 0;
	pData[playerid][bpWeapons] = 0;
	pData[playerid][bpHPAmmo] = 0;
	pData[playerid][bpPoisonAmmo] = 0;
	pData[playerid][bpFMJAmmo] = 0;
	pData[playerid][pMarriedTo] = -1;
	pData[playerid][pHunger] = 100;
	pData[playerid][pHungerTimer] = 0;
	pData[playerid][pStress] = 100;
	pData[playerid][pStressTimer] = 0;
	pData[playerid][pThirst] = 100;
	pData[playerid][pThirstTimer] = 0;
    for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	    chattingWith[playerid]{i} = false;
	}

	for(new i = 0; i < 13; i ++)
	{
	    pData[playerid][pWeapons][i] = 0;
	    pData[playerid][pTempWeapons][i] = 0;
	}

	for(new i = 0; i < 3; i ++)
	{
	    MarkedPositions[playerid][i][mPosX] = 0.0;
	    MarkedPositions[playerid][i][mPosY] = 0.0;
	    MarkedPositions[playerid][i][mPosZ] = 0.0;
	}

	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    ClothingInfo[playerid][i][cExists] = 0;
	    ClothingInfo[playerid][i][cID] = 0;
	    ClothingInfo[playerid][i][cName] = 0;
	    ClothingInfo[playerid][i][cModel] = 0;
	    ClothingInfo[playerid][i][cBone] = 0;
	    ClothingInfo[playerid][i][cAttached] = 0;
	    ClothingInfo[playerid][i][cAttachedIndex] = -1;
	}

	// Reset the player's client attributes.
	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i ++)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, i))
	    {
	        RemovePlayerAttachedObject(playerid, i);
		}
	}

	ResetPlayerWeapons(playerid);
	StopAudioStreamForPlayer(playerid);
	SetPlayerColor(playerid, 0xFFFFFF00);

	/*#if defined Christmas
	#else
		EventTextdraw[playerid] = CreatePlayerTextDraw(playerid, 608.000000, 97.000000, "C0");
		PlayerTextDrawFont(playerid, EventTextdraw[playerid], 3);
		PlayerTextDrawLetterSize(playerid, EventTextdraw[playerid], 0.541665, 2.299998);
		PlayerTextDrawTextSize(playerid, EventTextdraw[playerid], 400.000000, 17.000000);
		PlayerTextDrawSetOutline(playerid, EventTextdraw[playerid], 2);
		PlayerTextDrawSetShadow(playerid, EventTextdraw[playerid], 0);
		PlayerTextDrawAlignment(playerid, EventTextdraw[playerid], 3);
		PlayerTextDrawColor(playerid, EventTextdraw[playerid], SERVER_COLOR);
		PlayerTextDrawBackgroundColor(playerid, EventTextdraw[playerid], 255);
		PlayerTextDrawBoxColor(playerid, EventTextdraw[playerid], 50);
		PlayerTextDrawUseBox(playerid, EventTextdraw[playerid], 0);
		PlayerTextDrawSetProportional(playerid, EventTextdraw[playerid], 1);
		PlayerTextDrawSetSelectable(playerid, EventTextdraw[playerid], 0);
	#endif*/


	customHUD[playerid][1] = CreatePlayerTextDraw(playerid, 499.000000, 111.000000, "_");
	PlayerTextDrawFont(playerid, customHUD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, customHUD[playerid][1], 0.312498, 1.399999);
	PlayerTextDrawTextSize(playerid, customHUD[playerid][1], 810.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, customHUD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, customHUD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, customHUD[playerid][1], 1);
	PlayerTextDrawColor(playerid, customHUD[playerid][1], COLOR_TEAL	);
	PlayerTextDrawBackgroundColor(playerid, customHUD[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, customHUD[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, customHUD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, customHUD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, customHUD[playerid][1], 0);

	PlayerCashTD[playerid][2] = CreatePlayerTextDraw(playerid, 539.000000, 261.000000, "$00000000");
	PlayerTextDrawFont(playerid, PlayerCashTD[playerid][2], 3);
	PlayerTextDrawLetterSize(playerid, PlayerCashTD[playerid][2], 0.458332, 2.399998);
	PlayerTextDrawTextSize(playerid, PlayerCashTD[playerid][2], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, PlayerCashTD[playerid][2], 2);
	PlayerTextDrawSetShadow(playerid, PlayerCashTD[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, PlayerCashTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, PlayerCashTD[playerid][2], 65535);
	PlayerTextDrawBackgroundColor(playerid, PlayerCashTD[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, PlayerCashTD[playerid][2], 50);
	PlayerTextDrawUseBox(playerid, PlayerCashTD[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, PlayerCashTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerCashTD[playerid][2], 0);

	
	PlayerCashTD[playerid][0] = CreatePlayerTextDraw(playerid, 191.000000, 228.000000, "$00000000");
	PlayerTextDrawFont(playerid, PlayerCashTD[playerid][0], 3);
	PlayerTextDrawLetterSize(playerid, PlayerCashTD[playerid][0], 0.774999, 4.399998);
	PlayerTextDrawTextSize(playerid, PlayerCashTD[playerid][0], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, PlayerCashTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerCashTD[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, PlayerCashTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, PlayerCashTD[playerid][0], -65281);
	PlayerTextDrawBackgroundColor(playerid, PlayerCashTD[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, PlayerCashTD[playerid][0], 50);
	PlayerTextDrawUseBox(playerid, PlayerCashTD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, PlayerCashTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerCashTD[playerid][0], 0);
	
	PlayerCashTD[playerid][1] = CreatePlayerTextDraw(playerid, 216.000000, 256.000000, "$00000000");
	PlayerTextDrawFont(playerid, PlayerCashTD[playerid][1], 3);
	PlayerTextDrawLetterSize(playerid, PlayerCashTD[playerid][1], 0.579164, 3.299998);
	PlayerTextDrawTextSize(playerid, PlayerCashTD[playerid][1], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, PlayerCashTD[playerid][1], 2);
	PlayerTextDrawSetShadow(playerid, PlayerCashTD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, PlayerCashTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, PlayerCashTD[playerid][1], -65281);
	PlayerTextDrawBackgroundColor(playerid, PlayerCashTD[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, PlayerCashTD[playerid][1], 50);
	PlayerTextDrawUseBox(playerid, PlayerCashTD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerCashTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerCashTD[playerid][1], 0);
	
	MugshotTD0[playerid] = CreatePlayerTextDraw(playerid, 325.000000, 329.000000, "_");
	PlayerTextDrawFont(playerid, MugshotTD0[playerid], 1);
	PlayerTextDrawLetterSize(playerid, MugshotTD0[playerid], 0.783333, 9.300003);
	PlayerTextDrawTextSize(playerid, MugshotTD0[playerid], 298.500000, 135.000000);
	PlayerTextDrawSetOutline(playerid, MugshotTD0[playerid], 1);
	PlayerTextDrawSetShadow(playerid, MugshotTD0[playerid], 0);
	PlayerTextDrawAlignment(playerid, MugshotTD0[playerid], 2);
	PlayerTextDrawColor(playerid, MugshotTD0[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MugshotTD0[playerid], 255);
	PlayerTextDrawBoxColor(playerid, MugshotTD0[playerid], 135);
	PlayerTextDrawUseBox(playerid, MugshotTD0[playerid], 1);
	PlayerTextDrawSetProportional(playerid, MugshotTD0[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MugshotTD0[playerid], 0);
	
	MugshotTD1[playerid] = CreatePlayerTextDraw(playerid, 325.000000, 334.000000, "_");
	PlayerTextDrawFont(playerid, MugshotTD1[playerid], 1);
	PlayerTextDrawLetterSize(playerid, MugshotTD1[playerid], 0.600000, 8.300003);
	PlayerTextDrawTextSize(playerid, MugshotTD1[playerid], 308.500000, 128.500000);
	PlayerTextDrawSetOutline(playerid, MugshotTD1[playerid], 1);
	PlayerTextDrawSetShadow(playerid, MugshotTD1[playerid], 0);
	PlayerTextDrawAlignment(playerid, MugshotTD1[playerid], 2);
	PlayerTextDrawColor(playerid, MugshotTD1[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MugshotTD1[playerid], 255);
	PlayerTextDrawBoxColor(playerid, MugshotTD1[playerid], -121);
	PlayerTextDrawUseBox(playerid, MugshotTD1[playerid], 1);
	PlayerTextDrawSetProportional(playerid, MugshotTD1[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MugshotTD1[playerid], 0);
	
	MugshotTD2[playerid] = CreatePlayerTextDraw(playerid, 263.000000, 350.000000, "NAME:");
	PlayerTextDrawFont(playerid, MugshotTD2[playerid], 2);
	PlayerTextDrawLetterSize(playerid, MugshotTD2[playerid], 0.158332, 1.799999);
	PlayerTextDrawTextSize(playerid, MugshotTD2[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, MugshotTD2[playerid], 1);
	PlayerTextDrawSetShadow(playerid, MugshotTD2[playerid], 0);
	PlayerTextDrawAlignment(playerid, MugshotTD2[playerid], 1);
	PlayerTextDrawColor(playerid, MugshotTD2[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MugshotTD2[playerid], 255);
	PlayerTextDrawBoxColor(playerid, MugshotTD2[playerid], 50);
	PlayerTextDrawUseBox(playerid, MugshotTD2[playerid], 0);
	PlayerTextDrawSetProportional(playerid, MugshotTD2[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MugshotTD2[playerid], 0);
	
	MugshotTD3[playerid] = CreatePlayerTextDraw(playerid, 263.000000, 367.000000, "AGE:");
	PlayerTextDrawFont(playerid, MugshotTD3[playerid], 2);
	PlayerTextDrawLetterSize(playerid, MugshotTD3[playerid], 0.204164, 2.000000);
	PlayerTextDrawTextSize(playerid, MugshotTD3[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, MugshotTD3[playerid], 1);
	PlayerTextDrawSetShadow(playerid, MugshotTD3[playerid], 0);
	PlayerTextDrawAlignment(playerid, MugshotTD3[playerid], 1);
	PlayerTextDrawColor(playerid, MugshotTD3[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MugshotTD3[playerid], 255);
	PlayerTextDrawBoxColor(playerid, MugshotTD3[playerid], 50);
	PlayerTextDrawUseBox(playerid, MugshotTD3[playerid], 0);
	PlayerTextDrawSetProportional(playerid, MugshotTD3[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MugshotTD3[playerid], 0);
	
	MugshotTD4[playerid] = CreatePlayerTextDraw(playerid, 263.000000, 386.000000, "CRIME:");
	PlayerTextDrawFont(playerid, MugshotTD4[playerid], 2);
	PlayerTextDrawLetterSize(playerid, MugshotTD4[playerid], 0.204164, 2.000000);
	PlayerTextDrawTextSize(playerid, MugshotTD4[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, MugshotTD4[playerid], 1);
	PlayerTextDrawSetShadow(playerid, MugshotTD4[playerid], 0);
	PlayerTextDrawAlignment(playerid, MugshotTD4[playerid], 1);
	PlayerTextDrawColor(playerid, MugshotTD4[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MugshotTD4[playerid], 255);
	PlayerTextDrawBoxColor(playerid, MugshotTD4[playerid], 50);
	PlayerTextDrawUseBox(playerid, MugshotTD4[playerid], 0);
	PlayerTextDrawSetProportional(playerid, MugshotTD4[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MugshotTD4[playerid], 0);
	
	MugshotTD5[playerid] = CreatePlayerTextDraw(playerid, 287.000000, 349.000000, "King_Mondragon");
	PlayerTextDrawFont(playerid, MugshotTD5[playerid], 2);
	PlayerTextDrawLetterSize(playerid, MugshotTD5[playerid], 0.162500, 1.850000);
	PlayerTextDrawTextSize(playerid, MugshotTD5[playerid], 400.000000, 297.000000);
	PlayerTextDrawSetOutline(playerid, MugshotTD5[playerid], 1);
	PlayerTextDrawSetShadow(playerid, MugshotTD5[playerid], 0);
	PlayerTextDrawAlignment(playerid, MugshotTD5[playerid], 1);
	PlayerTextDrawColor(playerid, MugshotTD5[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, MugshotTD5[playerid], 0);
	PlayerTextDrawBoxColor(playerid, MugshotTD5[playerid], 50);
	PlayerTextDrawUseBox(playerid, MugshotTD5[playerid], 0);
	PlayerTextDrawSetProportional(playerid, MugshotTD5[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MugshotTD5[playerid], 0);
	
	MugshotTD6[playerid] = CreatePlayerTextDraw(playerid, 287.000000, 366.000000, "20");
	PlayerTextDrawFont(playerid, MugshotTD6[playerid], 2);
	PlayerTextDrawLetterSize(playerid, MugshotTD6[playerid], 0.254166, 2.149999);
	PlayerTextDrawTextSize(playerid, MugshotTD6[playerid], 400.000000, 297.000000);
	PlayerTextDrawSetOutline(playerid, MugshotTD6[playerid], 1);
	PlayerTextDrawSetShadow(playerid, MugshotTD6[playerid], 0);
	PlayerTextDrawAlignment(playerid, MugshotTD6[playerid], 1);
	PlayerTextDrawColor(playerid, MugshotTD6[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, MugshotTD6[playerid], 0);
	PlayerTextDrawBoxColor(playerid, MugshotTD6[playerid], 50);
	PlayerTextDrawUseBox(playerid, MugshotTD6[playerid], 0);
	PlayerTextDrawSetProportional(playerid, MugshotTD6[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MugshotTD6[playerid], 0);
	
	MugshotTD7[playerid] = CreatePlayerTextDraw(playerid, 294.000000, 387.000000, "hostage taker");
	PlayerTextDrawFont(playerid, MugshotTD7[playerid], 2);
	PlayerTextDrawLetterSize(playerid, MugshotTD7[playerid], 0.162498, 1.950000);
	PlayerTextDrawTextSize(playerid, MugshotTD7[playerid], 400.000000, 297.000000);
	PlayerTextDrawSetOutline(playerid, MugshotTD7[playerid], 1);
	PlayerTextDrawSetShadow(playerid, MugshotTD7[playerid], 0);
	PlayerTextDrawAlignment(playerid, MugshotTD7[playerid], 1);
	PlayerTextDrawColor(playerid, MugshotTD7[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, MugshotTD7[playerid], 0);
	PlayerTextDrawBoxColor(playerid, MugshotTD7[playerid], 50);
	PlayerTextDrawUseBox(playerid, MugshotTD7[playerid], 0);
	PlayerTextDrawSetProportional(playerid, MugshotTD7[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MugshotTD7[playerid], 0);
	
	MugshotTD8[playerid] = CreatePlayerTextDraw(playerid, 288.000000, 331.000000, "MRPD MUGSHOT");
	PlayerTextDrawFont(playerid, MugshotTD8[playerid], 2);
	PlayerTextDrawLetterSize(playerid, MugshotTD8[playerid], 0.229166, 2.000000);
	PlayerTextDrawTextSize(playerid, MugshotTD8[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, MugshotTD8[playerid], 1);
	PlayerTextDrawSetShadow(playerid, MugshotTD8[playerid], 0);
	PlayerTextDrawAlignment(playerid, MugshotTD8[playerid], 1);
	PlayerTextDrawColor(playerid, MugshotTD8[playerid], -8388353);
	PlayerTextDrawBackgroundColor(playerid, MugshotTD8[playerid], 255);
	PlayerTextDrawBoxColor(playerid, MugshotTD8[playerid], 50);
	PlayerTextDrawUseBox(playerid, MugshotTD8[playerid], 0);
	PlayerTextDrawSetProportional(playerid, MugshotTD8[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MugshotTD8[playerid], 0);

    // Sabong TD
	SabongTD[playerid][0] = CreatePlayerTextDraw(playerid, 213.000000, 271.000000, "_");
	PlayerTextDrawFont(playerid, SabongTD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, SabongTD[playerid][0], 0.600000, 10.300003);
	PlayerTextDrawTextSize(playerid, SabongTD[playerid][0], 298.500000, 123.500000);
	PlayerTextDrawSetOutline(playerid, SabongTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, SabongTD[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, SabongTD[playerid][0], 2);
	PlayerTextDrawColor(playerid, SabongTD[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, SabongTD[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, SabongTD[playerid][0], -764862778);
	PlayerTextDrawUseBox(playerid, SabongTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, SabongTD[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, SabongTD[playerid][0], 0);

	SabongTD[playerid][1] = CreatePlayerTextDraw(playerid, 213.000000, 265.000000, "_");
	PlayerTextDrawFont(playerid, SabongTD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, SabongTD[playerid][1], 0.600000, 2.550003);
	PlayerTextDrawTextSize(playerid, SabongTD[playerid][1], 298.500000, 123.500000);
	PlayerTextDrawSetOutline(playerid, SabongTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, SabongTD[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, SabongTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, SabongTD[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, SabongTD[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, SabongTD[playerid][1], -16776961);
	PlayerTextDrawUseBox(playerid, SabongTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, SabongTD[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, SabongTD[playerid][1], 0);

	SabongTD[playerid][2] = CreatePlayerTextDraw(playerid, 428.000000, 271.000000, "_");
	PlayerTextDrawFont(playerid, SabongTD[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, SabongTD[playerid][2], 0.600000, 10.300003);
	PlayerTextDrawTextSize(playerid, SabongTD[playerid][2], 298.500000, 123.500000);
	PlayerTextDrawSetOutline(playerid, SabongTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, SabongTD[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, SabongTD[playerid][2], 2);
	PlayerTextDrawColor(playerid, SabongTD[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, SabongTD[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, SabongTD[playerid][2], 1097458118);
	PlayerTextDrawUseBox(playerid, SabongTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, SabongTD[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, SabongTD[playerid][2], 0);

	SabongTD[playerid][3] = CreatePlayerTextDraw(playerid, 428.000000, 265.000000, "_");
	PlayerTextDrawFont(playerid, SabongTD[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, SabongTD[playerid][3], 0.600000, 2.550003);
	PlayerTextDrawTextSize(playerid, SabongTD[playerid][3], 298.500000, 123.500000);
	PlayerTextDrawSetOutline(playerid, SabongTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, SabongTD[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, SabongTD[playerid][3], 2);
	PlayerTextDrawColor(playerid, SabongTD[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, SabongTD[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, SabongTD[playerid][3], 65535);
	PlayerTextDrawUseBox(playerid, SabongTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, SabongTD[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, SabongTD[playerid][3], 0);

	SabongTD[playerid][4] = CreatePlayerTextDraw(playerid, 213.000000, 266.000000, "MERON");
	PlayerTextDrawFont(playerid, SabongTD[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, SabongTD[playerid][4], 0.479166, 2.000000);
	PlayerTextDrawTextSize(playerid, SabongTD[playerid][4], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SabongTD[playerid][4], 0);
	PlayerTextDrawSetShadow(playerid, SabongTD[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, SabongTD[playerid][4], 2);
	PlayerTextDrawColor(playerid, SabongTD[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, SabongTD[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, SabongTD[playerid][4], 255);
	PlayerTextDrawUseBox(playerid, SabongTD[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, SabongTD[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, SabongTD[playerid][4], 0);

	SabongTD[playerid][5] = CreatePlayerTextDraw(playerid, 428.000000, 266.000000, "WALA");
	PlayerTextDrawFont(playerid, SabongTD[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid, SabongTD[playerid][5], 0.479166, 2.000000);
	PlayerTextDrawTextSize(playerid, SabongTD[playerid][5], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SabongTD[playerid][5], 0);
	PlayerTextDrawSetShadow(playerid, SabongTD[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, SabongTD[playerid][5], 2);
	PlayerTextDrawColor(playerid, SabongTD[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, SabongTD[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, SabongTD[playerid][5], 255);
	PlayerTextDrawUseBox(playerid, SabongTD[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, SabongTD[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, SabongTD[playerid][5], 0);

	SabongTD[playerid][6] = CreatePlayerTextDraw(playerid, 213.000000, 293.000000, "Maxwell");
	PlayerTextDrawFont(playerid, SabongTD[playerid][6], 2);
	PlayerTextDrawLetterSize(playerid, SabongTD[playerid][6], 0.216666, 1.300000);
	PlayerTextDrawTextSize(playerid, SabongTD[playerid][6], 400.000000, 102.000000);
	PlayerTextDrawSetOutline(playerid, SabongTD[playerid][6], 0);
	PlayerTextDrawSetShadow(playerid, SabongTD[playerid][6], 1);
	PlayerTextDrawAlignment(playerid, SabongTD[playerid][6], 2);
	PlayerTextDrawColor(playerid, SabongTD[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, SabongTD[playerid][6], 255);
	PlayerTextDrawBoxColor(playerid, SabongTD[playerid][6], 50);
	PlayerTextDrawUseBox(playerid, SabongTD[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, SabongTD[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, SabongTD[playerid][6], 0);

	SabongTD[playerid][7] = CreatePlayerTextDraw(playerid, 213.000000, 307.000000, "$150,000");
	PlayerTextDrawFont(playerid, SabongTD[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, SabongTD[playerid][7], 0.216666, 1.300000);
	PlayerTextDrawTextSize(playerid, SabongTD[playerid][7], 400.000000, 102.000000);
	PlayerTextDrawSetOutline(playerid, SabongTD[playerid][7], 0);
	PlayerTextDrawSetShadow(playerid, SabongTD[playerid][7], 1);
	PlayerTextDrawAlignment(playerid, SabongTD[playerid][7], 2);
	PlayerTextDrawColor(playerid, SabongTD[playerid][7], -2686721);
	PlayerTextDrawBackgroundColor(playerid, SabongTD[playerid][7], 255);
	PlayerTextDrawBoxColor(playerid, SabongTD[playerid][7], 50);
	PlayerTextDrawUseBox(playerid, SabongTD[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, SabongTD[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, SabongTD[playerid][7], 0);

	SabongTD[playerid][8] = CreatePlayerTextDraw(playerid, 428.000000, 293.000000, "Xaver Cartel");
	PlayerTextDrawFont(playerid, SabongTD[playerid][8], 2);
	PlayerTextDrawLetterSize(playerid, SabongTD[playerid][8], 0.216666, 1.300000);
	PlayerTextDrawTextSize(playerid, SabongTD[playerid][8], 400.000000, 102.000000);
	PlayerTextDrawSetOutline(playerid, SabongTD[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, SabongTD[playerid][8], 1);
	PlayerTextDrawAlignment(playerid, SabongTD[playerid][8], 2);
	PlayerTextDrawColor(playerid, SabongTD[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, SabongTD[playerid][8], 255);
	PlayerTextDrawBoxColor(playerid, SabongTD[playerid][8], 50);
	PlayerTextDrawUseBox(playerid, SabongTD[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, SabongTD[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, SabongTD[playerid][8], 0);

	SabongTD[playerid][9] = CreatePlayerTextDraw(playerid, 428.000000, 307.000000, "$500,000");
	PlayerTextDrawFont(playerid, SabongTD[playerid][9], 1);
	PlayerTextDrawLetterSize(playerid, SabongTD[playerid][9], 0.216666, 1.300000);
	PlayerTextDrawTextSize(playerid, SabongTD[playerid][9], 400.000000, 102.000000);
	PlayerTextDrawSetOutline(playerid, SabongTD[playerid][9], 0);
	PlayerTextDrawSetShadow(playerid, SabongTD[playerid][9], 1);
	PlayerTextDrawAlignment(playerid, SabongTD[playerid][9], 2);
	PlayerTextDrawColor(playerid, SabongTD[playerid][9], -2686721);
	PlayerTextDrawBackgroundColor(playerid, SabongTD[playerid][9], 255);
	PlayerTextDrawBoxColor(playerid, SabongTD[playerid][9], 50);
	PlayerTextDrawUseBox(playerid, SabongTD[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, SabongTD[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, SabongTD[playerid][9], 0);

	SabongTD[playerid][10] = CreatePlayerTextDraw(playerid, 213.000000, 322.000000, "Payout = ~G~$0");
	PlayerTextDrawFont(playerid, SabongTD[playerid][10], 2);
	PlayerTextDrawLetterSize(playerid, SabongTD[playerid][10], 0.241666, 1.600000);
	PlayerTextDrawTextSize(playerid, SabongTD[playerid][10], 400.000000, 102.000000);
	PlayerTextDrawSetOutline(playerid, SabongTD[playerid][10], 0);
	PlayerTextDrawSetShadow(playerid, SabongTD[playerid][10], 1);
	PlayerTextDrawAlignment(playerid, SabongTD[playerid][10], 2);
	PlayerTextDrawColor(playerid, SabongTD[playerid][10], -1);
	PlayerTextDrawBackgroundColor(playerid, SabongTD[playerid][10], 255);
	PlayerTextDrawBoxColor(playerid, SabongTD[playerid][10], 50);
	PlayerTextDrawUseBox(playerid, SabongTD[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, SabongTD[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, SabongTD[playerid][10], 0);

	SabongTD[playerid][11] = CreatePlayerTextDraw(playerid, 428.000000, 322.000000, "Payout = ~G~$0");
	PlayerTextDrawFont(playerid, SabongTD[playerid][11], 2);
	PlayerTextDrawLetterSize(playerid, SabongTD[playerid][11], 0.241666, 1.600000);
	PlayerTextDrawTextSize(playerid, SabongTD[playerid][11], 400.000000, 102.000000);
	PlayerTextDrawSetOutline(playerid, SabongTD[playerid][11], 0);
	PlayerTextDrawSetShadow(playerid, SabongTD[playerid][11], 1);
	PlayerTextDrawAlignment(playerid, SabongTD[playerid][11], 2);
	PlayerTextDrawColor(playerid, SabongTD[playerid][11], -1);
	PlayerTextDrawBackgroundColor(playerid, SabongTD[playerid][11], 255);
	PlayerTextDrawBoxColor(playerid, SabongTD[playerid][11], 50);
	PlayerTextDrawUseBox(playerid, SabongTD[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, SabongTD[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid, SabongTD[playerid][11], 0);

	SabongTD[playerid][12] = CreatePlayerTextDraw(playerid, 166.000000, 341.000000, "HP:");
	PlayerTextDrawFont(playerid, SabongTD[playerid][12], 2);
	PlayerTextDrawLetterSize(playerid, SabongTD[playerid][12], 0.187500, 1.300000);
	PlayerTextDrawTextSize(playerid, SabongTD[playerid][12], 400.000000, 102.000000);
	PlayerTextDrawSetOutline(playerid, SabongTD[playerid][12], 0);
	PlayerTextDrawSetShadow(playerid, SabongTD[playerid][12], 1);
	PlayerTextDrawAlignment(playerid, SabongTD[playerid][12], 2);
	PlayerTextDrawColor(playerid, SabongTD[playerid][12], -1);
	PlayerTextDrawBackgroundColor(playerid, SabongTD[playerid][12], 255);
	PlayerTextDrawBoxColor(playerid, SabongTD[playerid][12], 50);
	PlayerTextDrawUseBox(playerid, SabongTD[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid, SabongTD[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, SabongTD[playerid][12], 0);

	SabongTD[playerid][13] = CreatePlayerTextDraw(playerid, 166.000000, 341.000000, "HP:");
	PlayerTextDrawFont(playerid, SabongTD[playerid][13], 2);
	PlayerTextDrawLetterSize(playerid, SabongTD[playerid][13], 0.187500, 1.300000);
	PlayerTextDrawTextSize(playerid, SabongTD[playerid][13], 400.000000, 102.000000);
	PlayerTextDrawSetOutline(playerid, SabongTD[playerid][13], 0);
	PlayerTextDrawSetShadow(playerid, SabongTD[playerid][13], 1);
	PlayerTextDrawAlignment(playerid, SabongTD[playerid][13], 2);
	PlayerTextDrawColor(playerid, SabongTD[playerid][13], -1);
	PlayerTextDrawBackgroundColor(playerid, SabongTD[playerid][13], 255);
	PlayerTextDrawBoxColor(playerid, SabongTD[playerid][13], 50);
	PlayerTextDrawUseBox(playerid, SabongTD[playerid][13], 0);
	PlayerTextDrawSetProportional(playerid, SabongTD[playerid][13], 1);
	PlayerTextDrawSetSelectable(playerid, SabongTD[playerid][13], 0);

	SabongTD[playerid][14] = CreatePlayerTextDraw(playerid, 380.000000, 341.000000, "HP:");
	PlayerTextDrawFont(playerid, SabongTD[playerid][14], 2);
	PlayerTextDrawLetterSize(playerid, SabongTD[playerid][14], 0.187500, 1.300000);
	PlayerTextDrawTextSize(playerid, SabongTD[playerid][14], 400.000000, 102.000000);
	PlayerTextDrawSetOutline(playerid, SabongTD[playerid][14], 0);
	PlayerTextDrawSetShadow(playerid, SabongTD[playerid][14], 1);
	PlayerTextDrawAlignment(playerid, SabongTD[playerid][14], 2);
	PlayerTextDrawColor(playerid, SabongTD[playerid][14], -1);
	PlayerTextDrawBackgroundColor(playerid, SabongTD[playerid][14], 255);
	PlayerTextDrawBoxColor(playerid, SabongTD[playerid][14], 50);
	PlayerTextDrawUseBox(playerid, SabongTD[playerid][14], 0);
	PlayerTextDrawSetProportional(playerid, SabongTD[playerid][14], 1);
	PlayerTextDrawSetSelectable(playerid, SabongTD[playerid][14], 0);

	SabongBarTD[playerid][0] = CreatePlayerProgressBar(playerid, 185.000000, 345.000000, 62.000000, 4.000000, -16776961, 100.000000, 0);
	SabongBarTD[playerid][1] = CreatePlayerProgressBar(playerid, 399.000000, 345.000000, 62.000000, 4.000000, 65535, 100.000000, 0);
	SetPlayerProgressBarMaxValue(playerid, SabongBarTD[playerid][0], 100);
	SetPlayerProgressBarMaxValue(playerid, SabongBarTD[playerid][1], 100);
	HidePlayerProgressBar(playerid, SabongBarTD[playerid][0]);
	HidePlayerProgressBar(playerid, SabongBarTD[playerid][1]);



	//player id
	
	paypalTD[playerid] = CreatePlayerTextDraw( playerid, 89.000000, 428.000000, "ID: 69");
	PlayerTextDrawFont( playerid, paypalTD[playerid], 2);
	PlayerTextDrawLetterSize( playerid, paypalTD[playerid], 0.183332, 1.299999);
	PlayerTextDrawTextSize( playerid, paypalTD[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline( playerid, paypalTD[playerid], 1);
	PlayerTextDrawSetShadow( playerid, paypalTD[playerid], 0);
	PlayerTextDrawAlignment( playerid, paypalTD[playerid], 1);
	PlayerTextDrawColor( playerid, paypalTD[playerid], -1);
	PlayerTextDrawBackgroundColor( playerid, paypalTD[playerid], 255);
	PlayerTextDrawBoxColor( playerid, paypalTD[playerid], 50);
	PlayerTextDrawUseBox( playerid, paypalTD[playerid], 0);
	PlayerTextDrawSetProportional( playerid, paypalTD[playerid], 1);
	PlayerTextDrawSetSelectable( playerid, paypalTD[playerid], 0);


	//HUNGER 	
	HungerTD0[playerid] = CreatePlayerTextDraw(playerid, 8.000000, 421.000000, "ld_pool:ball");
	PlayerTextDrawFont(playerid, HungerTD0[playerid], 4);
	PlayerTextDrawLetterSize(playerid, HungerTD0[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, HungerTD0[playerid], 25.000000, 25.000000);
	PlayerTextDrawSetOutline(playerid, HungerTD0[playerid], 1);
	PlayerTextDrawSetShadow(playerid, HungerTD0[playerid], 0);
	PlayerTextDrawAlignment(playerid, HungerTD0[playerid], 1);
	PlayerTextDrawColor(playerid, HungerTD0[playerid], -16776961);
	PlayerTextDrawBackgroundColor(playerid, HungerTD0[playerid], 255);
	PlayerTextDrawBoxColor(playerid, HungerTD0[playerid], 50);
	PlayerTextDrawUseBox(playerid, HungerTD0[playerid], 1);
	PlayerTextDrawSetProportional(playerid, HungerTD0[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, HungerTD0[playerid], 0);
	
	HungerTD1[playerid] = CreatePlayerTextDraw(playerid, 10.000000, 423.000000, "ld_pool:ball");
	PlayerTextDrawFont(playerid, HungerTD1[playerid], 4);
	PlayerTextDrawLetterSize(playerid, HungerTD1[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, HungerTD1[playerid], 21.000000, 21.000000);
	PlayerTextDrawSetOutline(playerid, HungerTD1[playerid], 1);
	PlayerTextDrawSetShadow(playerid, HungerTD1[playerid], 0);
	PlayerTextDrawAlignment(playerid, HungerTD1[playerid], 1);
	PlayerTextDrawColor(playerid, HungerTD1[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, HungerTD1[playerid], 255);
	PlayerTextDrawBoxColor(playerid, HungerTD1[playerid], 50);
	PlayerTextDrawUseBox(playerid, HungerTD1[playerid], 1);
	PlayerTextDrawSetProportional(playerid, HungerTD1[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, HungerTD1[playerid], 0);
	
	HungerTD2[playerid] = CreatePlayerTextDraw(playerid, 35.000000, 421.000000, "ld_pool:ball");
	PlayerTextDrawFont(playerid, HungerTD2[playerid], 4);
	PlayerTextDrawLetterSize(playerid, HungerTD2[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, HungerTD2[playerid], 25.000000, 25.000000);
	PlayerTextDrawSetOutline(playerid, HungerTD2[playerid], 1);
	PlayerTextDrawSetShadow(playerid, HungerTD2[playerid], 0);
	PlayerTextDrawAlignment(playerid, HungerTD2[playerid], 1);
	PlayerTextDrawColor(playerid, HungerTD2[playerid], 1097458175);
	PlayerTextDrawBackgroundColor(playerid, HungerTD2[playerid], 255);
	PlayerTextDrawBoxColor(playerid, HungerTD2[playerid], 50);
	PlayerTextDrawUseBox(playerid, HungerTD2[playerid], 1);
	PlayerTextDrawSetProportional(playerid, HungerTD2[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, HungerTD2[playerid], 0);
	
	HungerTD3[playerid] = CreatePlayerTextDraw(playerid, 37.000000, 423.000000, "ld_pool:ball");
	PlayerTextDrawFont(playerid, HungerTD3[playerid], 4);
	PlayerTextDrawLetterSize(playerid, HungerTD3[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, HungerTD3[playerid], 21.000000, 21.000000);
	PlayerTextDrawSetOutline(playerid, HungerTD3[playerid], 1);
	PlayerTextDrawSetShadow(playerid, HungerTD3[playerid], 0);
	PlayerTextDrawAlignment(playerid, HungerTD3[playerid], 1);
	PlayerTextDrawColor(playerid, HungerTD3[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, HungerTD3[playerid], 255);
	PlayerTextDrawBoxColor(playerid, HungerTD3[playerid], 50);
	PlayerTextDrawUseBox(playerid, HungerTD3[playerid], 1);
	PlayerTextDrawSetProportional(playerid, HungerTD3[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, HungerTD3[playerid], 0);
	
	HungerTD4[playerid] = CreatePlayerTextDraw(playerid, 60.000000, 421.000000, "ld_pool:ball");
	PlayerTextDrawFont(playerid, HungerTD4[playerid], 4);
	PlayerTextDrawLetterSize(playerid, HungerTD4[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, HungerTD4[playerid], 25.000000, 25.000000);
	PlayerTextDrawSetOutline(playerid, HungerTD4[playerid], 1);
	PlayerTextDrawSetShadow(playerid, HungerTD4[playerid], 0);
	PlayerTextDrawAlignment(playerid, HungerTD4[playerid], 1);
	PlayerTextDrawColor(playerid, HungerTD4[playerid], 16711935);
	PlayerTextDrawBackgroundColor(playerid, HungerTD4[playerid], 255);
	PlayerTextDrawBoxColor(playerid, HungerTD4[playerid], 50);
	PlayerTextDrawUseBox(playerid, HungerTD4[playerid], 1);
	PlayerTextDrawSetProportional(playerid, HungerTD4[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, HungerTD4[playerid], 0);
	
	HungerTD5[playerid] = CreatePlayerTextDraw(playerid, 62.000000, 423.000000, "ld_pool:ball");
	PlayerTextDrawFont(playerid, HungerTD5[playerid], 4);
	PlayerTextDrawLetterSize(playerid, HungerTD5[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, HungerTD5[playerid], 21.000000, 21.000000);
	PlayerTextDrawSetOutline(playerid, HungerTD5[playerid], 1);
	PlayerTextDrawSetShadow(playerid, HungerTD5[playerid], 0);
	PlayerTextDrawAlignment(playerid, HungerTD5[playerid], 1);
	PlayerTextDrawColor(playerid, HungerTD5[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, HungerTD5[playerid], 255);
	PlayerTextDrawBoxColor(playerid, HungerTD5[playerid], 50);
	PlayerTextDrawUseBox(playerid, HungerTD5[playerid], 1);
	PlayerTextDrawSetProportional(playerid, HungerTD5[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, HungerTD5[playerid], 0);
	
	HungerTD6[playerid] = CreatePlayerTextDraw(playerid, 14.000000, 425.000000, "HUD:radar_pizza");
	PlayerTextDrawFont(playerid, HungerTD6[playerid], 4);
	PlayerTextDrawLetterSize(playerid, HungerTD6[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, HungerTD6[playerid], 13.000000, 10.000000);
	PlayerTextDrawSetOutline(playerid, HungerTD6[playerid], 1);
	PlayerTextDrawSetShadow(playerid, HungerTD6[playerid], 0);
	PlayerTextDrawAlignment(playerid, HungerTD6[playerid], 1);
	PlayerTextDrawColor(playerid, HungerTD6[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, HungerTD6[playerid], 255);
	PlayerTextDrawBoxColor(playerid, HungerTD6[playerid], 50);
	PlayerTextDrawUseBox(playerid, HungerTD6[playerid], 1);
	PlayerTextDrawSetProportional(playerid, HungerTD6[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, HungerTD6[playerid], 0);
	
	HungerTD7[playerid] = CreatePlayerTextDraw(playerid, 41.000000, 424.000000, "HUD:radar_centre");
	PlayerTextDrawFont(playerid, HungerTD7[playerid], 4);
	PlayerTextDrawLetterSize(playerid, HungerTD7[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, HungerTD7[playerid], 13.000000, 11.000000);
	PlayerTextDrawSetOutline(playerid, HungerTD7[playerid], 1);
	PlayerTextDrawSetShadow(playerid, HungerTD7[playerid], 0);
	PlayerTextDrawAlignment(playerid, HungerTD7[playerid], 1);
	PlayerTextDrawColor(playerid, HungerTD7[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, HungerTD7[playerid], 255);
	PlayerTextDrawBoxColor(playerid, HungerTD7[playerid], 50);
	PlayerTextDrawUseBox(playerid, HungerTD7[playerid], 1);
	PlayerTextDrawSetProportional(playerid, HungerTD7[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, HungerTD7[playerid], 0);
	
	HungerTD8[playerid] = CreatePlayerTextDraw(playerid, 66.000000, 424.000000, "HUD:radar_girlfriend");
	PlayerTextDrawFont(playerid, HungerTD8[playerid], 4);
	PlayerTextDrawLetterSize(playerid, HungerTD8[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, HungerTD8[playerid], 13.000000, 11.000000);
	PlayerTextDrawSetOutline(playerid, HungerTD8[playerid], 1);
	PlayerTextDrawSetShadow(playerid, HungerTD8[playerid], 0);
	PlayerTextDrawAlignment(playerid, HungerTD8[playerid], 1);
	PlayerTextDrawColor(playerid, HungerTD8[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, HungerTD8[playerid], 255);
	PlayerTextDrawBoxColor(playerid, HungerTD8[playerid], 50);
	PlayerTextDrawUseBox(playerid, HungerTD8[playerid], 1);
	PlayerTextDrawSetProportional(playerid, HungerTD8[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, HungerTD8[playerid], 0);
	
	HungerTD9[playerid] = CreatePlayerTextDraw(playerid, 20.000000, 433.000000, "100");
	PlayerTextDrawFont(playerid, HungerTD9[playerid], 2);
	PlayerTextDrawLetterSize(playerid, HungerTD9[playerid], 0.179167, 0.899999);
	PlayerTextDrawTextSize(playerid, HungerTD9[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, HungerTD9[playerid], 1);
	PlayerTextDrawSetShadow(playerid, HungerTD9[playerid], 0);
	PlayerTextDrawAlignment(playerid, HungerTD9[playerid], 2);
	PlayerTextDrawColor(playerid, HungerTD9[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, HungerTD9[playerid], 0);
	PlayerTextDrawBoxColor(playerid, HungerTD9[playerid], 50);
	PlayerTextDrawUseBox(playerid, HungerTD9[playerid], 0);
	PlayerTextDrawSetProportional(playerid, HungerTD9[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, HungerTD9[playerid], 0);
	
	HungerTD10[playerid] = CreatePlayerTextDraw(playerid, 48.000000, 433.000000, "100");
	PlayerTextDrawFont(playerid, HungerTD10[playerid], 2);
	PlayerTextDrawLetterSize(playerid, HungerTD10[playerid], 0.179167, 0.899999);
	PlayerTextDrawTextSize(playerid, HungerTD10[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, HungerTD10[playerid], 1);
	PlayerTextDrawSetShadow(playerid, HungerTD10[playerid], 0);
	PlayerTextDrawAlignment(playerid, HungerTD10[playerid], 2);
	PlayerTextDrawColor(playerid, HungerTD10[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, HungerTD10[playerid], 0);
	PlayerTextDrawBoxColor(playerid, HungerTD10[playerid], 50);
	PlayerTextDrawUseBox(playerid, HungerTD10[playerid], 0);
	PlayerTextDrawSetProportional(playerid, HungerTD10[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, HungerTD10[playerid], 0);
	
	HungerTD11[playerid] = CreatePlayerTextDraw(playerid, 73.000000, 433.000000, "100");
	PlayerTextDrawFont(playerid, HungerTD11[playerid], 2);
	PlayerTextDrawLetterSize(playerid, HungerTD11[playerid], 0.179167, 0.899999);
	PlayerTextDrawTextSize(playerid, HungerTD11[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, HungerTD11[playerid], 1);
	PlayerTextDrawSetShadow(playerid, HungerTD11[playerid], 0);
	PlayerTextDrawAlignment(playerid, HungerTD11[playerid], 2);
	PlayerTextDrawColor(playerid, HungerTD11[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, HungerTD11[playerid], 0);
	PlayerTextDrawBoxColor(playerid, HungerTD11[playerid], 50);
	PlayerTextDrawUseBox(playerid, HungerTD11[playerid], 0);
	PlayerTextDrawSetProportional(playerid, HungerTD11[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, HungerTD11[playerid], 0);
	

	//HOUSE_NEAR
	HouseNear_7[playerid] = CreatePlayerTextDraw(playerid, 181.000000, 245.000000, "HUD:radar_propertyg");
	PlayerTextDrawFont(playerid, HouseNear_7[playerid], 4);
	PlayerTextDrawLetterSize(playerid, HouseNear_7[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, HouseNear_7[playerid], -28.000000, 32.000000);
	PlayerTextDrawSetOutline(playerid, HouseNear_7[playerid], 1);
	PlayerTextDrawSetShadow(playerid, HouseNear_7[playerid], 0);
	PlayerTextDrawAlignment(playerid, HouseNear_7[playerid], 1);
	PlayerTextDrawColor(playerid, HouseNear_7[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, HouseNear_7[playerid], 255);
	PlayerTextDrawBoxColor(playerid, HouseNear_7[playerid], 50);
	PlayerTextDrawUseBox(playerid, HouseNear_7[playerid], 1);
	PlayerTextDrawSetProportional(playerid, HouseNear_7[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, HouseNear_7[playerid], 0);


	HouedOnear_7[playerid] = CreatePlayerTextDraw(playerid, 132.000000, 216.000000, "HUD:radar_propertyr");
	PlayerTextDrawFont(playerid, HouedOnear_7[playerid], 4);
	PlayerTextDrawLetterSize(playerid, HouedOnear_7[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, HouedOnear_7[playerid], -27.500000, 31.000000);
	PlayerTextDrawSetOutline(playerid, HouedOnear_7[playerid], 1);
	PlayerTextDrawSetShadow(playerid, HouedOnear_7[playerid], 0);
	PlayerTextDrawAlignment(playerid, HouedOnear_7[playerid], 1);
	PlayerTextDrawColor(playerid, HouedOnear_7[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, HouedOnear_7[playerid], 255);
	PlayerTextDrawBoxColor(playerid, HouedOnear_7[playerid], 50);
	PlayerTextDrawUseBox(playerid, HouedOnear_7[playerid], 1);
	PlayerTextDrawSetProportional(playerid, HouedOnear_7[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, HouedOnear_7[playerid], 0);

	//Player Textdraws
	SHOWID[playerid][0]= CreatePlayerTextDraw(playerid, 561.000000, 176.000000, "_");
	PlayerTextDrawFont(playerid, SHOWID[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][0], 0.600000, 21.300003);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][0], 298.500000, 120.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][0], 3);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][0], 2);
	PlayerTextDrawColor(playerid, SHOWID[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][0], 1296911724);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][0], 0);
	
	SHOWID[playerid][1] = CreatePlayerTextDraw(playerid, 561.000000, 180.000000, "_");
	PlayerTextDrawFont(playerid, SHOWID[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][1], 0.600000, 20.300003);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][1], 298.500000, 117.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][1], 2);
	PlayerTextDrawColor(playerid, SHOWID[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][1], 0);
	
	SHOWID[playerid][2] = CreatePlayerTextDraw(playerid, 490.000000, 203.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, SHOWID[playerid][2], 5);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][2], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][2], 142.500000, 163.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][2], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][2], 0);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][2], 0);
	PlayerTextDrawSetPreviewModel(playerid, SHOWID[playerid][2], 294);
	PlayerTextDrawSetPreviewRot(playerid, SHOWID[playerid][2], 0.000000, 0.000000, 0.000000, 0.779999);
	PlayerTextDrawSetPreviewVehCol(playerid, SHOWID[playerid][2], 1, 1);
	
	SHOWID[playerid][3] = CreatePlayerTextDraw(playerid, 561.000000, 247.000000, "_");
	PlayerTextDrawFont(playerid, SHOWID[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][3], 0.600000, 13.250005);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][3], 298.500000, 117.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][3], 2);
	PlayerTextDrawColor(playerid, SHOWID[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][3], 0);
	
	SHOWID[playerid][4] = CreatePlayerTextDraw(playerid, 592.000000, 155.000000, "ld_drv:gold");
	PlayerTextDrawFont(playerid, SHOWID[playerid][4], 4);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][4], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][4], 47.000000, 37.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][4], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][4], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][4], 0);
	
	SHOWID[playerid][5] = CreatePlayerTextDraw(playerid, 505.000000, 180.000000, "Manila Reality I.D.");
	PlayerTextDrawFont(playerid, SHOWID[playerid][5], 0);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][5], 0.533333, 2.000000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][5], 705.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][5], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][5], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][5], 0);
	
	SHOWID[playerid][6] = CreatePlayerTextDraw(playerid, 507.000000, 249.000000, "NAME:");
	PlayerTextDrawFont(playerid, SHOWID[playerid][6], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][6], 0.266665, 1.149999);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][6], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][6], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][6], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][6], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][6], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][6], 0);
	
	SHOWID[playerid][7] = CreatePlayerTextDraw(playerid, 507.000000, 280.000000, "AGE:");
	PlayerTextDrawFont(playerid, SHOWID[playerid][7], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][7], 0.266665, 1.049999);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][7], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][7], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][7], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][7], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][7], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][7], 0);
	
	SHOWID[playerid][8] = CreatePlayerTextDraw(playerid, 507.000000, 308.000000, "GENDER:");
	PlayerTextDrawFont(playerid, SHOWID[playerid][8], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][8], 0.266665, 1.250000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][8], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][8], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][8], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][8], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][8], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][8], 0);
	
	SHOWID[playerid][9] = CreatePlayerTextDraw(playerid, 569.000000, 359.000000, "EXPIRES FEB 2090");
	PlayerTextDrawFont(playerid, SHOWID[playerid][9], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][9], 0.133332, 0.750000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][9], 780.000000, 16.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][9], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][9], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][9], 255);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][9], 0);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][9], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][9], 0);
	
	SHOWID[playerid][10] = CreatePlayerTextDraw(playerid, 503.000000, 338.000000, "THIS IDENTIFICATION CARD HAS BEEN ISSUED BY THE");
	PlayerTextDrawFont(playerid, SHOWID[playerid][10], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][10], 0.100000, 0.750000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][10], 780.000000, 16.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][10], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][10], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][10], 255);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][10], 0);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][10], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][10], 0);
	
	SHOWID[playerid][11] = CreatePlayerTextDraw(playerid, 503.000000, 345.000000, "LOS SANTOS GOVERNMENT IF YOU'RE NOT THE OWNER OF");
	PlayerTextDrawFont(playerid, SHOWID[playerid][11], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][11], 0.100000, 0.750000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][11], 780.000000, 16.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][11], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][11], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][11], 255);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][11], 0);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][11], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][11], 0);
	
	SHOWID[playerid][12] = CreatePlayerTextDraw(playerid, 503.000000, 351.000000, "THIS CARD PLEASE OUT IT IN HALF OR RETURN IT AT THE NEAREST POLICE STATION");
	PlayerTextDrawFont(playerid, SHOWID[playerid][12], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][12], 0.066665, 0.750000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][12], 780.000000, 16.000000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][12], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][12], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][12], 255);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][12], 0);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][12], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][12], 0);
	
	SHOWID[playerid][13] = CreatePlayerTextDraw(playerid, 561.000000, 264.000000, "TEST");
	PlayerTextDrawFont(playerid, SHOWID[playerid][13], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][13], 0.183332, 1.350000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][13], 400.000000, 118.500000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][13], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][13], 2);
	PlayerTextDrawColor(playerid, SHOWID[playerid][13], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][13], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][13], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][13], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][13], 0);
	
	SHOWID[playerid][14] = CreatePlayerTextDraw(playerid, 503.000000, 293.000000, "  99");
	PlayerTextDrawFont(playerid, SHOWID[playerid][14], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][14], 0.183332, 1.350000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][14], 620.000000, 118.500000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][14], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][14], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][14], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][14], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][14], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][14], 1);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][14], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][14], 0);
	
	SHOWID[playerid][15] = CreatePlayerTextDraw(playerid, 503.000000, 323.000000, "  FEMALE");
	PlayerTextDrawFont(playerid, SHOWID[playerid][15], 2);
	PlayerTextDrawLetterSize(playerid, SHOWID[playerid][15], 0.183332, 1.350000);
	PlayerTextDrawTextSize(playerid, SHOWID[playerid][15], 620.000000, 118.500000);
	PlayerTextDrawSetOutline(playerid, SHOWID[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, SHOWID[playerid][15], 0);
	PlayerTextDrawAlignment(playerid, SHOWID[playerid][15], 1);
	PlayerTextDrawColor(playerid, SHOWID[playerid][15], -1);
	PlayerTextDrawBackgroundColor(playerid, SHOWID[playerid][15], 255);
	PlayerTextDrawBoxColor(playerid, SHOWID[playerid][15], 50);
	PlayerTextDrawUseBox(playerid, SHOWID[playerid][15], 1);
	PlayerTextDrawSetProportional(playerid, SHOWID[playerid][15], 1);
	PlayerTextDrawSetSelectable(playerid, SHOWID[playerid][15], 0);

	//Player Textdraws
	// Speedometer
	pData[playerid][pTextx][1] = CreatePlayerTextDraw(playerid, 552.000000, 382.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, pData[playerid][pTextx][1], 255);
	PlayerTextDrawFont(playerid, pData[playerid][pTextx][1], 1);
	PlayerTextDrawLetterSize(playerid, pData[playerid][pTextx][1], 0.519999, 5.500000);
	PlayerTextDrawColor(playerid, pData[playerid][pTextx][1], -1);
	PlayerTextDrawSetOutline(playerid, pData[playerid][pTextx][1], 0);
	PlayerTextDrawSetProportional(playerid, pData[playerid][pTextx][1], 1);
	PlayerTextDrawSetShadow(playerid, pData[playerid][pTextx][1], 1);
	PlayerTextDrawUseBox(playerid, pData[playerid][pTextx][1], 1);
	PlayerTextDrawBoxColor(playerid, pData[playerid][pTextx][1], 85);
	PlayerTextDrawTextSize(playerid, pData[playerid][pTextx][1], 628.000000, 0.000000);

	pData[playerid][pTextx][2] = CreatePlayerTextDraw(playerid, 554.000000, 384.000000, "~b~~h~Speed:~w~ 100 km/h~n~~b~~h~Fuel:~w~ 100%~n~~b~~h~Damage:~w~ 50%~n~~b~~h~Doors:~w~ Locked");
	PlayerTextDrawBackgroundColor(playerid, pData[playerid][pTextx][2], 255);
	PlayerTextDrawFont(playerid, pData[playerid][pTextx][2], 2);
	PlayerTextDrawLetterSize(playerid, pData[playerid][pTextx][2], 0.169999, 1.200000);
	PlayerTextDrawColor(playerid, pData[playerid][pTextx][2], -1);
	PlayerTextDrawSetOutline(playerid, pData[playerid][pTextx][2], 1);
	PlayerTextDrawSetProportional(playerid, pData[playerid][pTextx][2], 1);
	
	//login 
	MCRP_LOGIN_0[playerid] = CreatePlayerTextDraw( playerid, 51.000000, -11.000000, "_");
	PlayerTextDrawFont( playerid, MCRP_LOGIN_0[playerid], 1);
	PlayerTextDrawLetterSize( playerid, MCRP_LOGIN_0[playerid], 1.891666, 55.800003);
	PlayerTextDrawTextSize( playerid, MCRP_LOGIN_0[playerid], 373.500000, 275.000000);
	PlayerTextDrawSetOutline( playerid, MCRP_LOGIN_0[playerid], 1);
	PlayerTextDrawSetShadow( playerid, MCRP_LOGIN_0[playerid], 0);
	PlayerTextDrawAlignment( playerid, MCRP_LOGIN_0[playerid], 2);
	PlayerTextDrawColor( playerid, MCRP_LOGIN_0[playerid], -1);
	PlayerTextDrawBackgroundColor( playerid, MCRP_LOGIN_0[playerid], 255);
	PlayerTextDrawBoxColor( playerid, MCRP_LOGIN_0[playerid], 135);
	PlayerTextDrawUseBox( playerid, MCRP_LOGIN_0[playerid], 1);
	PlayerTextDrawSetProportional( playerid, MCRP_LOGIN_0[playerid], 1);
	PlayerTextDrawSetSelectable( playerid, MCRP_LOGIN_0[playerid], 0);
	
	MCRP_LOGIN_1[playerid] = CreatePlayerTextDraw( playerid, 191.000000, -11.000000, "_");
	PlayerTextDrawFont( playerid, MCRP_LOGIN_1[playerid], 1);
	PlayerTextDrawLetterSize( playerid, MCRP_LOGIN_1[playerid], 1.891666, 51.300003);
	PlayerTextDrawTextSize( playerid, MCRP_LOGIN_1[playerid], 373.500000, 0.000000);
	PlayerTextDrawSetOutline( playerid, MCRP_LOGIN_1[playerid], 1);
	PlayerTextDrawSetShadow( playerid, MCRP_LOGIN_1[playerid], 0);
	PlayerTextDrawAlignment( playerid, MCRP_LOGIN_1[playerid], 2);
	PlayerTextDrawColor( playerid, MCRP_LOGIN_1[playerid], -1);
	PlayerTextDrawBackgroundColor( playerid, MCRP_LOGIN_1[playerid], 255);
	PlayerTextDrawBoxColor( playerid, MCRP_LOGIN_1[playerid], -16776961);
	PlayerTextDrawUseBox( playerid, MCRP_LOGIN_1[playerid], 1);
	PlayerTextDrawSetProportional( playerid, MCRP_LOGIN_1[playerid], 1);
	PlayerTextDrawSetSelectable( playerid, MCRP_LOGIN_1[playerid], 0);
	
	MCRP_LOGIN_2[playerid] = CreatePlayerTextDraw( playerid, 24.000000, 108.000000, "Manila Reality");
	PlayerTextDrawFont( playerid, MCRP_LOGIN_2[playerid], 3);
	PlayerTextDrawLetterSize( playerid, MCRP_LOGIN_2[playerid], 0.720833, 4.499999);
	PlayerTextDrawTextSize( playerid, MCRP_LOGIN_2[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline( playerid, MCRP_LOGIN_2[playerid], 1);
	PlayerTextDrawSetShadow( playerid, MCRP_LOGIN_2[playerid], 0);
	PlayerTextDrawAlignment( playerid, MCRP_LOGIN_2[playerid], 1);
	PlayerTextDrawColor( playerid, MCRP_LOGIN_2[playerid], -16776961);
	PlayerTextDrawBackgroundColor( playerid, MCRP_LOGIN_2[playerid], 255);
	PlayerTextDrawBoxColor( playerid, MCRP_LOGIN_2[playerid], 50);
	PlayerTextDrawUseBox( playerid, MCRP_LOGIN_2[playerid], 0);
	PlayerTextDrawSetProportional( playerid, MCRP_LOGIN_2[playerid], 1);
	PlayerTextDrawSetSelectable( playerid, MCRP_LOGIN_2[playerid], 0);
	
	MCRP_LOGIN_3[playerid] = CreatePlayerTextDraw( playerid, 57.000000, 146.000000, "roleplay");
	PlayerTextDrawFont( playerid, MCRP_LOGIN_3[playerid], 0);
	PlayerTextDrawLetterSize( playerid, MCRP_LOGIN_3[playerid], 0.720833, 4.499999);
	PlayerTextDrawTextSize( playerid, MCRP_LOGIN_3[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline( playerid, MCRP_LOGIN_3[playerid], 1);
	PlayerTextDrawSetShadow( playerid, MCRP_LOGIN_3[playerid], 0);
	PlayerTextDrawAlignment( playerid, MCRP_LOGIN_3[playerid], 1);
	PlayerTextDrawColor( playerid, MCRP_LOGIN_3[playerid], -16776961);
	PlayerTextDrawBackgroundColor( playerid, MCRP_LOGIN_3[playerid], 255);
	PlayerTextDrawBoxColor( playerid, MCRP_LOGIN_3[playerid], 50);
	PlayerTextDrawUseBox( playerid, MCRP_LOGIN_3[playerid], 0);
	PlayerTextDrawSetProportional( playerid, MCRP_LOGIN_3[playerid], 1);
	PlayerTextDrawSetSelectable( playerid, MCRP_LOGIN_3[playerid], 0);
	
	MCRP_LOGIN_4[playerid] = CreatePlayerTextDraw( playerid, 112.000000, 181.000000, "");
	PlayerTextDrawFont( playerid, MCRP_LOGIN_4[playerid], 3);
	PlayerTextDrawLetterSize( playerid, MCRP_LOGIN_4[playerid], 0.333333, 1.499999);
	PlayerTextDrawTextSize( playerid, MCRP_LOGIN_4[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline( playerid, MCRP_LOGIN_4[playerid], 1);
	PlayerTextDrawSetShadow( playerid, MCRP_LOGIN_4[playerid], 0);
	PlayerTextDrawAlignment( playerid, MCRP_LOGIN_4[playerid], 1);
	PlayerTextDrawColor( playerid, MCRP_LOGIN_4[playerid], -1);
	PlayerTextDrawBackgroundColor( playerid, MCRP_LOGIN_4[playerid], 255);
	PlayerTextDrawBoxColor( playerid, MCRP_LOGIN_4[playerid], 50);
	PlayerTextDrawUseBox( playerid, MCRP_LOGIN_4[playerid], 0);
	PlayerTextDrawSetProportional( playerid, MCRP_LOGIN_4[playerid], 1);
	PlayerTextDrawSetSelectable( playerid, MCRP_LOGIN_4[playerid], 0);
	
	MCRP_LOGIN_5[playerid] = CreatePlayerTextDraw( playerid, 37.000000, 153.000000, "Preview_Model");
	PlayerTextDrawFont( playerid, MCRP_LOGIN_5[playerid], 5);
	PlayerTextDrawLetterSize( playerid, MCRP_LOGIN_5[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize( playerid, MCRP_LOGIN_5[playerid], 142.500000, 260.000000);
	PlayerTextDrawSetOutline( playerid, MCRP_LOGIN_5[playerid], 0);
	PlayerTextDrawSetShadow( playerid, MCRP_LOGIN_5[playerid], 0);
	PlayerTextDrawAlignment( playerid, MCRP_LOGIN_5[playerid], 1);
	PlayerTextDrawColor( playerid, MCRP_LOGIN_5[playerid], -1);
	PlayerTextDrawBackgroundColor( playerid, MCRP_LOGIN_5[playerid], 0);
	PlayerTextDrawBoxColor( playerid, MCRP_LOGIN_5[playerid], 255);
	PlayerTextDrawUseBox( playerid, MCRP_LOGIN_5[playerid], 0);
	PlayerTextDrawSetProportional( playerid, MCRP_LOGIN_5[playerid], 1);
	PlayerTextDrawSetSelectable( playerid, MCRP_LOGIN_5[playerid], 0);
	PlayerTextDrawSetPreviewModel( playerid, MCRP_LOGIN_5[playerid], 339);
	PlayerTextDrawSetPreviewRot( playerid, MCRP_LOGIN_5[playerid], -28.000000, 60.000000, 0.000000, 3.129993);
	PlayerTextDrawSetPreviewVehCol( playerid, MCRP_LOGIN_5[playerid], 3, 3);
	
	MCRP_LOGIN_6[playerid] = CreatePlayerTextDraw( playerid, -14.000000, 152.000000, "Preview_Model");
	PlayerTextDrawFont( playerid, MCRP_LOGIN_6[playerid], 5);
	PlayerTextDrawLetterSize( playerid, MCRP_LOGIN_6[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize( playerid, MCRP_LOGIN_6[playerid], 142.500000, 260.000000);
	PlayerTextDrawSetOutline( playerid, MCRP_LOGIN_6[playerid], 0);
	PlayerTextDrawSetShadow( playerid, MCRP_LOGIN_6[playerid], 0);
	PlayerTextDrawAlignment( playerid, MCRP_LOGIN_6[playerid], 1);
	PlayerTextDrawColor( playerid, MCRP_LOGIN_6[playerid], -1);
	PlayerTextDrawBackgroundColor( playerid, MCRP_LOGIN_6[playerid], 0);
	PlayerTextDrawBoxColor( playerid, MCRP_LOGIN_6[playerid], 0);
	PlayerTextDrawUseBox( playerid, MCRP_LOGIN_6[playerid], 0);
	PlayerTextDrawSetProportional( playerid, MCRP_LOGIN_6[playerid], 1);
	PlayerTextDrawSetSelectable( playerid, MCRP_LOGIN_6[playerid], 0);
	PlayerTextDrawSetPreviewModel( playerid, MCRP_LOGIN_6[playerid], 339);
	PlayerTextDrawSetPreviewRot( playerid, MCRP_LOGIN_6[playerid], -20.000000, -59.000000, 160.000000, 3.129993);
	PlayerTextDrawSetPreviewVehCol( playerid, MCRP_LOGIN_6[playerid], 3, 3);
	
	
	//intro
	ECRPLOGIN_0[playerid] = CreatePlayerTextDraw(playerid, 328.000000, 2.000000, "_");
	PlayerTextDrawFont(playerid, ECRPLOGIN_0[playerid], 1);
	PlayerTextDrawLetterSize(playerid, ECRPLOGIN_0[playerid], 0.600000, 50.300003);
	PlayerTextDrawTextSize(playerid, ECRPLOGIN_0[playerid], 298.500000, 705.500000);
	PlayerTextDrawSetOutline(playerid, ECRPLOGIN_0[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ECRPLOGIN_0[playerid], 0);
	PlayerTextDrawAlignment(playerid, ECRPLOGIN_0[playerid], 2);
	PlayerTextDrawColor(playerid, ECRPLOGIN_0[playerid], -2016478465);
	PlayerTextDrawBackgroundColor(playerid, ECRPLOGIN_0[playerid], -2016478465);
	PlayerTextDrawBoxColor(playerid, ECRPLOGIN_0[playerid], -1061109505);
	PlayerTextDrawUseBox(playerid, ECRPLOGIN_0[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ECRPLOGIN_0[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ECRPLOGIN_0[playerid], 0);
	
	ECRPLOGIN_1[playerid] = CreatePlayerTextDraw(playerid, 143.000000, 115.000000, "Manila Reality");
	PlayerTextDrawFont(playerid, ECRPLOGIN_1[playerid], 3);
	PlayerTextDrawLetterSize(playerid, ECRPLOGIN_1[playerid], 1.879166, 8.900009);
	PlayerTextDrawTextSize(playerid, ECRPLOGIN_1[playerid], 790.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, ECRPLOGIN_1[playerid], 0);
	PlayerTextDrawSetShadow(playerid, ECRPLOGIN_1[playerid], 4);
	PlayerTextDrawAlignment(playerid, ECRPLOGIN_1[playerid], 1);
	PlayerTextDrawColor(playerid, ECRPLOGIN_1[playerid], -16776961);
	PlayerTextDrawBackgroundColor(playerid, ECRPLOGIN_1[playerid], 255);
	PlayerTextDrawBoxColor(playerid, ECRPLOGIN_1[playerid], 50);
	PlayerTextDrawUseBox(playerid, ECRPLOGIN_1[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ECRPLOGIN_1[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ECRPLOGIN_1[playerid], 0);
	
	ECRPLOGIN_2[playerid] = CreatePlayerTextDraw(playerid, 261.000000, 203.000000, "Roleplay");
	PlayerTextDrawFont(playerid, ECRPLOGIN_2[playerid], 3);
	PlayerTextDrawLetterSize(playerid, ECRPLOGIN_2[playerid], 0.808332, 2.099997);
	PlayerTextDrawTextSize(playerid, ECRPLOGIN_2[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, ECRPLOGIN_2[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ECRPLOGIN_2[playerid], 0);
	PlayerTextDrawAlignment(playerid, ECRPLOGIN_2[playerid], 1);
	PlayerTextDrawColor(playerid, ECRPLOGIN_2[playerid], -16776961);
	PlayerTextDrawBackgroundColor(playerid, ECRPLOGIN_2[playerid], 255);
	PlayerTextDrawBoxColor(playerid, ECRPLOGIN_2[playerid], 50);
	PlayerTextDrawUseBox(playerid, ECRPLOGIN_2[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ECRPLOGIN_2[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ECRPLOGIN_2[playerid], 0);
	
	ECRPLOGIN_3[playerid] = CreatePlayerTextDraw(playerid, 320.000000, 238.000000, "Connecting to the database");
	PlayerTextDrawFont(playerid, ECRPLOGIN_3[playerid], 2);
	PlayerTextDrawLetterSize(playerid, ECRPLOGIN_3[playerid], 0.154164, 1.399999);
	PlayerTextDrawTextSize(playerid, ECRPLOGIN_3[playerid], 455.000000, 437.500000);
	PlayerTextDrawSetOutline(playerid, ECRPLOGIN_3[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ECRPLOGIN_3[playerid], 0);
	PlayerTextDrawAlignment(playerid, ECRPLOGIN_3[playerid], 2);
	PlayerTextDrawColor(playerid, ECRPLOGIN_3[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, ECRPLOGIN_3[playerid], 0);
	PlayerTextDrawBoxColor(playerid, ECRPLOGIN_3[playerid], 50);
	PlayerTextDrawUseBox(playerid, ECRPLOGIN_3[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ECRPLOGIN_3[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ECRPLOGIN_3[playerid], 0);
	
	ECRPLOGIN_4[playerid] = CreatePlayerTextDraw(playerid, 320.000000, 268.000000, "_");
	PlayerTextDrawFont(playerid, ECRPLOGIN_4[playerid], 1);
	PlayerTextDrawLetterSize(playerid, ECRPLOGIN_4[playerid], 0.600000, 5.699985);
	PlayerTextDrawTextSize(playerid, ECRPLOGIN_4[playerid], 298.500000, 109.000000);
	PlayerTextDrawSetOutline(playerid, ECRPLOGIN_4[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ECRPLOGIN_4[playerid], 0);
	PlayerTextDrawAlignment(playerid, ECRPLOGIN_4[playerid], 2);
	PlayerTextDrawColor(playerid, ECRPLOGIN_4[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, ECRPLOGIN_4[playerid], 255);
	PlayerTextDrawBoxColor(playerid, ECRPLOGIN_4[playerid], -1);
	PlayerTextDrawUseBox(playerid, ECRPLOGIN_4[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ECRPLOGIN_4[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ECRPLOGIN_4[playerid], 0);
	
	ECRPLOGIN_5[playerid] = CreatePlayerTextDraw(playerid, 320.000000, 266.000000, "_");
	PlayerTextDrawFont(playerid, ECRPLOGIN_5[playerid], 1);
	PlayerTextDrawLetterSize(playerid, ECRPLOGIN_5[playerid], 0.600000, 6.099986);
	PlayerTextDrawTextSize(playerid, ECRPLOGIN_5[playerid], 298.500000, 111.500000);
	PlayerTextDrawSetOutline(playerid, ECRPLOGIN_5[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ECRPLOGIN_5[playerid], 0);
	PlayerTextDrawAlignment(playerid, ECRPLOGIN_5[playerid], 2);
	PlayerTextDrawColor(playerid, ECRPLOGIN_5[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, ECRPLOGIN_5[playerid], 255);
	PlayerTextDrawBoxColor(playerid, ECRPLOGIN_5[playerid], 255);
	PlayerTextDrawUseBox(playerid, ECRPLOGIN_5[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ECRPLOGIN_5[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ECRPLOGIN_5[playerid], 0);
	
	ECRPLOGIN_6[playerid] = CreatePlayerTextDraw(playerid, 320.000000, 268.000000, "_");
	PlayerTextDrawFont(playerid, ECRPLOGIN_6[playerid], 1);
	PlayerTextDrawLetterSize(playerid, ECRPLOGIN_6[playerid], 0.600000, 5.699985);
	PlayerTextDrawTextSize(playerid, ECRPLOGIN_6[playerid], 298.500000, 109.000000);
	PlayerTextDrawSetOutline(playerid, ECRPLOGIN_6[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ECRPLOGIN_6[playerid], 0);
	PlayerTextDrawAlignment(playerid, ECRPLOGIN_6[playerid], 2);
	PlayerTextDrawColor(playerid, ECRPLOGIN_6[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, ECRPLOGIN_6[playerid], 255);
	PlayerTextDrawBoxColor(playerid, ECRPLOGIN_6[playerid], -1);
	PlayerTextDrawUseBox(playerid, ECRPLOGIN_6[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ECRPLOGIN_6[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ECRPLOGIN_6[playerid], 0);
	
	ECRPLOGIN_7[playerid] = CreatePlayerTextDraw(playerid, 386.000000, 195.000000, "");
	PlayerTextDrawFont(playerid, ECRPLOGIN_7[playerid], 2);
	PlayerTextDrawLetterSize(playerid, ECRPLOGIN_7[playerid], 0.537495, 3.299993);
	PlayerTextDrawTextSize(playerid, ECRPLOGIN_7[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, ECRPLOGIN_7[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ECRPLOGIN_7[playerid], 0);
	PlayerTextDrawAlignment(playerid, ECRPLOGIN_7[playerid], 1);
	PlayerTextDrawColor(playerid, ECRPLOGIN_7[playerid], -4800001);
	PlayerTextDrawBackgroundColor(playerid, ECRPLOGIN_7[playerid], 255);
	PlayerTextDrawBoxColor(playerid, ECRPLOGIN_7[playerid], 50);
	PlayerTextDrawUseBox(playerid, ECRPLOGIN_7[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ECRPLOGIN_7[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ECRPLOGIN_7[playerid], 0);
	
	ECRPLOGIN_8[playerid] = CreatePlayerTextDraw(playerid, 270.000000, 297.000000, "Traumatizing for some players");
	PlayerTextDrawFont(playerid, ECRPLOGIN_8[playerid], 2);
	PlayerTextDrawLetterSize(playerid, ECRPLOGIN_8[playerid], 0.133332, 0.949999);
	PlayerTextDrawTextSize(playerid, ECRPLOGIN_8[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, ECRPLOGIN_8[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ECRPLOGIN_8[playerid], 0);
	PlayerTextDrawAlignment(playerid, ECRPLOGIN_8[playerid], 1);
	PlayerTextDrawColor(playerid, ECRPLOGIN_8[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, ECRPLOGIN_8[playerid], 0);
	PlayerTextDrawBoxColor(playerid, ECRPLOGIN_8[playerid], 50);
	PlayerTextDrawUseBox(playerid, ECRPLOGIN_8[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ECRPLOGIN_8[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ECRPLOGIN_8[playerid], 0);
	
	ECRPLOGIN_9[playerid] = CreatePlayerTextDraw(playerid, 268.000000, 285.000000, "material that may be harmful or");
	PlayerTextDrawFont(playerid, ECRPLOGIN_9[playerid], 2);
	PlayerTextDrawLetterSize(playerid, ECRPLOGIN_9[playerid], 0.133332, 0.949999);
	PlayerTextDrawTextSize(playerid, ECRPLOGIN_9[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, ECRPLOGIN_9[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ECRPLOGIN_9[playerid], 0);
	PlayerTextDrawAlignment(playerid, ECRPLOGIN_9[playerid], 1);
	PlayerTextDrawColor(playerid, ECRPLOGIN_9[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, ECRPLOGIN_9[playerid], 0);
	PlayerTextDrawBoxColor(playerid, ECRPLOGIN_9[playerid], 50);
	PlayerTextDrawUseBox(playerid, ECRPLOGIN_9[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ECRPLOGIN_9[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ECRPLOGIN_9[playerid], 0);
	
	ECRPLOGIN_10[playerid] = CreatePlayerTextDraw(playerid, 266.000000, 272.000000, "The following scene may contain");
	PlayerTextDrawFont(playerid, ECRPLOGIN_10[playerid], 2);
	PlayerTextDrawLetterSize(playerid, ECRPLOGIN_10[playerid], 0.137500, 0.949999);
	PlayerTextDrawTextSize(playerid, ECRPLOGIN_10[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, ECRPLOGIN_10[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ECRPLOGIN_10[playerid], 0);
	PlayerTextDrawAlignment(playerid, ECRPLOGIN_10[playerid], 1);
	PlayerTextDrawColor(playerid, ECRPLOGIN_10[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, ECRPLOGIN_10[playerid], 0);
	PlayerTextDrawBoxColor(playerid, ECRPLOGIN_10[playerid], 50);
	PlayerTextDrawUseBox(playerid, ECRPLOGIN_10[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ECRPLOGIN_10[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ECRPLOGIN_10[playerid], 0);
	
	ECRPLOGIN_11[playerid] = CreatePlayerTextDraw(playerid, 353.000000, 308.000000, "-mgmt");
	PlayerTextDrawFont(playerid, ECRPLOGIN_11[playerid], 2);
	PlayerTextDrawLetterSize(playerid, ECRPLOGIN_11[playerid], 0.137500, 0.949999);
	PlayerTextDrawTextSize(playerid, ECRPLOGIN_11[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, ECRPLOGIN_11[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ECRPLOGIN_11[playerid], 0);
	PlayerTextDrawAlignment(playerid, ECRPLOGIN_11[playerid], 1);
	PlayerTextDrawColor(playerid, ECRPLOGIN_11[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, ECRPLOGIN_11[playerid], 0);
	PlayerTextDrawBoxColor(playerid, ECRPLOGIN_11[playerid], 50);
	PlayerTextDrawUseBox(playerid, ECRPLOGIN_11[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ECRPLOGIN_11[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ECRPLOGIN_11[playerid], 0);
	
	ECRPLOGIN_12[playerid] = CreatePlayerTextDraw(playerid, 320.000000, 238.000000, "Checking your account");
	PlayerTextDrawFont(playerid, ECRPLOGIN_12[playerid], 2);
	PlayerTextDrawLetterSize(playerid, ECRPLOGIN_12[playerid], 0.154164, 1.399999);
	PlayerTextDrawTextSize(playerid, ECRPLOGIN_12[playerid], 455.000000, 437.500000);
	PlayerTextDrawSetOutline(playerid, ECRPLOGIN_12[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ECRPLOGIN_12[playerid], 0);
	PlayerTextDrawAlignment(playerid, ECRPLOGIN_12[playerid], 2);
	PlayerTextDrawColor(playerid, ECRPLOGIN_12[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, ECRPLOGIN_12[playerid], 0);
	PlayerTextDrawBoxColor(playerid, ECRPLOGIN_12[playerid], 50);
	PlayerTextDrawUseBox(playerid, ECRPLOGIN_12[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ECRPLOGIN_12[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ECRPLOGIN_12[playerid], 0);
	
	ECRPLOGIN_13[playerid] = CreatePlayerTextDraw(playerid, 320.000000, 238.000000, "Connecting to the server");
	PlayerTextDrawFont(playerid, ECRPLOGIN_13[playerid], 2);
	PlayerTextDrawLetterSize(playerid, ECRPLOGIN_13[playerid], 0.154164, 1.399999);
	PlayerTextDrawTextSize(playerid, ECRPLOGIN_13[playerid], 455.000000, 437.500000);
	PlayerTextDrawSetOutline(playerid, ECRPLOGIN_13[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ECRPLOGIN_13[playerid], 0);
	PlayerTextDrawAlignment(playerid, ECRPLOGIN_13[playerid], 2);
	PlayerTextDrawColor(playerid, ECRPLOGIN_13[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, ECRPLOGIN_13[playerid], 0);
	PlayerTextDrawBoxColor(playerid, ECRPLOGIN_13[playerid], 50);
	PlayerTextDrawUseBox(playerid, ECRPLOGIN_13[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ECRPLOGIN_13[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ECRPLOGIN_13[playerid], 0);
	
	ECRPLOGIN_14[playerid] = CreatePlayerTextDraw(playerid, 320.000000, 238.000000, "Connected to the server");
	PlayerTextDrawFont(playerid, ECRPLOGIN_14[playerid], 2);
	PlayerTextDrawLetterSize(playerid, ECRPLOGIN_14[playerid], 0.154164, 1.399999);
	PlayerTextDrawTextSize(playerid, ECRPLOGIN_14[playerid], 455.000000, 437.500000);
	PlayerTextDrawSetOutline(playerid, ECRPLOGIN_14[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ECRPLOGIN_14[playerid], 0);
	PlayerTextDrawAlignment(playerid, ECRPLOGIN_14[playerid], 2);
	PlayerTextDrawColor(playerid, ECRPLOGIN_14[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, ECRPLOGIN_14[playerid], 0);
	PlayerTextDrawBoxColor(playerid, ECRPLOGIN_14[playerid], 50);
	PlayerTextDrawUseBox(playerid, ECRPLOGIN_14[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ECRPLOGIN_14[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ECRPLOGIN_14[playerid], 0);
		
	// GPS
	pData[playerid][pText][0] = CreatePlayerTextDraw(playerid, 170.000000, 403.000000, "Los Santos");
	PlayerTextDrawFont(playerid, pData[playerid][pText][0], 2);
	PlayerTextDrawLetterSize(playerid, pData[playerid][pText][0], 0.254164, 1.599997);
	PlayerTextDrawTextSize(playerid, pData[playerid][pText][0], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, pData[playerid][pText][0], 1);
	PlayerTextDrawSetShadow(playerid, pData[playerid][pText][0], 0);
	PlayerTextDrawAlignment(playerid, pData[playerid][pText][0], 1);
	PlayerTextDrawColor(playerid, pData[playerid][pText][0], -1);
	PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][0], 255);
	PlayerTextDrawBoxColor(playerid, pData[playerid][pText][0], 50);
	PlayerTextDrawUseBox(playerid, pData[playerid][pText][0], 0);
	PlayerTextDrawSetProportional(playerid, pData[playerid][pText][0], 1);
	PlayerTextDrawSetSelectable(playerid, pData[playerid][pText][0], 0);

	pData[playerid][pText][1] = CreatePlayerTextDraw(playerid, 138.000000, 403.000000, "S");
	PlayerTextDrawFont(playerid, pData[playerid][pText][1], 2);
	PlayerTextDrawLetterSize(playerid, pData[playerid][pText][1], 0.254164, 1.599997);
	PlayerTextDrawTextSize(playerid, pData[playerid][pText][1], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, pData[playerid][pText][1], 1);
	PlayerTextDrawSetShadow(playerid, pData[playerid][pText][1], 0);
	PlayerTextDrawAlignment(playerid, pData[playerid][pText][1], 1);
	PlayerTextDrawColor(playerid, pData[playerid][pText][1], -1);
	PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][1], 255);
	PlayerTextDrawBoxColor(playerid, pData[playerid][pText][1], 50);
	PlayerTextDrawUseBox(playerid, pData[playerid][pText][1], 0);
	PlayerTextDrawSetProportional(playerid, pData[playerid][pText][1], 1);
	PlayerTextDrawSetSelectable(playerid, pData[playerid][pText][1], 0);

    pData[playerid][pText][6] = CreatePlayerTextDraw(playerid, 162.000000, 403.000000, "I");
    PlayerTextDrawFont(playerid, pData[playerid][pText][6], 2);
    PlayerTextDrawLetterSize(playerid, pData[playerid][pText][6], 0.254164, 1.599997);
    PlayerTextDrawTextSize(playerid, pData[playerid][pText][6], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, pData[playerid][pText][6], 1);
    PlayerTextDrawSetShadow(playerid, pData[playerid][pText][6], 0);
    PlayerTextDrawAlignment(playerid, pData[playerid][pText][6], 1);
    PlayerTextDrawColor(playerid, pData[playerid][pText][6], -1	);
    PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][6], 255);
    PlayerTextDrawBoxColor(playerid, pData[playerid][pText][6], 50);
    PlayerTextDrawUseBox(playerid, pData[playerid][pText][6], 0);
    PlayerTextDrawSetProportional(playerid, pData[playerid][pText][6], 1);
    PlayerTextDrawSetSelectable(playerid, pData[playerid][pText][6], 0);

    /*pData[playerid][pText][7] = CreatePlayerTextDraw(playerid, 146.000000, 423.000000, "I");
    PlayerTextDrawFont(playerid, pData[playerid][pText][7], 2);
    PlayerTextDrawLetterSize(playerid, pData[playerid][pText][7], 0.287499, 2.649996);
    PlayerTextDrawTextSize(playerid, pData[playerid][pText][7], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, pData[playerid][pText][7], 1);
    PlayerTextDrawSetShadow(playerid, pData[playerid][pText][7], 0);
    PlayerTextDrawAlignment(playerid, pData[playerid][pText][7], 2);
    PlayerTextDrawColor(playerid, pData[playerid][pText][7], -16776961);
    PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][7], 100);
    PlayerTextDrawBoxColor(playerid, pData[playerid][pText][7], 50);
    PlayerTextDrawUseBox(playerid, pData[playerid][pText][7], 0);
    PlayerTextDrawSetProportional(playerid, pData[playerid][pText][7], 1);
    PlayerTextDrawSetSelectable(playerid, pData[playerid][pText][7], 0);*/
	// End

	// HP & armor
	pData[playerid][pText][3] = CreatePlayerTextDraw(playerid, 577.000000, 43.500000, "100");
	PlayerTextDrawAlignment(playerid, pData[playerid][pText][3], 2);
	PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][3], 255);
	PlayerTextDrawFont(playerid, pData[playerid][pText][3], 2);
	PlayerTextDrawLetterSize(playerid, pData[playerid][pText][3], 0.220000, 1.100000);
	PlayerTextDrawColor(playerid, pData[playerid][pText][3], -1);
	PlayerTextDrawSetOutline(playerid, pData[playerid][pText][3], 1);
	PlayerTextDrawSetProportional(playerid, pData[playerid][pText][3], 1);

	pData[playerid][pText][4] = CreatePlayerTextDraw(playerid, 577.000000, 65.500000, "100");
	PlayerTextDrawAlignment(playerid, pData[playerid][pText][4], 2);
	PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][4], 255);
	PlayerTextDrawFont(playerid, pData[playerid][pText][4], 2);
	PlayerTextDrawLetterSize(playerid, pData[playerid][pText][4], 0.220000, 1.100000);
	PlayerTextDrawColor(playerid, pData[playerid][pText][4], -1);
	PlayerTextDrawSetOutline(playerid, pData[playerid][pText][4], 1);
	PlayerTextDrawSetProportional(playerid, pData[playerid][pText][4], 1);

	// Ammo notification
	pData[playerid][pText][5] = CreatePlayerTextDraw(playerid, 521.000000, 63.000000, "30");
	PlayerTextDrawAlignment(playerid, pData[playerid][pText][5], 2);
	PlayerTextDrawBackgroundColor(playerid, pData[playerid][pText][5], 255);
	PlayerTextDrawFont(playerid, pData[playerid][pText][5], 1);
	PlayerTextDrawLetterSize(playerid, pData[playerid][pText][5], 0.270000, 1.300000);
	PlayerTextDrawColor(playerid, pData[playerid][pText][5], -1446714113);
	PlayerTextDrawSetOutline(playerid, pData[playerid][pText][5], 1);
	PlayerTextDrawSetProportional(playerid, pData[playerid][pText][5], 1);
	Streamer_ToggleIdleUpdate(playerid, true);

	GetPlayerName(playerid, pData[playerid][pUsername], MAX_PLAYER_NAME);



	PlayerLabel[playerid] = CreateDynamic3DTextLabel("", -1, 0.0, 0.0, -1.5, 10, .attachedplayer = playerid, .testlos = 1);
	InjuredLabel[playerid] = CreateDynamic3DTextLabel("", COLOR_DOCTOR, 0.0, 0.0, -0.3, 10, .attachedplayer = playerid, .testlos = 1);


	
	
	// Join and Leave
	//new string[528];

	//format(string, sizeof(string), "SECURITY[BOT]{FFFFFF}%s has joined the server [{33AA33}IP:{ff0000} %s] using {33AA33}%s ", ReturnName(playerid), GetPlayerIP(playerid), IsPlayerAndroid(playerid) ? ("Mobile") : ("Desktop"));
	//SendAdminMessage(COLOR_TEAL, string, 2);
	gConnections++;
    SaveServerInfo();
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{

	new szString[128];
	format(szString, sizeof(szString), "[%d] %s has left the server [IP: %s]",playerid ,GetRPName(playerid), GetPlayerIP(playerid));
	SendDiscordMessage(25, szString);
	if (lstream[playerid]) 
	{
		SvDeleteStream(lstream[playerid]);
		lstream[playerid] = SV_NULL;
	}
	if(pData[playerid][pTutorial])
	{
	    KillTimer(pData[playerid][pTutorialTimer]);
	}
	if(enabledpurge == 1)
	{
		RemovePlayerWeapon(playerid, 5);
		RemovePlayerWeapon(playerid, 22);
		RemovePlayerWeapon(playerid, 30);
	}	
	if(Maskara[playerid] == 1)
	{
		Maskara[playerid] = 0;
		pData[playerid][pMask] = 1;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mask = 1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	if(SabongInfo[sExist] && (SabongInfo[sPlayerRed] == playerid || SabongInfo[sPlayerBlue] == playerid))
	{
		foreach(new i : Player)
		{
			GivePlayerCash(i, pData[i][pSabongBet]);
		}
		onSabongDone();
	}
	// Graffity System
	Graffity_OnPlayerDisconnect(playerid);
	Lumber1[playerid] = 0;
	lumberman{playerid} = false;
	Lumbered[playerid] = 0;
	Lumberedx[playerid] = 0;	
	PlayerHasCrate[playerid] = 0;
	
	TerminateInfo(playerid, reason);
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    if(pData[playerid][pKicked]) return 0;
    if(IsPlayerNPC(playerid)) return 1;

	if(!pData[playerid][pLogged])
	{
	    ClearChat(playerid);
    	for(new i = 0; i < 5; i ++)
		{
		    SCM(playerid, -1, " ");
		}
		//PlayerTextDrawShow(playerid, ECRPLOGIN_0[playerid]);
		//PlayerTextDrawShow(playerid, ECRPLOGIN_1[playerid]);
		//PlayerTextDrawShow(playerid, ECRPLOGIN_2[playerid]);
		//PlayerTextDrawShow(playerid, ECRPLOGIN_3[playerid]);
		//PlayerTextDrawShow(playerid, ECRPLOGIN_4[playerid]);
		//PlayerTextDrawShow(playerid, ECRPLOGIN_5[playerid]);
		//PlayerTextDrawShow(playerid, ECRPLOGIN_6[playerid]);
		//PlayerTextDrawShow(playerid, ECRPLOGIN_7[playerid]);
		//PlayerTextDrawShow(playerid, ECRPLOGIN_8[playerid]);
		//PlayerTextDrawShow(playerid, ECRPLOGIN_9[playerid]);
		//PlayerTextDrawShow(playerid, ECRPLOGIN_10[playerid]);
		//PlayerTextDrawShow(playerid, ECRPLOGIN_11[playerid]);
		//SetTimerEx("Login1time", 1400, false, "i", playerid);
			
		SetTimerEx("Login5time", 500, false, "i", playerid);
		TogglePlayerSpectating(playerid, 1);
		SetPlayerColor(playerid, 0xFFFFFF00);
		
		
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin FROM users WHERE ip = '%s' ORDER BY lastlogin DESC", GetPlayerIP(playerid));
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_TRACE_IPX, playerid);

		new szString[528];
		format(szString, sizeof(szString), "%s joined using: %s [ip] %s", GetRPName(playerid), IsPlayerAndroid(playerid) ? ("Mobile") : ("PC"), GetPlayerIP(playerid));
		SendDiscordMessage(25, szString);
		

	}

	return 1;
}
public OnPlayerSpawn(playerid)
{
    if(pData[playerid][pKicked]) return 0;
	PreloadAnims(playerid);
	//dito
	PlayerTextDrawHide(playerid, MCRP_LOGIN_0[playerid]);
	PlayerTextDrawHide(playerid, MCRP_LOGIN_1[playerid]);
	PlayerTextDrawHide(playerid, MCRP_LOGIN_2[playerid]);
	PlayerTextDrawHide(playerid, MCRP_LOGIN_3[playerid]);
	PlayerTextDrawHide(playerid, MCRP_LOGIN_4[playerid]);
	PlayerTextDrawHide(playerid, MCRP_LOGIN_5[playerid]);
	PlayerTextDrawHide(playerid, MCRP_LOGIN_6[playerid]);

	SetTimerEx("pressunfreeze", 4000, false, "i", playerid);	
	// HERE ADD CODE FOR ANTI KULONG 
	
	StopAudioStreamForPlayer(playerid);
	if(pData[playerid][pSetup])
	{
	    if(pData[playerid][pTutorial])
		{
	    	KillTimer(pData[playerid][pTutorialTimer]);
	    	pData[playerid][pTutorial] = 0;
		}
		StopAudioStreamForPlayer(playerid);

		SendClientMessage(playerid, COLOR_WHITE, "** Your account has been registered. Before you can play on our server, you must setup your character.");
		SendClientMessage(playerid, COLOR_WHITE, "** After character setup you'll watch a quick tutorial. Please choose your character's gender now:");
	}
	else if(pData[playerid][pPaintball] > 0)
	{
	    SetPlayerInPaintball(playerid, pData[playerid][pPaintball]);
	}
    else if(pData[playerid][pJailType] == 3)
    {
        new index = random(sizeof(cellSpawns));
		TeleportToCoords(playerid, cellSpawns[index][0], cellSpawns[index][1], cellSpawns[index][2],cellSpawns[index][3], 2,5);
		SetCameraBehindPlayer(playerid);
		SetPlayerArmedWeapon(playerid, 0);
		TogglePlayerControllable(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
	}
	else if(pData[playerid][pJailTime] > 0)
	{
	    SetPlayerInJail(playerid);
	    if(pData[playerid][pJailType] == 2)
	    {
	        SM(playerid, COLOR_LIGHTRED, "** You were placed in admin prison by %s, reason: %s", pData[playerid][pPrisonedBy], pData[playerid][pPrisonReason]);
		}
		else
		{
			SCM(playerid, COLOR_LIGHTRED, "** You haven't completed your jail sentence yet.");
		}
	}
	else
	{
	    pData[playerid][pJoinedEvent] = 0;

	    if(pData[playerid][pInjured])
	    {
	        SetPlayerHealth(playerid, 100.0);
	        SetPlayerArmour(playerid, 0.0);
            ApplyAnimation(playerid, "SWEET", "gnstwall_injurd", 4.1, 0, 0, 0, 1, 0, 1);

	        TextDrawShowForPlayer(playerid, Text:DieText);
	        TextDrawShowForPlayer(playerid, Text:InjuredText);
	        
	        SCM(playerid, COLOR_DOCTOR, "You are wounded and losing blood. /phone for medical attention.");
	        SCM(playerid, COLOR_DOCTOR, "If you wish to accept your death and go to hospital use /accept death.");

			new string[128];
			format(string, sizeof(string), "(( Has been injured ))");
			UpdateDynamic3DTextLabelText(InjuredLabel[playerid], COLOR_DOCTOR, string);

			TogglePlayerControllable(playerid, 0);
			SetTimerEx("UnfreezePlayerEx", 5000, false, "i", playerid);

            Maskara[playerid] = 0;
	        pData[playerid][pDeathCooldown] = 80;
	    }
	    else if(pData[playerid][pHospital])
	    {
	        if(pData[playerid][pInsurance] == 0)
     	   		SetPlayerInHospital(playerid);
	        else
				SetPlayerInHospital(playerid);

			ResetPlayerWeaponsEx(playerid);
	    }
	    else
		{
		    SetPlayerHealth(playerid, pData[playerid][pHealth]);
		    SetScriptArmour(playerid, pData[playerid][pArmor]);
		}

		if(!pData[playerid][pHospital])
		{
		    if(pData[playerid][pDueling] != INVALID_PLAYER_ID)
			{
				pData[pData[playerid][pDueling]][pDueling] = INVALID_PLAYER_ID;
				pData[playerid][pDueling] = INVALID_PLAYER_ID;
			}		    
			if(pData[playerid][pDueling1] != INVALID_PLAYER_ID)
			{
				pData[pData[playerid][pDueling1]][pDueling1] = INVALID_PLAYER_ID;
				pData[playerid][pDueling1] = INVALID_PLAYER_ID;
			}

			SetPlayerPos(playerid, pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ]);
			SetPlayerFacingAngle(playerid, pData[playerid][pPosA]);
			SetPlayerInterior(playerid, pData[playerid][pInterior]);
	 		SetPlayerVirtualWorld(playerid, pData[playerid][pWorld]);
			SetPlayerWeapons(playerid);
		}
	}
	SetPlayerSkin(playerid, pData[playerid][pSkin]);
	SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
 	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 0);
	SetPlayerClothing(playerid);
	
	new string[32];
	format(string, sizeof(string), "PLAYER ID: ~b~%d", playerid);
	PlayerTextDrawSetString(playerid, paypalTD[playerid], string);
	PlayerTextDrawShow(playerid, paypalTD[playerid]);
	
	if(pData[playerid][pFirstSpawn]) {
		ClearChat(playerid);

		if(!isnull(gServerMOTD))
    	{
    		SCMf(playerid, COLOR_YELLOW, "%s", gServerMOTD);
    	}
		// Scripted
		//NEED DITO
	    SetCameraBehindPlayer(playerid);
	    StopAudioStreamForPlayer(playerid);	
		SetPlayerFacingAngle(playerid, 269.6579);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
	
		pData[playerid][pFirstSpawn] = 0;
	
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET firstspawn = 0 WHERE uid = %d", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	
    PlayerTextDrawShow(playerid, customHUD[playerid][1]);


	for(new i = 0; i < 3; i++) {
		TextDrawShowForPlayer(playerid, LogoTD[i]);
	}
	PlayerTextDrawShow(playerid, HungerTD0[playerid]);
	PlayerTextDrawShow(playerid, HungerTD1[playerid]);
	PlayerTextDrawShow(playerid, HungerTD2[playerid]);
	PlayerTextDrawShow(playerid, HungerTD3[playerid]);
	PlayerTextDrawShow(playerid, HungerTD4[playerid]);
	PlayerTextDrawShow(playerid, HungerTD5[playerid]);
	PlayerTextDrawShow(playerid, HungerTD6[playerid]);
	PlayerTextDrawShow(playerid, HungerTD7[playerid]);
	PlayerTextDrawShow(playerid, HungerTD8[playerid]);
	PlayerTextDrawShow(playerid, HungerTD9[playerid]);
	PlayerTextDrawShow(playerid, HungerTD10[playerid]);
	PlayerTextDrawShow(playerid, HungerTD11[playerid]);
    TextDrawShowForPlayer(playerid, Textdraw2);
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(gettime() - pData[playerid][pLastDeath] < 2)
	{
	    return 1;
	}
	if(pData[playerid][pLogged])
	{
		if(pData[playerid][pJoinedEvent])
		{
		    foreach(new i : Player)
			{
			    if(pData[i][pJoinedEvent])
			    {
			        if(killerid == INVALID_PLAYER_ID)
			            SM(i, COLOR_LIGHTORANGE, "(( %s died. ))", GetRPName(playerid));
			        else
						SM(i, COLOR_LIGHTORANGE, "(( %s was killed by %s. ))", GetRPName(playerid), GetRPName(killerid));
				}
			}
		}
 		else if(pData[playerid][pPaintball])
		{
		    pbscore1[playerid] -= 5;
		    if(killerid != INVALID_PLAYER_ID && killerid != playerid) pbscore1[killerid] += 5;
		    foreach(new i : Player)
			{
			    if(pData[i][pPaintball])
			    {
			        if(killerid == INVALID_PLAYER_ID)
			            SM(i, COLOR_LIGHTORANGE, "(( %s died. ))", GetRPName(playerid));
			        else
						SM(i, COLOR_LIGHTORANGE, "(( %s was killed by %s. ))", GetRPName(playerid), GetRPName(killerid));
				}
			}
		}
		else if(pData[playerid][pDueling] != INVALID_PLAYER_ID)
		{
			SM(playerid, COLOR_LIGHTORANGE, "(( You lost your duel against %s! ))", GetRPName(pData[playerid][pDueling]));

			if(killerid != INVALID_PLAYER_ID)
		    {
				SM(killerid, COLOR_LIGHTORANGE, "(( You won the duel against %s! ))", GetRPName(playerid));
				SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has won their duel against %s.", GetRPName(killerid), GetRPName(playerid));
				SetPlayerToSpawn(killerid);
				SetPlayerToSpawn(playerid);
			}
		}
		else if(pData[playerid][pDueling1] != INVALID_PLAYER_ID)
		{
			SM(playerid, COLOR_LIGHTORANGE, "(( You lost your fight against %s! ))", GetRPName(pData[playerid][pDueling1]));

			if(killerid != INVALID_PLAYER_ID)
		    {
				SM(killerid, COLOR_LIGHTORANGE, "(( You won the fight against %s! ))", GetRPName(playerid));
				GivePlayerCash(killerid, 15000);
				SMA(COLOR_TEAL, "AdmCmd:"WHITE" %s has won their fight against %s.", GetRPName(killerid), GetRPName(playerid));
				SetPlayerToSpawn(killerid);
				SetPlayerToSpawn(playerid);
			}
		}
		else if(SabongInfo[sExist] && (SabongInfo[sPlayerRed] == playerid || SabongInfo[sPlayerBlue] == playerid))
		{
			new playerwin;
			if(killerid == SabongInfo[sPlayerRed])
			{
				foreach(new i : Player)
				{
					if(SabongInfo[sBetRed][i]) {
						new bet = pData[i][pSabongBet] * 2;
						bet = percent(bet, 70);
						GivePlayerCash(i, bet);
						SendMessage(i, COLOR_WHITE, "Sabong: Meron win and you got $%s", AddCommas(bet));
					}
					else {
						SendMessage(i, COLOR_REALRED, "Sabong: You just lost $%s.", AddCommas(pData[i][pSabongBet]));
					}
				}
				playerwin = percent(SabongInfo[sRed], 10);
				GivePlayerCash(SabongInfo[sPlayerRed], playerwin);

				SendMessage(SabongInfo[sPlayerRed], COLOR_WHITE, "You won 10 percent of %s. Total: %s", AddCommas(SabongInfo[sRed]), AddCommas(playerwin));

				SendMessage(SabongInfo[sPlayerRed], COLOR_WHITE, "You just won $%s", AddCommas(playerwin));
				SendMessageToAll(COLOR_WHITE, "Boxing Event: "RED"%s"WHITE" has won his fight against "BLUE"%s"WHITE".", GetRPName(SabongInfo[sPlayerRed]), GetRPName(SabongInfo[sPlayerBlue]));   
		
			}
			else if(killerid == SabongInfo[sPlayerBlue])
			{
				foreach(new i : Player)
				{
					if(SabongInfo[sBetBlue][i]) {
						new bet = pData[i][pSabongBet] * 2;
						bet = percent(bet, 70);
						GivePlayerCash(i, bet);
						SendMessage(i, COLOR_WHITE, "Sabong: Wala win and you got "GREEN"$%s", AddCommas(bet));
					}
					else {
						SendMessage(i, COLOR_WHITE, "Sabong: You just lost "RED"$%s.", AddCommas(pData[i][pSabongBet]));
					}
				}
				playerwin = percent(SabongInfo[sBlue], 10);
				GivePlayerCash(SabongInfo[sPlayerBlue], playerwin);
				SendMessage(SabongInfo[sPlayerBlue], COLOR_WHITE, "You won 10 percent of $%s. Total: $%s", AddCommas(SabongInfo[sBlue]), AddCommas(playerwin));

				SendMessage(SabongInfo[sPlayerBlue], COLOR_WHITE, "You just won $%s", AddCommas(playerwin));
				SendMessageToAll(COLOR_WHITE, "Boxing Event: "BLUE"%s"WHITE" has won his fight against "RED"%s"WHITE".", GetRPName(SabongInfo[sPlayerBlue]), GetRPName(SabongInfo[sPlayerRed]));

			}
		
			else
			{
				foreach(new i : Player)
				{
					SendMessage(i, COLOR_LIGHTORANGE, "(( %s died. ))", GetRPName(playerid));
					GivePlayerCash(i, pData[i][pSabongBet]);
				}
			}
			onSabongDone();

		}
		else
		{
		    if(killerid != INVALID_PLAYER_ID)
			{
			    HandleContract(playerid, killerid);
			}
		    if(!pData[playerid][pAdminDuty] && pData[playerid][pJailType] == 0)
		    {
				
				TextDrawShowForPlayer(killerid, DOWNTD);
				SetTimerEx("Downhide", 400, false, "i", killerid);
				
				TextDrawShowForPlayer(playerid, Tagastd1);
				TextDrawShowForPlayer(playerid, Tagastd2);
				SetTimerEx("Downhide1", 8000, false, "i", playerid);
	
			    if(pData[playerid][pInjured] == 0)
				{
				    ResetPlayer(playerid);
				    pData[playerid][pInjured] = 1;
					
					for(new i; i < MAX_TURFS; i++)
					{
						if(TurfInfo[i][tExists])
						{
							if(TurfInfo[i][tCapturer] != INVALID_PLAYER_ID)
							{
								if(TurfInfo[i][tCaptureTime] > 0 && GetNearbyTurf(playerid) >= 0)
								{
									pData[playerid][pBrokenHP] = 1;
								}
							}
						}	
					}		
					foreach(new i : Player)
					{
					    if(GetFactionType(i) == FACTION_MEDIC)
					    {
					    	SM(i, COLOR_DISPATCH, "Beacon %s (%i) is in need of immediate medical assistance.", GetRPName(playerid), playerid);
						}
					}
				}
				else
				{

					pData[playerid][pInjured] = 0;
					pData[playerid][pHospital] = 1;
					if(pData[playerid][pAcceptedEMS] != INVALID_PLAYER_ID)
					{
						SM(pData[playerid][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has bled out.", GetRPName(playerid));
                        pData[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
					}
				}
			}
			else
			{
			    pData[playerid][pHealth] = 32767.0;
			}

			if(killerid != INVALID_PLAYER_ID)
			{
			
				if(enabledpurge == 1)
				{
					new amount = 2500;
					GivePlayerCash(playerid, -2000);
					GivePlayerCash(killerid, amount);
				}
				new szzString[128];
				format(szzString, sizeof(szzString), "%s killed %s using %s", GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), GetDeathReason(reason));
				SendDiscordMessage(14, szzString);
				
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO kills VALUES(null, %i, %i, '%s', '%s', '%s', NOW())", pData[killerid][pID], pData[playerid][pID], GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), GetDeathReason(reason));
			    mysql_tquery(connectionID, queryBuffer);
			}

			GetPlayerPos(playerid, pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ]);
	        GetPlayerFacingAngle(playerid, pData[playerid][pPosA]);

	        pData[playerid][pInterior] = GetPlayerInterior(playerid);
	        pData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		}
	}

	if(pData[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
	    HangupCall(pData[playerid][pCallLine], HANGUP_DROPPED);
	}

	if(reason == 50 && killerid != INVALID_PLAYER_ID)
	{
	    SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] was helibladed by %s[%i].", GetRPName(playerid), playerid, GetRPName(killerid), killerid);
	}
	//HERE GZ
	if(IsPlayerInDynamicArea(playerid, hparea))
	{
		pData[killerid][pSkin] = 50;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = 50 WHERE uid = %i", pData[killerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SetPlayerSkin(killerid, 50);
		
		pData[killerid][pComserv] = 200;
		SetPlayerVirtualWorld(killerid, 0);
		SetPlayerInterior(killerid, 0);
		SetPlayerPos(killerid, 1482.4253,-1717.5935,14.0469);
		SetPlayerFacingAngle(killerid, 9.8095);
		GameTextForPlayer(killerid, "~w~Good Luck~n~~r~Cleaning!", 5000, 1); 
		new szString[528];
		format(szString, sizeof(szString), "News: %s have been put to Community Service for 200 months by GUARD IN HP. ", GetRPName(killerid),pData[killerid][pComserv]);
		SendDiscordMessage(15, szString);

		GameTextForPlayer(killerid, "~w~Welcome to~n~~r~Plaza my friend", 5000, 3);

		SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] was killed on the greenzone by %s[%i].", GetRPName(playerid), playerid, GetRPName(killerid), killerid);
    	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was comserv for 200 months by SECURITY[BOT], reason: Killing in Greenzone", GetRPName(killerid));
    	SM(killerid, COLOR_AQUA, "** You have been put to comserv for 200 months by SECURITY[BOT]");
	}
	
	pData[playerid][pLastDeath] = gettime();
 	foreach(new i : Player)
	{
  		if(pData[i][pAdmin])
		{
    		SendDeathMessageToPlayer(i, killerid, playerid, reason);
    	}
	}
	if(killerid != INVALID_PLAYER_ID)
	{
	    gTotalKills++;
	}
	gTotalDeaths++;
	SaveServerInfo();
	Graffity_OnPlayerDeath(playerid);
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    if(ExBJck[playerid] == 1)
	{
	    RemovePlayerAttachedObject(playerid, 7);
        SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s reaches for their seatbelt, and unbuckles it.", GetRPName(playerid));
		SCM(playerid, COLOR_WHITE, "You have taken off your seatbelt.");
	}
	
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z;
	    GetPlayerPos(playerid, x, y, z);
	    SetPlayerPos(playerid, x, y, z + 0.5);
	    ClearAnimations(playerid);
	}
	if((!ispassenger) && (pData[playerid][pCuffed] || pData[playerid][pTied] || pData[playerid][pInjured]))
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z;
	    GetPlayerPos(playerid, x, y, z);
	    SetPlayerPos(playerid, x, y, z + 0.5);
	    ClearAnimations(playerid);
	}
	if(!ispassenger)
	{

	
		if(VehicleInfo[vehicleid][vLocked] == 1)
        {
            ClearAnimations(playerid);
            GameTextForPlayer(playerid, "~r~ YOU MUST UNLOCK THE CAR!", 5000, 1);
        }
	    if((courierVehicles[0] <= vehicleid <= courierVehicles[9]) && !PlayerHasJob(playerid, JOB_COURIER))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Trucker.");
	        ClearAnimations(playerid);
	    }
		if((VIPVehicles[0] <= vehicleid <= VIPVehicles[49]) && !pData[playerid][pDonator])
	    {
	    	SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Donator.");
	    	ClearAnimations(playerid);
	    }	
	    if((lummberveh[0] <= vehicleid <= lummberveh[6]) && !PlayerHasJob(playerid, JOB_LUMBERJACK) && Lumberedx[playerid] <= 0)
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a LUMBERJACK.");
	        ClearAnimations(playerid);
	    }
		if((sweeperVehicles[0] <= vehicleid <= sweeperVehicles[3]) && !PlayerHasJob(playerid, JOB_SWEEPER))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a Street Sweeper.");
	        ClearAnimations(playerid);
	    }
	    if((pizzaVehicles[0] <= vehicleid <= pizzaVehicles[3]) && !PlayerHasJob(playerid, JOB_FOODPANDA))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Foodpanda Deliver.");
	        ClearAnimations(playerid);
	    }
		if((towtruck[0] <= vehicleid <= towtruck[2]) && (FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Mechianic.");
	        ClearAnimations(playerid);
	    }
   	    if(IsAGarbageCar(vehicleid) && !PlayerHasJob(playerid, JOB_GARBAGEMAN))
	    {
     		SCM(playerid, COLOR_ERROR, "You cannot operate this vehicle as you are not a Garbage Man.");
	        ClearAnimations(playerid);
		}
	    if((taxiVehicles[0] <= vehicleid <= taxiVehicles[6]) && !PlayerHasJob(playerid, JOB_TAXIDRIVER))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Taxi Driver.");
	        ClearAnimations(playerid);
	    }
    	if((forkliftVehicles[0] <= vehicleid <= forkliftVehicles[5]) && !PlayerHasJob(playerid, JOB_FORKLIFTER))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a Forklifter.");
	        ClearAnimations(playerid);
	    }
	    if((testVehicles[0] <= vehicleid <= testVehicles[4]) && !pData[playerid][pDrivingTest])
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not taking your drivers test.");
	        ClearAnimations(playerid);
	    }
	    /*if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as it doesn't belong to your faction.");
			if(pData[playerid][pDuty] == 0)
            {
 	        	SendClientMessage(playerid, COLOR_SYNTAX, "You're off duty therefore you can't use this vehicle!");
			}   
	        ClearAnimations(playerid);
	    }
     	if(VehicleInfo[vehicleid][vGang] >= 0 && pData[playerid][pGang] != VehicleInfo[vehicleid][vGang])
	    {
	        SendClientMessage(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as it doesn't belong to your gang.");
	        ClearAnimations(playerid);
	    }*/
	    if(VehicleInfo[vehicleid][vJob] >= 0 && pData[playerid][pJob] != VehicleInfo[vehicleid][vJob])
	    {
	        SM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a %s.", GetJobName(VehicleInfo[vehicleid][vJob]));
	        ClearAnimations(playerid);
	    }
	}
	ExBJck[playerid] = 0;
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	switch(pData[playerid][pCP])
	{
	    case CHECKPOINT_FOODPANDA:
	    {
			//new string[32], amount = ((8500 - pData[playerid][pPizzaTime])), tip = 500 + random(50);

            if(gettime() - pData[playerid][pLastPizza] < 15 && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
		    {
		        pData[playerid][pACWarns]++;

		        if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		        {
		            SAM(SERVER_COLOR, ""RED"AdmWarning: %s"WHITE"[%i] is possibly teleport foodpannda delivering (time: %i).", GetRPName(playerid), playerid, gettime() - pData[playerid][pLastPizza]);
				}
				else
				{
				    SMA(SERVER_COLOR, ""RED"AdmCmd: %s"WHITE" was auto-kicked by %s, reason: Teleport foodpannda runs", GetRPName(playerid), SERVER_BOT);
				    Kick(playerid);
				}
		    }
		    
			if(pData[playerid][pCarry] != 2)
				return SCM(playerid, SERVER_COLOR, "Grab the meal from the Wayfarer using "WHITE"'/graborder'"SVRCLR" before entering this checkpoint.");
	       	new string[128];

			new payment = 500 + random(400);
	        if(DoubleSalary)
	        {
	            new double_pay = payment * 2;
	            format(string, sizeof(string), "[DOUBLE-SALARY] You earned $%s instead of $%s since the Double Salary is turned on.", number_format(double_pay), number_format(payment));
	            SendClientMessageEx(playerid, COLOR_YELLOW, string);

				format(string, sizeof(string), "~g~+$%i", double_pay);
				GameTextForPlayer(playerid, string, 5000, 1);
				pData[playerid][pBank] += double_pay;	
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
					
	        }
	        else
	        {
				format(string, sizeof(string), "~g~+$%i", payment);
				GameTextForPlayer(playerid, string, 5000, 1);
				//GivePlayerCash(playerid, payment);
				
				pData[playerid][pBank] += payment;
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

			}


			pData[playerid][pCarrying] = false;
			pData[playerid][pCarry] = 0;
			RemovePlayerAttachedObject(playerid, 9);
			
			pData[playerid][pPizzas] = 0;
			pData[playerid][pPizzaTime] = 0;
			pData[playerid][pCP] = CHECKPOINT_NONE;

			DisablePlayerCheckpoint(playerid);
	    }
   		case CHECKPOINT_FORKLIFTER:
		{
	        if (pData[playerid][pJob] == JOB_FORKLIFTER)
		    {
		        switch (pData[playerid][pJobStage])
				{
				    case 0:
				    {
				        if (IsAForkliftVehicle(GetPlayerVehicleID(playerid)) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				        {
				            new vehicleid = GetPlayerVehicleID(playerid);
							pData[playerid][pJobStage] = 1;
							pData[playerid][pCP] = CHECKPOINT_FORKLIFTER;
				        	SendInfoMessage(playerid, "You have picked up the crate. Drive to the {FF0000}checkpoint{FFFFFF} for further instructions.");
		        			SetPlayerCheckpoint(playerid, 2783.6682, -2417.8679, 13.6347, 3.0);

					        VehicleObject[vehicleid] = CreateDynamicObject(1220, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(VehicleObject[vehicleid], vehicleid, 0.0, 0.6, 0.28, 0.0, 0.0, 0.0);
						}
					}
				    case 1:
				    {
				        if (IsAForkliftVehicle(GetPlayerVehicleID(playerid)) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				        {
				            new vehicleid = GetPlayerVehicleID(playerid);
		
		    	            SetPlayerCheckpoint(playerid, 2790.8264, -2410.4639, 13.6329, 3.0);
		    	            
							pData[playerid][pCP] = CHECKPOINT_FORKLIFTER;
		                    pData[playerid][pJobStage] = 2;
							SendInfoMessage(playerid, "Stack the cargo on the shelf.");
						    RemovePlayerFromVehicle(playerid);
						    DestroyDynamicObject(VehicleObject[vehicleid]);
						    VehicleObject[vehicleid] = INVALID_OBJECT_ID;
						    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
							SetPlayerAttachedObject(playerid, 9, 1220, 5, 0.184000, 0.330999, 0.112999, -84.099983, -9.500001, 20.700000);
						}
					}
					case 2:
					{
						
						if(!IsPlayerInRangeOfPoint(playerid, 3,  2790.8264, -2410.4639, 13.6329))
						{
							RemovePlayerAttachedObject(playerid, 9);
							pData[playerid][pJobStage] = 0;
							pData[playerid][pCP] = CHECKPOINT_NONE;
							DisablePlayerCheckpoint(playerid);
							SendClientMessage(playerid, COLOR_RED, "ERROR: Wrong checkpoint entered. the Lumberjack delivery canceled completely.");
							return 1;
						}
					    new string[128];
      					new payment = 300 + random(200);
				        if(DoubleSalary)
				        {
				            new double_pay = payment * 2;
				            format(string, sizeof(string), "[DOUBLE-SALARY] You earned $%s instead of $%s since the Double Salary is turned on.", number_format(double_pay), number_format(payment));
				            SendClientMessageEx(playerid, COLOR_YELLOW, string);
				          

							format(string, sizeof(string), "~g~+$%i", double_pay);
							GameTextForPlayer(playerid, string, 5000, 1);
							
							pData[playerid][pBank] += double_pay;
							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
							mysql_tquery(connectionID, queryBuffer);
			
				        }
				        else
				        {
							format(string, sizeof(string), "~g~+$%i", payment);
							GameTextForPlayer(playerid, string, 5000, 1);
							
							pData[playerid][pBank] += payment;
							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
							mysql_tquery(connectionID, queryBuffer);
						}
						SendInfoMessage(playerid, "Get back in your vehicle if you'd like to start working again.");
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						RemovePlayerAttachedObject(playerid, 9);
						pData[playerid][pJobStage] = 0;
						pData[playerid][pCP] = CHECKPOINT_NONE;
						DisablePlayerCheckpoint(playerid);
						ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
					}
				}
			}
			if (pData[playerid][pSecondJob] == JOB_FORKLIFTER)
		    {
		        switch (pData[playerid][pJobStage])
				{
				    case 0:
				    {
				        if (IsAForkliftVehicle(GetPlayerVehicleID(playerid)) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				        {
				            new vehicleid = GetPlayerVehicleID(playerid);
							pData[playerid][pJobStage] = 1;
							pData[playerid][pCP] = CHECKPOINT_FORKLIFTER;
				        	SendInfoMessage(playerid, "You have picked up the crate. Drive to the {FF0000}checkpoint{FFFFFF} for further instructions.");
		        			SetPlayerCheckpoint(playerid, 2783.6682, -2417.8679, 13.6347, 3.0);

					        VehicleObject[vehicleid] = CreateDynamicObject(1220, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(VehicleObject[vehicleid], vehicleid, 0.0, 0.6, 0.28, 0.0, 0.0, 0.0);
						}
					}
				    case 1:
				    {
				        if (IsAForkliftVehicle(GetPlayerVehicleID(playerid)) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				        {
				            new vehicleid = GetPlayerVehicleID(playerid);
				            switch (random(2))
						    {
		    	                case 0: SetPlayerCheckpoint(playerid, 2790.8264, -2410.4639, 13.6329, 3.0);
		    	                case 1: SetPlayerCheckpoint(playerid, 2790.8264, -2410.4639, 13.6329, 3.0);
							}
							pData[playerid][pCP] = CHECKPOINT_FORKLIFTER;
		                    pData[playerid][pJobStage] = 2;
							SendInfoMessage(playerid, "Stack the cargo on the shelf.");
						    RemovePlayerFromVehicle(playerid);
						    DestroyDynamicObject(VehicleObject[vehicleid]);
						    VehicleObject[vehicleid] = INVALID_OBJECT_ID;
						    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
							SetPlayerAttachedObject(playerid, 9, 1220, 5, 0.184000, 0.330999, 0.112999, -84.099983, -9.500001, 20.700000);
						}
					}
					case 2:
					{	
					
						if(!IsPlayerInRangeOfPoint(playerid, 3,  2790.8264, -2410.4639, 13.6329))
						{
							RemovePlayerAttachedObject(playerid, 9);
							pData[playerid][pJobStage] = 0;
							pData[playerid][pCP] = CHECKPOINT_NONE;
							DisablePlayerCheckpoint(playerid);
							SendClientMessage(playerid, COLOR_RED, "ERROR: Wrong checkpoint entered. the Lumberjack delivery canceled completely.");
							return 1;
						}
					
					    new string[128];
      					new payment = 800 + random(350);
				        if(DoubleSalary)
				        {
				            new double_pay = payment * 2;
				            format(string, sizeof(string), "[DOUBLE-SALARY] You earned $%s instead of $%s since the Double Salary is turned on.", number_format(double_pay), number_format(payment));
				            SendClientMessageEx(playerid, COLOR_YELLOW, string);

							format(string, sizeof(string), "~g~+$%i", double_pay);
							GameTextForPlayer(playerid, string, 5000, 1);
														
							pData[playerid][pBank] += double_pay;
							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
							mysql_tquery(connectionID, queryBuffer);
			
				        }
				        else
				        {
							format(string, sizeof(string), "~g~+$%i", payment);
							GameTextForPlayer(playerid, string, 5000, 1);
																					
							pData[playerid][pBank] += payment;
							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
							mysql_tquery(connectionID, queryBuffer);
						
						}
						SendInfoMessage(playerid, "Get back in your vehicle if you'd like to start working again.");
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						RemovePlayerAttachedObject(playerid, 9);
						pData[playerid][pJobStage] = 0;
						pData[playerid][pCP] = CHECKPOINT_NONE;
						DisablePlayerCheckpoint(playerid);
						ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
					}
				}
			}
		}
		case CHECKPOINT_LUMBERJACKRUN:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3, -142.6344,-91.9420,3.1609))
		    {
				Lumber1[playerid] = 0;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				DisablePlayerCheckpoint(playerid);
				lumberman[playerid] = false;
				Lumbered[playerid] = 0;
				Lumberedx[playerid] = 0;
				pData[playerid][pCP] = CHECKPOINT_NONE;
                SendClientMessage(playerid, COLOR_RED, "ERROR: Wrong checkpoint entered. the Lumberjack delivery canceled completely.");
				return 1;
		    }
			new string[128];
			if(GetPVarInt(playerid, "tpLumberJackRunTimer") != 0)
   			{
	    		SendAdminMessage(COLOR_TEAL, "AdmWarning"WHITE": %s (ID %d) is possibly teleport Lumber Jack Delivery.", GetPlayerNameEx(playerid), playerid);


				Lumber1[playerid] = 0;
				ClearAnimations(playerid);
			 	SetPlayerSkin(playerid, GetPlayerSkin(playerid));
				DisablePlayerCheckpoint(playerid);
				lumberman[playerid] = false;
				Lumbered[playerid] = 0;
				Lumberedx[playerid] = 0;
				pData[playerid][pCP] = CHECKPOINT_NONE;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				format(string, sizeof(string), "* Warning! You're marked as Teleport Lumber Jack Delivery!");
				SendClientMessage(playerid, COLOR_RED, string);
			    return 1;
			}
			new payment = 800 + random(300);
	        if(DoubleSalary)
	        {
	            new double_pay = payment * 2;
	            format(string, sizeof(string), "[DOUBLE-SALARY] You earned $%s instead of $%s since the Double Salary is turned on.", number_format(double_pay), number_format(payment));
	            SendClientMessageEx(playerid, COLOR_YELLOW, string);

				format(string, sizeof(string), "~g~+$%i", double_pay);
				GameTextForPlayer(playerid, string, 5000, 1);

				pData[playerid][pBank] += double_pay;
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
	        }
	        else
	        {
				format(string, sizeof(string), "~g~+$%i", payment);			
				GameTextForPlayer(playerid, string, 5000, 1);
				
				pData[playerid][pBank] += payment;
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
			DestroyDynamicObject(VehicleObject[GetPlayerVehicleID(playerid)]);
			VehicleGoods[GetPlayerVehicleID(playerid)] = -1;
			VehicleObject[GetPlayerVehicleID(playerid)] = INVALID_OBJECT_ID;
			Lumber1[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			lumberman[playerid] = false;
			Lumbered[playerid] = 0;
			Lumberedx[playerid] = 0;
			pData[playerid][pCP] = CHECKPOINT_NONE;
			return 1;
		}
	    case CHECKPOINT_TEST:
	    {
	        pData[playerid][pTestCP]++;

	        if(pData[playerid][pTestCP] < sizeof(drivingTestCPs))
	        {
	            if(!(testVehicles[0] <= GetPlayerVehicleID(playerid) <= testVehicles[4]))
	            {
					SCM(playerid, COLOR_LIGHTRED, "** You failed the test as you exited your vehicle.");
	                DisablePlayerCheckpoint(playerid);
		    		SetVehicleToRespawn(pData[playerid][pTestVehicle]);

				    pData[playerid][pCP] = CHECKPOINT_NONE;
		            pData[playerid][pDrivingTest] = 0;
				}
				else
				{
		            SetPlayerCheckpoint(playerid, drivingTestCPs[pData[playerid][pTestCP]][0], drivingTestCPs[pData[playerid][pTestCP]][1], drivingTestCPs[pData[playerid][pTestCP]][2], 3.0);
				}
			}
			else
			{
			    new
			        Float:health;

				GetVehicleHealth(pData[playerid][pTestVehicle], health);

			    if(health < 900.0)
			    {
					SCM(playerid, COLOR_SYNTAX, "Failed.");
			        SCM(playerid, COLOR_LIGHTRED, "** You brought back the vehicle damaged and therefore failed your test.");
					TextDrawShowForPlayer(playerid, LTO_FAIL_0);
					TextDrawShowForPlayer(playerid, LTO_FAIL_1);
					TextDrawShowForPlayer(playerid, LTO_FAIL_2);
					TextDrawShowForPlayer(playerid, LTO_FAIL_3);
					TextDrawShowForPlayer(playerid, LTO_FAIL_4);
					TextDrawShowForPlayer(playerid, LTO_FAIL_5);
					TextDrawShowForPlayer(playerid, LTO_FAIL_6);
					SetTimerEx("LTO2", 3000, false, "i", playerid);
					
			    }
			    else
			    {
                   	SCM(playerid, COLOR_SYNTAX, "Passed.");
			        SCM(playerid, COLOR_AQUA, "You successfully passed your drivers test and received your license!");

			        GivePlayerCash(playerid, -5000);
			        pData[playerid][pCarLicense] = 1;
					TextDrawShowForPlayer(playerid, LTO_PASS_0);
					TextDrawShowForPlayer(playerid, LTO_PASS_1);
					TextDrawShowForPlayer(playerid, LTO_PASS_2);
					TextDrawShowForPlayer(playerid, LTO_PASS_3);
					TextDrawShowForPlayer(playerid, LTO_PASS_4);
					TextDrawShowForPlayer(playerid, LTO_PASS_5);
					TextDrawShowForPlayer(playerid, LTO_PASS_6);
					TextDrawShowForPlayer(playerid, LTO_PASS_7);

					SetTimerEx("LTO1", 3000, false, "i", playerid);
			        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = 1 WHERE uid = %i", pData[playerid][pID]);
			        mysql_tquery(connectionID, queryBuffer);
			    }

	    		DisablePlayerCheckpoint(playerid);
	    		SetVehicleToRespawn(pData[playerid][pTestVehicle]);

			    pData[playerid][pCP] = CHECKPOINT_NONE;
	            pData[playerid][pDrivingTest] = 0;
	        }
		}
		case CHECKPOINT_PACKAGE:
		{
			new string[128];
			new amount = random(50) + 50;
			GivePlayerCash(playerid, amount);
			format(string, sizeof(string), "You have earned "GREEN"$"TEAL"%i"WHITE" by packaging.", amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			ApplyAnimation(playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0);
			RemovePlayerAttachedObject(playerid, 9);
			ClearAnimations(playerid, 1);
			DisablePlayerCheckpoint(playerid);
		}
	    case CHECKPOINT_MINING:
	    {
	        new cost, string[128];
			if(!IsPlayerInRangeOfPoint(playerid, 3, 870.9653,-18.1363,63.7156))
		    {
                if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);//
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				DisablePlayerCheckpoint(playerid);
				pData[playerid][pCP] = CHECKPOINT_NONE;
                SendClientMessage(playerid, COLOR_RED, "ERROR: Wrong checkpoint entered. the mining delivery canceled completely.");
				return 1;
		    }			
	        if(pData[playerid][pMiningRock] == 1)
			{
	             cost = 750 + random(200);
			}
			else if(pData[playerid][pMiningRock] == 2)
			{
			     cost = 800 + random(400);
			}
			else if(pData[playerid][pMiningRock] == 3) // Musgravite
			{
			     cost = 850 + random(200);
			}
			else if(pData[playerid][pMiningRock] == 4) // Gold
			{
			    cost = 900 + random(300);
			}
			else if(pData[playerid][pMiningRock] == 5) // Diamond
			{
			    cost = 1000 + random(250);
			    pData[playerid][pDiamonds] ++;
   				pData[playerid][pRareTime] = 3600;
				SCM(playerid, COLOR_TEAL, "BINGO!,"WHITE" It's a freakin' diamond, we're going to be damn rich!");
				SCM(playerid, COLOR_TEAL, "Boss:"WHITE" You know what? since you found it, you should get to keep it.");
                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
				
			}


			if(DoubleSalary)
			{
				new double_pay = cost * 2;
				format(string, sizeof(string), "[DOUBLE-SALARY] You earned $%s instead of $%s since the Double Salary is turned on.", number_format(double_pay), number_format(cost));
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "~g~+$%i", double_pay);
				GameTextForPlayer(playerid, string, 5000, 1);
				
				pData[playerid][pBank] += double_pay;
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
					
			}
			else
			{
				format(string, sizeof(string), "  You have earned $%i for mining rocks.", cost);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				
				format(string, sizeof(string), "~g~+$%i", cost);
				GameTextForPlayer(playerid, string, 5000, 1);
				
				pData[playerid][pBank] += cost;
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
					
			}
			


			pData[playerid][pMiningRock] = 0;
			pData[playerid][pCP] = CHECKPOINT_NONE;
			ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid, 9);

			DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_BUTCHER:
	    {
	        new cost, string[128];
			if(!IsPlayerInRangeOfPoint(playerid, 2.5,-286.9680,-2151.0989,28.6339))
		    {
                if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);//
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				DisablePlayerCheckpoint(playerid);
				pData[playerid][pCP] = CHECKPOINT_NONE;
                SendClientMessage(playerid, COLOR_RED, "ERROR: Wrong checkpoint entered. the butcher delivery canceled completely.");
				return 1;
		    }			
	        if(pData[playerid][pButcherMeat] == 1)
			{
	             cost = 750 + random(200);
			}
			else if(pData[playerid][pButcherMeat] == 2)
			{
			     cost = 800 + random(400);
			}
			else if(pData[playerid][pButcherMeat] == 3) // Musgravite
			{
			     cost = 850 + random(200);
			}
			else if(pData[playerid][pButcherMeat] == 4) // Gold
			{
			    cost = 900 + random(300);
			}
			else if(pData[playerid][pButcherMeat] == 5) // Diamond
			{
			    cost = 1000 + random(250);
			}

			if(DoubleSalary)
			{
				new double_pay = cost * 2;
				format(string, sizeof(string), "[DOUBLE-SALARY] You earned $%s instead of $%s since the Double Salary is turned on.", number_format(double_pay), number_format(cost));
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string), "~g~+$%i", double_pay);
				GameTextForPlayer(playerid, string, 5000, 1);
				
				pData[playerid][pBank] += double_pay;
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
					
			}
			else
			{
				format(string, sizeof(string), "  You have earned $%i for chopping a meat.", cost);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				
				format(string, sizeof(string), "~g~+$%i", cost);
				GameTextForPlayer(playerid, string, 5000, 1);
				
				pData[playerid][pBank] += cost;
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
					
			}
			


			pData[playerid][pButcherMeat] = 0;
			pData[playerid][pCP] = CHECKPOINT_NONE;
			ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid, 9);

			DisablePlayerCheckpoint(playerid);
	    }
		case CHECKPOINT_CLEANING:
	    {
	        new cost, string[128];
			if(!IsPlayerInRangeOfPoint(playerid, 3,32.4046,2068.7500,717.0661))
		    {
                if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);//
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				DisablePlayerCheckpoint(playerid);
				pData[playerid][pCP] = CHECKPOINT_NONE;
                SendClientMessage(playerid, COLOR_RED, "ERROR: Wrong checkpoint entered. the jail clean delivery canceled completely.");
				return 1;
		    }

			cost = 10 + random(300);
			format(string, sizeof(string), "  You have earned $%i for cleaning.", cost);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, cost);
			
			ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

			format(string, sizeof(string), "~g~+$%i", cost);
			GameTextForPlayer(playerid, string, 5000, 1);
			pData[playerid][pCP] = CHECKPOINT_NONE;

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid, 9);

			DisablePlayerCheckpoint(playerid);
	    }
   	    case CHECKPOINT_Demolition:
	    {
	        new cost, string[128];
			if(!IsPlayerInRangeOfPoint(playerid, 3, 2498.6509,74.2400,26.8766))
		    {
                if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);//
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				DisablePlayerCheckpoint(playerid);
				pData[playerid][pCP] = CHECKPOINT_NONE;
                SendClientMessage(playerid, COLOR_RED, "ERROR: Wrong checkpoint entered. the demolition delivery canceled completely.");
				return 1;
		    }
	        if(pData[playerid][pDemolition] == 1)
			{
	            cost = 750 + random(200);
			}
			else if(pData[playerid][pDemolition] == 2)
			{
			     cost = 800 + random(400);
			}
			else if(pData[playerid][pDemolition] == 3) // Musgravite
			{
			     cost = 850 + random(300);
			}
			else if(pData[playerid][pDemolition] == 4) // Gold
			{
			     cost = 900 + random(400);
			}
			else if(pData[playerid][pDemolition] == 5) // Diamond
			{
			     cost = 1000 + random(250);
			}
			if(DoubleSalary)
			{
				new double_pay = cost * 2;
				format(string, sizeof(string), "[DOUBLE-SALARY] You earned $%s instead of $%s since the Double Salary is turned on.", number_format(double_pay), number_format(cost));
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
				//GivePlayerCash(playerid, double_pay);
				
				format(string, sizeof(string), "~g~+$%i", double_pay);
				GameTextForPlayer(playerid, string, 5000, 1);
								
				pData[playerid][pBank] += double_pay;
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
			else
			{
				format(string, sizeof(string), "~g~+$%i", cost);
				GameTextForPlayer(playerid, string, 5000, 1);
				//GivePlayerCash(playerid, cost);
								
				pData[playerid][pBank] += cost;
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);				
			}
			ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

			//format(string, sizeof(string), "~g~+$%i", cost);
			//GameTextForPlayer(playerid, string, 5000, 1);

			pData[playerid][pDemolition] = 0;
			pData[playerid][pCP] = CHECKPOINT_NONE;

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			RemovePlayerAttachedObject(playerid, 9);

			DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_MATS:
	    {
	        if((pData[playerid][pSmuggleMats] == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, 2173.2129, -2264.1548, 13.3467)) || (pData[playerid][pSmuggleMats] == 2 && IsPlayerInRangeOfPoint(playerid, 3.0, 2288.0918, -1105.6555, 37.9766)))
			{
			    if(gettime() - pData[playerid][pSmuggleTime] < 20 && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
			    {
			        pData[playerid][pACWarns]++;

			        if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
			        {
			            SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] is possibly teleport matrunning (time: %i).", GetRPName(playerid), playerid, gettime() - pData[playerid][pSmuggleTime]);
					}
					else
					{
					    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was auto-kicked by %s, reason: Teleport matrun", GetRPName(playerid), SERVER_BOT);
					    //BanPlayer(playerid, SERVER_BOT, "Teleport matrun");
					    Kick(playerid);
					}
			    }

                if(pData[playerid][pMaterials] + 300 > GetPlayerCapacity(CAPACITY_MATERIALS))
				{
	    			return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
				}

			    if(pData[playerid][pSmuggleMats] == 1) {
			        AddPointMoney(POINT_MATFACTORY1, 2000);
			    } else {
			        AddPointMoney(POINT_MATFACTORY2, 2000);
			    }

			    if(pData[playerid][pGang] >= 0)
			    {
			        GiveGangPoints(pData[playerid][pGang], 1);
				}

		 	   	pData[playerid][pMaterials] += 500;
		    	pData[playerid][pSmuggleMats] = 0;
		    	pData[playerid][pCP] = CHECKPOINT_NONE;

			    SCM(playerid, COLOR_AQUA, "You have dropped off your load and collected 500 materials from the depot.");
		    	DisablePlayerCheckpoint(playerid);

		    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
		    	mysql_tquery(connectionID, queryBuffer);
			}
	    }
	    case CHECKPOINT_DRUGS:
	    {
	        new amount = 105 + (GetJobLevel(playerid, JOB_DRUGDEALER) * 10);

			switch(pData[playerid][pSmuggleDrugs])
			{
				case 1:
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2167.7371, -1670.6298, 15.0804))
				    {
			    	    return SCM(playerid, COLOR_SYNTAX, "You aren't at the correct dropoff spot.");
					}
					if(gSeedsStock >= 1000)
					{
					    return SCM(playerid, COLOR_SYNTAX, "The drug den does not need anymore seeds.");
					}

					gSeedsStock += 10;

					GivePlayerCash(playerid, amount);
				    SM(playerid, COLOR_AQUA, "You have earned $%i for your delivery of marijuana seeds.", amount);
				}
				/*case 2:
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2349.7727, -1169.6304, 28.0243))
				    {
			    	    return SCM(playerid, COLOR_SYNTAX, "You aren't at the correct dropoff spot.");
					}
					if(gCrackStock >= 1000)
					{
					    return SCM(playerid, COLOR_SYNTAX, "The crack house does not need anymore Crack.");
					}

					gCrackStock += 10;

					GivePlayerCash(playerid, amount);
				    SM(playerid, COLOR_AQUA, "You have earned $%i for your delivery of Crack.", amount);
				}*/
				case 3:
				{
				    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2167.7371, -1670.6298, 15.0804))
				    {
			    	    return SCM(playerid, COLOR_SYNTAX, "You aren't at the correct dropoff spot.");
					}
					if(gEphedrineStock >= 1000)
					{
					    return SCM(playerid, COLOR_SYNTAX, "The drug den does not need anymore ephedrine.");
					}

					gEphedrineStock += 10;

					GivePlayerCash(playerid, amount);
				    SM(playerid, COLOR_AQUA, "You have earned $%i for your delivery of raw ephedrine.", amount);
				}
			}

			if(gettime() - pData[playerid][pSmuggleTime] < 30 && pData[playerid][pAdmin] < 2)
		    {
		        pData[playerid][pACWarns]++;

		        if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
		        {
		            SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] is possibly teleport drug smuggling (time: %i).", GetRPName(playerid), playerid, gettime() - pData[playerid][pSmuggleTime]);
				}
				else if(!pData[playerid][pKicked])
				{
				    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was auto-kicked by %s, reason: Teleport drug smuggling", GetRPName(playerid), SERVER_BOT);
				    //BanPlayer(playerid, SERVER_BOT, "Teleport drug smuggling");
				    Kick(playerid);
				}
		    }
		    else
		    {
		        if(pData[playerid][pGang] >= 0)
		    	{
		     		GiveGangPoints(pData[playerid][pGang], 1);
				}
			}

			pData[playerid][pSmuggleDrugs] = 0;
			pData[playerid][pCP] = CHECKPOINT_NONE;

			DisablePlayerCheckpoint(playerid);
			IncreaseJobSkill(playerid, JOB_DRUGDEALER);

	    	if(GetJobLevel(playerid, JOB_DRUGDEALER) < 5)
	    	{
	        	if(pData[playerid][pSmugglerSkill] < 99) {
	        		SM(playerid, COLOR_YELLOW, "You need to smuggle %i more packages in order to level up.", 99 - pData[playerid][pSmugglerSkill]);
	        	} else if(pData[playerid][pSmugglerSkill] < 199) {
	        		SM(playerid, COLOR_YELLOW, "You need to smuggle %i more packages in order to level up.", 199 - pData[playerid][pSmugglerSkill]);
	       		} else if(pData[playerid][pSmugglerSkill] < 299) {
	        		SM(playerid, COLOR_YELLOW, "You need to smuggle %i more packages in order to level up.", 299 - pData[playerid][pSmugglerSkill]);
            	} else if(pData[playerid][pSmugglerSkill] < 399) {
	        		SM(playerid, COLOR_YELLOW, "You need to smuggle %i more packages in order to level up.", 399 - pData[playerid][pSmugglerSkill]);
				}
			}
			else
			{
				//
			}
	    }
	    case CHECKPOINT_HOUSE:
	    {
            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has entered the house.", GetRPName(playerid));
			SetPlayerPos(playerid, HouseInfo[pData[playerid][pInviteHouse]][hIntX], HouseInfo[pData[playerid][pInviteHouse]][hIntY], HouseInfo[pData[playerid][pInviteHouse]][hIntZ]);
			SetPlayerFacingAngle(playerid, HouseInfo[pData[playerid][pInviteHouse]][hIntA]);
			SetPlayerInterior(playerid, HouseInfo[pData[playerid][pInviteHouse]][hInterior]);
			SetPlayerVirtualWorld(playerid, HouseInfo[pData[playerid][pInviteHouse]][hWorld]);
			SetCameraBehindPlayer(playerid);

			pData[playerid][pCP] = CHECKPOINT_NONE;
	        DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_ROBBERY:
	    {
	        if(IsPlayerInBankRobbery(playerid) && pData[playerid][pRobCash] > 0)
	        {
				if(pData[playerid][pGang] >= 0)
				{
					GiveGangPoints(pData[playerid][pGang], 50);
				}
				RobberyInfo[rStolen] += pData[playerid][pRobCash];
				pData[playerid][pDirtyCash] += pData[playerid][pRobCash];
				gVault -= pData[playerid][pRobCash];
				SaveServerInfo();

				SM(playerid, COLOR_AQUA, "You have earned $%i dirty cash for successfully completing the bank robbery.", pData[playerid][pRobCash]);
				SCM(playerid, COLOR_SYNTAX, "You must wash your dirty money to convert it into real cash.");
				RemoveFromBankRobbery(playerid);
			}

			pData[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
	    }
	    case CHECKPOINT_BROBBERY:
	    {
	        if(IsPlayerInBizRobbery(playerid) && pData[playerid][pRobCash] > 0)
	        {
				if(pData[playerid][pGang] >= 0)
				{
					GiveGangPoints(pData[playerid][pGang], 50);
				}
				RobberyInfo1[rStolen1] += pData[playerid][pRobCash];
				pData[playerid][pDirtyCash] += pData[playerid][pRobCash];
				
				SM(playerid, COLOR_AQUA, "You have earned $%i dirty cash for successfully completing the store robbery.", pData[playerid][pRobCash]);
				SCM(playerid, COLOR_SYNTAX, "You must wash your dirty money to convert it into real cash.");
				RemoveFromBizRobbery(playerid);
			}

			pData[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
	    }
   	    case CHECKPOINT_ROBBERYBIZ:
	    {
			new businessid = pData[playerid][pRobbingBiz];

			if(pData[playerid][pGang] >= 0)
			{
				GiveGangPoints(pData[playerid][pGang], 50);
			}

			pData[playerid][pDirtyCash] += pData[playerid][pRobCash];
			BusinessInfo[businessid][bCash] -= pData[playerid][pRobCash];

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);

			SM(playerid, COLOR_AQUA, "You have earned $%i dirty cash for successfully completing the business robbery.", pData[playerid][pRobCash]);

			BusinessInfo[businessid][bRobbed] = 3;
			BusinessInfo[businessid][bRobbing] = 0;
			ReloadBusiness(businessid);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET robbed = %i, robbing = %i WHERE id = %i", BusinessInfo[businessid][bRobbed], BusinessInfo[businessid][bRobbing], BusinessInfo[businessid][bID]);
 			mysql_tquery(connectionID, queryBuffer);

			pData[playerid][pRobCash] = 0;
			pData[playerid][pRobbingBiz] = -1;
			pData[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
			SavePlayerVariables(playerid);
		}
   	    case CHECKPOINT_ROBBERYHOUSE:
	    {
			new houseid = pData[playerid][pRobbingHouse];

			if(pData[playerid][pGang] >= 0)
			{
				GiveGangPoints(pData[playerid][pGang], 50);
			}

			pData[playerid][pDirtyCash] += pData[playerid][pRobCash];
			HouseInfo[houseid][hCash] -= pData[playerid][pRobCash];

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			mysql_tquery(connectionID, queryBuffer);

			SM(playerid, COLOR_AQUA, "You have earned $%i dirty cash for successfully completing the house robbery.", pData[playerid][pRobCash]);

			HouseInfo[houseid][hRobbed] = 3;
			HouseInfo[houseid][hRobbing] = 0;
			ReloadHouse(houseid);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET robbed = %i, robbing = %i WHERE id = %i", HouseInfo[houseid][hRobbed], HouseInfo[houseid][hRobbing], HouseInfo[houseid][hID]);
 			mysql_tquery(connectionID, queryBuffer);

			pData[playerid][pRobCash] = 0;
			pData[playerid][pRobbingHouse] = -1;
			pData[playerid][pCP] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
			SavePlayerVariables(playerid);
		}

	    default:
	    {
	        pData[playerid][pCP] = CHECKPOINT_NONE;
	        DisablePlayerCheckpoint(playerid);
	    }
	}

	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{

	if(gParachutes[0] <= pickupid <= gParachutes[1]) {
	    GiveWeapon(playerid, 46);
	}

	return 1;
}

/*ProcessDamage(playerid, issuerid, weaponid, Float:amount, bool:fmj = false)
{
	new
		Float:health,
		Float:armour;

	GetPlayerHealth(playerid, health);
	GetPlayerArmour(playerid, armour);

	if(armour > 0.0)
	{
	    if(armour >= amount)
	    {
	        armour -= amount;
		}
		else
		{
		    health -= amount - armour;
		    armour = 0;
	    }
	}
	else if(health > 0.0)
	{
	    if(health >= amount)
	    {
	        health -= amount;
		}
		else
		{
		    health = 0;
	    }
	}

	if((fmj) && health >= amount / 2)
	{
	    health -= amount / 2;
	}

	SetPlayerHealth(playerid, health < 0.0 ? 0.0 : health);
	SetPlayerArmour(playerid, armour < 0.0 ? 0.0 : armour);

	if(health <= 0.0)
	{
	    CallLocalFunction("OnPlayerDeath", "iii", playerid, issuerid, weaponid);
	}
}*/


public OnPlayerPickUpPickup(playerid, pickupid) {
	if(pickupid == pickup777)
	{
	    if(pData[playerid][pDonator] < 1)
    	{
        	return SCM(playerid, COLOR_SYNTAX, "You dont have a VIP PACKAGE.");
    	}
		SetScriptArmour(playerid, 100);
	}
	if(pickupid == pickup888)
	{
	    if(pData[playerid][pDonator] < 1)
    	{
        	return SCM(playerid, COLOR_SYNTAX, "You dont have a VIP PACKAGE.");
    	}
		SetPlayerHealth(playerid, 100);
	}
	return 1;
}

public OnPlayerDamage(&playerid, &Float:amount, &issuerid, &weapon, &bodypart)
{
	if(playerid != INVALID_PLAYER_ID && issuerid != INVALID_PLAYER_ID)
	{

		if((22 <= weapon <= 36) && !PlayerHasWeapon(issuerid, weapon, true) && pData[issuerid][pAdmin] < 2 && !pData[issuerid][pKicked])
		{
		    new
		        string[48];

			format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(weapon));
			
			new szString[528];
			format(szString, sizeof(szString), "SECURITY[BOT]%s was kicked by bot, reason: %s", GetRPName(issuerid), string);
			SendDiscordMessage(22, szString); 
		
			SMA(COLOR_LIGHTRED, "AdmCmd: %s was kicked by %s, reason: %s", GetRPName(issuerid), SERVER_BOT, string);
			BanPlayer(issuerid, SERVER_BOT, string);
		    return 0;
		}
		if((weapon == 23) && ((IsLawEnforcement(issuerid) || GetFactionType(issuerid) == FACTION_GOVERNMENT) && pData[issuerid][pTazer] && GetPlayerState(issuerid) == PLAYER_STATE_ONFOOT) && amount > 5.0)
		{
			if(pData[playerid][pAdminDuty])
			{
			    SCM(issuerid, COLOR_SYNTAX, "You can't taze an administrator currently on duty.");
				return 0;
			}
			if(pData[playerid][pTazedTime])
			{
			    SCM(issuerid, COLOR_SYNTAX, "This player has already been tazed.");
			    return 0;
			}
			if(!IsPlayerInRangeOfPlayer(issuerid, playerid, 10.0))
			{
			    SCM(issuerid, COLOR_SYNTAX, "You can't taze that player. They are too far from you.");
			    return 0;
			}
			if((22 <= GetPlayerWeapon(playerid) <= 38) && IsPlayerAimingEx(playerid))
			{
	  			SCM(issuerid, COLOR_SYNTAX, "Rush-tazing is forbidden. This means tazing a player who is aiming a gun at you.");
	  			return 0;
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
			    SCM(issuerid, COLOR_SYNTAX, "You can't taze a player who is in a vehicle.");
			    return 0;
			}

			pData[playerid][pTazedTime] = 10;
			TogglePlayerControllable(playerid, 0);

			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.1, 0, 0, 0, 1, 0, 1);
            PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~r~Tazed", 5000, 3);

			SendProximityMessage(issuerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s aims their tazer full of electricity at %s and stuns them.", GetRPName(issuerid), GetRPName(playerid));
			SM(playerid, COLOR_AQUA, "You've been {0080FF}stunned{CCFFFF} with electricity by %s's tazer.", GetRPName(issuerid));
			SM(issuerid, COLOR_AQUA, "You have stunned %s with electricity. They are disabled for 10 seconds.", GetRPName(playerid));
			return 0;
		}
		if(IsPlayerInDynamicArea(playerid, hparea))
		{
			// Reduce the health of the issuer (the one who punched)
			SetPlayerHealth(issuerid, GetHealth(issuerid) - 10.0);
			GameTextForPlayer(issuerid, "~r~DONT PUNCH WHILE ON SAFEZONEt!", 5000, 1);
		}
		// Sabong
		if(SabongInfo[sExist] && (
			(SabongInfo[sPlayerRed] != issuerid && SabongInfo[sPlayerBlue] == playerid) ||
			(SabongInfo[sPlayerRed] == playerid && SabongInfo[sPlayerBlue] != issuerid)
		))
		{
			GameTextForPlayer(issuerid, "~r~You are not in a Sabong Area.", 2000, 3);
			return 0;
		}
		if(playerid != INVALID_PLAYER_ID && issuerid != INVALID_PLAYER_ID)
		{
			if(SabongInfo[sExist] && !SabongInfo[sStart])
			{
				if(SabongInfo[sPlayerRed] == issuerid || SabongInfo[sPlayerBlue] == issuerid)
				{
					SendClientMessage(issuerid, COLOR_YELLOW, "dont Punch while the Sabong is Not Starting");
					return 0;
				}
			}
		}
		// Check if the issuer is level 1
        if(pData[issuerid][pLevel] == 1)
        {
			GameTextForPlayer(issuerid, "You are not allowed to harm others as a level 1 player.", 3000, 1);
            return 0; // Prevent damage
        }

        // Check if the player being harmed is level 1 and the issuer is level 2
        if(pData[issuerid][pLevel] >= 2 && pData[playerid][pLevel] == 1)
        {
			GameTextForPlayer(issuerid, "You cannot harm level 1 players.", 3000, 1);

            return 0; // Prevent damage
        }
		if(!(weapon == 23 && pData[playerid][pTazer]))
		{
			if(IsPlayerInsideOfSafeZone(issuerid) != -1)
			{
				GameTextForPlayer(issuerid, "No Punching/Damaging inside the Greenzone Area.", 3000, 1);
				return 0;
			}
			if(IsPlayerInsideOfSafeZone(playerid) != -1)
			{
				GameTextForPlayer(issuerid, "This player is inside the Greenzone Area.", 3000, 1);
				return 0;
			}
		}
		
		if(pData[issuerid][pComserv] > 0)
		{
			GameTextForPlayer(issuerid, "No Punching/Damaging when they are doing a punishment.", 3000, 1);
			return 0;
		}
		if(pData[playerid][pComserv] > 0)
		{
			GameTextForPlayer(issuerid, "You cannot harm while doing a punishment", 3000, 1);
			return 0;
		}

		if((weapon == 25) && ((IsLawEnforcement(issuerid) || GetFactionType(issuerid) == FACTION_GOVERNMENT) && pData[issuerid][pBeanbag] && GetPlayerState(issuerid) == PLAYER_STATE_ONFOOT) && amount > 5.0)
		{
			if(pData[playerid][pAdminDuty])
			{
			    SCM(issuerid, COLOR_SYNTAX, "You can't taze an administrator currently on duty.");
				return 0;
			}
			if(pData[playerid][pBeanbagTime])
			{
			    SCM(issuerid, COLOR_SYNTAX, "This player has already been stunned.");
			    return 0;
			}
			if(!IsPlayerInRangeOfPlayer(issuerid, playerid, 10.0))
			{
			    SCM(issuerid, COLOR_SYNTAX, "You can't stunned that player. They are too far from you.");
			    return 0;
			}
			if((22 <= GetPlayerWeapon(playerid) <= 38) && IsPlayerAimingEx(playerid))
			{
	  			SCM(issuerid, COLOR_SYNTAX, "Rush-tazing is forbidden. This means tazing a player who is aiming a gun at you.");
	  			return 0;
			}

			pData[playerid][pBeanbagTime] = 10;
			TogglePlayerControllable(playerid, 0);

			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.1, 0, 0, 0, 1, 0, 1);
            PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~r~Stunned!", 5000, 3);

			SendProximityMessage(issuerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s aims their rubber bullets at %s and stuns them.", GetRPName(issuerid), GetRPName(playerid));
			SM(playerid, COLOR_AQUA, "You've been {0080FF}stunned{CCFFFF} with rubber bullets by %s.", GetRPName(issuerid));
			SM(issuerid, COLOR_AQUA, "You have stunned %s with electricity. They are disabled for 10 seconds.", GetRPName(playerid));
			return 0;
		}

		PlayerPlaySound(issuerid, 17802, 0.0, 0.0, 0.0);
		if(pData[playerid][pAFK])
		{
		    GameTextForPlayer(issuerid, "That player is AFK!", 5000, 3);
		    return 0;
		}
		if(pData[issuerid][pFreezeTimer] != -1)
		{
		    pData[issuerid][pFreezeTimer] = -1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 150.0, 1144.7922, 2620.3928, 1049.8481) && !IsLawEnforcement(issuerid))
		{
		    new Float:iPos[3];
		    GameTextForPlayer(issuerid, "~r~Shooting ~w~inside the ~g~Casino ~w~is ~r~prohibited.", 5000, 3);
			GetPlayerPos(playerid, iPos[0], iPos[1], iPos[2]);
      		pData[issuerid][pFreezeTimer] = SetTimerEx("UnfreezePlayer", 3000, false, "ifff", issuerid, iPos[0], iPos[1], iPos[2]);
    		TogglePlayerControllable(issuerid, false);

		    return 0;
  		}
	}
	
	if(GetHealth(playerid) < 80.0 && !IsPlayerNPC(playerid) && !pBlood[playerid])
	{
    	ShowBlood(playerid, 2);
    	pBlood[playerid] = true;
    }
	new playerTurfID, issuerTurfID;
	if((playerTurfID = GetNearbyTurf(playerid)) != -1 && TurfInfo[playerTurfID][tCapturer] != INVALID_PLAYER_ID || 
	   (issuerTurfID = GetNearbyTurf(issuerid)) != -1  && TurfInfo[issuerTurfID][tCapturer] != INVALID_PLAYER_ID)
	{
		if(!pData[playerid][pJoinedEvent] && pData[playerid][pPaintball] == 0 && pData[playerid][pDueling] == INVALID_PLAYER_ID && !pData[playerid][pAdminDuty] && !pData[issuerid][pAdminDuty])
		{
			if(!pData[playerid][pBandana] && !IsLawEnforcement(playerid) || !pData[playerid][pDuty] && IsLawEnforcement(playerid))
			{
				GameTextForPlayer(issuerid, "~w~Can't shoot unless the player has a bandana/badge on.", 5000, 3);
				return 0;
			}
			else if(!pData[issuerid][pBandana] && !IsLawEnforcement(issuerid) || !pData[issuerid][pDuty] && IsLawEnforcement(issuerid))
			{
				GameTextForPlayer(issuerid, "~w~Your bandana or badge must be on.", 5000, 3);
				return 0;
			}
			else if(playerTurfID == -1 && issuerTurfID != -1)
			{
				GameTextForPlayer(issuerid, "~w~That player is outside the turf bounds.", 5000, 3);
				return 0;
			}
			else if(GetNearbyTurf(issuerid) == -1  && GetNearbyTurf(playerid) != -1 )
			{
				GameTextForPlayer(issuerid, "~w~You must be inside the turf.", 5000, 3);
				return 0;
			}
		}
	}
	
  	if(issuerid != INVALID_PLAYER_ID)
    {
        if(HeadShotSystem && bodypart == 9 && GetPlayerState(playerid) != PLAYER_STATE_WASTED) {
			SendProximityMessage(issuerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s was strucked to the head by a bullet.", GetRPName(playerid));
			SCMf(playerid, SERVER_COLOR, "You have been struck to the head by %s.", GetRPName(issuerid));
			SCMf(issuerid, COLOR_ERROR, "You have struck %s in the head with a bullet.", GetRPName(playerid));

			SetPlayerHealth(playerid, 0.0);
		}
		if(bodypart == 7 || bodypart == 8 )
		{
			if(!pData[playerid][pBrokenLeg])
			{
				if(!pData[playerid][pPaintball])
				{
					ApplyAnimation(playerid, "ped", "FALL_collapse", 4.1, 0, 1, 1, 0, 0);
	
					//SetPlayerSpecialTag(playerid, TAG_BROKEN_LEG);
	
					pData[playerid][pBrokenLeg] = 1;
	
					SendProximityMessage(issuerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s was shot in the leg, their leg is now broken.", GetRPName(playerid));
					SCMf(playerid, SERVER_COLOR, "You have been shot in the legs by %s.", GetRPName(issuerid));
					SCM(playerid, COLOR_ERROR, "You cannot sprint or jump while you have a broken leg.");
					SCM(playerid, COLOR_YELLOW, "Prevent from running or jumping as your health goes down.");
					SCMf(issuerid, COLOR_ERROR, "You have shot %s in the legs.", GetRPName(playerid));
			
				}
			}
		}
		//if(bodypart == 9)
		//{
		//	if(!pData[playerid][pBleeding])
		//	{
		//		ApplyAnimation(playerid, "ped", "FALL_collapse", 4.1, 0, 1, 1, 0, 0);
		//
		//		//SetPlayerSpecialTag(playerid, TAG_BROKEN_LEG);
		//
		//		pData[playerid][pBleeding] = 1;
		//
		//		SCM(playerid, COLOR_SYNTAX, "You have been shot in the head and is now bleeding.");
		//		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has been shot in the head by %s and is now bleeding.", GetRPName(playerid), GetRPName(issuerid));
		//			
		//	}
		//}
    }
	return 1;
}
public OnPlayerDamageDone(playerid, Float:amount, issuerid, weapon, bodypart)
{
	if(playerid != INVALID_PLAYER_ID && issuerid != INVALID_PLAYER_ID) // motherfucker caused us to start out with bed rep BIATCH
	{
		if(IsPlayerConnected(issuerid))
		{
		    if(weapon == 4 && PlayerHasWeapon(issuerid, 4) && IsPlayerInRangeOfPlayer(playerid, issuerid, 20.0) && amount > 100.0)
		    {
		        DamagePlayer(playerid, 300, issuerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
		        HandleContract(playerid, issuerid);
		    }
		}
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO shots VALUES(null, %i, %i, %i, %i, '%s', '0.0', '0.0', '0.0', %i)", issuerid, weapon, BULLET_HIT_TYPE_PLAYER, playerid, GetPlayerNameEx(playerid), gettime());
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}
public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	if(RobberyInfo[rPlanning] && objectid == RobberyInfo[rObjects][0])
	{
		for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
		{
		    if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
		    {
			    PlayerPlaySound(RobberyInfo[rRobbers][i], 3401, 0.0, 0.0, 0.0);
			    GameTextForPlayer(RobberyInfo[rRobbers][i], "~w~FIRST PART OF THE HEIST STARTED", 5000, 1);
				SCM(i, COLOR_REALRED, "[BANK ROB GUIDE]: GOTO DOWNSTAIR AND CONTINUE THE HEIST.");
			    SetPlayerAttachedObject(RobberyInfo[rRobbers][i], 8, 19801, 2, 0.091000, 0.012000, -0.000000, 0.099999, 87.799957, 179.500015, 1.345999, 1.523000, 1.270001, 0, 0);
				SetPlayerAttachedObject(RobberyInfo[rRobbers][i], 9, 1550, 1, 0.116999, -0.170999, -0.016000, -3.099997, 87.800018, -179.400009, 0.602000, 0.640000, 0.625000, 0, 0);
				ApplyAnimation(RobberyInfo[rRobbers][i], "GOGGLES", "goggles_put_on", 4.1, 0, 0, 0, 0, 0, 1);
				SetPlayerCheckpoint(i, 1106.8306,1693.6279,-41.5111, 1.0);
				if(!Maskara[playerid]) {
					pData[RobberyInfo[rRobbers][i]][pWantedLevel] = 6;
				}

				pData[RobberyInfo[rRobbers][i]][pCrimes]++;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO charges VALUES(null, %i, 'The State', NOW(), 'Bank Robbery')", pData[RobberyInfo[rRobbers][i]][pID]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 6, crimes = crimes + 1 WHERE uid = %i", pData[RobberyInfo[rRobbers][i]][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}

		foreach(new i : Player)
		{
		    if(IsLawEnforcement(i))
		    {
		        SM(i, COLOR_ROYALBLUE, "HQ: A robbery is occurring at the Mulholland Bank. There are %i confirmed robbers.", GetBankRobbers());
			}
		}

        GetDynamicObjectPos(RobberyInfo[rObjects][2], x, y, z);
	    MoveDynamicObject(RobberyInfo[rObjects][2], 1111.616333, 1704.433593, -36.097251, 5.0, 90.000000, 30.500001, -0.299999);
		DestroyDynamicObject(RobberyInfo[rObjects][0]);
	    CreateExplosion(x, y, z, 12, 6.0);
		SCMA(COLOR_LIGHTGREEN, "Breaking News"WHITE": A bank robbery is currently taking place at the Mulholland Bank!");

		//RobberyInfo[rText][0] = CreateDynamic3DTextLabel("[Bank]\n/"WHITE"'lootbox'"TEAL"\nto loot deposit box.", COLOR_TEAL, 1680.2344, -994.6146, 671.0032, 10.0);
		RobberyInfo[rText][1] = CreateDynamic3DTextLabel("[Bank]\n"WHITE"'/lootbox'"TEAL"\nto loot deposit box.", COLOR_TEAL, 1102.3813,1692.8939,-41.7276, 10.0);
		RobberyInfo[rText][2] = CreateDynamic3DTextLabel("[Bank]\n"WHITE"'/lootbox'"TEAL"\nto loot deposit box.", COLOR_TEAL, 1104.6434,1690.8729,-41.7276, 10.0);
		RobberyInfo[rText][3] = CreateDynamic3DTextLabel("[Bank]\n"WHITE"'/lootbox'"TEAL"\nto loot deposit box.", COLOR_TEAL, 1105.8624,1691.8743,-41.7276, 10.0);
		RobberyInfo[rText][4] = CreateDynamic3DTextLabel("[Bank]\n"WHITE"'/lootbox'"TEAL"\nto loot deposit box.", COLOR_TEAL, 1103.2872,1694.2404,-41.7276, 10.0);

		RobberyInfo[rStarted] = 1;
		RobberyInfo[rStolen] = 0;
		RobberyInfo[rPlanning] = 0;
	}
	
	//BIZ
	if(RobberyInfo1[rPlanning1] && objectid == RobberyInfo1[rObjects1][2])
	{
		for(new i = 0; i < MAX_BIZ_ROBBERS; i ++)
		{
		    if(RobberyInfo1[rRobbers1][i] != INVALID_PLAYER_ID)
		    {
			    PlayerPlaySound(RobberyInfo1[rRobbers1][i], 3401, 0.0, 0.0, 0.0);
			    GameTextForPlayer(RobberyInfo1[rRobbers1][i], "~w~FIRST PART OF THE HEIST STARTED", 5000, 1);
				SCM(RobberyInfo1[rRobbers1][i], COLOR_REALRED, "[STORE ROB GUIDE]: GOTO DOOR AND PLANT A BOMB TO CONTINUE THE HEIST./plantdynamite");
			    SetPlayerAttachedObject(RobberyInfo1[rRobbers1][i], 8, 19801, 2, 0.091000, 0.012000, -0.000000, 0.099999, 87.799957, 179.500015, 1.345999, 1.523000, 1.270001, 0, 0);
				SetPlayerAttachedObject(RobberyInfo1[rRobbers1][i], 9, 1550, 1, 0.116999, -0.170999, -0.016000, -3.099997, 87.800018, -179.400009, 0.602000, 0.640000, 0.625000, 0, 0);
				ApplyAnimation(RobberyInfo1[rRobbers1][i], "GOGGLES", "goggles_put_on", 4.1, 0, 0, 0, 0, 0, 1);
				SetPlayerCheckpoint(i, 1309.7664,-884.7972,39.6362, 1.0);
				if(!Maskara[playerid]) {
					pData[RobberyInfo1[rRobbers1][i]][pWantedLevel] = 3;
				}

				pData[RobberyInfo1[rRobbers1][i]][pCrimes]++;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO charges VALUES(null, %i, 'The State', NOW(), 'STORE Robbery')", pData[RobberyInfo1[rRobbers1][i]][pID]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 3, crimes = crimes + 1 WHERE uid = %i", pData[RobberyInfo1[rRobbers1][i]][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}

		foreach(new i : Player)
		{
		    if(IsLawEnforcement(i))
		    {
		        SM(i, COLOR_ROYALBLUE, "HQ: A robbery is occurring at the Mulholland Store. There are %i confirmed robbers.", GetBizRobbers());
			}
		}

        GetDynamicObjectPos(RobberyInfo1[rObjects1][2], x, y, z);
	    DestroyDynamicObject(RobberyInfo1[rObjects1][2]);
	    CreateExplosion(x, y, z, 12, 6.0);
		SCMA(COLOR_LIGHTGREEN, "Breaking News"WHITE": A store robbery is currently taking place at the Mulholland store!");

		RobberyInfo1[rText1][3] = CreateDynamic3DTextLabel("[store]\n"WHITE"'/lootvault'"TEAL"\nto loot deposit box.", COLOR_TEAL, 1322.2205,-881.8317,39.6562, 10.0);
		RobberyInfo1[rText1][4] = CreateDynamic3DTextLabel("[store]\n"WHITE"'/lootvault'"TEAL"\nto loot deposit box.", COLOR_TEAL, 1322.5148,-883.5142,39.6562, 10.0);

		RobberyInfo1[rStarted1] = 1;
		RobberyInfo1[rStolen1] = 0;
		RobberyInfo1[rPlanning1] = 0;
	}
	
	if(RobberyInfo[rStarted] && objectid == RobberyInfo[rObjects][1])
	{
		for(new i = 0; i < MAX_BANK_ROBBERS; i ++)
		{
		    if(RobberyInfo[rRobbers][i] != INVALID_PLAYER_ID)
		    {
			    GameTextForPlayer(RobberyInfo[rRobbers][i], "~w~Heist started", 5000, 1);
			}
		}
        GetDynamicObjectPos(RobberyInfo[rObjects][3], x, y, z);
	    MoveDynamicObject(RobberyInfo[rObjects][3], 1104.869750, 1692.352905, -42.820831, 5.0, 89.699996, 21.600002, 270.000000);
		DestroyDynamicObject(RobberyInfo[rObjects][1]);

	    CreateExplosion(x, y, z, 12, 6.0);
	}
	
	
	if(RobberyInfo1[rStarted1] && objectid == RobberyInfo1[rObjects1][0])
	{
		for(new i = 0; i < MAX_BIZ_ROBBERS; i ++)
		{
		    if(RobberyInfo1[rRobbers1][i] != INVALID_PLAYER_ID)
		    {
			    GameTextForPlayer(RobberyInfo1[rRobbers1][i], "~w~Heist started", 5000, 1);
			}
		}
        GetDynamicObjectPos(RobberyInfo1[rObjects1][0], x, y, z);
	    MoveDynamicObject(RobberyInfo1[rObjects1][1], 1308.9270, -882.4700, 38.6003, 5.0, -90.0000, 24.0000, -1.0000);
		DestroyDynamicObject(RobberyInfo1[rObjects1][0]);

	    CreateExplosion(x, y, z, 12, 6.0);
	}
	
	
	return 1;
}

public OnPlayerSuspectedForAimbot(playerid,hitid,weaponid,warnings)
{
	aimWarnings[playerid]++;
	new str[144], Float:Wstats[BUSTAIM_WSTATS_SHOTS];
	if(warnings & WARNING_PROAIM_TELEPORT)
	{
	    format(str, sizeof(str),"AdmWarning: "YELLOW"[#%i] %s(%i) is using proaim (teleport detected)",aimWarnings[playerid],GetRPName(playerid),playerid);
		SendAdminMessage(COLOR_RED, str);
		BustAim::GetTeleportStats(playerid,Wstats);
		format(str, sizeof(str),"AdmWarning: "YELLOW"Bullet -> Victim Distance(SA Units): 1)%f 2)%f 3)%f",Wstats[0],Wstats[1],Wstats[2]);
		SendAdminMessage(COLOR_RED, str);
	}
	//if(warnings & WARNING_RANDOM_AIM)
	//{
	//    format(str, sizeof(str),"AdmWarning: "YELLOW"[#%i] %s(%i) is suspected to be using aimbot (hits with random aim with %s)",aimWarnings[playerid],GetRPName(playerid),playerid,GetWeaponNameEx(weaponid));
	//	SendAdminMessage(COLOR_RED, str);
	//	BustAim::GetRandomAimStats(playerid,Wstats);
	//	format(str, sizeof(str),"AdmWarning: "YELLOW"Random Aim Offsets: 1)%f 2)%f 3)%f",Wstats[0],Wstats[1],Wstats[2]);
	//	SendAdminMessage(COLOR_RED, str);
	//}
	if(aimWarnings[playerid] >= 2 && pData[playerid][pAdmin] < 7)
	{
		SAM(COLOR_LIGHTRED, "AdmCmd: %s was autokicked by %s, reason: Aimbot", GetRPName(playerid), SERVER_BOT);
 		KickPlayer(playerid);
	}
	return 0;
}


forward OnTaserShoot(playerid);
public OnTaserShoot(playerid)
{
	SetPlayerArmedWeapon(playerid, WEAPON_SILENCED);
	return ClearAnimations(playerid);
}

forward RechargeTazer(playerid);
public RechargeTazer(playerid)
{
	if (pData[playerid][pTazer])
	{
		GivePlayerWeapon(playerid, 23, 1);
	}
}

forward OnbeanBagShoot(playerid);
public OnbeanBagShoot(playerid)
{
	SetPlayerArmedWeapon(playerid, WEAPON_SHOTGUN);
	return ClearAnimations(playerid);
}

forward RechargeBeanBag(playerid);
public RechargeBeanBag(playerid)
{
	if (pData[playerid][pBeanbag])
	{
		GivePlayerWeapon(playerid, 25, 1);
	}
}
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if(hittype == BULLET_HIT_TYPE_VEHICLE)
	{
	    static Float:X, Float:Y, Float:Z;
	    /* Aseve Mushaobs Rodesac Shignit Vinme Zis... */
		GetVehicleModelInfo(GetVehicleModel(hitid), VEHICLE_MODEL_INFO_PETROLCAP, X, Y, Z);

		if(VectorSize(fX-X, fY-Y, fZ-Z) < 0.15)
		{
		    SetVehicleHealth(hitid, -1000.0);
		    return 1;
		}

		/* Carieli Manqanaze Srola */
		for(new i = GetPlayerPoolSize(); i > -1; i--)
		{
			if(GetPlayerVehicleID(i) == hitid && GetPlayerVehicleSeat(i) == 0)
				return 1;
		}

		GetVehicleHealth(hitid, X);
		if(X > 0)
		{
			switch(weaponid)
			{
				case 0 .. 15: SetVehicleHealth(hitid, X - 2);
				case 22 .. 23: SetVehicleHealth(hitid, X - 5);
                case 24: SetVehicleHealth(hitid, X - 5);
				case 25 .. 27: SetVehicleHealth(hitid, X - 6);
				case 28, 29, 32: SetVehicleHealth(hitid, X - 5);
				case 30, 31: SetVehicleHealth(hitid, X - 8);
				case 33, 34: SetVehicleHealth(hitid, X - 8);
				case 35 .. 38: SetVehicleHealth(hitid, X - 0);
				default: return 1;
			}
		}
	}
	if(hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
		if((1 <= EventInfo[eType] <= 2) && pData[playerid][pJoinedEvent])
		{
		    if(!EventInfo[eStarted])
		    {
		     	GameTextForPlayer(playerid, "~r~Don't shoot until the event starts!", 2000, 3);
			    return 0;
			}
			else if(EventInfo[eType] == 2 && pData[hitid][pEventTeam] == pData[playerid][pEventTeam])
			{
	            GameTextForPlayer(playerid, "~r~Do not teamkill!", 2000, 3);
			    return 0;
			}
		}
		if(pData[playerid][pAcceptedHelp])
		{
		    GameTextForPlayer(playerid, "~r~Don't shoot at newbies!", 2000, 3);
		    return 0;
		}
	}
	if (weaponid == 23 && pData[playerid][pTazer] && GetFactionType(playerid) == FACTION_POLICE && GetFactionType(playerid) == FACTION_DOC && GetFactionType(playerid) == FACTION_SHERIFF) {
		ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 0, 0, 0, 0);
		SetTimerEx("OnTaserShoot", 1100, false, "i", playerid);
	    PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);
		SetTimerEx("RechargeTazer", 2000, false, "i", playerid);
		SCM(playerid, COLOR_SYNTAX, "Recharging tazer, please wait...");
	}
	else if (weaponid == 25 && pData[playerid][pBeanbag] && GetFactionType(playerid) == FACTION_POLICE && GetFactionType(playerid) == FACTION_DOC && GetFactionType(playerid) == FACTION_SHERIFF) {
		ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 0, 0, 0, 0);
		SetTimerEx("onBeanBagShoot", 1100, false, "i", playerid);
	    PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);
		SetTimerEx("ReachargeBeanBag", 2000, false, "i", playerid);
		SCM(playerid, COLOR_SYNTAX, "Refilling Bullets, please wait...");
	}
    if(weaponid != 22 && weaponid != 26 && weaponid != 28 && weaponid != 32)
	{
		if(pData[playerid][pClip] > 0)
		{
		    new
				string[128];

		    pData[playerid][pCurrentAmmo] = GetPlayerAmmo(playerid);
		    pData[playerid][pClip]--;

		    format(string, sizeof(string), "%i", pData[playerid][pClip]);
		    PlayerTextDrawSetString(playerid, pData[playerid][pText][5], string);
		}
	}


	if(!PlayerHasWeapon(playerid, weaponid, true) && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked] && gettime() > pData[playerid][pACTime])
	{
	    new
	        string[128];

		format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(weaponid));

		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was auto-kicked by %s, reason: %s", GetRPName(playerid), SERVER_BOT, string);
		//BanPlayer(playerid, SERVER_BOT, string);
		Kick(playerid);
	    return 0;
	}

	if(hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
	    if(!pData[hitid][pJoinedEvent] && pData[hitid][pDueling] == INVALID_PLAYER_ID && pData[hitid][pDueling1] == INVALID_PLAYER_ID)
		{
	    	GetPlayerArmour(hitid, pData[hitid][pArmor]);
		}
	}
	if(hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
	    if(!pData[hitid][pJoinedEvent] && !pData[hitid][pPaintball] && pData[hitid][pDueling] == INVALID_PLAYER_ID&& pData[hitid][pDueling1] == INVALID_PLAYER_ID)
		{
	    	GetPlayerArmour(hitid, pData[hitid][pArmor]);
		}
	}
	// Anti CBug moved to WC_cbugpunishment
    if((23 <= weaponid <= 25) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        new interval, time = NetStats_GetConnectedTime(playerid);

        switch(weaponid)
        {
            case 23: interval = 200;
            case 24: interval = 600;
            case 25: interval = 500;
        }
        if((time - pData[playerid][pCBug]) < interval && pData[playerid][pPaintball] == 0 && pData[playerid][pDueling] == INVALID_PLAYER_ID && !(pData[playerid][pJoinedEvent] && EventInfo[eCS]))
        {
            if((hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID) && !pData[hitid][pAdminDuty])
            {
                ApplyAnimation(playerid, "SWORD", "sword_block", 4.0, 0, 0, 0, 0, 0, 1);
                SetPlayerHealth(playerid, GetPlayerHealth(playerid) - 5.0);
                GameTextForPlayer(playerid, "~r~C-bug is not allowed", 3000, 3);
                SendClientMessage(playerid, COLOR_LIGHTRED, "* Please do not abuse the C-Bug glitch. This action has been reported to the admins.");

                GameTextForPlayer(playerid, "~r~C-bug is not allowed", 3000, 3);
                ApplyAnimation(playerid, "SWORD", "sword_block", 4.0, 0, 0, 0, 0, 0, 1);
                SendAdminMessage(COLOR_YELLOW, "AdmWarning: %s[%i] is possibly abusing C-Bug with a %s.", GetRPName(playerid), playerid, GetWeaponNameEx(weaponid));
                SetPlayerArmedWeapon(playerid, 0);
                pData[playerid][pCBug] = time;
                return 0;
            }
        }

        pData[playerid][pCBug] = time;
    }
	return 1;
}
public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
	if(extraid == MODEL_SELECTION_NEWBIE)
	{
		if(response) {
			SCM(playerid, COLOR_YELLOW, "You have set your own clothes.");
			SetScriptSkin(playerid, modelid);
		}  else {
			if(pData[playerid][pGender] == 1)
				ShowModelSelectionMenuEx(playerid, clothesShopSkinsMale, sizeof(clothesShopSkinsMale), "Select your Skin", MODEL_SELECTION_NEWBIE);
			else 
				ShowModelSelectionMenuEx(playerid, clothesShopSkinsFemale, sizeof(clothesShopSkinsFemale), "Select your Skin", MODEL_SELECTION_NEWBIE);	
		}
	}		
    return 1;
}
public OnPlayerSelectionMenuResponse(playerid, extraid, response, listitem, modelid)
{
	switch(extraid)
	{
		case MODEL_SELECTION_FURNITURE:
	    {
	        if(response)
	        {
	            new houseid = GetInsideHouse(playerid);

	            if(houseid >= 0 && HasFurniturePerms(playerid, houseid))
	            {
		            PurchaseFurniture(playerid, listitem + pData[playerid][pFurnitureIndex]);
				}
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE1);
			}
	    }
   	    case MODEL_SELECTION_CLOTHES:
	    {
	        if(response)
	        {
		        new
					businessid = GetInsideBusiness(playerid);

		        if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
		        {
		            if(BusinessInfo[businessid][bProducts] <= 0)
		            {
		                return SCM(playerid, COLOR_SYNTAX, "This business is out of stock.");
		            }
		            if(pData[playerid][pDonator] == 0 && pData[playerid][pCash] < 50)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy new clothes.");
	                }

				    new price = BusinessInfo[businessid][bPrices][0];

					GivePlayerCash(playerid, -price);

					BusinessInfo[businessid][bCash] += price;
                	BusinessInfo[businessid][bProducts]--;

                	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                	mysql_tquery(connectionID, queryBuffer);

                	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid %s to the shopkeeper and received a new set of clothes.", GetRPName(playerid), FormatNumber(price));
             		SM(playerid, COLOR_WHITE, "You've changed your clothes for $%i.", price);
					SetScriptSkin(playerid, modelid);
		        }
			}
	    }
		case MODEL_SELECTION_CLOTHES1:
	    {
	        if(response)
	        {
				GivePlayerCash(playerid, -5000);
                SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $5000 to the shopkeeper and received a new set of clothes.", GetRPName(playerid));
             	
				SetScriptSkin(playerid, modelid);
		    }
	    }
		case MODEL_SELECTION_LANDOBJECTS:
	    {
	        if(response)
	        {
	            new landid = GetNearbyLand(playerid);

		    	if(landid >= 0 && HasLandPerms(playerid, landid))
				{
					PurchaseLandObject(playerid, landid, listitem + pData[playerid][pFurnitureIndex]);
				}
			}
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_LANDBUILD1);
			}
	    }
   	    case MODEL_SELECTION_CLOTHING:
	    {
	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
	            {
					PreviewClothing(playerid, listitem + pData[playerid][pClothingIndex]);
				}
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE);
			}
 	 	}
   	    case MODEL_SELECTION_CLOTHING1:
	    {
	        if(response)
	        {
				SM(playerid, COLOR_WHITE, "You've changed your clothes for $5000.");
				PreviewClothing(playerid, listitem + pData[playerid][pClothingIndex]);
	        }
 	 	}
      	case MODEL_SELECTION_COPCLOTHING:
	    {
	        if((response))
	        {
	            SetPlayerAttachedObject(playerid, 9, modelid, copClothing[listitem][cBone]);

				pData[playerid][pEditType] = EDIT_COP_CLOTHING;
		        pData[playerid][pSelected] = listitem;

				SCMf(playerid, COLOR_WHITE, "You have selected {FF6347}%s{FFFFFF}. Use the editor to arrange your clothing and click the disk icon to save.", copClothing[listitem][cName]);
        		EditAttachedObject(playerid, 9);
	        }
	    }
    	case MODEL_SELECTION_VEHICLES:
		{
			if(response)
			{
			    pData[playerid][pSelected] = listitem;
			    PurchaseVehicle(playerid);
			}
		}
	}

	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	// Finally... an end to that ANNOYING spectate bug!

	foreach(new i : Player)
	{
	    if(pData[i][pSpectating] == playerid)
	    {
	        SetTimerEx("SpectateUpdate", 500, false, "ii", i, playerid);
	    }
	}

	if((newinteriorid == 0) && IsPlayerInBankRobbery(playerid))
	{
	    PlayerPlaySound(playerid, 3402, 0.0, 0.0, 0.0);
	}

	return 1;
}

stock IsPlayerRunning(playerid)
{
    if(!IsPlayerConnected(playerid) || IsPlayerInAnyVehicle(playerid)) return 0;
    new keys, updown, leftright;
    GetPlayerKeys(playerid, keys, updown, leftright);
    if(keys & KEY_SPRINT && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_USEJETPACK) return 1;
    if(GetPlayerAnimationIndex(playerid))
    {
        new animlib[32], animname[32];
        GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
        if(!strcmp(animlib, "PED"))
        {
			new const names[8][] = { "run_fat", "run_fatold", "run_old", "swat_run", "woman_run", "WOMAN_runbusy", "woman_runpanic", "WOMAN_runsexy" };
			for(new i; i < sizeof(names); i++)
			{
			    if(!strcmp(animname, names[i])) return 1;
			}
        }
    }
    return 0;
}
stock GetWeaponModel(weaponid)
{
    switch(weaponid)
    {
        case 1:
            return 331;

        case 2..8:
            return weaponid+331;

        case 9:
            return 341;

        case 10..15:
            return weaponid+311;

        case 16..18:
            return weaponid+326;

        case 22..29:
            return weaponid+324;

        case 30,31:
            return weaponid+325;

        case 32:
            return 372;

        case 33..45:
            return weaponid+324;

        case 46:
            return 371;
    }
    return 0;
}

forward CheckCarMoving(playerid);
public CheckCarMoving(playerid) {
    if(IsPlayerInAnyVehicle(playerid)) {
        new vehicleid = GetPlayerVehicleID(playerid);
        if(GetVehicleSpeed(vehicleid) > 20.0 )
		{
			if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE) && GetPlayerVehicleSeat(playerid) == 0)
			{
				SendClientMessage(playerid, COLOR_RED, "Manila Reality[BOT]: Turn on the engine by pressing N Warning 1/3");
				RemovePlayerFromVehicle(playerid);
			}
			if(GetVehicleSpeed(vehicleid) > 50.0 )
			{
				if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE) && GetPlayerVehicleSeat(playerid) == 0)
				{
					SendClientMessage(playerid, COLOR_RED, "Manila Reality[BOT]: Turn on the engine by pressing N Warning 2/3");
				}
				if(GetVehicleSpeed(vehicleid) > 80.0 )
				{
					if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE) && GetPlayerVehicleSeat(playerid) == 0)
					{
						SendClientMessage(playerid, COLOR_RED, "Manila Reality[BOT]: Turn on the engine by pressing N Warning 3/3");	
						
					}
				}	
			}		
		}	      
		
    }
    return 1;
}
public OnPlayerUpdate(playerid)
{	

    if(pData[playerid][pKicked]) return 0;
	if(!pData[playerid][pLogged]) return 1;
	static id;
	CheckCarMoving(playerid);
	new vehicled = GetPlayerVehicleID(playerid);

	new currentAntiFall = pData[playerid][pAntiFall];
	
	// Check if the player is in range of the specific point
	if (IsPlayerInRangeOfPoint(playerid, 40.0, -551.5386,-1627.2852,-43.4086) && GetPlayerVirtualWorld(playerid) == 1)
	{
		if (currentAntiFall == 0) 
		{
			pData[playerid][pAntiFall] = 1;
			
		}
	}
	else
	{
		if (currentAntiFall == 1) 
		{
			pData[playerid][pAntiFall] = 0;

		}
	}
	
	if(pData[playerid][pVerifySystem])
	{
		if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1214.9092,-1816.3643,17.9530))
		{
			new rand = random(sizeof(verifyspawns));
			SetFreezePos(playerid, verifyspawns[rand][0], verifyspawns[rand][1], verifyspawns[rand][2]);
			SetPlayerFacingAngle(playerid, 9.8095);
			SM(playerid, COLOR_GREY2,"** Please verify on dc, /getcode here ingame and !linkaccount");
		}
     }
	if ((id = Speed_Nearest(playerid)) != -1 && GetPlayerSpeed(playerid) > SpeedData[id][speedLimit] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsVehicleOwner(playerid, vehicled) && IsEngineVehicle(vehicled) && !pData[playerid][pSpeedTime])
	{
	    if (!IsACruiser(vehicled) && !IsABoat(vehicled) && !IsAPlane(vehicled) && !IsAHelicopter(vehicled))
	    {
	 		new price = 400 + floatround(GetPlayerSpeed(playerid) - SpeedData[id][speedLimit]);
			new str[500];
	   		format(str, sizeof(str), "Speeding (%.0f/%.0f mph)", GetPlayerSpeed(playerid), SpeedData[id][speedLimit]);
	        SetTimerEx("HidePlayerBox", 500, false, "dd", playerid, _:ShowPlayerBox(playerid, 0xFFFFFF66));
    		format(str, sizeof(str), "You have received a %s speeding ticket.", FormatNumber(price));
     		SendClientMessage(playerid, COLOR_SYNTAX, str);
			VehicleInfo[vehicled][vTickets] += price;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicled][vTickets], VehicleInfo[vehicled][vID]);
			mysql_tquery(connectionID, queryBuffer);
			pData[playerid][pSpeedTime] = 5;
		}
	}

	if(pData[playerid][pSkin] == 0 ||  pData[playerid][pSkin] == 74)
	{
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was kicked by bot, reason: using illegal skin.", GetRPName(playerid));
        KickPlayer(playerid);
	}
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 1)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Knuckles ", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Knuckles.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 2)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Golf Club ", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Golf Club.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 3)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Nightstick", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Nightstick.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 4)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Knife", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Knife.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 5)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Baseball Bat", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Baseball Bat.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 6)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Shovel", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Shovel.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 7)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Pool Cue", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Pool Cue.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 8)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Katana", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Katana.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 9)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Chainsaw", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Chainsaw.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 10)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Purple Dildo", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Purple Dildo.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}		
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 11)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Dildo ", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Dildo.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 12)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Vibrator ", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Vibrator.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 13)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Silver Vibrator", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Silver Vibrator.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 14)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Flowers", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Flowers.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 15)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Cane", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Cane.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 16)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Grenade", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Grenade.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 17)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Tear Gase", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Tear Gas.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 18)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Molotov", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Molotov.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 22)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted 9mm", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted 9mm.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 23)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Silenced 9mm", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Silenced 9mm.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 24)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Desert Eagle", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Desert Eagle.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 25)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Shotgun", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Shotgun.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 26)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Sawnoff", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Sawnoff.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 27)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Combat Shotgun", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Combat Shotgun.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 28)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Uzi", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Uzi.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 29)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted MP5", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted MP5.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 30)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted AK-47", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted AK-47.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 31)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted M4", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted M4	.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}		
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 32)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Tec-9", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Tec-9.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 33)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Rifle", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Rifle.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 34)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Sniper ", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Sniper .", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 35)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted RPG", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted RPG.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 36)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Rocket", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Rocket.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 37)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Flamethrower", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Flamethrower.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 38)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Minigun", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Minigun.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 39)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Satchel Charge", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Satchel Charge.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 40)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Detonator", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Detonator.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}		
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 41)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Spraycan", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Spraycan.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}		
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 42)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Fire Extinguisher", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Fire Extinguisher.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 43)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Camera", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Camera.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 44)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Night Vision Goggles ", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Night Vision Goggles .", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 45)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Thermal Goggles", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Thermal Goggles.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}	
	if(pData[playerid][pLevel] < 2 && GetPlayerWeapon(playerid) == 46)
	{
		new szString[528];

		format(szString, sizeof(szString), " %s using a gun while level 1 and weapon restricted Parachute", GetRPName(playerid));
		SendDiscordMessage(23, szString); 
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by SECURITY[BOT], reason: using a gun while level 1 or weapon restricted Parachute.", GetRPName(playerid));
		
		BanPlayer(playerid,SERVER_BOT ,"using a gun while level 1 and weapon restricted");
		ResetPlayerWeaponsEx(playerid);
		
	}

	if (playerid != INVALID_PLAYER_ID)
    {
        // The WEAPON_MINIGUN constant is pre-defined in the standard library and is equal to 38.
        if (GetPlayerWeapon(playerid) == WEAPON_MINIGUN)
        {
            //Ban if they have a minigun
			SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by bot, reason: using restricted guns (minigun)", GetRPName(playerid));
            RemovePlayerWeapon(playerid, 38);
			new szString[528];
			format(szString, sizeof(szString), "%s is banned using minigun." , GetRPName(playerid));
			SendDiscordMessage(23, szString); 
			BanPlayer(playerid,SERVER_BOT ,"using a minigun");
        }
        if (GetPlayerWeapon(playerid) == 28)
        {
            //Ban if they have a minigun
			SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by bot, reason: using restricted guns (MAC 10)", GetRPName(playerid));
            RemovePlayerWeapon(playerid, 28);
			new szString[528];
			format(szString, sizeof(szString), "%s is banned using MAC 10." , GetRPName(playerid));
			SendDiscordMessage(23, szString); 
			
			BanPlayer(playerid,SERVER_BOT ,"using a MAC 10");
        }
		if (GetPlayerWeapon(playerid) == 4)
        {
            //Ban if they have a minigun
			SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by bot, reason: using restricted guns(Knife) ", GetRPName(playerid));
            RemovePlayerWeapon(playerid, 4);
			
			new szString[528];
			format(szString, sizeof(szString), "%s is possibly using Knife." , GetRPName(playerid));
			SendDiscordMessage(23, szString); 
			BanPlayer(playerid,SERVER_BOT ,"using a Knife");
        }
		if (GetPlayerWeapon(playerid) == 18)
        {
            //Ban if they have a minigun
			SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by bot, reason: using restricted guns (Molotov Cocktail)", GetRPName(playerid));
			RemovePlayerWeapon(playerid, 18);
 
			new szString[528];
			format(szString, sizeof(szString), "%s is possibly using Molotov Cocktail.", GetRPName(playerid));
			SendDiscordMessage(23, szString);
			
			BanPlayer(playerid,SERVER_BOT ,"using a Molotov");
        }
		if (GetPlayerWeapon(playerid) == 16)
        {
            //Ban if they have a minigun
			SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by bot, reason: using restricted guns (Grenade) ", GetRPName(playerid));
			RemovePlayerWeapon(playerid, 16);
          
			new szString[528];
			format(szString, sizeof(szString), "%sis possibly using Grenade." , GetRPName(playerid));
			SendDiscordMessage(23, szString); 
			
			BanPlayer(playerid,SERVER_BOT ,"using a Grenade");
        }		
		if (GetPlayerWeapon(playerid) == 39)
        {
            //Ban if they have a minigun
			SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by bot, reason: using restricted guns (Satchel Charge) ", GetRPName(playerid));
			RemovePlayerWeapon(playerid, 39);
			new szString[528];
			format(szString, sizeof(szString), "%s is possibly using Satchel Charge." , GetRPName(playerid));
			SendDiscordMessage(23, szString); 
			
			BanPlayer(playerid,SERVER_BOT ,"using a Satchel");
        }		
		if (GetPlayerWeapon(playerid) == 17)
        {
            //Ban if they have a minigun
			SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by bot, reason: using restricted guns (Tear Gas) ", GetRPName(playerid));
			RemovePlayerWeapon(playerid, 17);
			new szString[528];
			format(szString, sizeof(szString), "%s is possibly using Tear Gas." , GetRPName(playerid));
			SendDiscordMessage(23, szString); 
			BanPlayer(playerid,SERVER_BOT ,"using a Tear GAS");
        }
		if (GetPlayerWeapon(playerid) == 37)
        {
            //Ban if they have a minigun
			SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by bot, reason: using restricted guns (Flamethrower) ", GetRPName(playerid));    
			RemovePlayerWeapon(playerid, 37);
			
			new szString[528];
			format(szString, sizeof(szString), "%s is possibly using Flamethrower." , GetRPName(playerid));
			SendDiscordMessage(23, szString); 
			BanPlayer(playerid,SERVER_BOT ,"using a Flamethrower");
        }	
		if (GetPlayerWeapon(playerid) == 35)
        {
			new playerName[MAX_PLAYER_NAME];
   			GetPlayerName(playerid, playerName, sizeof(playerName));

   			if (strcmp(playerName, "Princess_Gonzales", false) != 0) // Check if the name is NOT "Princess_Gonzales"
   			{
   			    // Ban if they have a minigun (RPG)
   			    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by bot, reason: using restricted guns (RPG) ", GetRPName(playerid));
   			    RemovePlayerWeapon(playerid, 35);

   			    new szString[528];
   			    format(szString, sizeof(szString), "%s is possibly using RPG." , GetRPName(playerid));
   			    SendDiscordMessage(23, szString); 
   			    BanPlayer(playerid, SERVER_BOT, "using a RPG");
   			}
        }		
		if (GetPlayerWeapon(playerid) == 36)
        {
            //Ban if they have a minigun
			SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by bot, reason: using restricted guns (HS Rocket) ", GetRPName(playerid));	
			RemovePlayerWeapon(playerid, 36);
            
			new szString[528];
			format(szString, sizeof(szString), "%s is possibly using HS Rocket.", GetRPName(playerid));
			SendDiscordMessage(23, szString); 
			
			BanPlayer(playerid,SERVER_BOT ,"using a HS Rocket.");
        }		
		if (GetPlayerWeapon(playerid) == 26 )
        {
            //Ban if they have a minigun
			SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by bot, reason: using restricted guns (Sawnoff Shotgun) ", GetRPName(playerid));
			RemovePlayerWeapon(playerid, 26);	
           
			new szString[528];
			format(szString, sizeof(szString), "%s is possibly using Sawnoff Shotgun." , GetRPName(playerid));
			SendDiscordMessage(22, szString); 
			BanPlayer(playerid,SERVER_BOT ,"using a Sawnoff");
        }	
		
		
		if (GetPlayerWeapon(playerid) == WEAPON_CHAINSAW)
        {
            //Ban if they have a minigun
			SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by bot, reason: using restricted guns (chainsaw) ", GetRPName(playerid));
            RemovePlayerWeapon(playerid, 9);
			
			new szString[528];
			format(szString, sizeof(szString), "%s is possibly using chainsaw." , GetRPName(playerid));
			SendDiscordMessage(23, szString); 
			
			BanPlayer(playerid,SERVER_BOT ,"using a chainsaw");
        }
    }
	
	if(IsPlayerInRangeOfPoint(playerid, 1.0, -565.4570,-1507.2900,-33.7427))
	{
		SetPlayerCheckpoint(playerid, -556.3998,-1626.5662,-44.3355, 3.0);
		GameTextForPlayer(playerid, "~r~ Goto ~w ~to the ~y ~point ~w~ and start ~y~mining", 2000, 4);
	}	
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 881.3807,-15.0641,64.1149))
	{
		if(lumberman{playerid} == true)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
			SetPlayerSkin(playerid, pData[playerid][pSkin]);
			Lumber1[playerid] = 0;
			lumberman{playerid} = false;
			Lumbered[playerid] = 0;
			Lumberedx[playerid] = 0;
		}
		DisablePlayerCheckpoint(playerid);
		CancelActiveCheckpoint(playerid);
		pData[playerid][pRobCash] = 0;
		PlayerHasCrate[playerid] = 0;
	}	
	

	new keys, ud, lr, string[128];
	GetPlayerKeys(playerid, keys, ud, lr);
	if(pData[playerid][pHospital] && GetPlayerAnimationIndex(playerid) != 385) ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
	if(GetPlayerMoney(playerid) != pData[playerid][pCash])
	{
	    ResetPlayerMoney(playerid);
	    GivePlayerMoney(playerid, pData[playerid][pCash]);
	}
	if(GetPlayerScore(playerid) != pData[playerid][pLevel])
	{
	    SetPlayerScore(playerid, pData[playerid][pLevel]);
	}
	/*if(GetPlayerWantedLevel(playerid) != pData[playerid][pWantedLevel])
	{
	    SetPlayerWantedLevel(playerid, pData[playerid][pWantedLevel]);
	}*/
	if((GetPlayerAnimationIndex(playerid) != 1209) && ((pData[playerid][pInjured] && GetVehicleModel(GetPlayerVehicleID(playerid)) != 416) || (pData[playerid][pTazedTime] > 0 && pData[playerid][pDraggedBy] == INVALID_PLAYER_ID)))
	{
	    ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.1, 0, 0, 0, 1, 0, 1);
	}
	if(GetPlayerWeapon(playerid) > 1 && pData[playerid][pInjured])
	{
		SetPlayerArmedWeapon(playerid, 0);
	}
    if(!GetPlayerInterior(playerid))
	{
     	SetPlayerTime(playerid, gWorldTime, 0);
	}
	else
	{
	    new garageid;

		if((garageid = GetInsideGarage(playerid)) >= 0 && GarageInfo[garageid][gType] == 2)
		    SetPlayerTime(playerid, 0, 0);
	    else
          	SetPlayerTime(playerid, 12, 0);
	}
	if((keys & KEY_FIRE) && IsFireActive() && GetFactionType(playerid) == FACTION_MEDIC)
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z,
	        Float:vx,
	        Float:vy,
	        Float:vz,
	        Float:cx,
	        Float:cy,
	        Float:cz;

	    if(GetPlayerWeapon(playerid) == 42 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    for(new i = 0; i < MAX_FIRES; i ++)
		    {
		        if(IsPlayerInRangeOfDynamicObject(playerid, gFireObjects[i], 4.0))
		        {
		            gFireHealth[i] = gFireHealth[i] - 1.0;

		            if(gFireHealth[i] <= 0.0)
		            {
		                pData[playerid][pTotalFires]++;
			            GetDynamicObjectPos(gFireObjects[i], x, y, z);
			            GameTextForPlayer(playerid, "~r~Fire extinguished", 2000, 3);

			            SetTimerEx("DestroyWater", 2000, false, "i", CreateDynamicObject(18744, x, y, z - 0.2, 0.0, 0.0, 0.0));
						DestroyDynamicObject(gFireObjects[i]);

						gFireObjects[i] = INVALID_OBJECT_ID;
						gFireHealth[i] = 0.0;
					}
		        }
			}
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 407 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 544))
		{
		    GetPlayerCameraFrontVector(playerid, vx, vy, vz);
		    GetPlayerCameraPos(playerid, cx, cy, cz);

		    for(new i = 0; i < MAX_FIRES; i ++)
		    {
		        if(IsPlayerInRangeOfDynamicObject(playerid, gFireObjects[i], 12.0))
		        {
		            GetDynamicObjectPos(gFireObjects[i], x, y, z);

					if(DistanceCameraTargetToLocation(cx, cy, cz, x, y, z + 2.5, vx, vy, vz) < 12.0)
	   				{
	   				    gFireHealth[i] = gFireHealth[i] - 0.5;

	   				    if(gFireHealth[i] <= 0.0)
		            	{
		   			    	GetDynamicObjectPos(gFireObjects[i], x, y, z);
		   			    	GameTextForPlayer(playerid, "~r~Fire extinguished", 2000, 3);

				            SetTimerEx("DestroyWater", 2000, false, "i", CreateDynamicObject(18744, x, y, z - 0.2, 0.0, 0.0, 0.0));
							DestroyDynamicObject(gFireObjects[i]);

							gFireObjects[i] = INVALID_OBJECT_ID;
							gFireHealth[i] = 0.0;
						}
					}
			  	}
		    }
		}

		if(!IsFireActive())
		{
		    new amount = 250;
		    foreach(new i : Player)
		    {
		        if(GetFactionType(i) == FACTION_MEDIC && IsPlayerInRangeOfPoint(playerid, 20.0, x, y, z))
		        {
		            SM(i, COLOR_AQUA, "Well done! You helped put out the fire and received $%i .", amount);
		            GivePlayerCash(i, amount);
		        }
			}
			gFires = 0;
		}
	}

	if(pData[playerid][pCurrentWeapon] != GetPlayerWeapon(playerid))
	{
	    pData[playerid][pCurrentWeapon] = GetPlayerWeapon(playerid);
	    pData[playerid][pCurrentAmmo] = GetPlayerAmmo(playerid);

	    pData[playerid][pACAmmo] = pData[playerid][pCurrentAmmo];
	    pData[playerid][pACFired] = 0;
		pData[playerid][pClip] = GetWeaponClipSize(pData[playerid][pCurrentWeapon]);

		// Weapon hacks
		if((gAnticheat) && pData[playerid][pAdmin] < 2)
		{
			if(pData[playerid][pCurrentWeapon] > 1 && !PlayerHasWeapon(playerid, pData[playerid][pCurrentWeapon], true) && !pData[playerid][pKicked])
			{
			    pData[playerid][pACWarns]++;

			    if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
				{
				    SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] has a desynced %s.", GetRPName(playerid), playerid, GetWeaponNameEx(pData[playerid][pCurrentWeapon]));
				    Log_Write("log_cheat", "%s (uid: %i) had a desynced %s with %i ammunition.", GetPlayerNameEx(playerid), pData[playerid][pID], GetWeaponNameEx(pData[playerid][pCurrentWeapon]), GetPlayerAmmo(playerid));
					new szString[528];
					format(szString, sizeof(szString), "%s[%i] has a desynced %s.", GetRPName(playerid), playerid, GetWeaponNameEx(pData[playerid][pCurrentWeapon]));
					SendDiscordMessage(22, szString); 
					
				}
				else
				{
					format(string, sizeof(string), "Weapon hacks (%s)", GetWeaponNameEx(pData[playerid][pCurrentWeapon]));

					SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by %s, reason: %s", GetRPName(playerid), SERVER_BOT, string);
					BanPlayer(playerid, SERVER_BOT, string);
					//Kick(playerid);
				}
			}
		}
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && pData[playerid][pCurrentWeapon] > 0 && GetWeaponClipSize(pData[playerid][pCurrentWeapon]) > 0 && !pData[playerid][pToggleHUD] && !pData[playerid][pToggleTextdraws] && pData[playerid][pAmmoWeapon] != pData[playerid][pCurrentWeapon])
    {
        PlayerTextDrawShow(playerid, pData[playerid][pText][5]);
    }
    else
    {
        PlayerTextDrawHide(playerid, pData[playerid][pText][5]);
	}

	if(pData[playerid][pCurrentAmmo] != GetPlayerAmmo(playerid))
	{
	    if(pData[playerid][pCurrentAmmo] > GetPlayerAmmo(playerid))
	    {
	        switch(GetPlayerWeapon(playerid))
	        {
	            case 22, 26, 28, 32:
	            {
			        pData[playerid][pClip] -= pData[playerid][pCurrentAmmo] - GetPlayerAmmo(playerid);
				}
			}

	   		if(pData[playerid][pClip] < 0)
      		{
       			pData[playerid][pClip] = 0;
			}
		}

	    pData[playerid][pCurrentAmmo] = GetPlayerAmmo(playerid);

		if(!pData[playerid][pJoinedEvent] && pData[playerid][pDueling] == INVALID_PLAYER_ID&& pData[playerid][pDueling1] == INVALID_PLAYER_ID && !(pData[playerid][pTazer] && GetPlayerWeapon(playerid) == 23))
		{
		    if((22 <= pData[playerid][pCurrentWeapon] <= 34) && pData[playerid][pAmmoType] != AMMOTYPE_NORMAL && pData[playerid][pAmmoWeapon] == pData[playerid][pCurrentWeapon] && 0 <= pData[playerid][pCurrentAmmo] <= 9999)
		    {
		        // Ammo hack detection.
		        if(pData[playerid][pAmmoType] != AMMOTYPE_NORMAL && PlayerHasWeapon(playerid, pData[playerid][pAmmoWeapon]))
				{
				    new weapon, ammo;

				    GetPlayerWeaponData(playerid, weaponSlotIDs[pData[playerid][pAmmoWeapon]], weapon, ammo);

				    if((ammo > 0) && (pData[playerid][pAmmoType] == AMMOTYPE_HP && ammo > pData[playerid][pHPAmmo]) || (pData[playerid][pAmmoType] == AMMOTYPE_POISON && ammo > pData[playerid][pPoisonAmmo]) || (pData[playerid][pAmmoType] == AMMOTYPE_FMJ && ammo > pData[playerid][pFMJAmmo]))
				    {
				        new oldammo;

				        if(pData[playerid][pAmmoType] == AMMOTYPE_HP) {
				            oldammo = pData[playerid][pHPAmmo];
				        } else if(pData[playerid][pAmmoType] == AMMOTYPE_POISON) {
				            oldammo = pData[playerid][pPoisonAmmo];
				        } else if(pData[playerid][pAmmoType] == AMMOTYPE_FMJ) {
				            oldammo = pData[playerid][pFMJAmmo];
				        }

						if(gAnticheat && !pData[playerid][pKicked])
						{
					        pData[playerid][pACWarns]++;

						    if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
						    {
						        SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] may be hacking ammo. (old: %i, new: %i)", GetRPName(playerid), playerid, oldammo, ammo);
						        Log_Write("log_cheat", "%s (uid: %i) possibly hacked ammo. (old: %i, new: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], oldammo, ammo);
							}
							else
							{
						    	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was auto-kicked by %s, reason: Ammo hacking", GetRPName(playerid), SERVER_BOT);
						    	//BanPlayer(playerid, SERVER_BOT, "Ammo hacking");
						    	Kick(playerid);
							}

							pData[playerid][pCurrentAmmo] = oldammo;
					        SetPlayerAmmo(playerid, pData[playerid][pAmmoWeapon], oldammo);
						}
				    }
				}

		        if(pData[playerid][pAmmoType] != AMMOTYPE_NORMAL)
		        {
			        if(IsPlayerInAnyVehicle(playerid))
			        {
			            new weaponid;
			            GetPlayerWeaponData(playerid, weaponSlotIDs[pData[playerid][pCurrentWeapon]], weaponid, pData[playerid][pCurrentAmmo]);
			        }

			        switch(pData[playerid][pAmmoType])
			        {
			            case AMMOTYPE_HP:
   	           				pData[playerid][pHPAmmo] = pData[playerid][pCurrentAmmo];
		        	    case AMMOTYPE_POISON:
		                	pData[playerid][pPoisonAmmo] = pData[playerid][pCurrentAmmo];
						case AMMOTYPE_FMJ:
					    	pData[playerid][pFMJAmmo] = pData[playerid][pCurrentAmmo];
		        	}
		        }

		        if(pData[playerid][pCurrentAmmo] == 0 && pData[playerid][pAmmoType] != AMMOTYPE_NORMAL)
		        {
		            pData[playerid][pAmmoType] = AMMOTYPE_NORMAL;
				    pData[playerid][pAmmoWeapon] = 0;

		        	SM(playerid, COLOR_WHITE, "** Your %s is now using normal ammunition again as you ran out of special ammo.", GetWeaponNameEx(pData[playerid][pCurrentWeapon]));
		        	SetPlayerWeapons(playerid);
				}
			}
		}
	}

	if(GetPlayerWeaponState(playerid) == WEAPONSTATE_RELOADING)
	{
	    if(GetPlayerWeapon(playerid) != 25 && GetPlayerWeapon(playerid) != 33 && GetPlayerWeapon(playerid) != 34)
	    {
		    pData[playerid][pReloading] = 1;
		}

	    pData[playerid][pACFired] = 0;
	}

	if(pData[playerid][pReloading] && GetPlayerWeaponState(playerid) != WEAPONSTATE_RELOADING)
	{
		pData[playerid][pClip] = GetWeaponClipSize(GetPlayerWeapon(playerid));
		pData[playerid][pReloading] = 0;
	}

	new vehicleid = GetPlayerVehicleID(playerid);

	if(pData[playerid][pCurrentVehicle] != vehicleid)
	{
	    pData[playerid][pCurrentVehicle] = vehicleid;
	    pData[playerid][pVehicleCount]++;

	    if((!IsABoat(vehicleid) && GetVehicleModel(vehicleid) != 539) && pData[playerid][pVehicleCount] >= 4 && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
	    {
	        SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was auto-kicked by %s, reason: Car warping", GetRPName(playerid), SERVER_BOT);
	        //BanPlayer(playerid, SERVER_BOT, "Car warping");
	        Kick(playerid);
	        return 0;
		}
	}

	if((44 <= GetPlayerWeapon(playerid) <= 45) && keys & KEY_FIRE)
	{
	    return 0;
	}

	// Armor hacking
	if(!pData[playerid][pJoinedEvent] && pData[playerid][pDueling] == INVALID_PLAYER_ID&& pData[playerid][pDueling1] == INVALID_PLAYER_ID)
	{
	    // TODO: rewrite.
	}

	new Float:CarHealth[MAX_PLAYERS];
	if(IsPlayerInAnyVehicle(playerid) == 1 && ExBJck[playerid] == 0)
	{
		new Float:TempCarHealth;
		GetVehicleHealth(GetPlayerVehicleID(playerid), TempCarHealth);
		new Float:Difference = floatsub(CarHealth[playerid], TempCarHealth);
		if((floatcmp(CarHealth[playerid], TempCarHealth) == 1) && (floatcmp(Difference,100.0) == 1))
		{
		    Difference = floatdiv(Difference, 10.0);
		    new Float:OldHealth;
		    GetPlayerHealth(playerid, OldHealth);
		    SetPlayerHealth(playerid, floatsub(OldHealth, Difference));
		}
		CarHealth[playerid] = TempCarHealth;
	}
	else
	{
		CarHealth[playerid] = 0.0;
	}

	if(!pData[playerid][pToggleHUD] && !pData[playerid][pToggleTextdraws] && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		new
			Float:health,
			Float:armour;

		GetPlayerHealth(playerid, health);
		GetPlayerArmour(playerid, armour);

		if(floatround(armour) > 0)
		{
			format(string, sizeof(string), "%.0f", armour);
			PlayerTextDrawSetString(playerid, pData[playerid][pText][3], string);
			PlayerTextDrawShow(playerid, pData[playerid][pText][3]);
		}
		else
		{
		    PlayerTextDrawHide(playerid, pData[playerid][pText][3]);
		}

		format(string, sizeof(string), "%.0f", health);
		PlayerTextDrawSetString(playerid, pData[playerid][pText][4], string);

		if(pData[playerid][pReloading]) {
		    string = "0";
		} else {
			format(string, sizeof(string), "%i", pData[playerid][pClip]);
		}
		PlayerTextDrawSetString(playerid, pData[playerid][pText][5], string);
	}
	pData[playerid][pLastUpdate] = gettime();

	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    VehicleInfo[vehicleid][vColor1] = color1;
	    VehicleInfo[vehicleid][vColor2] = color2;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", color1, color2, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    VehicleInfo[vehicleid][vPaintjob] = paintjobid;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", paintjobid, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(!GetPlayerInterior(playerid) && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
	{
	    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was auto-kicked by %s, reason: Illegal modding", GetRPName(playerid), SERVER_BOT);
	    //BanPlayer(playerid, SERVER_BOT, "Illegal modding");
	    Kick(playerid);
	    return 0;
	}

	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    new slotid = GetVehicleComponentType(componentid);

	    VehicleInfo[vehicleid][vMods][slotid] = componentid;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_%i = %i WHERE id = %i", slotid + 1, componentid, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	if(adminVehicle{vehicleid})
	{
	    DestroyVehicleEx(vehicleid);
	    adminVehicle{vehicleid} = false;
	}
	if(IsValidDynamicObject(vehicleSiren[vehicleid]))
	{
	    DestroyDynamicObject(vehicleSiren[vehicleid]);
	    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
	}
	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
	if(IsValidDynamic3DTextLabel(DonatorCallSign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(DonatorCallSign[vehicleid]);
		DonatorCallSign[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}
	if((VehicleInfo[vehicleid][vID] > 0 && VehicleInfo[vehicleid][vOwnerID] > 0) || (VehicleInfo[vehicleid][vGang] >= 0))
	{
	    ReloadVehicle(vehicleid);
	    //DespawnVehicle(vehicleid);

	    if(VehicleInfo[vehicleid][vGang] >= 0)
	    {
	        vehicleFuel[vehicleid] = 100;
		}
	}
	else
	{
     	if(VehicleInfo[vehicleid][vID] > 0 && VehicleInfo[vehicleid][vHealth] > 300.0)
     	{
    		SetVehicleHealth(vehicleid, VehicleInfo[vehicleid][vHealth]);
     	}

		vehicleFuel[vehicleid] = 100;
	}
	VehicleGoods[vehicleid] = -1;
	VehicleInfo[vehicleid][vMeal] = 0;
	vehicleStream[vehicleid][0] = 0;
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(!pData[playerid][pApproved]) return 0;
	if(pData[playerid][pLogged] && !pData[playerid][pKicked])
	{	
		if(strfind(text, "admin", true) != -1 || strfind(text, "helper", true) != -1 || strfind(text, "bug", true) != -1 ||  
		strfind(text, "gz", true) != -1 || strfind(text, "greenzone", true) != -1 || strfind(text, "nonrp", true) != -1 || 
		strfind(text, "safezone", true) != -1 || strfind(text, "safe zone", true) != -1 || strfind(text, "green zone", true) != -1 || 
		strfind(text, "dmer", true) != -1 || strfind(text, "anghel", true) != -1 || 
		strfind(text, "rp", true) != -1 || strfind(text, "discord", true) != -1 || strfind(text, "roleplay", true) != -1 || 
		strfind(text, "mod", true) != -1 || strfind(text, "discordia", true) != -1 ||
		strfind(text, "vdm", true) != -1 || 
		strfind(text, "randompunching", true) != -1 || strfind(text, "random punching", true) != -1 || strfind(text, "random punch", true) != -1 ||
		strfind(text, "mods", true) != -1 || strfind(text, "cleo", true) != -1 || strfind(text, "meta", true) != -1 || 
		strfind(text, "atems", true) != -1 || strfind(text, "delay", true) != -1 || strfind(text, "rolyo", true) != -1 || 
		strfind(text, "server", true) != -1 || strfind(text, "(ooc)", true) != -1 || strfind(text, "groupchat", true) != -1
		|| strfind(text, "dc", true) != -1|| strfind(text, "gc", true) != -1)
		{
			pData[playerid][pMuted] = 20;
			GivePlayerCash(playerid, -200);
			SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for 20 seconds due to suspected to say OOC TERM IN IC.");
			SAM(COLOR_YELLOW, ""RED"SECURITY[BOT] %s"WHITE"[%i] is using an words for ooc in ic [%s].", GetRPName(playerid), playerid, text);
			new szString[528];
			format(szString, sizeof(szString), "%s [%i] is using an words for ooc in ic [%s].", GetRPName(playerid), playerid, text);
			SendDiscordMessage(32, szString);

			
			return 0;
		}	
		if(pData[playerid][pHospital])
	    {
	        SCM(playerid, COLOR_LIGHTRED, "** You are currently in the hospital. Chatting is disabled.");
	        return 0;
		}
		if(pData[playerid][pMuted])
		{
		    SCM(playerid, COLOR_LIGHTRED, "** You are currently muted. Chatting is disabled.");
	        return 0;
		}
		if(++pData[playerid][pSpamTime] >= 4 && pData[playerid][pAdmin] < 2)
		{
		    pData[playerid][pMuted] = 10;
		    SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for ten seconds due to suspected spamming.");
		    return 0;
		}
		if(pData[playerid][pAdmin] < 7 && CheckServerAd(text))
		{
			new string[128];
			format(string,sizeof(string),"{AA3333}AdWarning{FFFF00}: %s (ID: %d): '{AA3333}%s{FFFF00}'.", GetPlayerNameEx(playerid), playerid, text);
			SAM(COLOR_YELLOW, string, 2);
			//Log_Write("logs/hack.log", string);
        	if(++pData[playerid][pAdvertWarnings] > MAX_ANTICHEAT_WARNINGS)
        	{
        	    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was auto-kicked by %s, reason: Server advertisement", GetRPName(playerid), SERVER_BOT);
	    		//BanPlayer(playerid, SERVER_BOT, "Server advertisement");
				Kick(playerid);
        	}
			return 0;
		}
     	if(Maskara[playerid])
    	{
        	new string[128]; // String of GOD
        	format(string, sizeof(string), "Stranger(B%d): %s", MaskaraID[playerid], text);

			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
     		SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "(Says) %s", text);
        	return 0;
    	}
	   	if(GetPlayerState(playerid) == 1 && pData[playerid][pChatAnim])
		{

		}
	    if(pData[playerid][pJoinedEvent])
	    {
	        foreach(new i : Player)
      	  	{
                if(pData[i][pJoinedEvent])
 	           	{
           	     	if(EventInfo[eType] == 2)
           	     	{
    	            	SM(i, COLOR_LIGHTORANGE, "(( {%06x}%s:{F7A763} %s ))", GetPlayerColor(playerid) >>> 8, GetRPName(playerid), text);
					}
					else
					{
					    SM(i, COLOR_LIGHTORANGE, "(( %s: %s ))", GetRPName(playerid), text);
       	     		}
				}
			}
		}
		else
		{
			new
			    string[144];

	        if(pData[playerid][pCallLine] != INVALID_PLAYER_ID)
	        {
	            if(pData[playerid][pCallLine] != playerid && pData[playerid][pCallStage] == 2)
	            {
	                if(!strcmp(pData[playerid][pAccent], "None", true))
			        {
		                SM(pData[playerid][pCallLine], COLOR_YELLOW, "(cellphone) %s: %s", GetRPName(playerid), text);
					}
					else
					{
					    SM(pData[playerid][pCallLine], COLOR_YELLOW, "(%s) (cellphone) %s: %s", pData[playerid][pAccent], GetRPName(playerid), text);
					}
		        }

		        if(!strcmp(pData[playerid][pAccent], "None", true))
		        {
					format(string, sizeof(string), "(cellphone) %s: %s", GetRPName(playerid), text);
					new szString[528];
					format(szString, sizeof(szString), "(cellphone) %s: %s", GetRPName(playerid), text);
					SendDiscordMessage(4, szString);
				}
				else
				{
				    format(string, sizeof(string), "(%s) (cellphone) %s: %s", pData[playerid][pAccent], GetRPName(playerid), text);
					new szString[528];
					format(szString, sizeof(szString), "(%s) (cellphone) %s: %ss", pData[playerid][pAccent], GetRPName(playerid), text);
					SendDiscordMessage(4, szString);
				}

				SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);

				if(pData[playerid][pCallLine] == playerid)
				{
				    switch(pData[playerid][pCallStage])
				    {
				        case 911:
				        {
					        if(!strcmp(text, "police", true))
					        {
					            SCM(playerid, COLOR_ROYALBLUE, "Dispatch: This is the Los Santos Police Department. What is your emergency?");
					        	pData[playerid][pCallStage] = 912;
					        }
							else if(!strcmp(text, "medic", true))
					        {
					            SCM(playerid, COLOR_DOCTOR, "Dispatch: This is the Los Santos Fire & Medical Department. What is your emergency?");
					        	pData[playerid][pCallStage] = 913;
					        }
					        else
					        {
					            SCM(playerid, COLOR_YELLOW, "Dispatch: Sorry? I don't know what you mean... Enter 'police' or 'medic'.");
							}
						}
						case 912:
						{
						    foreach(new i : Player)
						    {
						        if(IsLawEnforcement(i))
						        {
						            SM(i, COLOR_ROYALBLUE, "Emergency Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), pData[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Location: %s", GetPlayerZoneName(playerid));
						            SM(i, COLOR_GREY2, "Emergency: %s", text);
						            SM(i, COLOR_WHITE, "** Use '/trackcall %i' to track the caller's location.", playerid);
						        }
						    }

							strcpy(pData[playerid][pEmergency], text, 128);

                            pData[playerid][pEmergencyCall] = 120;
                            pData[playerid][pEmergencyType] = FACTION_POLICE;

						    SCM(playerid, COLOR_ROYALBLUE, "Dispatch: All units in the area have been notified. Thank you for your time.");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 1414:
						{
						    foreach(new i : Player)
						    {
						        if(IsLawEnforcement(i))
						        {
						            SM(i, COLOR_ROYALBLUE, "Emergency Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), pData[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Location: %s", GetPlayerZoneName(playerid));
						            SM(i, COLOR_GREY2, "Emergency: %s", text);
						            SM(i, COLOR_WHITE, "** Use '/trackcall %i' to track the caller's location.", playerid);
						        }
						    }

							strcpy(pData[playerid][pEmergency], text, 128);

                            pData[playerid][pEmergencyCall] = 120;
                            pData[playerid][pEmergencyType] = FACTION_SHERIFF;

						    SCM(playerid, COLOR_ROYALBLUE, "Dispatch: All units in the area have been notified. Thank you for your time.");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 913:
						{
						    foreach(new i : Player)
						    {
						        if(GetFactionType(i) == FACTION_MEDIC)
						        {
						            SM(i, COLOR_DOCTOR, "Emergency Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), pData[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Location: %s", GetPlayerZoneName(playerid));
						            SM(i, COLOR_GREY2, "Emergency: %s", text);
						            SM(i, COLOR_WHITE, "** Use '/trackcall %i' to track the caller's location.", playerid);
						        }
						    }

						    strcpy(pData[playerid][pEmergency], text, 128);

						    pData[playerid][pEmergencyCall] = 120;
						    pData[playerid][pEmergencyType] = FACTION_MEDIC;

						    SCM(playerid, COLOR_DOCTOR, "Dispatch: All units in the area have been notified. Thank you for your time.");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 6397:
						{
						    foreach(new i : Player)
						    {
						        if(GetFactionType(i) == FACTION_NEWS)
						        {
						            SM(i, SERVER_COLOR, "News Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), pData[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Message: %s", text);
						        }
						    }

						    SCM(playerid, SERVER_COLOR, "News Team: Thank you. We will get back to you shortly!");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 6324:
						{
						    foreach(new i : Player)
						    {
						        if(GetFactionType(i) == FACTION_MECHANIC)
						        {
						            SM(i, COLOR_DOCTOR, "Mechanic Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), pData[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Location: %s", GetPlayerZoneName(playerid));
						            SM(i, COLOR_GREY2, "Message: %s", text);
						            SM(i, COLOR_WHITE, "** Use '/trackcall %i' to track the caller's location.", playerid);
						        }
						    }

						    strcpy(pData[playerid][pEmergency], text, 128);

						    pData[playerid][pEmergencyCall] = 120;
						    pData[playerid][pEmergencyType] = FACTION_MECHANIC;

						    SCM(playerid, COLOR_DISPATCH, "Thank you. We will alert all mechanics on duty.");
						    HangupCall(playerid, HANGUP_USER);
						}
						case 8294:
						{
						    foreach(new i : Player)
						    {
						        if(PlayerHasJob(i, JOB_TAXIDRIVER))
						        {
						            SM(i, SERVER_COLOR, "Taxi Hotline:");
						            SM(i, COLOR_GREY2, "Caller: %s, Number: %i", GetRPName(playerid), pData[playerid][pPhone]);
						            SM(i, COLOR_GREY2, "Location: %s", text);
						            SM(i, COLOR_WHITE, "** Use '/takecall %i' in order to take this call.", playerid);
						        }
						    }

							pData[playerid][pTaxiCall] = 60;
						    SCM(playerid, COLOR_YELLOW, "Dispatch: Thank you. We will alert all taxi drivers on duty.");
						    HangupCall(playerid, HANGUP_USER);
						}
					}

				}
			}
			else if(pData[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
			{
			    foreach(new i : Player)
				{
					if(!pData[i][pToggleNews])
					{
						if(GetFactionType(playerid) == FACTION_NEWS)
  					  	{
		    			    SM(i, 0x489348FF, "Live Reporter %s: %s", GetRPName(playerid), text);
						}
						else
						{
    						SM(i, 0x489348FF, "Live Guest %s: %s", GetRPName(playerid), text);
						}
					}
				}
			}
			else
			{
			    if(pData[playerid][pHelper] > 0 && pData[playerid][pAcceptedHelp])
			    {
			        callcmd::b(playerid, text);
			    }
			    else if(IsPlayerInAnyVehicle(playerid) && CarWindows[GetPlayerVehicleID(playerid)])
			    {
			        foreach(new i : Player)
			        {
			            if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
			            {
        			        if(!strcmp(pData[playerid][pAccent], "None", true))
        			        {
        						SM(i, COLOR_GREY1, "(windows) %s says: %s", GetRPName(playerid), text);
								new szString[528];
								format(szString, sizeof(szString), "(windows) %s says: %s", GetRPName(playerid), text);
								SendDiscordMessage(3, szString);
        					}
        					else
        					{
        					    SM(i, COLOR_GREY1, "(windows) (%s) %s says: %s", pData[playerid][pAccent], GetRPName(playerid), text);
								new szString[528];
								format(szString, sizeof(szString), "(windows) (%s) %s says: %s", pData[playerid][pAccent], GetRPName(playerid), text);
								SendDiscordMessage(3, szString);
        					}
			            }
			        }
			    }
			    else
			    {
			        new string2[144];
				    if(!pData[playerid][pAdminDuty])
					{
						if(!strcmp(pData[playerid][pAccent], "None", true))
						{
							format(string, sizeof(string), "%s says: %s", GetRPName(playerid), text);
							format(string2, sizeof(string2), "says: %s", text);
							new szString[528];
							format(szString, sizeof(szString), "%s says: %s", GetRPName(playerid), text);
							SendDiscordMessage(3, szString);
						}
						else
						{
							format(string, sizeof(string), "(%s) %s says: %s", pData[playerid][pAccent], GetRPName(playerid), text);
							format(string2, sizeof(string2), "says: %s", text);
							
							new szString[528];
							format(szString, sizeof(szString), "(%s) %s says: %s", pData[playerid][pAccent], GetRPName(playerid), text);
							SendDiscordMessage(3, szString);
						
						}
						SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
						SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "(Says) %s", text);
					}
					else
					{
						format(string, sizeof(string), "(( [ADMIN] %s: %s ))", GetRPName(playerid), text);
						SendProximityFadeMessage(playerid, 15.0, string, COLOR_GREEN, COLOR_GREEN, COLOR_GREEN, COLOR_GREEN, COLOR_GREEN);
						new szString[528];
						format(szString, sizeof(szString), "[ADMIN] %s: %s", GetRPName(playerid), text);
						SendDiscordMessage(3, szString);
					}
					
				}
				//ReturnChatAnimation(playerid, text);
			}
		}
	}
    pData[playerid][pAFKPos][0] = 0.0;
    pData[playerid][pAFKPos][1] = 0.0;
    pData[playerid][pAFKPos][2] = 0.0;
	return 0;
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
    if(pData[playerid][pKicked]) return 0;
	if(!pData[playerid][pApproved]) return 0;
	if(!pData[playerid][pLogged])
	{
	    SCM(playerid, COLOR_RED, "You cannot use commands if you're not logged in.");
		return 0;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_WASTED)
	{
	    SCM(playerid, COLOR_LIGHTRED, "** You are currently dead. Commands are disabled.");
    	return 0;
	}
	if(pData[playerid][pMuted])
	{
	    SCM(playerid, COLOR_LIGHTRED, "** You are currently muted. Commands are disabled.");
        return 0;
	}
	if(++pData[playerid][pSpamTime] >= 4 && pData[playerid][pAdmin] < 2)
	{
	    pData[playerid][pMuted] = 10;
	    SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for ten seconds due to suspected flooding.");
	    return 0;
	}
	if(pData[playerid][pAdmin] < 7 && CheckServerAd(params))
	{
		new string[128];
		format(string,sizeof(string),"{AA3333}AdWarning{FFFF00}: %s (ID: %d): '{AA3333}/%s %s{FFFF00}'.", GetPlayerNameEx(playerid), playerid, cmd, params);
		SAM(COLOR_YELLOW, string, 2);
		//Log_Write("logs/hack.log", string);
        pData[playerid][pAdvertWarnings] ++;
		return 0;
	}

	pData[playerid][pAFKPos][0] = 0.0;
    pData[playerid][pAFKPos][1] = 0.0;
    pData[playerid][pAFKPos][2] = 0.0;
	return 1;
}
/*
forward DEATHACTOREX(playerid, targetid);
public DEATHACTOREX(playerid, targetid)
{
	if(IsValidActor(pData[targetid][pDeathActor]))
		DestroyActor(pData[targetid][pDeathActor]);
	if(IsValidDynamic3DTextLabel(pData[targetid][pDeathInfo]))
		DestroyDynamic3DTextLabel(pData[targetid][pDeathInfo]);

	ClearAnimations(playerid, 1);
	AddToPaycheck(playerid, 5200);
	SM(playerid, COLOR_AQUA, "You have cleaned %s's body and earned "SVRCLR"$5200{CCFFFF} .", GetRPName(targetid));
    return 1;
}
*/
forward ANNHIDE(playerid);
public ANNHIDE(playerid)
{
	for(new i = 0; i < 3; i ++)
	{
		TextDrawHideForPlayer(playerid, ANN[i]);
	}
    return 1;
}
forward Downhide(playerid);
public Downhide(playerid)
{

	TextDrawHideForPlayer(playerid, DOWNTD);
    return 1;
}

forward Downhide1(playerid);
public Downhide1(playerid)
{
	TextDrawHideForPlayer(playerid, Tagastd1);
	TextDrawHideForPlayer(playerid, Tagastd2);
    return 1;
}

forward LTO2(playerid);
public LTO2(playerid)
{
    TextDrawHideForPlayer(playerid, LTO_FAIL_0); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, LTO_FAIL_1); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, LTO_FAIL_2); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, LTO_FAIL_3); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, LTO_FAIL_4); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, LTO_FAIL_5); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, LTO_FAIL_6); // Destroy the created text draw.
    return 1;
}
forward LTO1(playerid);
public LTO1(playerid)
{
    TextDrawHideForPlayer(playerid, LTO_PASS_0); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, LTO_PASS_1); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, LTO_PASS_2); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, LTO_PASS_3); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, LTO_PASS_4); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, LTO_PASS_5); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, LTO_PASS_6); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, LTO_PASS_7); // Destroy the created text draw.
    return 1;
}

forward HOUSE1(playerid);
public HOUSE1(playerid)
{
	PlayerTextDrawHide(playerid, HouseNear_7[playerid]);
    TextDrawHideForPlayer(playerid, HouseNear_8); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, HouseNear_6); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, HouseNear_5); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, HouseNear_4); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, HouseNear_3); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, HouseNear_2); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, HouseNear_1); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, HouseNear_0); // Destroy the created text draw.
    return 1;
}
forward ERROR1(playerid);
public ERROR1(playerid)
{
    TextDrawHideForPlayer(playerid, Error_0); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, Error_1); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, Error_2); // Destroy the created text draw.
    TextDrawHideForPlayer(playerid, Error_3); // Destroy the created text draw.
    return 1;
}
forward PAYCHECK1(playerid);
public PAYCHECK1(playerid)
{
	TextDrawHideForPlayer(playerid, Paycheck_0);
	TextDrawHideForPlayer(playerid, Paycheck_1);
	TextDrawHideForPlayer(playerid, Paycheck_2);
	TextDrawHideForPlayer(playerid, Paycheck_3);
	TextDrawHideForPlayer(playerid, Paycheck_4);
	TextDrawHideForPlayer(playerid, Paycheck_5);
	TextDrawHideForPlayer(playerid, Paycheck_6);
	TextDrawHideForPlayer(playerid, Paycheck_7);
	TextDrawHideForPlayer(playerid, Paycheck_8);
	TextDrawHideForPlayer(playerid, Paycheck_9);
	TextDrawHideForPlayer(playerid, Paycheck_10);
	TextDrawHideForPlayer(playerid, Paycheck_11);
    return 1;
}
public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
	if(result == -1)
	{
		//SCM(playerid, COLOR_WHITE, ""LIGHTRED"Error:"WHITE" Sorry, that command doesn't exist. Use "TEAL"/help"WHITE" for a list of commands.");
		TextDrawShowForPlayer(playerid, Error_0);
		TextDrawShowForPlayer(playerid, Error_1);
		TextDrawShowForPlayer(playerid, Error_2);
		TextDrawShowForPlayer(playerid, Error_3);
		SetTimerEx("ERROR1", 3000, false, "i", playerid);
		PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
	}
	return 1;
}
forward ResetSpamCount(playerid);
public ResetSpamCount(playerid) {
    spam_count[playerid] = 0; // reset spam count for the player
    warn_count[playerid] = 0;
}
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if (newkeys & KEY_SPRINT && pData[playerid][pAdmin] < 12) { // check if player pressed spacebar
        spam_count[playerid]++; // increment spam count for the player
        SetTimerEx("ResetSpamCount", 1000, false, "i", playerid); // set timer to reset spam count after 1 second
        if(spam_count[playerid] >= SPAM_LIMIT) // check if player exceeded spam limit
        {
            warn_count[playerid]++;
            SM(playerid, COLOR_RED, "You have been warned [%i / 3] for possibly using SprintBind Cleo.", warn_count[playerid]);
        }
        if(warn_count[playerid] >= WARN_LIMIT)
        {
            SMA(COLOR_RED, "%s has been kicked for possibly using a sprintbind.", GetRPName(playerid)); // notify all online players
            ResetSpamCount(playerid); // reset spam count for the player
            Kick(playerid); // kick player from server
        }
    }
	if(newkeys & KEY_YES)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 1143.5814,-1329.3719,13.6072))
		{
			if(GetFactionType(playerid) == FACTION_MEDIC)
			{
				TeleportToCoords(playerid, -4424.3740,1004.7736,987.6859,163.9904, 0, 0);	
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("pressunfreeze", 1500, false, "i", playerid);		
			}
			else
			{
				return SCM(playerid, COLOR_GREY, "Ypu can't enter here this is for EMS / PARAMEDICS! only.");
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 5.0, -4424.3740,1004.7736,987.6859))
		{
			TeleportToCoords(playerid, 1139.9274,-1327.5906,13.8680,358.2741, 0, 0);	
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("pressunfreeze", 1500, false, "i", playerid);		
		}
		
		if(IsPlayerInRangeOfPoint(playerid, 0.5, 1403.2880,-31.2895,1000.9833))
		{
			ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 3.1, 0, 0, 0, 0,0, 1);			
			DoorOpen(playerid);
			SetTimer("DoorClose", 4000, 0);
			return 1;
		}	
		if(IsPlayerInRangeOfPoint(playerid, 0.5, 1401.4780,-28.1239,1001.0305))
		{	
			ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 3.1, 0, 0, 0, 0,0, 1);			
			DoorOpen(playerid);
			SetTimer("DoorClose", 3500, 0);
			return 1;

		}

		if(IsPlayerInRangeOfPoint(playerid, 0.5, 1383.0781,-32.3078,1001.0132))
		{
			if(GetFactionType(playerid) == FACTION_MEDIC)
			{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 3.1, 0, 0, 0, 0,0, 1);			
					DoorOpen1ems(playerid);
					SetTimer("DoorClose1ems", 4000, 0);
					return 1;
			}
			else
			{
				return SCM(playerid, COLOR_GREY, "   You're not a EMS / PARAMEDICS!");
				
			}
		}	
		if(IsPlayerInRangeOfPoint(playerid, 0.5,1381.9084,-28.9259,1001.0233))
		{	
			if(GetFactionType(playerid) == FACTION_MEDIC)
			{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 3.1, 0, 0, 0, 0,0, 1);			
					DoorOpen1ems(playerid);
					SetTimer("DoorClose1ems", 4000, 0);
					return 1;
			}
			else
			{
				return SCM(playerid, COLOR_GREY, "   You're not a EMS / PARAMEDICS!");
				
			}

		}
		
		if(IsPlayerInRangeOfPoint(playerid, 0.5, 2158.9473,-2183.3958,18.2544))
		{
			if(GetFactionType(playerid) == FACTION_MECHANIC)
			{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 3.1, 0, 0, 0, 0,0, 1);			
					DoorOpen2(playerid);
					SetTimer("DoorClose2", 4000, 0);
					return 1;
			}
			else
			{
				return SCM(playerid, COLOR_GREY, " [ACCESS DENIED]: You're not a MECHANIC");
				
			}
		}	
		if(IsPlayerInRangeOfPoint(playerid, 0.5, 2158.8992,-2180.7622,18.2544))
		{
			if(GetFactionType(playerid) == FACTION_MECHANIC)
			{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 3.1, 0, 0, 0, 0,0, 1);			
					DoorOpen2(playerid);
					SetTimer("DoorClose2", 4000, 0);
					return 1;
			}
			else
			{
				return SCM(playerid, COLOR_GREY, " [ACCESS DENIED]: You're not a MECHANIC");
				
			}
		}

		if(IsPlayerInRangeOfPoint(playerid, 0.5, 52.7235,2036.4354,733.8567))
		{
			if(GetFactionType(playerid) == FACTION_POLICE)
			{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 3.1, 0, 0, 0, 0,0, 1);			
					DoorOpen1pd(playerid);
					SetTimer("DoorClose1pd", 3000, 0);
					return 1;
			}
			else
			{
				return SCM(playerid, COLOR_GREY, " [ACCESS DENIED]: You're not a  Police officer");
				
			}
		}	
		if(IsPlayerInRangeOfPoint(playerid, 0.5, 50.2402,2037.5435,733.8567))
		{
			if(GetFactionType(playerid) == FACTION_POLICE)
			{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 3.1, 0, 0, 0, 0,0, 1);			
					DoorOpen1pd(playerid);
					SetTimer("DoorClose1pd", 3000, 0);
					return 1;
			}
			else
			{
				return SCM(playerid, COLOR_GREY, " [ACCESS DENIED]: You're not a Police officer");
				
			}
		}	
		
		if(IsPlayerInRangeOfPoint(playerid, 0.5, 27.9198,2043.5488,733.8567))
		{
			if(GetFactionType(playerid) == FACTION_POLICE)
			{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 3.1, 0, 0, 0, 0,0, 1);			
					DoorOpen2pd(playerid);
					SetTimer("DoorClose2pd", 3000, 0);
					return 1;
			}
			else
			{
				return SCM(playerid, COLOR_GREY, " [ACCESS DENIED]: You're not a Police officer");
				
			}
		}	
		if(IsPlayerInRangeOfPoint(playerid, 0.5, 26.6055,2040.8046,733.8567))
		{
			if(GetFactionType(playerid) == FACTION_POLICE)
			{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 3.1, 0, 0, 0, 0,0, 1);			
					DoorOpen2pd(playerid);
					SetTimer("DoorClose2pd", 3000, 0);
					return 1;
			}
			else
			{
				return SCM(playerid, COLOR_GREY, " [ACCESS DENIED]: You're not a  Police officer");
				
			}
		}	
		
		if(IsPlayerInRangeOfPoint(playerid, 0.5, 15.5232,2038.9283,733.8567))
		{
			if(GetFactionType(playerid) == FACTION_POLICE)
			{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 3.1, 0, 0, 0, 0,0, 1);			
					DoorOpen3pd(playerid);
					SetTimer("DoorClose3pd", 3000, 0);
					return 1;
			}
			else
			{
				return SCM(playerid, COLOR_GREY, " [ACCESS DENIED]: You're not a  Police officer");
				
			}
		}	
		if(IsPlayerInRangeOfPoint(playerid, 0.5, 17.8429,2040.7131,733.8567))
		{
			if(GetFactionType(playerid) == FACTION_POLICE)
			{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 3.1, 0, 0, 0, 0,0, 1);			
					DoorOpen3pd(playerid);
					SetTimer("DoorClose3pd", 3000, 0);
					return 1;
			}
			else
			{
				return SCM(playerid, COLOR_GREY, " [ACCESS DENIED]: You're not a  Police officer");
				
			}
		}	

		if(IsPlayerInRangeOfPoint(playerid, 0.5, 41.3750,2053.0115,733.8567))
		{
			if(GetFactionType(playerid) == FACTION_POLICE)
			{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 3.1, 0, 0, 0, 0,0, 1);			
					DoorOpen4pd(playerid);
					SetTimer("DoorClose4pd", 3000, 0);
					return 1;
			}
			else
			{
				return SCM(playerid, COLOR_GREY, " [ACCESS DENIED]: You're not a  Police officer");
				
			}
		}	
		if(IsPlayerInRangeOfPoint(playerid, 0.5, 37.0507,2055.3733,733.8567))
		{
			if(GetFactionType(playerid) == FACTION_POLICE)
			{
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 3.1, 0, 0, 0, 0,0, 1);			
					DoorOpen4pd(playerid);
					SetTimer("DoorClose4pd", 3000, 0);
					return 1;
			}
			else
			{
				return SCM(playerid, COLOR_GREY, " [ACCESS DENIED]: You're not a  Police officer");
				
			}
		}	
		
		
	}

	if(newkeys & KEY_FIRE)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
			new victimid = GetClosestPlayer(playerid);
			if(TazerHolster[playerid] == 0)
			{
				if(IsLawEnforcement(victimid))
				{
					SendClientMessage(playerid, COLOR_GREY, "   You can't Tazer Cops !");
					return 1;
				}
				if((22 <= GetPlayerWeapon(victimid) <= 38) && IsPlayerAimingEx(victimid))
				{
					SCM(playerid, COLOR_SYNTAX, "Rush-tazing is forbidden. This means tazing a player who is aiming a gun at you.");
					return 1;
				}
				if(IsPlayerInAnyVehicle(victimid))
				{
					SCM(playerid, COLOR_SYNTAX, "You can't taze a player who is in a vehicle.");
					return 1;
				}
				ApplyAnimation(playerid,"KNIFE","knife_3",4.1,0,1,1,0,0,1);
				if(IsPlayerConnected(victimid))
				{
					if(GetDistanceBetweenPlayers(playerid,victimid) < 2)
					{
						TogglePlayerControllable(victimid, 0);
						pData[victimid][pTazedTime] = 20;
						TogglePlayerControllable(victimid, 0);
			
						ApplyAnimation(victimid, "SWAT", "gnstwall_injurd", 4.1, 0, 0, 0, 1, 0, 1);
						PlayerPlaySound(victimid, 6003, 0.0, 0.0, 0.0);
						GameTextForPlayer(victimid, "~r~YOU HAVE BEEN TAZED...", 3000, 6);
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s was succesfully tase %s to capture.", GetRPName(playerid), GetRPName(victimid));
				
						SM(victimid, COLOR_AQUA, "You've been "SVRCLR"stunned{CCFFFF} with electricity by %s's tazer.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "You have stunned %s with electricity. They are disabled for 10 seconds.", GetRPName(victimid));
						return 1;
					}
				}
			}
		}	
		return 1;
	}
	if(newkeys & KEY_YES)
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
    		if(IsPlayerInRangeOfLocker(playerid, pData[playerid][pFaction]))
    		{
				switch(FactionInfo[pData[playerid][pFaction]][fType])
				{
				    case FACTION_POLICE, FACTION_SHERIFF, FACTION_MEDIC, FACTION_FEDERAL, FACTION_TACO:
				    {
				        ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Toggle duty\nEquipment\nUniforms\nClothing", "Select", "Cancel");
					}
					case FACTION_GOVERNMENT, FACTION_NEWS:
					{
					    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Equipment\nUniforms\nClothing", "Select", "Cancel");
					}
			 		case FACTION_DOC:
					{
				        ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Equipment\nUniforms\nClothing", "Select", "Cancel");
					}
			 		case FACTION_MECHANIC:
					{
					    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, ""SVRCLR"Locker", "Toggle duty\nEquipment\nUniforms", "Select", "Cancel");
					}
					case FACTION_HITMAN:
					{
					    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Order weapons\nChange clothes", "Select", "Cancel");
					}
				}
			}
		}
	}
	if(newkeys & KEY_NO)
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        if(PlayerHasJob(playerid, JOB_BUTCHER))
	        {
	            if(IsPlayerInButchergArea(playerid))
	            {
	                if(pData[playerid][pButcherTime] > 0)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "You are chopping already. Wait until you are done.");
	                }
	                if(pData[playerid][pButcherMeat] > 0 && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "You need to drop off your current meat first.");
	                }

	                GameTextForPlayer(playerid, "~w~Chopping...", 8000, 3);
	                ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
	                DisablePlayerCheckpoint(playerid);
	                pData[playerid][pButcherTime] = 8;
	            }
	        }
	        if(PlayerHasJob(playerid, JOB_MINER))
	        {
	            if(IsPlayerInMiningArea(playerid))
	            {
	                if(pData[playerid][pMiningTime] > 0)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "You are mining already. Wait until you are done.");
	                }
	                if(pData[playerid][pMiningRock] > 0 && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "You need to drop off your current rock first.");
	                }

	                GameTextForPlayer(playerid, "~w~Mining...", 8000, 3);
	                ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.1, 1, 0, 0, 0, 0, 1);

	                DisablePlayerCheckpoint(playerid);
	                SetPlayerAttachedObject(playerid, 9, 337, 6);

	                pData[playerid][pMiningTime] = 8;
	            }
	        }
	        if(PlayerHasJob(playerid, JOB_Demolition))
	        {
	            if(IsPlayerInDemolitionArea(playerid))
	            {
	                if(pData[playerid][pDemolitionTime] > 0)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "Wait until you are done.");
	                }
	                if(pData[playerid][pDemolition] > 0 && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "You need to drop off your current rock first.");
	                }

	                ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.1, 1, 0, 0, 0, 0, 1);

	                DisablePlayerCheckpoint(playerid);
	                SetPlayerAttachedObject(playerid, 9, 19631, 6);

	                pData[playerid][pDemolitionTime] = 10;
	            }
	        }
			for(new i = 0; i < sizeof(jobLocations); i ++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3.0, jobLocations[i][jobX], jobLocations[i][jobY], jobLocations[i][jobZ]))
			    {
					if(pData[playerid][pFaction] >= 1)
					{
						return SCM(playerid, COLOR_SYNTAX, "You are apart of any faction at the moment. you can't do other job");
					}
			        if(pData[playerid][pJob] != JOB_NONE)
			        {
			            if(pData[playerid][pDonator] >= 2)
			        	{
			        	    if(pData[playerid][pSecondJob] != JOB_NONE)
			        	    {
			        	        return SCM(playerid, COLOR_SYNTAX, "You have two jobs already. Please quit one of them before getting another one.");
			        	    }
			        	    if(pData[playerid][pJob] == i)
			        	    {
			        	        return SCM(playerid, COLOR_SYNTAX, "You have this job already.");
			        	    }


			        	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = %i WHERE uid = %i", i, pData[playerid][pID]);
							mysql_tquery(connectionID, queryBuffer);

							pData[playerid][pSecondJob] = i;
							SM(playerid, COLOR_AQUA, "You are now a {0080FF}%s{CCFFFF}. Use /jobhelp for a list of commands related to your new job.", jobLocations[i][jobName]);
			            }
			            else
			            {
			            	SCM(playerid, COLOR_SYNTAX, "You have a job already. Please quit your current job before getting another one.");
						}

						return 1;
					}

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = %i WHERE uid = %i", i, pData[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);

					pData[playerid][pJob] = i;
					SM(playerid, COLOR_AQUA, "You are now a {0080FF}%s{CCFFFF}. Use /jobhelp for a list of commands related to your new job.", jobLocations[i][jobName]);
					return 1;
				}
			}
        	if(IsPlayerInRangeOfPoint(playerid, 4.0, 1392.4878,-25.0938,1001.0132))  // LS
        	{
        		ShowPlayerDialog(playerid, DIALOG_HOSPITAL, DIALOG_STYLE_LIST, "Hospital", "Bandage (4,000)\nMedkit (8,000)\nPainkiller (5,000)", "Select", "Cancel");
			}

			if(IsPlayaerInBshot(playerid))
			{
			    new count;
				foreach(new i : Player)
				{
					if(IsTacoVendor(i) && pData[i][pDuty] == 1)
					{
						count++;
					}
				}
				if(count > 0)
				{
					return SCM(playerid, COLOR_GREY2, "There is a Taco Faction Just buy to them.");
				}
				ShowPlayerDialog(playerid, DIALOG_TACOSHOP, DIALOG_STYLE_LIST, "Select a meal", "Burger\nBurrito\nCoke", "Select", "Close");
			}
			//ems counter
			if(IsPlayerInRangeOfPoint(playerid, 4.0, 2055.5212,1099.9314,1717.2209))
        	{
				new count;
				foreach(new i : Player)
				{
					if(IsEms(i) && pData[i][pDuty] == 1)
					{
						count++;
					}
				}
				if(count > 0)
				{
					return SCM(playerid, COLOR_GREY2, "There is a EMS Faction Just buy to them.");
				}

				ShowPlayerDialog(playerid, DIALOG_PHARMACY, DIALOG_STYLE_LIST, "The Mercury Drug", "Painkillers (5000)\nMedkit(15000)\nBandage(10000)", "Select", "Cancel");
			}
			//mechanic counter
			if(IsPlayerInRangeOfPoint(playerid, 4.0, 2870.6211,-1966.9380,11.1119))
        	{
				new count;
				foreach(new i : Player)
				{
					if(IsMechanic(i) && pData[i][pDuty] == 1)
					{
						count++;
					}
				}
				if(count > 0)
				{
					return SCM(playerid, COLOR_GREY2, "There is a Meachanic Faction Just buy to them.");
				}
        		ShowPlayerDialog(playerid, DIALOG_MECHANIC, DIALOG_STYLE_LIST, "Mechanic", "Repairkit ($10,000)\n Gascan (2,000)", "Select", "Cancel");
			}
			if(IsPlayerInRangeOfPoint(playerid, 4.0, 2050.3113, -1911.2911, 12.8366))
			{
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT tickets, modelid FROM vehicles WHERE ownerid = %i AND impounded = 1", pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_DMVRELEASE, playerid);
			}
		}
		if(GetNearbyVen(playerid) >= 0)
		{
			ShowPlayerDialog(playerid, DIALOG_VENDOR, DIALOG_STYLE_LIST, ""TEAL"Street Food", "Burger "GREEN"85 PHP"WHITE"\nSISIG "GREEN"150 PHP"WHITE"\nPIATTOS "GREEN"25 PHP"WHITE"\nDONUT "GREEN"55 PHP"WHITE"\nBUKO JUICE "GREEN"20 PHP"WHITE"\nPINEAPPLE JUICE "GREEN"50 PHP"WHITE"\nSPRITE "GREEN"28 PHP"WHITE"\nNATURE SPRING "GREEN"15 PHP"WHITE"", "Proceed", "Back");
	     	return 1;
		}
		if(GetNearbyBar(playerid) >= 0)
		{
			ShowPlayerDialog(playerid, DIALOG_BAR, DIALOG_STYLE_LIST, "BAR", "Water ($25)\nSprunk ($50)\nBeer ($250)\nWine ($500)\nWhiskey ($500)", "Select", "Cancel");
	     	return 1;
		}
		if(IsAtChopPlace(playerid))
	    {
			if(lumberman[playerid] != false)
			{
	        	if(LumberJacking[playerid] == 1) return 1;
	        	if(Lumber1[playerid] == 1) return 1;
				if (PRESSED(KEY_NO))
				{
					ApplyAnimation(playerid,"CHAINSAW","CSAW_1",4.0, 1, 0, 0, 0, 0, 1);
					LumberJacking[playerid] = 1;
					SetTimerEx("StopAnim1", 2000, 0, "i", playerid);
				}
		  	}
	   	}
	}
	// skating
	if(pData[playerid][pSkating] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
	    //static bool:act;
	    SetPlayerArmedWeapon(playerid, 0);
        ApplyAnimationEx(playerid, "SKATE","skate_sprint",4.1,1,1,1,1,1);
        if(!pData[playerid][pSkateAct])
		{
            pData[playerid][pSkateAct] = true;
            RemovePlayerAttachedObject(playerid, 5);
            DestroyDynamicObject(pData[playerid][pSkateObj]);
            pData[playerid][pSkateObj] = CreateDynamicObject(19878,0,0,0,0,0,0, .playerid = playerid);
            AttachDynamicObjectToPlayer(pData[playerid][pSkateObj], playerid, -0.2,0,-0.9,0,0,90);
	    }
        if(oldkeys & KEY_NO)
		{
            ApplyAnimationEx(playerid, "CARRY","crry_prtial",4.0,0,0,0,0,0);
            if(pData[playerid][pSkateAct])
			{
				pData[playerid][pSkating] = false;
	            DestroyDynamicObject(pData[playerid][pSkateObj]);
	            RemovePlayerAttachedObject(playerid, 5);
	            PlayerPlaySound(playerid,21000,0,0,0);
	            SendClientMessage(playerid, COLOR_AQUA, "You are no longer skating.");
           }
        }
   	}
	
 	if(pData[playerid][pBrokenLeg] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
		if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP))
		{
			ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);

			if((gettime() - pData[playerid][pLastDamage]) < 3) {
				
				pData[playerid][pLastDamage] = gettime();
			}
		}
	}
 	
	// Vehicle Tank Explode
	if(PRESSED(KEY_FIRE) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		new
			Float: vehPos[3],
			Float: vehAngle,
			Float: capOffsets[3];
		for(new vehicleID = 1; vehicleID <= MAX_VEHICLES; ++vehicleID)
		{
			if(GetVehiclePos(vehicleID, vehPos[0], vehPos[1], vehPos[2]))
			{
				GetVehicleZAngle(vehicleID, vehAngle);

				if(GetPetrolcapOffsets(GetVehicleModel(vehicleID), capOffsets[0], capOffsets[1], capOffsets[2]))
				{
					vehPos[0] += (floatcos(vehAngle, degrees) * capOffsets[0]) - (floatsin(vehAngle, degrees) * capOffsets[1]);
					vehPos[1] += (floatsin(vehAngle, degrees) * capOffsets[0]) + (floatcos(vehAngle, degrees) * capOffsets[1]);
					vehPos[2] += capOffsets[2];

					if(IsPlayerAimingAtPoint(playerid, vehPos[0], vehPos[1], vehPos[2], 0.1))
					{
						SetVehicleHealth(vehicleID, 0.0);
						CreateExplosion(vehPos[0], vehPos[1], vehPos[2], 0, random(3) + 4.0);
						break;
					}
				}
			}
		}
	}
	if(!pCBugging[playerid] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && pData[playerid][pDueling] == INVALID_PLAYER_ID)
	{
	    if(!pData[playerid][pJoinedEvent])
		{
			if(PRESSED(KEY_FIRE))
			{
				switch(GetPlayerWeapon(playerid))
				{
					case WEAPON_DEAGLE, WEAPON_SHOTGUN, WEAPON_SNIPER:
					{
						ptsLastFiredWeapon[playerid] = gettime();
					}
				}
			}
			else if(PRESSED(KEY_CROUCH))
			{
				if((gettime() - ptsLastFiredWeapon[playerid]) < 1)
				{
				  	new Float:health;

	    			GetPlayerHealth(playerid, health);
		    		SetPlayerHealth(playerid, health - 9.0);
					//ApplyAnimationEx(playerid, "RIOT", "RIOT_ANGRY", 4.1, 0, 0, 0, 0, 0);
					pCBugging[playerid] = true;
					ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 4.1, 1, 0, 0, 0, 1000);
					KillTimer(ptmCBugFreezeOver[playerid]);
					ptmCBugFreezeOver[playerid] = SetTimerEx("CBugFreezeOver", 1500, false, "i", playerid);
				}
			}
		}
	    if(pData[playerid][pJoinedEvent] && !EventInfo[eCS])
		{
			if(PRESSED(KEY_FIRE))
			{
				switch(GetPlayerWeapon(playerid))
				{
					case WEAPON_DEAGLE, WEAPON_SHOTGUN, WEAPON_SNIPER:
					{
						ptsLastFiredWeapon[playerid] = gettime();
					}
				}
			}
		}
	}
	if(newkeys & KEY_SPRINT)
	{
	    if(pData[playerid][pLoopAnim])
	    {
	        pData[playerid][pLoopAnim] = 0;

		    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
		    TextDrawHideForPlayer(playerid, AnimationTD);
		}
		if(pData[playerid][pCP] == CHECKPOINT_MINING)
		{
			GameTextForPlayer(playerid, "~r~Dont Run or Jummp", 3000, 3);
			GivePlayerHealth(playerid, -1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
		}
		if(pData[playerid][pCP] == CHECKPOINT_BUTCHER)
		{
			GameTextForPlayer(playerid, "~r~Dont Run or Jummp", 3000, 3);
			GivePlayerHealth(playerid, -1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
		}
		if(PlayerHasCrate[playerid] == 1)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
		}
		if(pData[playerid][pCP] == CHECKPOINT_Demolition)
		{
		
			GameTextForPlayer(playerid, "~r~Dont Run or Jummp", 3000, 3);
			GivePlayerHealth(playerid, -1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
		}
	}
	if(newkeys & KEY_JUMP)
	{
		if(pData[playerid][pCP] == CHECKPOINT_MINING)
		{
			GameTextForPlayer(playerid, "~r~Dont Run or Jummp", 3000, 3);
			GivePlayerHealth(playerid, -1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);			
		}
		if(pData[playerid][pCP] == CHECKPOINT_BUTCHER)
		{
			GameTextForPlayer(playerid, "~r~Dont Run or Jummp", 3000, 3);
			GivePlayerHealth(playerid, -1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);			
		}
		if(PlayerHasCrate[playerid] == 1)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
		}
		if(pData[playerid][pCP] == CHECKPOINT_Demolition)
		{
			GameTextForPlayer(playerid, "~r~Dont Run or Jummp", 3000, 3);
			GivePlayerHealth(playerid, -1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);			
		}
	}
	if(oldkeys & KEY_JUMP)
	{

		if(pData[playerid][pCP] == CHECKPOINT_MINING)
		{
			GameTextForPlayer(playerid, "~r~Dont Run or Jummp", 3000, 3);
			GivePlayerHealth(playerid, -1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);			
		}
		if(pData[playerid][pCP] == CHECKPOINT_BUTCHER)
		{
			GameTextForPlayer(playerid, "~r~Dont Run or Jummp", 3000, 3);
			GivePlayerHealth(playerid, -1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);			
		}
		
		if(PlayerHasCrate[playerid] == 1)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
		}
		if(pData[playerid][pCP] == CHECKPOINT_Demolition)
		{
			GameTextForPlayer(playerid, "~r~Dont Run or Jummp", 3000, 3);
			GivePlayerHealth(playerid, -1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);			
		}
	}
	if(oldkeys & KEY_SPRINT)
	{
		if(pData[playerid][pCP] == CHECKPOINT_MINING)
		{
			GameTextForPlayer(playerid, "~r~Dont Run or Jummp", 3000, 3);
			GivePlayerHealth(playerid, -1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);			
		}
	
		if(pData[playerid][pCP] == CHECKPOINT_BUTCHER)
		{
			GameTextForPlayer(playerid, "~r~Dont Run or Jummp", 3000, 3);
			GivePlayerHealth(playerid, -1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);			
		}
		if(PlayerHasCrate[playerid] == 1)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
		}
		if(pData[playerid][pCP] == CHECKPOINT_Demolition)
		{
			GameTextForPlayer(playerid, "~r~Dont Run or Jummp", 3000, 3);
			GivePlayerHealth(playerid, -1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
		}
	}
	
	if(!pCBugging[playerid] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && pData[playerid][pDueling] == INVALID_PLAYER_ID&& pData[playerid][pDueling1] == INVALID_PLAYER_ID)
	{
	    if(!pData[playerid][pJoinedEvent])
		{
			if(PRESSED(KEY_FIRE))
			{
				switch(GetPlayerWeapon(playerid))
				{
					case WEAPON_DEAGLE, WEAPON_SHOTGUN, WEAPON_SNIPER:
					{
						ptsLastFiredWeapon[playerid] = gettime();
					}
				}
			}
			else if(PRESSED(KEY_CROUCH))
			{
				if((gettime() - ptsLastFiredWeapon[playerid]) < 1)
				{
				  	new Float:health;

	    			GetPlayerHealth(playerid, health);
		    		SetPlayerHealth(playerid, health - 9.0);
					ApplyAnimationEx(playerid, "RIOT", "RIOT_ANGRY", 4.1, 0, 0, 0, 0, 0);
					pCBugging[playerid] = true;
					ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 4.1, 1, 0, 0, 0, 1000);
					KillTimer(ptmCBugFreezeOver[playerid]);
					SendAdminMessage(COLOR_TEAL, "AdmWarning: "WHITE"%s"TEAL" (ID "WHITE"%d"TEAL") is possibly C-bugging.", GetPlayerNameEx(playerid), playerid);
					ptmCBugFreezeOver[playerid] = SetTimerEx("CBugFreezeOver", 1500, false, "i", playerid);
				}
			}
		}
	    if(pData[playerid][pJoinedEvent] && !EventInfo[eCS])
		{
			if(PRESSED(KEY_FIRE))
			{
				switch(GetPlayerWeapon(playerid))
				{
					case WEAPON_DEAGLE, WEAPON_SHOTGUN, WEAPON_SNIPER:
					{
						ptsLastFiredWeapon[playerid] = gettime();
					}
				}
			}
		}
	}

	if(newkeys & KEY_SPRINT)
	{
	    if(pData[playerid][pLoopAnim])
	    {
	        pData[playerid][pLoopAnim] = 0;

		    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
		    TextDrawHideForPlayer(playerid, AnimationTD);
		}
	}
 	if((gettime() - pData[playerid][pLastPress]) >= 1)
	{
		if(newkeys & KEY_YES)
		{
			if(!EnterCheck(playerid)) ExitCheck(playerid);

			new id = Gate_Nearest(playerid);
			if (id != -1)
			{
				if (strlen(GateData[id][gatePass]))
				{
					ShowPlayerDialog(playerid, GatePass, DIALOG_STYLE_INPUT, "Enter Password", "Please enter the password for this gate below:", "Submit", "Cancel");
				}
				else
				{
					if (GateData[id][gateFaction] != -1 && pData[playerid][pFaction] != GetFactionByID(GateData[id][gateFaction]))
						return SCM(playerid, COLOR_SYNTAX, "You can't open this gate/door.");

					Gate_Operate(id);

					switch (GateData[id][gateOpened])
					{
						case 0:
							SCM(playerid, COLOR_SYNTAX, "You have closed the gate/door!");

						case 1:
							SCM(playerid, COLOR_SYNTAX, "You have opened the gate/door!");
					}
				}
			}
			pData[playerid][pLastPress] = gettime(); // Prevents spamming. Sometimes keys get messed up and register twice.
		}
	}
	if(newkeys & KEY_YES && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		callcmd::pass(playerid, "\1");
		//pData[playerid][pLastPress] = gettime(); // Prevents spamming. Sometimes keys get messed up and register twice.
	}
	if(newkeys & KEY_NO && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		callcmd::engine(playerid);
		//pData[playerid][pLastPress] = gettime(); // Prevents spamming. Sometimes keys get messed up and register twice.
	}

   	if(PollOn && PollVoted[playerid] == 0)
	{
	    if(newkeys == KEY_YES)
	    {
			PollY++;
			PollVoted[playerid] = 1;
			SCM(playerid, COLOR_SYNTAX, "You Have Voted Yes.");
		}
	    if(newkeys == KEY_NO)
	    {
			PollN++;
			PollVoted[playerid] = 1;
			SCM(playerid, SERVER_COLOR, "** "WHITE" You Have Voted No.");
	    }
	}

	return 1;
}





public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(pData[playerid][pKicked]) return 0;
	if(newstate == PLAYER_STATE_DRIVER) {
	    pvehicleid[playerid] = GetPlayerVehicleID(playerid);
	    pmodelid[playerid] = GetVehicleModel(pvehicleid[playerid]);
	} else {
	    pvehicleid[playerid] = 0;
	    pmodelid[playerid] = 0;
	}

	if(newstate == PLAYER_STATE_DRIVER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		//here

	    if((pizzaVehicles[0] <= vehicleid <= pizzaVehicles[3]) && !PlayerHasJob(playerid, JOB_FOODPANDA))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Foodpanda Deliver.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
		if((towtruck[0] <= vehicleid <= towtruck[2]) && (FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Mechanic.");
	        RemovePlayerFromVehicle(playerid);
	    }
		if((VIPVehicles[0] <= vehicleid <= VIPVehicles[49]) && !pData[playerid][pDonator])
	    {
	    	SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a Donator.");
	    	RemovePlayerFromVehicle(playerid);
	    }
	    if((courierVehicles[0] <= vehicleid <= courierVehicles[9]) && !PlayerHasJob(playerid, JOB_COURIER))
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a trucker.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
		if((sweeperVehicles[0] <= vehicleid <= sweeperVehicles[3]) && !PlayerHasJob(playerid, JOB_SWEEPER))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a Street Sweeper.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if((lummberveh[0] <= vehicleid <= lummberveh[6]) && !PlayerHasJob(playerid, JOB_LUMBERJACK) && Lumberedx[playerid] <= 0)
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a LUMBERJACK. or you dont load a wood");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if((taxiVehicles[0] <= vehicleid <= taxiVehicles[6]) && !PlayerHasJob(playerid, JOB_TAXIDRIVER))
	    {
			if(pData[playerid][pTaxiFare] == 0)
			{
			SCM(playerid, COLOR_LIGHTRED, "[JOB ERROR]: You cannot operate this vehicle as you are not a Taxi Driver or just type /setfare.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    	
			}
	    }
  	    if((forkliftVehicles[0] <= vehicleid <= forkliftVehicles[5]) && !PlayerHasJob(playerid, JOB_FORKLIFTER))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as you are not a Forklifter.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if((testVehicles[0] <= vehicleid <= testVehicles[4]) && !pData[playerid][pDrivingTest])
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not taking your drivers test.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You cannot operate this vehicle as it doesn't belong to your faction.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
	    if(VehicleInfo[vehicleid][vGang] >= 0 && pData[playerid][pGang] != VehicleInfo[vehicleid][vGang])
	    {
	        SCM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as it doesn't belong to your gang.");
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }

	    if(VehicleInfo[vehicleid][vJob] >= 0 && pData[playerid][pJob] != VehicleInfo[vehicleid][vJob])
	    {
	        SM(playerid, COLOR_SYNTAX, "You cannot operate this vehicle as you are not a %s.", GetJobName(VehicleInfo[vehicleid][vJob]));
	        RemovePlayerFromVehicle(playerid);
	        return 1;
	    }
		if (PlayerHasJob(playerid, JOB_FORKLIFTER) && IsAForkliftVehicle(GetPlayerVehicleID(playerid)))
		{
		 	StartForkliftJob(playerid);
			SendInfoMessage(playerid, "Please drive to the {FF0000}checkpoint{FFFFFF} to load the cargo.");
		}
		
	    if(!VehicleHasEngine(vehicleid))
	    {
	        SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
		}
		else if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
		{
		    if(testVehicles[0] <= vehicleid <= testVehicles[4])
		    {
		        pData[playerid][pCP] = CHECKPOINT_TEST;
		        pData[playerid][pTestVehicle] = vehicleid;
		        pData[playerid][pTestCP] = 0;

		        SetVehicleParams(vehicleid, VEHICLE_ENGINE, true);
				SetPlayerCheckpoint(playerid, drivingTestCPs[pData[playerid][pTestCP]][0], drivingTestCPs[pData[playerid][pTestCP]][1], drivingTestCPs[pData[playerid][pTestCP]][2], 3.0);
				SCM(playerid, COLOR_AQUA, "Drive through the checkpoints to proceed with the test. Try not to damage your vehicle.");
		    }
		    else
		    {
                //SCM(playerid, COLOR_YELLOW, "You can toggle the vehicle engine by pressing 'N' or typing /engine.");
			}
	    }
   	 	if(IsVehicleOwner(playerid, vehicleid))
	    {
			new string[96];
			format(string, sizeof(string),"Welcome to your "BLUE"%s "WHITE"| vehicle ID "BLUE"%i."WHITE".", GetVehicleName(vehicleid), vehicleid);
			SCMf(playerid, COLOR_WHITE, string);
	    }
   	    if(!pData[playerid][pCarLicense] && !pData[playerid][pDrivingTest])
	    {
	        SendClientMessage(playerid, COLOR_TEAL, "[BOT]:"WHITE" You didn't take an exam for Driving License beware of cops");
	    }
	    if(IsVehicleOwner(playerid, vehicleid) && VehicleInfo[vehicleid][vTickets] > 0)
	    {
	        SM(playerid, COLOR_AQUA, "This vehicle has $%i in unpaid tickets. You can pay your tickets using /paytickets.", VehicleInfo[vehicleid][vTickets]);
	    }

	    if(!pData[playerid][pToggleTextdraws])
	    {  
			PlayerTextDrawShow(playerid, pData[playerid][pTextx][1]);
	        PlayerTextDrawShow(playerid, pData[playerid][pTextx][2]);
    		
			for(new i = 0; i < 6; i ++) {
				pData[playerid][pGPSOn] = 1;
	    		PlayerTextDrawSetString(playerid, pData[playerid][pText][0], "Loading...");
    			ShowGPSTextdraw(playerid);
				pData[playerid][pWatchOn] = 1;
				TextDrawShowForPlayer(playerid, TimeTD);
			}
		}
	    if(VehicleHasEngine(vehicleid) && vehicleFuel[vehicleid] <= 0)
	    {
	        GameTextForPlayer(playerid, "~b~Out of fuel", 5000, 3);
	    	//TogglePlayerControllable(playerid, 0);
	    }
		SetPlayerArmedWeapon(playerid, 0);
		
	}
	else if(oldstate == PLAYER_STATE_DRIVER)
	{
     	if(pData[playerid][pDrivingTest])
	    {
         	pData[playerid][pDrivingTest] = 0;
         	SetVehicleToRespawn(pData[playerid][pTestVehicle]);
         	SCM(playerid, COLOR_LIGHTRED, "** You have exited the vehicle and therefore failed the test.");
		}
		
		
		// Hiding the Speedo
		for(new i = 0; i < 6; i ++) {
			PlayerTextDrawHide(playerid, pData[playerid][pTextx][1]);
			PlayerTextDrawHide(playerid, pData[playerid][pTextx][2]);
   			pData[playerid][pGPSOn] = 0;
			HideGPSTextdraw(playerid);
			pData[playerid][pWatchOn] = 0;
			TextDrawHideForPlayer(playerid, TimeTD);
		}
	}
	else if(newstate == PLAYER_STATE_PASSENGER)
	{
	    new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));

		if((driverid != INVALID_VEHICLE_ID && pData[driverid][pTaxiFare] > 0 && pData[driverid][pTaxiPassenger] == INVALID_PLAYER_ID) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 420 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 438))
		{
		    if(pData[playerid][pCash] < pData[driverid][pTaxiFare])
		    {
		        SCM(playerid, COLOR_SYNTAX, "You can't afford to pay the fare. Therefore you can't ride this taxi.");
		        RemovePlayerFromVehicle(playerid);
		        return 1;
		    }

			pData[driverid][pTaxiPassenger] = playerid;
			pData[driverid][pTaxiBill] = pData[driverid][pTaxiFare];
			pData[driverid][pTaxiTime] = 0;

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s enters %s's taxi cab.", GetRPName(playerid), GetRPName(driverid));
			SM(playerid, COLOR_YELLOW, "You will be charged the fare price of "SVRCLR"$%i{CCFFFF} every 15 seconds during your ride.", pData[driverid][pTaxiFare]);
			SM(driverid, COLOR_AQUA, "*%s has entered your taxi. You will earn $%i every 15 seconds during the ride.", GetRPName(playerid), pData[driverid][pTaxiFare]);
		}

     	switch(GetPlayerWeapon(playerid))
     	{
     	    case 22, 28, 29, 32:
     	        SetPlayerArmedWeapon(playerid, 0);
	        default:
				SetPlayerArmedWeapon(playerid, 0);
		}
	}

	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

	    foreach(new i : Player)
	    {
	        if(GetPlayerState(i) == PLAYER_STATE_SPECTATING && pData[i][pSpectating] == playerid)
	        {
	            PlayerSpectateVehicle(i, vehicleid);
			}
		}

		if(!isnull(vehicleStream[vehicleid]) && pData[playerid][pStreamType] == MUSIC_NONE && !pData[playerid][pToggleMusic])
  		{
  		    pData[playerid][pStreamType] = MUSIC_VEHICLE;
    		PlayAudioStreamForPlayer(playerid, vehicleStream[vehicleid]);
      		SCM(playerid, COLOR_WHITE, "** You are now tuned in to this vehicle's radio. /stopmusic to stop listening.");
	    }
	}

	else if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
	    foreach(new i : Player)
	    {
	        if(GetPlayerState(i) == PLAYER_STATE_SPECTATING && pData[i][pSpectating] == playerid)
	        {
	            PlayerSpectatePlayer(i, playerid);
			}
		}

		if(pData[playerid][pStreamType] == MUSIC_VEHICLE)
		{
		    StopAudioStreamForPlayer(playerid);
		    pData[playerid][pStreamType] = MUSIC_NONE;
		}
	}

	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(!(-3.0 <= fScaleX <= 3.0)) fScaleX = fScaleX < -3.0 ? 0.0 : 3.0;
	if(!(-3.0 <= fScaleY <= 3.0)) fScaleY = fScaleY < -3.0 ? 0.0 : 3.0;
	if(!(-3.0 <= fScaleZ <= 3.0)) fScaleZ = fScaleZ < -3.0 ? 0.0 : 3.0;

	switch(pData[playerid][pEditType])
	{
	    case EDIT_CLOTHING_PREVIEW:
	    {
	        RemovePlayerAttachedObject(playerid, 9);

	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(businessid >= 0 && BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
	            {
	                if(BusinessInfo[businessid][bProducts] <= 0)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "This business is out of stock now.");
					}
	                if(pData[playerid][pCash] < BusinessInfo[businessid][bPrices][1])
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "You couldn't afford to purchase this item.");
	                }

	                for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	                {
	                    if(!ClothingInfo[playerid][i][cExists])
	                    {
	                        ClothingInfo[playerid][i][cModel] = modelid;
	                        ClothingInfo[playerid][i][cBone] = boneid;
	                        ClothingInfo[playerid][i][cPosX] = fOffsetX;
	                        ClothingInfo[playerid][i][cPosY] = fOffsetY;
	                        ClothingInfo[playerid][i][cPosZ] = fOffsetZ;
	                        ClothingInfo[playerid][i][cRotX] = fRotX;
	                        ClothingInfo[playerid][i][cRotY] = fRotY;
	                        ClothingInfo[playerid][i][cRotZ] = fRotZ;
	                        ClothingInfo[playerid][i][cScaleX] = fScaleX;
	                        ClothingInfo[playerid][i][cScaleY] = fScaleY;
	                        ClothingInfo[playerid][i][cScaleZ] = fScaleZ;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO clothing VALUES(null, %i, '%e', %i, %i, 0, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", pData[playerid][pID], clothingArray[pData[playerid][pSelected]][clothingName], modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
							mysql_tquery(connectionID, queryBuffer, "OnPlayerBuyClothingItem", "isiii", playerid, clothingArray[pData[playerid][pSelected]][clothingName], BusinessInfo[businessid][bPrices][1], businessid, i);
							return 1;
						}
					}

					SCM(playerid, COLOR_SYNTAX, "You have no more clothing slots available. Therefore you can't buy this.");
	            }
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHING);
			}
		}
		case EDIT_CLOTHING:
		{
		    new clothingid = pData[playerid][pSelected];

		    if(response)
		    {
		        ClothingInfo[playerid][clothingid][cPosX] = fOffsetX;
		        ClothingInfo[playerid][clothingid][cPosY] = fOffsetY;
		        ClothingInfo[playerid][clothingid][cPosZ] = fOffsetZ;
		        ClothingInfo[playerid][clothingid][cRotX] = fRotX;
		        ClothingInfo[playerid][clothingid][cRotY] = fRotY;
		        ClothingInfo[playerid][clothingid][cRotZ] = fRotZ;
		        ClothingInfo[playerid][clothingid][cScaleX] = fScaleX;
		        ClothingInfo[playerid][clothingid][cScaleY] = fScaleY;
		        ClothingInfo[playerid][clothingid][cScaleZ] = fScaleZ;

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f', scale_x = '%f', scale_y = '%f', scale_z = '%f' WHERE id = %i", fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, ClothingInfo[playerid][clothingid][cID]);
		        mysql_tquery(connectionID, queryBuffer);

		        SM(playerid, COLOR_SYNTAX, "Changes saved.");
		    }

			if(!ClothingInfo[playerid][clothingid][cAttached])
	        {
	            RemovePlayerAttachedObject(playerid, 9);
			}
			else
			{
			    RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
			    SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ],
					ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ], ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
			}
		}
		case EDIT_COP_CLOTHING:
	    {
	        RemovePlayerAttachedObject(playerid, 9);

	        if(response)
	        {
                for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
                {
                    if(!ClothingInfo[playerid][i][cExists])
                    {
                        ClothingInfo[playerid][i][cModel] = modelid;
                        ClothingInfo[playerid][i][cBone] = boneid;
                        ClothingInfo[playerid][i][cPosX] = fOffsetX;
                        ClothingInfo[playerid][i][cPosY] = fOffsetY;
                        ClothingInfo[playerid][i][cPosZ] = fOffsetZ;
                        ClothingInfo[playerid][i][cRotX] = fRotX;
                        ClothingInfo[playerid][i][cRotY] = fRotY;
                        ClothingInfo[playerid][i][cRotZ] = fRotZ;
                        ClothingInfo[playerid][i][cScaleX] = fScaleX;
                        ClothingInfo[playerid][i][cScaleY] = fScaleY;
                        ClothingInfo[playerid][i][cScaleZ] = fScaleZ;

                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO clothing VALUES(null, %i, '%e', %i, %i, 0, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", pData[playerid][pID], copClothing[pData[playerid][pSelected]][cName], modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
						mysql_tquery(connectionID, queryBuffer, "OnPlayerAttachCopClothing", "isi", playerid, copClothing[pData[playerid][pSelected]][cName], i);
						return 1;
					}
				}

				SendClientMessage(playerid, COLOR_GREY, "You have no more clothing slots available. Therefore you can't attach this.");
	        }
	        else
	        {
	            ShowCopClothingMenu(playerid);
			}
		}
	}
    return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(GetPVarInt(playerid, "Graffity:EditPos"))
	{
		Graf_OnPlayerEditDynamicObject(playerid, objectid, response, x, y, z, rz);
	}
	if(response == EDIT_RESPONSE_FINAL)
	{
	    if (pData[playerid][pEditGraffiti] != -1 && GraffitiData[pData[playerid][pEditGraffiti]][graffitiExists])
	    {
			GraffitiData[pData[playerid][pEditGraffiti]][graffitiPos][0] = x;
			GraffitiData[pData[playerid][pEditGraffiti]][graffitiPos][1] = y;
			GraffitiData[pData[playerid][pEditGraffiti]][graffitiPos][2] = z;
			GraffitiData[pData[playerid][pEditGraffiti]][graffitiPos][3] = rz;

			Graffiti_Refresh(pData[playerid][pEditGraffiti]);
			Graffiti_Save(pData[playerid][pEditGraffiti]);
		}
		else if (pData[playerid][pEditGate] != -1 && GateData[pData[playerid][pEditGate]][gateExists])
	    {
	        switch (pData[playerid][pEditType])
	        {
	            case 1:
	            {
	                new id = pData[playerid][pEditGate];

	                GateData[pData[playerid][pEditGate]][gatePos][0] = x;
	                GateData[pData[playerid][pEditGate]][gatePos][1] = y;
	                GateData[pData[playerid][pEditGate]][gatePos][2] = z;
	                GateData[pData[playerid][pEditGate]][gatePos][3] = rx;
	                GateData[pData[playerid][pEditGate]][gatePos][4] = ry;
	                GateData[pData[playerid][pEditGate]][gatePos][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
                    SM(playerid, COLOR_WHITE, "You have edited the position of gate ID: %d.", id);
				}
				case 2:
	            {
	                new id = pData[playerid][pEditGate];

	                GateData[pData[playerid][pEditGate]][gateMove][0] = x;
	                GateData[pData[playerid][pEditGate]][gateMove][1] = y;
	                GateData[pData[playerid][pEditGate]][gateMove][2] = z;
	                GateData[pData[playerid][pEditGate]][gateMove][3] = rx;
	                GateData[pData[playerid][pEditGate]][gateMove][4] = ry;
	                GateData[pData[playerid][pEditGate]][gateMove][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
                    SM(playerid, COLOR_WHITE, "You have edited the moving position of gate ID: %d.", id);
				}
			}
		}
	}
	switch(pData[playerid][pEditType])
	{
	    case EDIT_FURNITURE_PREVIEW:
	    {
			if(response != EDIT_RESPONSE_UPDATE)
			{
			    DestroyDynamicObject(pData[playerid][pEditObject]);
				pData[playerid][pEditObject] = INVALID_OBJECT_ID;

			    if(response == EDIT_RESPONSE_FINAL)
			    {
			        new houseid = GetInsideHouse(playerid);

					if(houseid >= 0 && HasFurniturePerms(playerid, houseid))
					{
					    if(pData[playerid][pCash] < furnitureArray[pData[playerid][pSelected]][fPrice])
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "You couldn't afford to purchase this item.");
		                }

					    new
					        string[16];

					    GivePlayerCash(playerid, -furnitureArray[pData[playerid][pSelected]][fPrice]);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO furniture VALUES(null, %i, %i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, 0, 0)", HouseInfo[houseid][hID], furnitureArray[pData[playerid][pSelected]][fModel], furnitureArray[pData[playerid][pSelected]][fName], furnitureArray[pData[playerid][pSelected]][fPrice], x, y, z, rx, ry, rz, HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld]);
						mysql_tquery(connectionID, queryBuffer);
						mysql_tquery(connectionID, "SELECT * FROM furniture WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_FURNITURE, HouseInfo[houseid][hLabels]);

						format(string, sizeof(string), "~r~-$%i", furnitureArray[pData[playerid][pSelected]][fPrice]);
						GameTextForPlayer(playerid, string, 5000, 1);

						if(!strcmp(furnitureArray[pData[playerid][pSelected]][fCategory], "Doors & Gates"))
						{
							SCM(playerid, COLOR_WHITE, "** You can use /lopen to control your door and /lock to unlock or lock it.");
						}
					}
			    }
			    else if(response == EDIT_RESPONSE_CANCEL)
			    {
			        ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE2);
				}
			}
		}
		case EDIT_LAND_OBJECT_PREVIEW:
	    {
			if(response != EDIT_RESPONSE_UPDATE)
			{
			    DestroyDynamicObject(pData[playerid][pEditObject]);
				pData[playerid][pEditObject] = INVALID_OBJECT_ID;

			    if(response == EDIT_RESPONSE_FINAL)
			    {
			        new landid = pData[playerid][pObjectLand];

					if(landid >= 0 && HasLandPerms(playerid, landid))
					{
					    if(pData[playerid][pCash] < furnitureArray[pData[playerid][pSelected]][fPrice])
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "You couldn't afford to purchase this item.");
		                }
		                if(!IsPointInLand(landid, x, y))
		                {
		                    return SCM(playerid, COLOR_SYNTAX, "The object has exceeded the boundaries for your land.");
						}

					    new
					        string[16];

					    GivePlayerCash(playerid, -furnitureArray[pData[playerid][pSelected]][fPrice]);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO landobjects VALUES(null, %i, %i, '%e', %i, '%f', '%f', '%f', '%f', '%f', '%f', 0, 0, '%f', '%f', '%f', '-1000.0', '-1000.0', '-1000.0')", LandInfo[landid][lID], furnitureArray[pData[playerid][pSelected]][fModel], furnitureArray[pData[playerid][pSelected]][fName], furnitureArray[pData[playerid][pSelected]][fPrice], x, y, z, rx, ry, rz, x, y, z - 10.0);
						mysql_tquery(connectionID, queryBuffer);
						mysql_tquery(connectionID, "SELECT * FROM landobjects WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_LANDOBJECTS, LandInfo[landid][lLabels]);

						format(string, sizeof(string), "~r~-$%i", furnitureArray[pData[playerid][pSelected]][fPrice]);
						GameTextForPlayer(playerid, string, 5000, 1);

						if(!strcmp(furnitureArray[pData[playerid][pSelected]][fCategory], "Doors & Gates"))
						{
							if(IsGateModel(furnitureArray[pData[playerid][pSelected]][fModel]))
							{
								SCM(playerid, COLOR_WHITE, "** You can use /lopen to open and close your gate. To change the destination coordinates, use /land and choose 'Edit object'.");
							}
						    else
							{
								SCM(playerid, COLOR_WHITE, "** You can use /lopen to control your door and /lock to unlock or lock it.");
						    }
						}
					}
			    }
			    else if(response == EDIT_RESPONSE_CANCEL)
			    {
     			    if(pData[playerid][pMenuType] == 0)
						ShowObjectSelectionMenu(playerid, MODEL_SELECTION_LANDOBJECTS);
					else
			        ShowDialogToPlayer(playerid, DIALOG_LANDBUILD2);
				}
			}
		}
		case EDIT_LAND_OBJECT:
		{
		    if(response != EDIT_RESPONSE_UPDATE)
			{
				if(response == EDIT_RESPONSE_FINAL)
				{
				    if(!IsPointInLand(pData[playerid][pObjectLand], x, y))
        			{
           				SCM(playerid, COLOR_SYNTAX, "The object has exceeded the boundaries for your land.");
					}
					else
					{
					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f' WHERE id = %i", x, y, z, rx, ry, rz, Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
						mysql_tquery(connectionID, queryBuffer);
						SCM(playerid, COLOR_SYNTAX, "Changes saved.");
					}
				}

		        ReloadLandObject(objectid, LandInfo[pData[playerid][pObjectLand]][lLabels]);
			}
		}
		case EDIT_LAND_GATE_MOVE:
		{
		    if(response != EDIT_RESPONSE_UPDATE)
			{
				if(response == EDIT_RESPONSE_FINAL)
				{
				    if(!IsPointInLand(pData[playerid][pObjectLand], x, y))
        			{
           				SCM(playerid, COLOR_SYNTAX, "The object has exceeded the boundaries for your land.");
					}
					else
					{
					    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE landobjects SET move_x = '%f', move_y = '%f', move_z = '%f', move_rx = '%f', move_ry = '%f', move_rz = '%f' WHERE id = %i", x, y, z, rx, ry, rz, Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
						mysql_tquery(connectionID, queryBuffer);
						SCM(playerid, COLOR_SYNTAX, "Changes saved.");
					}
				}

		        ReloadLandObject(objectid, LandInfo[pData[playerid][pObjectLand]][lLabels]);
			}
		}
		case EDIT_FURNITURE:
		{
		    if(response != EDIT_RESPONSE_UPDATE)
			{
				if(response == EDIT_RESPONSE_FINAL)
				{
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE furniture SET pos_x = '%f', pos_y = '%f', pos_z = '%f', rot_x = '%f', rot_y = '%f', rot_z = '%f' WHERE id = %i", x, y, z, rx, ry, rz, Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
					mysql_tquery(connectionID, queryBuffer);
					SCM(playerid, COLOR_SYNTAX, "Changes saved.");
				}

		        ReloadFurniture(objectid, HouseInfo[pData[playerid][pFurnitureHouse]][hLabels]);
			}
		}
		case EDIT_OBJECT_PREVIEW:
		{
			if(response == EDIT_RESPONSE_FINAL)
			{
				if (pData[playerid][pEditmObject] != -1 && ObjectData[pData[playerid][pEditmObject]][mobjExists])
				{
					new string[48];
					new id = pData[playerid][pEditmObject];
					ObjectData[pData[playerid][pEditmObject]][mobjPos][0] = x;
					ObjectData[pData[playerid][pEditmObject]][mobjPos][1] = y;
					ObjectData[pData[playerid][pEditmObject]][mobjPos][2] = z;
					ObjectData[pData[playerid][pEditmObject]][mobjPos][3] = rx;
					ObjectData[pData[playerid][pEditmObject]][mobjPos][4] = ry;
					ObjectData[pData[playerid][pEditmObject]][mobjPos][5] = rz;

					DestroyDynamicObject(ObjectData[id][mobjObject]);
					ObjectData[id][mobjObject] = CreateDynamicObject(ObjectData[id][mobjModel], ObjectData[id][mobjPos][0], ObjectData[id][mobjPos][1], ObjectData[id][mobjPos][2], ObjectData[id][mobjPos][3], ObjectData[id][mobjPos][4], ObjectData[id][mobjPos][5], ObjectData[id][mobjWorld], ObjectData[id][mobjInterior]);

					DestroyDynamic3DTextLabel(ObjectData[id][mobjname2]);
					format(string, sizeof(string), "[%i]\nID: %i", ObjectData[id][mobjModel], id);
					ObjectData[id][mobjname2] = CreateDynamic3DTextLabel(string, COLOR_GREY, ObjectData[id][mobjPos][0], ObjectData[id][mobjPos][1], ObjectData[id][mobjPos][2], 5.0);

					Object_Save(id);
					SM(playerid, COLOR_WHITE, "You have edited the position of object ID: %d.", id);
				}
			}
		}
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    if(pData[playerid][pKicked]) return 0;

	// This is a fix to a known exploit where inserting '%' in the dialog box would crash the server.
	for(new i = 0, l = strlen(inputtext); i < l; i ++)
	{
	    if(inputtext[i] == '%') inputtext[i] = '#';
	}
	// Graffity System
	if(dialogid == Graffity_CE)
	{
		if (!response) return ShowPlayerDialog(playerid, Graffity_CE_Cancel, DIALOG_STYLE_MSGBOX, "{FFFFFF}Cancel the creation of graffiti", "{FFFFFF}Are you sure you want to cancel Graffiti creation?", "Yes", "No");

	    new grafid = Graffity_GetPlayerEdit(playerid);
	    switch(listitem)
	    {
	        case 0:
	        {
	            SetPVarInt(playerid, "Graffity:Showing", 1);
	            SetPVarInt(playerid, "Graffity:Show", 8);
	            SCM(playerid, COLOR_SYNTAX, "The editing window will appear again after 8 seconds.");
	            SCM(playerid, COLOR_SYNTAX, "Stay close to the graffiti. ");
	        }
	        case 1:
	        {
	            ShowPlayerDialog(playerid, Graffity_CE_Done, DIALOG_STYLE_MSGBOX, "{FFFFFF}Graffiti creation", "{FFFFFF}Are you sure you want to paint graffiti with these parameters?", "Yes", "No"); //Ã¥Ã± Ã­Ã®Ã³
	        }
	        case 2:
	        {
	            EditDynamicObject(playerid, E_GRAFFITY[grafid][gObject]);
	            SetPVarInt(playerid, "Graffity:EditPos", 1);
	            SCM(playerid, COLOR_SYNTAX, "You can use {FF6347}SPACE {FFFFFF}to move the camera around. ");
	        }
	        case 3:
	        {
	            new graf_string[256];
	            format(graf_string, sizeof(graf_string), "{FFFFFF}Current text: %s\n\n* The text must contain at least %i and no more %i characters.\n\nEnter new text in the box below:", E_GRAFFITY[grafid][gText], MIN_GRAFFITY_TEXT, MAX_GRAFFITY_TEXT);
	            ShowPlayerDialog(playerid, Graffity_CE_Text, DIALOG_STYLE_INPUT, "{FFFFFF}Graffiti - change text", graf_string, ">>>", "Return");
	        }
	        case 4:
	        {
	            Graffity_ShowPlayerEditDialog(playerid);
	        }
	        case 5:
	        {
	            new graf_string[196];
	            graf_string[0] = EOS;

	            for(new i = 0; i < MAX_GRAFFITY_COLORS; i++)
	            {
	                format(graf_string, sizeof(graf_string), "%s%s%s\n", graf_string, GRAFFITY_COLOR[i][color_dlg], GRAFFITY_COLOR[i][color_name]);
	            }
	            ShowPlayerDialog(playerid, Graffity_CE_Color, DIALOG_STYLE_LIST, "{FFFFFF}Graffiti - color choice", graf_string, "Select", "Return");
	        }
	        /*case 6:
	        {
	            new graf_string[256];
	            graf_string[0] = EOS;

	            for(new i = 0; i < MAX_GRAFFITY_BACKS; i++)
	            {
	                format(graf_string, sizeof(graf_string), "%s%s%s\n", graf_string, GRAFFITY_BACK[i][color_dlg], GRAFFITY_BACK[i][color_name]);
	            }
	            ShowPlayerDialog(playerid, Graffity_CE_BackColor, DIALOG_STYLE_LIST, "{FFFFFF}Graffiti - background selection", graf_string, "Select", "Return");
	        }*/
	        case 6:
	        {
	            new graf_string[256];
	            graf_string[0] = EOS;

	            for(new i = 0; i < MAX_GRAFFITY_FONTS; i++)
	            {
	                format(graf_string, sizeof(graf_string), "%s%s\n", graf_string, GRAFFITY_FONT[i][font_name]);

	            }
	            ShowPlayerDialog(playerid, Graffity_CE_Font, DIALOG_STYLE_LIST, "{FFFFFF}Graffiti - font selection", graf_string, "Select", "Return");
	        }
	        case 7:
	        {
	            new graf_string[196];
	            format(graf_string, sizeof(graf_string), "{FFFFFF}Current size: %i\n\n* Font size from %i to %i.\n\nEnter the new value in the box below:", E_GRAFFITY[grafid][gFontSize], MIN_GRAFFITY_FONTSIZE, MAX_GRAFFITY_FONTSIZE);
	            ShowPlayerDialog(playerid, Graffity_CE_FontSize, DIALOG_STYLE_INPUT, "{FFFFFF}Graffiti - font size", graf_string, "Select", "Return");
	        }
	        case 8:
	        {
	            Graffity_SetBold(grafid, !E_GRAFFITY[grafid][gBold]);
	            Graffity_ShowPlayerEditDialog(playerid);
	        }
	    }
	}
	if(dialogid == Graffity_CE_Cancel)
	{
		new grafid = Graffity_GetPlayerEdit(playerid);
	    if (!response)   return Graffity_ShowPlayerEditDialog(playerid);

	    Graffity_DestroyTemporary(grafid);
	    Graffity_ResetPlayer(playerid);
	    SCM(playerid, COLOR_SYNTAX, "Graffiti creation has been canceled.");
	}
	if(dialogid == Graffity_CE_Done)
	{
		new grafid = Graffity_GetPlayerEdit(playerid);

	    if (!response) return Graffity_ShowPlayerEditDialog(playerid);
	    Graffity_DestroyTemporary(playerid);
	    SetPVarInt(playerid, "Graffity:Spraying", 1);
	    TogglePlayerControllable(playerid, 0);
	    ApplyAnimation(playerid,"SPRAYCAN","spraycan_full",4.0,1,0,0,0,0);
	    SetPVarInt(playerid, "Graffity:SprayingTime", strlen(E_GRAFFITY[grafid][gText]));
	    SCM(playerid, COLOR_SYNTAX, "To stop drawing graffiti, enter / gr stop.");
	    SAM(COLOR_YELLOW, "%s is done doing his graffiti and is waiting for approval. [/agr to approve the graffiti.]", GetRPName(playerid));
	}
	if(dialogid == Graffity_CE_Text)
	{
		new grafid = Graffity_GetPlayerEdit(playerid);
	    if (response)
	    {
	        if (strlen(inputtext) > MAX_GRAFFITY_TEXT || strlen(inputtext) < MIN_GRAFFITY_TEXT)
	        {
	            SM(playerid, COLOR_SYNTAX, "Graffiti text with at least %i and at most %i characters.", MIN_GRAFFITY_TEXT, MAX_GRAFFITY_TEXT);
	            
	            new graf_string[256];
	            
	            format(graf_string, sizeof(graf_string), "{FFFFFF}Current text: %s\n\n* The text must contain at least %i and at most %i characters.\n\nEnter new text in the box below:", E_GRAFFITY[grafid][gText], MIN_GRAFFITY_TEXT, MAX_GRAFFITY_TEXT);
	            ShowPlayerDialog(playerid, Graffity_CE_Text, DIALOG_STYLE_INPUT, "{FFFFFF}Graffiti - change text", graf_string, ">>>", "Return");
	            return 1;
	        }

	        Graffity_SetText(grafid, inputtext);
	        Graffity_ShowPlayerEditDialog(playerid);
	    }
	    else 
	    {
	        Graffity_ShowPlayerEditDialog(playerid);
	    }
	}
	if(dialogid == Graffity_CE_Color)
	{
		new grafid = Graffity_GetPlayerEdit(playerid);
	    if (response)
	    {
	        Graffity_SetColor(grafid, GRAFFITY_COLOR[listitem][color_data]);
	        SetPVarInt(playerid, "Graffity:Color", listitem+1);
	        Graffity_ShowPlayerEditDialog(playerid);
	    }
	    else 
	    {
	        Graffity_ShowPlayerEditDialog(playerid);
	    }
	}
	if(dialogid == Graffity_CE_BackColor)
	{
		new grafid = Graffity_GetPlayerEdit(playerid);
	    if (response)
	    {
	        Graffity_SetBackColor(grafid, GRAFFITY_BACK[listitem][color_data]);
	        SetPVarInt(playerid, "Graffity:Back", listitem+1);
	        Graffity_ShowPlayerEditDialog(playerid);
	    }
	    else 
	    {
	        Graffity_ShowPlayerEditDialog(playerid);
	    }
	}
	if(dialogid == Graffity_CE_Font)
	{
		new grafid = Graffity_GetPlayerEdit(playerid);
	    if (response)
	    { 
	        Graffity_SetFont(grafid, GRAFFITY_FONT[listitem][font_name]);
	        SetPVarInt(playerid, "Graffity:Font", listitem+1);
	        Graffity_ShowPlayerEditDialog(playerid);
	    }
	    else 
	    {
	        Graffity_ShowPlayerEditDialog(playerid);
	    }
	}
	if(dialogid == Graffity_CE_FontSize)
	{
		new grafid = Graffity_GetPlayerEdit(playerid), fsz = strval(inputtext);
	    if (response)
	    {
	        if (fsz > MAX_GRAFFITY_FONTSIZE || fsz < MIN_GRAFFITY_FONTSIZE)
	        {
	            SM(playerid, COLOR_SYNTAX, "Font size from %i to %i.", MIN_GRAFFITY_FONTSIZE, MAX_GRAFFITY_FONTSIZE);

	            new graf_string[196];

	            format(graf_string, sizeof(graf_string), "{FFFFFF}Current sizeÃ°: %i\n\n* Font size from %i to %i.\n\nEnter the new value in the box below:", E_GRAFFITY[grafid][gFontSize], MIN_GRAFFITY_FONTSIZE, MAX_GRAFFITY_FONTSIZE);
	            ShowPlayerDialog(playerid, Graffity_CE_FontSize, DIALOG_STYLE_INPUT, "{FFFFFF} Graffiti - font size", graf_string, "Select", "Return");
	            return 1;
	        }

	        Graffity_SetFontSize(grafid, fsz);
	        Graffity_ShowPlayerEditDialog(playerid);
	    }
	    else 
	    {
	        Graffity_ShowPlayerEditDialog(playerid);
	    }
	}
	if(dialogid == DIALOG_HMEMBERS) // Members Dialog by Haven
	{
		new params[28];
		if(response)
		{
			if(listitem == 0) // Gang Members
			{
				return callcmd::gmembersa(playerid, params);
			}
			if(listitem == 1) // Faction Members
			{
				return callcmd::fmembersa(playerid, params);
			}
		}
		return 1;
	}

	if(dialogid == ANTICHEAT_SETTINGS)
	{
		if(!response)
	    {
	        pAntiCheatSettingsPage{playerid} = 0;
	        return 1; // Ð—Ð°ÐºÑ€Ñ‹Ð²Ð°ÐµÐ¼ Ð´Ð¸Ð°Ð»Ð¾Ð³
	    }

	    if (!strcmp(inputtext, AC_DIALOG_NEXT_PAGE_TEXT))
	    {
	        pAntiCheatSettingsPage{playerid}++;
	    }
	    else if (!strcmp(inputtext, AC_DIALOG_PREVIOUS_PAGE_TEXT))
	    {
	        pAntiCheatSettingsPage{playerid}--;
	    }
	    else // Ð•ÑÐ»Ð¸ Ð¸Ð³Ñ€ÐºÐ¾ Ð²Ñ‹Ð±Ñ€Ð°Ð» ÐºÐ°ÐºÐ¾Ð¹-Ð»Ð¸Ð±Ð¾ Ð¸Ð· ÐºÐ¾Ð´Ð¾Ð² Ð°Ð½Ñ‚Ð¸-Ñ‡Ð¸Ñ‚Ð°
	    {
	        pAntiCheatSettingsEditCodeId[playerid] = pAntiCheatSettingsMenuListData[playerid][listitem];
	        return ShowPlayer_AntiCheatEditCode(playerid, pAntiCheatSettingsEditCodeId[playerid]);
	    }
	    return ShowPlayer_AntiCheatSettings(playerid);
	}
	if(dialogid == ANTICHEAT_EDIT_CODE)
	{
		if (!response) // Ð•ÑÐ»Ð¸ Ð¸Ð³Ñ€Ð¾Ðº Ð·Ð°ÐºÑ€Ñ‹Ð» Ð´Ð¸Ð°Ð»Ð¾Ð³
	    {
	        pAntiCheatSettingsEditCodeId[playerid] = -1;
	        return ShowPlayer_AntiCheatSettings(playerid);
	    }

	    new
	        item = pAntiCheatSettingsEditCodeId[playerid];

	    if (AC_CODE_TRIGGER_TYPE[item] == listitem)
	        return ShowPlayer_AntiCheatSettings(playerid);

	    if (AC_CODE_TRIGGER_TYPE[item] == AC_CODE_TRIGGER_TYPE_DISABLED && listitem != AC_CODE_TRIGGER_TYPE_DISABLED)
	        EnableAntiCheat(item, 1);

	    AC_CODE_TRIGGER_TYPE[item] = listitem;

	    new
	        sql_query[101 - 4 + 1 + 2];

	    format(sql_query, sizeof(sql_query), "UPDATE "AC_TABLE_SETTINGS" SET `"AC_TABLE_FIELD_TRIGGER"` = '%d' WHERE `"AC_TABLE_FIELD_CODE"` = '%d'",
	        listitem,
	        item);

	    mysql_function_query(connectionID, sql_query, false, "", ""); // ÐžÑ‚Ð¿Ñ€Ð°Ð²Ð»ÑÐµÐ¼ Ð·Ð°Ð¿Ñ€Ð¾Ñ Ð² Ð±Ð°Ð·Ñƒ Ð´Ð°Ð½Ð½Ñ‹Ñ…
	    return ShowPlayer_AntiCheatSettings(playerid); // ÐŸÐ¾ÐºÐ°Ð·Ñ‹Ð²Ð°ÐµÐ¼ Ð³Ð»Ð°Ð²Ð½Ð¾Ðµ Ð¼ÐµÐ½ÑŽ Ð½Ð°ÑÑ‚Ñ€Ð¾ÐµÐº Ð°Ð½Ñ‚Ð¸-Ñ‡Ð¸Ñ‚Ð°
	}
	// Driver's Test
	if(dialogid == DIALOG_WEP_TEST)
	{
		if(response)
		{
			if(pData[playerid][pCash] >= 50000)
			{
				pData[playerid][pDrivingTime] = 0;
				pData[playerid][pWeaponTest] = 1;
				pData[playerid][pDrivingScore] = 0;
				GivePlayerCash(playerid, -50000);
				SendClientMessageEx(playerid, COLOR_LIGHTGREEN, "[Weapon License Test] You have been charged $25,000, You are now taking the weapon license test.");
				ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_1, DIALOG_STYLE_LIST, "{00AAAA}What will you do if you seen a DMer? ", "Report to administrator\nRevenge\nDont mind it\n", "Select", "");
			}
		}
	}
	if(dialogid == DIALOG_WEP_QUESTION_1)
	{
		if(response)
		{
			if(listitem == 0)
			{
				pData[playerid][pDrivingScore] ++;
 			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_2, DIALOG_STYLE_LIST, "{00AAAA}What will happen if someone shot you randomly?", "Nothing will do\nHe/she will go to jail\nWill fireback to her/him", "Select", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_1, DIALOG_STYLE_LIST, "{00AAAA}What will you do if you seen a DMer? ", "Report to administrator\nRevenge\nDont mind it\n", "Select", "");

	}
	if(dialogid == DIALOG_WEP_QUESTION_2)
	{
		if(response)
		{
			if(listitem == 1)
			{
				pData[playerid][pDrivingScore] ++;
  			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_3, DIALOG_STYLE_LIST, "{00AAAA}What are the benefits having a gun license?", "To have clearance to DM other players\nAll of the above\nFor self defense?", "Select", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_3, DIALOG_STYLE_LIST, "{00AAAA}What are the benefits having a gun license?", "To have clearance to DM other players\nAll of the above\nFor self defense?", "Select", "");
	}

	if(dialogid == DIALOG_WEP_QUESTION_3)
	{
		if(response)
		{
			if(listitem == 2)
			{
				pData[playerid][pDrivingScore] ++;
			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_4, DIALOG_STYLE_LIST, "{00AAAA}What are the consenquences if you did not use properly the gun license?", "Nothing\nYou will go to jail\nCNP will revoke your license", "Select", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_4, DIALOG_STYLE_LIST, "{00AAAA}What are the consenquences if you did not use properly the gun license?", "Nothing\nYou will go to jail\nCNP will revoke your license", "Select", "");
	}
	if(dialogid == DIALOG_WEP_QUESTION_4)
	{
		if(response)
		{
			if(listitem == 2)
			{
				pData[playerid][pDrivingScore] ++;
			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_5, DIALOG_STYLE_LIST, "{00AAAA}What if someone OOC insult you what will you do?", " Trashtalk back\nReport to administrator\nShoot him/he", "Select", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_5, DIALOG_STYLE_LIST, "{00AAAA}What if someone OOC insult you what will you do?", " Trashtalk back\nReport to administrator\nShoot him/he", "Select", "");
	}

	if(dialogid == DIALOG_WEP_QUESTION_5)
	{
		if(response)
		{
			if(listitem == 1)
			{
				pData[playerid][pDrivingScore] ++;
			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_6, DIALOG_STYLE_LIST, "{00AAAA}What is Brandishing of firearms:", "You takes out your weapon in public without a reason\nYou drop your gun\nYou shoot someone", "Select", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_6, DIALOG_STYLE_LIST, "{00AAAA}What is Brandishing of firearms:", "You takes out your weapon in public without a reason\nYou drop your gun\nYou shoot someone", "Select", "");
	}
	if(dialogid == DIALOG_WEP_QUESTION_6)
	{
		if(response)
		{
			if(listitem == 0)
			{
				pData[playerid][pDrivingScore] ++;
			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_7, DIALOG_STYLE_LIST, "{00AAAA}What is Carrying unlicensed firearm?", "\nYou have a weapon with gun license\nYou have a weapon without gun license\nYou  bought a weapon in gun store", "Select", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_7, DIALOG_STYLE_LIST, "{00AAAA}What is Carrying unlicensed firearm?", "\nYou have a weapon with gun license\nYou have a weapon without gun license\nYou  bought a weapon in gun store", "Select", "");
	}
	if(dialogid == DIALOG_WEP_QUESTION_7)
	{
		if(response)
		{
			if(listitem == 1)
			{
				pData[playerid][pDrivingScore] ++;
			}
			ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_8, DIALOG_STYLE_LIST, "{00AAAA}Where can you buy a weapon?", "Ammunation\nGrocery Store\nBlack Market", "Select", "");
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_8, DIALOG_STYLE_LIST, "{00AAAA}Where can you buy a weapon?", "Ammunation\nGrocery Store\nBlack Market", "Select", "");
	}
	if(dialogid == DIALOG_WEP_QUESTION_8)
	{
		if(response)
		{
			if(listitem == 0)
			{
				pData[playerid][pDrivingScore] ++;
				if(pData[playerid][pDrivingScore] >= 8)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTGREEN, "[Weapon Test] Congratulations! You have passed the weapon exam.");

					pData[playerid][pDrivingCP] = 0;
					pData[playerid][pWeaponLicense] = 1;
					pData[playerid][pDrivingScore] = 0;
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = 1 WHERE uid = %i", pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
				}
				else
				{
					pData[playerid][pWeaponTest] = 0;

					SendClientMessageEx(playerid, COLOR_REALRED, "[Weapon Test] You failed to pass the weapon license exam.");
					pData[playerid][pDrivingFail] ++;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_REALRED, "[Weapon License Test] You failed to pass the weapon license exam.");
				pData[playerid][pDrivingFail] ++;
			}
		}
		else ShowPlayerDialog(playerid, DIALOG_WEP_QUESTION_8, DIALOG_STYLE_LIST, "{00AAAA}Where can you buy a weapon?", "Ammunation\nGrocery Store\nBlack Market", "Select", "");
	}
	if(dialogid == DIALOG_VOICECHAT)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(pData[playerid][pFaction] == -1)
				{
					return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not apart of any faction.");
				}
				if(pData[playerid][pFactionRadio] == 0)
				{
					pData[playerid][pFactionRadio] = 1;
					SvAttachListenerToStream(factionstream[pData[playerid][pFaction]], playerid);
					callcmd::radiochat(playerid);
					SM(playerid, COLOR_CYAN, "Successfully connected to %s radio channel.", FactionInfo[pData[playerid][pFaction]][fName]);
				}
				else if(pData[playerid][pFactionRadio] == 1)
				{
					pData[playerid][pFactionRadio] = 0;
					SvDetachListenerFromStream(factionstream[pData[playerid][pFaction]], playerid);
					callcmd::radiochat(playerid);
					SM(playerid, COLOR_CYAN, "You have disconnected on %s radio channel.", FactionInfo[pData[playerid][pFaction]][fName]);
				}
			}
			if(listitem == 1)
			{
				if(pData[playerid][pGang] == -1)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
				}
				if(pData[playerid][pGangRadio] == 0)
				{
					pData[playerid][pGangRadio] = 1;
					SvAttachListenerToStream(gangstream[pData[playerid][pGang]], playerid);
					callcmd::radiochat(playerid);
					SM(playerid, COLOR_CYAN, "Successfully connected to %s radio channel.", GangInfo[pData[playerid][pGang]][gName]);
				}
				else if(pData[playerid][pGangRadio] == 1)
				{
					pData[playerid][pGangRadio] = 0;
					SvDetachListenerFromStream(gangstream[pData[playerid][pGang]], playerid);
					callcmd::radiochat(playerid);
					SM(playerid, COLOR_CYAN, "You have disconnected on %s radio channel.", GangInfo[pData[playerid][pGang]][gName]);
				}
			}
		}
	}
   	if(dialogid == DIALOG_TYPE_MAIN)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0: // Hoods
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
        	    }
        	    case 1: // Vents
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
        	    }
        	    case 2: // Lights
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
        	    }
        	    case 3: // Exhausts
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
        	    }
				case 4: // Front Bumpers
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
        	    }
				case 5: // Rear Bumpers
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
        	    }
				case 6: // Roofs
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
        	    }
				case 7: // Spoilers
        	    {
				ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
        	    }
				case 8: // Side Skirts
        	    {
				ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
        	    }
				case 9: // Bullbars
        	    {
				ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
        	    }
				case 10: // Wheels
        	    {
     			ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
        	    }
				case 11: // Car Stereo
        	    {
				ShowPlayerDialog(playerid, DIALOG_TYPE_CSTEREO, DIALOG_STYLE_LIST, "Car Stereo", "Bass Boost\n \nBack", "Apply", "Close");
        	    }
				case 12: // Hydraulics
        	    {
 				ShowPlayerDialog(playerid, DIALOG_TYPE_HYDRAULICS, DIALOG_STYLE_LIST, "Hydaulics", "Hydaulics\n \nBack", "Apply", "Close");
        	    }
				case 13: // Nitrous Oxide
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_LIST, "Nitrous Oxide", "2x Nitrous\n5x Nitrous\n10x Nitrous\n \nBack", "Apply", "Close");
        	    }
			}
		}
	}
	if(dialogid == DIALOG_TYPE_EXHAUSTS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)
        	{
        	    case 0:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 560)
		        {
		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562)
		            {
		            	AddVehicleComponent(car,1034);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
		            	SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
		            	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565)
					{
					    AddVehicleComponent(car,1046);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559)
					{
					    AddVehicleComponent(car,1065);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561)
					{
					    AddVehicleComponent(car,1064);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560)
					{
					    AddVehicleComponent(car,1028);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558)
					{
					    AddVehicleComponent(car,1089);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
				 	    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
	    			}
					}
	  			 	else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562)
			        {
			            AddVehicleComponent(car,1037);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						GivePlayerCash(playerid, -25000);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565)
					{
					    AddVehicleComponent(car,1045);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559)
					{
					    AddVehicleComponent(car,1066);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561)
					{
					    AddVehicleComponent(car,1059);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560)
					{
					    AddVehicleComponent(car,1029);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558)
					{
					    AddVehicleComponent(car,1092);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
			            AddVehicleComponent(car,1044);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
		             	SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
					    AddVehicleComponent(car,1126);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
					    AddVehicleComponent(car,1129);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
	                    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1104);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 535) // Slamvan
					{
 						AddVehicleComponent(car,1113);
 						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1136);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					   	SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
			            AddVehicleComponent(car,1043);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
					    AddVehicleComponent(car,1127);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
					    AddVehicleComponent(car,1132);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1105);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}

					else if(pmodelid[playerid] == 535) // Slamvan
					{
					    AddVehicleComponent(car,1114);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}

					else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1135);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}

					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 4:// Large
        	    {
     				if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 580 ||//stafford
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549 ||//tampa
					pmodelid[playerid] == 477)//zr-350
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580) // stafford
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // zr-350
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1020);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    	}
        	    	else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
				}
        	    case 5: // Medium
        	    {
                        if(
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 477)//zr-350
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // zr350
			        	{
			            AddVehicleComponent(car,1021);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 6: // Small
        	    {
                        if(
					pmodelid[playerid] == 436)//previon
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1022);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 7: // Twin
        	    {
                        if(
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549 ||//tampa
					pmodelid[playerid] == 477)//zr-350
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405 ) // sentinel
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // zr-350
			        	{
			            AddVehicleComponent(car,1019);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 8: // Upswept
        	    {
                        if(
                    pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549 ||//tampa
					pmodelid[playerid] == 477)//zr-350
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580) // stafford
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1018);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
						
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // zr-350
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1018);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
						}
        	    }
				case 9: // _
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_EXHAUSTS, DIALOG_STYLE_LIST, "Exhausts", "Wheel Arc. Alien exhaust\nWheel Arc. X-Flow exhaust\nLow Co. Chromer exhaust\nLow Co. Slamin exhaust\nTransfender Large exhaust\nTransfender Medium exhaust\nTransfender Small exhaust\nTransfender Twin exhaust\nTransfender Upswept exhaust\n \nBack", "Apply", "Close");
        	    }
        	    case 10: // Back
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
			}
		}
	}
	if(dialogid == DIALOG_TYPE_FBUMPS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
				{
		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
		            {
		            	AddVehicleComponent(car,1171);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
	              		SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
		            	ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1153);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
					    AddVehicleComponent(car,1160);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1155);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1169);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558) // Uranus
					{
					    AddVehicleComponent(car,1166);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
				 	    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
			        {
			            AddVehicleComponent(car,1172);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1152);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jetser
					{
					    AddVehicleComponent(car,1173);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1157);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1170);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558)  // Uranus
					{
					    AddVehicleComponent(car,1165);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
				{
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
			            AddVehicleComponent(car,1174);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
					    AddVehicleComponent(car,1179);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
					    AddVehicleComponent(car,1189);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1182);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 535) // Slamvan
					{
					    AddVehicleComponent(car,1115);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1191);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 535 ||
				pmodelid[playerid] == 536 ||
	            pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 576)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
			            AddVehicleComponent(car,1175);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
					    AddVehicleComponent(car,1185);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
					    AddVehicleComponent(car,1188);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1181);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}

				    else if(pmodelid[playerid] == 535) // Slamvan
					{
					    AddVehicleComponent(car,1116);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1190);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}

					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
             	ShowPlayerDialog(playerid, DIALOG_TYPE_FBUMPS, DIALOG_STYLE_LIST,"Front Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow co. Chromer Bumper\nLow co. Slamin Bumper\n \nBack", "Apply", "Close");
        	    }
				case 5:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
			}
		}
	}
	if(dialogid == DIALOG_TYPE_RBUMPS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
		            {
		            	AddVehicleComponent(car,1149);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
	              		SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
		            	ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1150);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
					    AddVehicleComponent(car,1159);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1154);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1141);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558) // Uranus
					{
					    AddVehicleComponent(car,1168);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
				 	    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {


			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
			        {
			            AddVehicleComponent(car,1148);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"YComponent successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1151);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jetser
					{
					    AddVehicleComponent(car,1161);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1156);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1140);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558)  // Uranus
					{
					    AddVehicleComponent(car,1167);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
		        {


              		new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
			            AddVehicleComponent(car,1176);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 534)// Remington
					{
					    AddVehicleComponent(car,1180);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 567)// Savanna
					{
					    AddVehicleComponent(car,1187);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1184);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 535) // Slamvan
					{
					    AddVehicleComponent(car,1109);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1192);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
     }
						else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
                 if(pmodelid[playerid] == 575 ||
				pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536 ||
				pmodelid[playerid] == 576 ||
				pmodelid[playerid] == 535)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
			            AddVehicleComponent(car,1177);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 534)// Remington
					{
					    AddVehicleComponent(car,1178);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 567)// Savanna
					{
					    AddVehicleComponent(car,1186);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1183);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}

						else if(pmodelid[playerid] == 535) // Slamvan
					{
					    AddVehicleComponent(car,1110);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}

						else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1193);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}

					}
						else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
            	    ShowPlayerDialog(playerid, DIALOG_TYPE_RBUMPS, DIALOG_STYLE_LIST, "Rear Bumpers", "Wheel Arc. Alien Bumper\nWheel Arc. X-Flow Bumper\nLow Co. Chromer Bumper\nLow Co. Slamin Bumper\n \nBack", "Apply", "Close");
        	    }
				case 5:
        	    {
     				ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_ROOFS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
		            {
		            	AddVehicleComponent(car,1038);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
	              		SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
		            	ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1054);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 559) // Jester
					{
					    AddVehicleComponent(car,1067);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1055);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1032);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 558) // Uranus
					{
					    AddVehicleComponent(car,1088);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
				 	    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
					}
						else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                 if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {


			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
			        {
			            AddVehicleComponent(car,1035);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1053);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 559) // Jetser
					{
					    AddVehicleComponent(car,1068);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1061);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1033);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
						else if(pmodelid[playerid] == 558)  // Uranus
					{
					    AddVehicleComponent(car,1091);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
					}
						else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
                 if(pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 567) // Savanna
			        {
			            AddVehicleComponent(car,1130);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
	   					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1128);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
					}
						else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
                 if(pmodelid[playerid] == 567 ||
				pmodelid[playerid] == 536)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 567) // Savanna
			        {
			            AddVehicleComponent(car,1131);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
	   					else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1103);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
					}
						else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
                 if(
					pmodelid[playerid] == 401 ||
					pmodelid[playerid] == 518 ||
					pmodelid[playerid] == 589 ||
					pmodelid[playerid] == 492 ||
					pmodelid[playerid] == 546 ||
					pmodelid[playerid] == 603 ||
					pmodelid[playerid] == 426 ||
					pmodelid[playerid] == 436 ||
					pmodelid[playerid] == 580 ||
					pmodelid[playerid] == 550||
					pmodelid[playerid] == 477)
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 492)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477)
			        	{
			            AddVehicleComponent(car,1006);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
						}
        	    }
				case 5:
        	    {
                 ShowPlayerDialog(playerid, DIALOG_TYPE_ROOFS, DIALOG_STYLE_LIST, "Roofs", "Wheel Arc. Alien\nWheel Arc. X-Flow\nLow Co. Hardtop Roof\nLow Co. Softtop Roof\nTransfender Roof Scoop\n \nBack", "Apply", "Close");
        	    }
				case 6:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_SPOILERS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
		            {
		            	AddVehicleComponent(car,1147);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
	              		SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
		            	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1049);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
					    AddVehicleComponent(car,1162);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1158);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1138);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558) // Uranus
					{
					    AddVehicleComponent(car,1164);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
				 	    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {


			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
			        {
			            AddVehicleComponent(car,1146);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1150);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jetser
					{
					    AddVehicleComponent(car,1158);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1060);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1139);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558)  // Uranus
					{
					    AddVehicleComponent(car,1163);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:// Win
        	    {
                if(
                    pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 477 ||//stallion
					pmodelid[playerid] == 580 ||//stafford
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // stallion
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580) // stafford
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1001);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 3: // Fury
        	    {
                        if(
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 405 ||//sentinel
					pmodelid[playerid] == 477 ||//stallion
					pmodelid[playerid] == 580 ||//stafford
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // stallion
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580) // stafford
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1023);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 4: // Alpha
        	    {
                        if(
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 415 ||//cheetah
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 426 ||//premier
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 477 ||//stallion
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
						
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 415) // cheetah
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
						
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
						
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
						
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
						
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477) // stallion
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1003);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 5: // Pro
        	    {
                        if(
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 492 ||//greenwood
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 405)//sentinel
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 518) // club
			        	{
			            AddVehicleComponent(car,1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 492) // greenwood
			        	{
			            AddVehicleComponent(car,1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
        				AddVehicleComponent(car,1000);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
				case 6: // Champ
        	    {
                        if(
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 542 ||//clover
					pmodelid[playerid] == 405)//sentinel
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1014);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			            AddVehicleComponent(car,1014);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 405) // sentinel
			        	{
        				AddVehicleComponent(car,1014);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 7: // Race
        	    {
                if(
					pmodelid[playerid] == 527 ||//cadrona
					pmodelid[playerid] == 542)//clover
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 527) // cadrona
			        	{
			            AddVehicleComponent(car,1014);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 542) // clover
			        	{
			            AddVehicleComponent(car,1014);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
				case 8: // Drag
        	    {
                if(
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 517)//majestic
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1002);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1002);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
						}
        	    }
        	    case 9:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_SPOILERS, DIALOG_STYLE_LIST, "Spoilers", "Wheel Arc. Alien Spoiler\nWheel Arc. X-Flow Spoiler\nTransfender Win Spoiler\nTransfender Fury Spoiler\nTransfender Alpha Spoiler\nTransfender Pro Spoiler\nTransfender Champ Spoiler\nTransfender Race Spoiler\nTransfender Drag Spoiler\n \nBack", "Apply", "Close");
        	    }
				case 10:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_SIDESKIRTS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {

		            new car = GetPlayerVehicleID(playerid);
		            if(pmodelid[playerid] == 562) // Elegy
		            {
		            	AddVehicleComponent(car,1036);
		            	AddVehicleComponent(car,1040);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
	              		SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
		            	ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1047);
					    AddVehicleComponent(car,1051);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jester
					{
					    AddVehicleComponent(car,1069);
					    AddVehicleComponent(car,1071);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"YComponent successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1056);
					    AddVehicleComponent(car,1062);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1026);
					    AddVehicleComponent(car,1027);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558) // Uranus
					{
					    AddVehicleComponent(car,1090);
					    AddVehicleComponent(car,1094);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
				 	    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                if(pmodelid[playerid] == 562 ||
				pmodelid[playerid] == 565 ||
				pmodelid[playerid] == 559 ||
				pmodelid[playerid] == 561 ||
				pmodelid[playerid] == 558 ||
				pmodelid[playerid] == 560)
		        {


			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 562) // Elegy
			        {
			            AddVehicleComponent(car,1039);
			            AddVehicleComponent(car,1041);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 565) // Flash
					{
					    AddVehicleComponent(car,1048);
					    AddVehicleComponent(car,1052);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 559) // Jetser
					{
					    AddVehicleComponent(car,1070);
					    AddVehicleComponent(car,1072);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 561) // Stratum
					{
					    AddVehicleComponent(car,1057);
					    AddVehicleComponent(car,1063);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 560) // Sultan
					{
					    AddVehicleComponent(car,1031);
					    AddVehicleComponent(car,1030);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					else if(pmodelid[playerid] == 558)  // Uranus
					{
					    AddVehicleComponent(car,1093);
					    AddVehicleComponent(car,1095);
						
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
					    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
                if(pmodelid[playerid] == 575 ||
	               pmodelid[playerid] == 536 ||
	               pmodelid[playerid] == 576 ||
		 	       pmodelid[playerid] == 567)
	               {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 575) // Brodway
			        {
	       		        AddVehicleComponent(car,1042);
	       		        AddVehicleComponent(car,1099);
						
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
	   				else if(pmodelid[playerid] == 567) // Savanna
					{
					    AddVehicleComponent(car,1102);
					    AddVehicleComponent(car,1133);
						
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
	    		        ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
	                }
	                else if(pmodelid[playerid] == 576) // Tornado
					{
					    AddVehicleComponent(car,1134);
					    AddVehicleComponent(car,1137);
						
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
	    		        ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
	                }
	                else if(pmodelid[playerid] == 536) // Blade
					{
					    AddVehicleComponent(car,1108);
					    AddVehicleComponent(car,1107);
						
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
	                    ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
	                }
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
                if(pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 534)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 534) // Remington
			        {
			            AddVehicleComponent(car,1122);
			            AddVehicleComponent(car,1101);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
                if(pmodelid[playerid] == 534 ||
				pmodelid[playerid] == 534)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 534) // Remington
			        {
			            AddVehicleComponent(car,1106);
			            AddVehicleComponent(car,1124);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
						
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 5:
        	    {
                if(pmodelid[playerid] == 535)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 535) // Slamvan
			        {
			            AddVehicleComponent(car,1118);
			            AddVehicleComponent(car,1120);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 6:
        	    {
				if(pmodelid[playerid] == 535)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 535) // Slamvan
			        {
			            AddVehicleComponent(car,1119);
			            AddVehicleComponent(car,1121);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
					}
        	    }
				case 7:
        	    {
				if(
					pmodelid[playerid] == 401 ||
					pmodelid[playerid] == 518 ||
					pmodelid[playerid] == 527 ||
					pmodelid[playerid] == 415 ||
					pmodelid[playerid] == 589 ||
					pmodelid[playerid] == 546 ||
					pmodelid[playerid] == 517 ||
					pmodelid[playerid] == 603 ||
					pmodelid[playerid] == 436 ||
					pmodelid[playerid] == 439 ||
					pmodelid[playerid] == 580 ||
					pmodelid[playerid] == 549 ||
					pmodelid[playerid] == 477)
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 527)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 415)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 439)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 580)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 477)
			        	{
			            AddVehicleComponent(car,1007);
			            AddVehicleComponent(car,1017);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
        	    	}
        	    		else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
						}
        	    }
				case 8:
        	    {
				ShowPlayerDialog(playerid, DIALOG_TYPE_SIDESKIRTS, DIALOG_STYLE_LIST, "Side Skirts", "Wheel Arc. Alien Side Skirt\nWheel Arc. X-Flow Side Skirt\nLocos Chrome Strip\nLocos Chrome Flames\nLocos Chrome Arches \nLocos Chrome Trim\nLocos Wheelcovers\nTransfender Side Skirt\n \nBack", "Apply", "Close");
        	    }
				case 9:
        	    {
    			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_BULLBARS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(pmodelid[playerid] == 534)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 534) // Remington
			        {
			            AddVehicleComponent(car,1100);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
			        }
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 1:
        	    {
                if(pmodelid[playerid] == 534)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 534) // Remington
			        {
			            AddVehicleComponent(car,1123);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 2:
        	    {
                if(pmodelid[playerid] == 534)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 534) // Remington
			        {
			            AddVehicleComponent(car,1125);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
        	    }
				case 3:
        	    {
                if(pmodelid[playerid] == 535)

			    {
			        new car = GetPlayerVehicleID(playerid);
			        if(pmodelid[playerid] == 535) // Slamvan
			        {
			            AddVehicleComponent(car,1117);
						
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
					}
					else
					{
				    SendClientMessage(playerid,COLOR_YELLOW,"[WARNING] ou cannot install this component to your car. ");
					ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_BULLBARS, DIALOG_STYLE_LIST, "Bullbars", "Locos Chrome Grill\nLocos Chrome Bars\nLocos Chrome Lights \nLocos Chrome Bullbar\n \nBack", "Apply", "Close");
        	    }
				case 5:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_WHEELS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(GetPlayerMoney(playerid) >= 20000)
		        {
		            new car = GetPlayerVehicleID(playerid);
		            AddVehicleComponent(car,1025);
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					//						
		            SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Offroad Wheels ");
		            ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
        	    case 1:
        	    {
                if(GetPlayerMoney(playerid) >= 20000)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1074);
					//						
           			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Mega Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
        	    case 2:
        	    {
                if(GetPlayerMoney(playerid) >= 20000)
			    {
			        new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1076);
					//						
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Wires Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 3:
        	    {
                if(GetPlayerMoney(playerid) >= 20000)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1078);
					//						
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Twist Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	      		 	SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 4:
        	    {
                if(GetPlayerMoney(playerid) >= 20000)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1081);
					//						
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Grove Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 5:
        	    {
                if(GetPlayerMoney(playerid) >= 20000)
			    {
			        new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1082);
					//						
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Import Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 6:
        	    {
				if(GetPlayerMoney(playerid) >= 20000)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1085);
					//						
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Atomic Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 7:
        	    {
				if(GetPlayerMoney(playerid) >= 20000)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1096);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					//						
	          		SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Ahab Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 8:
        	    {
				if(GetPlayerMoney(playerid) >= 20000)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1097);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					//						
	          		SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Virtual Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 9:
        	    {
     			if(GetPlayerMoney(playerid) >= 20000)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1098);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					//						
	          		SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Access Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
				    SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 10:
        	    {
				if(GetPlayerMoney(playerid) >= 20000)
		        {
		            new car = GetPlayerVehicleID(playerid);
		            AddVehicleComponent(car,1084);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					//						
		            SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Trance Wheels ");
		            ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 11:
        	    {
 				if(GetPlayerMoney(playerid) >= 20000)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1073);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					//						
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Shadow Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 12:
        	    {
					if(GetPlayerMoney(playerid) >= 20000)
			    {
			        new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1075);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					//						
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Rimshine Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
					else
				{
	      	 		SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 13:
        	    {
					if(GetPlayerMoney(playerid) >= 20000)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1077);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					//						
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Classic Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
					else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 14:
        	    {
					if(GetPlayerMoney(playerid) >= 20000)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1079);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					//						
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Cutter Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
					else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 15:
        	    {
					if(GetPlayerMoney(playerid) >= 20000)
					{
						//new car = GetPlayerVehicleID(playerid);
						//AddVehicleComponent(car,1080);
						//PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						////						
						//SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Switch Wheels");
						//ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
						SendClientMessage(playerid,COLOR_RED,"Disable!");
					}
					else
					{
						SendClientMessage(playerid,COLOR_RED,"Not enough money!");
						ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
					}
        	    }
				case 16:
        	    {
					if(GetPlayerMoney(playerid) >= 20000)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1083);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					//GivePlayerCash(playerid, -20000);
			        SendClientMessage(playerid,COLOR_WHITE,"You have succesfully added Dollar Wheels");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
					else
				{
				    SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
				}
        	    }
				case 17:
        	    {
					ShowPlayerDialog(playerid, DIALOG_TYPE_WHEELS, DIALOG_STYLE_LIST, "Wheels", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nTrance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\n \nBack", "Apply", "Close");
        	    }
				case 18:
        	    {
     			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_CSTEREO)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(GetPlayerMoney(playerid) >= 5000)
		        {
		            new car = GetPlayerVehicleID(playerid);
		            AddVehicleComponent(car,1086);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					
		            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added. ");
		            ShowPlayerDialog(playerid, DIALOG_TYPE_CSTEREO, DIALOG_STYLE_LIST, "Car Stereo", "Bass Boost\n \nBack", "Apply", "Close");
				}
				else
				{
	                SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_CSTEREO, DIALOG_STYLE_LIST, "Car Stereo", "Bass Boost\n \nBack", "Apply", "Close");
			    }
        	    }
        	    case 1:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_CSTEREO, DIALOG_STYLE_LIST, "Car Stereo", "Bass Boost\n \nBack", "Apply", "Close");
        	    }
        	    case 2:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_HYDRAULICS)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(GetPlayerMoney(playerid) >= 30000)
		        {
		            new car = GetPlayerVehicleID(playerid);
		            AddVehicleComponent(car,1087);
					
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added. ");
		            ShowPlayerDialog(playerid, DIALOG_TYPE_HYDRAULICS, DIALOG_STYLE_LIST, "Hydaulics", "Hydaulics\n \nBack", "Apply", "Close");
				}
				else
				{
	                SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_HYDRAULICS, DIALOG_STYLE_LIST, "Hydaulics", "Hydaulics\n \nBack", "Apply", "Close");
			    }
        	    }
        	    case 1:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_HYDRAULICS, DIALOG_STYLE_LIST, "Hydaulics", "Hydaulics\n \nBack", "Apply", "Close");
        	    }
        	    case 2:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_NITRO)
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:
        	    {
                if(GetPlayerMoney(playerid) >= 10000)
		        {
		            new car = GetPlayerVehicleID(playerid);
		            AddVehicleComponent(car,1008);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					
		            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added. ");
           			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
				}
				else
				{
	                SendClientMessage(playerid,COLOR_RED,"Not enough money!");
        			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
			    }
        	    }
        	    case 1:
        	    {
                if(GetPlayerMoney(playerid) >= 30000)
			    {
			        new car = GetPlayerVehicleID(playerid);
			        AddVehicleComponent(car,1009);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					
			        SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
           			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
           			ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
				}
        	    }
        	    case 2:
        	    if(GetPlayerMoney(playerid) >= 50000)
			    {
			        new car = GetPlayerVehicleID(playerid);
	                AddVehicleComponent(car,1010);
					
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_WHITE,"Component successfully added.");
			        ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_LIST, "Nitrous Oxide", "2x Nitrous\n5x Nitrous\n10x Nitrous\n \nBack", "Apply", "Close");
				}
				else
				{
	       			SendClientMessage(playerid,COLOR_RED,"Not enough money!");
				    ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_LIST, "Nitrous Oxide", "2x Nitrous\n5x Nitrous\n10x Nitrous\n \nBack", "Apply", "Close");
				}
        	    case 3:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_NITRO, DIALOG_STYLE_LIST, "Nitrous Oxide", "2x Nitrous\n5x Nitrous\n10x Nitrous\n \nBack", "Apply", "Close");
        	    }
        	    case 4:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
 			}
		}
	}
	if(dialogid == DIALOG_TYPE_HOODS)// HOODS
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:// fury
        	    {
                	if(
					pmodelid[playerid] == 401 ||
					pmodelid[playerid] == 518 ||
					pmodelid[playerid] == 589 ||
					pmodelid[playerid] == 492 ||
					pmodelid[playerid] == 426 ||
					pmodelid[playerid] == 550)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 492) // greenwood
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1005);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
					}
					else
					{
					SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
					}
	    		}
        	    case 1: // Champ
        	    {
                if(
					pmodelid[playerid] == 401 ||
					pmodelid[playerid] == 492 ||
					pmodelid[playerid] == 546 ||
					pmodelid[playerid] == 426 ||
					pmodelid[playerid] == 550)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1004);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1004);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 492) // greenwood
			        	{
			            AddVehicleComponent(car,1004);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 426) // premier
			        	{
			            AddVehicleComponent(car,1004);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1004);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
					}
					else
					{
					SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
					}
        	    }
				case 2: // Race
        	    {
                if(
					pmodelid[playerid] == 549)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1011);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
					}
					else
					{
					SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
					}
        	    }
        	    case 3: // Worx
        	    {
                if(
					pmodelid[playerid] == 549)
			    	{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1012);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
						}
					}
					else
					{
					SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
					ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
					}
        	    }
				case 4:
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_HOODS, DIALOG_STYLE_LIST, "Hoods", "Fury\nChamp\nRace\nWorx\n \nBack", "Apply", "Close");
        	    }
				case 5: // Back
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
			}
		}
	}
	////////////////////////////////////////end of hoods///////////
    if(dialogid == DIALOG_TYPE_VENTS)//////////////////VENTS//////////////////
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:// Oval
        	    {
     				if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 547 ||//primo
					pmodelid[playerid] == 439 ||//stallion
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 547) // primo
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 439) // stallion
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1142);
			            AddVehicleComponent(car,1143);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
        	    	}
        	    	else
						{
							SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
							ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
				}
        	    case 1: // Square
        	    {
                if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 546 ||//intruder
					pmodelid[playerid] == 517 ||//majestic
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 439 ||//stallion
					pmodelid[playerid] == 550 ||//sunrise
					pmodelid[playerid] == 549)//tampa
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 546) // intruder
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 517) // majestic
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 439) // stallion
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 550) // sunrise
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 549) // tampa
			        	{
			            AddVehicleComponent(car,1144);
			            AddVehicleComponent(car,1145);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
        	    	}
              			else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
        	    }
				case 2: // _
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
        	    }
        	    case 3: // Back
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
			}
		}
	}


	///////////END OF VENTS///////////
	if(dialogid == DIALOG_TYPE_LIGHTS)//////////////////LIGTS//////////////////
    {
        if(!response)
        {
            SetCameraBehindPlayer(playerid);
        }
        if(response)
        {
           	switch(listitem)// Checking which list item was selected
        	{
        	    case 0:// round
        	    {
     				if(
					pmodelid[playerid] == 401 ||//bravura
					pmodelid[playerid] == 518 ||//buccaneer
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 400 ||//landstalker
					pmodelid[playerid] == 436 ||//previon
					pmodelid[playerid] == 439)//stallion
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 401) // bravura
			        	{
               			AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"[INFO]Component successfully added");
               			ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 518) // buccaneer
			        	{
			            AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
               			ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 589) // club
			        	{
			            AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
           			 	ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 436) // previon
			        	{
			            AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 439) // stallion
			        	{
			            AddVehicleComponent(car,1013);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
        	    	}
                    else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
				}
        	    case 1: // Square
        	    {
                if(
					pmodelid[playerid] == 589 ||//club
					pmodelid[playerid] == 603 ||//phoenix
					pmodelid[playerid] == 400)//landstalker
					{
			        	new car = GetPlayerVehicleID(playerid);
			        	if(pmodelid[playerid] == 589) // club
			        	{
			            AddVehicleComponent(car,1024);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 603) // phoenix
			        	{
			            AddVehicleComponent(car,1024);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
			            ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
			        	if(pmodelid[playerid] == 400) // landstalker
			        	{
			            AddVehicleComponent(car,1024);
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						
			            SendClientMessage(playerid,COLOR_WHITE,"Component successfully added");
                        ShowPlayerDialog(playerid, DIALOG_TYPE_VENTS, DIALOG_STYLE_LIST, "Vents", "Oval\nSquare\n \nBack", "Apply", "Close");
						}
        	    	}
        	    	else
						{
						SendClientMessage(playerid,COLOR_YELLOW,"You cannot install this component on your car.");
						ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
						}
        	    }
				case 2: // _
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_LIGHTS, DIALOG_STYLE_LIST, "Lights", "Round\nSquare\n \nBack", "Apply", "Close");
        	    }
        	    case 3: // Back
        	    {
                ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, "Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
        	    }
			}
		}
	}
	switch(dialogid)
	{
		case DIALOG_CARSTORAGE:
		{
		    if(response)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM vehicles WHERE ownerid = %i LIMIT %i, 1", pData[playerid][pID], listitem);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerUseCarStorage", "i", playerid);
			}
		}
		case DIALOG_VALLEY:
		{
		    if(response)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM vehicles WHERE ownerid = %i LIMIT %i, 1", pData[playerid][pID], listitem);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerUseCarValley", "i", playerid);
			}
		}
 		case DIALOG_DMVRELEASE:
		{
			if(response)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, tickets, modelid FROM vehicles WHERE ownerid = %i AND impounded = 1 LIMIT %i, 1", pData[playerid][pID], listitem);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerDMVRelease", "i", playerid);
			}
		}
  		case DIALOG_BUYPARTS:
		{
			if(response)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid FROM vehicles WHERE ownerid = %i AND broken = 1 LIMIT %i, 1", pData[playerid][pID], listitem);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerBuyParts", "i", playerid);
			}
		}
 		case DIALOG_GRAFFITICOLOR:
		{
			if (response)
			{
			    new id = Graffiti_Nearest(playerid);

				if (id == -1)
				    return 0;

			    if (IsSprayingInProgress(id))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "There is another player spraying at this point already.");
				}

			    switch (listitem)
			    {
			        case 0:
			        {
		    	        pData[playerid][pGraffitiColor] = 0xFFFFFFFF;
					}

			        case 1:
			        {
			            pData[playerid][pGraffitiColor] = 0xFFFF0000;
					}

			        case 2:
			        {
			            pData[playerid][pGraffitiColor] = 0xFFFFFF00;
					}

			        case 3:
			        {
			            pData[playerid][pGraffitiColor] = 0xFF33CC33;
					}

			        case 4:
			        {
			            pData[playerid][pGraffitiColor] = 0xFF33CCFF;
					}

		    	    case 5:
		    	    {
			            pData[playerid][pGraffitiColor] = 0xFF0080FF;
					}

		    	    case 6:
		    	    {
			            pData[playerid][pGraffitiColor] = 0xFF1394BF;
					}
					case 7:
					{
						pData[playerid][pGraffitiColor] = 0x000000AA;
					}
			    }
			    ShowPlayerDialog(playerid, DIALOG_GRAFFITITEXT, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Please enter the text you wish to spray below.\n\nNote: Your text input cannot exceed over 64 characters.", "Submit", "Cancel");
			}
		}
		case DIALOG_GRAFFITITEXT:
		{
			if (response)
			{
			    new id = Graffiti_Nearest(playerid);

				if (id == -1)
				    return 0;

			    if (isnull(inputtext))
			    {
			        return ShowPlayerDialog(playerid, DIALOG_GRAFFITITEXT, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Please enter the text you wish to spray below.\n\nNote: Your text input cannot exceed over 64 characters.", "Submit", "Cancel");
				}
				if (strlen(inputtext) > 64)
				{
				    return ShowPlayerDialog(playerid, DIALOG_GRAFFITITEXT, DIALOG_STYLE_INPUT, SERVER_DIALOG, "[!] Your input can't exceed 64 characters.\n\nPlease enter the text you wish to spray below.\n\nNote: Your text input cannot exceed over 64 characters.", "Submit", "Cancel");
				}
		        if (IsSprayingInProgress(id))
		        {
			        return SCM(playerid, COLOR_SYNTAX, "There is another player spraying at this point already.");
				}
		        pData[playerid][pGraffiti] = id;
		        pData[playerid][pGraffitiTime] = 15;

				strpack(pData[playerid][pGraffitiText], inputtext, 64 char);
				ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0);

				GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Spraying...~w~ please wait!", 15000, 3);

				SendProximityMessage(playerid, 30.0, SERVER_COLOR, "**{C2A2DA} %s takes out a can of spray paint and sprays the wall.", GetRPName(playerid));
			}
		}
		case DIALOG_BIZMENU:
		{
		    if(response)
			{
			    if(listitem == 0)
			    {
			    	ShowPlayerDialog(playerid, DIALOG_BIZNAME, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Enter new name below for your business.", "Confirm", "Return");
				}
				if(listitem == 1)
			    {
			    	ShowPlayerDialog(playerid, DIALOG_MESSAGE, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Enter new message below for your business.", "Confirm", "Return");
				}
				if(listitem == 2)
			    {
				    new businessid = GetNearbyBusinessEx(playerid);
				    new string[128];
					format(string, sizeof(string),"Your business's safe currently contain:\n\t\t$%s\n\t\tProducts: %i.", number_format(BusinessInfo[businessid][bCash]), BusinessInfo[businessid][bProducts]);
    				ShowPlayerDialog(playerid,DIALOG_BIZSAFE,DIALOG_STYLE_MSGBOX,SERVER_DIALOG,string,"Deposit","Withdraw");
				}
				if(listitem == 3)
	   		   	{
				    new businessid = GetNearbyBusinessEx(playerid);
				    new string[128];
					format(string, sizeof(string),""WHITE"Are you sure you want to "SVRCLR"%s "WHITE"your business?", RBS(businessid));
    				ShowPlayerDialog(playerid,DIALOG_BIZLOCK,DIALOG_STYLE_MSGBOX,SERVER_DIALOG,string,"Unlock","Lock");
				}
			}
		}
        case DIALOG_BIZNAME:
		{
		    new businessid = GetNearbyBusinessEx(playerid);
            new string28[150];

			format(BusinessInfo[businessid][bDescription], 64, inputtext);
			format(string28,sizeof(string28), "You have set your business name to %s.", inputtext);
			SCM(playerid, COLOR_AQUA, string28);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET biz_desc = '%s' WHERE id = %i", BusinessInfo[businessid][bDescription], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);

			ReloadBusiness(businessid);
		}
        case DIALOG_BIZSAFE:
        {
            if(!response)
            {
                if(!response)
                {
                    new businessid = GetNearbyBusinessEx(playerid);
                    new string[128];
                    format(string, sizeof(string),""WHITE"Enter the amount of money you want to withdraw your business vault.\n\t\t\t"SVRCLR"Current Vault Balance: $%s", number_format(BusinessInfo[businessid][bCash]));
			    	ShowPlayerDialog(playerid,DIALOG_WITHDRAW,DIALOG_STYLE_INPUT,SERVER_DIALOG,string,"Confirm","Cancel");
			    }
			}
			else
			{
			    new businessid = GetNearbyBusinessEx(playerid);
			    new string[128];
			    format(string, sizeof(string),""WHITE"Enter the amount of money you want to deposit your business vault.\n\t\t\t"SVRCLR"Current Vault Balance: $%s", number_format(BusinessInfo[businessid][bCash]));
		    	ShowPlayerDialog(playerid,DIALOG_DEPOSIT,DIALOG_STYLE_INPUT,SERVER_DIALOG,string,"Confirm","Cancel");
		    }
		}
		case DIALOG_WITHDRAW:
		{
		    new businessid = GetNearbyBusinessEx(playerid);
		    new string[128];
            if(!IsNumeric(inputtext))
		    {
      			format(string, sizeof(string),"{FF0000}ENTRY DECLINED: You must enter a number!\n"WHITE"Enter the amount of money you want to withdraw your business vault.\n\n\t\t\t"SVRCLR"Current Vault Balance: $%s", number_format(BusinessInfo[businessid][bCash]));
   				ShowPlayerDialog(playerid,DIALOG_WITHDRAW,DIALOG_STYLE_INPUT,SERVER_DIALOG,string,"Confirm","Cancel");
    		}
            new string28[128];
    		new money = strval(inputtext);
   			if(money > BusinessInfo[businessid][bCash]) return SCM(playerid, COLOR_SYNTAX, "You don't have this much money in your business vault.");
    		BusinessInfo[businessid][bCash] -= money;
    		GivePlayerCash(playerid, money);

    		SendProximityMessage(playerid, 15.0, SERVER_COLOR, "**{C2A2DA} %s has withdrawn money from their business vault.", GetRPName(playerid));
			format(string28, sizeof(string28), " You have withdrawn $%s from your business vault, There is now $%s remaining", number_format(money), number_format(BusinessInfo[businessid][bCash]));
			SCM(playerid, COLOR_AQUA, string28);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);
		}
        case DIALOG_DEPOSIT:
		{
		    new businessid = GetNearbyBusinessEx(playerid);
		    new string[128];
            if(!IsNumeric(inputtext))
		    {
      			format(string, sizeof(string),"{FF0000}ENTRY DECLINED: You must enter a number!\n"WHITE"Enter the amount of money you want to withdraw your business vault.\n\n\t\t\t"SVRCLR"Current Vault Balance: $%s", number_format(BusinessInfo[businessid][bCash]));
   				ShowPlayerDialog(playerid,DIALOG_WITHDRAW,DIALOG_STYLE_INPUT,SERVER_DIALOG,string,"Confirm","Cancel");
    		}
            new string28[128];
    		new money = strval(inputtext);
   			if(money > pData[playerid][pCash]) return SCM(playerid, COLOR_SYNTAX, "You don't have this much money on you.");
    		BusinessInfo[businessid][bCash] += money;
    		GivePlayerCash(playerid, -money);

			format(string28, sizeof(string28), " You have deposit $%s from your business vault, There is now $%s available", number_format(money), number_format(BusinessInfo[businessid][bCash]));
			SCM(playerid, COLOR_AQUA, string28);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);
		}
        case DIALOG_MESSAGE:
		{
		    new businessid = GetNearbyBusinessEx(playerid);
            new string28[150];

			format(BusinessInfo[businessid][bMessage], 128, inputtext);
			format(string28,sizeof(string28), "You have set your business message to %s.", inputtext);
			SCM(playerid, COLOR_AQUA, string28);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET message = '%s' WHERE id = %i", BusinessInfo[businessid][bMessage], BusinessInfo[businessid][bID]);
			mysql_tquery(connectionID, queryBuffer);

			ReloadBusiness(businessid);
		}
		case DIALOG_BIZLOCK:
		{
		    if(!response)
	    	{
	    	    new businessid = GetNearbyBusinessEx(playerid);

                if(!BusinessInfo[businessid][bLocked])
				{
    				BusinessInfo[businessid][bLocked] = 1;
    				GameTextForPlayer(playerid, "~r~Business locked", 3000, 6);
			    	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their business door.", GetRPName(playerid));

			    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[businessid][bLocked], BusinessInfo[businessid][bID]);
					mysql_tquery(connectionID, queryBuffer);

					ReloadBusiness(businessid);
				}
			}
			else
			{
			    new businessid = GetNearbyBusinessEx(playerid);
			    BusinessInfo[businessid][bLocked] = 0;
			    GameTextForPlayer(playerid, "~g~Business unlocked", 3000, 6);
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their business door.", GetRPName(playerid));

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[businessid][bLocked], BusinessInfo[businessid][bID]);
				mysql_tquery(connectionID, queryBuffer);

				ReloadBusiness(businessid);
			}
		}
		case DIALOG_TOP: { // Crimes, Rich, Level
			if(response) {
				new Cache:Result, Name[MAX_PLAYER_NAME], Money, fString[128], cString[600];

				if(listitem == 0)
			    {
					Result = mysql_query(connectionID, "SELECT crimes, username FROM users ORDER BY crimes DESC LIMIT 10");
					if(cache_num_rows())
					{
						for(new i = 0; i < cache_num_rows(); ++ i)
						{
							cache_get_field_content(i, "username", Name);
							Money = cache_get_field_content_int(i, "crimes");

							format(fString, sizeof fString, "%s\t%i Crimes\n", Name, Money);
							strcat(cString, fString);
						}
					}
					cache_delete(Result);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "Top 10 Criminal in the City.", cString, "Okay","");
				}
				if(listitem == 1)
			    {
					Result = mysql_query(connectionID, "SELECT bank, username FROM users ORDER BY bank DESC LIMIT 10");
					if(cache_num_rows())
					{
						for(new i = 0; i < cache_num_rows(); ++ i)
						{
							cache_get_field_content(i, "username", Name);
							Money = cache_get_field_content_int(i, "bank");

							format(fString, sizeof fString, "%s\t$%d\n", Name, Money);
							strcat(cString, fString);
						}
					}
					cache_delete(Result);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "Top 10 Richest in the City.", cString, "Okay","");
				}
				if(listitem == 2)
			    {
					Result = mysql_query(connectionID, "SELECT level, username FROM users ORDER BY level DESC LIMIT 10");
					if(cache_num_rows())
					{
						for(new i = 0; i < cache_num_rows(); ++ i)
						{
							cache_get_field_content(i, "username", Name);
							Money = cache_get_field_content_int(i, "level");

							format(fString, sizeof fString, "%s\t%i Level\n", Name, Money);
							strcat(cString, fString);
						}
					}
					cache_delete(Result);
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "Top 10 Addict in the City.", cString, "Okay","");
				}
			}
		}
	    case DIALOG_HOSPITAL:
	    {
	        if(response)
	        {
				if(listitem == 0) // bandage
                {
				    new price = 4000;

				    if(pData[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
                    }
				    if(pData[playerid][pBandage] >= 10)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 bandage.");
				    }

				    pData[playerid][pBandage] += 1;
                    GivePlayerCash(playerid, -price);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bandage = %i WHERE uid = %i", pData[playerid][pBandage], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the doctor and received bandage.", GetRPName(playerid), price);
                    SCM(playerid, COLOR_WHITE, "** Medkit purchased. /use bandage to use.");
                }
                else if(listitem == 1) // medkit
                {
				    new price = 8000;

				    if(pData[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
                    }
				    if(pData[playerid][pMedkit] >= 10)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 medkit.");
				    }

				    pData[playerid][pMedkit] += 1;
                    GivePlayerCash(playerid, -price);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[playerid][pMedkit], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the doctor and received medkit.", GetRPName(playerid), price);
                    SCM(playerid, COLOR_WHITE, "** Medkit purchased. /use medkit to use.");
                }
                else if(listitem == 2) // painkiller
                {
				    new price = 5000;

				    if(pData[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
                    }
				    if(pData[playerid][pPainkillers] >= 10)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 Painkillers.");
				    }

				    pData[playerid][pPainkillers] += 1;
                    GivePlayerCash(playerid, -price);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the doctor and received painkiller.", GetRPName(playerid), price);
                    SCM(playerid, COLOR_WHITE, "** Painkiller purchased. /usedrug painkiller to use.");
                }
			}
		}
	    case DIALOG_HOSPITAL2:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
				    if(pData[playerid][pCash] < 1000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money, to pay bills.");
				    }
					GameTextForPlayer(playerid, "~g~Checking in...", 15000, 3);
					ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Checkin", 15000, false, "i", playerid);

					GivePlayerCash(playerid, -1000);
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s has paid a bill for his check in.", GetRPName(playerid));
	           	}
	 			else if(listitem == 1) // INSURANCE
				{
					if(pData[playerid][pCash] < 2000)
					{
					    return SCM(playerid, COLOR_SYNTAX, "You can't afford insurance.");
					}

					switch(GetPlayerVirtualWorld(playerid))
					{
					    case HOSPITAL_COUNTY:
					    {
					        if(pData[playerid][pInsurance] == HOSPITAL_COUNTY)
					        {
					            return SCM(playerid, COLOR_SYNTAX, "You are already insured at this hospital.");
					        }

					        GivePlayerCash(playerid, -2000);
					        GameTextForPlayer(playerid, "~r~-$2000", 5000, 1);
					        SCM(playerid, COLOR_AQUA, "You paid $2000 for insurance at {FF8282}County General{CCFFFF}. You will now spawn here after death.");

					        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_COUNTY, pData[playerid][pID]);
					        mysql_tquery(connectionID, queryBuffer);

					        pData[playerid][pInsurance] = HOSPITAL_COUNTY;
					    }
					    case HOSPITAL_ALLSAINTS:
					    {
					        if(pData[playerid][pInsurance] == HOSPITAL_ALLSAINTS)
					        {
					            return SCM(playerid, COLOR_SYNTAX, "You are already insured at this hospital.");
					        }

					        GivePlayerCash(playerid, -2000);
					        GameTextForPlayer(playerid, "~r~-$2000", 5000, 1);
					        SCM(playerid, COLOR_AQUA, "You paid $2000 for insurance at {FF8282}All Saints Hospital{CCFFFF}. You will now spawn here after death.");

					        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_ALLSAINTS, pData[playerid][pID]);
					        mysql_tquery(connectionID, queryBuffer);

					        pData[playerid][pInsurance] = HOSPITAL_ALLSAINTS;
					    }
					}
				}
                else if(listitem == 2) // bandage
                {
				    new price = 1000;

				    if(pData[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
                    }
				    if(pData[playerid][pBandage] >= 10)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 bandage.");
				    }

				    pData[playerid][pBandage] += 1;
                    GivePlayerCash(playerid, -price);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bandage = %i WHERE uid = %i", pData[playerid][pBandage], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the doctor and received bandage.", GetRPName(playerid), price);
                    SCM(playerid, COLOR_WHITE, "** Medkit purchased. /use bandage to use.");
                }
                else if(listitem == 3) // medkit
                {
				    new price = 1500;

				    if(pData[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
                    }
				    if(pData[playerid][pMedkit] >= 10)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 medkit.");
				    }

				    pData[playerid][pMedkit] += 1;
                    GivePlayerCash(playerid, -price);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[playerid][pMedkit], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the doctor and received medkit.", GetRPName(playerid), price);
                    SCM(playerid, COLOR_WHITE, "** Medkit purchased. /use medkit to use.");
                }
                else if(listitem == 4) // painkiller
                {
				    new price = 2000;

				    if(pData[playerid][pCash] < price)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
                    }

				    pData[playerid][pPainkillers] += 1;
                    GivePlayerCash(playerid, -price);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the doctor and received painkiller.", GetRPName(playerid), price);
                    SCM(playerid, COLOR_WHITE, "** Painkiller purchased. /usedrug painkiller to use.");
                }
			}
		}
		case DIALOG_SABONG:
		{
			new string[2048];
			if(response)
			{
				if(!SabongInfo[sExist])
					return SendClientMessage(playerid, COLOR_SYNTAX, "Sabong is not Starting");

				SabongInfo[sInside][playerid] = 1;

				switch(listitem)
				{
					case 0:
					{
						// Red
						format(string, sizeof(string), "{FFFFFF}You are about to place a bet on %s {FF0000}Meron{FFFFFF}!\n\
                        Minimum Bet:{FFFFFF} $500\nMaximum Bet:{FFFFFF} $10,000\n\
                        {FFFF00}----------------------------------------\n\
                        {FF0000}Note: Once you lock your bet you won't able to turn back!\nWe're not responsible of your bet once you get DISCONNECTED from the Server so make sure\nBet Responsibly.\n\n\
                        Total of Bet:{FFFFFF} $%s\nNumber of Bet:{FFFFFF} %s\n\n{FFFF00}Please input your amount of bet below.",
                        GetRPName(SabongInfo[sPlayerRed]),
                    	AddCommas(SabongInfo[sTotalRed]),
                        AddCommas(SabongInfo[sBetRed]));
						ShowPlayerDialog(playerid, DIALOG_BET_MERON, DIALOG_STYLE_INPUT, "Sabong System:", string, "Enter.", "Back.");
					}
					case 1:
					{
						// Blue
						format(string, sizeof(string),
						"{FFFFFF}You are about to place a bet on %s {0000FF}Wala{FFFFFF}!\n\
                        Minimum Bet:{FFFFFF} $500\nMaximum Bet:{FFFFFF} $10,000\n\
                        {FFFF00}----------------------------------------\n\
                        {FF0000}Note: Once you lock your bet you won't able to turn back!\nWe're not responsible of your bet once you get DISCONNECTED from the Server so make sure\nBet Responsibly.\n\n\
                        Total of Bet:{FFFFFF} $%s\nNumber of Bet:{FFFFFF} %s\n\n{FFFF00}Please input your amount of bet below.",
						GetRPName(SabongInfo[sPlayerRed]),
                    	AddCommas(SabongInfo[sTotalRed]),
                        AddCommas(SabongInfo[sBetRed]));
						ShowPlayerDialog(playerid, DIALOG_BET_WALA, DIALOG_STYLE_INPUT, "Sabong System:", string, "Enter.", "Back.");
					}
				}
			}
		}
		case DIALOG_BET_MERON:
		{
			new bet;
			if(sscanf(inputtext, "i", bet)) {
				return 1;
			}

			if(response)
			{
				if(bet > pData[playerid][pCash])
					return SendMessage(playerid, COLOR_SYNTAX, "You can only pay up to $%s", AddCommas(pData[playerid][pCash]));

				if(!(500 <= bet <= 10000)) {
					return SendClientMessage(playerid, COLOR_SYNTAX, "You can only pay from $500 to $10,000");
				}

				SabongInfo[sBet][playerid] = 1;
				SabongInfo[sBetRed][playerid] = 1;
				SabongInfo[sRed] += bet;
				GivePlayerCash(playerid, -bet);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendMessage(playerid, COLOR_GREY, "SABONG: You have Voted for Meron. $%s", AddCommas(bet));

				pData[playerid][pSabongBet] = bet;
			}
		}
		case DIALOG_BET_WALA:
		{
			new bet;
			if(sscanf(inputtext, "i", bet)) {
				return 1;
			}

			if(response)
			{
				if(bet > pData[playerid][pCash])
					return SendMessage(playerid, COLOR_SYNTAX, "You can only pay up to $%s", AddCommas(pData[playerid][pCash]));

				if(!(500 <= bet <= 10000)) {
					return SendClientMessage(playerid, COLOR_SYNTAX, "You can only pay from $500 to $10,000");
				}

				GivePlayerCash(playerid, -bet);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

				SabongInfo[sBet][playerid] = 1;
				SabongInfo[sBetBlue][playerid] = 1;
				SabongInfo[sBlue] += bet;

				SendMessage(playerid, COLOR_GREY, "SABONG: You have Voted for Wala. $%s", AddCommas(bet));

				pData[playerid][pSabongBet] = bet;
			}
		}
	    case DIALOG_MECHANIC:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
					new price = 15000;
				    if(pData[playerid][pCash] < 15000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money, to purhase repairkit.");
				    }
					if(pData[playerid][pRepairKit] >= 5 && pData[playerid][pDonator] == 0)
					{
					    return SCM(playerid, COLOR_SYNTAX, "You can't have more than 5 repairkit.");
					}
					if(pData[playerid][pRepairKit] >= 10 && pData[playerid][pDonator] > 0)
					{
					    return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 repairkit.");
					}
				    pData[playerid][pRepairKit] += 1;
				    
					GivePlayerCash(playerid, -price);
					
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET repairkit = %i WHERE uid = %i", pData[playerid][pRepairKit], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the mechanic and received repairkit.", GetRPName(playerid), price);
				    SCM(playerid, COLOR_WHITE, "** Repairkit purchased. /userepairkit to use.");
				}
				if(listitem == 1)
				{
					new price = 2000;
					if(pData[playerid][pCash] < price)
	                {
	                    return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                }
					if(pData[playerid][pGasCan] + 5 > 20)
					{
					    return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 liters of gas.");
					}

					pData[playerid][pGasCan] += 5;
	                GivePlayerCash(playerid, -price);
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", pData[playerid][pGasCan], pData[playerid][pID]);
	                mysql_tquery(connectionID, queryBuffer);
			  	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a 5 liters of gasoline.", GetRPName(playerid), price);
	                SCM(playerid, COLOR_WHITE, "** Gas can purchased. Use /gascan in a vehicle to refill its fuel.");
				}
			}
		}	
	    case DIALOG_VIPLOCKER:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
					if(pData[playerid][pCash] < 10000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money, to purhase repairkit.");
				    }
                    GiveWeapon(playerid, 5);
					GivePlayerCash(playerid, -10000);
					pData[playerid][pVIPgun1] = 1;
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun1 = 1 WHERE uid = %i", pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
                }
	 			else if(listitem == 1)
				{
					if(pData[playerid][pCash] < 10000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money, to purhase repairkit.");
				    }
                    GiveWeapon(playerid, 22);
					pData[playerid][pVIPgun2] = 1;
					GivePlayerCash(playerid, -10000);
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun2 = 1 WHERE uid = %i", pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
                }
	 			
			}
		}
	    case DIALOG_VIPLOCKER1:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
					if(pData[playerid][pCash] < 10000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money, to purhase repairkit.");
				    }
                    GiveWeapon(playerid, 5);
					GivePlayerCash(playerid, -10000);
					
					pData[playerid][pVIPgun1] = 1;
					
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun1 = 1 WHERE uid = %i", pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
                }
	 			else if(listitem == 1)
				{
					if(pData[playerid][pCash] < 10000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money, to purhase repairkit.");
				    }
                    GiveWeapon(playerid, 22);
					GivePlayerCash(playerid, -10000);
					
					pData[playerid][pVIPgun2] = 1;
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun2 = 1 WHERE uid = %i", pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
                }
	 			else if(listitem == 2)
				{
					if(pData[playerid][pCash] < 20000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money, to purhase repairkit.");
				    }
                    GiveWeapon(playerid, 8);
					GivePlayerCash(playerid, -20000);
					
					pData[playerid][pVIPgun3] = 1;
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun3 = 1 WHERE uid = %i", pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
                }
	 			else if(listitem == 3)
				{
					if(pData[playerid][pCash] < 20000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money, to purhase repairkit.");
				    }
                    GiveWeapon(playerid, 29);
					
					GivePlayerCash(playerid, -20000);
					pData[playerid][pVIPgun4] = 1;
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun4 = 1 WHERE uid = %i", pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
                }
			}
		}
	    case DIALOG_VIPLOCKER2:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
				
					if(pData[playerid][pCash] < 10000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money, to purhase repairkit.");
				    }
                    GiveWeapon(playerid, 5);
					
					GivePlayerCash(playerid, -10000);
					pData[playerid][pVIPgun1] = 1;
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun1 = 1 WHERE uid = %i", pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
                }
	 			else if(listitem == 1)
				{
					if(pData[playerid][pCash] < 10000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money, to purhase repairkit.");
				    }
                    GiveWeapon(playerid, 22);
					
					GivePlayerCash(playerid, -10000);
					pData[playerid][pVIPgun2] = 1;
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun2 = 1 WHERE uid = %i", pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
                }
	 			else if(listitem == 2)
				{
					if(pData[playerid][pCash] < 20000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money, to purhase repairkit.");
				    }
                    GiveWeapon(playerid, 8);
					//WAIT
					GivePlayerCash(playerid, -20000);
					pData[playerid][pVIPgun3] = 1;
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun3 = 1 WHERE uid = %i", pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
                }
	 			else if(listitem == 3)
				{
					if(pData[playerid][pCash] < 20000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money, to purhase repairkit.");
				    }
                    GiveWeapon(playerid, 29);
					
					GivePlayerCash(playerid, -20000);
					pData[playerid][pVIPgun4] = 1;
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun4 = 1 WHERE uid = %i", pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
                }
				else if(listitem == 4)
				{
					if(pData[playerid][pCash] < 30000)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money, to purhase repairkit.");
				    }
					GiveWeapon(playerid, 25);
					
					GivePlayerCash(playerid, -30000);
					pData[playerid][pVIPgun5] = 1;
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun5 = 1 WHERE uid = %i", pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);
                }
			}
		}
 		case DIALOG_CREATEQUIZ:
		{
			if(response) {
				if(CreateQuiz == 0)
				{
				    strcpy(quizQuestion, inputtext);
				    CreateQuiz = 1;
	                ShowDialogToPlayer(playerid, DIALOG_CREATEQUIZ);
				}
				else if(CreateQuiz == 1)
				{
				    strcpy(quizAnswer, inputtext);
	                CreateQuiz = -1;
	                SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has started a quiz.", GetRPName(playerid));
	                SMA(COLOR_LIGHTRED, "Quiz: %s Type (/answer) to answer", quizQuestion);
				}
			}
			else CreateQuiz = -1;

		}
 		case DIALOG_TWEET:
		{
			if(response) 
			{
				strcpy(tweet, inputtext);
				if(strfind(tweet, "admin", true) != -1 || strfind(tweet, "helper", true) != -1 || strfind(tweet, "bug", true) != -1 ||  
				strfind(tweet, "gz", true) != -1 || strfind(tweet, "greenzone", true) != -1 || strfind(tweet, "nonrp", true) != -1 || 
				strfind(tweet, "safezone", true) != -1 || strfind(tweet, "safe zone", true) != -1 || strfind(tweet, "green zone", true) != -1 || 
				strfind(tweet, "dmer", true) != -1 || strfind(tweet, "anghel", true) != -1 || 
				strfind(tweet, "rp", true) != -1 || strfind(tweet, "discord", true) != -1 || strfind(tweet, "roleplay", true) != -1 || 
				strfind(tweet, "mod", true) != -1 || strfind(tweet, "discordia", true) != -1 ||
				strfind(tweet, "vdm", true) != -1 || 
				strfind(tweet, "randompunching", true) != -1 || strfind(tweet, "random punching", true) != -1 || strfind(tweet, "random punch", true) != -1 ||
				strfind(tweet, "mods", true) != -1 || strfind(tweet, "cleo", true) != -1 || strfind(tweet, "meta", true) != -1 || 
				strfind(tweet, "atems", true) != -1 || strfind(tweet, "delay", true) != -1 || strfind(tweet, "rolyo", true) != -1 || 
				strfind(tweet, "server", true) != -1 || strfind(tweet, "(ooc)", true) != -1 || strfind(tweet, "groupchat", true) != -1|| 
				strfind(tweet, "dc", true) != -1|| strfind(tweet, "gc", true) != -1)
				{
					pData[playerid][pMuted] = 20;
					GivePlayerCash(playerid, -200);
					SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for 20 seconds due to suspected to say OOC TERM IN IC.");
					SAM(COLOR_YELLOW, ""RED"SECURITY[BOT] %s"WHITE"[%i] is using an words for ooc in ic [%s].", GetRPName(playerid), playerid, tweet);
					new szString[528];
					format(szString, sizeof(szString), "%s [%i] is using an words for ooc in ic [%s].", GetRPName(playerid), playerid, tweet);
					SendDiscordMessage(32, szString);
					return 1;
				}		
                SMA(COLOR_WHITE, ""WHITE"%s"TWEET" has tweeted"WHITE": %s", GetRPName(playerid), tweet);
				//CancelSelectTextDraw(playerid);
				new szString[528];
				format(szString, sizeof(szString), " [%s's Tweet:%s]", GetRPName(playerid), tweet);
				SendDiscordMessage(11, szString);
			}
		}
		case DIALOG_NEWBWELCOME:
		{
		    if(response)
		    {
		        new count;
				foreach(new i : Player)
				{
					if(pData[i][pHelper] > 0)
					{
					    count++;
					}
				}
				if(count > 0)
				{
		        	new string[30];
		        	format(string, sizeof(string), "Show me around Los Santos, I am new here.");
					strcpy(pData[playerid][pHelpRequest], string, 128);
					SendHelperMessage(COLOR_AQUA, "** Help Request: New Player %s (ID:%d) is requesting a helper to show them around. **", GetRPName(playerid), playerid);

					pData[playerid][pLastRequest] = gettime();
					SCM(playerid, COLOR_GREEN, "Your help request was sent to all helpers. Please wait for a response.");
				}
				else
				{
				    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "No Helpers Online", ""WHITE"Unfortunately there are no members of the helper team online.\nYou can also try /(n)ewbie, This is where most of the community can help you with simple questions such as 'Where is the Bank'.\nYou can also checkout "SERVER_URL" for beginner tutorials.", "Cancel", "");
				}
			}
		}
		case DIALOG_POINTLIST:
		{
		    if(response)
		    {
		        if(strlen(psstring) < 5)
		        {
 					//SCM(playerid, COLOR_AQUA, "Please use /tog turfs to enable turf bounds.");
				}
				else
				{
				    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, ""SVRCLR"Point List"WHITE" ("REVISION")", psstring, "", "Cancel");
				}
			}
		}
		case DIALOG_TURFLIST:
		{
		    if(response)
		    {
		        if(strlen(tsstring) < 5)
		        {
 					//SCM(playerid, COLOR_AQUA, "Please use /tog turfs to enable turf bounds.");
				}
				else
				{
				    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, ""SVRCLR"Turf List"WHITE" ("REVISION")", tsstring, "", "Cancel");
				}
			}
		}
    	case DIALOG_RULES:
		{
  			if(response)
      		{
      		    new sstring[2048];
				switch(listitem)
				{
				    case 0: // SERVER
				    {
				        format(sstring, sizeof(sstring), ""WHITE"- First of all, Always roleplay. Your character's behavior needs to be as realistic, and close to real life as possible! -\n");
						strcat(sstring, "1. You can't Metagaming! Don't mix in-character (IC) and out-of-character (OOC) chat/information. IC chat is the default chat, OOC is used by typing /b!\n");
						strcat(sstring, "2. You can't Killing on sight (KOS). Killing a player on sight without a word or any attempt to roleplay is not allowed and is prisonable!\n");
						strcat(sstring, "3. You can't Revenge killing (RK). If a player critically injured you, you are not allowed to go back to kill them! After hospital, you lose all memory of the last 30 minutes!\n");
						strcat(sstring, "4. You can't Powergaming! Impossible roleplay, meaning anything that is cannot be done in real life is forbidden! Do not force roleplay on others!\n");
						strcat(sstring, "5. You can't Car ramming or Car parking! Do not repeatedly ram other people with your car, and don't park on top of a player to kill them!\n");
						strcat(sstring, "6. You can't Logging to avoid! Never log out or alt-tab out of game to avoid death, arrest or prison!\n");
						strcat(sstring, "Note: This is a short version of our server rulebook. Please visit  to see a full list of "SERVER_URL"");
				        ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_MSGBOX, ""WHITE"Server Rules", sstring, "Ok","");
				    }
				    case 1: // TRAFFIC
				    {
				        format(sstring, sizeof(sstring), ""WHITE"1. Drive on the right side of the road at all times or else you will get punishment.\n");
				        strcat(sstring, "2. Yield to emergency vehicles.\n");
				        strcat(sstring, "3. Move over and slow down for stopped emergency vehicles.\n");
				        strcat(sstring, "4. Turn your headlights on at night. Type (/v lights) to turn it.\n");
				        strcat(sstring, "5. Wear your seatbelt or helmet always. Type (/seatbelt) to wear it.\n");
				        strcat(sstring, "6. Traffic lights are synced Red is for Stop, Yellow is for Slow down and Green is for Go\n");
				        strcat(sstring, "7. Only follow traffic lights above a junction. (Marked with a solid white line)\n");
				        strcat(sstring, "8. Remain at a safe distance from other vehicles when driving, atleast 3 car lengths\n");
				        strcat(sstring, "9. Only follow traffic lights above a junction. (Marked with a solid white line)\n");
				        strcat(sstring, "10. Pedistrians always have the right of way, regardless of the situation.\n");
				        strcat(sstring, "11. Drive how you would in real life, dont be a moron.\n");
				        strcat(sstring, "- If you fail at driving you will be jailed or banned. -\n");
				        strcat(sstring, "Note: This is a short version of our traffic laws. Please visit  to see a full list of "SERVER_URL"");
				    	ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_MSGBOX, ""WHITE"Traffic Rules", sstring, "Ok","");
				    }
				    case 2: // SPEED
				    {
				        format(sstring, sizeof(sstring), ""WHITE"- This server has limitations. -\n");
				        strcat(sstring, "1. 50 MPH if you are in the City.\n");
				        strcat(sstring, "2. 70 MPH on the County roads.\n");
				        strcat(sstring, "3. 90 MPH on the Highways and Interstates.\n");
				        strcat(sstring, "4. Box trucks cannot exceed 50 MPH.\n");
				        strcat(sstring, "5. Any vehicles with 3 or more axles aren't allowed to go more than 55 mph. Regardless of roadway limits.\n");
				        strcat(sstring, "Note: This is a short version of our speed laws. Please visit  to see a full list of "SERVER_URL"");
				        ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_MSGBOX, ""WHITE"Speed Rules", sstring, "Ok","");
				    }
				}
      		}
		}
		case DIALOG_REPORTITITON:
		{
			if(response)
			{	
				switch(listitem)
				{
					case 0:
					{
						if(!AddReportToQueue(playerid, inputtext))
						{
						return SCM(playerid, COLOR_SYNTAX, "The report queue is currently full. Please try again later.");
						}
					}
					case 1:
					{
						if(!AddReportToQueue(playerid, inputtext))
						{
						return SCM(playerid, COLOR_SYNTAX, "The report queue is currently full. Please try again later.");
						}
					}
					case 2:
					{
						if(!AddReportToQueue(playerid, inputtext))
						{
						return SCM(playerid, COLOR_SYNTAX, "The report queue is currently full. Please try again later.");
						}
					}			
					case 3:
					{
						if(!AddReportToQueue(playerid, inputtext))
						{
						return SCM(playerid, COLOR_SYNTAX, "The report queue is currently full. Please try again later.");
						}
					}					
					case 4:
					{
						if(!AddReportToQueue(playerid, inputtext))
						{
						return SCM(playerid, COLOR_SYNTAX, "The report queue is currently full. Please try again later.");
						}
					}	
					case 5:
					{
						if(!AddReportToQueue(playerid, inputtext))
						{
						return SCM(playerid, COLOR_SYNTAX, "The report queue is currently full. Please try again later.");
						}
					}					
					case 6:
					{
						if(!AddReportToQueue(playerid, inputtext))
						{
						return SCM(playerid, COLOR_SYNTAX, "The report queue is currently full. Please try again later.");
						}
					}					
					case 7:
					{
						if(!AddReportToQueue(playerid, inputtext))
						{
						return SCM(playerid, COLOR_SYNTAX, "The report queue is currently full. Please try again later.");
						}
					}
				}	
			}
		}	
		
		case DIALOG_BUYBMARKET:
		{
			if(response)
			{				
				switch(listitem)
				{
					case 0:
					{
						if(pData[playerid][pDirtyCash] < 10000)
						{
							return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
						}
						if(PlayerHasWeapon(playerid, 5))
						{
							return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
						}
						
						GivePlayerDirtyCash(playerid, -10000);
						GiveWeapon(playerid, 5);
			
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Baseball Bat.", GetRPName(playerid), 10000);
						SCM(playerid, COLOR_WHITE, "** Baseball bat purchased.");
						
						new szString[528];
						format(szString, sizeof(szString), "%s paid $%i to the shopkeeper and received a Baseball Bat.",  GetRPName(playerid), 10000);
						SendDiscordMessage(38, szString);
					}
					case 1:
					{
						if(pData[playerid][pDirtyCash] < 11000)
						{
							return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
						}
						if(PlayerHasWeapon(playerid, 8))
						{
							return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
						}
			
						GivePlayerDirtyCash(playerid, -11000);
						GiveWeapon(playerid, 8);
			
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Katana.", GetRPName(playerid), 11000);
						SCM(playerid, COLOR_WHITE, "** Katana purchased.");
												
						new szString[528];
						format(szString, sizeof(szString), "%s paid $%i to the shopkeeper and received a Katana.", GetRPName(playerid), 11000);
						SendDiscordMessage(38, szString);
					}
					case 2:
					{
						SCM(playerid, COLOR_WHITE, "**disble gun");
					}				        
					case 3:
					{
						if(pData[playerid][pDirtyCash] < 30000)
						{
							return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
						}
						if(PlayerHasWeapon(playerid, 32))
						{
							return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
						}
			
						GivePlayerDirtyCash(playerid, -30000);
						GiveWeapon(playerid, 32);
			
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Tec 9.", GetRPName(playerid), 30000);
						SCM(playerid, COLOR_WHITE, "** (Tec 9 purchased.");
																		
						new szString[528];
						format(szString, sizeof(szString), "%s paid $%i to the shopkeeper and received a Tec 9.", GetRPName(playerid), 30000);
						SendDiscordMessage(38, szString);
					}						
					case 4:
					{
						if(pData[playerid][pDirtyCash] < 130000)
						{
							return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
						}
						if(PlayerHasWeapon(playerid, 30))
						{
							return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
						}
			
						GivePlayerDirtyCash(playerid, -130000);
						GiveWeapon(playerid, 30);
		
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a AK-47", GetRPName(playerid), 130000);
						SCM(playerid, COLOR_WHITE, "** (AK-47 purchased.");	
						
						new szString[528];
						format(szString, sizeof(szString), "%s paid $%i to the shopkeeper and received a AK-47", GetRPName(playerid), 130000);
						SendDiscordMessage(38, szString);
					}							
					case 5:
					{
						if(pData[playerid][pDirtyCash] < 125000)
						{
							return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
						}
						if(PlayerHasWeapon(playerid, 33))
						{
							return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
						}
			
						GivePlayerDirtyCash(playerid, -125000);
						GiveWeapon(playerid, 33);
			
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Country Rifle", GetRPName(playerid), 125000);
						SCM(playerid, COLOR_WHITE, "** (Country Rifle purchased.");
												
						new szString[528];
						format(szString, sizeof(szString), "%s paid $%i to the shopkeeper and received a Country Rifle", GetRPName(playerid), 125000);
						SendDiscordMessage(38, szString);
					}
					case 6:
					{
						if(pData[playerid][pDirtyCash] < 50000)
						{
							return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
						}
						if(pData[playerid][pVest] == 4)
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't have more than 4 Vest.");
						}

						pData[playerid][pVest] += 1;

						GivePlayerDirtyCash(playerid, -50000);
					
     		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vest = %i WHERE uid = %i", pData[playerid][pVest], pData[playerid][pID]);
		                mysql_tquery(connectionID, queryBuffer);

		                SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s paid $%i to the shopkeeper and received a vest.", GetRPName(playerid), 50000);
		                SCM(playerid, COLOR_WHITE, "** Vest purchased. Use /use vest to use.");
						
						new szString[528];
						format(szString, sizeof(szString), "%s paid $%i to the shopkeeper and received a vest.", GetRPName(playerid), 50000);
						SendDiscordMessage(38, szString);
					}
					
				}
	
			}
		}
				case DIALOG_TYPE:
		{
			if(response)
			{				
				switch(listitem)
				{
					case 0:
					{
						ShowDialogToPlayer(playerid, DIALOG_DTOC);
					}
					case 1:
					{
						ShowDialogToPlayer(playerid, DIALOG_CTOD);
					}	
				}
			}
		}
		case DIALOG_DTOC:
	    {
	        if(response)
	        {
				new madumi, fee;
	            if(sscanf(inputtext, "i", madumi))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_DTOC);
	            }
				if(madumi < 1 || madumi > pData[playerid][pDirtyCash])
	            {
	                SCM(playerid, COLOR_SYNTAX, "Insufficient amount. Please try again.");
	                ShowDialogToPlayer(playerid, DIALOG_DTOC);
	                return 1;
	            }
				if(madumi > 500000)
	            {
	                SCM(playerid, COLOR_SYNTAX, "You can't exchange more than $500,000 at a time.");
	                ShowDialogToPlayer(playerid, DIALOG_DTOC);
	                return 1;
				}	
								
				pData[playerid][pDirtyCash] -= madumi;

	            if(pData[playerid][pDonator] >= 0)
	            {
	                fee = percent(madumi, 50);
	            }
				new szString[528];
				format(szString, sizeof(szString), "[EXCHANGE]: %s washed dirty money (amount %i) and earn %i.", GetRPName(playerid), madumi ,fee);
				SendDiscordMessage(35, szString);
					
				SM(playerid, COLOR_WHITE, "You washed your money and earn %i.", fee);
				GivePlayerCash(playerid, fee);
				
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", pData[playerid][pDirtyCash], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
	        }
		}
		case DIALOG_CTOD:
	    {
	        if(response)
	        {
				new malinis, fee;
	            if(sscanf(inputtext, "i", malinis))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_CTOD);
	            }
				if(malinis < 1 || malinis > pData[playerid][pCash])
	            {
	                SCM(playerid, COLOR_SYNTAX, "Insufficient amount. Please try again.");
	                ShowDialogToPlayer(playerid, DIALOG_CTOD);
	                return 1;
	            }
				if(malinis > 500000)
	            {
	                SCM(playerid, COLOR_SYNTAX, "You can't exchange more than $500,000 at a time.");
	                ShowDialogToPlayer(playerid, DIALOG_CTOD);
	                return 1;
				}	
								

				GivePlayerCash(playerid, -malinis);
	            if(pData[playerid][pDonator] >= 0)
	            {
	                fee = percent(malinis, 70);
	            }
				new szString[528];
				format(szString, sizeof(szString), "[EXCHANGE]: %s exchange clean money (amount %i) and earn %i dirtycash.", GetRPName(playerid), malinis, fee);
				SendDiscordMessage(35, szString);
				
				SM(playerid, COLOR_WHITE, "You exchange your money and earn %i dirtycash.", fee);
				GivePlayerDirtyCash(playerid, fee);
	        }
		}

		case DIALOG_REMOVEPVEH:
		{
      		if(response)
		    {
		        new targetid = pData[playerid][pRemoveFrom];

				if(targetid == INVALID_PLAYER_ID)
				{
				    return SendClientMessage(playerid, COLOR_GREY, "The player has disconnected. You can't remove their vehicles now.");
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid FROM vehicles WHERE ownerid = %i LIMIT %i, 1", pData[targetid][pID], listitem);
				mysql_tquery(connectionID, queryBuffer, "OnVerifyRemoveVehicle", "ii", playerid, targetid);
		    }
		}
		case DIALOG_BUYSTORE:
		{
			if(response)
			{
		    switch(listitem)
				{
					case 0:
					{
						new price = 100;
	
						if(pData[playerid][pCash] < price)
						{
							return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
						}
						if(pData[playerid][pCigars] >= 20)
						{
							return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 cigars.");
						}
	
						pData[playerid][pCigars] += 10;
						GivePlayerCash(playerid, -price);
	
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", pData[playerid][pCigars], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
	
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a pack of cigars.", GetRPName(playerid), price);
						SCM(playerid, COLOR_WHITE, "** Cigars purchased. Use /use cigar to smoke a cigar.");
						new string[128];
						format(string, sizeof(string), "You have purchased a cigar");
													
					}
					case 1:
					{
						new price = 1000;
	
						if(pData[playerid][pCash] < price)
						{
							return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
						}
						if(pData[playerid][pSpraycans] + 10 >= 20)
						{
							return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 spraycans.");
						}
	
						pData[playerid][pSpraycans] += 10;
						GivePlayerCash(playerid, -price);
	
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", pData[playerid][pSpraycans], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
	
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received 10 spraycans.", GetRPName(playerid), price);
						SCM(playerid, COLOR_WHITE, "** Spraycans purchased. Use /colorcar and /paintcar in a vehicle to use them.");
						new string[128];
						format(string, sizeof(string), "You have purchased a spraycan");
						
					}
					case 2:
					{
						new price = 2000;
	
						if(pData[playerid][pCash] < price)
						{
							return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
						}
						if(pData[playerid][pFishingRod])
						{
							return SCM(playerid, COLOR_SYNTAX, "You have a fishing rod already.");
						}
	
						pData[playerid][pFishingRod] = 1;
						GivePlayerCash(playerid, -price);

	
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingrod = 1 WHERE uid = %i", pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
	
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a fishing rod.", GetRPName(playerid), price);
						SCM(playerid, COLOR_WHITE, "** Fishing rod purchased. Use /fish at the pier or in a boat to begin fishing.");
						new string[128];
						format(string, sizeof(string), "You have purchased a fishing rod");						   
					}
					case 3:
					{
						new price = 1500;
	
						if(pData[playerid][pCash] < price)
						{
							return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
						}
						if(pData[playerid][pFishingBait] + 10 >= 20)
						{
							return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 pieces of bait.");
						}
	
						pData[playerid][pFishingBait] += 10;
						GivePlayerCash(playerid, -price);

	
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingbait = %i WHERE uid = %i", pData[playerid][pFishingBait], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
	
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received fish bait.", GetRPName(playerid), price);
						SCM(playerid, COLOR_WHITE, "** Fishing bait purchased. Bait increases the odds of catching bigger fish.");
						new string[128];
						format(string, sizeof(string), "You have purchased a fish bait");
								
					}
					case 4:
					{
						new price = 2500;
	
						if(pData[playerid][pCash] < price)
						{
							return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
						}
						if(pData[playerid][pMuriaticAcid] + 1 >= 11)
						{
							return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 bottles of muriatic acid.");
						}
	
						pData[playerid][pMuriaticAcid] += 1;
						GivePlayerCash(playerid, -price);

	
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET muriaticacid = %i WHERE uid = %i", pData[playerid][pMuriaticAcid], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
	
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of muriatic acid.", GetRPName(playerid), price);
						SCM(playerid, COLOR_WHITE, "** Muriatic acid purchased.");
						new string[128];
						format(string, sizeof(string), "You have purchased a muriatic acid");
						
					}
					case 5:
					{
						new price = 2500;

						if(pData[playerid][pCash] < price)
	                    {
	                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                    }
						if(pData[playerid][pBakingSoda] + 1 >= 11)
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 bottles of baking soda.");
						}

						pData[playerid][pBakingSoda] += 1;
	                    GivePlayerCash(playerid, -price);

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bakingsoda = %i WHERE uid = %i", pData[playerid][pBakingSoda], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);

	                    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of baking soda.", GetRPName(playerid), price);
	                    SCM(playerid, COLOR_WHITE, "** Baking soda purchased.");
					}
					case 6:
					{
						new price = 300;
	
						if(pData[playerid][pCash] < price)
						{
							return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
						}
						if(pData[playerid][pGasCan] + 5 > 20)
						{
							return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 liters of gas.");
						}
	
						pData[playerid][pGasCan] += 5;
						GivePlayerCash(playerid, -price);
	
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", pData[playerid][pGasCan], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
	
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a 5 liters of gasoline.", GetRPName(playerid), price);
						SCM(playerid, COLOR_WHITE, "** Gas can purchased. Use /gascan in a vehicle to refill its fuel.");
						new string[128];
						format(string, sizeof(string), "You have purchased a gas can");
						
					}
					case 7:
					{
						new price = 1000;
	
						if(pData[playerid][pCash] < price)
						{
							return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
						}
						if(pData[playerid][pRope] + 2 > 10)
						{
							return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 ropes.");
						}
	
	
						pData[playerid][pRope] += 2;
						GivePlayerCash(playerid, -price);
	
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rope = %i WHERE uid = %i", pData[playerid][pRope], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
	
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received 2 ropes.", GetRPName(playerid), price);
						SCM(playerid, COLOR_WHITE, "Ropes purchased. Use /tie to tie people in your vehicle.");
						new string[128];
						format(string, sizeof(string), "You have purchased a rope");
							
					}
					case 8:
					{
						new price = 1500;
						if(pData[playerid][pCash] < price)
						{
							return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
						}
						if(pData[playerid][pBlindfold] + 2 > 10)
						{
							return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 blindfolds.");
						}
	
	
						pData[playerid][pBlindfold] += 2;
						GivePlayerCash(playerid, -price);
	
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET blindfold = %i WHERE uid = %i", pData[playerid][pBlindfold], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
	
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received 2 blindfolds.", GetRPName(playerid), price);
						SCM(playerid, COLOR_WHITE, "Blindfold purchased. Use /blindfold to blindfold people in your vehicle.");
						new string[128];
						format(string, sizeof(string), "You have purchased a blindfold");
						
					}
					
					case 9:
					{
						//new price = 9000;
						//
						//if(pData[playerid][pCash] < price)
						//{
						//	return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
						//}
						//if(pData[playerid][pBackpack] > 1)
						//{
						//	return SCM(playerid, COLOR_SYNTAX, "You already have a small backpack.");
						//}
						//
						//pData[playerid][pBackpack] = 1;
						//GivePlayerCash(playerid, -price);
						//
						//SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received small backpack.", GetRPName(playerid), price);
						//SCM(playerid, COLOR_WHITE, "Small Backpack purchased. Use /(b)ack(p)ack to check your backpack.");
						//new string[128];
						//format(string, sizeof(string), "You have purchased a small backpack");
						SCM(playerid, COLOR_WHITE, "Not available.");						
					}
					case 10:
					{
						new price = 5000;
	
						if(pData[playerid][pCash] < price)
						{
							return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
						}
						if(pData[playerid][pToolkit] == 1)
						{
							return SCM(playerid, COLOR_SYNTAX, "You can't have more than 1 toolkits.");
						}
	
	
						pData[playerid][pToolkit] = 1;
						GivePlayerCash(playerid, -price);
	
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a toolkit.", GetRPName(playerid), price);
						SCM(playerid, COLOR_WHITE, "Toolkit purchased. Use /hotwire to hotwire people's vehicles.");
						new string[128];
						format(string, sizeof(string), "You have purchased a toolkit");
							
					}
					case 11:
					{
						new price = 3000;
	
						if(pData[playerid][pCash] < price)
						{
							return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
						}
						if(pData[playerid][pFlashlight] == 1)
						{
							return SCM(playerid, COLOR_SYNTAX, "You can't have more than 1 flashlight.");
						}
	
	
						pData[playerid][pFlashlight] = 1;
						GivePlayerCash(playerid, -price);
	
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a flashlight.", GetRPName(playerid), price);
						SCM(playerid, COLOR_WHITE, "Flashlight purchased. use /flashlight to use it on your hand and /taclight to use it on your weapon.	");
						new string[128];
						format(string, sizeof(string), "You have purchased a flashlight");
						
					}
					case 12:
					{
						SCM(playerid, COLOR_WHITE, "** You may visit other 24/7store. for the Lottery Ticket");			
					}
					case 13:
					{
						new price = 2000;
						if(pData[playerid][pCash] < price)
						{
							return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
						}
						if(pData[playerid][pMask])
						{
							return SCM(playerid, COLOR_SYNTAX, "You have a mask already.");
						}
	
						pData[playerid][pMask] = 1;
						GivePlayerCash(playerid, -price);
	
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mask = 1 WHERE uid = %i", pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
	
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Mask.", GetRPName(playerid), price);
						SCM(playerid, COLOR_WHITE, "** Mask purchased. Use /mask to toggle it.");
						new string[128];
						format(string, sizeof(string), "You have purchased a mask");
						
					}
					
				}
			}
		}
		case DIALOG_ADD1:
		{
			if(response)
			{

				static
					houseid;
		
				if(sscanf(inputtext, "i", houseid))
					return ShowPlayerDialog(playerid, DIALOG_ADD1, DIALOG_STYLE_INPUT, "Adress System", "Please enter the id of the house below:", "Continue", "Close");
		
		
				if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
					return ShowPlayerDialog(playerid, DIALOG_ADD1, DIALOG_STYLE_INPUT, "Adress System", "Invalid House:", "Continue", "Close");
				

				SetPlayerCheckpoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 3.0);
				SendClientMessage(playerid, COLOR_AQUA, "Checkpoint set to the house address.");
			}
		}
		case DIALOG_ADD2:
		{
			if(response)
			{

				static
					businessid;
		
				if(sscanf(inputtext, "i", businessid))
					return ShowPlayerDialog(playerid, DIALOG_ADD2, DIALOG_STYLE_INPUT, "Adress System", "Please enter the id of the business below:", "Continue", "Close");

				if(!(0 <= businessid < MAX_BUSINESSES) || !BusinessInfo[businessid][bExists])

					return ShowPlayerDialog(playerid, DIALOG_ADD2, DIALOG_STYLE_INPUT, "Adress System", "Error: Invalid Business:", "Continue", "Close");
				

				SetPlayerCheckpoint(playerid,  BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], 3.0);
				SendClientMessage(playerid, COLOR_AQUA, "Checkpoint set business address.");
			}
		}	
		case DIALOG_ADDRESS:
		{
  			if(response)
      		{
				switch(listitem)
				{
				    case 0: // HOUSE
				    {
						ShowPlayerDialog(playerid, DIALOG_ADD1, DIALOG_STYLE_INPUT, "Adress System", "Please enter the id of the house below:", "Continue", "Close");
					
					}
				    case 1: // BIZ
				    {
						ShowPlayerDialog(playerid, DIALOG_ADD2, DIALOG_STYLE_INPUT, "Adress System", "Please enter the id of the business below:", "Continue", "Close");
					}
				}
			}
		}	
		case DIALOG_LOCATE:
		{
  			if(response)
      		{
				switch(listitem)
				{
					case 0: // Find Turfs
					{
					    new string[34 * MAX_TURFS];
						new turfids;
						for(turfids = 0; turfids < MAX_TURFS; turfids++)
						{
							if(TurfInfo[turfids][tExists]) {
					    		strcat(string, TurfInfo[turfids][tName]);
								strcat(string, "\n");
							}
						}
						if(strlen(string) > 2) {
							ShowPlayerDialog(playerid, DIALOG_LOCATETURFS, DIALOG_STYLE_LIST, "GPS - Select Destination", string, "Select", "Close");
						} else {
						    ShowPlayerDialog(playerid, -1, DIALOG_STYLE_MSGBOX, "GPS - Signal Lost", "Unable to locate any new locations.", "Cancel", "");
						}
					}
				    case 1: // JOBS
				    {
				    	ShowPlayerDialog(playerid, DIALOG_LOCATELIST1, DIALOG_STYLE_LIST, "Select Destination", "Foodpanda\nTrucker\nFisherman\nBodyguard\nArms Dealer\nMiner\nTaxi Driver\nDrug Dealer\nForklifter\nLumber Jack\nDemolition Job\nSweeper Job\nButcher", "Select", "Close");
				    }
				    case 2: // STORES
				    {
				    	ShowPlayerDialog(playerid, DIALOG_LOCATELIST2, DIALOG_STYLE_LIST, "Select Destination", "24/7\nAmmunation\nClothing Store\nGymnasium\nRestaurant\nAdvertisement Store\nClub", "Select", "Close");
				    }
				    case 3: // GENERAL LOCATIONS
				    {
						new string[MAX_LOCATIONS*34];
						for(new x = 0; x < MAX_LOCATIONS; x++)
						{
							if(LocationInfo[x][locExists]) {
								strcat(string, LocationInfo[x][locName]);
								strcat(string, "\n");
							}
						}
						if(strlen(string) > 2) {
							ShowPlayerDialog(playerid, DIALOG_LOCATELISTC, DIALOG_STYLE_LIST, "GPS - Select Destination", string, "Select", "Close");
						} else {
							ShowPlayerDialog(playerid, DIALOG_NONE, DIALOG_STYLE_MSGBOX, "GPS - Signal Lost", "Unable to locate any new locations.", "Cancel", "");
						}
					}
					 case 4: // LOCATE STORE OR HOUSE
				    {
				    	ShowPlayerDialog(playerid, DIALOG_ADDRESS, DIALOG_STYLE_LIST, "List of Destination", "Houses \nBusiness", "Select", "Close");
				    }
				}
      		}
		}
		case DIALOG_TACOSHOP:
		{
			if(response)
			{
			    switch(listitem)
			    {
					case 0:
					{
						if(pData[playerid][pCash] < 1000)
						{
          					 return SCM(playerid, COLOR_LIGHTRED, "[TACO ERROR]: You can't affor the burger right now.");
						}
					
						GivePlayerCash(playerid, -1000);
						pData[playerid][pTaco] += 1;
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET taco = %i WHERE uid = %i", pData[playerid][pTaco], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s succesfully get a burger.", GetRPName(playerid));
						
					}	
					case 1:
					{
						if(pData[playerid][pCash] < 1200)
						{
          					 return SCM(playerid, COLOR_LIGHTRED, "[TACO ERROR]: You can't affor the burrito right now.");
						}
						//gBugerStock -= 1;
						GivePlayerCash(playerid, -1200);
						pData[playerid][pBurrito] += 1;
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET burrito = %i WHERE uid = %i", pData[playerid][pBurrito], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s succesfully get a burrito.", GetRPName(playerid));
						
					}	
					case 2:
					{
						if(pData[playerid][pCash] < 500)
						{
          					 return SCM(playerid, COLOR_LIGHTRED, "[TACO ERROR]: You can't affor the juice right now.");
						}
						
						GivePlayerCash(playerid, -500);
						pData[playerid][pJuice] += 1;
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET juice = %i WHERE uid = %i", pData[playerid][pJuice], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s succesfully get a juice.", GetRPName(playerid));
						
					}	
				}
			}
		}		
		case DIALOG_LOCATELIST1:
		{
			if(response)
			{
			    switch(listitem)
			    {
				    case 0:
						LocateMethod(playerid,"Foodpanda");
					case 1:
					    LocateMethod(playerid,"Trucker");
	                case 2:
						LocateMethod(playerid,"Fisherman");
	   				case 3:
						SCM(playerid, COLOR_LIGHTRED, "[JOB ERROR]: Disable for meantime.");
						//(playerid,"Bodyguard");
	                case 4:
						LocateMethod(playerid,"ArmsDealer");
	                case 5:
						LocateMethod(playerid,"Miner");
	                case 6:
						SCM(playerid, COLOR_LIGHTRED, "[JOB ERROR]: Disable for meantime.");
						//LocateMethod(playerid,"TaxiDriver");
	                case 7:
						LocateMethod(playerid,"DrugDealer");
	                case 8:
						LocateMethod(playerid,"Forklifter");
        	       	case 9:
						LocateMethod(playerid,"Lumberjack");
           	       	case 10:
						LocateMethod(playerid,"Demolition");
                	case 11:
						LocateMethod(playerid,"sweeper");                	
					case 12:
						LocateMethod(playerid,"butcher");
				}
			}
		}
		case DIALOG_LOCATELIST2:
		{
		    if(response)
			{
			    switch(listitem)
			    {
				    case 0:
						LocateMethod(playerid,"Supermarket");
				    case 1:
				        LocateMethod(playerid,"GunShop");
				    case 2:
				        LocateMethod(playerid,"ClothesShop");
				    case 3:
				        LocateMethod(playerid,"Gym");
				    case 4:
				        LocateMethod(playerid,"Restaurant");
				    case 5:
				        LocateMethod(playerid,"AdAgency");
				    case 6:
				        LocateMethod(playerid,"Club");
				}
			}
		}
		case DIALOG_LOCATELIST3:
		{
		    if(response)
			{
			    switch(listitem)
			    {

                    case 0:
						LocateMethod(playerid,"DMV");
                    case 1:
						LocateMethod(playerid,"Bank");
                	case 2:
						LocateMethod(playerid,"Casino");
                    case 3:
						LocateMethod(playerid,"Smuggledrugs");
                    case 4:
						LocateMethod(playerid,"MatPickup1");
                    case 5:
						LocateMethod(playerid,"MatPickup2");
                	case 6:
						LocateMethod(playerid,"Dealership");
                    case 7:
						LocateMethod(playerid,"AirDealer");
                    case 8:
						LocateMethod(playerid,"BoatDealer");
                    case 9:
						LocateMethod(playerid,"MatFactory1");
                    case 10:
						LocateMethod(playerid,"MatFactory2");
                	case 11:
						LocateMethod(playerid,"Heisenbergs");
					case 12:
					    LocateMethod(playerid,"AirportDepot");
					case 13:
					    LocateMethod(playerid,"MarinaDepot");
                    case 14:
						LocateMethod(playerid,"Vip");
                    case 15:
						LocateMethod(playerid,"Mechanic");
                    case 16:
						LocateMethod(playerid,"Impound");
				}
			}
		}
		case DIALOG_LOCATELISTC:
		{
		    if(response)
		    {
				LocateMethod(playerid, inputtext);
		    }
		}
		case DIALOG_LOCATETURFS:
		{
			if(response)
			{
				new turf;
			    for(turf = 0; turf < MAX_TURFS; turf++)
			    {
			        if(strfind(TurfInfo[turf][tName], inputtext) != -1)
			        {
				   	 	pData[playerid][pCP] = CHECKPOINT_MISC;
				    	SetPlayerCheckpoint(playerid, TurfInfo[turf][tMinX], TurfInfo[turf][tMinY], TurfInfo[turf][tHeight], 3.0);
				    	SM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of %s.", TurfInfo[turf][tName]);
				    	break;
					}
				}
			}
		}
		case DIALOG_LOCATEPOINTS:
		{
		    if(response)
			{
			    if(PointInfo[listitem][pExists])
			    {
	                pData[playerid][pCP] = CHECKPOINT_MISC;
				    SetPlayerCheckpoint(playerid, PointInfo[listitem][pPointX], PointInfo[listitem][pPointY], PointInfo[listitem][pPointZ], 3.0);
				    SM(playerid, COLOR_WHITE, "** Checkpoint marked at the location of %s.", PointInfo[listitem][pName]);
			    }
			}
		}
		case DIALOG_CONTACTS_OPTIONS:
		{
			if (response)
			{
				switch (listitem)
				{
					case 0:
					{
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT contact_name, contact_number FROM phone_contacts WHERE contact_id = %i", pData[playerid][pSelected]);
						mysql_tquery(connectionID, queryBuffer, "OnPlayerCallContact", "i", playerid);
					}
					case 1:
					{
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT contact_name, contact_number FROM phone_contacts WHERE contact_id = %i", pData[playerid][pSelected]);
						mysql_tquery(connectionID, queryBuffer, "OnPlayerTextContact", "i", playerid);
					}
					case 2:
					{
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM phone_contacts WHERE contact_id = %i", pData[playerid][pSelected]);
						mysql_tquery(connectionID, queryBuffer);

						ListContacts(playerid);
						SCMf(playerid, COLOR_YELLOW, "You have deleted the selected contact.");
					}
				}
			}
			else
			{
				ListContacts(playerid);
			}
		}
		case DIALOG_CONTACTS_NUMBER:
		{
			if (response)
			{
				new number, string[128];

				if (sscanf(inputtext, "i", number))
				{
					format(string, sizeof(string), "Please input the number for the contact '%s':", gTargetName[playerid]);
					return ShowPlayerDialog(playerid, DIALOG_CONTACTS_NUMBER, DIALOG_STYLE_INPUT, "{FFFFFF}Contact number", string, "Submit", "Cancel");
				}
				else if (number < 1)
				{
					format(string, sizeof(string), "You have entered an invalid number.\n\nPlease input the number for the contact '%s':", gTargetName[playerid]);
					return ShowPlayerDialog(playerid, DIALOG_CONTACTS_NUMBER, DIALOG_STYLE_INPUT, "{FFFFFF}Contact number", string, "Submit", "Cancel");
				}
				else
				{
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO phone_contacts (phone_number, contact_name, contact_number) VALUES(%i, '%e', %i)", pData[playerid][pPhone], gTargetName[playerid], number);
					mysql_tquery(connectionID, queryBuffer);

					ListContacts(playerid);
					SCMf(playerid, COLOR_YELLOW, "You have added a contact: %s (%i).", gTargetName[playerid], number);
				}
			}
		}
		case DIALOG_CONTACTS_ADD:
		{
			if (response)
			{
				if (isnull(inputtext))
				{
					return ShowPlayerDialog(playerid, DIALOG_CONTACTS_ADD, DIALOG_STYLE_INPUT, "{FFFFFF}Add contact", "Please input the name of the contact to add below:", "Submit", "Cancel");
				}
				else if (strlen(inputtext) > 24)
				{
					return ShowPlayerDialog(playerid, DIALOG_CONTACTS_ADD, DIALOG_STYLE_INPUT, "{FFFFFF}Add contact", "The contact name must be below 24 characters.\n\nPlease input the name of the contact to add below:", "Submit", "Cancel");
				}
				else
				{
					strcpy(gTargetName[playerid], inputtext, MAX_PLAYER_NAME);

					new string[128];
					format(string, sizeof(string), "Please input the number for the contact '%s':", gTargetName[playerid]);
					ShowPlayerDialog(playerid, DIALOG_CONTACTS_NUMBER, DIALOG_STYLE_INPUT, "{FFFFFF}Contact number", string, "Submit", "Cancel");
				}
			}
			else
			{
				ListContacts(playerid);
			}
			return 1;
		}
		case DIALOG_CONTACTS:
		{
			if (response)
			{
				if (listitem == 0)
				{
					ShowPlayerDialog(playerid, DIALOG_CONTACTS_ADD, DIALOG_STYLE_INPUT, "{FFFFFF}Add contact", "Please input the name of the contact to add below:", "Submit", "Cancel");
				}
				else
				{
					pData[playerid][pSelected] = gListedItems[playerid][--listitem];

					ShowPlayerDialog(playerid, DIALOG_CONTACTS_OPTIONS, DIALOG_STYLE_LIST, "{FFFFFF}Contact options", "Call contact\nText Message\nDelete contact", "Select", "Cancel");
				}
			}
		}
		case DIALOG_PHONE_SMS_TEXT:
		{
			new text[128];
			new
				number;
			number = cache_get_field_content_int(0, "contact_number");

			if (response)
			{
				if (sscanf(inputtext, "s[128]", text))
				{
					ShowPlayerDialog(playerid, DIALOG_PHONE_SMS_TEXT, DIALOG_STYLE_INPUT, "SMS Text", "Please type your message:", "Send", "Cancel");
				}
				foreach(new i : Player)
				{
					if(pData[i][pPhone] == number)
					{
						if(pData[i][pJailType] > 0)
						{
							return SCM(playerid, COLOR_ERROR, "Error:"WHITE" That player is currently imprisoned and cannot use their phone.");
						}
						if(pData[i][pTogglePhone])
						{
							return SCM(playerid, COLOR_ERROR, "Error:"WHITE" That player has their mobile phone switched off.");
						}

						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s takes out a cellphone and sends a message.", GetRPName(playerid));

						if(strlen(text) > MAX_SPLIT_LENGTH)
						{
							SCMf(i, COLOR_RCRPOOC, "** [Text from %s] (%i): %.*s... **", GetRPName(playerid), pData[playerid][pPhone], MAX_SPLIT_LENGTH, text);
							SCMf(i, COLOR_RCRPOOC, "** [Text from %s] (%i): ...%s **", GetRPName(playerid), pData[playerid][pPhone], text[MAX_SPLIT_LENGTH]);

							SCMf(playerid, COLOR_RED, "** [Text to %s] (%i): %.*s... **", GetRPName(i), pData[i][pPhone], MAX_SPLIT_LENGTH, text);
							SCMf(playerid, COLOR_RED, "** [Text to %s] (%i): ...%s **", GetRPName(i), pData[i][pPhone], text[MAX_SPLIT_LENGTH]);
						}
						else
						{
							SCMf(i, COLOR_RCRPOOC, "** [Text from %s] (%i): %s **", GetRPName(playerid), pData[playerid][pPhone], text);
							SCMf(playerid, COLOR_RED, "** [Text to %s] (%i): %s **", GetRPName(i), pData[i][pPhone], text);
						}

						pData[i][pTextFrom] = playerid;

						return 1;
					}
				}
			}
		}
		case DIALOG_PHONE_SMS:
		{
			new number;

			if (response)
			{
				if(pData[playerid][pTogglePhone])
					return SCM(playerid, COLOR_ERROR, "You have your phone toggled.");

				if (sscanf(inputtext, "i", number))
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_SMS, DIALOG_STYLE_INPUT, "{6688FF}SMS Number", "Please specify the number you would like to SMS:", "Sms", "Cancel");
				}
				else if (pData[playerid][pPhone] == number)
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_SMS, DIALOG_STYLE_INPUT, "{6688FF}SMS Number", "You can't text your own number.\n\nPlease specify the number you would like to SMS:", "Sms", "Cancel");
				}
				else if (number < 1)
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_SMS, DIALOG_STYLE_INPUT, "{6688FF}SMS Number", "Please specify the number you would like to SMS:", "Sms", "Cancel");
				}
				else
				{
					pData[playerid][pPhoneSMS] = number;

					ShowPlayerDialog(playerid, DIALOG_PHONE_SMS_TEXT, DIALOG_STYLE_INPUT, "SMS Text", "Please type your message:", "Send", "Cancel");
				}
			}
		}
		case DIALOG_PHONE_CALL:
		{
			if (response)
			{
				if(pData[playerid][pTogglePhone])
					return SCM(playerid, COLOR_ERROR, "You have your phone toggled.");

				new number;

				if (sscanf(inputtext, "i", number))
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "Please specify the number you would like to call:", "Call", "Cancel");
				}
				else if (pData[playerid][pCallLine] != INVALID_PLAYER_ID)
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "You are already on a call. Use {6688FF}/hangup{FFFFFF} to end it.\n\nPlease specify the number you would like to call:", "Call", "Cancel");
				}
				else if (pData[playerid][pPhone] == number)
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "You can't dial your own number.\n\nPlease specify the number you would like to call:", "Call", "Cancel");
				}
				else if (number < 1)
				{
					return ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "You have entered an invalid phone number.\n\nPlease specify the number you would like to call:", "Call", "Cancel");
				}
				else
				{
					if(number == 911)
					{
						pData[playerid][pCallLine] = playerid;
						pData[playerid][pCallStage] = 911;

						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
						SCM(playerid, COLOR_YELLOW, "Dispatch: 911, what is your emergency? Enter 'police' or 'medic'.");
						return 1;
					}
					else if(number == 6397)
					{
						pData[playerid][pCallLine] = playerid;
						pData[playerid][pCallStage] = 6397;

						PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
						SCM(playerid, SERVER_COLOR, "News Team: This is News here. Leave a message and we'll get back to you! *BEEP*");
						return 1;
					}
					else if(number == 6324)
					{
						pData[playerid][pCallLine] = playerid;
						pData[playerid][pCallStage] = 6324;

						PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
						SCM(playerid, COLOR_LIGHTORANGE, "Dispatch: This is the mechanic hotline. Please explain your situation to us.");
						return 1;
					}
					else if(number == 8294)
					{
						if(CountTaxiDrivers() < 1)
							return SCM(playerid, COLOR_YELLOW, "Dispatch: Sorry but we currently have no on duty taxi drivers.");

						pData[playerid][pCallLine] = playerid;
						pData[playerid][pCallStage] = 8294;

						PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
						SCM(playerid, COLOR_YELLOW, "Dispatch: This is the cab company. Please state your location and destination.");
						return 1;
					}
					else if(number == 666)
					{
						PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
						SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
						SCM(playerid, COLOR_WHITE, "** They hung up their phone and ended the call.");
						return 1;
					}

					foreach(new i : Player)
					{
						if(pData[i][pTogglePhone])
							return SCM(playerid, COLOR_ERROR, "The player's phone is off.");

						if(pData[i][pPhone] == number)
						{
							if(pData[i][pJailType] > 0)
							{
								return SCM(playerid, COLOR_ERROR, "Error:"WHITE" That player is currently imprisoned and cannot use their phone.");
							}
							if(pData[i][pCallLine] != INVALID_PLAYER_ID)
							{
								return SCM(playerid, COLOR_ERROR, "Error:"WHITE" This player is currently in a call. Wait until they hang up.");
							}
							if(pData[i][pTogglePhone])
							{
								return SCM(playerid, COLOR_ERROR, "Error:"WHITE" That player has their mobile phone switched off.");
							}
							if(pData[i][pLiveBroadcast] != INVALID_PLAYER_ID)
							{
								return SCM(playerid, COLOR_ERROR, "Error:"WHITE" That player is currently in a live interview and can't talk on the phone.");
							}

							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

							KillTimer(pData[playerid][pCallTimer]);
							KillTimer(pData[i][pCallTimer]);

							pData[playerid][pCallTimer] = SetTimerEx("OnPhoneBecomeAvailable", 1000 * 30, false, "d", playerid);
							pData[i][pCallTimer] = SetTimerEx("OnPhoneBecomeAvailable", 1000 * 30, false, "d", i);

							pData[playerid][pCallLine] = i;
							pData[playerid][pCalling] = 1;
							pData[playerid][pCallStage] = 0;

							pData[i][pCallLine] = playerid;
							pData[i][pCallStage] = 1;

							SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
							SendProximityMessage(i, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s's mobile phone begins to ring.", GetRPName(i));
							PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

							SCMf(playerid, COLOR_YELLOW, "** You've placed a call to number: %i. Please wait for your call to be answered.", number);
							SCMf(i, COLOR_YELLOW, "** Incoming call from %s [%i]. Use /pickup to take this call.", GetRPName(playerid), pData[playerid][pPhone]);
							PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
							return 1;
						}
					}

					SCM(playerid, COLOR_ERROR, "Error:"WHITE" That number is either not in service or the owner is offline.");
				}
			}
		}
		case DIALOG_PHONE:
		{
			if (response)
			{
				switch (listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, DIALOG_PHONE_CALL, DIALOG_STYLE_INPUT, "{6688FF}Call Number", "Please specify the number you would like to call:", "Call", "Cancel");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_PHONE_SMS, DIALOG_STYLE_INPUT, "{6688FF}SMS Number", "Please specify the number you would like to SMS:", "Call", "Cancel");
					}
					case 2:
					{
						ListContacts(playerid);
					}
				}
			}
		}

	    case DIALOG_REGISTER:
    	{
	        if(response)
	        {
	            if(isnull(inputtext))
	            {
	                ShowDialogToPlayer(playerid, DIALOG_REGISTER);
	                return 1;
				}
	            if(strlen(inputtext) < 4)
	            {
	                SCM(playerid, COLOR_LIGHTRED, "** Please choose a password containing at least 4 characters.");
	                ShowDialogToPlayer(playerid, DIALOG_REGISTER);
	                return 1;
	            }

	            WP_Hash(pData[playerid][pPassword], 129, inputtext);
	            ShowPlayerDialog(playerid, DIALOG_CONFIRMPASS, DIALOG_STYLE_PASSWORD, ""SVRCLR"Confirmation", ""WHITE"Please repeat your account password for verification:", "Submit", "Back");
			}
			else
			{
			    KickPlayer(playerid);
			}
		}
		case DIALOG_CONFIRMPASS:
		{
		    if(response)
		    {
		        new
					password[129];

		        if(isnull(inputtext))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_CONFIRMPASS, DIALOG_STYLE_PASSWORD, ""SVRCLR"Confirmation", ""WHITE"Please repeat your account password for verification:", "Submit", "Back");
				}

				WP_Hash(password, sizeof(password), inputtext);

				if(!strcmp(pData[playerid][pPassword], password))
				{
				    gTotalRegistered++;
				    SaveServerInfo();

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO users (username, password, regdate, lastlogin, ip) VALUES('%s', '%s', NOW(), NOW(), '%s')", GetPlayerNameEx(playerid), password, GetPlayerIP(playerid));
		            mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_ACCOUNT_REGISTER, playerid);
				}
				else
				{
				    ShowDialogToPlayer(playerid, DIALOG_REGISTER);
				    SCM(playerid, COLOR_LIGHTRED, "** Your repeated password does not match your chosen password. Please try again.");
				}
		    }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_REGISTER);
	        }
	    }
	    case DIALOG_LOGIN:
	    {
	        if(response)
	        {
	            new
	                specifiers[] = "%D of %M, %Y @ %k:%i",
	                password[129];

				if(isnull(inputtext))
				{
				    ShowDialogToPlayer(playerid, DIALOG_LOGIN);
				    return 1;
				}

				WP_Hash(password, sizeof(password), inputtext);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT *, DATE_FORMAT(lastlogin, '%s') AS login_date FROM users WHERE username = '%s' AND password = '%s'", specifiers, GetPlayerNameEx(playerid), password);
	        	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, playerid);
	        }
	        else
	        {
				KickPlayer(playerid);
			}
	    }
	    case DIALOG_GENDER:
	    {
	        if(response)
	        {
	            if(listitem == 0)
	            {
	                pData[playerid][pGender] = 1;
	                SCM(playerid, COLOR_LIGHTRED, "Alright, so you're a Male. Please enter the approximate age of your character.");
				}
				else if(listitem == 1)
				{
	                pData[playerid][pGender] = 2;
	                SCM(playerid, COLOR_LIGHTRED, "Alright, so you're a Female. Please enter the approximate age of your character.");
				}
			
				pData[playerid][pTutorial] = 1;
                pData[playerid][pTutorialTimer] = SetTimerEx("TutorialTimer", 1000, false, "ii", playerid, 1);
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "** Good stuff! That's all we need right now. Good Luck and Enjoy! Don't forget to invite your friends!");
		
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_GENDER);
			}
	    }
   	    case DIALOG_PAINTBALL:
		{
		    if(response)
		    {
			    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s has entered the paintball arena.", GetRPName(playerid));
				SetPlayerInPaintball(playerid, listitem+1);

				foreach(new i : Player)
				{
				    if(pData[playerid][pPaintball] == pData[i][pPaintball])
				    {
				        SM(i, COLOR_LIGHTORANGE, "(( %s has entered the paintball arena. ))", GetRPName(playerid));
					}
			    }
		    }
		}
		
		case DIALOG_PROXY:
	    {
			if(response)
			{
		        switch(listitem)
		        {
		            case 0:
		            {
					    if(!pData[playerid][pWhisper])
					    {
							pData[playerid][pWhisper] = 1;
							pData[playerid][pShout] = 0;
							pData[playerid][pNormal] = 0;
							lstream[playerid] = SvCreateDLStreamAtPlayer(5.0, SV_INFINITY, playerid, 0xff0000ff, "Whisper");
							SCM(playerid, COLOR_GLOBAL, "Voice Proximity Selected : "GREEN"Low");
						}
				    	ShowDialogToPlayer(playerid, DIALOG_PROXY);
		            }
		            case 1:
		            {
					    if(!pData[playerid][pNormal])
					    {
							pData[playerid][pNormal] = 1;
							pData[playerid][pWhisper] = 0;
							pData[playerid][pShout] = 0;
							lstream[playerid] = SvCreateDLStreamAtPlayer(15.0, SV_INFINITY, playerid, 0xff0000ff, "Normal");
							SCM(playerid, COLOR_GLOBAL, "Voice Proximity Selected : "GREEN"Normal");
						}
				    	ShowDialogToPlayer(playerid, DIALOG_PROXY);
		            }
		            case 2:
		            {
					    if(!pData[playerid][pShout])
					    {
							pData[playerid][pShout] = 1;
							pData[playerid][pWhisper] = 0;
							pData[playerid][pNormal] = 0;
							lstream[playerid] = SvCreateDLStreamAtPlayer(25.0, SV_INFINITY, playerid, 0xff0000ff, "Shout");
							SCM(playerid, COLOR_GLOBAL, "Voice Proximity Selected : "GREEN"Shout");
						}
				    	ShowDialogToPlayer(playerid, DIALOG_PROXY);
		            }
		        }
		    }
		}
   	    case DIALOG_BUYVEHICLENEW:
	    {
	        if(response)
			{
			    switch(listitem)
			    {
					case 0: ShowVehicleSelectionMenu(playerid, MODEL_SELECTION_VEHICLES);
					case 1: ShowDialogToPlayer(playerid, DIALOG_BUYVEHICLENEW);
				}
			}
		}
	    case DIALOG_AGE:
	    {
	        if(response)
	        {
	            new age = strval(inputtext);

				if(!(14 <= age <= 99))
				{
				    ShowDialogToPlayer(playerid, DIALOG_AGE);
				    SCM(playerid, COLOR_ERROR, "Error:"WHITE" You may only enter a number from 14 to 99. Please try again.");
				    return 1;
	            }

	            pData[playerid][pAge] = age;
				ShowDialogToPlayer(playerid, DIALOG_GENDER); 
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_AGE);
			}
	    }
		case DIALOG_PHARMACY:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
                    if(pData[playerid][pCash] < 5000)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough cash. You can't buy this.");
                    }
				    GivePlayerCash(playerid, -5000);
				    pData[playerid][pPainkillers] += 1;


                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);
                    SCM(playerid, COLOR_DOCTOR, "** You have successfully bought a PainKillers");
                }
                else if(listitem == 1)
                {
                	if(pData[playerid][pCash] < 15000)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough cash. You can't buy this.");
                    }
                    if(pData[playerid][pMedkit] > 10)
				    {
                        return SCM(playerid, COLOR_SYNTAX, "You already have 10 Medkit.");
				    }
                    GivePlayerCash(playerid, -15000);
					
					pData[playerid][pMedkit] += 1;
					
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[playerid][pMedkit], pData[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);
                    SCM(playerid, COLOR_DOCTOR, "** You have successfully bought an Firstaid. Use /firstaid to use it.");
                }
				else if(listitem == 2)
				{
					if(pData[playerid][pCash] < 10000)
                    {
                        return SCM(playerid, COLOR_SYNTAX, "You don't have enough cash. You can't buy this.");
                    }
                    if(pData[playerid][pBandage] > 10)
				    {
                        return SCM(playerid, COLOR_SYNTAX, "You already have 10 Bandage.");
				    }
					pData[playerid][pBandage] += 1;
                    GivePlayerCash(playerid, -10000);

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bandage = %i WHERE uid = %i", pData[playerid][pBandage], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);

                    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $3000 to the doctor and received bandage.", GetRPName(playerid));
                    SCM(playerid, COLOR_WHITE, "** Medkit purchased. /use bandage to use.");
				}
			}	
		}
	    case DIALOG_REFERRAL:
	    {
	        if(response)
	        {
	            if(isnull(inputtext) || strlen(inputtext) > 24)
	            {
	                return ShowDialogToPlayer(playerid, DIALOG_REFERRAL);
				}
				if(!strcmp(inputtext, GetPlayerNameEx(playerid)))
				{
				    SCM(playerid, COLOR_SYNTAX, "You can't put down your own name as a referral.");
				    return ShowDialogToPlayer(playerid, DIALOG_REFERRAL);
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip, uid FROM users WHERE username = '%e'", inputtext);
				mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CHECK_REFERRAL, playerid);
	        }
	        else
	        {
				//pData[playerid][pTutorialTimer] = SetTimerEx("PlayerSpawn", 3000, false, "ii", playerid);
				//ShowDialogToPlayer(playerid, DIALOG_SPAWN);
			}
	    }
		/*#if defined Christmas
	#else
			case DIALOG_CAROL:
			{
				if(response)
				{
					new badingsiseanz = Random(3,10);
					if(isnull(inputtext) || strlen(inputtext) < 4)
					{
						SCM(playerid, COLOR_SYNTAX, "You have failed sing the lyrics.");
						pData[playerid][pLastCarolTime] = 30;
						return 1;
					}
					if(!strcmp(inputtext, ReturnLyrics(CarolLyrics[playerid])))
					{
						SM(playerid, SERVER_COLOR, "You have successfully sung the lyrics! "GREEN"You recieved %i candy.", badingsiseanz);
						pData[playerid][pCandy] += badingsiseanz;
						pData[playerid][pLastCarolTime] = 30;
						return 1;
					}
					else
					{
						SCM(playerid, COLOR_SYNTAX, "You have failed sing the lyrics.");
						pData[playerid][pLastCarolTime] = 30;
					}
				}
				else
				{
					SCM(playerid, COLOR_SYNTAX, "You have failed sing the lyrics.");
					pData[playerid][pLastCarolTime] = 30;
					return 1;
				}
			}
		#endif*/
	    case DIALOG_INTERIORS:
	    {
	        if(response)
	        {
	            TeleportToCoords(playerid, interiorArray[listitem][intX], interiorArray[listitem][intY], interiorArray[listitem][intZ], interiorArray[listitem][intA], interiorArray[listitem][intID], GetPlayerVirtualWorld(playerid));
	            GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);
	        }
	    }
		case DIALOG_BIND1:
		{
			if(response)
			{
			
				new text[128], string[128];
				if(sscanf(inputtext, "s[128]", text))
				{
					format(string, sizeof(string), "[BIND ID: 1] Just type what you want for this bind please be aware that this bind is for\n NOTE: this is for /me ");
					ShowPlayerDialog(playerid, DIALOG_BIND1C, DIALOG_STYLE_INPUT, ""WHITE"BIND SYSTEM - 3TON#9197", string, "Submit", "Cancel");
				}
				strcpy(pData[playerid][pBind], text, 128);
				SM(playerid, COLOR_SYNTAX, "You set you bind slot 1 To:%s.  use /b1",(pData[playerid][pBind]));
	
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bindslot1 = '%s' WHERE uid = %i", pData[playerid][pBind], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}		
		case DIALOG_BIND1A:
		{
			if(response)
			{
			
				new text[128], string[128];
				if(sscanf(inputtext, "s[128]", text))
				{
					format(string, sizeof(string), "[BIND ID: 2] Just type what you want for this bind please be aware that this bind is for\n NOTE: this is for /me ");
					ShowPlayerDialog(playerid, DIALOG_BIND1A, DIALOG_STYLE_INPUT, ""WHITE"BIND SYSTEM - 3TON#9197", string, "Submit", "Cancel");
				}
				strcpy(pData[playerid][pBind2], text, 128);
				SM(playerid, COLOR_SYNTAX, "You set you bind slot 2 To:%s.  use /b2",(pData[playerid][pBind2]));
	
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bindslot2 = '%s' WHERE uid = %i", pData[playerid][pBind2], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}		
		case DIALOG_BIND1B:
		{
			if(response)
			{
			
				new text[128], string[128];
				if(sscanf(inputtext, "s[128]", text))
				{
					format(string, sizeof(string), "[BIND ID: 3] Just type what you want for this bind please be aware that this bind is for\n NOTE: this is for /me ");
					ShowPlayerDialog(playerid, DIALOG_BIND1B, DIALOG_STYLE_INPUT, ""WHITE"BIND SYSTEM - 3TON#9197", string, "Submit", "Cancel");
				}
				strcpy(pData[playerid][pBind3], text, 128);
				SM(playerid, COLOR_SYNTAX, "You set you bind slot 3 To:%s.  use /b3",(pData[playerid][pBind3]));
	
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bindslot3 = '%s' WHERE uid = %i", pData[playerid][pBind3], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}		
		case DIALOG_BIND1C:
		{
			if(response)
			{
			
				new text[128], string[128];
				if(sscanf(inputtext, "s[128]", text))
				{
					format(string, sizeof(string), "[BIND ID: 4] Just type what you want for this bind please be aware that this bind is for\n NOTE: this is for /me ");
					ShowPlayerDialog(playerid, DIALOG_BIND1C, DIALOG_STYLE_INPUT, ""WHITE"BIND SYSTEM - 3TON#9197", string, "Submit", "Cancel");
				}
				strcpy(pData[playerid][pBind4], text, 128);
				SM(playerid, COLOR_SYNTAX, "You set you bind slot 4 To:%s. use /b4",(pData[playerid][pBind4]));
	
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bindslot4 = '%s' WHERE uid = %i", pData[playerid][pBind4], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}			
		case DIALOG_BIND1D:
		{
			if(response)
			{
			
				new text[128], string[128];
				if(sscanf(inputtext, "s[128]", text))
				{
					format(string, sizeof(string), "[BIND ID: 5] Just type what you want for this bind please be aware that this bind is for\n NOTE: this is for /me ");
					ShowPlayerDialog(playerid, DIALOG_BIND1D, DIALOG_STYLE_INPUT, ""WHITE"BIND SYSTEM - 3TON#9197", string, "Submit", "Cancel");
				}
				strcpy(pData[playerid][pBind5], text, 128);
				SM(playerid, COLOR_SYNTAX, "You set you bind slot 5 To:%s. use /b5",(pData[playerid][pBind5]));
	
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bindslot5 = '%s' WHERE uid = %i", pData[playerid][pBind5], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}		
		case DIALOG_BIND2:
		{
			if(response)
			{
			
				new text[128], string[128];
				if(sscanf(inputtext, "s[128]", text))
				{
					format(string, sizeof(string), "[BIND ID: 6] Just type what you want for this bind please be aware that this bind is for\n NOTE: this is for /do ");
					ShowPlayerDialog(playerid, DIALOG_BIND2, DIALOG_STYLE_INPUT, ""WHITE"BIND SYSTEM - 3TON#9197", string, "Submit", "Cancel");
				}
				strcpy(pData[playerid][pBind6], text, 128);
				SM(playerid, COLOR_SYNTAX, "You set you bind slot 6 To:%s. use /b6",(pData[playerid][pBind6]));
	
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bindslot6 = '%s' WHERE uid = %i", pData[playerid][pBind6], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}		
		case DIALOG_BIND2A:
		{
			if(response)
			{
			
				new text[128], string[128];
				if(sscanf(inputtext, "s[128]", text))
				{
					format(string, sizeof(string), "[BIND ID: 7] Just type what you want for this bind please be aware that this bind is for\n NOTE: this is for /do ");
					ShowPlayerDialog(playerid, DIALOG_BIND2A, DIALOG_STYLE_INPUT, ""WHITE"BIND SYSTEM - 3TON#9197", string, "Submit", "Cancel");
				}
				strcpy(pData[playerid][pBind7], text, 128);
				SM(playerid, COLOR_SYNTAX, "You set you bind slot 7 To:%s. use /b7",(pData[playerid][pBind7]));
	
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bindslot7 = '%s' WHERE uid = %i", pData[playerid][pBind7], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}	
		case DIALOG_BIND2B:
		{
			if(response)
			{
			
				new text[128], string[128];
				if(sscanf(inputtext, "s[128]", text))
				{
					format(string, sizeof(string), "[BIND ID: 8] Just type what you want for this bind please be aware that this bind is for\n NOTE: this is for /do ");
					ShowPlayerDialog(playerid, DIALOG_BIND2B, DIALOG_STYLE_INPUT, ""WHITE"BIND SYSTEM - 3TON#9197", string, "Submit", "Cancel");
				}
				strcpy(pData[playerid][pBind8], text, 128);
				SM(playerid, COLOR_SYNTAX, "You set you bind slot 8 To:%s. use /b8",(pData[playerid][pBind8]));
	
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bindslot8 = '%s' WHERE uid = %i", pData[playerid][pBind8], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}	
		case DIALOG_BIND2C:
		{
			if(response)
			{
			
				new text[128], string[128];
				if(sscanf(inputtext, "s[128]", text))
				{
					format(string, sizeof(string), "[BIND ID: 9] Just type what you want for this bind please be aware that this bind is for\n NOTE: this is for /do ");
					ShowPlayerDialog(playerid, DIALOG_BIND2C, DIALOG_STYLE_INPUT, ""WHITE"BIND SYSTEM - 3TON#9197", string, "Submit", "Cancel");
				}
				strcpy(pData[playerid][pBind9], text, 128);
				SM(playerid, COLOR_SYNTAX, "You set you bind slot 9 To:%s. use /b9",(pData[playerid][pBind9]));
	
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bindslot9 = '%s' WHERE uid = %i", pData[playerid][pBind9], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}		
		case DIALOG_BIND2D:
		{
			if(response)
			{
			
				new text[128], string[128];
				if(sscanf(inputtext, "s[128]", text))
				{
					format(string, sizeof(string), "[BIND ID: 10] Just type what you want for this bind please be aware that this bind is for\n NOTE: this is for /do ");
					ShowPlayerDialog(playerid, DIALOG_BIND2D, DIALOG_STYLE_INPUT, ""WHITE"BIND SYSTEM - 3TON#9197", string, "Submit", "Cancel");
				}
				strcpy(pData[playerid][pBind10], text, 128);
				SM(playerid, COLOR_SYNTAX, "You set you bind slot 10 To:%s. use /b10",(pData[playerid][pBind10]));
	
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bindslot10 = '%s' WHERE uid = %i", pData[playerid][pBind10], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}		
		case DIALOG_BIND:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_BIND1);
		            }
		            case 1:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_BIND1A);		              
		            }
		            case 2:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_BIND1B);		               
		            }
		            case 3:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_BIND1C);		   
		            }
		            case 4:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_BIND1D);
		            }
		            case 5:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_BIND2);
		            }
		            case 6:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_BIND2A);
		            }
		            case 7:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_BIND2B);
		            }
		            case 8:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_BIND2C);
		            }
		            case 9:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_BIND2D);
		            }
		            
		        }
		    }
		}		
	    case DIALOG_BUYFURNITURE1:
	    {
	        new houseid = GetInsideHouse(playerid);

		    if(houseid == -1 || !HasFurniturePerms(playerid, houseid))
			{
				return 0;
			}

	   	    if(response)
	        {
				pData[playerid][pCategory] = listitem;
				ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE2);
	        }
	    }
	    case DIALOG_BUYFURNITURE2:
	    {
	        new houseid = GetInsideHouse(playerid);

	        if(houseid == -1 || !HasFurniturePerms(playerid, houseid))
			{
				return 0;
			}

	        if(response)
	        {
	            listitem += pData[playerid][pFurnitureIndex];

	            if(pData[playerid][pCash] < furnitureArray[listitem][fPrice])
	            {
	                return SCM(playerid, COLOR_SYNTAX, "You can't purchase this. You don't have enough money for it.");
	            }
	            else
	            {
		            new
		                Float:x,
	    	            Float:y,
	        	        Float:z,
	            	    Float:a;

					GetPlayerPos(playerid, x, y, z);
					GetPlayerFacingAngle(playerid, a);

					pData[playerid][pEditType] = EDIT_FURNITURE_PREVIEW;
					pData[playerid][pEditObject] = CreateDynamicObject(furnitureArray[listitem][fModel], x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z + 1.0, 0.0, 0.0, ((19353 <= furnitureArray[listitem][fModel] <= 19417) || (19426 <= furnitureArray[listitem][fModel] <= 19465)) ? (a + 90.0) : (a), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
                    pData[playerid][pSelected] = listitem;

					SM(playerid, COLOR_AQUA, "You are now previewing {0080FF}%s{CCFFFF}. This furniture item costs $%i to purchase.", furnitureArray[listitem][fName], furnitureArray[listitem][fPrice]);
					SM(playerid, COLOR_AQUA, "Use your cursor to control the editor interface. Click the floppy disk to save changes.");
                    EditDynamicObject(playerid, pData[playerid][pEditObject]);
				}
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_BUYFURNITURE1);
			}
	    }
     	case DIALOG_LOTTERY:
		{
			if(response)
			{
				new businessid = GetPVarInt(playerid, "business_id"), price = GetPVarInt(playerid, "business_price");

				if(strval(inputtext) < 1 || strval(inputtext) > 99)
					return ShowPlayerDialog(playerid, DIALOG_LOTTERY, DIALOG_STYLE_INPUT, "Pick a number", "Pick a lottery number from 1 to 99:", "Pick", "Nevermind");

				pData[playerid][pLottery] = strval(inputtext);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lottery = %d WHERE uid = %i", pData[playerid][pLottery], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SCMf(playerid, COLOR_WHITE, "You have purchased Lottery Ticket number: %d", strval(inputtext));

				GivePlayerCash(playerid, -price);
				BusinessInfo[businessid][bCash] += price;
				BusinessInfo[businessid][bProducts]--;
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
				mysql_tquery(connectionID, queryBuffer);

				DeletePVar(playerid, "business_id");
				DeletePVar(playerid, "business_price");
			}
			else
			{
				DeletePVar(playerid, "business_id");
				DeletePVar(playerid, "business_price");
			}
		}
		case GatePass:
		{
			if (response)
			{
				new id = Gate_Nearest(playerid);

				if (id == -1)
					return 0;

				if (isnull(inputtext))
					return ShowPlayerDialog(playerid, GatePass, DIALOG_STYLE_INPUT, "Enter Password", "Please enter the password for this gate below:", "Submit", "Cancel");

				if (strcmp(inputtext, GateData[id][gatePass]) != 0)
					return ShowPlayerDialog(playerid, GatePass, DIALOG_STYLE_INPUT, "Enter Password", "Error: Incorrect password specified.\n\nPlease enter the password for this gate below:", "Submit", "Cancel");

				Gate_Operate(id);
			}
		}
		case DIALOG_EDITBUY:
		{
			if(response)
			{
				pData[playerid][pProductChoose] = listitem;
				//SM(playerid, COLOR_SYNTAX,"You are editing product number: %i", pData[playerid][pProductChoose]);
				ShowPlayerDialog(playerid, DIALOG_EDITBUY2, DIALOG_STYLE_INPUT, SERVER_DIALOG, "Please enter the new product price:", "Modify", "");
			}
		}
		case DIALOG_EDITBUY2: {
			if(response)
			{
				new number = strval(inputtext), businessid = GetInsideBusiness(playerid), product = pData[playerid][pProductChoose];
				if(!(500 <= number <= 15000))
				{
					return SM(playerid, COLOR_SYNTAX, "Don't go below $1, or above $15,000 at once.");
				}
				BusinessInfo[businessid][bPrices][product] = number;
				//SM(playerid, COLOR_SYNTAX,"You set product %d to %i.", BusinessInfo[businessid][bPrices][product], number);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET prices%d = %i WHERE id = %i", product, number,BusinessInfo[businessid][bID]);
				mysql_tquery(connectionID, queryBuffer);
			}
		}
     	case DIALOG_BUY:
	    {
	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(BusinessInfo[businessid][bProducts] <= 0)
	            {
	                return SCM(playerid, COLOR_SYNTAX, "This business is out of stock.");
	            }

	            if(BusinessInfo[businessid][bType] == BUSINESS_STORE)
	            {
	                switch(listitem)
	                {
	                    case 0:
	                    {
							new price = BusinessInfo[businessid][bPrices][0];

	                        if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        pData[playerid][pPhone] = random(100000) + 899999;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phone = %i WHERE uid = %i", pData[playerid][pPhone], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a mobile phone.", GetRPName(playerid), price);
	                        SM(playerid, COLOR_WHITE, "** Mobile phone purchased. Your new phone number is %i.", pData[playerid][pPhone]);
						}
						case 1:
						{
						    new price = BusinessInfo[businessid][bPrices][1];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pWalkieTalkie])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have a Portable Radio already.");
						    }

						    pData[playerid][pWalkieTalkie] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET walkietalkie = 1 WHERE uid = %i", pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Portable Radio.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Portable Radio purchased. Use /pr to speak and /channel to change the frequency.");
						}
						case 2:
						{
						    new price = BusinessInfo[businessid][bPrices][2];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pCigars] >= 20)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 cigars.");
						    }

						    pData[playerid][pCigars] += 10;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", pData[playerid][pCigars], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a pack of cigars.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Cigars purchased. Use /use cigar to smoke a cigar.");
						}
						case 3:
						{
						    new price = BusinessInfo[businessid][bPrices][3];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pSpraycans] + 10 >= 20)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 spraycans.");
						    }

						    pData[playerid][pSpraycans] += 10;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", pData[playerid][pSpraycans], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received 10 spraycans.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Spraycans purchased. Use /colorcar and /paintcar in a vehicle to use them.");
						}
						case 4:
						{
						    new price = BusinessInfo[businessid][bPrices][4];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pPhonebook])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have a phonebook already.");
						    }

						    pData[playerid][pPhonebook] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phonebook = 1 WHERE uid = %i", pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a phonebook.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Phonebook purchased. Use /phonebook to lookup a player's number.");
						}
						case 5:
						{
						    new price = BusinessInfo[businessid][bPrices][5];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
							if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
							{
								return SCM(playerid, COLOR_SYNTAX, "You are not allowed to buy a CAMERA reason weapon restricted or level 1.");
							}	
							GiveWeapon(playerid, 43);
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a camera.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Camera purchased.");
						}
						case 6:
						{
						    new price = BusinessInfo[businessid][bPrices][6];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pMP3Player])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have an MP3 player already.");
						    }

						    pData[playerid][pMP3Player] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mp3player = 1 WHERE uid = %i", pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received an MP3 player.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** MP3 player purchased. Use /mp3 for a list of options.");
						}
						case 7:
						{
						    new price = BusinessInfo[businessid][bPrices][7];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pFishingRod])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have a fishing rod already.");
						    }

						    pData[playerid][pFishingRod] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingrod = 1 WHERE uid = %i", pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a fishing rod.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Fishing rod purchased. Use /fish at the pier or in a boat to begin fishing.");
						}
						case 8:
						{
						    new price = BusinessInfo[businessid][bPrices][8];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pFishingBait] + 10 >= 20)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 pieces of bait.");
						    }

						    pData[playerid][pFishingBait] += 10;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingbait = %i WHERE uid = %i", pData[playerid][pFishingBait], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received fish bait.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Fishing bait purchased. Bait increases the odds of catching bigger fish.");
						}
						case 9:
						{
						    new price = BusinessInfo[businessid][bPrices][9];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pMuriaticAcid] + 1 >= 11)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 bottles of muriatic acid.");
						    }

						    pData[playerid][pMuriaticAcid] += 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET muriaticacid = %i WHERE uid = %i", pData[playerid][pMuriaticAcid], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of muriatic acid.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Muriatic acid purchased.");
						}
						case 10:
						{
						    new price = BusinessInfo[businessid][bPrices][10];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pBakingSoda] + 1 >= 11)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 bottles of baking soda.");
						    }

						    pData[playerid][pBakingSoda] += 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bakingsoda = %i WHERE uid = %i", pData[playerid][pBakingSoda], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of baking soda.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Baking soda purchased.");
						}
						case 11:
						{
						    new price = BusinessInfo[businessid][bPrices][11];
						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pWatch])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have a pocket watch already.");
						    }

						    pData[playerid][pWatch] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET watch = 1 WHERE uid = %i", pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a pocket watch.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Pocket watch purchased. Use /watch to toggle it.");
						}
						case 12:
						{
						    new price = BusinessInfo[businessid][bPrices][12];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pGPS])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have a GPS already.");
						    }

						    pData[playerid][pGPS] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gps = 1 WHERE uid = %i", pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a GPS.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** GPS purchased. (( /gps, /locate ))");
						}
						case 13:
						{
						    new price = BusinessInfo[businessid][bPrices][13];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pGasCan] + 5 > 20)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 liters of gas.");
						    }

						    pData[playerid][pGasCan] += 5;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", pData[playerid][pGasCan], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a 5 liters of gasoline.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Gas can purchased. Use /gascan in a vehicle to refill its fuel.");
						}
						case 14:
						{
						    new price = BusinessInfo[businessid][bPrices][14];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pRope] + 2 > 10)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 ropes.");
						    }


						    pData[playerid][pRope] += 2;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rope = %i WHERE uid = %i", pData[playerid][pRope], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received 2 ropes.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "Ropes purchased. Use /tie to tie people in your vehicle.");
						}
						case 15:
						{
						    new price = BusinessInfo[businessid][bPrices][15];
						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pBlindfold] + 2 > 10)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 blindfolds.");
						    }


						    pData[playerid][pBlindfold] += 2;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET blindfold = %i WHERE uid = %i", pData[playerid][pBlindfold], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received 2 blindfolds.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "Blindfold purchased. Use /blindfold to blindfold people in your vehicle.");
						}
						case 16:
						{
		    				new price = BusinessInfo[businessid][bPrices][16];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pRope] == 1)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 1 toolkits.");
						    }


						    pData[playerid][pToolkit] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a toolkit.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "Toolkit purchased. Use /hotwire to hotwire people's vehicles.");
						}
						case 17:
						{
		    				new price = BusinessInfo[businessid][bPrices][17];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pFlashlight] == 1)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 1 flashlight.");
						    }


						    pData[playerid][pFlashlight] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a flashlight.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "Flashlight purchased. use /flashlight to use it on your hand and /taclight to use it on your weapon.	");
						}
						case 18:
						{
          					new price = BusinessInfo[businessid][bPrices][18];
						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
				  			if(pData[playerid][pLottery])
					    	{
				      			return SendClientMessage(playerid, COLOR_GREY, "You already bought a Lottery Ticket.");
						    }

							SetPVarInt(playerid, "business_price", price);
							SetPVarInt(playerid, "business_id", businessid);
							GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
							BusinessInfo[businessid][bProducts]--;

							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
							mysql_tquery(connectionID, queryBuffer);

							ShowPlayerDialog(playerid, DIALOG_LOTTERY, DIALOG_STYLE_INPUT, "Pick a number", "Pick a lottery number from 1 to 99::", "Pick", "Nevermind");
						}
						case 19: 
						{
							new price = BusinessInfo[businessid][bPrices][19];
						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
						    if(pData[playerid][pMask])
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You have a mask already.");
						    }

						    pData[playerid][pMask] = 1;
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mask = 1 WHERE uid = %i", pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Mask.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Mask purchased. Use /mask to toggle it.");
						}
					}
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_GUNSHOP)
				{
					if(pData[playerid][pWeaponLicense] == 0)
					{
						return SendClientMessage(playerid, -1, "You need a weapon license to purchase a weapon.");
					}
					if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
					{
						return SCM(playerid, COLOR_SYNTAX, "You are not allowed to buy a gun reason weapon restricted or level 1.");
					}
				    switch(listitem)
					{
				        case 0:
				        {
				            new price = BusinessInfo[businessid][bPrices][0];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerHasWeapon(playerid, 5))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 5);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Baseball Bat.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Baseball Bat purchased.");
				        }
				        case 1:
				        {
				            new price = BusinessInfo[businessid][bPrices][1];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerHasWeapon(playerid, 8))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}


	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 8);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Katana.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Katana purchased.");
				        }
				        case 2:
				        {
                			new price = BusinessInfo[businessid][bPrices][2];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerHasWeapon(playerid, 23))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 23);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a SILENCE PISTOL.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** SILENCE PISTOL purchased.");
				        }
				        case 3:
				        {
				            new price = BusinessInfo[businessid][bPrices][3];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerHasWeapon(playerid, 22))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 22);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a PISTOL.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** PISTOL purchased.");
				        }
				        case 4:
				        {
				            new price = BusinessInfo[businessid][bPrices][4];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerHasWeapon(playerid, 29))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 29);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a MP5.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** MP5 purchased.");
				        }
				        case 5:
				        {
				            new price = BusinessInfo[businessid][bPrices][5];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(PlayerHasWeapon(playerid, 25))
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

	                        GivePlayerCash(playerid, -price);
	                        GiveWeapon(playerid, 25);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a Shotgun.", GetRPName(playerid), price);
	                        SCM(playerid, COLOR_WHITE, "** Shotgun purchased.");
				        }
				        case 6:
				        {
				            new price = BusinessInfo[businessid][bPrices][6];

				            if(pData[playerid][pCash] < price)
		                    {
		                        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You don't have enough money. You can't buy this.");
		                    }
							if(pData[playerid][pVest] == 4)
						    {
						        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 4 Vest.");
						    }

							pData[playerid][pVest] += 1;

							GivePlayerCash(playerid, -price);
							GivePlayerCash(playerid, -price);

		                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vest = %i WHERE uid = %i", pData[playerid][pVest], pData[playerid][pID]);
		                    mysql_tquery(connectionID, queryBuffer);

		                    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s paid $%i to the shopkeeper and received a vest.", GetRPName(playerid), price);
		                    SCM(playerid, COLOR_WHITE, "** Vest purchased. Use /use vest to use.");
				        }
					}
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
				{
				    new
						string[128];

	                format(string, sizeof(string), "%s's %s [%i Products]", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);

				    if(listitem == 0)
					{
						if(pData[playerid][pLevel] == 1)
						{
							return SCM(playerid, COLOR_RED, "[ERROR]: You must be level 2 in order to change a clothes");
						}
						ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_CLOTHES, "Clothes Shop", clothesShopSkins, sizeof(clothesShopSkins));
					}
					else if(listitem == 5)
					{
						if(pData[playerid][pDonator] == 0)
						{
							return SCM(playerid, COLOR_RED, "You dont have any vip package");
						}
						pData[playerid][pCategory] = 5 - 1;
						ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE);
					}
					else
					{
						pData[playerid][pCategory] = listitem - 1;
						ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE);
				    }
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_GYM)
				{
				    switch(listitem)
				    {
				        case 0:
				        {
	                        if(pData[playerid][pFightStyle] == FIGHT_STYLE_NORMAL)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }

	                        pData[playerid][pFightStyle] = FIGHT_STYLE_NORMAL;
	                        SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);

							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[playerid][pFightStyle], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SCM(playerid, COLOR_WHITE, "** You have chosen the normal fighting style.");
						}
						case 1:
						{
						    new price = BusinessInfo[businessid][bPrices][0];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(pData[playerid][pFightStyle] == FIGHT_STYLE_BOXING)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }


	                        GivePlayerCash(playerid, -price);
	                        BusinessInfo[businessid][bCash] += price;

                            pData[playerid][pFightStyle] = FIGHT_STYLE_BOXING;
	                        SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[playerid][pFightStyle], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SM(playerid, COLOR_WHITE, "** You have purchased the Boxing fighting style for $%i.", price);
						}
						case 2:
						{
						    new price = BusinessInfo[businessid][bPrices][1];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(pData[playerid][pFightStyle] == FIGHT_STYLE_KUNGFU)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }


	                        GivePlayerCash(playerid, -price);
	                        BusinessInfo[businessid][bCash] += price;

	                        pData[playerid][pFightStyle] = FIGHT_STYLE_KUNGFU;
	                        SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[playerid][pFightStyle], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SM(playerid, COLOR_WHITE, "** You have purchased the Kung-Fu fighting style for $%i.", price);
						}
						case 3:
						{
						    new price = BusinessInfo[businessid][bPrices][2];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(pData[playerid][pFightStyle] == FIGHT_STYLE_KNEEHEAD)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }


	                        GivePlayerCash(playerid, -price);
	                        BusinessInfo[businessid][bCash] += price;

	                        pData[playerid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;
	                        SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[playerid][pFightStyle], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SM(playerid, COLOR_WHITE, "** You have purchased the Kneehead fighting style for $%i.", price);
						}
						case 4:
						{
						    new price = BusinessInfo[businessid][bPrices][3];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(pData[playerid][pFightStyle] == FIGHT_STYLE_GRABKICK)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }


	                        GivePlayerCash(playerid, -price);
	                        BusinessInfo[businessid][bCash] += price;

	                        pData[playerid][pFightStyle] = FIGHT_STYLE_GRABKICK;
	                        SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[playerid][pFightStyle], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SM(playerid, COLOR_WHITE, "** You have purchased the Grabkick fighting style for $%i.", price);
						}
						case 5:
						{
						    new price = BusinessInfo[businessid][bPrices][4];

						    if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }
	                        if(pData[playerid][pFightStyle] == FIGHT_STYLE_ELBOW)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You already have this fighting style.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        BusinessInfo[businessid][bCash] += price;

	                        pData[playerid][pFightStyle] = FIGHT_STYLE_ELBOW;
	                        SetPlayerFightingStyle(playerid, pData[playerid][pFightStyle]);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[playerid][pFightStyle], pData[playerid][pID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SM(playerid, COLOR_WHITE, "** You have purchased the Elbow fighting style for $%i.", price);
						}
					}
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_RESTAURANT)
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new price = BusinessInfo[businessid][bPrices][0];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }

 							pData[playerid][pThirst] += 30;
							pData[playerid][pThirstTimer] = 0;
			        		if (pData[playerid][pThirst] > 100)
							{
								pData[playerid][pThirst] = 100;
							}
 							pData[playerid][pStress] += 10;
							pData[playerid][pStressTimer] = 0;
			        		if (pData[playerid][pStress] > 100)
							{
								pData[playerid][pStress] = 100;
							}

	                        GivePlayerCash(playerid, -price);


							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottled water.", GetRPName(playerid), price);
						}
						case 1:
				        {
				            new price = BusinessInfo[businessid][bPrices][1];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }

         					pData[playerid][pThirst] += 40;
							pData[playerid][pThirstTimer] = 0;
			        		if (pData[playerid][pThirst] > 100)
							{
								pData[playerid][pThirst] = 100;
							}
 							pData[playerid][pStress] += 30;
							pData[playerid][pStressTimer] = 0;
			        		if (pData[playerid][pStress] > 100)
							{
								pData[playerid][pStress] = 100;
							}
	                        GivePlayerCash(playerid, -price);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a can of sprunk.", GetRPName(playerid), price);
						}
						case 2:
				        {
				            new price = BusinessInfo[businessid][bPrices][2];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }

        					pData[playerid][pHunger] += 40;
							pData[playerid][pHungerTimer] = 0;
			        		if (pData[playerid][pHunger] > 100)
							{
								pData[playerid][pHunger] = 100;
							}
 							pData[playerid][pStress] += 10;
							pData[playerid][pStressTimer] = 0;
			        		if (pData[playerid][pStress] > 100)
							{
								pData[playerid][pStress] = 100;
							}
	                        GivePlayerCash(playerid, -price);


							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received kid's meal.", GetRPName(playerid), price);
						}
						case 3:
				        {
				            new price = BusinessInfo[businessid][bPrices][3];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }

	                        pData[playerid][pHunger] += 50;
							pData[playerid][pHungerTimer] = 0;
			        		if (pData[playerid][pHunger] > 100)
							{
								pData[playerid][pHunger] = 100;
							}
 							pData[playerid][pStress] += 20;
							pData[playerid][pStressTimer] = 0;
			        		if (pData[playerid][pStress] > 100)
							{
								pData[playerid][pStress] = 100;
							}
	                        GivePlayerCash(playerid, -price);


							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a medium meal.", GetRPName(playerid), price);
						}
						case 4:
				        {
				            new price = BusinessInfo[businessid][bPrices][4];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money. You can't buy this.");
	                        }

	                        pData[playerid][pHunger] += 70;
							pData[playerid][pHungerTimer] = 0;
			        		if (pData[playerid][pHunger] > 100)
							{
								pData[playerid][pHunger] = 100;
							}
 							pData[playerid][pStress] += 30;
							pData[playerid][pStressTimer] = 0;
			        		if (pData[playerid][pStress] > 100)
							{
								pData[playerid][pStress] = 100;
							}
	                        GivePlayerCash(playerid, -price);


							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a big meal.", GetRPName(playerid), price);
						}
					}
				}
				else if(BusinessInfo[businessid][bType] == BUSINESS_BARCLUB)
				{
				    switch(listitem)
				    {
				        case 0:
				        {
				            new price = BusinessInfo[businessid][bPrices][0];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        GivePlayerCash(playerid, -price);


							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottled water.", GetRPName(playerid), price);
						}
						case 1:
				        {
				            new price = BusinessInfo[businessid][bPrices][1];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a can of sprunk.", GetRPName(playerid), price);
						}
						case 2:
				        {
				            new price = BusinessInfo[businessid][bPrices][2];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of beer.", GetRPName(playerid), price);
						}
						case 3:
				        {
				            new price = BusinessInfo[businessid][bPrices][3];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of wine.", GetRPName(playerid), price);
						}
						case 4:
				        {
				            new price = BusinessInfo[businessid][bPrices][4];

				            if(pData[playerid][pCash] < price)
	                        {
	                            return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy this.");
	                        }

	                        GivePlayerCash(playerid, -price);
	                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);

							BusinessInfo[businessid][bCash] += price;
	                        BusinessInfo[businessid][bProducts]--;

	                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	                        mysql_tquery(connectionID, queryBuffer);

	                        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a bottle of whiskey.", GetRPName(playerid), price);
						}
					}
				}
	        }
	    }
	    case DIALOG_BUYCLOTHES:
	    {
	        if(response)
	        {
	            new businessid = GetInsideBusiness(playerid);

	            if(BusinessInfo[businessid][bProducts] <= 0)
	            {
	                return SCM(playerid, COLOR_SYNTAX, "This business is out of stock.");
	            }
	            if(pData[playerid][pDonator] == 0 && pData[playerid][pCash] < 50)
                {
                    return SCM(playerid, COLOR_SYNTAX, "You don't have enough money. You can't buy new clothes.");
                }

	            if(BusinessInfo[businessid][bType] == BUSINESS_CLOTHES)
	            {
	                new skinid;

					if(pData[playerid][pDonator] == 0)
					{
					    new price = 50;

						GivePlayerCash(playerid, -price);

						BusinessInfo[businessid][bCash] += price;
                    	BusinessInfo[businessid][bProducts]--;

                    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i, products = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
                    	mysql_tquery(connectionID, queryBuffer);

                    	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the shopkeeper and received a new set of clothes.", GetRPName(playerid), price);
                 		SM(playerid, COLOR_WHITE, "** You've changed your skin for $%i.", price);
                    }
                    else
                    {
                        SCM(playerid, COLOR_VIP, "** Donator perk: You changed your clothes free of charge.");
					}

					SetPlayerSkin(playerid, skinid);
                    pData[playerid][pSkin] = skinid;

                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
                    mysql_tquery(connectionID, queryBuffer);
	            }
			}
	    }
   		case DIALOG_PICKLOAD:
	    {
	        if(response)
	        {
	            if(!PlayerHasJob(playerid, JOB_COURIER))
				{
				    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you are not a Trucker.");
				}
				if(!IsPlayerInRangeOfPoint(playerid, 8.0, 2460.9790,-2119.2590,13.5530))
				{
				    return SCM(playerid, COLOR_SYNTAX, "You are not at the loading dock.");
				}
				if(listitem == 0) {
					pData[playerid][pShipment] = BUSINESS_STORE;
				} if(listitem == 1) {
					pData[playerid][pShipment] = BUSINESS_GUNSHOP;
				} if(listitem == 2) {
					pData[playerid][pShipment] = BUSINESS_CLOTHES;
				} if(listitem == 3) {
					pData[playerid][pShipment] = BUSINESS_RESTAURANT;
				} if(listitem == 4) {
					pData[playerid][pShipment] = BUSINESS_BARCLUB;
				} if(listitem == 5) 
				{
					if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
					{
						return SCM(playerid, COLOR_SYNTAX, "You are not allowed to do a illegal truckiing reason weapon restricted or level 1.");
					}
					pData[playerid][pShipment] = BUSINESS_GUNSHOP;
					pData[playerid][pIllegalCargo] = ILLEGAL_GUNS;
				}
				if(listitem == 6) {
					pData[playerid][pShipment] = BUSINESS_GUNSHOP;
					pData[playerid][pIllegalCargo] = ILLEGAL_MATS;
				}if(listitem == 7) {
					pData[playerid][pShipment] = BUSINESS_BARCLUB;
					pData[playerid][pIllegalCargo] = ILLEGAL_DRUGS;
				}	
				
				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				SetPlayerAttachedObject(playerid, 9, 1220, 5, 0.184000, 0.330999, 0.112999, -84.099983, -9.500001, 20.700000);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have selected '%s'. Type /LOADCARGO near the truck to load the box.", inputtext);
				PlayerHasCrate[playerid] = 1;
				pData[playerid][pLastLoad] = gettime();
	        }
	    }
	    case DIALOG_UNREADTEXTS:
	    {
	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM texts WHERE recipient_number = %i ORDER BY date DESC LIMIT 25", pData[playerid][pPhone]);
	        mysql_tquery(connectionID, queryBuffer);

	        if(response)
	        {
				callcmd::texts(playerid, "\1");
	        }
	    }
        case DIALOG_VENDOR:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: // BURGER
					{
						if(pData[playerid][pCash] < 85)
							return SendClientMessageEx(playerid, COLOR_GREY, "You must have at least 85 php.");

						if (pData[playerid][pVendorTime] > 0)
							return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a vendor again.");

	                    if(pData[playerid][pFood] >= 20)
					    {
					        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 Food.");
					    }
						pData[playerid][pFood] += 5;

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);
	                    
						pData[playerid][pVendorTime] = 5;

						GivePlayerCash(playerid, -85);
						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);


						SCMf(playerid, COLOR_TEAL, "* "WHITE"%s"TEAL" has purchased a street food from the vendor.", GetPlayerNameEx(playerid));

						SCM(playerid, COLOR_TEAL, "* You have paid 85 php for a street food.");
					}
					case 1: // SISIG
					{
						if(pData[playerid][pCash] < 150)
							return SendClientMessageEx(playerid, COLOR_GREY, "You must have at least 150 php.");

						if (pData[playerid][pVendorTime] > 0)
							return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a vendor again.");

						pData[playerid][pVendorTime] = 5;

						GivePlayerCash(playerid, -150);
						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

	                    if(pData[playerid][pFood] >= 20)
					    {
					        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 Food.");
					    }
						pData[playerid][pFood] += 5;

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);

						SCMf(playerid, COLOR_TEAL, "* "WHITE"%s"TEAL" has purchased a street food from the vendor.", GetPlayerNameEx(playerid));

						SCM(playerid, COLOR_TEAL, "* You have paid 85 php for a street food.");
					}
					case 2: // PTATTOS
					{
						if(pData[playerid][pCash] < 25)
							return SendClientMessageEx(playerid, COLOR_GREY, "You must have at least 25 php.");

						if (pData[playerid][pVendorTime] > 0)
							return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a vendor again.");

						pData[playerid][pVendorTime] = 5;

						GivePlayerCash(playerid, -25);
						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

	                    if(pData[playerid][pFood] >= 20)
					    {
					        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 Food.");
					    }
						pData[playerid][pFood] += 5;

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);
	                    
						SCMf(playerid, COLOR_TEAL, "* "WHITE"%s"TEAL" has purchased a street food from the vendor.", GetPlayerNameEx(playerid));

						SCM(playerid, COLOR_TEAL, "* You have paid 85 php for a street food.");
					}
					case 3: // DONUT
					{
						if(pData[playerid][pCash] < 55)
							return SendClientMessageEx(playerid, COLOR_GREY, "You must have at least 55 php.");

						if (pData[playerid][pVendorTime] > 0)
							return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a vendor again.");

						pData[playerid][pVendorTime] = 5;

						GivePlayerCash(playerid, -55);
						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
						
	                    if(pData[playerid][pFood] >= 20)
					    {
					        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 Food.");
					    }
						pData[playerid][pFood] += 5;

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET food = %i WHERE uid = %i", pData[playerid][pFood], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);
	                    
						SCMf(playerid, COLOR_TEAL, "* "WHITE"%s"TEAL" has purchased a street food from the vendor.", GetPlayerNameEx(playerid));

						SCM(playerid, COLOR_TEAL, "* You have paid 85 php for a street food.");
				}
					case 4: // BUKO JUICE
					{
						if(pData[playerid][pCash] < 20)
							return SendClientMessageEx(playerid, COLOR_GREY, "You must have at least 20 php.");

						if (pData[playerid][pVendorTime] > 0)
							return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a vendor again.");

						pData[playerid][pVendorTime] = 3;

						GivePlayerCash(playerid, -20);
						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

	                    if(pData[playerid][pDrink] >= 20)
					    {
					        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 Drinks.");
					    }
						pData[playerid][pDrink] += 5;

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[playerid][pDrink], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);
	                    
						SCMf(playerid, COLOR_TEAL, "* "WHITE"%s"TEAL" has purchased a street food from the vendor.", GetPlayerNameEx(playerid));

						SCM(playerid, COLOR_TEAL, "* You have paid 85 php for a street food.");
					}
					case 5: // PINE APPLE JUICE
					{
						if(pData[playerid][pCash] < 50)
							return SendClientMessageEx(playerid, COLOR_GREY, "You must have at least 50 php.");

						if (pData[playerid][pVendorTime] > 0)
							return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a vendor again.");

						pData[playerid][pVendorTime] = 3;

						GivePlayerCash(playerid, -50);
						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

	                    if(pData[playerid][pDrink] >= 20)
					    {
					        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 Drinks.");
					    }
						pData[playerid][pDrink] += 5;

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[playerid][pDrink], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);
	                    
						SCMf(playerid, COLOR_TEAL, "* "WHITE"%s"TEAL" has purchased a street food from the vendor.", GetPlayerNameEx(playerid));

						SCM(playerid, COLOR_TEAL, "* You have paid 85 php for a street food.");
					}
					case 6: // SPRITE
					{
						if(pData[playerid][pCash] < 28)
							return SendClientMessageEx(playerid, COLOR_GREY, "You must have at least 28 php.");

						if (pData[playerid][pVendorTime] > 0)
							return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a vendor again.");

						pData[playerid][pVendorTime] = 3;

						GivePlayerCash(playerid, -28);
						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

	                    if(pData[playerid][pDrink] >= 20)
					    {
					        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 Drinks.");
					    }
						pData[playerid][pDrink] += 5;

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[playerid][pDrink], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);
	                    
						SCMf(playerid, COLOR_TEAL, "* "WHITE"%s"TEAL" has purchased a street food from the vendor.", GetPlayerNameEx(playerid));

						SCM(playerid, COLOR_TEAL, "* You have paid 85 php for a street food.");
					}
					case 7: // NATURE SPRING
					{
						if(pData[playerid][pCash] < 15)
							return SendClientMessageEx(playerid, COLOR_GREY, "You must have at least 15 php.");

						if (pData[playerid][pVendorTime] > 0)
							return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a vendor again.");

						pData[playerid][pVendorTime] = 3;

						GivePlayerCash(playerid, -15);
						ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

	                    if(pData[playerid][pDrink] >= 20)
					    {
					        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 Drinks.");
					    }
						pData[playerid][pDrink] += 5;

	                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[playerid][pDrink], pData[playerid][pID]);
	                    mysql_tquery(connectionID, queryBuffer);
	                    
						SCMf(playerid, COLOR_TEAL, "* "WHITE"%s"TEAL" has purchased a street food from the vendor.", GetPlayerNameEx(playerid));

						SCM(playerid, COLOR_TEAL, "* You have paid 85 php for a street food.");
					}
				}
			}
		}
	    case DIALOG_BAR:
	    {
	        if(response)
	        {
	 			if(listitem == 0)
				{
				    new price = 25;

					if (pData[playerid][pBarTime] > 0)
						return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a bar again.");

					ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

				    GivePlayerCash(playerid, -price);
				    GivePlayerHealth(playerid, 10.0);
				    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the bartender and received a bottled water.", GetRPName(playerid), price);
                }
	 			else if(listitem == 1)
				{
				    new price = 50;

					if (pData[playerid][pBarTime] > 0)
						return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a bar again.");

					ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

				    GivePlayerCash(playerid, -price);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				    GivePlayerHealth(playerid, 10.0);
    	           	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the bartender and received a can of sprunk.", GetRPName(playerid), price);
                }
	 			else if(listitem == 2)
				{
				    new price = 250;

					if (pData[playerid][pBarTime] > 0)
						return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a bar again.");

					ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

				    GivePlayerCash(playerid, -price);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
	               	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the bartender and received a bottle of beer.", GetRPName(playerid), price);
                }
                else if(listitem == 3)
                {
				    new price = 500;

					if (pData[playerid][pBarTime] > 0)
						return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a bar again.");

					ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

				    GivePlayerCash(playerid, -price);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
	               	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the bartender and received a bottle of wine.", GetRPName(playerid), price);
                }
                else if(listitem == 4)
                {
				    new price = 500;

					if (pData[playerid][pBarTime] > 0)
						return SendClientMessageEx(playerid, COLOR_GREY, "Please wait before purchasing from a bar again.");

					ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

				    GivePlayerCash(playerid, -price);
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
	               	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the bartender and received a bottle of whiskey.", GetRPName(playerid), price);
                }
			}
		}
  		case DIALOG_NEWBIE:
	    {
			if(response)
			{
				new string[128];
				if(pData[playerid][pAdmin] < 2 && pData[playerid][pHelper] == 0)
				{
			 		pData[playerid][pLastNewbie] = gettime();
				}
				if(isnull(inputtext)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot send no question!");
				if(strlen(inputtext) > 110) return SendClientMessageEx(playerid, COLOR_GREY, "That message is too long!");
				format(string, sizeof(string), ""LIGHTRED"New Question! "YELLOW"%s(%d)"WHITE": %s", GetPlayerNameEx(playerid), playerid, inputtext);
				SendQuestionToStaff(COLOR_RED, string);
				SendQuestionToStaff(COLOR_WHITE, "** /nanswer (/na) to asnwer | /trashnewb (/tn) to trash **");
				SetPVarInt(playerid, "SendQuestion", 1);
				SetPVarString(playerid, "Question", inputtext);
				SendClientMessage(playerid, COLOR_WHITE, "Your question was successfully submitted, please wait. An helper will reply shortly.");

			}
		}
		case DIALOG_BTRANSFER1:
		{	
			if(response)
	        {
				new  giveplayerid,string[128];
	            if(sscanf(inputtext, "i", giveplayerid))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_BTRANSFER1);
	            }
				/*if(giveplayerid == playerid)
				{
					ShowDialogToPlayer(playerid, PM_END_ID);
					return 1;
				}*/
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
						format(string, sizeof(string), " Enter a amount you want to transfer to message to %s ", GetRPName(giveplayerid));
						ShowDialogToPlayer(playerid, DIALOG_BTRANSFER);
						SetPVarInt(playerid, "banktransfer", giveplayerid);
					}
					else  return ShowDialogToPlayer(playerid, DIALOG_BTRANSFER1);
					return 1;
				}
				else{
					return SendClientMessage(playerid, COLOR_RED, "This Player is offline or disconnected");
				}
			}	
		}
		case DIALOG_BTRANSFER:
	    {
	        if(response)
	        {
	            new giveplayerid = GetPVarInt(playerid, "banktransfer");
				new amount, fee;
	            if(sscanf(inputtext, "i", amount))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_BTRANSFER);
	            }
	            if(amount < 1 || amount > pData[playerid][pBank])
	            {
	                SCM(playerid, COLOR_SYNTAX, "Insufficient amount. Please try again.");
	                ShowDialogToPlayer(playerid, DIALOG_BTRANSFER);
	                return 1;
	            }
	            if(amount > 10000000)
	            {
	                SCM(playerid, COLOR_SYNTAX, "You can't withdraw more than $10,000,000 at a time.");
	                ShowDialogToPlayer(playerid, DIALOG_BTRANSFER);
	                return 1;
	            }
				if(giveplayerid == playerid)
				{
					return SCM(playerid, COLOR_SYNTAX, "You can't pay yourself.");
				}
				if(amount > 1000 && pData[playerid][pLevel] < 2)
				{
					return SCM(playerid, COLOR_SYNTAX, "You can only transder up to $1,000 at a time as a level 1.");
				}
				pData[giveplayerid][pBank] += amount;
				pData[playerid][pBank] -= amount;

	            //if(pData[playerid][pDonator] == 0)
	            //{
	            fee = percent(amount, 3);
				
	            pData[playerid][pBank] -= fee;
	            //}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[giveplayerid][pBank], pData[giveplayerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			
				SM(playerid, COLOR_AQUA, "** You have transferred $%i to %s. Your new balance is $%i.", amount, GetRPName(giveplayerid), pData[playerid][pBank]);
				SM(giveplayerid, COLOR_AQUA, "** %s has transferred $%i to your bank account.", GetRPName(playerid), amount);
				
				if(fee)
				{
				    SM(playerid, COLOR_WHITE, "** A 3 percent convenience fee of $%i was deducted from your bank account.", fee);
				    AddToTaxVault(fee);
	            }
	            //else if(pData[playerid][pDonator] > 0)
	            //{
				//	SCM(playerid, COLOR_VIP, "** Donator perk: You do not pay the 3 percent convenience fee as you are a VIP!");
	            //}
				new szString[528];
				format(szString, sizeof(szString), " %s (IP: %s) has transferred $%i to %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), amount, GetRPName(giveplayerid), GetPlayerIP(giveplayerid));
				SendDiscordMessage(18, szString);
						
	        }
		}
		case DIALOG_BDEPOSIT:
	    {
	        if(response)
	        {
	            new amount, fee;

	            if(sscanf(inputtext, "i", amount))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_BDEPOSIT);
	            }
	            if(amount < 1 || amount > pData[playerid][pCash])
	            {
	                SCM(playerid, COLOR_SYNTAX, "Insufficient amount. Please try again.");
	                ShowDialogToPlayer(playerid, DIALOG_BDEPOSIT);
	                return 1;
	            }
	            if(amount > 10000000)
	            {
	                SCM(playerid, COLOR_SYNTAX, "You can't deposit more than $10,000,000 at a time.");
	                ShowDialogToPlayer(playerid, DIALOG_BDEPOSIT);
	                return 1;
	            }

	            pData[playerid][pBank] += amount;
	            GivePlayerCash(playerid, -amount);
				
	            //if(pData[playerid][pDonator] == 0)
	            //{
	            fee = percent(amount, 3);
				
	            pData[playerid][pCash] -= fee;
	            //

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);
			
				SM(playerid, COLOR_AQUA, "** You have deposited $%i into your bank account. Your new balance is $%i.", amount, pData[playerid][pBank]);

				if(fee)
				{
				    SM(playerid, COLOR_WHITE, "** A 3 percent convenience fee of $%i was deducted from your bank account.", fee);
				    AddToTaxVault(fee);
	            }
	            //else if(pData[playerid][pDonator] > 0)
	            //{
				//	SCM(playerid, COLOR_VIP, "** Donator perk: You do not pay the 3 percent convenience fee as you are a VIP!");
	            //}
	        }
		}		
		case DIALOG_BWITHDRAW:
	    {
	        if(response)
	        {
	            new amount, fee;

	            if(sscanf(inputtext, "i", amount))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_BWITHDRAW);
	            }
	            if(amount < 1 || amount > pData[playerid][pBank])
	            {
	                SCM(playerid, COLOR_SYNTAX, "Insufficient amount. Please try again.");
	                ShowDialogToPlayer(playerid, DIALOG_BWITHDRAW);
	                return 1;
	            }
	            if(amount > 10000000)
	            {
	                SCM(playerid, COLOR_SYNTAX, "You can't withdraw more than $10,000,000 at a time.");
	                ShowDialogToPlayer(playerid, DIALOG_BWITHDRAW);
	                return 1;
	            }

	            pData[playerid][pBank] -= amount;
	            GivePlayerCash(playerid, amount);

	            //if(pData[playerid][pDonator] == 0)
	            //{
	            fee = percent(amount, 3);

	            pData[playerid][pBank] -= fee;
	            //}

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);

	            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button and withdraws some cash from the bank.", GetRPName(playerid));
	            SM(playerid, COLOR_AQUA, "You have withdrawn $%i from your account. Your new balance is $%i.", amount, pData[playerid][pBank]);

				if(fee)
				{
				    SM(playerid, COLOR_WHITE, "** A 3 percent convenience fee of $%i was deducted from your bank account.", fee);
				    AddToTaxVault(fee);
	            }
	            //else if(pData[playerid][pDonator] > 0)
	            //{
				//	SCM(playerid, COLOR_VIP, "** Donator perk: You do not pay the 3 percent convenience fee as you are a VIP!");
	            //}
	        }
		}
    	 case DIALOG_ATM:
	    {
	        if(response)
	        {
	            new amount, fee;

	            if(sscanf(inputtext, "i", amount))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_ATM);
	            }
	            if(amount < 1 || amount > pData[playerid][pBank])
	            {
	                SCM(playerid, COLOR_SYNTAX, "Insufficient amount. Please try again.");
	                ShowDialogToPlayer(playerid, DIALOG_ATM);
	                return 1;
	            }
	            if(amount > 10000000)
	            {
	                SCM(playerid, COLOR_SYNTAX, "You can't withdraw more than $10,000,000 at a time.");
	                ShowDialogToPlayer(playerid, DIALOG_ATM);
	                return 1;
	            }

	            pData[playerid][pBank] -= amount;
	            GivePlayerCash(playerid, amount);

	            //if(pData[playerid][pDonator] == 0)
	            //{
	            fee = percent(amount, 3);

	            pData[playerid][pBank] -= fee;
	            //}

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);

	            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button and withdraws some cash from the ATM.", GetRPName(playerid));
	            SM(playerid, COLOR_AQUA, "You have withdrawn $%i from your account. Your new balance is $%i.", amount, pData[playerid][pBank]);

				if(fee)
				{
				    SM(playerid, COLOR_WHITE, "** A 3 percent convenience fee of $%i was deducted from your bank account.", fee);
				    AddToTaxVault(fee);
	            }
	            //else if(pData[playerid][pDonator] > 0)
	            //{
				//	SCM(playerid, COLOR_VIP, "** Donator perk: You do not pay the 3 percent convenience fee as you are a VIP!");
	            //}
	        }
		}	    
		case DIALOG_ATMDEPOSIT:
		{
			if(response)
	        {
	            new amount, fee;

	            if(sscanf(inputtext, "i", amount))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_ATM);
	            }
	            if(amount < 1 || amount > pData[playerid][pCash])
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Insufficient amount. Please try again.");
	                ShowDialogToPlayer(playerid, DIALOG_ATMDEPOSIT);
	                return 1;
	            }

	            pData[playerid][pBank] += amount;
	            GivePlayerCash(playerid, -amount);

	            if(pData[playerid][pDonator] == 0)
	            {
	                fee = percent(amount, 3);

	                pData[playerid][pBank] -= fee;
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);

	            SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s presses a button and deposits some cash in their bank account.", GetRPName(playerid));
	            SCMf(playerid, COLOR_WHITE, "You have deposited %s into your account. Your new balance is %s.", FormatNumber(amount), FormatNumber(pData[playerid][pBank]));

				if(fee)
				{
				    SCMf(playerid, COLOR_WHITE, "A 3 percent convenience fee of %s was deducted from your bank account.", FormatNumber(fee));
				    AddToTaxVault(fee);
	            }
	            else if(pData[playerid][pDonator] > 0)
	            {
					SendClientMessage(playerid, COLOR_VIP, "DONATOR Perk: You do not pay the 3 percent convenience fee as you are a DONATOR!");
	            }
	        }
		}
	    case DIALOG_ATMWITHDRAW:
	    {
	        if(response)
	        {
	            new amount, fee;

	            if(sscanf(inputtext, "i", amount))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_ATMWITHDRAW);
	            }
	            if(amount < 1 || amount > pData[playerid][pBank])
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Insufficient amount. Please try again.");
	                ShowDialogToPlayer(playerid, DIALOG_ATMWITHDRAW);
	                return 1;
	            }

	            pData[playerid][pBank] -= amount;
	            GivePlayerCash(playerid, amount);

	            if(pData[playerid][pDonator] == 0)
	            {
	                fee = percent(amount, 3);

	                pData[playerid][pBank] -= fee;
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);

	            SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s presses a button and withdraws some cash from the ATM.", GetRPName(playerid));
	            SCMf(playerid, COLOR_WHITE, "You have withdrawn %s from your account. Your new balance is %s.", FormatNumber(amount), FormatNumber(pData[playerid][pBank]));

				if(fee)
				{
				    SCMf(playerid, COLOR_WHITE, "A 3 percent convenience fee of %s was deducted from your bank account.", FormatNumber(fee));
				    AddToTaxVault(fee);
	            }
	            else if(pData[playerid][pDonator] > 0)
	            {
					SendClientMessage(playerid, COLOR_VIP, "DONATOR Perk: You do not pay the 3 percent convenience fee as you are a Donator!");
	            }
	        }
		}
	    case DIALOG_ATM_TRANSFER:
	    {
	        if(response)
	        {
	            new id;

	            if(sscanf(inputtext, "i", id))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
	            }

	            if(!IsPlayerConnected(id))
	            {
	                SendClientMessage(playerid, COLOR_GREY, "That player is not connected.");
	                ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
	                return 1;
	            }
				/*if(!pData[id][pLogged])
				{
	                SendClientMessage(playerid, COLOR_ERROR, "(( That player has not logged in yet ))");
	                ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
	                return 1;
				}*/
				SetPVarInt(playerid, "transfer_id", id);
				ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER2);
	        }
		}
	    case DIALOG_ATM_TRANSFER2:
	    {
	        if(response)
	        {
	            new id = GetPVarInt(playerid, "transfer_id"), amount, fee;

	            if(sscanf(inputtext, "i", amount))
	            {
					return ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER2);
	            }
	            if(amount < 1 || amount > pData[playerid][pBank])
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Insufficient amount. Please try again.");
	                ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER2);
	                return 1;
	            }
				if(!IsPlayerConnected(id))
				{
					DeletePVar(playerid, "transfer_id");
	                SendClientMessage(playerid, COLOR_GREY, "The player that you are trying to transfer the money to has disconnected.");
	                ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
					return 1;
				}
				if(!pData[id][pLogged])
				{
					DeletePVar(playerid, "transfer_id");
	                SendClientMessage(playerid, COLOR_ERROR, "(( That player is not logged in ))");
	                ShowDialogToPlayer(playerid, DIALOG_ATM_TRANSFER);
					return 1;
				}

	            pData[playerid][pBank] -= amount;
	            pData[id][pBank] += amount;

	            if(pData[playerid][pDonator] == 0)
	            {
	                fee = percent(amount, 3);

	                pData[playerid][pBank] -= fee;
	            }

	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[playerid][pBank], pData[playerid][pID]);
	            mysql_tquery(connectionID, queryBuffer);
	            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", pData[id][pBank], pData[id][pID]);
	            mysql_tquery(connectionID, queryBuffer);

				new targetid;
	            SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s presses a button transferring some cash to someone.", GetRPName(playerid));
	            SCMf(playerid, COLOR_WHITE, "You have transferred %s to %s. Your new balance is %s.", FormatNumber(amount), GetRPName(id), FormatNumber(pData[playerid][pBank]));
	            SCMf(targetid, COLOR_WHITE, "%s has transfer %s to your account. Your new balance is %s.", GetRPName(id), FormatNumber(amount), FormatNumber(pData[playerid][pBank]));

	    		SAM(COLOR_YELLOW, "AdmWarning: %s has transferred $%i to %s.", GetRPName(playerid), amount, GetRPName(targetid));
				Log_Write("log_give", "%s (uid: %i) (IP: %s) transferred $%i to %s (uid: %i) (IP: %s)", GetRPName(playerid), pData[playerid][pID], GetPlayerIP(playerid), amount, GetRPName(targetid), pData[targetid][pID], GetPlayerIP(targetid));

				if(fee)
				{
				    SCMf(playerid, COLOR_WHITE, "A 3 percent convenience fee of %s was deducted from your bank account.", FormatNumber(fee));
				    AddToTaxVault(fee);
	            }
	            else if(pData[playerid][pDonator] > 0)
	            {
					SendClientMessage(playerid, COLOR_VIP, "DONATOR Perk: You do not pay the 3 percent convenience fee as you are a Donator!");
	            }
	        }
		}
		
		case DIALOG_CHANGEPASS:
		{
		    if(response)
		    {
		        if(strlen(inputtext) < 4)
		        {
		            return SCM(playerid, COLOR_SYNTAX, "You need to enter a password greater than 4 characters.");
		        }

				new
				    password[129];

				WP_Hash(password, sizeof(password), inputtext);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET password = '%s' WHERE uid = %i", password, pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SCM(playerid, COLOR_WHITE, "** Your account password was changed successfully.");
    		}
		}
		case DIALOG_BUYCLOTHINGTYPE:
		{
		    if(response)
		    {
		        pData[playerid][pMenuType] = listitem;

		        if(listitem == 0)
					ShowClothingSelectionMenu(playerid);
				else
					ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHING);
		    }
		    else
		    {
		        callcmd::buy(playerid, "\1");
			}
		}
		case DIALOG_BUYCLOTHINGTYPE1:
		{
		    if(response)
		    {
		        pData[playerid][pMenuType] = listitem;

		        if(listitem == 0)
					ShowClothingSelectionMenu1(playerid);
				else
					ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHING);
		    }
		    else
		    {
		        callcmd::viptoys(playerid, "\1");
			}
		}
		case DIALOG_BUYCLOTHING:
		{
		    if(response)
		    {
		        PreviewClothing(playerid, listitem + pData[playerid][pClothingIndex]);
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE);
			}
		}
		case DIALOG_BUYCLOTHING1:
		{
		    if(response)
		    {
		        PreviewClothing(playerid, listitem + pData[playerid][pClothingIndex]);
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE1);
			}
		}
		case DIALOG_CLOTHING:
		{
		    if(response)
		    {
		        if(!ClothingInfo[playerid][listitem][cExists])
		        {
		            return SCM(playerid, COLOR_SYNTAX, "The slot you've selected does not contain any item of clothing.");
		        }

		        if(ClothingInfo[playerid][listitem][cAttached]) {
					ShowPlayerDialog(playerid, DIALOG_CLOTHINGMENU, DIALOG_STYLE_LIST, ClothingInfo[playerid][listitem][cName], "Detach\nEdit\nDelete", "Select", "Cancel");
		        } else {
                    ShowPlayerDialog(playerid, DIALOG_CLOTHINGMENU, DIALOG_STYLE_LIST, ClothingInfo[playerid][listitem][cName], "Attach\nEdit\nDelete", "Select", "Cancel");
		        }

		        pData[playerid][pSelected] = listitem;
			}
		}
		case DIALOG_CLOTHINGMENU:
		{
		    if(response)
		    {
		        new clothingid = pData[playerid][pSelected];

		        switch(listitem)
		        {
		            case 0:
		            {
		                if(!ClothingInfo[playerid][clothingid][cAttached])
		                {
		                    ClothingInfo[playerid][clothingid][cAttachedIndex] = GetAvailableAttachedSlot(playerid);

		                    if(ClothingInfo[playerid][clothingid][cAttachedIndex] >= 0)
		                    {
			                    ClothingInfo[playerid][clothingid][cAttached] = 1;

			                    SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX], ClothingInfo[playerid][clothingid][cPosY], ClothingInfo[playerid][clothingid][cPosZ], ClothingInfo[playerid][clothingid][cRotX], ClothingInfo[playerid][clothingid][cRotY], ClothingInfo[playerid][clothingid][cRotZ],
									ClothingInfo[playerid][clothingid][cScaleX], ClothingInfo[playerid][clothingid][cScaleY], ClothingInfo[playerid][clothingid][cScaleZ]);
								SM(playerid, COLOR_WHITE, "** %s attached to slot %i/5.", ClothingInfo[playerid][clothingid][cName], ClothingInfo[playerid][clothingid][cAttachedIndex] + 1);

								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET attached = 1 WHERE id = %i", ClothingInfo[playerid][clothingid][cID]);
								mysql_tquery(connectionID, queryBuffer);
							}
							else
							{
							    SCM(playerid, COLOR_SYNTAX, "No attachment slots available. You can only have up to five clothing items attached at once.");
		                    }
		                }
		                else
		                {
		                    RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
		                    ClothingInfo[playerid][clothingid][cAttached] = 0;
		                    ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;

		                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET attached = 0 WHERE id = %i", ClothingInfo[playerid][clothingid][cID]);
							mysql_tquery(connectionID, queryBuffer);

							SM(playerid, COLOR_WHITE, "** %s detached and added to inventory.", ClothingInfo[playerid][clothingid][cName]);
		                }
		            }
					case 1:
					{
				    	ShowPlayerDialog(playerid, DIALOG_CLOTHINGEDIT, DIALOG_STYLE_LIST, "Edition menu", "Edit offset\nChange bone\nEdit Offset Mobile\ncheckpos", "Select", "Cancel");
					}
					case 2:
					{
				    	RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex]);
				    	SM(playerid, COLOR_WHITE, "** %s deleted from your clothing inventory.", ClothingInfo[playerid][clothingid][cName]);

				    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM clothing WHERE id = %i", ClothingInfo[playerid][clothingid][cID]);
				    	mysql_tquery(connectionID, queryBuffer);

					    ClothingInfo[playerid][clothingid][cAttached] = 0;
			            ClothingInfo[playerid][clothingid][cAttachedIndex] = -1;
					    ClothingInfo[playerid][clothingid][cExists] = 0;
					    ClothingInfo[playerid][clothingid][cID] = 0;
					    ClothingInfo[playerid][clothingid][cName] = 0;
					}
				}
			}
		}
		case DIALOG_CLOTHINGEDIT:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                pData[playerid][pEditType] = EDIT_CLOTHING;

		                if(!ClothingInfo[playerid][pData[playerid][pSelected]][cAttached]) {
		                    SetPlayerAttachedObject(playerid, 9, ClothingInfo[playerid][pData[playerid][pSelected]][cModel], ClothingInfo[playerid][pData[playerid][pSelected]][cBone], ClothingInfo[playerid][pData[playerid][pSelected]][cPosX], ClothingInfo[playerid][pData[playerid][pSelected]][cPosY], ClothingInfo[playerid][pData[playerid][pSelected]][cPosZ],
								ClothingInfo[playerid][pData[playerid][pSelected]][cRotX], ClothingInfo[playerid][pData[playerid][pSelected]][cRotY], ClothingInfo[playerid][pData[playerid][pSelected]][cRotZ], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleX], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleY], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleZ]);

							EditAttachedObject(playerid, 9);
		                }
		                else {
		                    EditAttachedObject(playerid, ClothingInfo[playerid][pData[playerid][pSelected]][cAttachedIndex]);
		                }

		                GameTextForPlayer(playerid, "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel", 5000, 1);
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_CLOTHINGBONE, DIALOG_STYLE_LIST, "Choose a new bone for this clothing item.", "Spine\nHead\nLeft upper arm\nRight upper arm\nLeft hand\nRight hand\nLeft thigh\nRight thigh\nLeft foot\nRight foot\nRight calf\nLeft calf\nLeft forearm\nRight forearm\nLeft shoulder\nRight shoulder\nNeck\nJaw", "Select", "Cancel");
					}
					case 2:
					{
						ShowPlayerDialog(playerid, DIALOG_EDITMOBILE, DIALOG_STYLE_LIST, "Edit Offset", "Offset X\nOffset Y\nOffset Z\nRotation X\nRotation Y\nRotation z\nScale X\nScale Y\nScale Z", "Submit","Cancel");
					}
					case 3:
					{
						new string[2048];
						new clothingid = pData[playerid][pSelected];
						format(string, sizeof(string), "TOYS \tINPUT\n" \
						"Offset X\t%f\n" \
						"Offset Y\t%f\n" \
						"Offset Z\t%f\n" \
						"Rotation X\t%f\n" \
						"Rotation Y\t%f\n" \
						"Rotation Z\t%f\n" \
						"Scale X\t%f\n" \
						"Scale Y\t%f\n" \
						"Scale Z\t%f\n",
						ClothingInfo[playerid][clothingid][cPosX],
						ClothingInfo[playerid][clothingid][cPosY],
						ClothingInfo[playerid][clothingid][cPosZ],
						ClothingInfo[playerid][clothingid][cRotX],
						ClothingInfo[playerid][clothingid][cRotY],
						ClothingInfo[playerid][clothingid][cRotZ],
						ClothingInfo[playerid][clothingid][cScaleX],
						ClothingInfo[playerid][clothingid][cScaleY],
						ClothingInfo[playerid][clothingid][cScaleZ]);
						ShowPlayerDialog(playerid, DIALOG_CHECKPOST, DIALOG_STYLE_TABLIST_HEADERS, "TOYS POSITION", string, "", "Close");
			
					}
				}
			}
		}
		case DIALOG_EDITMOBILE:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, DIALOG_CPOSX, DIALOG_STYLE_INPUT, "Toy Menu: Edit", "Input an X Offset from -100 to 100 (Ex: 55, or 33.4)", "Enter", "Cancel");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_CPOSY, DIALOG_STYLE_INPUT, "Toy Menu: Edit", "Input a Y Offset from -100 to 100 (Ex: 55, or 33.4)", "Enter", "Cancel");
					}
					case 2:
					{
						ShowPlayerDialog(playerid, DIALOG_CPOSZ, DIALOG_STYLE_INPUT, "Toy Menu: Edit", "Input a Z Offset from -100 to 100 (Ex: 55, or 33.4)", "Enter", "Cancel");
					}
					case 3:
					{
						ShowPlayerDialog(playerid, DIALOG_CROTX, DIALOG_STYLE_INPUT, "Toy Menu: Edit", "Input an X Rotation from 0 to 360 (Ex: 90, or 270.4)", "Enter", "Cancel");
					}
					case 4:
					{
						ShowPlayerDialog(playerid, DIALOG_CROTY, DIALOG_STYLE_INPUT, "Toy Menu: Edit", "Input a Y Rotation from 0 to 360 (Ex: 90, or 270.4)", "Enter", "Cancel");
					}
					case 5:
					{
						ShowPlayerDialog(playerid, DIALOG_CROTZ, DIALOG_STYLE_INPUT, "Toy Menu: Edit", "Input a Z Rotation from 0 to 360 (Ex: 90, or 270.4)", "Enter", "Cancel");
					}
					case 6:
					{
						ShowPlayerDialog(playerid, DIALOG_CSCALEX, DIALOG_STYLE_INPUT, "Toy Menu: Edit", "Input an X Scale from 0.1 to 1.5 (Ex: 1, or 0.93)", "Enter", "Cancel");
					}
					case 7:
					{
						ShowPlayerDialog(playerid, DIALOG_CSCALEY, DIALOG_STYLE_INPUT, "Toy Menu: Edit", "Input an Y Scale from 0.1 to 1.5 (Ex: 1, or 0.93)", "Enter", "Cancel");
					}
					case 8:
					{
						ShowPlayerDialog(playerid, DIALOG_CSCALEZ, DIALOG_STYLE_INPUT, "Toy Menu: Edit", "Input an Z Scale from 0.1 to 1.5 (Ex: 1, or 0.93)", "Enter", "Cancel");
					}
				}
			}
		}
		case DIALOG_CPOSX:
		{
	 		if(response)
	 		{
	 			new clothingid = pData[playerid][pSelected];
				new Float:fOffsetX = floatstr(inputtext);

				ClothingInfo[playerid][clothingid][cPosX] = fOffsetX;
				ClothingInfo[playerid][clothingid][cAttached] = 1;
				SetPlayerAttachedObject(playerid, ClothingInfo[playerid][pData[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][pData[playerid][pSelected]][cModel], ClothingInfo[playerid][pData[playerid][pSelected]][cBone], ClothingInfo[playerid][pData[playerid][pSelected]][cPosX], ClothingInfo[playerid][pData[playerid][pSelected]][cPosY], ClothingInfo[playerid][pData[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][pData[playerid][pSelected]][cRotX], ClothingInfo[playerid][pData[playerid][pSelected]][cRotY], ClothingInfo[playerid][pData[playerid][pSelected]][cRotZ], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleX], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleY], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleZ]);
				//SetPlayerAttachedObject(playerid, ClothingInfo[playerid][pData[playerid][pSelected]][cModel], ClothingInfo[playerid][pData[playerid][pSelected]][cBone], ClothingInfo[playerid][pData[playerid][pSelected]][cPosX], ClothingInfo[playerid][pData[playerid][pSelected]][cPosY], ClothingInfo[playerid][pData[playerid][pSelected]][cPosZ], ClothingInfo[playerid][pData[playerid][pSelected]][cRotX], ClothingInfo[playerid][pData[playerid][pSelected]][cRotY], ClothingInfo[playerid][pData[playerid][pSelected]][cRotZ], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleX], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleY], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleZ]);
				//etPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX]);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET pos_x = '%f' WHERE id = %i", fOffsetX, ClothingInfo[playerid][clothingid][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_SYNTAX, "Changes saved.");
				ShowPlayerDialog(playerid, DIALOG_EDITMOBILE, DIALOG_STYLE_LIST, "Edit Offset", "Offset X\nOffset Y\nOffset Z\nRotation X\nRotation Y\nRotation z\nScale X\nScale Y\nScale Z", "Submit","Cancel");
	 		}
		}
		case DIALOG_CPOSY:
		{
	 		if(response)
	 		{
	 			new clothingid = pData[playerid][pSelected];
				new Float:fOffsetY = floatstr(inputtext);

				ClothingInfo[playerid][clothingid][cPosY] = fOffsetY;
				ClothingInfo[playerid][clothingid][cAttached] = 1;
				SetPlayerAttachedObject(playerid, ClothingInfo[playerid][pData[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][pData[playerid][pSelected]][cModel], ClothingInfo[playerid][pData[playerid][pSelected]][cBone], ClothingInfo[playerid][pData[playerid][pSelected]][cPosX], ClothingInfo[playerid][pData[playerid][pSelected]][cPosY], ClothingInfo[playerid][pData[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][pData[playerid][pSelected]][cRotX], ClothingInfo[playerid][pData[playerid][pSelected]][cRotY], ClothingInfo[playerid][pData[playerid][pSelected]][cRotZ], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleX], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleY], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleZ]);
				//SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX]);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET pos_y = '%f' WHERE id = %i", fOffsetY, ClothingInfo[playerid][clothingid][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_SYNTAX, "Changes saved.");
				ShowPlayerDialog(playerid, DIALOG_EDITMOBILE, DIALOG_STYLE_LIST, "Edit Offset", "Offset X\nOffset Y\nOffset Z\nRotation X\nRotation Y\nRotation z\nScale X\nScale Y\nScale Z", "Submit","Cancel");
	 		}
		}
		case DIALOG_CPOSZ:
		{
	 		if(response)
	 		{
	 			new clothingid = pData[playerid][pSelected];
				new Float:fOffsetZ = floatstr(inputtext);

				ClothingInfo[playerid][clothingid][cPosZ] = fOffsetZ;
				ClothingInfo[playerid][clothingid][cAttached] = 1;

				SetPlayerAttachedObject(playerid, ClothingInfo[playerid][pData[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][pData[playerid][pSelected]][cModel], ClothingInfo[playerid][pData[playerid][pSelected]][cBone], ClothingInfo[playerid][pData[playerid][pSelected]][cPosX], ClothingInfo[playerid][pData[playerid][pSelected]][cPosY], ClothingInfo[playerid][pData[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][pData[playerid][pSelected]][cRotX], ClothingInfo[playerid][pData[playerid][pSelected]][cRotY], ClothingInfo[playerid][pData[playerid][pSelected]][cRotZ], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleX], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleY], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleZ]);
				//SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX]);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET pos_Z = '%f' WHERE id = %i", fOffsetZ, ClothingInfo[playerid][clothingid][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_SYNTAX, "Changes saved.");
				ShowPlayerDialog(playerid, DIALOG_EDITMOBILE, DIALOG_STYLE_LIST, "Edit Offset", "Offset X\nOffset Y\nOffset Z\nRotation X\nRotation Y\nRotation z\nScale X\nScale Y\nScale Z", "Submit","Cancel");
	 		}
		}
		case DIALOG_CROTX:
		{
	 		if(response)
	 		{
	 			new clothingid = pData[playerid][pSelected];
				new Float:fRotX = floatstr(inputtext);

				ClothingInfo[playerid][clothingid][cRotX] = fRotX;
				ClothingInfo[playerid][clothingid][cAttached] = 1;

				SetPlayerAttachedObject(playerid, ClothingInfo[playerid][pData[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][pData[playerid][pSelected]][cModel], ClothingInfo[playerid][pData[playerid][pSelected]][cBone], ClothingInfo[playerid][pData[playerid][pSelected]][cPosX], ClothingInfo[playerid][pData[playerid][pSelected]][cPosY], ClothingInfo[playerid][pData[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][pData[playerid][pSelected]][cRotX], ClothingInfo[playerid][pData[playerid][pSelected]][cRotY], ClothingInfo[playerid][pData[playerid][pSelected]][cRotZ], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleX], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleY], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleZ]);
				//SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX]);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET rot_x = '%f' WHERE id = %i", fRotX, ClothingInfo[playerid][clothingid][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_SYNTAX, "Changes saved.");
				ShowPlayerDialog(playerid, DIALOG_EDITMOBILE, DIALOG_STYLE_LIST, "Edit Offset", "Offset X\nOffset Y\nOffset Z\nRotation X\nRotation Y\nRotation z\nScale X\nScale Y\nScale Z", "Submit","Cancel");
	 		}
		}
		case DIALOG_CROTY:
		{
	 		if(response)
	 		{
	 			new clothingid = pData[playerid][pSelected];
				new Float:fRotY = floatstr(inputtext);

				ClothingInfo[playerid][clothingid][cRotY] = fRotY;
				ClothingInfo[playerid][clothingid][cAttached] = 1;

				SetPlayerAttachedObject(playerid, ClothingInfo[playerid][pData[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][pData[playerid][pSelected]][cModel], ClothingInfo[playerid][pData[playerid][pSelected]][cBone], ClothingInfo[playerid][pData[playerid][pSelected]][cPosX], ClothingInfo[playerid][pData[playerid][pSelected]][cPosY], ClothingInfo[playerid][pData[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][pData[playerid][pSelected]][cRotX], ClothingInfo[playerid][pData[playerid][pSelected]][cRotY], ClothingInfo[playerid][pData[playerid][pSelected]][cRotZ], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleX], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleY], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleZ]);
				//SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX]);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET rot_y = '%f' WHERE id = %i", fRotY, ClothingInfo[playerid][clothingid][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_SYNTAX, "Changes saved.");
				ShowPlayerDialog(playerid, DIALOG_EDITMOBILE, DIALOG_STYLE_LIST, "Edit Offset", "Offset X\nOffset Y\nOffset Z\nRotation X\nRotation Y\nRotation z\nScale X\nScale Y\nScale Z", "Submit","Cancel");
	 		}
		}
		case DIALOG_CROTZ:
		{
	 		if(response)
	 		{
	 			new clothingid = pData[playerid][pSelected];
				new Float:fRotZ = floatstr(inputtext);

				ClothingInfo[playerid][clothingid][cRotZ] = fRotZ;
				ClothingInfo[playerid][clothingid][cAttached] = 1;

				SetPlayerAttachedObject(playerid, ClothingInfo[playerid][pData[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][pData[playerid][pSelected]][cModel], ClothingInfo[playerid][pData[playerid][pSelected]][cBone], ClothingInfo[playerid][pData[playerid][pSelected]][cPosX], ClothingInfo[playerid][pData[playerid][pSelected]][cPosY], ClothingInfo[playerid][pData[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][pData[playerid][pSelected]][cRotX], ClothingInfo[playerid][pData[playerid][pSelected]][cRotY], ClothingInfo[playerid][pData[playerid][pSelected]][cRotZ], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleX], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleY], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleZ]);
				//SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX]);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET rot_z = '%f' WHERE id = %i", fRotZ, ClothingInfo[playerid][clothingid][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_SYNTAX, "Changes saved.");
				ShowPlayerDialog(playerid, DIALOG_EDITMOBILE, DIALOG_STYLE_LIST, "Edit Offset", "Offset X\nOffset Y\nOffset Z\nRotation X\nRotation Y\nRotation z\nScale X\nScale Y\nScale Z", "Submit","Cancel");
	 		}
		}
		case DIALOG_CSCALEX:
		{
	 		if(response)
	 		{
	 			new clothingid = pData[playerid][pSelected];
				new Float:fScaleX = floatstr(inputtext);

				ClothingInfo[playerid][clothingid][cScaleX] = fScaleX;
				ClothingInfo[playerid][clothingid][cAttached] = 1;

				SetPlayerAttachedObject(playerid, ClothingInfo[playerid][pData[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][pData[playerid][pSelected]][cModel], ClothingInfo[playerid][pData[playerid][pSelected]][cBone], ClothingInfo[playerid][pData[playerid][pSelected]][cPosX], ClothingInfo[playerid][pData[playerid][pSelected]][cPosY], ClothingInfo[playerid][pData[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][pData[playerid][pSelected]][cRotX], ClothingInfo[playerid][pData[playerid][pSelected]][cRotY], ClothingInfo[playerid][pData[playerid][pSelected]][cRotZ], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleX], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleY], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleZ]);
				//SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX]);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET scale_x = '%f' WHERE id = %i", fScaleX, ClothingInfo[playerid][clothingid][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_SYNTAX, "Changes saved.");
				ShowPlayerDialog(playerid, DIALOG_EDITMOBILE, DIALOG_STYLE_LIST, "Edit Offset", "Offset X\nOffset Y\nOffset Z\nRotation X\nRotation Y\nRotation z\nScale X\nScale Y\nScale Z", "Submit","Cancel");
	 		}
		}
		case DIALOG_CSCALEY:
		{
	 		if(response)
	 		{
	 			new clothingid = pData[playerid][pSelected];
				new Float:fScaleY = floatstr(inputtext);

				ClothingInfo[playerid][clothingid][cScaleY] = fScaleY;
				ClothingInfo[playerid][clothingid][cAttached] = 1;

				SetPlayerAttachedObject(playerid, ClothingInfo[playerid][pData[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][pData[playerid][pSelected]][cModel], ClothingInfo[playerid][pData[playerid][pSelected]][cBone], ClothingInfo[playerid][pData[playerid][pSelected]][cPosX], ClothingInfo[playerid][pData[playerid][pSelected]][cPosY], ClothingInfo[playerid][pData[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][pData[playerid][pSelected]][cRotX], ClothingInfo[playerid][pData[playerid][pSelected]][cRotY], ClothingInfo[playerid][pData[playerid][pSelected]][cRotZ], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleX], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleY], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleZ]);
				//SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX]);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET scale_y = '%f' WHERE id = %i", fScaleY, ClothingInfo[playerid][clothingid][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_SYNTAX, "Changes saved.");
				ShowPlayerDialog(playerid, DIALOG_EDITMOBILE, DIALOG_STYLE_LIST, "Edit Offset", "Offset X\nOffset Y\nOffset Z\nRotation X\nRotation Y\nRotation z\nScale X\nScale Y\nScale Z", "Submit","Cancel");
	 		}
		}
		case DIALOG_CSCALEZ:
		{
	 		if(response)
	 		{
	 			new clothingid = pData[playerid][pSelected];
				new Float:fScaleZ = floatstr(inputtext);

				ClothingInfo[playerid][clothingid][cScaleZ] = fScaleZ;
				ClothingInfo[playerid][clothingid][cAttached] = 1;

				SetPlayerAttachedObject(playerid, ClothingInfo[playerid][pData[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][pData[playerid][pSelected]][cModel], ClothingInfo[playerid][pData[playerid][pSelected]][cBone], ClothingInfo[playerid][pData[playerid][pSelected]][cPosX], ClothingInfo[playerid][pData[playerid][pSelected]][cPosY], ClothingInfo[playerid][pData[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][pData[playerid][pSelected]][cRotX], ClothingInfo[playerid][pData[playerid][pSelected]][cRotY], ClothingInfo[playerid][pData[playerid][pSelected]][cRotZ], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleX], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleY], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleZ]);
				//SetPlayerAttachedObject(playerid, ClothingInfo[playerid][clothingid][cAttachedIndex], ClothingInfo[playerid][clothingid][cModel], ClothingInfo[playerid][clothingid][cBone], ClothingInfo[playerid][clothingid][cPosX]);
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET scale_z = '%f' WHERE id = %i", fScaleZ, ClothingInfo[playerid][clothingid][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_SYNTAX, "Changes saved.");
				ShowPlayerDialog(playerid, DIALOG_EDITMOBILE, DIALOG_STYLE_LIST, "Edit Offset", "Offset X\nOffset Y\nOffset Z\nRotation X\nRotation Y\nRotation z\nScale X\nScale Y\nScale Z", "Submit","Cancel");
	 		}
		}
		case DIALOG_CLOTHINGBONE:
		{
		    if(response)
		    {
		        ClothingInfo[playerid][pData[playerid][pSelected]][cBone] = listitem + 1;

		        if(ClothingInfo[playerid][pData[playerid][pSelected]][cAttached])
		        {
		            RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][pData[playerid][pSelected]][cAttachedIndex]);
		            SetPlayerAttachedObject(playerid, ClothingInfo[playerid][pData[playerid][pSelected]][cAttachedIndex], ClothingInfo[playerid][pData[playerid][pSelected]][cModel], ClothingInfo[playerid][pData[playerid][pSelected]][cBone], ClothingInfo[playerid][pData[playerid][pSelected]][cPosX], ClothingInfo[playerid][pData[playerid][pSelected]][cPosY], ClothingInfo[playerid][pData[playerid][pSelected]][cPosZ],
		                ClothingInfo[playerid][pData[playerid][pSelected]][cRotX], ClothingInfo[playerid][pData[playerid][pSelected]][cRotY], ClothingInfo[playerid][pData[playerid][pSelected]][cRotZ], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleX], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleY], ClothingInfo[playerid][pData[playerid][pSelected]][cScaleZ]);
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE clothing SET boneid = %i WHERE id = %i", ClothingInfo[playerid][pData[playerid][pSelected]][cBone], ClothingInfo[playerid][pData[playerid][pSelected]][cID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_WHITE, "** Bone for "SVRCLR"%s"WHITE" changed to '%s'.", ClothingInfo[playerid][pData[playerid][pSelected]][cName], inputtext);
		    }
		}
		case DIALOG_BUYVEHICLE:
		{
		    if(response)
		    {
		        if(pData[playerid][pCash] < vehicleArray[listitem][cARPrice])
		        {
		            return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this vehicle.");
		        }

		        new
		            string[128];

		        pData[playerid][pSelected] = listitem;

				format(string, sizeof(string), "{FFD700}Confirmation:\nAre you sure you want to purchase this %s for "SVRCLR"$%i{FFD700}?", vehicleNames[vehicleArray[listitem][carModel] - 400], vehicleArray[listitem][cARPrice]);
				ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE2, DIALOG_STYLE_MSGBOX, "Purchase confirmation", string, "Yes", "No");
			}
		}
		case DIALOG_BUYVEHICLE2:
		{
		    if(response)
		    {
		        if(pData[playerid][pGangCar])
		        {
		            new
		                string[20];

		            listitem = pData[playerid][pSelected];

		            if(pData[playerid][pCash] < vehicleArray[listitem][cARPrice])
			        {
			            return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this vehicle.");
			        }
			        if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
					{
					    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
					}
					if(GetGangVehicles(pData[playerid][pGang]) >= GetGangVehicleLimit(pData[playerid][pGang]))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your gang can't have more than %i vehicles at its level.", GetGangVehicleLimit(pData[playerid][pGang]));
				    }

		            new
						Float:x,
						Float:y,
						Float:z,
						Float:angle;

					if(IsPlayerInRangeOfPoint(playerid, 3.0, 598.6463,-1509.9424,15.3790))
					{
						switch(random(3))
			    	    {
			        	    case 0: x = 562.3970, y = -1283.8485, z = 17.0007, angle = 0.0000;
			            	case 1: x = 557.8670, y = -1283.9822, z = 17.0007, angle = 0.0000;
			            	case 2: x = 552.8177, y = -1284.1307, z = 17.0007, angle = 0.0000;
						}
					}
					else if(IsPlayerInRangeOfPoint(playerid, 3.0, 154.2223, -1946.3030, 5.1920))
					{
					    switch(random(4))
			    	    {
			        	    case 0: x = 138.0530, y = -1828.8923, z = -0.4000, angle = 90.0000;
			            	case 1: x = 138.0067, y = -1819.7065, z = -0.4000, angle = 90.0000;
			            	case 2: x = 137.9428, y = -1810.7821, z = -0.4000, angle = 90.0000;
			            	case 3: x = 137.0448, y = -1801.4567, z = -0.4000, angle = 90.0000;
						}
					}
					else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1892.6315, -2328.6721, 13.5469))
					{
					    switch(random(3))
			    	    {
			        	    case 0: x = 1806.3048, y = -2424.4480, z = 15.0087, angle = 180.0000;
			            	case 1: x = 1847.3726, y = -2428.7100, z = 15.0087, angle = 180.0000;
			            	case 2: x = 1891.6610, y = -2433.3047, z = 15.0087, angle = 180.0000;
						}
					}

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (modelid, price, pos_x, pos_y, pos_z, pos_a, gangid, respawndelay) VALUES(%i, %i, '%f', '%f', '%f', '%f', %i, 600)", vehicleArray[listitem][carModel], vehicleArray[listitem][cARPrice], x, y, z, angle, pData[playerid][pGang]);
					mysql_tquery(connectionID, queryBuffer);

                    AddPointMoney(POINT_AUTOEXPORT, percent(vehicleArray[listitem][cARPrice], 3));
			        mysql_tquery(connectionID, "SELECT * FROM vehicles WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);

			        format(string, sizeof(string), "~r~-$%i", vehicleArray[listitem][cARPrice]);
		    	    GameTextForPlayer(playerid, string, 5000, 1);

					GivePlayerCash(playerid, -vehicleArray[listitem][cARPrice]);
					pData[playerid][pGangCar] = 0;

			        SM(playerid, COLOR_GREEN, "%s purchased for your gang for $%i. /ganghelp for more commands.", vehicleNames[vehicleArray[listitem][carModel] - 400], vehicleArray[listitem][cARPrice]);
		    	    Log_Write("log_give", "%s (uid: %i) purchased a %s for %s for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], vehicleNames[vehicleArray[listitem][carModel] - 400], GangInfo[pData[playerid][pGang]][gName], vehicleArray[listitem][cARPrice]);
		        }
		        else
		        {
			        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM vehicles WHERE ownerid = %i", pData[playerid][pID]);
			        mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptBuyVehicle", "ii", playerid, pData[playerid][pSelected]);
				}
			}
		}
  		case DIALOG_SPAWNCAR:
		{
		    if(response)
		    {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE ownerid = %i LIMIT %i, 1", pData[playerid][pID], listitem);
				mysql_tquery(connectionID, queryBuffer, "OnPlayerSpawnVehicle", "ii", playerid, false);
		    }
		}
		case DIALOG_DESPAWNCAR:
		{
		    if(response)
		    {
		        new count;
		        for(new i = 1; i < MAX_VEHICLES; i ++)
			 	{
			 	    if((VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i)) && (count++ == listitem))
			 	    {
			 	        if(IsVehicleOccupied(i) && GetVehicleDriver(i) != playerid)
			 	        {
			 	            return SCM(playerid, COLOR_SYNTAX, "This vehicle is occupied.");
			 	        }

			 	        SM(playerid, COLOR_AQUA, "Your "SVRCLR"%s{CCFFFF} which is located in %s has been despawned.", GetVehicleName(i), GetVehicleZoneName(i));
            			DespawnVehicle(i);
            			return 1;
			 	    }
		        }
		    }
		}
		case DIALOG_FINDCAR:
		{
		    if(response)
		    {
		        new count, garageid;

		        for(new i = 1; i < MAX_VEHICLES; i ++)
			 	{
			 	    if((VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i)) && (count++ == listitem))
			 	    {
                        pData[playerid][pCP] = CHECKPOINT_MISC;

			            if((garageid = GetVehicleGarage(i)) >= 1)
			            {
			                SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
			                SM(playerid, COLOR_YELLOW, "** Your %s is located in a garage. Checkpoint marked at the garage's location.", GetVehicleName(i));
			            }
			            else
			            {
			                new
			                    Float:x,
			                    Float:y,
			                    Float:z;

			                GetVehiclePos(i, x, y, z);
			                SetPlayerCheckpoint(playerid, x, y, z, 3.0);
			                SM(playerid, COLOR_YELLOW, "** Your %s is located in %s. Checkpoint marked at the location.", GetVehicleName(i), GetZoneName(x, y, z));
			            }

			            return 1;
		            }
				}
			}
		}
		case DIALOG_BIZINTERIOR:
		{
		    if(response)
		    {
		        new businessid = pData[playerid][pSelected];

		        foreach(new i : Player)
		        {
		            if(GetInsideBusiness(i) == businessid)
		            {
						SetPlayerPos(i, bizInteriorArray[listitem][intX], bizInteriorArray[listitem][intY], bizInteriorArray[listitem][intZ]);
						SetPlayerFacingAngle(i, bizInteriorArray[listitem][intA]);
						SetPlayerInterior(i, bizInteriorArray[listitem][intID]);
						SetCameraBehindPlayer(i);
		            }
		        }

                BusinessInfo[businessid][bIntX] = bizInteriorArray[listitem][intX];
                BusinessInfo[businessid][bIntY] = bizInteriorArray[listitem][intY];
                BusinessInfo[businessid][bIntZ] = bizInteriorArray[listitem][intZ];
                BusinessInfo[businessid][bIntA] = bizInteriorArray[listitem][intA];
			    BusinessInfo[businessid][bInterior] = bizInteriorArray[listitem][intID];

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bID]);
			    mysql_tquery(connectionID, queryBuffer);

				ReloadBusiness(businessid);
			    SM(playerid, COLOR_AQUA, "You've changed the interior of business %i to %s.", businessid, bizInteriorArray[listitem][intName]);
		    }
		}
		case DIALOG_FACTIONLOCKER:
		{
			if((response) && pData[playerid][pFaction] >= 0 && IsPlayerInRangeOfLocker(playerid, pData[playerid][pFaction]))
			{
				switch(FactionInfo[pData[playerid][pFaction]][fType])
				{
					case FACTION_POLICE, FACTION_SHERIFF, FACTION_MEDIC, FACTION_FEDERAL, FACTION_TACO:
					{
					    if(listitem == 0) // Toggle duty
					    {
					        if(!pData[playerid][pDuty])
					        {
					            if(IsLawEnforcement(playerid))
					            {
					                SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s clocks in and grabs their police issued equipment from the locker.", GetRPName(playerid));
								}
								else if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_MEDIC)
					            {
					                SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s clocks in and grabs their medical supplies from the locker.", GetRPName(playerid));
								}
								else if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_TACO)
								{
									SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s clocks in and grabs their equipment and recipe's to cook.", GetRPName(playerid));
								}
							    foreach(new i : Player)
								{
							        if(pData[playerid][pLogged])
									{
							   			SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
									}
							    }
                                pData[playerid][pDuty] = 1;
								SetPlayerHealth(playerid, 100.0);
								SetScriptArmour(playerid, 100.0);
							}
							else
							{
					    		foreach(new i : Player)
								{
							        if(pData[playerid][pLogged])
									{
							    		SetPlayerMarkerForPlayer(i, playerid, 0xFF0000FF);
									}
							    }
							    pData[playerid][pDuty] = 0;
							    ResetPlayerWeaponsEx(playerid);

							    SetScriptArmour(playerid, 0.0);
								SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s clocks out and puts their equipment back in the locker.", GetRPName(playerid));
							}
						}
						else if(listitem == 1) // Equipment
						{
		    				if(IsLawEnforcement(playerid))
		    				{
						    	ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nMedkit\nNitestick\nSpraycan\nDesert Eagle\nShotgun\nMP5\nM4\nSPAS-12\nSniper\nTeargas\nBandage\nCamera", "Select", "Cancel");
							}
							else if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_TACO)
							{
								ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nEmpty Can", "Select", "Cancel");
							}
							else
							{
							    ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nFirstaid\nFire Extinguisher\nShotgun\nPainkillers\nBandage\nMedkit", "Select", "Cancel");
							}
						}
						else if(listitem == 2) // Uniforms
						{
						    if(!GetFactionSkinCount(pData[playerid][pFaction]))
						    {
						        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} There are no uniforms setup for your faction.");
							}
							if(pData[playerid][pClothes] >= 0)
							{
							    pData[playerid][pSkin] = pData[playerid][pClothes];
							    pData[playerid][pClothes] = -1;

							    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = -1 WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
							    mysql_tquery(connectionID, queryBuffer);

							    SetPlayerSkin(playerid, pData[playerid][pSkin]);
							    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s switches back to their old outfit.", GetRPName(playerid));
							}
							else
							{
	                            pData[playerid][pSkinSelected] = -1;
							    ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press {00AA00}>> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
							}
						}
						else if(listitem == 3 && FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MEDIC)
						{
							ShowCopClothingMenu(playerid);
						}
					}
					case FACTION_GOVERNMENT, FACTION_NEWS:
					{
					    if(listitem == 0) // Equipment
					    {
					        if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_GOVERNMENT)
          					{
          					    ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nMedkit\nDesert Eagle\nShotgun\nMP5\nM4", "Select", "Cancel");
							}
							else
							{
							    ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nMedkit\nCamera", "Select", "Cancel");
							}
						}
						else if(listitem == 1) // Uniforms
						{
						    if(!GetFactionSkinCount(pData[playerid][pFaction]))
						    {
						        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} There are no uniforms setup for your faction.");
							}
							if(pData[playerid][pClothes] >= 0)
							{
							    pData[playerid][pSkin] = pData[playerid][pClothes];
							    pData[playerid][pClothes] = -1;

							    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = -1 WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
							    mysql_tquery(connectionID, queryBuffer);

							    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s switches back to their old outfit.", GetRPName(playerid));
							}
							else
							{
							    pData[playerid][pSkinSelected] = -1;
						    	ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press {00AA00}>> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
							}
						}
      					else if(listitem == 2)
						{
							ShowCopClothingMenu(playerid);
						}
					}
					case FACTION_DOC:
					{
					    if(listitem == 0) // Equipment
					    {
					        if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_DOC)
          					{
						    	ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nMedkit\nNitestick\nSpraycan\nDesert Eagle\nShotgun\nMP5\nM4\nSPAS-12\nSniper\nSmoke Grenade\nBandage", "Select", "Cancel");
							}
						}
						else if(listitem == 1) // Uniforms
						{
						    if(!GetFactionSkinCount(pData[playerid][pFaction]))
						    {
						        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} There are no uniforms setup for your faction.");
							}
							if(pData[playerid][pClothes] >= 0)
							{
							    pData[playerid][pSkin] = pData[playerid][pClothes];
							    pData[playerid][pClothes] = -1;

							    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = -1 WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
							    mysql_tquery(connectionID, queryBuffer);

							    SetPlayerSkin(playerid, pData[playerid][pSkin]);
							    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s switches back to their old outfit.", GetRPName(playerid));
							}
							else
							{
	                            pData[playerid][pSkinSelected] = -1;
							    ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press {00AA00}>> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
							}
						}
      					else if(listitem == 2)
						{
							ShowCopClothingMenu(playerid);
						}
					}
					case FACTION_MECHANIC:
					{
						if(listitem == 0) // Toggle duty
						{
							if(!pData[playerid][pDuty])
							{
								ShowActionBubble(playerid, "* %s clocks in and grabs their equipment from the locker.", GetRPName(playerid));
					    		foreach(new i : Player)
								{
							        if(pData[playerid][pLogged])
									{
							    		SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
									}
							    }
								pData[playerid][pDuty] = 1;
								pData[playerid][pWalkieTalkie] = 1;

								foreach(new i : Player) {
									SCMf(i, COLOR_GREEN, "Mechanic %s is now on duty.", GetRPName(playerid));
								}

								SetPlayerHealth(playerid, 100.0);
								//SetScriptArmour(playerid, 100.0);
							}
							else
							{
					    		foreach(new i : Player)
								{
							        if(pData[playerid][pLogged])
									{
							    		SetPlayerMarkerForPlayer(i, playerid, 0xFF0000FF);
									}
							    }
								pData[playerid][pDuty] = 0;
								//ResetPlayerWeaponsEx(playerid);

								foreach(new i : Player) {
									SCMf(i, COLOR_YELLOW, "Mechanic %s is now off duty.", GetRPName(playerid));
								}

								//SetScriptArmour(playerid, 0.0);
								ShowActionBubble(playerid, "* %s clocks out and puts their equipment back in the locker.", GetRPName(playerid));
							}
						}
					    if(listitem == 1) // Equipment
					    {
					        if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_MECHANIC)
          					{
          					    ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Equipment", "Firstaid Kite\nKevlar Vest\nSpraycan\nFuelCan\nRepairkit", "Select", "Cancel");
							}
						}
						else if(listitem == 2) // Uniforms
						{
						    if(!GetFactionSkinCount(pData[playerid][pFaction]))
						    {
						        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} There are no uniforms setup for your faction.");
							}
							if(pData[playerid][pClothes] >= 0)
							{
							    pData[playerid][pSkin] = pData[playerid][pClothes];
							    pData[playerid][pClothes] = -1;

							    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = -1 WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
							    mysql_tquery(connectionID, queryBuffer);

							    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s switches back to their old outfit.", GetRPName(playerid));
							}
							else
							{
							    pData[playerid][pSkinSelected] = -1;
						    	ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press {00AA00}>> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
							}
						}
					}
					case FACTION_HITMAN:
					{
					    if(listitem == 0) // Order weapons
					    {
					        ShowPlayerDialog(playerid, DIALOG_FACTIONEQUIPMENT, DIALOG_STYLE_LIST, "Order weapons", "Kevlar Vest ($100)\nSilenced pistol ($100)\nShotgun ($150)\nDesert Eagle ($200)\nMP5 ($250)\nCountry rifle ($400)\nAK-47 ($600)\nM4 ($800)\nSniper rifle ($900)\nBomb ($750)", "Order", "Cancel");
						}
						else if(listitem == 1) // Change clothes
						{
						    ShowPlayerDialog(playerid, DIALOG_HITMANCLOTHES, DIALOG_STYLE_INPUT, "Change clothes", "Please input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.net/wiki/Skins:All ))", "Submit", "Cancel");
						}
					}
		        }
		    }
		}
		case DIALOG_FACTIONEQUIPMENT:
		{
		    if((response) && pData[playerid][pFaction] >= 0 && IsPlayerInRangeOfLocker(playerid, pData[playerid][pFaction]))
		    {	
				if(pData[playerid][pDuty] == 0)
				{
					return SCM(playerid, COLOR_ERROR, "[ERROR] You need to go duty before getting a gun");
				}
				switch(FactionInfo[pData[playerid][pFaction]][fType])
				{
					case FACTION_TACO:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
							case 1:
					        {
								pData[playerid][pEmptyCan] += 10;
								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET emptycan = %i WHERE uid = %i", pData[playerid][pEmptyCan], pData[playerid][pID]);
		                        mysql_tquery(connectionID, queryBuffer);
								SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gets a 10 emptycan(s) from the locker.", GetRPName(playerid));
							}
						}
					}
					case FACTION_POLICE,FACTION_SHERIFF, FACTION_FEDERAL:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
					        }
					        case 2:
					        {
                                GiveWeapon(playerid, 3);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a nitestick from the locker.", GetRPName(playerid));
					        }
					        case 3:
					        {
                                GiveWeapon(playerid, 41);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a can of pepper spray from the locker.", GetRPName(playerid));
					        }
					        case 4:
					        {
								GiveWeapon(playerid, 24);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Desert Eagle from the locker.", GetRPName(playerid));
					        }
					        case 5:
					        {
					            GiveWeapon(playerid, 25);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Shotgun from the locker.", GetRPName(playerid));
					        }
					        case 6:
					        {
					            GiveWeapon(playerid, 29);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs an MP5 from the locker.", GetRPName(playerid));
					        }
					        case 7:
					        {
					            GiveWeapon(playerid, 31);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs an M4 from the locker.", GetRPName(playerid));
					        }
					        case 8:
					        {
					            GiveWeapon(playerid, 27);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a SPAS-12 from the locker.", GetRPName(playerid));
							}
							case 9:
							{
								SCM(playerid, COLOR_SYNTAX, "Teargas is temporary disabled");
								//GiveWeapon(playerid, 34);
					            //SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Sniper from the locker.", GetRPName(playerid));
							}
							case 10:
							{
								SCM(playerid, COLOR_SYNTAX, "Teargas is temporary disabled");
     							//GiveWeapon(playerid, 17);
					            //SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Teargas from the locker.", GetRPName(playerid));
							}
     						case 11:
							{
     							GiveWeapon(playerid, 43);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a camera from the locker.", GetRPName(playerid));
							}
						}
					}
					case FACTION_MEDIC:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 75.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
					        }
					        case 2:
					        {
                                GiveWeapon(playerid, 42);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a fire extinguisher from the locker.", GetRPName(playerid));
					        }
					        case 3:
					        {
                 				GiveWeapon(playerid, 25);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Shotgun from the locker.", GetRPName(playerid));
					        }
					        case 4:
					        {
					            pData[playerid][pPainkillers] = 5;
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a five pack of painkillers from the locker.", GetRPName(playerid));

					            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
					            mysql_tquery(connectionID, queryBuffer);
					        }
					        case 5:
					        {
					        	if(pData[playerid][pBandage] >= 10)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 bandage.");
							    }
					            pData[playerid][pBandage] += 10;
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a bandage from the locker.", GetRPName(playerid));

					            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bandage = %i WHERE uid = %i", pData[playerid][pBandage], pData[playerid][pID]);
					            mysql_tquery(connectionID, queryBuffer);
					        }
					        case 6:
					        {
					        	if(pData[playerid][pMedkit] >= 10)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 medkit.");
							    }
					            pData[playerid][pMedkit] += 10;
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a medkit from the locker.", GetRPName(playerid));

					            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[playerid][pMedkit], pData[playerid][pID]);
					            mysql_tquery(connectionID, queryBuffer);
					        }
						}
					}
					case FACTION_DOC:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
					        }
					        case 2:
					        {
                                GiveWeapon(playerid, 3);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a nitestick from the locker.", GetRPName(playerid));
					        }
					        case 3:
					        {
                                GiveWeapon(playerid, 41);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a can of pepper spray from the locker.", GetRPName(playerid));
					        }
					        case 4:
					        {
								GiveWeapon(playerid, 24);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Desert Eagle from the locker.", GetRPName(playerid));
					        }
					        case 5:
					        {
					            GiveWeapon(playerid, 25);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Shotgun from the locker.", GetRPName(playerid));
					        }
					        case 6:
					        {
					            GiveWeapon(playerid, 29);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs an MP5 from the locker.", GetRPName(playerid));
					        }
					        case 7:
					        {
					            GiveWeapon(playerid, 31);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs an M4 from the locker.", GetRPName(playerid));
					        }
					        case 8:
					        {
					            GiveWeapon(playerid, 27);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a SPAS-12 from the locker.", GetRPName(playerid));
							}
							case 9:
							{
								SCM(playerid, COLOR_SYNTAX, "Sniper is temporary disabled");
					            //GiveWeapon(playerid, 34);
					            //SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Sniper from the locker.", GetRPName(playerid));
							}
							case 10:
							{
     							GiveWeapon(playerid, 17);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Smoke Grenade from the locker.", GetRPName(playerid));
							}
						}
					}
					case FACTION_GOVERNMENT:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 75.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
					        }
					        case 2:
					        {
					            GiveWeapon(playerid, 24);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Desert Eagle from the locker.", GetRPName(playerid));
					        }
					        case 3:
					        {
					            GiveWeapon(playerid, 25);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a Shotgun from the locker.", GetRPName(playerid));
					        }
					        case 4:
					        {
					            GiveWeapon(playerid, 29);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs an MP5 from the locker.", GetRPName(playerid));
					        }
					        case 5:
					        {
					            GiveWeapon(playerid, 31);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs an M4 from the locker.", GetRPName(playerid));
					        }
					    }
					}
					case FACTION_NEWS:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetScriptArmour(playerid, 75.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
					        }
					        case 2:
					        {
					            GiveWeapon(playerid, 43);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a digital camera from the locker.", GetRPName(playerid));
					        }
					    }
					}
					case FACTION_MECHANIC:
					{
					    switch(listitem)
					    {
					        case 0:
					        {
					            SetPlayerHealth(playerid, 100.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a medkit from the locker and opens it.", GetRPName(playerid));
					        }
					        case 1:
					        {
					            SetScriptArmour(playerid, 75.0);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a kevlar vest from the locker and puts it on.", GetRPName(playerid));
					        }
					        case 2:
					        {
					            pData[playerid][pSpraycans] += 10;
					            GiveWeapon(playerid, 41);
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a spraycans from the locker.", GetRPName(playerid));
		                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", pData[playerid][pSpraycans], pData[playerid][pID]);
		                        mysql_tquery(connectionID, queryBuffer);
					        }
					        case 3:
					        {
					            pData[playerid][pGasCan] += 10;
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s grabs a gascan from the storage.", GetRPName(playerid));
							    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", pData[playerid][pGasCan], pData[playerid][pID]);
							    mysql_tquery(connectionID, queryBuffer);
					        }
           					case 4:
					        {
		                        if(pData[playerid][pRepairKit] >= 5)
							    {
							        return SCM(playerid, COLOR_SYNTAX, "You can't have more than 5 repairkit.");
							    }
					            pData[playerid][pRepairKit] += 1;
					            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s has withdraw a repairkit from the locker..", GetRPName(playerid));
		                        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET repairkit = %i WHERE uid = %i", pData[playerid][pRepairKit], pData[playerid][pID]);
		                        mysql_tquery(connectionID, queryBuffer);
					        }
					    }
					}
					case FACTION_HITMAN:
					{
					    switch(listitem)
					    {
					        case 0:
							{
							    if(pData[playerid][pCash] < 100)
							    {
							        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't afford this weapon.");
					            }

					            GivePlayerCash(playerid, -100);
					            SetScriptArmour(playerid, 75.0);

					            SCMf(playerid, COLOR_WHITE, "** You ordered a kevlar vest for $100.");
					            GameTextForPlayer(playerid, "~r~-$100", 5000, 1);
					    	}
					    	case 1:
							{
							    if(pData[playerid][pCash] < 100)
							    {
							        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 23);
					            GivePlayerCash(playerid, -100);

					            SCMf(playerid, COLOR_WHITE, "** You ordered a silenced pistol for $100.");
					            GameTextForPlayer(playerid, "~r~-$100", 5000, 1);
					    	}
					    	case 2:
							{
							    if(pData[playerid][pCash] < 150)
							    {
							        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 25);
					            GivePlayerCash(playerid, -150);

					            SCMf(playerid, COLOR_WHITE, "** You ordered a shotgun for $150.");
					            GameTextForPlayer(playerid, "~r~-$150", 5000, 1);
					    	}
					    	case 3:
							{
							    if(pData[playerid][pCash] < 200)
							    {
							        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 24);
					            GivePlayerCash(playerid, -200);

					            SCMf(playerid, COLOR_WHITE, "** You ordered a Desert Eagle for $200.");
					            GameTextForPlayer(playerid, "~r~-$200", 5000, 1);
					    	}
					    	case 4:
							{
							    if(pData[playerid][pCash] < 250)
							    {
							        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 29);
					            GivePlayerCash(playerid, -250);

					            SCMf(playerid, COLOR_WHITE, "** You ordered an MP5 for $250.");
					            GameTextForPlayer(playerid, "~r~-$2500", 5000, 1);
					    	}
					    	case 5:
							{
							    if(pData[playerid][pCash] < 400)
							    {
							        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 33);
					            GivePlayerCash(playerid, -400);

					            SCMf(playerid, COLOR_WHITE, "** You ordered a country rifle for $400.");
					            GameTextForPlayer(playerid, "~r~-$400", 5000, 1);
					    	}
					    	case 6:
							{
							    if(pData[playerid][pCash] < 600)
							    {
							        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 30);
					            GivePlayerCash(playerid, -600);

					            SCMf(playerid, COLOR_WHITE, "** You ordered an AK-47 for $600.");
					            GameTextForPlayer(playerid, "~r~-$600", 5000, 1);
					    	}
					    	case 7:
							{
							    if(pData[playerid][pCash] < 800)
							    {
							        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't afford this weapon.");
					            }

								GiveWeapon(playerid, 31);
					            GivePlayerCash(playerid, -800);

					            SCMf(playerid, COLOR_WHITE, "** You ordered an M4 for $800.");
					            GameTextForPlayer(playerid, "~r~-$800", 5000, 1);
					    	}
					    	case 8:
							{
							    if(pData[playerid][pCash] < 900)
							    {
							        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't afford this weapon.");
					            }
			            		SCM(playerid, COLOR_SYNTAX, "Sniper is temporary disabled");
								//GiveWeapon(playerid, 34);
					            //GivePlayerCash(playerid, -900);

					            //SCMf(playerid, COLOR_WHITE, "** You ordered a sniper rifle for $900.");
					            //GameTextForPlayer(playerid, "~r~-$900", 5000, 1);
					    	}
					    	case 9:
							{
							    if(pData[playerid][pCash] < 750)
							    {
							        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't afford this weapon.");
					            }
					            if(pData[playerid][pBombs] > 3)
					            {
					                return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You have more than 3 bombs. You can't buy anymore.");
								}

					            pData[playerid][pBombs]++;
					            GivePlayerCash(playerid, -750);

								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bombs = %i WHERE uid = %i", pData[playerid][pBombs], pData[playerid][pID]);
								mysql_tquery(connectionID, queryBuffer);

					            SCMf(playerid, COLOR_WHITE, "** You ordered a bomb for $750. /plantbomb to place the bomb.");
					            GameTextForPlayer(playerid, "~r~-$750", 5000, 1);
					    	}
					    }
					}
				}
			}
		}
		case DIALOG_FACTIONSKINS:
		{
		    if(pData[playerid][pFaction] >= 0 && IsPlayerInRangeOfLocker(playerid, pData[playerid][pFaction]))
		    {
		        if(response)
		        {
					new index = pData[playerid][pSkinSelected] + 1;

					if(index >= MAX_FACTION_SKINS)
					{
					    // When the player is shown the dialog for the first time, their skin isn't changed until they click >> Next.
					    SetPlayerSkin(playerid, pData[playerid][pSkin]);
					    pData[playerid][pSkinSelected] = -1;
					}
					else
					{
					    // Find the next skin in the array.
						for(new i = index; i < MAX_FACTION_SKINS; i ++)
						{
						    if(FactionInfo[pData[playerid][pFaction]][fSkins][i] != 0)
						    {
						        SetPlayerSkin(playerid, FactionInfo[pData[playerid][pFaction]][fSkins][i]);
						        pData[playerid][pSkinSelected] = i;
						        break;
					        }
		                }

		                if(index == pData[playerid][pSkinSelected] + 1)
		                {
		                    // Looks like there was no skin found. So, we'll go back to the very first valid skin in the skin array.
		                    for(new i = 0; i < MAX_FACTION_SKINS; i ++)
							{
						    	if(FactionInfo[pData[playerid][pFaction]][fSkins][i] != 0)
						    	{
		                            SetPlayerSkin(playerid, FactionInfo[pData[playerid][pFaction]][fSkins][i]);
						        	pData[playerid][pSkinSelected] = i;
						        	break;
								}
							}
		                }
		            }

		            ShowPlayerDialog(playerid, DIALOG_FACTIONSKINS, DIALOG_STYLE_MSGBOX, "Uniform selection", "Press {FFFFFF}>> Next{A9C4E4} to browse through available uniforms.", ">> Next", "Confirm");
		        }
		        else
		        {
		            pData[playerid][pClothes] = pData[playerid][pSkin];
		            pData[playerid][pSkin] = GetPlayerSkin(playerid);
		            pData[playerid][pSkinSelected] = -1;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i, clothes = %i WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pClothes], pData[playerid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

		            SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s takes a uniform out of the locker and puts it on.", GetRPName(playerid));
				}
		    }
		}
		case DIALOG_HITMANCLOTHES:
		{
		    if((response) && pData[playerid][pFaction] >= 0 && IsPlayerInRangeOfPoint(playerid, 3.0, FactionInfo[pData[playerid][pFaction]][fLockerX], FactionInfo[pData[playerid][pFaction]][fLockerY], FactionInfo[pData[playerid][pFaction]][fLockerZ]))
		    {
				new skinid;

		    	if(sscanf(inputtext, "i", skinid))
				{
					return ShowPlayerDialog(playerid, DIALOG_HITMANCLOTHES, DIALOG_STYLE_INPUT, "Change clothes", "Please input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.net/wiki/Skins:All ))", "Submit", "Cancel");
		        }
		        if(!(0 <= skinid <= 311))
		        {
		            SCM(playerid, COLOR_SYNTAX, "Invalid skin.");
		            return ShowPlayerDialog(playerid, DIALOG_HITMANCLOTHES, DIALOG_STYLE_INPUT, "Change clothes", "Please input the ID of the skin you wish to purchase.\n(( List of skins: http://wiki.sa-mp.net/wiki/Skins:All ))", "Submit", "Cancel");
		        }

		        pData[playerid][pSkin] = skinid;
		        SetPlayerSkin(playerid, skinid);

                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				GameTextForPlayer(playerid, "~w~Clothes changed for free", 3000, 3);
		    }
		}
		case DIALOG_MDC:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                static string[2048], count;

		                string = "Suspect\tLocation\tWanted level";

		                count = 0;

						foreach(new i : Player)
						{
						    if(pData[i][pWantedLevel] > 0)
						    {
						        format(string, sizeof(string), "%s\n%s\t%s\t%i/6", string, GetRPName(i), GetPlayerZoneName(i), pData[i][pWantedLevel]);
						        count++;
						    }
						}

						if(!count)
						{
						    return SCM(playerid, COLOR_SYNTAX, "There are currently no wanted suspects online.");
						}

						ShowPlayerDialog(playerid, DIALOG_MDCWANTED, DIALOG_STYLE_TABLIST_HEADERS, "Suspects wanted", string, "Track", "Cancel");
					}
					case 1:
					{
					    ShowPlayerDialog(playerid, DIALOG_PLAYERLOOKUP, DIALOG_STYLE_INPUT, "Player lookup", "Enter the full name of the player to lookup:", "Submit", "Cancel");
					}
					case 2:
					{
					    ShowPlayerDialog(playerid, DIALOG_VEHICLELOOKUP1, DIALOG_STYLE_INPUT, "Vehicle lookup", "Enter the ID of the vehicle to lookup.\n(( You can find out the ID of a vehicle by using /dl. ))", "Submit", "Cancel");
					}
				}
			}
		}
		case DIALOG_MDCWANTED:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        foreach(new i : Player)
				{
    				if(!strcmp(GetRPName(i), inputtext))
    				{
    				    new
    				        Float:x,
    				        Float:y,
    				        Float:z;

    				    GetPlayerPosEx(i, x, y, z);

    				    pData[playerid][pCP] = CHECKPOINT_MISC;

    				    SetPlayerCheckpoint(playerid, x, y, z, 3.0);
    				    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the suspect's last known location.");
						return 1;
					}
				}

				SCM(playerid, COLOR_SYNTAX, "The suspect you've selected has went offline.");
			}
		}
		case DIALOG_PLAYERLOOKUP:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        new username[MAX_PLAYER_NAME];

		        if(sscanf(inputtext, "s[24]", username))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_PLAYERLOOKUP, DIALOG_STYLE_INPUT, "Player lookup", "Enter the full name of the player to lookup:", "Submit", "Cancel");
				}

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, gender, age, wantedlevel, crimes, arrested, carlicense, gunlicense FROM users WHERE username = '%e'", username);
				mysql_tquery(connectionID, queryBuffer, "MDC_PlayerLookup", "is", playerid, username);
			}
		}
		case DIALOG_MDCPLAYER1:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        ShowPlayerDialog(playerid, DIALOG_MDCPLAYER2, DIALOG_STYLE_LIST, "Options", "Show active charges\nClear charges\nCheck Vehicles", "Select", "Cancel");
			}
		}
		case DIALOG_MDCPLAYER2:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM charges WHERE uid = %i", pData[playerid][pSelected]);
		                mysql_tquery(connectionID, queryBuffer, "MDC_ListCharges", "i", playerid);
		            }
		            case 1:
		            {
		                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username FROM users WHERE uid = %i", pData[playerid][pSelected]);
		                mysql_tquery(connectionID, queryBuffer, "MDC_ClearCharges", "i", playerid);
		            }
		            case 2:
		            {
		                SM(playerid, SERVER_COLOR, "[!]"WHITE" Coming soon.");
					}
				}
		    }
		}
		case DIALOG_MDCCHARGES:
		{
		    ShowPlayerDialog(playerid, DIALOG_MDCPLAYER2, DIALOG_STYLE_LIST, "Options", "Show active charges\nClear charges", "Select", "Cancel");
		}
		case DIALOG_VEHICLELOOKUP1:
		{
		    if((response) && IsLawEnforcement(playerid))
		    {
			    new vehicleid, string[512];

			    if(sscanf(inputtext, "i", vehicleid))
			    {
		    	    return ShowPlayerDialog(playerid, DIALOG_VEHICLELOOKUP1, DIALOG_STYLE_INPUT, "Vehicle lookup", "Enter the ID of the vehicle to lookup.\n(( You can find out the ID of a vehicle by using /dl. ))", "Submit", "Cancel");
				}
				if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vOwnerID])
				{
				    SCM(playerid, COLOR_SYNTAX, "The vehicle ID specified is not owned by any particular person.");
			    	return ShowPlayerDialog(playerid, DIALOG_VEHICLELOOKUP1, DIALOG_STYLE_INPUT, "Vehicle lookup", "Enter the ID of the vehicle to lookup.\n(( You can find out the ID of a vehicle by using /dl. ))", "Submit", "Cancel");
				}

				pData[playerid][pSelected] = vehicleid;

				format(string, sizeof(string), "Name: %s\nPlate: %s\nOwner: %s\nTickets: $%i\nLocation: %s", GetVehicleName(vehicleid), VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vTickets], GetVehicleZoneName(vehicleid));
            	ShowPlayerDialog(playerid, DIALOG_VEHICLELOOKUP2, DIALOG_STYLE_MSGBOX, "Vehicle lookup", string, "Track", "Cancel");
			}
		}
		case DIALOG_VEHICLELOOKUP2:
		{
			if((response) && IsLawEnforcement(playerid))
		    {
				new garageid, vehicleid = pData[playerid][pSelected];

				if((garageid = GetVehicleGarage(vehicleid)) >= 0)
				{
				    SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
				    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the garage this vehicle is inside of.");
				}
				else
				{
				    new
						Float:x,
						Float:y,
						Float:z;

                    SCM(playerid, COLOR_WHITE, "** Checkpoint marked at the vehicle's last known location.");

					GetVehiclePos(vehicleid, x, y, z);
					SetPlayerCheckpoint(playerid, x, y, z, 3.0);
				}

    			pData[playerid][pCP] = CHECKPOINT_MISC;
			}
		}
		case DIALOG_FACTIONPAY1:
		{
		    if((response) && GetFactionType(playerid) == FACTION_GOVERNMENT)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowPlayerDialog(playerid, DIALOG_FACTIONPAY2, DIALOG_STYLE_INPUT, "Change paycheck", "Enter the new paycheck amount for this rank:", "Submit", "Back");
		    }
		}
		case DIALOG_FACTIONPAY2:
		{
		    if(GetFactionType(playerid) == FACTION_GOVERNMENT)
		    {
		        if(response)
		        {
		            new amount, factionid = pData[playerid][pFactionEdit], rankid = pData[playerid][pSelected];

		            if(sscanf(inputtext, "i", amount))
		            {
		                return ShowPlayerDialog(playerid, DIALOG_FACTIONPAY2, DIALOG_STYLE_INPUT, "Change paycheck", "Enter the new paycheck amount for this rank:", "Submit", "Back");
					}
					if(!(1 <= amount <= 30000))
					{
					    SCM(playerid, COLOR_SYNTAX, "The specified amount must range from $1 to $30000.");
					    return ShowPlayerDialog(playerid, DIALOG_FACTIONPAY2, DIALOG_STYLE_INPUT, "Change paycheck", "Enter the new paycheck amount for this rank:", "Submit", "Back");
					}

					FactionInfo[factionid][fPaycheck][rankid] = amount;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionpay VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE amount = %i", factionid, rankid, amount, amount);
				    mysql_tquery(connectionID, queryBuffer);

					SM(playerid, COLOR_AQUA, "You have set the paycheck for rank %i to $%i.", rankid, amount);
				    Log_Write("log_faction", "%s (uid: %i) set %s's (id: %i) paycheck for rank %i to $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], FactionInfo[factionid][fName], factionid, rankid, amount);
		        }

				ShowDialogToPlayer(playerid, DIALOG_FACTIONPAY1);
		    }
		}
		case DIALOG_PHONEBOOK:
		{
		    if(response)
		    {
		        if(!strcmp(inputtext, ">> Next page", true))
		        {
		            pData[playerid][pPage]++;
		            ShowDialogToPlayer(playerid, DIALOG_PHONEBOOK);
		        }
		        else if(!strcmp(inputtext, "<< Go back", true) && pData[playerid][pPage] > 1)
		        {
		            pData[playerid][pPage]--;
		            ShowDialogToPlayer(playerid, DIALOG_PHONEBOOK);
		        }
		    }
		}
		case DIALOG_CREATEZONE:
		{
		    if((response) && pData[playerid][pAdmin] >= 5)
		    {
		        pData[playerid][pMinX] = 0.0;
		        pData[playerid][pMinY] = 0.0;
		        pData[playerid][pMaxX] = 0.0;
		        pData[playerid][pMaxY] = 0.0;

		        if(pData[playerid][pZoneType] == ZONETYPE_LAND)
				{
					new Float:lx = pData[playerid][plX],
					    Float:ly = pData[playerid][plY],
					    Float:lz = pData[playerid][plZ];

                    GetPlayerPos(playerid, lx, ly, lz);
					pData[playerid][plX] = lx;
					pData[playerid][plY] = ly;
					pData[playerid][plZ] = lz;

			        pData[playerid][pZoneCreation] = ZONETYPE_LAND;
			        SCM(playerid, COLOR_WHITE, "** Your land needs to be within a square or rectangle. /confirm to set the four boundary points.");
				}
				else if(pData[playerid][pZoneType] == ZONETYPE_TURF)
				{
			        pData[playerid][pZoneCreation] = ZONETYPE_TURF;
			        SCM(playerid, COLOR_WHITE, "** Your turf needs to be within a square or rectangle. /confirm to set the four boundary points.");
				}
				else if(pData[playerid][pZoneType] == ZONETYPE_SAFEZONE)
				{
			        pData[playerid][pZoneCreation] = ZONETYPE_SAFEZONE;
			        SendClientMessage(playerid, COLOR_WHITE, "** Your GreenZone needs to be within a square or rectangle. /confirm to set the four boundary points.");
				}
		    }
		}
		case DIALOG_CONFIRMZONE:
		{
		   if(response)
		    {
		        if(pData[playerid][pZoneCreation] == ZONETYPE_LAND)
		        {
			        for(new i = 0; i < MAX_LANDS; i ++)
					{
					    if(!LandInfo[i][lExists])
					    {
					        new
					            Float:minx = pData[playerid][pMinX],
					            Float:miny = pData[playerid][pMinY],
					            Float:maxx = pData[playerid][pMaxX],
					            Float:maxy = pData[playerid][pMaxY],
					            Float:z;

	            			GetPlayerPos(playerid, z, z, z);

					        if(minx > maxx)
							{
	                            pData[playerid][pMinX] = maxx;
	                            pData[playerid][pMaxX] = minx;
					        }
					        if(miny > maxy)
							{
					            pData[playerid][pMinY] = maxy;
					            pData[playerid][pMaxY] = miny;
					        }

							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO lands (price, min_x, min_y, max_x, max_y, height, lx, ly, lz) VALUES(%i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", pData[playerid][pLandCost], pData[playerid][pMinX], pData[playerid][pMinY], pData[playerid][pMaxX], pData[playerid][pMaxY], z, pData[playerid][plX], pData[playerid][plY], pData[playerid][plZ]);
							mysql_tquery(connectionID, queryBuffer, "OnAdminCreateLand", "iiiffffffff", playerid, i, pData[playerid][pLandCost], pData[playerid][pMinX], pData[playerid][pMinY], pData[playerid][pMaxX], pData[playerid][pMaxY], z, pData[playerid][plX], pData[playerid][plY], pData[playerid][plZ]);
	      					CancelZoneCreation(playerid);
							return 1;
						}
					}

					SCM(playerid, COLOR_SYNTAX, "Land slots are currently full. Ask Community Directors to increase the internal limit.");
					CancelZoneCreation(playerid);
		    	}
		    	else if(pData[playerid][pZoneCreation] == ZONETYPE_TURF)
		    	{
		    	    for(new i = 1; i < MAX_TURFS; i ++)
					{
					    if(!TurfInfo[i][tExists])
					    {
					        new
					            Float:minx = pData[playerid][pMinX],
					            Float:miny = pData[playerid][pMinY],
					            Float:maxx = pData[playerid][pMaxX],
					            Float:maxy = pData[playerid][pMaxY],
					            Float:z;

	            			GetPlayerPos(playerid, z, z, z);

					        if(minx > maxx)
							{
	                            pData[playerid][pMinX] = maxx;
	                            pData[playerid][pMaxX] = minx;
					        }
					        if(miny > maxy)
							{
					            pData[playerid][pMinY] = maxy;
					            pData[playerid][pMaxY] = miny;
					        }

							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO turfs (id, name, type, min_x, min_y, max_x, max_y, height) VALUES(%i, '%e', %i, '%f', '%f', '%f', '%f', '%f')", i, pData[playerid][pTurfName], pData[playerid][pTurfType], pData[playerid][pMinX], pData[playerid][pMinY], pData[playerid][pMaxX], pData[playerid][pMaxY], z);
							mysql_tquery(connectionID, queryBuffer, "OnAdminCreateTurf", "iisifffff", playerid, i, pData[playerid][pTurfName], pData[playerid][pTurfType], pData[playerid][pMinX], pData[playerid][pMinY], pData[playerid][pMaxX], pData[playerid][pMaxY], z);
	      					CancelZoneCreation(playerid);
							return 1;
						}
					}

					SCM(playerid, COLOR_SYNTAX, "Turf slots are currently full. Ask Community Directors to increase the internal limit.");
					CancelZoneCreation(playerid);
		    	}
				else if(pData[playerid][pZoneCreation] == ZONETYPE_SAFEZONE)
		    	{
		    	    for(new i = 1; i < MAX_SAFEZONE; i ++)
					{
					    if(!SafeZoneInfo[i][SZExists])
					    {
					        new
					            Float:minx = pData[playerid][pMinX],
					            Float:miny = pData[playerid][pMinY],
					            Float:maxx = pData[playerid][pMaxX],
					            Float:maxy = pData[playerid][pMaxY],
					            Float:z;

	            			GetPlayerPos(playerid, z, z, z);

					        if(minx > maxx)
							{
	                            pData[playerid][pMinX] = maxx;
	                            pData[playerid][pMaxX] = minx;
					        }
					        if(miny > maxy)
							{
					            pData[playerid][pMinY] = maxy;
					            pData[playerid][pMaxY] = miny;
					        }

							mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO safezone (id, minx, miny, maxx, maxy, height, interior, view) VALUES(%i, '%f', '%f', '%f', '%f', '%f', %i, %i)", i, pData[playerid][pMinX], pData[playerid][pMinY], pData[playerid][pMaxX], pData[playerid][pMaxY], z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
							mysql_tquery(connectionID, queryBuffer, "OnAdminCreateSafeZone", "iifffffii", playerid, i, pData[playerid][pMinX], pData[playerid][pMinY], pData[playerid][pMaxX], pData[playerid][pMaxY], z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	      					CancelZoneCreation(playerid);
							return 1;
						}
					}

					SendClientMessage(playerid, COLOR_SYNTAX, "Greenzone slots are currently full. Ask managements to increase the internal limit.");
					CancelZoneCreation(playerid);
		    	}
				
			}
			
			else
			{
			    CancelZoneCreation(playerid);

		        if(pData[playerid][pZoneType] == ZONETYPE_LAND)
				{
					SCM(playerid, COLOR_WHITE, "** Your land needs to be within a square or rectangle. /confirm to set the four boundary points.");
					SCM(playerid, COLOR_WHITE, "** Note: You can use /landcancel to exit land creation mode.");
					pData[playerid][pZoneCreation] = ZONETYPE_LAND;
				}
				else if(pData[playerid][pZoneType] == ZONETYPE_TURF)
				{
					SCM(playerid, COLOR_WHITE, "** Your turf needs to be within a square or rectangle. /confirm to set the four boundary points.");
					SCM(playerid, COLOR_WHITE, "** Note: You can use /turfcancel to exit turf creation mode.");
					pData[playerid][pZoneCreation] = ZONETYPE_TURF;
				}
				else if(pData[playerid][pZoneType] == ZONETYPE_SAFEZONE)
				{
					SendClientMessage(playerid, COLOR_WHITE, "** Your turf needs to be within a square or rectangle. /confirm to set the four boundary points.");
					SendClientMessage(playerid, COLOR_WHITE, "** Note: You can use /greenzonecancel to exit turf creation mode.");
					pData[playerid][pZoneCreation] = ZONETYPE_SAFEZONE;
				}
			}
		}
		case DIALOG_LANDBUILDTYPE:
		{
		    new landid = GetNearbyLand(playerid);

		    if(landid == -1 || !HasLandPerms(playerid, landid))
			{
				return 0;
			}

	   	    if(response)
	        {
				pData[playerid][pMenuType] = listitem;
				ShowDialogToPlayer(playerid, DIALOG_LANDBUILD1);
			}
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
			}
		}
        case DIALOG_LANDBUILD1:
	    {
	        new landid = GetNearbyLand(playerid);

		    if(landid == -1 || !HasLandPerms(playerid, landid))
			{
				return 0;
			}

	   	    if(response)
	        {
	            switch(pData[playerid][pMenuType])
	            {
	                case 0: // Model selection
	                {
						pData[playerid][pCategory] = listitem;
						ShowObjectSelectionMenu(playerid, MODEL_SELECTION_LANDOBJECTS);
	                }
	                case 1:
	                {
						pData[playerid][pCategory] = listitem;
						ShowDialogToPlayer(playerid, DIALOG_LANDBUILD2);
					}
     	       }
			}
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_LANDBUILDTYPE);
			}
	    }
	    case DIALOG_LANDBUILD2:
	    {
	        new landid = GetNearbyLand(playerid);

		    if(landid == -1 || !HasLandPerms(playerid, landid))
			{
				return 0;
			}

	        if(response)
	        {
                PurchaseLandObject(playerid, landid, listitem + pData[playerid][pFurnitureIndex]);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_LANDBUILD1);
			}
	    }
	    case DIALOG_LANDMENU:
	    {
	        new landid = GetNearbyLand(playerid);

	        if(landid == -1 || !HasLandPerms(playerid, landid))
	        {
	            return 1;
	        }

	        if(response)
	        {
		        switch(listitem)
		        {
		            case 0:
		            {
           		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
						mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_LANDOBJECTS, playerid);
					}
					case 1:
					{
					    ShowPlayerDialog(playerid, DIALOG_LANDEDITOBJECT, DIALOG_STYLE_INPUT, "Edit object", "Please enter the object ID of the object to edit:\nYou can find out the ID of objects by toggling labels in the menu.", "Submit", "Back");
					}
					case 2:
					{
						if(!LandInfo[landid][lLabels])
					    {
					        LandInfo[landid][lLabels] = 1;
					        SCM(playerid, COLOR_GREEN, "You will now see labels appear above the objects in your land.");
					    }
					    else
					    {
					        LandInfo[landid][lLabels] = 0;
					        SCM(playerid, COLOR_GREEN, "You will no longer see any labels appear above your land objects.");
					    }

					    ReloadAllLandObjects(landid);
					    ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
					}
					case 3:
					{
					    ShowPlayerDialog(playerid, DIALOG_LANDSELLALL, DIALOG_STYLE_MSGBOX, "Clear objects", "This option sells all the objects in your land. You will receive\n75 percent of the total cost of all your objects.\n\nPress "SVRCLR"Confirm{A9C4E4} to proceed with the operation.", "Confirm", "Back");
					}
					case 4:
					{
					    ShowPlayerDialog(playerid, DIALOG_LANDPERMS, DIALOG_STYLE_INPUT, "Permissions", "Please enter the name or ID of the player to take or give permissions to:", "Submit", "Back");
					}
					case 5:
					{
						if(pData[playerid][pAdmin] < 11)
						{
							return SendClientMessage(playerid, COLOR_GREY, "Only Developer.");
						}
					    if(LandInfo[landid][lLevel] >= 3)
					    {
					        return SendClientMessage(playerid, COLOR_GREY, "Your land can't be upgraded any further.");
					    }

					    new
					        string[224];

					    format(string, sizeof(string), "You are about to upgrade your land to level %i/5.\n\nThis upgrade will cost you {00AA00}$1,000,000{A9C4E4} and unlocks %i more\nobject slots for your land.\n\nAre you sure you want to upgrade your land?", LandInfo[landid][lLevel] + 1, GetLandObjectCapacity(LandInfo[landid][lLevel] + 1) - GetLandObjectCapacity(LandInfo[landid][lLevel]));
						ShowPlayerDialog(playerid, DIALOG_LANDUPGRADE, DIALOG_STYLE_MSGBOX, "Upgrade land", string, "Yes", "No");
					}
   				}
	        }
	    }
	    case DIALOG_LANDUPGRADE:
	    {
	        new landid = GetNearbyLand(playerid);

	        if(landid == -1 || !HasLandPerms(playerid, landid))
	        {
	            return 1;
	        }

	        if(response)
	        {
	            if(LandInfo[landid][lLevel] < 5)
            	{
	                if(pData[playerid][pCash] < 1000000)
	                {
	                    return SendClientMessage(playerid, COLOR_GREY, "You can't afford to upgrade your land.");
	                }

	                LandInfo[landid][lLevel]++;
	                UpdateLandText(landid);

	                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE lands SET level = level + 1 WHERE id = %i", LandInfo[landid][lID]);
	                mysql_tquery(connectionID, queryBuffer);

	                GivePlayerCash(playerid, -1000000);
	                GameTextForPlayer(playerid, "~r~-$1000000", 5000, 1);
	                SM(playerid, COLOR_GREEN, "You paid $1,000,000 to upgrade your land to level %i/3. Your land can now have up to %i objects.", LandInfo[landid][lLevel], GetLandObjectCapacity(LandInfo[landid][lLevel]));
	            }
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
	        }
	    }
	    case DIALOG_LANDEDITOBJECT:
	    {
	        new landid = GetNearbyLand(playerid);

	        if(landid == -1 || !HasLandPerms(playerid, landid))
	        {
	            return 1;
	        }

	        if(response)
	        {
	            new objectid;

	            if(sscanf(inputtext, "i", objectid))
	            {
	                return ShowPlayerDialog(playerid, DIALOG_LANDEDITOBJECT, DIALOG_STYLE_INPUT, "Edit object", "Please enter the object ID of the object to edit:\nYou can find out the ID of objects by toggling labels in the menu.", "Submit", "Back");
				}
				if(!IsValidDynamicObject(objectid) || Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) != E_OBJECT_LAND)
				{
				    SCM(playerid, COLOR_SYNTAX, "Invalid object. You can find out an object's ID by enabling labels.");
				    return ShowPlayerDialog(playerid, DIALOG_LANDEDITOBJECT, DIALOG_STYLE_INPUT, "Edit object", "Please enter the object ID of the object to edit:\nYou can find out the ID of objects by toggling labels in the menu.", "Submit", "Back");
		        }
		        if(Streamer_GetExtraInt(objectid, E_OBJECT_EXTRA_ID) != LandInfo[landid][lID])
		        {
		            SCM(playerid, COLOR_SYNTAX, "Invalid object. This land object is not apart of your land.");
		            return ShowPlayerDialog(playerid, DIALOG_LANDEDITOBJECT, DIALOG_STYLE_INPUT, "Edit object", "Please enter the object ID of the object to edit:\nYou can find out the ID of objects by toggling labels in the menu.", "Submit", "Back");
		        }

		        pData[playerid][pSelected] = objectid;
				ShowDialogToPlayer(playerid, DIALOG_LANDOBJECTMENU);
	        }
	        else
	        {
	            ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
			}
		}
	    case DIALOG_LANDOBJECTMENU:
	    {
            new landid = GetNearbyLand(playerid);

	        if(landid == -1 || !HasLandPerms(playerid, landid))
	        {
	            return 1;
	        }

	        if(response)
	        {
	            new objectid = pData[playerid][pSelected];

	            if(!strcmp(inputtext, "Edit object"))
	            {
	                if(Streamer_GetExtraInt(objectid, E_OBJECT_OPENED))
					{
					    return SCM(playerid, COLOR_SYNTAX, "You can't edit your gate while it is opened.");
					}

	    	        pData[playerid][pEditType] = EDIT_LAND_OBJECT;
		    	    pData[playerid][pEditObject] = objectid;
	        		pData[playerid][pObjectLand] = landid;

					EditDynamicObject(playerid, objectid);
	    		    GameTextForPlayer(playerid, "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel", 5000, 1);
	            }
	            else if(!strcmp(inputtext, "Edit gate destination"))
	            {
	                if(Streamer_GetExtraInt(objectid, E_OBJECT_OPENED))
					{
					    return SCM(playerid, COLOR_SYNTAX, "You can't edit your gate while it is opened.");
					}

			        pData[playerid][pEditType] = EDIT_LAND_GATE_MOVE;
			        pData[playerid][pEditObject] = objectid;
			        pData[playerid][pObjectLand] = landid;

					EditDynamicObject(playerid, objectid);
					SCM(playerid, COLOR_WHITE, "** You are now editing the move-to position for your gate.");
			        GameTextForPlayer(playerid, "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel", 5000, 1);
	            }
	            else if(!strcmp(inputtext, "Duplicate object"))
	            {
	                pData[playerid][pSelected] = objectid;

	                mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, modelid, price, pos_x, pos_y, pos_z, rot_x, rot_y, rot_z FROM landobjects WHERE id = %i", Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
			        mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_DUPLICATE_LANDOBJECT, playerid);
	            }
	            else if(!strcmp(inputtext, "Sell object"))
	            {
	                pData[playerid][pSelected] = objectid;

			        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, price FROM landobjects WHERE id = %i", Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
			        mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_SELL_LANDOBJECT, playerid);
				}
			}
			else
			{
			    ShowPlayerDialog(playerid, DIALOG_LANDEDITOBJECT, DIALOG_STYLE_INPUT, "Edit object", "Please enter the object ID of the object to edit:\nYou can find out the ID of objects by toggling labels in the menu.", "Submit", "Back");
			}
		}
		case DIALOG_LANDOBJECTS:
		{
		    if(response)
		    {
		        if(!strcmp(inputtext, ">> Next page", true))
		        {
		            pData[playerid][pPage]++;
		            ShowDialogToPlayer(playerid, DIALOG_LANDOBJECTS);
		        }
		        else if(!strcmp(inputtext, "<< Go back", true) && pData[playerid][pPage] > 1)
		        {
		            pData[playerid][pPage]--;
		            ShowDialogToPlayer(playerid, DIALOG_LANDOBJECTS);
		        }
		        else
		        {
		            new objectid = strval(inputtext);

		            if(IsValidDynamicObject(objectid) && Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) == E_OBJECT_LAND)
		            {
			            pData[playerid][pSelected] = objectid;
						ShowDialogToPlayer(playerid, DIALOG_LANDOBJECTMENU);
					}
		        }
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
			}
		}
		case DIALOG_LANDSELLALL:
		{
		    new landid = GetNearbyLand(playerid);

	        if(landid == -1 || !HasLandPerms(playerid, landid))
	        {
	            return 1;
	        }

	        if(response)
	        {
		    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT price FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
        		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CLEAR_LANDOBJECTS, playerid);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
			}
		}
		case DIALOG_LANDPERMS:
		{
		    new landid = GetNearbyLand(playerid), targetid;

	        if(landid == -1 || !HasLandPerms(playerid, landid))
	        {
	            return 1;
	        }

	        if(response)
	        {
				if(sscanf(inputtext, "u", targetid))
				{
					return ShowPlayerDialog(playerid, DIALOG_LANDPERMS, DIALOG_STYLE_INPUT, "Permissions", "Please enter the name or ID of the player to take or give permissions to:", "Submit", "Back");
		        }
		        if(!IsPlayerConnected(targetid))
		        {
		            SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		            return ShowPlayerDialog(playerid, DIALOG_LANDPERMS, DIALOG_STYLE_INPUT, "Permissions", "Please enter the name or ID of the player to take or give permissions to:", "Submit", "Back");
		        }
		        if(targetid == playerid)
				{
					SCM(playerid, COLOR_SYNTAX, "You can't give permissions to yourself.");
					return ShowPlayerDialog(playerid, DIALOG_LANDPERMS, DIALOG_STYLE_INPUT, "Permissions", "Please enter the name or ID of the player to take or give permissions to:", "Submit", "Back");
				}

		        if(pData[targetid][pLandPerms] == landid)
		        {
		            pData[targetid][pLandPerms] = -1;

		            SM(targetid, COLOR_GREEN, "%s has removed your access to their land's objects.", GetRPName(playerid));
					SM(playerid, COLOR_GREEN, "You have removed %s's access to your land's objects.", GetRPName(targetid));
				}
				else
				{
				    pData[targetid][pLandPerms] = landid;

		            SM(targetid, COLOR_GREEN, "%s has granted you access to their land's objects.", GetRPName(playerid));
					SM(playerid, COLOR_GREEN, "You have granted %s access to your land's objects.", GetRPName(targetid));
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
		}
		case DIALOG_MP3PLAYER:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                ShowPlayerDialog(playerid, DIALOG_MP3URL, DIALOG_STYLE_INPUT, "Custom URL", "Please enter the URL of the stream you want to play:", "Submit", "Back");
		            }
		            case 1:
		            {
		                ShowPlayerDialog(playerid, DIALOG_MP3MUSIC, DIALOG_STYLE_INPUT, "Uploaded Music", "Please enter the name of the .mp3 file to play:\n(Use /music for a list of all music uploaded to the server.)", "Submit", "Back");
		            }
		            case 2:
		            {
						switch(pData[playerid][pMusicType])
						{
				            case MUSIC_MP3PLAYER:
				            {
				                SetMusicStream(MUSIC_MP3PLAYER, playerid, "");
				                SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off their MP3 player.", GetRPName(playerid));
							}
							case MUSIC_BOOMBOX:
							{
							    SetMusicStream(MUSIC_BOOMBOX, playerid, "");
								SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off their boombox.", GetRPName(playerid));
							}
							case MUSIC_VEHICLE:
							{
							    if(IsPlayerInAnyVehicle(playerid))
							    {
								    SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), "");
									SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off the radio in the vehicle.", GetRPName(playerid));
								}
							}
						}
					}
		        }
			}
		}
		case DIALOG_MP3MUSIC:
		{
		    if(response)
		    {
		        new url[128];

		        if(isnull(inputtext))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_MP3MUSIC, DIALOG_STYLE_INPUT, "Uploaded Music", "Please enter the name of the .mp3 file to play:\n(Use /music for a list of all music uploaded to the server.)", "Submit", "Back");
				}

				for(new i = 0, l = strlen(inputtext); i < l; i ++)
				{
				    switch(inputtext[i])
				    {
				        case 'A'..'Z', 'a'..'z', '0'..'9', '_', '.', '\'', ' ':
				        {
							continue;
						}
						default:
						{
						    SCM(playerid, COLOR_SYNTAX, "The name of the .mp3 contains invalid characters, please try again.");
						    return ShowPlayerDialog(playerid, DIALOG_MP3MUSIC, DIALOG_STYLE_INPUT, "Uploaded Music", "Please enter the name of the .mp3 file to play:\n(Use /musicfor a list of all music uploaded to the server.)", "Submit", "Back");
						}
				    }
				}

				format(url, sizeof(url), "http://%s/%s", SERVER_MUSIC_URL, inputtext);

				switch(pData[playerid][pMusicType])
				{
		            case MUSIC_MP3PLAYER:
		            {
		                SetMusicStream(MUSIC_MP3PLAYER, playerid, url);
        		  		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on their MP3 player.", GetRPName(playerid));
					}
					case MUSIC_BOOMBOX:
					{
					    SetMusicStream(MUSIC_BOOMBOX, playerid, url);
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on their boombox.", GetRPName(playerid));
					}
					case MUSIC_VEHICLE:
					{
					    if(IsPlayerInAnyVehicle(playerid))
					    {
						    SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), url);
							SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on the radio.", GetRPName(playerid));
						}
					}
				}

				SM(playerid, COLOR_AQUA, "You have started the playback of "SVRCLR"%s{CCFFFF}.", inputtext);
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
			}
		}
		case DIALOG_MP3URL:
		{
		    if(response)
		    {
		        if(isnull(inputtext))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_MP3URL, DIALOG_STYLE_INPUT, "Custom URL", "Please enter the URL of the stream you want to play:", "Submit", "Back");
          		}

          		switch(pData[playerid][pMusicType])
				{
		            case MUSIC_MP3PLAYER:
		            {
		                SetMusicStream(MUSIC_MP3PLAYER, playerid, inputtext);
        		  		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on their MP3 player.", GetRPName(playerid));
					}
					case MUSIC_BOOMBOX:
					{
					    SetMusicStream(MUSIC_BOOMBOX, playerid, inputtext);
						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on their boombox.", GetRPName(playerid));
					}
					case MUSIC_VEHICLE:
					{
					    if(IsPlayerInAnyVehicle(playerid))
					    {
						    SetMusicStream(MUSIC_VEHICLE, GetPlayerVehicleID(playerid), inputtext);
							SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes the song on the radio.", GetRPName(playerid));
						}
					}
				}
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
			}
		}
		case DIALOG_MP3RADIO:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_MP3RADIOGENRES);
		            }
		            case 1:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
		            }
		        }
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
			}
		}
		case DIALOG_MP3RADIOGENRES:
		{
		    if(response)
		    {
		        strcpy(pData[playerid][pGenre], inputtext, 32);
		        ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSUBGENRES);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_MP3RADIO);
		    }
		}
		case DIALOG_MP3RADIOSUBGENRES:
		{
		    if(response)
		    {
		        pData[playerid][pPage] = 1;
	     		pData[playerid][pSearch] = 0;

		        strcpy(pData[playerid][pSubgenre], inputtext, 32);
	     		ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_MP3RADIOGENRES);
			}
		}
		case DIALOG_MP3RADIORESULTS:
		{
		    if(response)
		    {
		        if(!strcmp(inputtext, ">> Next page", true))
		        {
		            pData[playerid][pPage]++;
		            ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
		        }
		        else if(!strcmp(inputtext, "<< Go back", true) && pData[playerid][pPage] > 1)
		        {
		            pData[playerid][pPage]--;
		            ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
		        }
			}
			else
			{
			    if(pData[playerid][pSearch])
			    {
			        ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
			    }
			    else
			    {
			        ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSUBGENRES);
				}
			}
		}
		case DIALOG_PAWNSHOP:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
					case 0:
					{
						if(pData[playerid][pDiamonds] < 550)
						{
							return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
						}
					
						pData[playerid][pDiamonds] -= 550;
					
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
						
						pData[playerid][pVoucher3] += 1;
						SM(playerid, COLOR_AQUA, "** has given you a Diamond Vip Vocuher.");
						SM(playerid, COLOR_YELLOW, "** You can use /myvoucher to see the available voucher.");
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET voucher3 = %i WHERE uid = %i", pData[playerid][pVoucher3], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
					
						SendClientMessage(playerid, COLOR_AQUA, "You exchanged 550 diamonds to a {00AA00} Diamod VIP{33CCFF}.");
					}
					
					case 1:
					{
						if(pData[playerid][pDiamonds] < 450)
						{
							return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
						}
					
						pData[playerid][pDiamonds] -= 450;
					
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
						
						pData[playerid][pVoucher4] += 1;
						SM(playerid, COLOR_AQUA, "** has given you a Silver Vip Vocuher.");
						SM(playerid, COLOR_YELLOW, "** You can use /myvoucher to see the available voucher.");
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET voucher4 = %i WHERE uid = %i", pData[playerid][pVoucher4], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
					
						SendClientMessage(playerid, COLOR_AQUA, "You exchanged 450 diamonds to a {00AA00}Silver VIP{33CCFF}.");
					}
					
					case 2:
					{
						if(pData[playerid][pDiamonds] < 350)
						{
							return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
						}
					
						pData[playerid][pDiamonds] -= 350;
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);	
						
						pData[playerid][pVoucher5] += 1;
						SM(playerid, COLOR_AQUA, "** has given you a Bronze Vip Vocuher.");
						SM(playerid, COLOR_YELLOW, "** You can use /myvoucher to see the available voucher.");
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET voucher5 = %i WHERE uid = %i", pData[playerid][pVoucher5], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendClientMessage(playerid, COLOR_AQUA, "You exchanged 350 diamonds to a {00AA00}Bronze VIP{33CCFF}.");
					}
					
					case 3:
					{
						if(pData[playerid][pDiamonds] < 250)
						{
							return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
						}
					
						pData[playerid][pDiamonds] -= 250;
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
						
						pData[playerid][pVoucher1] += 1;
						SM(playerid, COLOR_AQUA, "** has given you a Car Vocuher.");
						SM(playerid, COLOR_YELLOW, "** You can use /myvoucher to see the available voucher.");
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET voucher1 = %i WHERE uid = %i", pData[playerid][pVoucher1], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

					
						SendClientMessage(playerid, COLOR_AQUA, "You exchanged 250 diamonds to a {00AA00}Car Voucher{33CCFF}.");
					}
					
					case 4:
					{
						if(pData[playerid][pDiamonds] < 85)
						{
							return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
						}
						if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
						{
							return SCM(playerid, COLOR_SYNTAX, "You are not allowed to buy a ak-47 reason weapon restricted or level 1.");
						}
						pData[playerid][pDiamonds] -= 85;
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
						GiveWeapon(playerid, 30);
						
					
						SendClientMessage(playerid, COLOR_AQUA, "You exchanged 50 diamonds to a {00AA00}AK-47{33CCFF}.");
					}
					case 5:
					{
						if(pData[playerid][pDiamonds] < 100)
						{
							return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
						}
						if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
						{
							return SCM(playerid, COLOR_SYNTAX, "You are not allowed to buy a M4 reason weapon restricted or level 1.");
						}
						pData[playerid][pDiamonds] -= 100;
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
						GiveWeapon(playerid, 31);
						
						SendClientMessage(playerid, COLOR_AQUA, "You exchanged 100 diamonds to a {00AA00}M4-A1{33CCFF}.");
					}
					
					case 6:
					{
						if(pData[playerid][pDiamonds] < 25)
						{
							return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
						}
						if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
						{
							return SCM(playerid, COLOR_SYNTAX, "You are not allowed to buy a BAT reason weapon restricted or level 1.");
						}
						pData[playerid][pDiamonds] -= 25;
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
					
						GiveWeapon(playerid, 5);
						
					
						SendClientMessage(playerid, COLOR_AQUA, "You exchanged 25 diamonds to a {00AA00}Baseball Bat{33CCFF}.");
					}
					
					case 7:
					{
						if(pData[playerid][pDiamonds] < 15)
						{
							return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
						}
						if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
						{
							return SCM(playerid, COLOR_SYNTAX, "You are not allowed to buy a Pistol reason weapon restricted or level 1.");
						}
						pData[playerid][pDiamonds] -= 15;
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
					
						GiveWeapon(playerid, 22);
					
						SendClientMessage(playerid, COLOR_AQUA, "You exchanged 15 diamonds to a {00AA00}Pistol{33CCFF}.");
					}
					case 8:
					{
						if(pData[playerid][pDiamonds] < 15)
						{
							return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
						}
						if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
						{
							return SCM(playerid, COLOR_SYNTAX, "You are not allowed to buy a S.Pistol reason weapon restricted or level 1.");
						}
						pData[playerid][pDiamonds] -= 15;
						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);
					
						GiveWeapon(playerid, 23);
					
						SendClientMessage(playerid, COLOR_AQUA, "You exchanged 15 diamonds to a {00AA00}Silenced Pistol{33CCFF}.");
					}
				}
			}
		}
		case DIALOG_VOCUHER:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
					case 0:
					{
						if(pData[playerid][pDiamonds] < 550)
						{
							return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
						}
					
						//pData[playerid][pDiamonds] -= 550;
					//
						//mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
						//mysql_tquery(connectionID, queryBuffer);
						//
						//pData[playerid][pTaco] += 10;
						//pData[playerid][pJuice] += 5;
						//mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET taco = %i WHERE uid = %i", pData[playerid][pTaco], pData[playerid][pID]);
						//mysql_tquery(connectionID, queryBuffer);
						//mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET juice = %i WHERE uid = %i", pData[playerid][pJuice], pData[playerid][pID]);
						//mysql_tquery(connectionID, queryBuffer);
					
						SendClientMessage(playerid, COLOR_AQUA, "Disable.");
					}
					
					case 1:
					{
						if(pData[playerid][pDiamonds] < 450)
						{
							return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
						}
					
						//pData[playerid][pDiamonds] -= 450;
					//
						//mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
						//mysql_tquery(connectionID, queryBuffer);
						//
						//pData[playerid][pBurrito] += 10;
						//mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET burrito = %i WHERE uid = %i", pData[playerid][pBurrito], pData[playerid][pID]);
						//mysql_tquery(connectionID, queryBuffer);
						//pData[playerid][pJuice] += 5;
						//mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET juice = %i WHERE uid = %i", pData[playerid][pJuice], pData[playerid][pID]);
						//mysql_tquery(connectionID, queryBuffer);
					
						SendClientMessage(playerid, COLOR_AQUA, "Disable.");
					}
					
					case 2:
					{
						if(pData[playerid][pDiamonds] < 350)
						{
							return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
						}
					
						//pData[playerid][pDiamonds] -= 350;
						//mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
						//mysql_tquery(connectionID, queryBuffer);	
						//
						//pData[playerid][pRepairKit] += 5;
						//mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET repairkit = %i WHERE uid = %i", pData[playerid][pRepairKit], pData[playerid][pID]);
						//mysql_tquery(connectionID, queryBuffer);
					
					
						SendClientMessage(playerid, COLOR_AQUA, "Disable.");
					}
					
					case 3:
					{
						if(pData[playerid][pDiamonds] < 250)
						{
							return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
						}
					
						//pData[playerid][pDiamonds] -= 250;
						//mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
						//mysql_tquery(connectionID, queryBuffer);
						//
						//pData[playerid][pPainkillers] += 5;
						//mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
						//mysql_tquery(connectionID, queryBuffer);
						
					
						SendClientMessage(playerid, COLOR_AQUA, "Disable.");
					}
					
					case 4:
					{
						if(pData[playerid][pDiamonds] < 85)
						{
							return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
						}
						if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
						{
							return SCM(playerid, COLOR_SYNTAX, "You are not allowed to buy a ak-47 reason weapon restricted or level 1.");
						}
						//pData[playerid][pDiamonds] -= 85;
						//mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
						//mysql_tquery(connectionID, queryBuffer);
						//GiveWeapon(playerid, 5);
						
					
						SendClientMessage(playerid, COLOR_AQUA, "Disable.");
					}
					case 5:
					{
						if(pData[playerid][pDiamonds] < 100)
						{
							return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
						}
						if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
						{
							return SCM(playerid, COLOR_SYNTAX, "You are not allowed to buy a M4 reason weapon restricted or level 1.");
						}
						//pData[playerid][pDiamonds] -= 100;
						//mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
						//mysql_tquery(connectionID, queryBuffer);
						//GiveWeapon(playerid, 8);
						
						SendClientMessage(playerid, COLOR_AQUA, "Disable.");
					}
					
					case 6:
					{
						if(pData[playerid][pDiamonds] < 25)
						{
							return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
						}
					
						//pData[playerid][pDiamonds] -= 25;
						//mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
						//mysql_tquery(connectionID, queryBuffer);
					//
						//pData[playerid][pPot] += 10;
					//
						//mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
						//mysql_tquery(connectionID, queryBuffer);
						
					
						SendClientMessage(playerid, COLOR_AQUA, "Disable.");
					}
					
					case 7:
					{
						if(pData[playerid][pDiamonds] < 15)
						{
							return SendClientMessage(playerid, COLOR_GREY, "You don't have enough diamonds to get this item.");
						}
					
						//pData[playerid][pDiamonds] -= 15;
						//mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
						//mysql_tquery(connectionID, queryBuffer);
					//
						//pData[playerid][pCrack] += 10;
					//
						//mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
						//mysql_tquery(connectionID, queryBuffer);
						
					
						SendClientMessage(playerid, COLOR_AQUA, "Disable.");
					}
				}
			}
		}
		case DIALOG_MP3RADIOSEARCH:
		{
		    if(response)
		    {
		        if(strlen(inputtext) < 3)
		        {
		            SCM(playerid, COLOR_SYNTAX, "Your search query must contain 3 characters or more.");
		            return ShowDialogToPlayer(playerid, DIALOG_MP3RADIOSEARCH);
		        }

		        pData[playerid][pPage] = 1;
		        pData[playerid][pSearch] = 1;

		        strcpy(pData[playerid][pGenre], inputtext, 32);
                ShowDialogToPlayer(playerid, DIALOG_MP3RADIORESULTS);
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_MP3RADIO);
			}
		}
		case DIALOG_GANGSTASH:
		{
		    if(pData[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
			            ShowDialogToPlayer(playerid, DIALOG_GANGSTASHWEAPONS1);
		            }
		            /*case 1:
		            {
		                SCM(playerid, COLOR_SYNTAX, "This feature is disabled, non-rp.");
		                //ShowDialogToPlayer(playerid, DIALOG_GANGSTASHAMMO1);
		            }*/
		            case 1:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS1);
		            }
					case 2:
					{
					    pData[playerid][pSelected] = ITEM_MATERIALS;
					    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHMATS);
					}
		            case 3:
		            {
		                pData[playerid][pSelected] = ITEM_CASH;
		                ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCASH);
					}
		            case 4:
		            {
		                ShowDialogToPlayer(playerid, DIALOG_GCLOTHES);
					}
		        }
		    }
		}
		case DIALOG_GANGSTASHWEAPONS1:
		{
	        if(pData[playerid][pGang] == -1)
	        {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowPlayerDialog(playerid, DIALOG_GANGSTASHWEAPONS2, DIALOG_STYLE_LIST, "Gang Locker | Weapons", "Withdraw\nDeposit", "Select", "Back");
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
		    }
		}
		case DIALOG_GANGSTASHWEAPONS2:
		{
          	if(pData[playerid][pGang] == -1)
	        {
		        return 1;
		    }
		    if(response)
		    {
				if(listitem == 0)
				{
				    if(pData[playerid][pGangRank] < 1)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 1+ in order to withdraw weapons.");
		            }

				    switch(pData[playerid][pSelected])
				    {
   				        case GANGWEAPON_VEST:
				        {
				            if(pData[playerid][pGangRank] < 1)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw a vest.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_VEST] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any vest left.");
				            }

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_VEST]--;
				            pData[playerid][pVest] += 1;

		                    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vest = %i WHERE uid = %i", pData[playerid][pVest], pData[playerid][pID]);
		                    mysql_tquery(connectionID, queryBuffer);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_vest = weapon_vest - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a vest from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a vest from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
				        case GANGWEAPON_9MM:
				        {
				            if(pData[playerid][pGangRank] < 1)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_9MM] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 22))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_9MM]--;
				            GiveWeapon(playerid, 22);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_9mm = weapon_9mm - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a 9mm from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a 9mm from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
                        case GANGWEAPON_SDPISTOL:
				        {
				            if(pData[playerid][pGangRank] < 1)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 23))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL]--;
				            GiveWeapon(playerid, 23);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sdpistol = weapon_sdpistol - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a silenced pistol from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a silenced pistol from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_DEAGLE:
				        {
				            if(pData[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 24))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE]--;
				            GiveWeapon(playerid, 24);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_deagle = weapon_deagle - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a Desert Eagle from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a Desert Eagle from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SHOTGUN:
				        {
				            if(pData[playerid][pGangRank] < 1)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 25))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN]--;
				            GiveWeapon(playerid, 25);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_shotgun = weapon_shotgun - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a shotgun from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a shotgun from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SPAS12:
				        {
				            if(pData[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SPAS12] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 27))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SPAS12]--;
				            GiveWeapon(playerid, 27);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_spas12 = weapon_spas12 - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a SPAS-12 from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a SPAS-12 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SAWNOFF:
				        {
				            if(pData[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SAWNOFF] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 26))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SAWNOFF]--;
				            GiveWeapon(playerid, 26);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sawnoff = weapon_sawnoff - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a sawnoff shotgun from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a sawnoff shotgun from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
                        case GANGWEAPON_TEC9:
				        {
				            if(pData[playerid][pGangRank] < 3)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_TEC9] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 32))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_TEC9]--;
				            GiveWeapon(playerid, 32);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_tec9 = weapon_tec9 - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a Tec-9 from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a Tec-9 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_UZI:
				        {
				            if(pData[playerid][pGangRank] < 3)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_UZI] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 28))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_UZI]--;
				           // GiveWeapon(playerid, 28);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_uzi = weapon_uzi - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a Micro Uzi from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a Micro Uzi from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_MP5:
				        {
				            if(pData[playerid][pGangRank] < 3)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MP5] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 29))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MP5]--;
				            GiveWeapon(playerid, 29);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_mp5 = weapon_mp5 - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws an MP5 from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws an MP5 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_AK47:
				        {
				            if(pData[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_AK47] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 30))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_AK47]--;
				            GiveWeapon(playerid, 30);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_ak47 = weapon_ak47 - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws an AK-47 from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws an AK-47 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_M4:
				        {
				            if(pData[playerid][pGangRank] < 4)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_M4] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 31))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_M4]--;
				            GiveWeapon(playerid, 31);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_m4 = weapon_m4 - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws an M4 from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws an M4 from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_RIFLE:
				        {
				            if(pData[playerid][pGangRank] < 2)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 33))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE]--;
				            GiveWeapon(playerid, 33);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_rifle = weapon_rifle - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a rifle from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a rifle from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SNIPER:
				        {
				            if(pData[playerid][pGangRank] < 5)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 34))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

							SCM(playerid, COLOR_SYNTAX, "Sniper is temporary disabled");
				            //GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER]--;
				            //GiveWeapon(playerid, 34);

				            //mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sniper = weapon_sniper - 1 WHERE id = %i", pData[playerid][pGang]);
				            //mysql_tquery(connectionID, queryBuffer);

				            //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a sniper rifle from the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) withdraws a sniper rifle from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_MOLOTOV:
				        {
				            if(pData[playerid][pGangRank] < 5)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "Your rank isn't high enough to withdraw this weapon.");
							}
				            if(GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MOLOTOV] <= 0)
				            {
				                return SCM(playerid, COLOR_SYNTAX, "The gang stash doesn't have any of this weapon left.");
				            }
				            if(PlayerHasWeapon(playerid, 18))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You have this weapon already.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MOLOTOV]--;
				            GiveWeapon(playerid, 18);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_molotov = weapon_molotov - 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws a molotov from the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) withdraws a molotov from the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
					}
				}
				else if(listitem == 1)
		        {
                    switch(pData[playerid][pSelected])
				    {
  				        case GANGWEAPON_VEST:
				        {
							if(pData[playerid][pVest] <= 0)
							{
							    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You have no vest left.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_VEST]++;
				            pData[playerid][pVest]--;

		           			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vest = %i WHERE uid = %i", pData[playerid][pVest], pData[playerid][pID]);
							mysql_tquery(connectionID, queryBuffer);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_vest = weapon_vest + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a vest in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a vest in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
				        case GANGWEAPON_9MM:
				        {
				            if(!PlayerHasWeapon(playerid, 22))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}
							if(pData[playerid][pVIPgun2] == 1)
							{
								return SCM(playerid, COLOR_GREY2, "You are not allowed to deposit this gun.");
							}
				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_9MM]++;
				            RemovePlayerWeapon(playerid, 22);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_9mm = weapon_9mm + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a 9mm in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a 9mm in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
                        case GANGWEAPON_SDPISTOL:
				        {
				            if(!PlayerHasWeapon(playerid, 23))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SDPISTOL]++;
				            RemovePlayerWeapon(playerid, 23);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sdpistol = weapon_sdpistol + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a silenced pistol in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a silenced pistol in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_DEAGLE:
				        {
				            if(!PlayerHasWeapon(playerid, 24))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}
	
				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_DEAGLE]++;
				            RemovePlayerWeapon(playerid, 24);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_deagle = weapon_deagle + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a Desert Eagle in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a Desert Eagle in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SHOTGUN:
				        {
				            if(!PlayerHasWeapon(playerid, 25))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}
				
							if(pData[playerid][pVIPgun5] == 1)
							{
								return SCM(playerid, COLOR_GREY2, "You are not allowed to deposit this gun.");
							}
				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SHOTGUN]++;
				            RemovePlayerWeapon(playerid, 25);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_shotgun = weapon_shotgun + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a shotgun in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a shotgun in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SPAS12:
				        {
				            if(!PlayerHasWeapon(playerid, 27))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SPAS12]++;
				            RemovePlayerWeapon(playerid, 27);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_spas12 = weapon_spas12 + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a SPAS-12 in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a SPAS-12 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SAWNOFF:
				        {
				            if(!PlayerHasWeapon(playerid, 26))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SAWNOFF]++;
				            RemovePlayerWeapon(playerid, 26);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sawnoff = weapon_sawnoff + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a sawnoff shotgun in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a sawnoff shotgun in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
                        case GANGWEAPON_TEC9:
				        {
				            if(!PlayerHasWeapon(playerid, 32))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}
				
				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_TEC9]++;
				            RemovePlayerWeapon(playerid, 32);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_tec9 = weapon_tec9 + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a Tec-9 in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a Tec-9 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_UZI:
				        {
				            if(!PlayerHasWeapon(playerid, 28))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_UZI]++;
				            RemovePlayerWeapon(playerid, 28);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_uzi = weapon_uzi + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a Micro Uzi in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a Micro Uzi in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_MP5:
				        {
				            if(!PlayerHasWeapon(playerid, 29))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}
	
							if(pData[playerid][pVIPgun4] == 1)
							{
								return SCM(playerid, COLOR_GREY2, "You are not allowed to deposit this gun.");
							}
				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MP5]++;
				            RemovePlayerWeapon(playerid, 29);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_mp5 = weapon_mp5 + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits an MP5 in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits an MP5 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_AK47:
				        {
				            if(!PlayerHasWeapon(playerid, 30))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_AK47]++;
				            RemovePlayerWeapon(playerid, 30);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_ak47 = weapon_ak47 + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits an AK-47 in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits an AK-47 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_M4:
				        {
				            if(!PlayerHasWeapon(playerid, 31))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_M4]++;
				            RemovePlayerWeapon(playerid, 31);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_m4 = weapon_m4 + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits an M4 in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits an M4 in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_RIFLE:
				        {
				            if(!PlayerHasWeapon(playerid, 33))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_RIFLE]++;
				            RemovePlayerWeapon(playerid, 33);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_rifle = weapon_rifle + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a rifle in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a rifle in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_SNIPER:
				        {
				            if(!PlayerHasWeapon(playerid, 34))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

							SCM(playerid, COLOR_SYNTAX, "Sniper is temporary disabled");
				            //GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_SNIPER]++;
				           // RemovePlayerWeapon(playerid, 34);

				            //mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_sniper = weapon_sniper + 1 WHERE id = %i", pData[playerid][pGang]);
				            //mysql_tquery(connectionID, queryBuffer);

				            //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a sniper rifle in the gang stash.", GetRPName(playerid));
				            //Log_Write("log_gang", "%s (uid: %i) deposits a sniper rifle in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
						case GANGWEAPON_MOLOTOV:
				        {
				            if(!PlayerHasWeapon(playerid, 18))
				            {
				                return SCM(playerid, COLOR_SYNTAX, "You don't have this weapon.");
							}

				            GangInfo[pData[playerid][pGang]][gWeapons][GANGWEAPON_MOLOTOV]++;
				            RemovePlayerWeapon(playerid, 18);

				            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET weapon_molotov = weapon_molotov + 1 WHERE id = %i", pData[playerid][pGang]);
				            mysql_tquery(connectionID, queryBuffer);

				            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits a molotov in the gang stash.", GetRPName(playerid));
				            Log_Write("log_gang", "%s (uid: %i) deposits a molotov in the %s (id: %i) gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
						}
					}
				}
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHWEAPONS1);
			}
		}
		case DIALOG_GANGSTASHDRUGS1:
		{
		    if(pData[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: pData[playerid][pSelected] = ITEM_WEED;
		            case 1: pData[playerid][pSelected] = ITEM_COCAINE;
		            case 2: pData[playerid][pSelected] = ITEM_METH;
		            case 3: pData[playerid][pSelected] = ITEM_PAINKILLERS;
		        }

				ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS2);
		    }
			else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
			}
		}
		case DIALOG_GANGSTASHDRUGS2:
		{
		    if(pData[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        if(listitem == 0)
		        {
		            if(pData[playerid][pGangRank] < 2)
		            {
		                return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 2+ in order to withdraw drugs.");
		            }

		            ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
		        }
		        else if(listitem == 1)
		        {
		            ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
		        }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS1);
			}
		}
		case DIALOG_GANGSTASHAMMO1:
		{
		    if(pData[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: pData[playerid][pSelected] = ITEM_HPAMMO;
		            case 1: pData[playerid][pSelected] = ITEM_POISONAMMO;
		            case 2: pData[playerid][pSelected] = ITEM_FMJAMMO;
		        }

				ShowDialogToPlayer(playerid, DIALOG_GANGSTASHAMMO2);
		    }
			else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
			}
		}
		case DIALOG_GANGSTASHAMMO2:
		{
		    if(pData[playerid][pGang] == -1)
		    {
		        return 1;
			}

		    if(response)
		    {
		        if(listitem == 0)
		        {
		            if(pData[playerid][pGangRank] < 5)
		            {
		                return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 5+ in order to withdraw ammo.");
		            }

		            ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
		        }
		        else if(listitem == 1)
		        {
		            ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
		        }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHAMMO1);
			}
		}
		case DIALOG_GANGWITHDRAW:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 3)
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    if(sscanf(inputtext, "i", amount))
			    {
			        return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}

				switch(pData[playerid][pSelected])
				{
				    case ITEM_WEED:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gPot])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pPot] + amount > GetPlayerCapacity(CAPACITY_WEED))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gPot] -= amount;
						pData[playerid][pPot] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPot], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some pot from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i grams of pot from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i grams of pot from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_COCAINE:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gCrack])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pCrack] + amount > GetPlayerCapacity(CAPACITY_COCAINE))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gCrack] -= amount;
						pData[playerid][pCrack] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET crack = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gCrack], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some Crack from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i grams of Crack from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i grams of Crack from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
                    case ITEM_METH:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gMeth])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pMeth] + amount > GetPlayerCapacity(CAPACITY_METH))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gMeth] -= amount;
						pData[playerid][pMeth] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET meth = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gMeth], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some meth from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i grams of meth from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i grams of meth from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_PAINKILLERS:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gPainkillers])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pPainkillers] + amount > GetPlayerCapacity(CAPACITY_PAINKILLERS))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPainkillers], GetPlayerCapacity(CAPACITY_PAINKILLERS));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gPainkillers] -= amount;
						pData[playerid][pPainkillers] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET painkillers = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPainkillers], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some painkillers from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i painkillers from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i painkillers from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_MATERIALS:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gMaterials])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pMaterials] + amount > GetPlayerCapacity(CAPACITY_MATERIALS))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gMaterials] -= amount;
						pData[playerid][pMaterials] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET materials = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gMaterials], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some materials from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i materials from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i materials from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_CASH:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gCash])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gCash] -= amount;
						GivePlayerCash(playerid, amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gCash], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some cash from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn $%i from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws $%i from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_HPAMMO:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gHPAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pHPAmmo] + amount > GetPlayerCapacity(CAPACITY_HPAMMO))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i HP ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pHPAmmo], GetPlayerCapacity(CAPACITY_HPAMMO));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gHPAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET hpammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gHPAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some hollow point ammo from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i rounds of hollow point ammo from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i hollow point ammo from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_POISONAMMO:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gPoisonAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pPoisonAmmo] + amount > GetPlayerCapacity(CAPACITY_POISONAMMO))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i poison ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPoisonAmmo], GetPlayerCapacity(CAPACITY_POISONAMMO));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gPoisonAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET poisonammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPoisonAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some poison tip ammo from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i rounds of poison tip ammo from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i poison tip ammo from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_FMJAMMO:
				    {
				        if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gFMJAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}
						if(pData[playerid][pFMJAmmo] + amount > GetPlayerCapacity(CAPACITY_FMJAMMO))
						{
						    SM(playerid, COLOR_SYNTAX, "You currently have %i/%i FMJ ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pFMJAmmo], GetPlayerCapacity(CAPACITY_FMJAMMO));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gFMJAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET fmjammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gFMJAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s withdraws some full metal jacket ammo from the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have withdrawn %i rounds of full metal jacket ammo from the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) withdraws %i FMJ ammo from the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
				}
			}
			else
			{
			    if(pData[playerid][pSelected] == ITEM_MATERIALS) {
			        ShowDialogToPlayer(playerid, DIALOG_GANGSTASHMATS);
				} else if(pData[playerid][pSelected] == ITEM_CASH) {
					ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCASH);
				} else if(ITEM_HPAMMO <= pData[playerid][pSelected] <= ITEM_FMJAMMO) {
					ShowDialogToPlayer(playerid, DIALOG_GANGSTASHAMMO2);
				} else {
				    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS2);
				}
			}
		}
		case DIALOG_GANGDEPOSIT:
		{
		    if(pData[playerid][pGang] == -1)
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    if(sscanf(inputtext, "i", amount))
			    {
			        return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}

				switch(pData[playerid][pSelected])
				{
				    case ITEM_WEED:
				    {
				        if(amount < 1 || amount > pData[playerid][pPot])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gPot] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_WEED))
						{
						    SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i grams of pot.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_WEED));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gPot] += amount;
						pData[playerid][pPot] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPot], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some pot in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i grams of pot in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i grams of pot in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_COCAINE:
				    {
				        if(amount < 1 || amount > pData[playerid][pCrack])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gCrack] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_COCAINE))
						{
						    SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i grams of Crack.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_COCAINE));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gCrack] += amount;
						pData[playerid][pCrack] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET crack = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gCrack], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some Crack in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i grams of Crack in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i grams of Crack in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
                    case ITEM_METH:
				    {
				        if(amount < 1 || amount > pData[playerid][pMeth])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gMeth] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_METH))
						{
						    SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i grams of meth.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_METH));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gMeth] += amount;
						pData[playerid][pMeth] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET meth = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gMeth], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some meth in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i grams of meth in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i grams of meth in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_PAINKILLERS:
				    {
				        if(amount < 1 || amount > pData[playerid][pPainkillers])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gPainkillers] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_PAINKILLERS))
						{
						    SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i painkillers.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_PAINKILLERS));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gPainkillers] += amount;
						pData[playerid][pPainkillers] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET painkillers = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPainkillers], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some painkillers in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i painkillers in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i painkillers in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_MATERIALS:
				    {
				        if(amount < 1 || amount > pData[playerid][pMaterials])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gMaterials] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_MATERIALS))
						{
						    SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i materials.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_MATERIALS));
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gMaterials] += amount;
						pData[playerid][pMaterials] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET materials = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gMaterials], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some materials in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i materials in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i materials in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_CASH:
				    {
				        if(amount < 1 || amount > pData[playerid][pCash])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gCash] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_CASH))
						{
							SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than $%i.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_CASH));
							return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gCash] += amount;
						GivePlayerCash(playerid, -amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET cash = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gCash], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some cash in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited $%i in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposited $%i in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_HPAMMO:
				    {
				        if(amount < 1 || amount > pData[playerid][pHPAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gHPAmmo] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_HPAMMO))
						{
							SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i rounds of hollow point ammo.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_HPAMMO));
							return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gHPAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET hpammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gHPAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some hollow point ammo in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i rounds of hollow point ammo in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i hollow point ammo in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_POISONAMMO:
				    {
				        if(amount < 1 || amount > pData[playerid][pPoisonAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gPoisonAmmo] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_POISONAMMO))
						{
							SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i rounds of poison tip ammo.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_POISONAMMO));
							return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gPoisonAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET poisonammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPoisonAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some poison tip ammo in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i rounds of poison tip ammo in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i poison tip ammo in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
					case ITEM_FMJAMMO:
				    {
				        if(amount < 1 || amount > pData[playerid][pFMJAmmo])
				        {
				            SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				            return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}
						if(GangInfo[pData[playerid][pGang]][gFMJAmmo] + amount > GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_FMJAMMO))
						{
							SM(playerid, COLOR_SYNTAX, "The gang stash can't contain more than %i rounds of FMJ ammo.", GetGangStashCapacity(pData[playerid][pGang], STASH_CAPACITY_FMJAMMO));
							return ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
						}

						GangInfo[pData[playerid][pGang]][gFMJAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET fmjammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gFMJAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s deposits some full metal jacket ammo in the gang stash.", GetRPName(playerid));
						SM(playerid, COLOR_AQUA, "** You have deposited %i rounds of full metal jacket ammo in the gang stash.", amount);
						Log_Write("log_gang", "%s (uid: %i) deposits %i FMJ ammo in the gang stash.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
					}
				}
			}
			else
			{
				if(pData[playerid][pSelected] == ITEM_MATERIALS) {
			        ShowDialogToPlayer(playerid, DIALOG_GANGSTASHMATS);
				} else if(pData[playerid][pSelected] == ITEM_CASH) {
					ShowDialogToPlayer(playerid, DIALOG_GANGSTASHCASH);
				} else if(ITEM_HPAMMO <= pData[playerid][pSelected] <= ITEM_FMJAMMO) {
					ShowDialogToPlayer(playerid, DIALOG_GANGSTASHAMMO2);
				} else {
				    ShowDialogToPlayer(playerid, DIALOG_GANGSTASHDRUGS2);
				}
			}
		}
		case DIALOG_GANGSTASHMATS:
		{
		    if(response)
		    {
		        if(listitem == 0)
				{
				    if(pData[playerid][pGangRank] < 5)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 5+ in order to withdraw materials.");
		            }

					ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}
				else if(listitem == 1)
				{
					ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}
			}
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
		    }
		}
		case DIALOG_GANGSTASHCASH:
		{
		    if(response)
		    {
		        if(listitem == 0)
				{
				    if(pData[playerid][pGangRank] < 6)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 6+ in order to withdraw cash.");
		            }

					ShowDialogToPlayer(playerid, DIALOG_GANGWITHDRAW);
				}
				else if(listitem == 1)
				{
					ShowDialogToPlayer(playerid, DIALOG_GANGDEPOSIT);
				}
			}
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
		    }
		}
		case DIALOG_GANGSKINS:
		{
		    if(pData[playerid][pGang] >= 0)
		    {
		        if(response)
		        {
					new index = pData[playerid][pSkinSelected] + 1;

					if(index >= MAX_GANG_SKINS)
					{
					    // When the player is shown the dialog for the first time, their skin isn't chnaged until they click >> Next.
					    SetPlayerSkin(playerid, pData[playerid][pSkin]);
					    pData[playerid][pSkinSelected] = -1;
					}
					else
					{
					    // Find the next skin in the array.
						for(new i = index; i < MAX_GANG_SKINS; i ++)
						{
						    if(GangInfo[pData[playerid][pGang]][gSkins][i] != 0)
						    {
						        SetPlayerSkin(playerid, GangInfo[pData[playerid][pGang]][gSkins][i]);
						        pData[playerid][pSkinSelected] = i;
						        break;
					        }
		                }

		                if(index == pData[playerid][pSkinSelected] + 1)
		                {
		                    // Looks like there was no skin found. So, we'll go back to the very first valid skin in the skin array.
		                    for(new i = 0; i < MAX_GANG_SKINS; i ++)
							{
						    	if(GangInfo[pData[playerid][pGang]][gSkins][i] != 0)
						    	{
		                            SetPlayerSkin(playerid, GangInfo[pData[playerid][pGang]][gSkins][i]);
						        	pData[playerid][pSkinSelected] = i;
						        	break;
								}
							}
		                }
		            }

		            ShowPlayerDialog(playerid, DIALOG_GANGSKINS, DIALOG_STYLE_MSGBOX, "Skin selection", "Press "SVRCLR">> Next{A9C4E4} to browse through available gang skins.", ">> Next", "Confirm");
		        }
		        else
		        {
		            pData[playerid][pSkin] = GetPlayerSkin(playerid);
		            pData[playerid][pSkinSelected] = -1;

		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", pData[playerid][pSkin], pData[playerid][pID]);
		            mysql_tquery(connectionID, queryBuffer);

		            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s changes their clothes.", GetRPName(playerid));
				}
		    }
		}
		case DIALOG_GANGFINDCAR:
		{
		    if(response)
		    {
		        new count, garageid;

		        for(new i = 1; i < MAX_VEHICLES; i ++)
			 	{
			 	    if((VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == pData[playerid][pGang]) && (count++ == listitem))
			 	    {
                        pData[playerid][pCP] = CHECKPOINT_MISC;

			            if((garageid = GetVehicleGarage(i)) >= 1)
			            {
			                SetPlayerCheckpoint(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], 3.0);
			                SM(playerid, COLOR_YELLOW, "** This %s is located in a garage. Checkpoint marked at the garage's location.", GetVehicleName(i));
			            }
			            else
			            {
			                new
			                    Float:x,
			                    Float:y,
			                    Float:z;

			                GetVehiclePos(i, x, y, z);
			                SetPlayerCheckpoint(playerid, x, y, z, 3.0);
			                SM(playerid, COLOR_YELLOW, "** This %s is located in %s. Checkpoint marked at the location.", GetVehicleName(i), GetZoneName(x, y, z));
			            }

			            return 1;
		            }
				}
			}
		}
		case DIALOG_GANGPOINTSHOP:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 6)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        switch(listitem)
		        {
		            //case 0:
		            //{
		            //    if(GangInfo[pData[playerid][pGang]][gPoints] < 500)
		            //    {
		            //        return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have enough points.");
					//	}
					//	if(pData[playerid][pCash] < 50000)
					//	{
					//	    return SCM(playerid, COLOR_SYNTAX, "You need $50000 on hand to purchase this upgrade.");
					//	}
					//	if(GangInfo[pData[playerid][pGang]][gDrugDealer])
					//	{
					//	    return SCM(playerid, COLOR_SYNTAX, "Your gang already has this upgrade.");
					//	}
					//
					//	GangInfo[pData[playerid][pGang]][gDrugDealer] = 1;
					//	GangInfo[pData[playerid][pGang]][gDrugX] = 0.0;
					//	GangInfo[pData[playerid][pGang]][gDrugY] = 0.0;
					//	GangInfo[pData[playerid][pGang]][gDrugZ] = 0.0;
					//	GangInfo[pData[playerid][pGang]][gDrugPot] = 0;
					//	GangInfo[pData[playerid][pGang]][gDrugMeth] = 0;
					//	GangInfo[pData[playerid][pGang]][gDrugCrack] = 0;
					//	GangInfo[pData[playerid][pGang]][gDrugPrices][0] = 500;
					//	GangInfo[pData[playerid][pGang]][gDrugPrices][1] = 1000;
					//	GangInfo[pData[playerid][pGang]][gDrugPrices][2] = 1500;
					//	GangInfo[pData[playerid][pGang]][gPoints] -= 500;
					//
					//	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugdealer = 1, drug_x = 0.0, drug_y = 0.0, drug_z = 0.0, drugpot = 0, drugcrack = 0, drugmeth = 0, pot_price = 500, crack_price = 1000, meth_price = 1500, points = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPoints], pData[playerid][pGang]);
					//	mysql_tquery(connectionID, queryBuffer);
					//
					//	GivePlayerCash(playerid, -50000);
					//	SCM(playerid, COLOR_AQUA, "You have spent 500 GP & $50000 on an "SVRCLR"NPC drug dealer{CCFFFF}. '/gang npc' to edit your drug dealer.");
					//	Log_Write("log_gang", "%s (uid: %i) spent 500 GP & $50000 on an NPC drug dealer for %s (id: %i).", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
					//}
					//case 1:
		            //{
		            //    if(GangInfo[pData[playerid][pGang]][gPoints] < 500)
		            //    {
		            //        return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have enough points.");
					//	}
					//	if(pData[playerid][pCash] < 50000)
					//	{
					//	    return SCM(playerid, COLOR_SYNTAX, "You need $50000 on hand to purchase this upgrade.");
					//	}
					//	if(GangInfo[pData[playerid][pGang]][gArmsDealer])
					//	{
					//	    return SCM(playerid, COLOR_SYNTAX, "Your gang already has this upgrade.");
					//	}
					//
					//	GangInfo[pData[playerid][pGang]][gArmsDealer] = 1;
					//	GangInfo[pData[playerid][pGang]][gArmsX] = 0.0;
					//	GangInfo[pData[playerid][pGang]][gArmsY] = 0.0;
					//	GangInfo[pData[playerid][pGang]][gArmsZ] = 0.0;
					//	GangInfo[pData[playerid][pGang]][gArmsMaterials] = 0;
					//	GangInfo[pData[playerid][pGang]][gPoints] -= 500;
					//
					//	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsdealer = 1, arms_x = 0.0, arms_y = 0.0, arms_z = 0.0, armsmaterials = 0, points = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPoints], pData[playerid][pGang]);
					//	mysql_tquery(connectionID, queryBuffer);
					//
					//	GivePlayerCash(playerid, -50000);
					//	SCM(playerid, COLOR_AQUA, "You have spent 500 GP & $50000 on an "SVRCLR"NPC arms dealer{CCFFFF}. '/gang npc' to edit your arms dealer.");
					//	Log_Write("log_gang", "%s (uid: %i) spent 500 GP & $50000 on an NPC arm dealer for %s (id: %i).", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
					//}
					case 2:
					{
					    switch(GangInfo[pData[playerid][pGang]][gLevel])
					    {
					        case 1:
					        {
					            if(GangInfo[pData[playerid][pGang]][gPoints] < 6000)
				                {
				                    return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have enough points.");
								}
								if(pData[playerid][pCash] < 1000000)
								{
								    return SCM(playerid, COLOR_SYNTAX, "You need $1000000 on hand to purchase this upgrade.");
								}

								GangInfo[pData[playerid][pGang]][gLevel] = 2;
								GangInfo[pData[playerid][pGang]][gPoints] -= 6000;

								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET level = 2, points = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPoints], pData[playerid][pGang]);
								mysql_tquery(connectionID, queryBuffer);

								GivePlayerCash(playerid, -1000000);
								ReloadGang(pData[playerid][pGang]);

								SM(playerid, COLOR_YELLOW, "You have spent 6000 GP & $1000000 for gang level 2/3. Your gang can now have %i members & %i gang vehicles.", GetGangMemberLimit(pData[playerid][pGang]), GetGangVehicleLimit(pData[playerid][pGang]));
								SCM(playerid, COLOR_YELLOW, "Your capacity for items in your gang stash has also been increased. Access your gang stash to learn more!");

								Log_Write("log_gang", "%s (uid: %i) spent 6000 GP & $1000000 for gang level 2/3 for %s (id: %i).", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
							}
							case 2:
					        {
					            if(GangInfo[pData[playerid][pGang]][gPoints] < 12000)
				                {
				                    return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have enough points.");
								}
								if(pData[playerid][pCash] < 2000000)
								{
								    return SCM(playerid, COLOR_SYNTAX, "You need $2000000 on hand to purchase this upgrade.");
								}

								GangInfo[pData[playerid][pGang]][gLevel] = 3;
								GangInfo[pData[playerid][pGang]][gPoints] -= 12000;

								mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET level = 3, points = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gPoints], pData[playerid][pGang]);
								mysql_tquery(connectionID, queryBuffer);

								GivePlayerCash(playerid, -2000000);
								ReloadGang(pData[playerid][pGang]);

								SM(playerid, COLOR_YELLOW, "You have spent 12000 GP & $2000000 for gang level 3/3. Your gang can now have %i members & %i gang vehicles.", GetGangMemberLimit(pData[playerid][pGang]), GetGangVehicleLimit(pData[playerid][pGang]));
								SCM(playerid, COLOR_YELLOW, "Your capacity for items in your gang stash has also been increased. Access your gang stash to learn more!");

								Log_Write("log_gang", "%s (uid: %i) spent 12000 GP & $2000000 for gang level 3/3 for %s (id: %i).", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang]);
							}
						}
					}
		        }
		    }
		}
		case DIALOG_GANGARMSPRICES:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICE, DIALOG_STYLE_INPUT, "Arms dealer | Prices", "Enter the new price for this item:", "Submit", "Back");
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
			}
		}
		case DIALOG_GANGARMSPRICE:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        if(sscanf(inputtext, "i", amount))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICE, DIALOG_STYLE_INPUT, "Arms dealer | Prices", "Enter the new price for this item", "Submit", "Back");
				}
				if(amount < 0)
				{
				    SCM(playerid, COLOR_SYNTAX, "The amount can't be below $0.");
				    return ShowPlayerDialog(playerid, DIALOG_GANGARMSPRICE, DIALOG_STYLE_INPUT, "Arms dealer | Prices", "Enter the new price for this item", "Submit", "Back");
				}

				GangInfo[pData[playerid][pGang]][gArmsPrices][pData[playerid][pSelected]] = amount;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsprice_%i = %i WHERE id = %i", pData[playerid][pSelected] + 1, amount, pData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				if(pData[playerid][pSelected] == 0) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Micro Uzi{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 1) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Tec-9{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 2) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"MP5{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 3) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Desert Eagle{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 4) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Molotov{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 5) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"AK-47{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 6) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"M4{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 7) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Sniper{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 8) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Sawnoff Shotgun{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 9) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Hollow Point Ammo{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 10) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"Poison Tip Ammo{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 11) {
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"FMJ Ammo{CCFFFF} to $%i.", amount);
		        }
		    }

		    ShowDialogToPlayer(playerid, DIALOG_GANGARMSPRICES);
		}
		case DIALOG_GANGARMSDEALER:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gArmsX], GangInfo[pData[playerid][pDealerGang]][gArmsY], GangInfo[pData[playerid][pDealerGang]][gArmsZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    if(listitem == 0)
			    {
					ShowDialogToPlayer(playerid, DIALOG_GANGARMSWEAPONS);
				}
				else if(listitem == 1)
				{
				    ShowDialogToPlayer(playerid, DIALOG_GANGARMSAMMO);
				}
				else if(listitem == 2)
				{
				    if(pData[playerid][pGang] != pData[playerid][pDealerGang])
				    {
				        return SCM(playerid, COLOR_SYNTAX, "This arms dealer doesn't belong to your gang.");
				    }
				    if(pData[playerid][pGangRank] < 6)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You need to be rank 6+ in order to edit.");
					}

					ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
				}
			}
		}
		case DIALOG_GANGARMSWEAPONS:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gArmsX], GangInfo[pData[playerid][pDealerGang]][gArmsY], GangInfo[pData[playerid][pDealerGang]][gArmsZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    switch(listitem)
			    {
			        case 0:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 500)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 500;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            //GiveWeapon(playerid, 28);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a micro uzi.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "SVRCLR"micro uzi{CCFFFF} for $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 1:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 500)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 500;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 32);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a Tec-9.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "SVRCLR"Tec-9{CCFFFF} for $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 2:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 1000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 1000;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 29);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received an MP5.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased an "SVRCLR"MP5{CCFFFF} for $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 3:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 2000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 2000;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 24);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a Desert Eagle.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "SVRCLR"Desert Eagle{CCFFFF} for $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 4:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 5000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 5000;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 18);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a molotov.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "SVRCLR"molotov{CCFFFF} for $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 5:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 3000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 3000;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 30);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received an AK-47.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased an "SVRCLR"AK-47{CCFFFF} for $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 6:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 4000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 4000;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 31);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received an M4.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased an "SVRCLR"M4{CCFFFF} for $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 7:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 6500)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }


			            SCM(playerid, COLOR_SYNTAX, "Sniper is temporary disabled");

			            //GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 6500;
			            //GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            //mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            //mysql_tquery(connectionID, queryBuffer);

			            //GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            //GiveWeapon(playerid, 34);

			            //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a sniper.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            //SM(playerid, COLOR_AQUA, "You have purchased a "SVRCLR"sniper{CCFFFF} for $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
			        case 8:
			        {
			            if(GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] < 3000)
			            {
			                return SCM(playerid, COLOR_SYNTAX, "This gang's arms dealer doesn't have enough materials for this weapon.");
						}
						if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem])
						{
						    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this weapon.");
			            }

			            GangInfo[pData[playerid][pDealerGang]][gArmsMaterials] -= 3000;
			            GangInfo[pData[playerid][pDealerGang]][gCash] += GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem];

			            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsMaterials], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
			            mysql_tquery(connectionID, queryBuffer);

			            GivePlayerCash(playerid, -GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            GiveWeapon(playerid, 26);

			            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received a sawnoff shotgun.", GetRPName(playerid), GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			            SM(playerid, COLOR_AQUA, "You have purchased a "SVRCLR"sawnoff shotgun{CCFFFF} for $%i.", GangInfo[pData[playerid][pDealerGang]][gArmsPrices][listitem]);
			        }
				}
			}
			else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
			}
		}

		case DIALOG_GANGARMSAMMO:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gArmsX], GangInfo[pData[playerid][pDealerGang]][gArmsY], GangInfo[pData[playerid][pDealerGang]][gArmsZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    pData[playerid][pSelected] = listitem;
			    ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
			}
		}

  		case DIALOG_GANGAMMOBUY:
		{
            if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gArmsX], GangInfo[pData[playerid][pDealerGang]][gArmsY], GangInfo[pData[playerid][pDealerGang]][gArmsZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    switch(pData[playerid][pSelected])
			    {
			        case 0: // Hollow point ammo
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pDealerGang]][gArmsHPAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][9] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many rounds.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(pData[playerid][pHPAmmo] + amount > GetPlayerCapacity(CAPACITY_HPAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i HP ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pHPAmmo], GetPlayerCapacity(CAPACITY_HPAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}

						new cost = GangInfo[pData[playerid][pDealerGang]][gArmsPrices][9] * amount;

						GangInfo[pData[playerid][pDealerGang]][gArmsHPAmmo] -= amount;
						GangInfo[pData[playerid][pDealerGang]][gCash] += cost;

						SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] + amount);
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armshpammo = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsHPAmmo], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received %i rounds of hollow point ammo.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i rounds of "SVRCLR"hollow point ammo{CCFFFF} for $%i.", amount, cost);
					}
					case 1: // Poison tip ammo
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pDealerGang]][gArmsPoisonAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][10] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many rounds.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(pData[playerid][pPoisonAmmo] + amount > GetPlayerCapacity(CAPACITY_POISONAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i poison ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPoisonAmmo], GetPlayerCapacity(CAPACITY_POISONAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}

						new cost = GangInfo[pData[playerid][pDealerGang]][gArmsPrices][10] * amount;

						GangInfo[pData[playerid][pDealerGang]][gArmsPoisonAmmo] -= amount;
						GangInfo[pData[playerid][pDealerGang]][gCash] += cost;

						SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] + amount);
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armspoisonammo = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsPoisonAmmo], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received %i rounds of poison tip ammo.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i rounds of "SVRCLR"poison tip ammo{CCFFFF} for $%i.", amount, cost);
					}
					case 2: // FMJ ammo
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pDealerGang]][gArmsFMJAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gArmsPrices][11] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many rounds.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
			            }
			            if(pData[playerid][pFMJAmmo] + amount > GetPlayerCapacity(CAPACITY_FMJAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i FMJ ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pFMJAmmo], GetPlayerCapacity(CAPACITY_FMJAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOBUY);
						}

						new cost = GangInfo[pData[playerid][pDealerGang]][gArmsPrices][11] * amount;

						GangInfo[pData[playerid][pDealerGang]][gArmsFMJAmmo] -= amount;
						GangInfo[pData[playerid][pDealerGang]][gCash] += cost;

						SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] + amount);
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsfmjammo = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gArmsFMJAmmo], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the arms dealer and received %i rounds of FMJ ammo.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i rounds of "SVRCLR"FMJ ammo{CCFFFF} for $%i.", amount, cost);
					}
		        }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSAMMO);
			}
		}
		case DIALOG_GANGARMSEDIT:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 6)
		    {
		        return 1;
			}

			if(response)
			{
			    switch(listitem)
			    {
			        case 0: ShowDialogToPlayer(playerid, DIALOG_GANGARMSPRICES);
					case 1: ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEPOSITMATS);
					case 2: ShowDialogToPlayer(playerid, DIALOG_GANGARMSWITHDRAWMATS);
					case 3: ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSITS);
					case 4: ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAWS);
			    }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEALER);
			}
		}
		case DIALOG_GANGARMSDEPOSITMATS:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 6)
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    if(sscanf(inputtext, "i", amount))
			    {
			        return ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEPOSITMATS);
				}
				if(amount < 1 || amount > pData[playerid][pMaterials])
				{
				    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			        return ShowDialogToPlayer(playerid, DIALOG_GANGARMSDEPOSITMATS);
			    }

			    GangInfo[pData[playerid][pGang]][gArmsMaterials] += amount;
			    pData[playerid][pMaterials] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsMaterials], pData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_AQUA, "You have deposited %i materials in your arms dealer NPC.", amount);
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
		}
		case DIALOG_GANGARMSWITHDRAWMATS:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 6)
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    if(sscanf(inputtext, "i", amount))
			    {
			        return ShowDialogToPlayer(playerid, DIALOG_GANGARMSWITHDRAWMATS);
				}
				if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gArmsMaterials])
				{
				    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			        return ShowDialogToPlayer(playerid, DIALOG_GANGARMSWITHDRAWMATS);
			    }

			    GangInfo[pData[playerid][pGang]][gArmsMaterials] -= amount;
			    pData[playerid][pMaterials] += amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsmaterials = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsMaterials], pData[playerid][pGang]);
				mysql_tquery(connectionID, queryBuffer);

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
				mysql_tquery(connectionID, queryBuffer);

				SM(playerid, COLOR_AQUA, "You have withdrawn %i materials from your arms dealer NPC.", amount);
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
		}
		case DIALOG_GANGAMMODEPOSITS:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
		    }
		}
		case DIALOG_GANGAMMOWITHDRAWS:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGARMSEDIT);
		    }
		}
		case DIALOG_GANGAMMODEPOSIT:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        switch(pData[playerid][pSelected])
		        {
		            case 0: // HP ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
						}
						if(amount < 1 || amount > pData[playerid][pHPAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
			            }

						GangInfo[pData[playerid][pGang]][gArmsHPAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armshpammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsHPAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i rounds of "SVRCLR"hollow point ammo{CCFFFF} in your arms dealer NPC.", amount);
					}
					case 1: // Poison ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
						}
						if(amount < 1 || amount > pData[playerid][pPoisonAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
			            }

						GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armspoisonammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i rounds of "SVRCLR"poison tip ammo{CCFFFF} in your arms dealer NPC.", amount);
					}
					case 2: // FMJ ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
						}
						if(amount < 1 || amount > pData[playerid][pFMJAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSIT);
			            }

						GangInfo[pData[playerid][pGang]][gArmsFMJAmmo] += amount;
						SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] - amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsfmjammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsFMJAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i rounds of "SVRCLR"FMJ ammo{CCFFFF} in your arms dealer NPC.", amount);
					}
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGAMMODEPOSITS);
		}
		case DIALOG_GANGAMMOWITHDRAW:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        switch(pData[playerid][pSelected])
		        {
		            case 0: // HP ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gArmsHPAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
			            }
			            if(pData[playerid][pHPAmmo] + amount > GetPlayerCapacity(CAPACITY_HPAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i HP ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pHPAmmo], GetPlayerCapacity(CAPACITY_HPAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gArmsHPAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armshpammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsHPAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i rounds of "SVRCLR"hollow point ammo{CCFFFF} from your arms dealer NPC.", amount);
					}
					case 1: // Poison ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
			            }
			            if(pData[playerid][pPoisonAmmo] + amount > GetPlayerCapacity(CAPACITY_POISONAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i poison ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPoisonAmmo], GetPlayerCapacity(CAPACITY_POISONAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armspoisonammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsPoisonAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i rounds of "SVRCLR"poison tip ammo{CCFFFF} from your arms dealer NPC.", amount);
					}
					case 2: // FMJ ammo
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gArmsFMJAmmo])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
			            }
			            if(pData[playerid][pFMJAmmo] + amount > GetPlayerCapacity(CAPACITY_FMJAMMO))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i FMJ ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pFMJAmmo], GetPlayerCapacity(CAPACITY_FMJAMMO));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gArmsFMJAmmo] -= amount;
						SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] + amount);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET armsfmjammo = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsFMJAmmo], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i rounds of "SVRCLR"FMJ ammo{CCFFFF} from your arms dealer NPC.", amount);
					}
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGAMMOWITHDRAWS);
		}
		case DIALOG_GANGDRUGDEALER:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gDrugX], GangInfo[pData[playerid][pDealerGang]][gDrugY], GangInfo[pData[playerid][pDealerGang]][gDrugZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    if(listitem == 0)
			    {
					ShowDialogToPlayer(playerid, DIALOG_GANGDRUGSHOP);
				}
				else if(listitem == 1)
				{
				    if(pData[playerid][pGang] != pData[playerid][pDealerGang])
				    {
				        return SCM(playerid, COLOR_SYNTAX, "This drug dealer doesn't belong to your gang.");
				    }
				    if(pData[playerid][pGangRank] < 6)
				    {
				        return SCM(playerid, COLOR_SYNTAX, "You need to be rank 6+ in order to edit.");
					}

					ShowDialogToPlayer(playerid, DIALOG_GANGDRUGEDIT);
				}
			}
		}
		case DIALOG_GANGDRUGSHOP:
		{
		    if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gDrugX], GangInfo[pData[playerid][pDealerGang]][gDrugY], GangInfo[pData[playerid][pDealerGang]][gDrugZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    pData[playerid][pSelected] = listitem;
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEALER);
			}
		}
		case DIALOG_GANGDRUGBUY:
		{
            if(!IsPlayerInRangeOfPoint(playerid, 3.0, GangInfo[pData[playerid][pDealerGang]][gDrugX], GangInfo[pData[playerid][pDealerGang]][gDrugY], GangInfo[pData[playerid][pDealerGang]][gDrugZ]))
		    {
		        return 1;
			}

			if(response)
			{
			    new amount;

			    switch(pData[playerid][pSelected])
			    {
			        case 0: // Pot
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pDealerGang]][gDrugPot])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gDrugPrices][0] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(pData[playerid][pPot] + amount > GetPlayerCapacity(CAPACITY_WEED))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}

						new cost = GangInfo[pData[playerid][pDealerGang]][gDrugPrices][0] * amount;

						GangInfo[pData[playerid][pDealerGang]][gDrugPot] -= amount;
						GangInfo[pData[playerid][pDealerGang]][gCash] += cost;

						pData[playerid][pPot] += amount;
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugpot = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gDrugPot], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the drug dealer and received %i grams of pot.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i grams of "SVRCLR"pot{CCFFFF} for $%i.", amount, cost);
					}
					case 1: // Crack
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pDealerGang]][gDrugCrack])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gDrugPrices][1] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(pData[playerid][pCrack] + amount > GetPlayerCapacity(CAPACITY_COCAINE))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}

						new cost = GangInfo[pData[playerid][pDealerGang]][gDrugPrices][1] * amount;

						GangInfo[pData[playerid][pDealerGang]][gDrugCrack] -= amount;
						GangInfo[pData[playerid][pDealerGang]][gCash] += cost;

						pData[playerid][pCrack] += amount;
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugcrack = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gDrugCrack], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the drug dealer and received %i grams of Crack.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i grams of "SVRCLR"Crack{CCFFFF} for $%i.", amount, cost);
					}
					case 2: // Meth
			        {
			            if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pDealerGang]][gDrugMeth])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(pData[playerid][pCash] < GangInfo[pData[playerid][pDealerGang]][gDrugPrices][2] * amount)
			            {
			                SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
			            }
			            if(pData[playerid][pMeth] + amount > GetPlayerCapacity(CAPACITY_METH))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGBUY);
						}

						new cost = GangInfo[pData[playerid][pDealerGang]][gDrugPrices][2] * amount;

						GangInfo[pData[playerid][pDealerGang]][gDrugMeth] -= amount;
						GangInfo[pData[playerid][pDealerGang]][gCash] += cost;

						pData[playerid][pMeth] += amount;
						GivePlayerCash(playerid, -cost);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugmeth = %i, cash = %i WHERE id = %i", GangInfo[pData[playerid][pDealerGang]][gDrugMeth], GangInfo[pData[playerid][pDealerGang]][gCash], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $%i to the drug dealer and received %i grams of meth.", GetRPName(playerid), cost, amount);
						SM(playerid, COLOR_AQUA, "You have purchased %i grams of "SVRCLR"meth{CCFFFF} for $%i.", amount, cost);
					}
			    }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGSHOP);
			}
		}
        case DIALOG_GANGDRUGEDIT:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 6)
		    {
		        return 1;
			}

			if(response)
			{
			    switch(listitem)
			    {
			        case 0: ShowDialogToPlayer(playerid, DIALOG_GANGDRUGPRICES);
					case 1: ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSITS);
					case 2: ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAWS);
			    }
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEALER);
			}
		}
        case DIALOG_GANGDRUGPRICES:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICE, DIALOG_STYLE_INPUT, "Drug dealer | Prices", "Enter the new price for this drug:", "Submit", "Back");
		    }
		    else
		    {
		        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGEDIT);
			}
		}
		case DIALOG_GANGDRUGPRICE:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        if(sscanf(inputtext, "i", amount))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICE, DIALOG_STYLE_INPUT, "Drug dealer | Prices", "Enter the new price for this drug:", "Submit", "Back");
				}
				if(amount < 0)
				{
				    SCM(playerid, COLOR_SYNTAX, "The amount can't be below $0.");
				    return ShowPlayerDialog(playerid, DIALOG_GANGDRUGPRICE, DIALOG_STYLE_INPUT, "Drug dealer | Prices", "Enter the new price for this drug:", "Submit", "Back");
				}

				GangInfo[pData[playerid][pGang]][gDrugPrices][pData[playerid][pSelected]] = amount;

				if(pData[playerid][pSelected] == 0) {
				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET pot_price = %i WHERE id = %i", amount, pData[playerid][pGang]);
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"pot{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 1) {
		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET crack_price = %i WHERE id = %i", amount, pData[playerid][pGang]);
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"crack{CCFFFF} to $%i.", amount);
		        } else if(pData[playerid][pSelected] == 2) {
		            mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET meth_price = %i WHERE id = %i", amount, pData[playerid][pGang]);
				    SM(playerid, COLOR_AQUA, "You have set the price of "SVRCLR"meth{CCFFFF} to $%i.", amount);
		        }

		        mysql_tquery(connectionID, queryBuffer);
		    }

		    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGPRICES);
		}
		case DIALOG_GANGDRUGDEPOSITS:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGEDIT);
		    }
		}
		case DIALOG_GANGDRUGWITHDRAWS:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        pData[playerid][pSelected] = listitem;
		        ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
			}
			else
			{
			    ShowDialogToPlayer(playerid, DIALOG_GANGDRUGEDIT);
		    }
		}
		case DIALOG_GANGDRUGDEPOSIT:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        switch(pData[playerid][pSelected])
		        {
		            case 0: // Pot
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
						}
						if(amount < 1 || amount > pData[playerid][pPot])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
			            }

						GangInfo[pData[playerid][pGang]][gDrugPot] += amount;
						pData[playerid][pPot] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugpot = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugPot], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i grams of "SVRCLR"pot{CCFFFF} in your drug dealer NPC.", amount);
					}
					case 1: // Crack
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
						}
						if(amount < 1 || amount > pData[playerid][pCrack])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
			            }

						GangInfo[pData[playerid][pGang]][gDrugCrack] += amount;
						pData[playerid][pCrack] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugcrack = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugCrack], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i grams of "SVRCLR"Crack{CCFFFF} in your drug dealer NPC.", amount);
					}
					case 2: // Meth
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
						}
						if(amount < 1 || amount > pData[playerid][pMeth])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSIT);
			            }

						GangInfo[pData[playerid][pGang]][gDrugMeth] += amount;
						pData[playerid][pMeth] -= amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugmeth = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugMeth], pData[playerid][pDealerGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have deposited %i grams of "SVRCLR"meth{CCFFFF} in your drug dealer NPC.", amount);
					}
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGDRUGDEPOSITS);
		}
		case DIALOG_GANGDRUGWITHDRAW:
		{
		    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
		    {
		        return 1;
		    }

		    if(response)
		    {
		        new amount;

		        switch(pData[playerid][pSelected])
		        {
		            case 0: // Pot
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gDrugPot])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
			            }
			            if(pData[playerid][pPot] + amount > GetPlayerCapacity(CAPACITY_WEED))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gDrugPot] -= amount;
						pData[playerid][pPot] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugpot = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugPot], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i grams of "SVRCLR"pot{CCFFFF} from your drug dealer NPC.", amount);
					}
					case 1: // Crack
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gDrugCrack])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
			            }
			            if(pData[playerid][pCrack] + amount > GetPlayerCapacity(CAPACITY_COCAINE))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gDrugCrack] -= amount;
						pData[playerid][pCrack] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugcrack = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugCrack], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i grams of "SVRCLR"Crack{CCFFFF} from your drug dealer NPC.", amount);
					}
					case 2: // Meth
		            {
		                if(sscanf(inputtext, "i", amount))
			            {
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}
						if(amount < 1 || amount > GangInfo[pData[playerid][pGang]][gDrugMeth])
						{
						    SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
						    return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
			            }
			            if(pData[playerid][pMeth] + amount > GetPlayerCapacity(CAPACITY_METH))
			            {
			                SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
			                return ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAW);
						}

						GangInfo[pData[playerid][pGang]][gDrugMeth] -= amount;
						pData[playerid][pMeth] += amount;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drugmeth = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugMeth], pData[playerid][pGang]);
						mysql_tquery(connectionID, queryBuffer);

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
						mysql_tquery(connectionID, queryBuffer);

						SM(playerid, COLOR_AQUA, "You have withdrawn %i grams of "SVRCLR"meth{CCFFFF} from your drug dealer NPC.", amount);
					}
				}
			}

			ShowDialogToPlayer(playerid, DIALOG_GANGDRUGWITHDRAWS);
		}
		case DIALOG_FREENAMECHANGE:
		{
		    if(response)
		    {
		        if(isnull(inputtext))
		        {
		            return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
				}
				if(!(3 <= strlen(inputtext) <= 20))
				{
				    SCM(playerid, COLOR_SYNTAX, "Your name must contain 3 to 20 characters.");
				    return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
				}
				if(strfind(inputtext, "_") == -1)
				{
				    SCM(playerid, COLOR_SYNTAX, "The name needs to contain at least one underscore.");
				    return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
				}
                if(!IsValidName(inputtext))
                {
				    SCM(playerid, COLOR_SYNTAX, "That name is not supported by SA-MP.");
				    return ShowPlayerDialog(playerid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
				}

		        pData[playerid][pFreeNamechange] = 1;

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", inputtext);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptNameChange", "is", playerid, inputtext);
		    }
		    else
		    {
		    	if(!pData[playerid][pLogged])
		        {
		            SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] has been kicked for failing to change their name.", GetRPName(playerid), playerid);
		            KickPlayer(playerid);
		        }
		        else
		        {
			    	pData[playerid][pJailType] = 2;
				    pData[playerid][pJailTime] = 10 * 60;

					ResetPlayerWeaponsEx(playerid);
					ResetPlayer(playerid);

					SetPlayerInJail(playerid);
					GameTextForPlayer(playerid, "~w~Welcome to~n~~r~admin jail", 5000, 3);

					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET prisonedby = 'Server', prisonreason = 'Failing to change their name' WHERE uid = %i", pData[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);

					strins(pData[playerid][pPrisonedBy], "Server", 0);
					strins(pData[playerid][pPrisonReason], "Failing to change their name", 0);

	                SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" [%i] has been prisoned for failing to change their name.", GetRPName(playerid), playerid);
					Log_Write("log_punishments", "%s (uid: %i) has been prisoned for 10 minutes, reason: failing to change their name.", GetPlayerNameEx(playerid), pData[playerid][pID]);

				}
			}
		}
	}

	return 1;
}

CMD:taxhelp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SM(playerid, COLOR_SYNTAX, "The tax is currently set to {CCFFFF}%i percent", gTax);
	return 1;
}



CMD:bind(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	ShowDialogToPlayer(playerid, DIALOG_BIND);
	return 1;
}

CMD:b1(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "{C2A2DA}* %s %s", GetRPName(playerid), (pData[playerid][pBind]));
	new szString[528];
	format(szString, sizeof(szString), " %s [ME]: %s ", GetRPName(playerid), pData[playerid][pBind]);
	SendDiscordMessage(12, szString);
    return 1;
}
CMD:b2(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "{C2A2DA}* %s %s", GetRPName(playerid), (pData[playerid][pBind2]));
	new szString[528];
	format(szString, sizeof(szString), " %s [ME]: %s ", GetRPName(playerid), pData[playerid][pBind2]);
	SendDiscordMessage(12, szString);
    return 1;
}
CMD:b3(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "{C2A2DA}* %s %s", GetRPName(playerid), (pData[playerid][pBind3]));
	new szString[528];
	format(szString, sizeof(szString), " %s [ME]: %s ", GetRPName(playerid), pData[playerid][pBind3]);
	SendDiscordMessage(12, szString);
    return 1;
}
CMD:b4(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "{C2A2DA}* %s %s", GetRPName(playerid), (pData[playerid][pBind4]));
	new szString[528];
	format(szString, sizeof(szString), " %s [ME]: %s ", GetRPName(playerid), pData[playerid][pBind4]);
	SendDiscordMessage(12, szString);
    return 1;
}

CMD:b5(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "{C2A2DA}* %s %s", GetRPName(playerid), (pData[playerid][pBind5]));
	new szString[528];
	format(szString, sizeof(szString), " %s [ME]: %s ", GetRPName(playerid), pData[playerid][pBind5]);
	SendDiscordMessage(12, szString);
	return 1;
}
//do
CMD:b6(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "{C2A2DA} %s (( %s ))", (pData[playerid][pBind6]), GetRPName(playerid));
	new szString[528];
	format(szString, sizeof(szString), " %s [DO]: %s ", GetRPName(playerid), pData[playerid][pBind6]);
	SendDiscordMessage(12, szString);
	return 1;
}
CMD:b7(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "{C2A2DA} %s (( %s ))", (pData[playerid][pBind7]), GetRPName(playerid));
	new szString[528];
	format(szString, sizeof(szString), " %s [DO]: %s ", GetRPName(playerid), pData[playerid][pBind7]);
	SendDiscordMessage(12, szString);
	return 1;
}
CMD:b8(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "{C2A2DA} %s (( %s ))", (pData[playerid][pBind8]), GetRPName(playerid));
	new szString[528];
	format(szString, sizeof(szString), " %s [DO]: %s ", GetRPName(playerid), pData[playerid][pBind8]);
	SendDiscordMessage(12, szString);
	return 1;
}

CMD:b9(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "{C2A2DA} %s (( %s ))", (pData[playerid][pBind9]), GetRPName(playerid));

	new szString[528];
	format(szString, sizeof(szString), " %s [DO]: %s ", GetRPName(playerid), pData[playerid][pBind9]);
	SendDiscordMessage(12, szString);
	return 1;
}

CMD:b10(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "{C2A2DA} %s (( %s ))", (pData[playerid][pBind10]), GetRPName(playerid));
	new szString[528];
	format(szString, sizeof(szString), " %s [DO]: %s ", GetRPName(playerid), pData[playerid][pBind10]);
	SendDiscordMessage(12, szString);
	return 1;
}


CMD:buyinsurance(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1160.9899,-1331.9058,14.5401))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in any of the hospitals.");
	}
	if(pData[playerid][pCash] < 5000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford insurance.");
	}

	switch(GetPlayerVirtualWorld(playerid))
	{
	    case HOSPITAL_COUNTY:
	    {
	        if(pData[playerid][pInsurance] == HOSPITAL_COUNTY)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "You are already insured at this hospital.");
	        }

	        GivePlayerCash(playerid, -5000);
	        GameTextForPlayer(playerid, "~r~-$5000", 5000, 1);
	        SCM(playerid, COLOR_GREEN, "You paid $5000 for insurance at {FF8282}Northern Hospital{CCFFFF}. You will now spawn here after death.");

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_COUNTY, pData[playerid][pID]);
	        mysql_tquery(connectionID, queryBuffer);

	        pData[playerid][pInsurance] = HOSPITAL_COUNTY;
	    }
	    case HOSPITAL_ALLSAINTS:
	    {
	        if(pData[playerid][pInsurance] == HOSPITAL_ALLSAINTS)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "You are already insured at this hospital.");
	        }

	        GivePlayerCash(playerid, -5000);
	        GameTextForPlayer(playerid, "~r~-$5000", 5000, 1);
	        SCM(playerid, COLOR_GREEN, "You paid $5000 for insurance at {FF8282}All Saints Hospital{CCFFFF}. You will now spawn here after death.");

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET insurance = %i WHERE uid = %i", HOSPITAL_ALLSAINTS, pData[playerid][pID]);
	        mysql_tquery(connectionID, queryBuffer);

	        pData[playerid][pInsurance] = HOSPITAL_ALLSAINTS;
	    }

	}

	return 1;
}


CMD:poll(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new string[128];

	if(pData[playerid][pAdmin] < 3)
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");

	if(sscanf(params, "s[128]", params))
		return SCM(playerid, COLOR_SYNTAX, "Usage: /poll [question]");

	if(strlen(params) > 128)
		return SCM(playerid, COLOR_SYNTAX, "Maximum characters limit is 128.");

	if(PollOn)
		return SCM(playerid, COLOR_SYNTAX, "There is already an poll started.");

	format(string, sizeof(string), "** Question:"WHITE" %s {FF6347}**", params);
	SCMA(COLOR_LIGHTRED, string);

	SCMA(COLOR_LIGHTRED, "** Press "WHITE"Y{FF6347} to vote "WHITE"Yes{FF6347}, Press "WHITE"N{FF6347} to vote "WHITE"No{FF6347}. **");
	SCMA(COLOR_LIGHTRED, "** Poll ending in "WHITE"30{FF6347} Seconds. **");

	PollOn = 1;
	PollN = 0;
	foreach(new i: Player)
	{
		PollVoted[i] = 0;
	}
	PollY = 0;
	SetTimer("pollend", 30000, false);
	return 1;
}

CMD:blindfold(playerid,params[])
{
    new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /blindfold [playerid]");
	}
	if(pData[playerid][pBlindfold] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have any blindfolds left.");
	}
	if(!IsPlayerInVehicle(targetid, GetPlayerVehicleID(playerid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected, That player must either be in your vehicle..");
	}
	if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't blindfold the driver.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't blindfold yourself.");
	}
	if(pBlind[targetid])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already blindfolded. /unblindfold to free them.");
	}
	if(pData[targetid][pAcceptedHelp])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't blindfold a helper who is assisting someone.");
	}
	if(pData[targetid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't blindfold an on duty administrator.");
	}


	pData[playerid][pBlindfold]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET blindfold = %i WHERE uid = %i", pData[playerid][pBlindfold], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	GameTextForPlayer(targetid, "~r~Blindfold", 3000, 3);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s blindfold %s with a bandana.", GetRPName(playerid), GetRPName(targetid));

	TogglePlayerControllable(targetid, 0);
	TextDrawShowForPlayer(targetid, Blind);
	pBlind[targetid] = 1;
    return 1;
}

CMD:unblindfold(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unblindfold [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't unblindfold yourself.");
	}
	if(!pBlind[targetid])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not blindfold.");
	}
	if(IsPlayerInAnyVehicle(targetid) && !IsPlayerInVehicle(playerid, GetPlayerVehicleID(targetid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be in that player's vehicle in order to unblindfold them.");
	}

	GameTextForPlayer(targetid, "~g~Unblindfold", 3000, 3);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unblindfoild the bandana from %s.", GetRPName(playerid), GetRPName(targetid));

    TextDrawHideForPlayer(targetid, Blind);
	pBlind[targetid] = 0;
	return 1;
}

CMD:tie(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /tie [playerid]");
	}
	if(pData[playerid][pRope] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have any ropes left.");
	}
	if(!IsPlayerInVehicle(targetid, GetPlayerVehicleID(playerid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected, That player must either be in your vehicle..");
	}
	if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't tie up the driver.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't tie yourself.");
	}
	if(pData[targetid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already tied. /untie to free them.");
	}
	if(pData[targetid][pAcceptedHelp])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't tie a helper who is assisting someone.");
	}
	if(pData[targetid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't tie an on duty administrator.");
	}
	
	pData[playerid][pRope]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rope = %i WHERE uid = %i", pData[playerid][pRope], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	GameTextForPlayer(targetid, "~r~Tied", 3000, 3);
	TogglePlayerControllable(targetid, 0);
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_CUFFED);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s ties %s with a rope.", GetRPName(playerid), GetRPName(targetid));

	TogglePlayerControllable(targetid, 0);
	pData[targetid][pTied] = 1;
	return 1;
}

CMD:untie(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /untie [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't untie yourself.");
	}
	if(!pData[targetid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not tied.");
	}
	if(IsPlayerInAnyVehicle(targetid) && !IsPlayerInVehicle(playerid, GetPlayerVehicleID(targetid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be in that player's vehicle in order to untie them.");
	}

	GameTextForPlayer(targetid, "~g~Untied", 3000, 3);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unties the rope from %s.", GetRPName(playerid), GetRPName(targetid));

 	pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;

	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(targetid, 1);

	pData[targetid][pTied] = 0;
	return 1;
}

CMD:fixsabong(playerid, params[])
{
	if(pData[playerid][pAdmin] < 2)
		return SendClientMessage(playerid, COLOR_SYNTAX, "You are not Authoried to use this Command.");

	SabongInfo[sExist] = 0;
	SabongInfo[sStart] = 0;
	SendAdminMessage(COLOR_WHITE, "%s has Fixed the Sabong.", GetRPName(playerid));
	return 1;
}

CMD:sabong(playerid, params[])
{
	new timer, target1, target2, Float:health = 100;

	if(SabongInfo[sExist])
		return SendMessage(playerid, COLOR_SYNTAX, "** Sabong in on going.");

    if(pData[playerid][pAdmin] < 2) {
	    return SendClientMessage(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "iuu", timer, target1, target2)) {
	    return SendClientMessage(playerid, COLOR_SYNTAX, "Usage: /sabong [timer] [player1] [player2]");
	}
	if(target1 == INVALID_PLAYER_ID || target2 == INVALID_PLAYER_ID) {
	    return SendClientMessage(playerid, COLOR_SYNTAX, "Invalid player specified.");
	}
	if(target1 == target2) {
		return SendClientMessage(playerid, COLOR_SYNTAX, "You cant set up a 1v1 on himself.");
	}


	SavePlayerVariables(target1);
	SavePlayerVariables(target2);

	ResetPlayerWeapons(target1);
	ResetPlayerWeapons(target2);

	SetPlayerPos(target1, -119.4290,33.8196,903.1911);
	SetPlayerPos(target2, -111.0331,41.5464,903.1911);

	SetPlayerInterior(target1, 1);
	SetPlayerInterior(target2, 1);
	SetPlayerVirtualWorld(target1, 1);
	SetPlayerVirtualWorld(target2, 1);

	SetPlayerHealth(target1, health);
	SetPlayerHealth(target2, health);
	SetScriptArmour(target1, 0.0);
	SetScriptArmour(target2, 0.0);


	SetPlayerFightingStyle(target1, FIGHT_STYLE_BOXING);
	SetPlayerFightingStyle(target2, FIGHT_STYLE_BOXING);

	GameTextForPlayer(target1, "~b~Sabong time!", 3000, 3);
	GameTextForPlayer(target2, "~r~Sabong time!", 3000, 3);

	sabongskinred[target1] = GetPlayerSkin(target1);
	sabongskinblue[target2] = GetPlayerSkin(target2);

	SetPlayerSkin(target1, 80);
	SetPlayerSkin(target2, 81);

	SabongInfo[sPlayerRed] = target1;
	SabongInfo[sPlayerBlue] = target2;

	SabongInfo[sInside][target1] = 1;
	SabongInfo[sInside][target2] = 1;

	SabongInfo[sExist] = 1;
	SabongInfo[sStart] = 0;
	SabongInfo[sTimer] = timer;

	foreach(new i : Player)
	{
		pData[i][pSabongBet] = 0;
		SabongInfo[sBet][i] = 0;
		SabongInfo[sBetRed][i] = 0;
		SabongInfo[sBetBlue][i] = 0;
		SabongInfo[sRed] = 0;
		SabongInfo[sBlue] = 0;

		new string[1000];

		format(string, sizeof(string), "Payout = $%s", AddCommas(pData[i][pSabongBet]));
		PlayerTextDrawSetString(i, SabongTD[i][10], string);

		format(string, sizeof(string), "Payout = $%s", AddCommas(pData[i][pSabongBet]));
		PlayerTextDrawSetString(i, SabongTD[i][11], string);

		if(IsPlayerInRangeOfPoint(i, 50.0, area_bet_sabong))
		{
			SabongInfo[sInside][i] = 1;
		}
	}
	SendMessageToAll(COLOR_WHITE, "Sabong: the Battle will begin in %i Seconds. use(/bet)", timer);
	SendAdminMessage(COLOR_LIGHTRED, "System: %s has forced %s and %s into a Sabong.", GetRPName(playerid), GetRPName(target1), GetRPName(target2));
	return 1;
}

CMD:joinsabong(playerid, params[])
{
	if(!SabongInfo[sExist])
		return SendClientMessage(playerid, COLOR_SYNTAX, "Sabong is not on going.");

	SabongInfo[sInside][playerid] = 1;
	SendClientMessage(playerid, COLOR_GREY, "Sabong: You have Join Sabong, use (/bet) to bet for your side.");
	return 1;
}


CMD:bet(playerid, params[])
{
	new string[2048];

	if(!SabongInfo[sExist])
	{
		for(new s = 0; s < 15; s ++)
		{
			PlayerTextDrawHide(playerid, SabongTD[playerid][s]);
		}
		return SendMessage(playerid, COLOR_SYNTAX, "** Sabong in not on going.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 50.0, area_bet_sabong))
		return SendClientMessage(playerid, COLOR_SYNTAX, "Sabong: You need to be in the sabong area.");
	if(SabongInfo[sPlayerRed] == playerid || SabongInfo[sPlayerBlue] == playerid)
		return SendClientMessage(playerid, COLOR_SYNTAX, "Players cant bet for themself.");
	if(SabongInfo[sBet][playerid])
		return SendClientMessage(playerid, COLOR_WHITE, "Sabong: you already voted.");
	if(SabongInfo[sStart])
		return SendClientMessage(playerid, COLOR_SYNTAX, "Sabong: You cant bet this time since its already Starting.");
	if(pData[playerid][pAdminDuty])
		return SendClientMessage(playerid, COLOR_SYNTAX, "Sabong: You cant bet while in Admin Duty.");

	format(string, sizeof(string),
		"Player Name\tTeam\tTotal Bet\tNumber of Bets\n\
		%s\t{FF0000}Meron\t$%s\t%s\n\
		%s\t{0000FF}Wala\t$%s\t%s",

		GetRPName(SabongInfo[sPlayerRed]),
		AddCommas(SabongInfo[sTotalRed]),
		AddCommas(SabongInfo[sRed]),

		GetRPName(SabongInfo[sPlayerBlue]),
		AddCommas(SabongInfo[sTotalBlue]),
		AddCommas(SabongInfo[sBlue]));
	ShowPlayerDialog(playerid, DIALOG_SABONG, DIALOG_STYLE_TABLIST_HEADERS, "Sabong System:", string, "Enter.", "Back.");
	return 1;
}


CMD:startsweeping(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!PlayerHasJob(playerid, JOB_SWEEPER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Street Sweeper.");
	}
	if(pData[playerid][pSweeping])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are sweeping already. /stopsweeping to stop.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 574)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not sitting inside a Sweeper.");
	}

	pData[playerid][pSweeping] = 1;
	pData[playerid][pSweepTime] = 30;
	pData[playerid][pSweepEarnings] = 0;

	SendClientMessage(playerid, COLOR_WHITE, "** You are now sweeping. Drive around with your sweeper to earn money towards your paycheck.");
	SendClientMessage(playerid, COLOR_WHITE, "** When you are finished your sweeping shift, use /stopsweeping in order to end your shift.");
	return 1;
}

CMD:stopsweeping(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!PlayerHasJob(playerid, JOB_SWEEPER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you're not a Street Sweeper.");
	}
	if(!pData[playerid][pSweeping])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not sweeping right now.");
	}

	SendClientMessageEx(playerid, COLOR_AQUA, "** You are no longer sweeping. You earned a total of {00AA00}$%i{33CCFF} towards your paycheck during your shift.", pData[playerid][pSweepEarnings]);
    pData[playerid][pSweeping] = 0;
	pData[playerid][pSweepTime] = 0;
	pData[playerid][pSweepEarnings] = 0;
	return 1;
}
CMD:skate(playerid,params[])
{
	if(!pData[playerid][pSkates])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You do not own any skates.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
		ApplyAnimation(playerid, "CARRY","null",0,0,0,0,0,0,0);
	    ApplyAnimation(playerid, "SKATE","null",0,0,0,0,0,0,0);
	    ApplyAnimation(playerid, "CARRY","crry_prtial",4.0,0,0,0,0,0);
	    SetPlayerArmedWeapon(playerid,0);
        if(!pData[playerid][pSkating])
		{
            pData[playerid][pSkating] = true;
            DestroyDynamicObject(pData[playerid][pSkateObj]);
            RemovePlayerAttachedObject(playerid, 5);
            SetPlayerAttachedObject(playerid, 5,19878,6,-0.055999,0.013000,0.000000,-84.099983,0.000000,-106.099998,1.000000,1.000000,1.000000);
            PlayerPlaySound(playerid,21000,0,0,0);
            SendClientMessage(playerid, COLOR_AQUA,"You have equiped your skating gear. Press 'N' to stop skating.");
        }
		else
		{
			pData[playerid][pSkating] = false;
            DestroyDynamicObject(pData[playerid][pSkateObj]);
            RemovePlayerAttachedObject(playerid, 5);
            PlayerPlaySound(playerid,21000,0,0,0);
            SendClientMessage(playerid, COLOR_AQUA, "You are no longer skating.");
        }
	}
	else SendClientMessage(playerid, COLOR_GREY, "You must not be inside a vehicle.");
 	return 1;
}

CMD:b(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new
	    string[144];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /b [local OOC]");
	}
	if(strfind(params, "gago", true) != -1 || strfind(params, "tangina", true) != -1 || strfind(params, "kupal", true) != -1 || strfind(params, "tagos bala", true) != -1 ||  
	strfind(params, "aimbot", true) != -1 || strfind(params, "wallhack", true) != -1 || strfind(params, "puta", true) != -1 || strfind(params, "bias", true) != -1 || 
	strfind(params, "bobo", true) != -1 || strfind(params, "tanga", true) != -1 || strfind(params, "putangina", true) != -1 || strfind(params, "putang ina", true) != -1 || 
	strfind(params, "amputa", true) != -1 || strfind(params, "ampt", true) != -1 || strfind(params, "garapal", true) != -1 || strfind(params, "hindot", true) != -1 ||  
	strfind(params, "fuck you", true) != -1 ||  strfind(params, "tolongges", true) != -1 ||  strfind(params, "fVck U", true) != -1 ||  strfind(params, "fuck U", true) != -1 ||  
	strfind(params, "fuck", true) != -1 || strfind(params, "pakyu", true) != -1)
	{
		pData[playerid][pMuted] = 20;
		GivePlayerCash(playerid, -5000);
        SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for 20 seconds due to suspected to say FOULWORDS.");
		SAM(COLOR_YELLOW, ""RED"SECURITY[BOT] %s"WHITE"[%i] is using an FOULWORDS[%s].", GetRPName(playerid), playerid, params);
        return 1;
    }
	if(!pData[playerid][pAdminDuty])
	{
		if(Maskara[playerid] == 1) 
		{
			format(string, sizeof(string), "(( Stranger(B%d): %s ))", MaskaraID[playerid], params);
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
			new szString[528];
			format(szString, sizeof(szString), "Stranger[%d] %s: %s", MaskaraID[playerid], params);
			SendDiscordMessage(1, szString);
			
		} 
		else 
		{
			format(string, sizeof(string), "(( [%d] %s: %s ))", playerid, GetRPName(playerid), params);
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
			new szString[528];
			format(szString, sizeof(szString), "[%d] %s: %s", playerid, GetRPName(playerid), params);
			SendDiscordMessage(1, szString);
		}
	}	
	else
	{
        format(string, sizeof(string), "(( [ADMIN]: %s: %s ))", GetRPName(playerid), params);
		SendProximityFadeMessage(playerid, 15.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
		new szString[528];
		format(szString, sizeof(szString), " [ADMIN]: %s: %s ", GetRPName(playerid), params);
		SendDiscordMessage(1, szString);
	}
	return 1;
}
/*CMD:robhouse(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new houseid = GetInsideHouse(playerid), count;
	if(houseid == -1)
	{
	    return SCM(playerid, COLOR_GREY2, "You aren't inside a house that you can rob.");
	}
	if(IsHouseOwner(playerid, houseid)) {
		return SCM(playerid, COLOR_GREY2, "You can't rob the your house.");
	}
	if(pData[playerid][pRobbingHouse] >= 0)
	{
		return SCM(playerid, COLOR_GREY2, "You're already robbing a house.");
	}
	if(HouseInfo[houseid][hRobbing] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the house. Robbery has already started.");
	}
	if(HouseInfo[houseid][hRobbed] > 0)
	{
	    return SM(playerid, COLOR_GREY2, "This house can be robbed again in %i hours. You can't rob it now.", HouseInfo[houseid][hRobbed]);
	}
	if(pData[playerid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the house while on-duty.");
	}

	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && pData[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 3)
	{
	    return SCM(playerid, COLOR_GREY2, "There needs to be at least 3+ LEO on-duty in order to rob the house.");
	}

	foreach(new i : Player)
	{
		if(IsLawEnforcement(i))
		{
			SM(i, COLOR_ROYALBLUE, "** HQ: A robbery is occurring at the %s. All units respond immediately.", GetZoneName(HouseInfo[houseid][hPosX],HouseInfo[houseid][hPosY],HouseInfo[houseid][hPosZ]));
			SetPlayerCheckpoint(i, HouseInfo[houseid][hPosX],HouseInfo[houseid][hPosY],HouseInfo[houseid][hPosZ], 3.0);
		}
	}

	pData[playerid][pLootTime] = 5;
	GameTextForPlayer(playerid, "~w~Looting house vault...", 5000, 3);

 	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s attempts to rob the house.", GetRPName(playerid));
	SCM(playerid, COLOR_GREY2,"** Wait until cops arrive for roleplay purposes. (( You can door shout by inputting '/ds'. ))");
	pData[playerid][pRobbingHouse] = houseid;
	HouseInfo[houseid][hRobbing] = 1;
	return 1;
}*/
forward pressunfreeze(playerid);
public pressunfreeze(playerid)
{
	TogglePlayerControllable(playerid, 1);
	return 1;
}

CMD:ds(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(isnull(params))
		return SendClientMessage(playerid, COLOR_GREY2, "Usage: /ds [door shout text]");

	new string[128], idx;

	if((idx = GetNearbyHouse(playerid)) != -1 || (idx = GetInsideHouse(playerid)) != -1)
	{
		foreach(new i : Player)
		{
			if(i != playerid) {
				if((GetNearbyHouse(i) == idx) || (GetInsideHouse(i) == idx))
				{
					if(strlen(params) > 90)
					{
						format(string, sizeof(string), "(%s door): %.90s", GetRPName(playerid), params);
						SendClientMessage(i, COLOR_GREY1, string);
						format(string, sizeof(string), "(%s door): ... %s", GetRPName(playerid),params[90]);
						SendClientMessage(i, COLOR_GREY1, string);
					} else {
						format(string, sizeof(string), "(%s door): %s", GetRPName(playerid), params);
						SendClientMessage(i, COLOR_GREY1, string);
					}
				}
			}
		}
		if(strlen(params) > 90)
		{
			SM(playerid, COLOR_GREY1, "(door): %.90s", params);
			SM(playerid, COLOR_GREY1, "(door): ... %s", params[90]);
		}
		else
		{
			SM(playerid, COLOR_GREY1, "(door): %s", params);
		}
	}
	else if((idx = GetNearbyBusiness(playerid)) != -1 || (idx = GetInsideBusiness(playerid)) != -1) {
		foreach(new i : Player)
		{
			if(i != playerid) {
				if((GetNearbyBusiness(i) == idx) || (GetInsideBusiness(i) == idx))
				{
					if(strlen(params) > 90)
					{
						format(string, sizeof(string), "(door): %.90s", params);
						SendClientMessage(i, COLOR_GREY1, string);

						format(string, sizeof(string), "(door): ... %s", params[90]);
						SendClientMessage(i, COLOR_GREY1, string);
					}
					else
					{
						format(string, sizeof(string), "(door): %s", params);
						SendClientMessage(i, COLOR_GREY1, string);
					}
				}
			}
		}
		if(strlen(params) > 90)
		{
			SM(playerid, COLOR_GREY1, "(door): %.90s", params);
			SM(playerid, COLOR_GREY1, "(door): ... %s", params[90]);
		}
		else
		{
			SM(playerid, COLOR_GREY1, "(door): %s", params);
		}
	} else if((idx = GetNearbyEntranceEx(playerid)) != -1 || (idx = GetInsideEntrance(playerid)) != -1) {
		foreach(new i : Player)
		{
			if(i != playerid) {
				if((GetNearbyEntranceEx(i) == idx) || (GetInsideEntrance(i) == idx))
				{
					if(strlen(params) > 90)
					{
						format(string, sizeof(string), "(door): %.90s", params);
						SendClientMessage(i, COLOR_GREY1, string);

						format(string, sizeof(string), "(door): ... %s", params[90]);
						SendClientMessage(i, COLOR_GREY1, string);
					}
					else
					{
						format(string, sizeof(string), "(door): %s", params);
						SendClientMessage(i, COLOR_GREY1, string);
					}
				}
			}
		}
		if(strlen(params) > 90)
		{
			SM(playerid, COLOR_GREY1, "(door): %.90s", params);
			SM(playerid, COLOR_GREY1, "(door): ... %s", params[90]);
		}
		else
		{
			SM(playerid, COLOR_GREY1, "(door): %s", params);
		}
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "You are not near any door.");
	}
	return 1;
}


CMD:s(playerid, params[]) return callcmd::shout(playerid, params);
CMD:shout(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new
	    string[144];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(s)hout [text]");
	}
	if(strfind(params, "admin", true) != -1 || strfind(params, "helper", true) != -1 || strfind(params, "bug", true) != -1 ||  
	strfind(params, "gz", true) != -1 || strfind(params, "greenzone", true) != -1 || strfind(params, "nonrp", true) != -1 || 
	strfind(params, "safezone", true) != -1 || strfind(params, "safe zone", true) != -1 || strfind(params, "green zone", true) != -1 || 
	strfind(params, "dmer", true) != -1 || strfind(params, "anghel", true) != -1 || 
	strfind(params, "rp", true) != -1 || strfind(params, "discord", true) != -1 || strfind(params, "roleplay", true) != -1 || 
	strfind(params, "mod", true) != -1 || strfind(params, "discordia", true) != -1 ||
	strfind(params, "vdm", true) != -1 || 
	strfind(params, "randompunching", true) != -1 || strfind(params, "random punching", true) != -1 || strfind(params, "random punch", true) != -1 ||
	strfind(params, "mods", true) != -1 || strfind(params, "cleo", true) != -1 || strfind(params, "meta", true) != -1 || 
	strfind(params, "atems", true) != -1 || strfind(params, "delay", true) != -1 || strfind(params, "rolyo", true) != -1 || 
	strfind(params, "server", true) != -1 || strfind(params, "(ooc)", true) != -1|| strfind(params, "groupchat", true) != -1|| 
	strfind(params, "dc", true) != -1|| strfind(params, "gc", true) != -1)
	{
		pData[playerid][pMuted] = 20;
		GivePlayerCash(playerid, -200);
		SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for 20 seconds due to suspected to say OOC TERM IN IC.");
		SAM(COLOR_YELLOW, ""RED"SECURITY[BOT] %s"WHITE"[%i] is using an words for ooc in ic [%s].", GetRPName(playerid), playerid, params);
		new szString[528];
		format(szString, sizeof(szString), "%s [%i] is using an words for ooc in ic [%s].", GetRPName(playerid), playerid, params);
		SendDiscordMessage(32, szString);
		return 1;
	}	
	if(Maskara[playerid] == 1) {
		SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "(Shouts) %s",params);
		format(string, sizeof(string), "(Shouts) Stranger(B%d): %s!", MaskaraID[playerid], params);
		SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
		new szString[528];
		format(szString, sizeof(szString), "(Shouts) Stranger(B%d) says: %s", MaskaraID[playerid], params);
		SendDiscordMessage(3, szString);
	} else {
		SetPlayerBubbleText(playerid, 20.0, COLOR_GREY1, "(Shouts) %s",params);
		format(string, sizeof(string), "(Shouts) %s: %s!", GetRPName(playerid), params);
		SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
		new szString[528];
		format(szString, sizeof(szString), "(Shouts) %s says: %s", GetRPName(playerid), params);
		SendDiscordMessage(3, szString);
		
	}
	return 1;
}
CMD:vallet(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, world, impounded FROM vehicles WHERE ownerid = %i", pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LIST_PGVEHICLES_VALLEY, playerid);
	return 1;
}
CMD:vcheck(playerid)
{
    new vehicleid;

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You are not a part of law enforcement.");
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You are not in range of any vehicle.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} This vehicle isn't owned by any particular person.");
	}
	SCMf(playerid, COLOR_WHITE, "** %'s %s  |  Tickets: $%i  |  Plate: %s", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vPlate]);
	return 1;
}


CMD:radiochat(playerid)
{
    new string[2048], status[128], statuss[128];
    strcat(string, "Channel\tToggle\tDescription");
    if(pData[playerid][pFactionRadio] == 0)
    {
    	status = "{ff0000}OFF{FFFFFF}";
    }
    else
    {
    	status = "{009900}ON{FFFFFF}";
    }
    if(pData[playerid][pGangRadio] == 0)
    {
    	statuss = "{ff0000}OFF{FFFFFF}";
    }
    else
    {
    	statuss = "{009900}ON{FFFFFF}";
    }
    format(string, sizeof(string), "%s\nFaction Radio\t%s\tRadio Channel for your faction\nGang Radio\t%s\tRadio Channel for your Gang.", string, status, statuss);
    ShowPlayerDialog(playerid, DIALOG_VOICECHAT, DIALOG_STYLE_TABLIST_HEADERS, "Voice Chat Setup", string, "Toggle", "Close");
    return 1;
}

CMD:vc(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	ShowDialogToPlayer(playerid, DIALOG_PROXY);
	return 1;
}

CMD:vcode(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(isnull(params) || strlen(params) > 64)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /vcode [text ('none' to reset)]");
	}

	if(IsValidDynamic3DTextLabel(DonatorCallSign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(DonatorCallSign[vehicleid]);
		DonatorCallSign[vehicleid] = Text3D:INVALID_3DTEXT_ID;

		if(!strcmp(params, "none", true))
		{
			SCM(playerid, COLOR_WHITE, "** Car text removed from the vehicle.");
		}
	}

	if(strcmp(params, "none", true) != 0)
	{
		DonatorCallSign[vehicleid] = CreateDynamic3DTextLabel(params, COLOR_VIP, 0.0, -3.0, 0.0, 10.0, .attachedvehicle = vehicleid);
 		SCM(playerid, COLOR_WHITE, "** Car text attached. '/vcode none' to detach the Car text.");
	}

	return 1;
}

CMD:rpgun(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s draws out the gun towards his/her hand.", GetRPName(playerid));
	new szString[528];
	format(szString, sizeof(szString), " %s [me]: draws out the gun towards his/her hand", GetRPName(playerid));
	SendDiscordMessage(12, szString);
	return 1;
}
CMD:rpcrash(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s was shocked by the collision that happened with the vehicle.", GetRPName(playerid));
	new szString[528];
	format(szString, sizeof(szString), " %s [me]: was shocked by the collision that happened with the vehicle.", GetRPName(playerid));
	SendDiscordMessage(12, szString);
	return 1;
}
CMD:rpaim(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s hovers the aim of the gun to the target.", GetRPName(playerid));
	new szString[528];
	format(szString, sizeof(szString), " %s [me]: hovers the aim of the gun to the target.", GetRPName(playerid));
	SendDiscordMessage(12, szString);
	return 1;
}
CMD:rpshoot(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "{C2A2DA} %s fires several bullets from his/her gun (( %s ))", GetRPName(playerid), GetRPName(playerid));
	new szString[528];
	format(szString, sizeof(szString), " %s [do]:  fires several bullets from his/her gun (( %s ))", GetRPName(playerid), GetRPName(playerid));
	SendDiscordMessage(12, szString);
	return 1;
}

CMD:rpcarjack(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "{C2A2DA} %s forcefully steal the vehicle to the person (( %s ))", GetRPName(playerid), GetRPName(playerid));
	new szString[528];
	format(szString, sizeof(szString), " %s [do]: forcefully steal the vehicle to the person(( %s ))", GetRPName(playerid), GetRPName(playerid));
	SendDiscordMessage(12, szString);
	return 1;
}
CMD:rphandsup(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pLevel] >= 1) 
	{
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "*{C2A2DA}  Handsup And Scared.(( %s ))", GetRPName(playerid));
		ApplyAnimationEx(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
		new szString[528];
		format(szString, sizeof(szString), " %s [do]: Handsup And Scared. (( %s ))", GetRPName(playerid), GetRPName(playerid));
		SendDiscordMessage(12, szString);
	} 
	return 1;
}

CMD:rplist(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SendClientMessage(playerid, COLOR_WHITE, "Available");
	SendClientMessage(playerid, COLOR_YELLOW, "/rpgun  /rpshoot /rpaim /rpcrash /rphandsup /rpcarjack");
	SendClientMessage(playerid, COLOR_WHITE, "Auto Roleplay");
	return 1;
}

CMD:mugshot(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(IsLawEnforcement(playerid))
    {
		new string[128], crimeid2;
		new targetid;
		if(sscanf(params, "ui", targetid, crimeid2))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /mugshot [playerid] [crimeid]");
			SendClientMessage(playerid, COLOR_BLUE, "|1| robbery |2| carnaper |3| kidnapping |4| robbery |5| IPF |6| IPN |7| HARRASMENT |8| rape |9| car jacking");
			SendClientMessage(playerid, COLOR_BLUE, "|10| homicide |11 murder |12| estafa");
			return 1;
		}
		switch(crimeid2){
			case 1: {
				format(string, sizeof(string), "You have set the mugshot ID to %d.", crimeid2);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				SCM(targetid, COLOR_LIGHTRED, "YOU ARE NOW READY TO TAKE MUGSHOT");
				new age = pData[targetid][pAge];
				switch(age){
				case 1:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "1");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "1");
				}case 2:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "2");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "2");
				}case 3:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "3");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "3");
				}case 4:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "4");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "4");
				}case 5:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "5");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "5");
				}case 6:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "6");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "6");
				}case 7:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "7");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "7");
				}case 8:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "8");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "8");
				}case 9:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "9");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "9");
				}case 10:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "10");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "10");
				}case 11:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "11");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "11");
				}case 12:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "12");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "12");
				}case 13:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "13");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "13");
				}case 14:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "14");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "14");
				}case 15:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "15");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "15");
				}case 16:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "16");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "16");
				}case 17:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "17");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "17");
				}case 18:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "18");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "18");
				}case 19:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "19");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "19");
				}case 20:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "20");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "20");
				}case 21:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "21");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "21");
				}case 22:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "22");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "22");
				}case 23:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "23");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "23");
				}case 24:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "24");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "24");
				}case 25:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "25");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "25");
				}case 26:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "26");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "26");
				}case 27:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "27");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "27");
				}case 28:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "28");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "28");
				}case 29:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "29");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "29");
				}case 30:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "30");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "30");
				}case 31:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "31");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "31");
				}case 32:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "32");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "32");
				}case 33:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "33");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "33");
				}case 34:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "34");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "34");
				}case 35:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "35");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "35");
				}case 36:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "36");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "36");
				}case 37:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "37");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "37");
				}case 38:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "38");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "38");
				}case 39:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "39");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "39");
				}case 40:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "40");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "40");
				}case 41:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "41");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "41");
				}case 42:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "42");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "42");
				}case 43:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "43");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "43");
				}case 44:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "44");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "44");
				}case 45:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "45");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "45");
				}case 46:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "46");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "46");
				}case 47:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "47");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "47");
				}case 48:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "48");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "48");
				}case 49:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "49");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "49");
				}case 50:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "50");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "50");
				}case 51:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "51");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "51");
				}case 52:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "52");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "52");
				}case 53:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "53");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "53");
				}case 54:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "54");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "54");
				}case 55:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "55");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "55");
				}case 56:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "56");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "56");
				}case 57:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "57");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "57");
				}case 58:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "58");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "58");
				}case 59:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "59");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "59");
				}case 60:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "60");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "60");
				}
				}
				PlayerTextDrawSetString(targetid, MugshotTD7[playerid], "Robbery");
				new name[32];	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(targetid, MugshotTD5[playerid], name);				
				
				PlayerTextDrawSetString(playerid, MugshotTD7[playerid], "Robbery");
	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(playerid, MugshotTD5[playerid], name);
				
				PlayerTextDrawShow(targetid, MugshotTD0[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD1[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD2[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD3[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD4[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD5[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD6[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(targetid, MugshotTD8[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD0[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD1[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD2[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD3[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD4[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD5[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD6[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(playerid, MugshotTD8[playerid]);
				SetTimerEx("MUGSHOTHIDE1", 8000, false, "i", targetid);
				SetTimerEx("MUGSHOTHIDE0", 8000, false, "i", playerid);

			}
				
			case 2: {
				format(string, sizeof(string), "You have set the mugshot ID to %d.", crimeid2);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				SCM(targetid, COLOR_LIGHTRED, "YOU ARE NOW READY TO TAKE MUGSHOT");
				new age = pData[targetid][pAge];
				switch(age){
				case 1:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "1");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "1");
				}case 2:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "2");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "2");
				}case 3:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "3");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "3");
				}case 4:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "4");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "4");
				}case 5:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "5");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "5");
				}case 6:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "6");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "6");
				}case 7:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "7");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "7");
				}case 8:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "8");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "8");
				}case 9:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "9");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "9");
				}case 10:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "10");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "10");
				}case 11:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "11");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "11");
				}case 12:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "12");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "12");
				}case 13:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "13");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "13");
				}case 14:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "14");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "14");
				}case 15:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "15");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "15");
				}case 16:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "16");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "16");
				}case 17:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "17");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "17");
				}case 18:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "18");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "18");
				}case 19:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "19");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "19");
				}case 20:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "20");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "20");
				}case 21:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "21");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "21");
				}case 22:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "22");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "22");
				}case 23:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "23");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "23");
				}case 24:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "24");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "24");
				}case 25:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "25");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "25");
				}case 26:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "26");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "26");
				}case 27:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "27");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "27");
				}case 28:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "28");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "28");
				}case 29:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "29");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "29");
				}case 30:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "30");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "30");
				}case 31:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "31");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "31");
				}case 32:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "32");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "32");
				}case 33:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "33");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "33");
				}case 34:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "34");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "34");
				}case 35:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "35");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "35");
				}case 36:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "36");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "36");
				}case 37:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "37");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "37");
				}case 38:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "38");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "38");
				}case 39:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "39");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "39");
				}case 40:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "40");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "40");
				}case 41:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "41");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "41");
				}case 42:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "42");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "42");
				}case 43:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "43");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "43");
				}case 44:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "44");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "44");
				}case 45:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "45");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "45");
				}case 46:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "46");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "46");
				}case 47:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "47");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "47");
				}case 48:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "48");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "48");
				}case 49:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "49");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "49");
				}case 50:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "50");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "50");
				}case 51:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "51");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "51");
				}case 52:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "52");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "52");
				}case 53:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "53");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "53");
				}case 54:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "54");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "54");
				}case 55:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "55");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "55");
				}case 56:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "56");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "56");
				}case 57:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "57");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "57");
				}case 58:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "58");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "58");
				}case 59:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "59");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "59");
				}case 60:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "60");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "60");
				}
				}
				PlayerTextDrawSetString(targetid, MugshotTD7[playerid], "Carnaper");

				new name[32];	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(targetid, MugshotTD5[playerid], name);				
				
				PlayerTextDrawSetString(playerid, MugshotTD7[playerid], "Carnaper");
	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(playerid, MugshotTD5[playerid], name);
				
				PlayerTextDrawShow(targetid, MugshotTD0[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD1[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD2[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD3[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD4[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD5[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD6[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(targetid, MugshotTD8[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD0[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD1[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD2[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD3[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD4[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD5[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD6[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(playerid, MugshotTD8[playerid]);	
				SetTimerEx("MUGSHOTHIDE1", 8000, false, "i", targetid);
				SetTimerEx("MUGSHOTHIDE0", 8000, false, "i", playerid);
			}
			case 3:	{
				format(string, sizeof(string), "You have set the mugshot ID to %d.", crimeid2);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				SCM(targetid, COLOR_LIGHTRED, "YOU ARE NOW READY TO TAKE MUGSHOT");
				new age = pData[targetid][pAge];
				switch(age){
				case 1:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "1");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "1");
				}case 2:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "2");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "2");
				}case 3:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "3");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "3");
				}case 4:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "4");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "4");
				}case 5:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "5");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "5");
				}case 6:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "6");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "6");
				}case 7:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "7");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "7");
				}case 8:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "8");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "8");
				}case 9:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "9");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "9");
				}case 10:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "10");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "10");
				}case 11:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "11");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "11");
				}case 12:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "12");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "12");
				}case 13:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "13");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "13");
				}case 14:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "14");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "14");
				}case 15:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "15");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "15");
				}case 16:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "16");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "16");
				}case 17:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "17");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "17");
				}case 18:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "18");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "18");
				}case 19:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "19");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "19");
				}case 20:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "20");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "20");
				}case 21:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "21");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "21");
				}case 22:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "22");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "22");
				}case 23:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "23");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "23");
				}case 24:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "24");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "24");
				}case 25:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "25");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "25");
				}case 26:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "26");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "26");
				}case 27:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "27");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "27");
				}case 28:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "28");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "28");
				}case 29:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "29");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "29");
				}case 30:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "30");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "30");
				}case 31:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "31");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "31");
				}case 32:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "32");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "32");
				}case 33:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "33");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "33");
				}case 34:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "34");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "34");
				}case 35:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "35");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "35");
				}case 36:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "36");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "36");
				}case 37:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "37");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "37");
				}case 38:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "38");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "38");
				}case 39:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "39");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "39");
				}case 40:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "40");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "40");
				}case 41:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "41");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "41");
				}case 42:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "42");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "42");
				}case 43:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "43");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "43");
				}case 44:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "44");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "44");
				}case 45:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "45");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "45");
				}case 46:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "46");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "46");
				}case 47:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "47");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "47");
				}case 48:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "48");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "48");
				}case 49:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "49");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "49");
				}case 50:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "50");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "50");
				}case 51:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "51");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "51");
				}case 52:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "52");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "52");
				}case 53:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "53");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "53");
				}case 54:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "54");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "54");
				}case 55:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "55");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "55");
				}case 56:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "56");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "56");
				}case 57:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "57");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "57");
				}case 58:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "58");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "58");
				}case 59:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "59");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "59");
				}case 60:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "60");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "60");
				}
				}
				PlayerTextDrawSetString(targetid, MugshotTD7[playerid], "Kidnapping");
				new name[32];	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(targetid, MugshotTD5[playerid], name);				
				
				PlayerTextDrawSetString(playerid, MugshotTD7[playerid], "Kidnapping");	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(playerid, MugshotTD5[playerid], name);
				
				PlayerTextDrawShow(targetid, MugshotTD0[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD1[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD2[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD3[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD4[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD5[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD6[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(targetid, MugshotTD8[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD0[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD1[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD2[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD3[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD4[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD5[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD6[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(playerid, MugshotTD8[playerid]);
				SetTimerEx("MUGSHOTHIDE1", 8000, false, "i", targetid);
				SetTimerEx("MUGSHOTHIDE0", 8000, false, "i", playerid);
	
			}
			case 4: {
				format(string, sizeof(string), "You have set the mugshot ID to %d.", crimeid2);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				SCM(targetid, COLOR_LIGHTRED, "YOU ARE NOW READY TO TAKE MUGSHOT");
				new age = pData[targetid][pAge];
				switch(age){
				case 1:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "1");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "1");
				}case 2:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "2");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "2");
				}case 3:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "3");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "3");
				}case 4:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "4");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "4");
				}case 5:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "5");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "5");
				}case 6:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "6");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "6");
				}case 7:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "7");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "7");
				}case 8:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "8");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "8");
				}case 9:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "9");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "9");
				}case 10:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "10");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "10");
				}case 11:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "11");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "11");
				}case 12:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "12");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "12");
				}case 13:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "13");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "13");
				}case 14:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "14");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "14");
				}case 15:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "15");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "15");
				}case 16:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "16");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "16");
				}case 17:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "17");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "17");
				}case 18:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "18");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "18");
				}case 19:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "19");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "19");
				}case 20:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "20");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "20");
				}case 21:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "21");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "21");
				}case 22:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "22");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "22");
				}case 23:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "23");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "23");
				}case 24:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "24");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "24");
				}case 25:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "25");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "25");
				}case 26:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "26");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "26");
				}case 27:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "27");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "27");
				}case 28:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "28");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "28");
				}case 29:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "29");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "29");
				}case 30:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "30");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "30");
				}case 31:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "31");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "31");
				}case 32:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "32");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "32");
				}case 33:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "33");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "33");
				}case 34:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "34");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "34");
				}case 35:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "35");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "35");
				}case 36:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "36");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "36");
				}case 37:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "37");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "37");
				}case 38:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "38");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "38");
				}case 39:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "39");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "39");
				}case 40:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "40");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "40");
				}case 41:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "41");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "41");
				}case 42:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "42");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "42");
				}case 43:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "43");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "43");
				}case 44:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "44");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "44");
				}case 45:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "45");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "45");
				}case 46:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "46");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "46");
				}case 47:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "47");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "47");
				}case 48:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "48");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "48");
				}case 49:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "49");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "49");
				}case 50:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "50");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "50");
				}case 51:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "51");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "51");
				}case 52:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "52");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "52");
				}case 53:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "53");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "53");
				}case 54:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "54");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "54");
				}case 55:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "55");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "55");
				}case 56:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "56");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "56");
				}case 57:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "57");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "57");
				}case 58:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "58");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "58");
				}case 59:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "59");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "59");
				}case 60:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "60");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "60");
				}
				}
				PlayerTextDrawSetString(targetid, MugshotTD7[playerid], "IPF");
				new name[32];	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(targetid, MugshotTD5[playerid], name);				
				
				PlayerTextDrawSetString(playerid, MugshotTD7[playerid], "IPF");
	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(playerid, MugshotTD5[playerid], name);
				
				PlayerTextDrawShow(targetid, MugshotTD0[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD1[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD2[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD3[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD4[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD5[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD6[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(targetid, MugshotTD8[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD0[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD1[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD2[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD3[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD4[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD5[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD6[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(playerid, MugshotTD8[playerid]);
				SetTimerEx("MUGSHOTHIDE1", 8000, false, "i", targetid);
				SetTimerEx("MUGSHOTHIDE0", 8000, false, "i", playerid);

			}
			case 5: {
				format(string, sizeof(string), "You have set the mugshot ID to %d.", crimeid2);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				SCM(targetid, COLOR_LIGHTRED, "YOU ARE NOW READY TO TAKE MUGSHOT");
				new age = pData[targetid][pAge];
				switch(age){
				case 1:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "1");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "1");
				}case 2:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "2");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "2");
				}case 3:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "3");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "3");
				}case 4:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "4");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "4");
				}case 5:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "5");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "5");
				}case 6:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "6");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "6");
				}case 7:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "7");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "7");
				}case 8:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "8");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "8");
				}case 9:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "9");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "9");
				}case 10:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "10");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "10");
				}case 11:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "11");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "11");
				}case 12:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "12");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "12");
				}case 13:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "13");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "13");
				}case 14:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "14");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "14");
				}case 15:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "15");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "15");
				}case 16:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "16");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "16");
				}case 17:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "17");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "17");
				}case 18:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "18");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "18");
				}case 19:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "19");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "19");
				}case 20:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "20");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "20");
				}case 21:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "21");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "21");
				}case 22:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "22");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "22");
				}case 23:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "23");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "23");
				}case 24:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "24");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "24");
				}case 25:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "25");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "25");
				}case 26:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "26");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "26");
				}case 27:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "27");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "27");
				}case 28:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "28");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "28");
				}case 29:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "29");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "29");
				}case 30:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "30");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "30");
				}case 31:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "31");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "31");
				}case 32:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "32");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "32");
				}case 33:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "33");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "33");
				}case 34:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "34");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "34");
				}case 35:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "35");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "35");
				}case 36:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "36");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "36");
				}case 37:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "37");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "37");
				}case 38:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "38");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "38");
				}case 39:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "39");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "39");
				}case 40:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "40");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "40");
				}case 41:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "41");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "41");
				}case 42:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "42");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "42");
				}case 43:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "43");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "43");
				}case 44:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "44");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "44");
				}case 45:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "45");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "45");
				}case 46:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "46");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "46");
				}case 47:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "47");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "47");
				}case 48:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "48");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "48");
				}case 49:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "49");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "49");
				}case 50:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "50");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "50");
				}case 51:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "51");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "51");
				}case 52:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "52");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "52");
				}case 53:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "53");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "53");
				}case 54:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "54");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "54");
				}case 55:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "55");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "55");
				}case 56:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "56");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "56");
				}case 57:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "57");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "57");
				}case 58:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "58");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "58");
				}case 59:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "59");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "59");
				}case 60:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "60");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "60");
				}
				}
				PlayerTextDrawSetString(targetid, MugshotTD7[playerid], "IPN");
				new name[32];	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(targetid, MugshotTD5[playerid], name);				
				
				PlayerTextDrawSetString(playerid, MugshotTD7[playerid], "IPN");
	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(playerid, MugshotTD5[playerid], name);
				
				PlayerTextDrawShow(targetid, MugshotTD0[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD1[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD2[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD3[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD4[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD5[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD6[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(targetid, MugshotTD8[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD0[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD1[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD2[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD3[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD4[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD5[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD6[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(playerid, MugshotTD8[playerid]);
				SetTimerEx("MUGSHOTHIDE1", 8000, false, "i", targetid);
				SetTimerEx("MUGSHOTHIDE0", 8000, false, "i", playerid);

			}
			case 6: {
				format(string, sizeof(string), "You have set the mugshot ID to %d.", crimeid2);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				SCM(targetid, COLOR_LIGHTRED, "YOU ARE NOW READY TO TAKE MUGSHOT");
				new age = pData[targetid][pAge];
				switch(age){
				case 1:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "1");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "1");
				}case 2:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "2");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "2");
				}case 3:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "3");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "3");
				}case 4:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "4");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "4");
				}case 5:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "5");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "5");
				}case 6:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "6");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "6");
				}case 7:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "7");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "7");
				}case 8:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "8");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "8");
				}case 9:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "9");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "9");
				}case 10:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "10");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "10");
				}case 11:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "11");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "11");
				}case 12:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "12");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "12");
				}case 13:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "13");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "13");
				}case 14:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "14");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "14");
				}case 15:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "15");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "15");
				}case 16:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "16");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "16");
				}case 17:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "17");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "17");
				}case 18:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "18");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "18");
				}case 19:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "19");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "19");
				}case 20:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "20");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "20");
				}case 21:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "21");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "21");
				}case 22:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "22");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "22");
				}case 23:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "23");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "23");
				}case 24:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "24");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "24");
				}case 25:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "25");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "25");
				}case 26:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "26");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "26");
				}case 27:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "27");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "27");
				}case 28:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "28");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "28");
				}case 29:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "29");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "29");
				}case 30:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "30");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "30");
				}case 31:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "31");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "31");
				}case 32:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "32");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "32");
				}case 33:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "33");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "33");
				}case 34:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "34");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "34");
				}case 35:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "35");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "35");
				}case 36:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "36");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "36");
				}case 37:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "37");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "37");
				}case 38:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "38");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "38");
				}case 39:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "39");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "39");
				}case 40:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "40");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "40");
				}case 41:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "41");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "41");
				}case 42:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "42");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "42");
				}case 43:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "43");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "43");
				}case 44:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "44");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "44");
				}case 45:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "45");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "45");
				}case 46:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "46");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "46");
				}case 47:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "47");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "47");
				}case 48:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "48");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "48");
				}case 49:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "49");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "49");
				}case 50:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "50");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "50");
				}case 51:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "51");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "51");
				}case 52:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "52");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "52");
				}case 53:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "53");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "53");
				}case 54:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "54");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "54");
				}case 55:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "55");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "55");
				}case 56:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "56");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "56");
				}case 57:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "57");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "57");
				}case 58:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "58");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "58");
				}case 59:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "59");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "59");
				}case 60:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "60");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "60");
				}
				}
				PlayerTextDrawSetString(targetid, MugshotTD7[playerid], "IPN");
				new name[32];	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(targetid, MugshotTD5[playerid], name);				
				
				PlayerTextDrawSetString(playerid, MugshotTD7[playerid], "IPN");
	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(playerid, MugshotTD5[playerid], name);
				
				PlayerTextDrawShow(targetid, MugshotTD0[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD1[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD2[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD3[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD4[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD5[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD6[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(targetid, MugshotTD8[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD0[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD1[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD2[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD3[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD4[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD5[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD6[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(playerid, MugshotTD8[playerid]);
				SetTimerEx("MUGSHOTHIDE1", 8000, false, "i", targetid);
				SetTimerEx("MUGSHOTHIDE0", 8000, false, "i", playerid);

			}
			case 7: {
				format(string, sizeof(string), "You have set the mugshot ID to %d.", crimeid2);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				SCM(targetid, COLOR_LIGHTRED, "YOU ARE NOW READY TO TAKE MUGSHOT");
				new age = pData[targetid][pAge];
				switch(age){
				case 1:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "1");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "1");
				}case 2:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "2");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "2");
				}case 3:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "3");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "3");
				}case 4:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "4");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "4");
				}case 5:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "5");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "5");
				}case 6:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "6");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "6");
				}case 7:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "7");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "7");
				}case 8:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "8");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "8");
				}case 9:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "9");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "9");
				}case 10:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "10");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "10");
				}case 11:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "11");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "11");
				}case 12:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "12");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "12");
				}case 13:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "13");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "13");
				}case 14:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "14");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "14");
				}case 15:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "15");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "15");
				}case 16:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "16");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "16");
				}case 17:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "17");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "17");
				}case 18:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "18");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "18");
				}case 19:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "19");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "19");
				}case 20:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "20");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "20");
				}case 21:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "21");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "21");
				}case 22:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "22");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "22");
				}case 23:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "23");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "23");
				}case 24:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "24");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "24");
				}case 25:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "25");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "25");
				}case 26:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "26");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "26");
				}case 27:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "27");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "27");
				}case 28:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "28");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "28");
				}case 29:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "29");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "29");
				}case 30:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "30");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "30");
				}case 31:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "31");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "31");
				}case 32:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "32");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "32");
				}case 33:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "33");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "33");
				}case 34:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "34");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "34");
				}case 35:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "35");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "35");
				}case 36:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "36");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "36");
				}case 37:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "37");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "37");
				}case 38:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "38");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "38");
				}case 39:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "39");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "39");
				}case 40:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "40");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "40");
				}case 41:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "41");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "41");
				}case 42:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "42");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "42");
				}case 43:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "43");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "43");
				}case 44:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "44");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "44");
				}case 45:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "45");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "45");
				}case 46:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "46");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "46");
				}case 47:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "47");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "47");
				}case 48:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "48");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "48");
				}case 49:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "49");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "49");
				}case 50:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "50");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "50");
				}case 51:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "51");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "51");
				}case 52:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "52");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "52");
				}case 53:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "53");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "53");
				}case 54:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "54");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "54");
				}case 55:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "55");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "55");
				}case 56:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "56");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "56");
				}case 57:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "57");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "57");
				}case 58:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "58");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "58");
				}case 59:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "59");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "59");
				}case 60:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "60");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "60");
				}
				}
				PlayerTextDrawSetString(targetid, MugshotTD7[playerid], "HARRASMENT");
				new name[32];	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(targetid, MugshotTD5[playerid], name);				
				
				PlayerTextDrawSetString(playerid, MugshotTD7[playerid], "HARRASMENT");
	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(playerid, MugshotTD5[playerid], name);
				
				PlayerTextDrawShow(targetid, MugshotTD0[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD1[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD2[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD3[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD4[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD5[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD6[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(targetid, MugshotTD8[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD0[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD1[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD2[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD3[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD4[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD5[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD6[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(playerid, MugshotTD8[playerid]);
				SetTimerEx("MUGSHOTHIDE1", 8000, false, "i", targetid);
				SetTimerEx("MUGSHOTHIDE0", 8000, false, "i", playerid);

			}
			case 8: {
				format(string, sizeof(string), "You have set the mugshot ID to %d.", crimeid2);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				SCM(targetid, COLOR_LIGHTRED, "YOU ARE NOW READY TO TAKE MUGSHOT");
				new age = pData[targetid][pAge];
				switch(age){
				case 1:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "1");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "1");
				}case 2:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "2");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "2");
				}case 3:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "3");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "3");
				}case 4:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "4");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "4");
				}case 5:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "5");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "5");
				}case 6:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "6");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "6");
				}case 7:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "7");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "7");
				}case 8:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "8");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "8");
				}case 9:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "9");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "9");
				}case 10:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "10");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "10");
				}case 11:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "11");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "11");
				}case 12:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "12");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "12");
				}case 13:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "13");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "13");
				}case 14:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "14");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "14");
				}case 15:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "15");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "15");
				}case 16:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "16");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "16");
				}case 17:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "17");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "17");
				}case 18:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "18");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "18");
				}case 19:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "19");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "19");
				}case 20:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "20");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "20");
				}case 21:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "21");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "21");
				}case 22:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "22");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "22");
				}case 23:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "23");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "23");
				}case 24:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "24");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "24");
				}case 25:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "25");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "25");
				}case 26:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "26");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "26");
				}case 27:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "27");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "27");
				}case 28:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "28");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "28");
				}case 29:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "29");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "29");
				}case 30:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "30");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "30");
				}case 31:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "31");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "31");
				}case 32:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "32");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "32");
				}case 33:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "33");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "33");
				}case 34:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "34");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "34");
				}case 35:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "35");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "35");
				}case 36:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "36");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "36");
				}case 37:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "37");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "37");
				}case 38:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "38");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "38");
				}case 39:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "39");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "39");
				}case 40:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "40");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "40");
				}case 41:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "41");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "41");
				}case 42:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "42");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "42");
				}case 43:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "43");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "43");
				}case 44:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "44");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "44");
				}case 45:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "45");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "45");
				}case 46:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "46");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "46");
				}case 47:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "47");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "47");
				}case 48:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "48");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "48");
				}case 49:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "49");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "49");
				}case 50:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "50");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "50");
				}case 51:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "51");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "51");
				}case 52:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "52");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "52");
				}case 53:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "53");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "53");
				}case 54:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "54");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "54");
				}case 55:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "55");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "55");
				}case 56:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "56");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "56");
				}case 57:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "57");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "57");
				}case 58:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "58");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "58");
				}case 59:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "59");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "59");
				}case 60:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "60");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "60");
				}
				}
				PlayerTextDrawSetString(targetid, MugshotTD7[playerid], "Rape");
				new name[32];	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(targetid, MugshotTD5[playerid], name);				
				
				PlayerTextDrawSetString(playerid, MugshotTD7[playerid], "Rape");
	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(playerid, MugshotTD5[playerid], name);
				
				PlayerTextDrawShow(targetid, MugshotTD0[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD1[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD2[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD3[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD4[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD5[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD6[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(targetid, MugshotTD8[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD0[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD1[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD2[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD3[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD4[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD5[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD6[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(playerid, MugshotTD8[playerid]);
				SetTimerEx("MUGSHOTHIDE1", 8000, false, "i", targetid);
				SetTimerEx("MUGSHOTHIDE0", 8000, false, "i", playerid);

			}
			case 9: {
				format(string, sizeof(string), "You have set the mugshot ID to %d.", crimeid2);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				SCM(targetid, COLOR_LIGHTRED, "YOU ARE NOW READY TO TAKE MUGSHOT");
				new age = pData[targetid][pAge];
				switch(age){
				case 1:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "1");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "1");
				}case 2:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "2");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "2");
				}case 3:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "3");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "3");
				}case 4:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "4");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "4");
				}case 5:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "5");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "5");
				}case 6:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "6");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "6");
				}case 7:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "7");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "7");
				}case 8:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "8");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "8");
				}case 9:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "9");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "9");
				}case 10:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "10");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "10");
				}case 11:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "11");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "11");
				}case 12:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "12");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "12");
				}case 13:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "13");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "13");
				}case 14:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "14");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "14");
				}case 15:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "15");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "15");
				}case 16:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "16");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "16");
				}case 17:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "17");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "17");
				}case 18:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "18");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "18");
				}case 19:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "19");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "19");
				}case 20:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "20");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "20");
				}case 21:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "21");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "21");
				}case 22:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "22");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "22");
				}case 23:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "23");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "23");
				}case 24:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "24");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "24");
				}case 25:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "25");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "25");
				}case 26:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "26");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "26");
				}case 27:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "27");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "27");
				}case 28:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "28");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "28");
				}case 29:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "29");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "29");
				}case 30:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "30");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "30");
				}case 31:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "31");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "31");
				}case 32:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "32");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "32");
				}case 33:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "33");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "33");
				}case 34:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "34");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "34");
				}case 35:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "35");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "35");
				}case 36:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "36");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "36");
				}case 37:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "37");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "37");
				}case 38:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "38");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "38");
				}case 39:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "39");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "39");
				}case 40:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "40");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "40");
				}case 41:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "41");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "41");
				}case 42:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "42");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "42");
				}case 43:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "43");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "43");
				}case 44:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "44");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "44");
				}case 45:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "45");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "45");
				}case 46:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "46");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "46");
				}case 47:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "47");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "47");
				}case 48:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "48");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "48");
				}case 49:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "49");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "49");
				}case 50:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "50");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "50");
				}case 51:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "51");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "51");
				}case 52:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "52");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "52");
				}case 53:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "53");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "53");
				}case 54:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "54");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "54");
				}case 55:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "55");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "55");
				}case 56:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "56");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "56");
				}case 57:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "57");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "57");
				}case 58:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "58");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "58");
				}case 59:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "59");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "59");
				}case 60:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "60");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "60");
				}
				}
				PlayerTextDrawSetString(targetid, MugshotTD7[playerid], "Car jacking");
				new name[32];	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(targetid, MugshotTD5[playerid], name);				
				
				PlayerTextDrawSetString(playerid, MugshotTD7[playerid], "Car jacking");
	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(playerid, MugshotTD5[playerid], name);
				
				PlayerTextDrawShow(targetid, MugshotTD0[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD1[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD2[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD3[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD4[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD5[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD6[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(targetid, MugshotTD8[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD0[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD1[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD2[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD3[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD4[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD5[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD6[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(playerid, MugshotTD8[playerid]);
				SetTimerEx("MUGSHOTHIDE1", 8000, false, "i", targetid);
				SetTimerEx("MUGSHOTHIDE0", 8000, false, "i", playerid);

			}
			case 10: {
				format(string, sizeof(string), "You have set the mugshot ID to %d.", crimeid2);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				SCM(targetid, COLOR_LIGHTRED, "YOU ARE NOW READY TO TAKE MUGSHOT");
				new age = pData[targetid][pAge];
				switch(age){
				case 1:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "1");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "1");
				}case 2:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "2");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "2");
				}case 3:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "3");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "3");
				}case 4:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "4");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "4");
				}case 5:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "5");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "5");
				}case 6:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "6");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "6");
				}case 7:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "7");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "7");
				}case 8:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "8");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "8");
				}case 9:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "9");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "9");
				}case 10:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "10");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "10");
				}case 11:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "11");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "11");
				}case 12:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "12");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "12");
				}case 13:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "13");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "13");
				}case 14:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "14");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "14");
				}case 15:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "15");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "15");
				}case 16:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "16");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "16");
				}case 17:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "17");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "17");
				}case 18:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "18");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "18");
				}case 19:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "19");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "19");
				}case 20:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "20");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "20");
				}case 21:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "21");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "21");
				}case 22:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "22");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "22");
				}case 23:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "23");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "23");
				}case 24:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "24");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "24");
				}case 25:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "25");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "25");
				}case 26:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "26");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "26");
				}case 27:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "27");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "27");
				}case 28:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "28");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "28");
				}case 29:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "29");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "29");
				}case 30:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "30");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "30");
				}case 31:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "31");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "31");
				}case 32:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "32");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "32");
				}case 33:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "33");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "33");
				}case 34:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "34");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "34");
				}case 35:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "35");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "35");
				}case 36:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "36");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "36");
				}case 37:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "37");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "37");
				}case 38:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "38");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "38");
				}case 39:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "39");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "39");
				}case 40:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "40");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "40");
				}case 41:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "41");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "41");
				}case 42:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "42");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "42");
				}case 43:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "43");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "43");
				}case 44:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "44");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "44");
				}case 45:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "45");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "45");
				}case 46:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "46");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "46");
				}case 47:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "47");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "47");
				}case 48:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "48");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "48");
				}case 49:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "49");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "49");
				}case 50:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "50");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "50");
				}case 51:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "51");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "51");
				}case 52:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "52");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "52");
				}case 53:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "53");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "53");
				}case 54:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "54");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "54");
				}case 55:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "55");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "55");
				}case 56:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "56");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "56");
				}case 57:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "57");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "57");
				}case 58:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "58");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "58");
				}case 59:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "59");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "59");
				}case 60:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "60");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "60");
				}
				}
				PlayerTextDrawSetString(targetid, MugshotTD7[playerid], "Homicide");
				new name[32];	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(targetid, MugshotTD5[playerid], name);				
				
				PlayerTextDrawSetString(playerid, MugshotTD7[playerid], "Homicide");
	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(playerid, MugshotTD5[playerid], name);
				
				PlayerTextDrawShow(targetid, MugshotTD0[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD1[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD2[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD3[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD4[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD5[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD6[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(targetid, MugshotTD8[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD0[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD1[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD2[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD3[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD4[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD5[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD6[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(playerid, MugshotTD8[playerid]);
				SetTimerEx("MUGSHOTHIDE1", 8000, false, "i", targetid);
				SetTimerEx("MUGSHOTHIDE0", 8000, false, "i", playerid);

			}
			case 11: {
				format(string, sizeof(string), "You have set the mugshot ID to %d.", crimeid2);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				SCM(targetid, COLOR_LIGHTRED, "YOU ARE NOW READY TO TAKE MUGSHOT");
				new age = pData[targetid][pAge];
				switch(age){
				case 1:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "1");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "1");
				}case 2:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "2");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "2");
				}case 3:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "3");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "3");
				}case 4:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "4");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "4");
				}case 5:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "5");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "5");
				}case 6:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "6");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "6");
				}case 7:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "7");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "7");
				}case 8:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "8");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "8");
				}case 9:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "9");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "9");
				}case 10:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "10");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "10");
				}case 11:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "11");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "11");
				}case 12:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "12");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "12");
				}case 13:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "13");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "13");
				}case 14:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "14");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "14");
				}case 15:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "15");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "15");
				}case 16:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "16");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "16");
				}case 17:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "17");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "17");
				}case 18:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "18");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "18");
				}case 19:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "19");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "19");
				}case 20:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "20");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "20");
				}case 21:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "21");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "21");
				}case 22:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "22");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "22");
				}case 23:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "23");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "23");
				}case 24:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "24");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "24");
				}case 25:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "25");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "25");
				}case 26:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "26");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "26");
				}case 27:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "27");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "27");
				}case 28:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "28");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "28");
				}case 29:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "29");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "29");
				}case 30:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "30");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "30");
				}case 31:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "31");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "31");
				}case 32:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "32");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "32");
				}case 33:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "33");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "33");
				}case 34:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "34");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "34");
				}case 35:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "35");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "35");
				}case 36:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "36");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "36");
				}case 37:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "37");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "37");
				}case 38:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "38");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "38");
				}case 39:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "39");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "39");
				}case 40:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "40");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "40");
				}case 41:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "41");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "41");
				}case 42:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "42");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "42");
				}case 43:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "43");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "43");
				}case 44:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "44");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "44");
				}case 45:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "45");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "45");
				}case 46:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "46");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "46");
				}case 47:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "47");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "47");
				}case 48:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "48");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "48");
				}case 49:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "49");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "49");
				}case 50:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "50");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "50");
				}case 51:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "51");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "51");
				}case 52:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "52");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "52");
				}case 53:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "53");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "53");
				}case 54:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "54");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "54");
				}case 55:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "55");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "55");
				}case 56:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "56");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "56");
				}case 57:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "57");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "57");
				}case 58:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "58");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "58");
				}case 59:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "59");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "59");
				}case 60:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "60");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "60");
				}
				}
				PlayerTextDrawSetString(targetid, MugshotTD7[playerid], "Murder");
				new name[32];	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(targetid, MugshotTD5[playerid], name);				
				
				PlayerTextDrawSetString(playerid, MugshotTD7[playerid], "Murder");
	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(playerid, MugshotTD5[playerid], name);
				
				PlayerTextDrawShow(targetid, MugshotTD0[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD1[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD2[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD3[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD4[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD5[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD6[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(targetid, MugshotTD8[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD0[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD1[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD2[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD3[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD4[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD5[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD6[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(playerid, MugshotTD8[playerid]);
				SetTimerEx("MUGSHOTHIDE1", 8000, false, "i", targetid);
				SetTimerEx("MUGSHOTHIDE0", 8000, false, "i", playerid);

			}
			case 12: {
				format(string, sizeof(string), "You have set the mugshot ID to %d.", crimeid2);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				SCM(targetid, COLOR_LIGHTRED, "YOU ARE NOW READY TO TAKE MUGSHOT");

				new age = pData[targetid][pAge];
				switch(age){
				case 1:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "1");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "1");
				}case 2:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "2");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "2");
				}case 3:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "3");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "3");
				}case 4:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "4");				
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "4");
				}case 5:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "5");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "5");
				}case 6:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "6");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "6");
				}case 7:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "7");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "7");
				}case 8:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "8");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "8");
				}case 9:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "9");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "9");
				}case 10:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "10");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "10");
				}case 11:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "11");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "11");
				}case 12:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "12");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "12");
				}case 13:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "13");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "13");
				}case 14:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "14");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "14");
				}case 15:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "15");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "15");
				}case 16:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "16");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "16");
				}case 17:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "17");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "17");
				}case 18:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "18");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "18");
				}case 19:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "19");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "19");
				}case 20:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "20");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "20");
				}case 21:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "21");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "21");
				}case 22:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "22");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "22");
				}case 23:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "23");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "23");
				}case 24:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "24");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "24");
				}case 25:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "25");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "25");
				}case 26:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "26");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "26");
				}case 27:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "27");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "27");
				}case 28:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "28");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "28");
				}case 29:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "29");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "29");
				}case 30:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "30");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "30");
				}case 31:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "31");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "31");
				}case 32:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "32");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "32");
				}case 33:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "33");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "33");
				}case 34:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "34");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "34");
				}case 35:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "35");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "35");
				}case 36:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "36");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "36");
				}case 37:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "37");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "37");
				}case 38:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "38");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "38");
				}case 39:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "39");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "39");
				}case 40:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "40");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "40");
				}case 41:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "41");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "41");
				}case 42:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "42");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "42");
				}case 43:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "43");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "43");
				}case 44:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "44");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "44");
				}case 45:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "45");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "45");
				}case 46:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "46");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "46");
				}case 47:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "47");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "47");
				}case 48:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "48");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "48");
				}case 49:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "49");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "49");
				}case 50:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "50");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "50");
				}case 51:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "51");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "51");
				}case 52:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "52");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "52");
				}case 53:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "53");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "53");
				}case 54:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "54");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "54");
				}case 55:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "55");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "55");
				}case 56:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "56");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "56");
				}case 57:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "57");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "57");
				}case 58:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "58");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "58");
				}case 59:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "59");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "59");
				}case 60:{
					PlayerTextDrawSetString(playerid, MugshotTD6[playerid], "60");
					PlayerTextDrawSetString(targetid, MugshotTD6[playerid], "60");
				}
				}
				PlayerTextDrawSetString(targetid, MugshotTD7[playerid], "Estafa");
				new name[32];	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(targetid, MugshotTD5[playerid], name);				
				
				PlayerTextDrawSetString(playerid, MugshotTD7[playerid], "Estafa");
	
				format(name, sizeof(name), "%s", GetRPName(targetid));
				PlayerTextDrawSetString(playerid, MugshotTD5[playerid], name);
				
				PlayerTextDrawShow(targetid, MugshotTD0[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD1[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD2[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD3[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD4[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD5[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD6[playerid]);
				PlayerTextDrawShow(targetid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(targetid, MugshotTD8[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD0[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD1[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD2[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD3[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD4[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD5[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD6[playerid]);
				PlayerTextDrawShow(playerid, MugshotTD7[playerid]);			
				PlayerTextDrawShow(playerid, MugshotTD8[playerid]);
				SetTimerEx("MUGSHOTHIDE1", 8000, false, "i", targetid);
				SetTimerEx("MUGSHOTHIDE0", 8000, false, "i", playerid);

			}
			default: {
				SendClientMessage(playerid, COLOR_WHITE, "Invalid CRIME ID!");
				SendClientMessage(playerid, COLOR_BLUE, "|1| robbery |2| carnaper |3| kidnapping |4| robbery |5| IPF |6| IPN |7| HARRASMENT |8| rape |9| car jacking");
				SendClientMessage(playerid, COLOR_BLUE, "|10| homicide |11 murder |12| estafa");
			}
		}
	}	
	else
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	return 1;
}

forward MUGSHOTHIDE0(playerid);
public MUGSHOTHIDE0(playerid)
{
	PlayerTextDrawHide(playerid, MugshotTD0[playerid]);
	PlayerTextDrawHide(playerid, MugshotTD1[playerid]);
	PlayerTextDrawHide(playerid, MugshotTD2[playerid]);
	PlayerTextDrawHide(playerid, MugshotTD3[playerid]);
	PlayerTextDrawHide(playerid, MugshotTD4[playerid]);
	PlayerTextDrawHide(playerid, MugshotTD5[playerid]);
	PlayerTextDrawHide(playerid, MugshotTD6[playerid]);
	PlayerTextDrawHide(playerid, MugshotTD7[playerid]);			
	PlayerTextDrawHide(playerid, MugshotTD8[playerid]);
	return 1;
}
forward MUGSHOTHIDE1(playerid);
public MUGSHOTHIDE1(playerid)
{
	PlayerTextDrawHide(playerid, MugshotTD0[playerid]);
	PlayerTextDrawHide(playerid, MugshotTD1[playerid]);
	PlayerTextDrawHide(playerid, MugshotTD2[playerid]);
	PlayerTextDrawHide(playerid, MugshotTD3[playerid]);
	PlayerTextDrawHide(playerid, MugshotTD4[playerid]);
	PlayerTextDrawHide(playerid, MugshotTD5[playerid]);
	PlayerTextDrawHide(playerid, MugshotTD6[playerid]);
	PlayerTextDrawHide(playerid, MugshotTD7[playerid]);			
	PlayerTextDrawHide(playerid, MugshotTD8[playerid]);
	return 1;
}

CMD:me(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /me [action]");
	}

	if(Maskara[playerid] == 1) {
		if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} Stranger(B%d) %.*s...", MaskaraID[playerid], MAX_SPLIT_LENGTH, params);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} ...%s", params[MAX_SPLIT_LENGTH]);
			new szString[528];
			format(szString, sizeof(szString), " %s [ME]: %s ", MaskaraID[playerid], params);
			SendDiscordMessage(12, szString);
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} Stranger(B%d) %s", MaskaraID[playerid], params);
			new szString[528];
			format(szString, sizeof(szString), " %s [ME]: %s ", MaskaraID[playerid], params);
			SendDiscordMessage(12, szString);
		}
	} else {
		if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s %.*s...", GetRPName(playerid), MAX_SPLIT_LENGTH, params);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} ...%s", params[MAX_SPLIT_LENGTH]);
			new szString[528];
			format(szString, sizeof(szString), " %s [ME]: %s ", GetRPName(playerid), params);
			SendDiscordMessage(12, szString);
		
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s %s", GetRPName(playerid), params);
			new szString[528];
			format(szString, sizeof(szString), " %s [ME]: %s ", GetRPName(playerid), params);
			SendDiscordMessage(12, szString);
		}
	}
	return 1;
}

CMD:ame(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new message[100], string[128];
	if(sscanf(params, "s[100]", message))
	{
		SCM(playerid, COLOR_SYNTAX, "Usage: /ame [action/off]");
 		SCM(playerid, COLOR_GREY2, "HINT: You can use this command to show an action above your head.");
		SCM(playerid, COLOR_GREY2, "HINT: This is useful for areas with a lot of text or congestion and avoiding spam.");
		SCM(playerid, COLOR_GREY2, "HINT: You will not be able to see the bubble, but a message is sent with the text other players see above your head.");
		SCM(playerid, COLOR_REALRED, "NOTE: Don't abuse it or get a punishment.");
		return 1;
	}
	if(strcmp(message, "off", true) == 0)
	{
	    SCM(playerid, COLOR_GREY2, "  You have removed the description label.");

	    DestroyDynamic3DTextLabel(pData[playerid][aMeID]);
	    pData[playerid][aMeStatus] =0;
	    return 1;
	}
	if(strlen(message) > 64) return SCM(playerid, COLOR_GREY2, "  The action is too long, please reduce the length.");
	if(strlen(message) < 3) return SCM(playerid, COLOR_GREY2, "  The action is too short, please increase the length.");
	if(Maskara[playerid] == 1)
	{
		if(pData[playerid][aMeStatus] == 0)
		{
		    pData[playerid][aMeStatus] =1;

			format(string, sizeof(string), "**{C2A2DA} Stranger(B%d) %s", MaskaraID[playerid], message);
			pData[playerid][aMeID] = CreateDynamic3DTextLabel(string, SERVER_COLOR, 0.0, 0.0, 0.0, 20.0, playerid);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);
			return 1;
		}
		else
		{
			format(string, sizeof(string), "**{C2A2DA} Stranger(B%d) %s", MaskaraID[playerid], message);
			UpdateDynamic3DTextLabelText(pData[playerid][aMeID], SERVER_COLOR, string);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);
			return 1;
		}
	}
	else
	{
		if(pData[playerid][aMeStatus] == 0)
		{
		    pData[playerid][aMeStatus] = 1;

			format(string, sizeof(string), "**{C2A2DA} %s %s", GetRPName(playerid), message);
			pData[playerid][aMeID] = CreateDynamic3DTextLabel(string, SERVER_COLOR, 0.0, 0.0, 0.0, 20.0, playerid);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);
			return 1;
		}
		else
		{
			format(string, sizeof(string), "**{C2A2DA} %s %s", GetRPName(playerid), message);
			UpdateDynamic3DTextLabelText(pData[playerid][aMeID], SERVER_COLOR, string);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);
			return 1;
		}
	}
}

CMD:ado(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new message[100], string[180];
	if(sscanf(params, "s[100]", message))
	{
		SCM(playerid, COLOR_SYNTAX, "Usage: /ado [action/off]");
  		SCM(playerid, COLOR_GREY2, "HINT: You can use this command to show an action above your head.");
		SCM(playerid, COLOR_GREY2, "HINT: This is useful for areas with a lot of text or congestion and avoiding spam.");
		SCM(playerid, COLOR_GREY2, "HINT: You will not be able to see the bubble, but a message is sent with the text other players see above your head.");
		SCM(playerid, COLOR_REALRED, "NOTE: Don't abuse it or get a punishment.");
		return 1;
	}
	if(strcmp(message, "off", true) == 0)
	{
	    SCM(playerid, COLOR_GREY2, "  You have removed the description label.");

	    DestroyDynamic3DTextLabel(pData[playerid][aMeID]);
	    pData[playerid][aMeStatus] =0;
	    return 1;
	}
	if(strlen(message) > 64) return SCM(playerid, COLOR_GREY2, "  The action is too long, please reduce the length.");
	if(strlen(message) < 3) return SCM(playerid, COLOR_GREY2, "  The action is too short, please increase the length.");

	if(Maskara[playerid] == 1)
	{
		if(pData[playerid][aMeStatus] == 0)
		{
			pData[playerid][aMeStatus] = 1;

			format(string, sizeof(string), "**{C2A2DA} %s (( Stranger(B%d) ))", message, MaskaraID[playerid]);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);

			pData[playerid][aMeID] = CreateDynamic3DTextLabel(string, COLOR_PURPLE, 0.0, 0.0, 0.0, 20.0, playerid);
			return 1;
		}
		else
		{
			format(string, sizeof(string), "**{C2A2DA} %s (( Stranger(B%d) ))", message, MaskaraID[playerid]);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);

			UpdateDynamic3DTextLabelText(pData[playerid][aMeID], COLOR_PURPLE, string);
			return 1;
		}
	}
	else
	{
		if(pData[playerid][aMeStatus] == 0)
		{
			pData[playerid][aMeStatus] = 1;

			format(string, sizeof(string), "**{C2A2DA} %s (( %s ))", message, GetRPName(playerid));
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);

			pData[playerid][aMeID] = CreateDynamic3DTextLabel(string, COLOR_PURPLE, 0.0, 0.0, 0.0, 20.0, playerid);
			return 1;
		}
		else
		{
			format(string, sizeof(string), "**{C2A2DA} %s (( %s ))", message, GetRPName(playerid));
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, string);

			UpdateDynamic3DTextLabelText(pData[playerid][aMeID], COLOR_PURPLE, string);
			return 1;
		}
	}
}

CMD:do(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /do [describe]");
	}
	if(Maskara[playerid] == 1) {
		if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %.*s...", MAX_SPLIT_LENGTH, params);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} ...%s (( Stranger(B%d) ))", params[MAX_SPLIT_LENGTH], MaskaraID[playerid]);
			new szString[528];
			format(szString, sizeof(szString), " %s [DO]: %s ", MaskaraID[playerid], params);
			SendDiscordMessage(12, szString);
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s (( Stranger(B%d) ))", params, MaskaraID[playerid]);
			new szString[528];
			format(szString, sizeof(szString), " %s [DO]: %s ", MaskaraID[playerid], params);
			SendDiscordMessage(12, szString);
		}
	} else {
		if(strlen(params) > MAX_SPLIT_LENGTH)
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %.*s...", MAX_SPLIT_LENGTH, params);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} ...%s (( %s ))", params[MAX_SPLIT_LENGTH], GetRPName(playerid));
			new szString[528];
			format(szString, sizeof(szString), " %s [DO]: %s ", GetRPName(playerid) , params);
			SendDiscordMessage(12, szString);
		}
		else
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s (( %s ))", params, GetRPName(playerid));
			new szString[528];
			format(szString, sizeof(szString), " %s [DO]: %s ", GetRPName(playerid) , params);
			SendDiscordMessage(12, szString);
		}
	}
	return 1;
}

CMD:creategreenzone(playerid, params[])
{
    if(pData[playerid][pAdmin] < 8)
    {
        return SendClientMessage(playerid, COLOR_SYNTAX, "SERVER: You are not authorized to use this command.");
    }

	pData[playerid][pZoneType] = ZONETYPE_SAFEZONE;
	ShowPlayerDialog(playerid, DIALOG_CREATEZONE, DIALOG_STYLE_MSGBOX, "Greenzone System", "You have entered Greenzone creation mode. In order to create a Greenzone you need\nto mark four points around the area you want your Greenzone to be in, forming\na square. You must make a square or your outcome won't be as expected.\n\nPress "SVRCLR"Confirm{A9C4E4} to set the Greenzone spawn.", "Confirm", "Cancel");
    return 1;
}

CMD:greenzonecancel(playerid, params[])
{
	if(pData[playerid][pAdmin] < 8 && !pData[playerid][pGangMod])
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "SERVER: You are not authorized to use this command.");
	}
	if(pData[playerid][pZoneCreation] != ZONETYPE_SAFEZONE)
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "You are not creating a Greenzone at the moment.");
	}

	CancelZoneCreation(playerid);
	SendClientMessage(playerid, COLOR_LIGHTRED, "** Land creation cancelled.");
	return 1;
}

CMD:gotogreenzone(playerid, params[])
{
    new id;
    if(pData[playerid][pAdmin] < 8)
    {
        return SendClientMessage(playerid, COLOR_SYNTAX, "You are not Authorized to use this command.");
    }
    if(sscanf(params, "i", id))
    {
        SendClientMessage(playerid, COLOR_SYNTAX, "Usage: /gotogreenzone [id]");
        return 1;
    }
    if(!SafeZoneInfo[id][SZExists])
    {
        return SendClientMessage(playerid, COLOR_SYNTAX, "Invalid id");
    }

    GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

    SetPlayerPos(playerid, SafeZoneInfo[id][SMinX], SafeZoneInfo[id][SMinY], SafeZoneInfo[id][SHeight]);
    SetPlayerFacingAngle(playerid, 1.0);
    SetPlayerInterior(playerid, SafeZoneInfo[id][SzoneInt]);
    SetPlayerVirtualWorld(playerid, SafeZoneInfo[id][SzoneVW]);
    SetCameraBehindPlayer(playerid);
    return 1;
}

CMD:removegreenzone(playerid, params[])
{
    new id;
    if(pData[playerid][pAdmin] < 8)
    {
        return SendClientMessage(playerid, COLOR_SYNTAX, "SERVER: You are not authorized to use this command.");
    }
    if(sscanf(params, "i", id))
    {
        SendClientMessage(playerid, COLOR_SYNTAX, "Usage: /removegreenzone [id]");
        return 1;
    }
    if(!(0 <= id < MAX_SAFEZONE) || !SafeZoneInfo[id][SZExists])
    {
        return SendClientMessage(playerid, COLOR_SYNTAX, "Invalid Greenzone.");
    }

	DestroyDynamicArea(SafeZoneInfo[id][SArea]);
	GangZoneDestroy(SafeZoneInfo[id][Szone]);

    SafeZoneInfo[id][SZExists] = 0;

    SendMessage(playerid, COLOR_WHITE, "** You have removed the Greenzone %i.", id);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM safezone WHERE id = %i", id);
    mysql_tquery(connectionID, queryBuffer);
    return 1;
}

CMD:editgreenzone(playerid, params[])
{
	new id = IsPlayerInsideOfSafeZone(playerid),
		option[100], param[100];

	if(id < 0)
	{
	    SendMessage(playerid, COLOR_GREY2, "You are not inside of any Greenzone.");
	}
	if(sscanf(params, "s[100]S()[100]", option, param))
	{
		SendMessage(playerid, COLOR_SYNTAX, "Usage: /editgreenzone [option]");
		SendMessage(playerid, COLOR_SYNTAX, "Options: enabled");
	}

	if(!strcmp(option, "enabled", true))
	{}

	return 1;
}
CMD:check(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid;

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /check [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	DisplayStats(targetid, playerid);
	return 1;
}

CMD:l(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::low(playerid, params);
}

CMD:low(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new
	    string[144];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(l)ow [text]");
	}
	if(strfind(params, "admin", true) != -1 || strfind(params, "helper", true) != -1 || strfind(params, "bug", true) != -1 ||  
	strfind(params, "gz", true) != -1 || strfind(params, "greenzone", true) != -1 || strfind(params, "nonrp", true) != -1 || 
	strfind(params, "safezone", true) != -1 || strfind(params, "safe zone", true) != -1 || strfind(params, "green zone", true) != -1 || 
	strfind(params, "dmer", true) != -1 || strfind(params, "anghel", true) != -1 || 
	strfind(params, "rp", true) != -1 || strfind(params, "discord", true) != -1 || strfind(params, "roleplay", true) != -1 || 
	strfind(params, "mod", true) != -1 || strfind(params, "discordia", true) != -1 ||
	strfind(params, "vdm", true) != -1 || 
	strfind(params, "randompunching", true) != -1 || strfind(params, "random punching", true) != -1 || strfind(params, "random punch", true) != -1 ||
	strfind(params, "mods", true) != -1 || strfind(params, "cleo", true) != -1 || strfind(params, "meta", true) != -1 || 
	strfind(params, "atems", true) != -1 || strfind(params, "delay", true) != -1 || strfind(params, "rolyo", true) != -1 || 
	strfind(params, "server", true) != -1 || strfind(params, "(ooc)", true) != -1 || strfind(params, "groupchat", true) != -1|| 
	strfind(params, "dc", true) != -1|| strfind(params, "gc", true) != -1)
	{
		pData[playerid][pMuted] = 20;
		GivePlayerCash(playerid, -200);
		SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for 20 seconds due to suspected to say OOC TERM IN IC.");
		SAM(COLOR_YELLOW, ""RED"SECURITY[BOT] %s"WHITE"[%i] is using an words for ooc in ic [%s].", GetRPName(playerid), playerid, params);
		new szString[528];
		format(szString, sizeof(szString), "%s [%i] is using an words for ooc in ic [%s].", GetRPName(playerid), playerid, params);
		SendDiscordMessage(32, szString);
		return 1;
	}	
	if(Maskara[playerid] == 1) {
		format(string, sizeof(string), "(LOW)Stranger(B%d): %s", MaskaraID[playerid], params);
		SendProximityFadeMessage(playerid, 5.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
		new szString[528];
		format(szString, sizeof(szString), "Stranger(B%d): %s", MaskaraID[playerid], params);
		SendDiscordMessage(3, szString);
	} else {
		format(string, sizeof(string), "(LOW)%s: %s", GetRPName(playerid), params);
		SendProximityFadeMessage(playerid, 5.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
		new szString[528];
		format(szString, sizeof(szString), "%s: %s", GetRPName(playerid), params);
		SendDiscordMessage(3, szString);
		
	}
	SetPlayerBubbleText(playerid, 5.0, COLOR_GREY1, "(Quietly) %s", params);
	return 1;
}

CMD:w(playerid, params[]) return callcmd::whisper(playerid, params);
CMD:whisper(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, text[128];

	if(sscanf(params, "us[128]", targetid, text))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(w)hisper [playerid] [text]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pToggleWhisper] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player has blocked all incoming whispers.");
	}
	if(pData[playerid][pToggleWhisper] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Whisper chat is currently disabled. /tog whisper to re-enable.");
	}
	if(!IsPlayerInRangeOfPlayer(playerid, targetid, 5.0) && (!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be near that player to whisper them.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't whisper to yourself.");
	}
	if(strfind(params, "admin", true) != -1 || strfind(params, "helper", true) != -1 || strfind(params, "bug", true) != -1 ||  
	strfind(params, "gz", true) != -1 || strfind(params, "greenzone", true) != -1 || strfind(params, "nonrp", true) != -1 || 
	strfind(params, "safezone", true) != -1 || strfind(params, "safe zone", true) != -1 || strfind(params, "green zone", true) != -1 || 
	strfind(params, "dmer", true) != -1 || strfind(params, "anghel", true) != -1 || 
	strfind(params, "rp", true) != -1 || strfind(params, "discord", true) != -1 || strfind(params, "roleplay", true) != -1 || 
	strfind(params, "mod", true) != -1 || strfind(params, "discordia", true) != -1 ||
	strfind(params, "vdm", true) != -1 || 
	strfind(params, "randompunching", true) != -1 || strfind(params, "random punching", true) != -1 || strfind(params, "random punch", true) != -1 ||
	strfind(params, "mods", true) != -1 || strfind(params, "cleo", true) != -1 || strfind(params, "meta", true) != -1 || 
	strfind(params, "atems", true) != -1 || strfind(params, "delay", true) != -1 || strfind(params, "rolyo", true) != -1 || 
	strfind(params, "server", true) != -1 || strfind(params, "(ooc)", true) != -1|| strfind(params, "groupchat", true) != -1|| 
	strfind(params, "dc", true) != -1|| strfind(params, "gc", true) != -1|| strfind(params, "groupchat", true) != -1|| 
	strfind(params, "dc", true) != -1|| strfind(params, "gc", true) != -1)
	{
		pData[playerid][pMuted] = 20;
		GivePlayerCash(playerid, -200);
		SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for 20 seconds due to suspected to say OOC TERM IN IC.");
		SAM(COLOR_YELLOW, ""RED"SECURITY[BOT] %s"WHITE"[%i] is using an words for ooc in ic [%s].", GetRPName(playerid), playerid, params);
		new szString[528];
		format(szString, sizeof(szString), "%s [%i] is using an words for ooc in ic [%s].", GetRPName(playerid), playerid, params);
		SendDiscordMessage(32, szString);
		return 1;
	}	
    foreach(new i : Player)
    {
	    if(pData[i][pPMListen])
		{
  			SM(i, COLOR_YELLOW, "[L] %s whisper to %s: %s", GetRPName(playerid), GetRPName(targetid), text);
        }
	}

	SM(targetid, COLOR_YELLOW, "** Whisper from %s: %s **", GetRPName(playerid), text);
	SM(playerid, COLOR_YELLOW, "** Whisper to %s: %s **", GetRPName(targetid), text);

	SetPlayerBubbleText(playerid, 5.0, COLOR_YELLOW, "(Whispering)");

	if(pData[targetid][pWhisperFrom] == INVALID_PLAYER_ID)
	{
	    SCM(targetid, COLOR_WHITE, "** You can use '/rw [message]' to reply to this whisper.");
	}
	new szString[528];
	format(szString, sizeof(szString), " %s whisper to %s: %s ", GetRPName(playerid), GetRPName(targetid), text);
	SendDiscordMessage(2, szString);
	pData[targetid][pWhisperFrom] = playerid;
	return 1;
}


CMD:rw(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rw [text]");
	}
	if(pData[playerid][pWhisperFrom] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't been whispered by anyone since you joined the server.");
	}
	if(!IsPlayerInRangeOfPlayer(playerid, pData[playerid][pWhisperFrom], 5.0) && (!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be near that player to whisper them.");
	}
	if(strfind(params, "admin", true) != -1 || strfind(params, "helper", true) != -1 || strfind(params, "bug", true) != -1 ||  
	strfind(params, "gz", true) != -1 || strfind(params, "greenzone", true) != -1 || strfind(params, "nonrp", true) != -1 || 
	strfind(params, "safezone", true) != -1 || strfind(params, "safe zone", true) != -1 || strfind(params, "green zone", true) != -1 || 
	strfind(params, "dmer", true) != -1 || strfind(params, "anghel", true) != -1 || 
	strfind(params, "rp", true) != -1 || strfind(params, "discord", true) != -1 || strfind(params, "roleplay", true) != -1 || 
	strfind(params, "mod", true) != -1 || strfind(params, "discordia", true) != -1 ||
	strfind(params, "vdm", true) != -1 || 
	strfind(params, "randompunching", true) != -1 || strfind(params, "random punching", true) != -1 || strfind(params, "random punch", true) != -1 ||
	strfind(params, "mods", true) != -1 || strfind(params, "cleo", true) != -1 || strfind(params, "meta", true) != -1 || 
	strfind(params, "atems", true) != -1 || strfind(params, "delay", true) != -1 || strfind(params, "rolyo", true) != -1 || 
	strfind(params, "server", true) != -1 || strfind(params, "(ooc)", true) != -1)
	{
		pData[playerid][pMuted] = 20;
		GivePlayerCash(playerid, -200);
		SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for 20 seconds due to suspected to say OOC TERM IN IC.");
		SAM(COLOR_YELLOW, ""RED"SECURITY[BOT] %s"WHITE"[%i] is using an words for ooc in ic [%s].", GetRPName(playerid), playerid, params);
		new szString[528];
		format(szString, sizeof(szString), "%s [%i] is using an words for ooc in ic [%s].", GetRPName(playerid), playerid, params);
		SendDiscordMessage(32, szString);
		return 1;
	}		
	pData[pData[playerid][pWhisperFrom]][pWhisperFrom] = playerid;
	SM(pData[playerid][pWhisperFrom], COLOR_YELLOW, "** Whisper from %s: %s **", GetRPName(playerid), params);
	SM(playerid, COLOR_YELLOW, "** Whisper to %s: %s **", GetRPName(pData[playerid][pWhisperFrom]), params);
	new szString[528];
	format(szString, sizeof(szString), "%s whisper to %s: %s", GetRPName(playerid), GetRPName(pData[playerid][pWhisperFrom]), params);
	SendDiscordMessage(2, szString);
    foreach(new i : Player)
    {
	    if(pData[i][pPMListen])
		{
			SM(i, COLOR_YELLOW, "(L) %s whispers to %s: %s", GetRPName(playerid), GetRPName(pData[playerid][pWhisperFrom]), params);
        }
	} // GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(giveplayerid), giveplayerid, whisper);
	return 1;
}

CMD:createatm(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new Float:x, Float:y, Float:z, Float:a;
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not authorized to use this command.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createatm [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: The ATM will be created at the coordinates you are standing on.");
		return 1;
	}
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your virtual world & interior must be 0!");
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_ATMS; i ++)
	{
		if(!AtmInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO atms VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateAtm", "iiffff", playerid, i, x, y, z - 0.5, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "ATM slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}
CMD:removeatm(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new loc;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not authorized to use this command.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removeatm [atmid] (/nearest)");
	}
	if(!(0 <= loc < MAX_ATMS) || !AtmInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid ATM or Static.");
	}
    DestroyDynamic3DTextLabel(AtmInfo[loc][aText]);
    DestroyDynamicObject(AtmInfo[loc][aObject]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM atms WHERE id = %i", AtmInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	AtmInfo[loc][aExists] = false;
	AtmInfo[loc][aID] = 0;

	SCMf(playerid, COLOR_WHITE, "** You have removed ATM %i.", loc);
	return 1;
}

CMD:createvendor(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new Float:x, Float:y, Float:z, Float:a;
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not authorized to use this command.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createvendor [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: The vendor will be created at the coordinates you are standing on.");
		return 1;
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_VENDORS; i ++)
	{
		if(!VenInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vendors VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateVen", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "VENDORS slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}
CMD:removevendor(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new loc;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not authorized to use this command.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removevendor [vendorid] (/nearest)");
	}
	if(!(0 <= loc < MAX_VENDORS) || !VenInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid VENDORS or Static.");
	}
    DestroyDynamic3DTextLabel(VenInfo[loc][aText]);
    DestroyDynamicObject(VenInfo[loc][aObject]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vendors WHERE id = %i", VenInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	VenInfo[loc][aExists] = false;
	VenInfo[loc][aID] = 0;

	SCMf(playerid, COLOR_WHITE, "** You have removed VENDORS %i.", loc);
	return 1;
}
CMD:createmdc(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new Float:x, Float:y, Float:z, Float:a;
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not authorized to use this command.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createmdc [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: The mdc will be created at the coordinates you are standing on.");
		return 1;
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_MDC; i ++)
	{
		if(!MdcInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO mdc VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateMdc", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Mdc slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}
CMD:removemdc(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new loc;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not authorized to use this command.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removemdc [mdcid] (/nearest)");
	}
	if(!(0 <= loc < MAX_MDC) || !MdcInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid Mdc or Static.");
	}
    DestroyDynamic3DTextLabel(MdcInfo[loc][aText]);
    DestroyDynamicObject(MdcInfo[loc][aObject]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM mdc WHERE id = %i", MdcInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	MdcInfo[loc][aExists] = false;
	MdcInfo[loc][aID] = 0;

	SCMf(playerid, COLOR_WHITE, "** You have removed Mdc %i.", loc);
	return 1;
}
CMD:createbar(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new Float:x, Float:y, Float:z, Float:a;
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not authorized to use this command.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createbar [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: The bar will be created at the coordinates you are standing on.");
		return 1;
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_BAR; i ++)
	{
		if(!BarInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO bars VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateBar", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Bars slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}
CMD:removebar(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new loc;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not authorized to use this command.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removebar [barid] (/nearest)");
	}
	if(!(0 <= loc < MAX_BAR) || !BarInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid BARS or Static.");
	}
    DestroyDynamic3DTextLabel(BarInfo[loc][aText]);
    DestroyDynamicObject(BarInfo[loc][aObject]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM bars WHERE id = %i", BarInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	BarInfo[loc][aExists] = false;
	BarInfo[loc][aID] = 0;

	SCMf(playerid, COLOR_WHITE, "** You have removed BAR %i.", loc);
	return 1;
}
CMD:createsurgery(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new Float:x, Float:y, Float:z, Float:a;
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not authorized to use this command.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createsurgery [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: The surgery room will be created at the coordinates you are standing on.");
		return 1;
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_SURGERY; i ++)
	{
		if(!SurInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO surgery VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateSur", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Surgery slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}
CMD:removesurgery(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new loc;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not authorized to use this command.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removesurgery [surgery] (/nearest)");
	}
	if(!(0 <= loc < MAX_SURGERY) || !SurInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid Surgery Room or Static.");
	}
    DestroyDynamic3DTextLabel(SurInfo[loc][aText]);
    DestroyDynamicObject(SurInfo[loc][aObject]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM surgery WHERE id = %i", SurInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	SurInfo[loc][aExists] = false;
	SurInfo[loc][aID] = 0;

	SCMf(playerid, COLOR_WHITE, "** You have removed Surgery Room %i.", loc);
	return 1;
}
CMD:createpg(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new Float:x, Float:y, Float:z, Float:a;
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not authorized to use this command.");
	}
    if(sscanf(params, "s[32]", "confirm"))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /createpg [confirm]");
		SendClientMessage(playerid, COLOR_WHITE, "** NOTE: The public garage will be created at the coordinates you are standing on.");
		return 1;
	}
    GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
    for(new i = 0; i < MAX_PGARAGE; i ++)
	{
		if(!PGInfo[i][aExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO publicgarage VALUES(null, '%f', '%f', '%f', '%f')", x, y, z, a);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreatePG", "iiffff", playerid, i, x, y, z, a);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Public Garage slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:removepveh(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

    if(pData[playerid][pAdmin] < 3)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removepveh [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, interior FROM vehicles WHERE ownerid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListVehiclesForRemoval", "ii", playerid, targetid);
	return 1;
}

CMD:removepg(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new loc;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not authorized to use this command.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removepg [pgid] (/nearest)");
	}
	if(!(0 <= loc < MAX_PGARAGE) || !PGInfo[loc][aExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid Public Garage or Static.");
	}
    DestroyDynamic3DTextLabel(PGInfo[loc][aText]);
    DestroyDynamicObject(PGInfo[loc][aObject]);
    DestroyDynamicMapIcon(PGInfo[loc][aMapIcon]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM publicgarage WHERE id = %i", PGInfo[loc][aID]);
	mysql_tquery(connectionID, queryBuffer);
	PGInfo[loc][aExists] = false;
	PGInfo[loc][aID] = 0;

	SCMf(playerid, COLOR_WHITE, "** You have removed public garage %i.", loc);
	return 1;
}
CMD:hotwire(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid = GetPlayerVehicleID(playerid), Float:health;

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be driving a vehicle to use this command.");
	}
	if(pData[playerid][pToolkit] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must have a toolkit to use this command.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine which can be turned on.");
	}
	if(vehicleFuel[vehicleid] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no fuel left in this vehicle.");
	}

	if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
	    if(pData[playerid][pEngine])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are already attempting to hotwire this vehicle.");
		}
	    GetVehicleHealth(vehicleid, health);

	    pData[playerid][pEngine] = 1;
		SetTimerEx("SetVehicleEngineHotwire", 5010, 0, "dd",  vehicleid, playerid);
  		SCM(playerid,COLOR_WHITE,"You are currently hotwiring this vehicle.");
  		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s starts hotwiring the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
		return SCM(playerid, COLOR_SYNTAX, "This vehicle's engine is already on.");
	}

	return 1;
}

CMD:engine(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER || pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_TEAL, "Error:"WHITE" You must be driving a vehicle to use this command.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_TEAL, "Error:"WHITE" This vehicle has no engine which can be turned on.");
	}
	if(vehicleFuel[vehicleid] <= 0)
	{
	    return SCM(playerid, COLOR_TEAL, "Error:"WHITE" There is no fuel left in this vehicle.");
	}
	if(VehicleInfo[vehicleid][vFactionType] != FACTION_NONE && GetFactionType(playerid) != VehicleInfo[vehicleid][vFactionType])
 	{
 		return SCM(playerid, COLOR_TEAL, "Error:"WHITE" This vehicle doesn't belong to your faction, therefore you can't turn its engine on.");
	}
 	if(VehicleInfo[vehicleid][vGang] >= 1 && pData[playerid][pGang] != VehicleInfo[vehicleid][vGang])
 	{
 		return SCM(playerid, COLOR_TEAL, "Error:"WHITE" This vehicle doesn't belong to your gang, therefore you can't turn its engine on.");
 	}
 	if(VehicleInfo[vehicleid][vOwnerID] > 0 && !IsVehicleOwner(playerid, vehicleid) && pData[playerid][pVehicleKeys] != vehicleid)
	{
 		return SCM(playerid, COLOR_TEAL, "Error:"WHITE" You do not have keys to this vehicle, therefore you can't turn on its engine.");
	}
	if(!GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
	    if(pData[playerid][pEngine]) return 1; // anti spam
	    pData[playerid][pEngine] = 1;

		SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
  		SCM(playerid, COLOR_TEAL, "You have "WHITE"started"TEAL" the engine!");
	}
	else
	{
	    SetVehicleParams(vehicleid, VEHICLE_ENGINE, false);
	    SCM(playerid, COLOR_TEAL, "You have "WHITE"stopped"TEAL" the engine!");

	    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s turns off the engine of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

CMD:flash(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid,panels,doors,lights,tires;
	vehicleid = GetPlayerVehicleID(playerid);

	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
		return SCM(playerid, COLOR_WHITE, "You are not the driver.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
		SCM(playerid, COLOR_WHITE, "You are not in a vehicle!");
        return 1;
	}
	if(!Flasher[vehicleid])
	{
		GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
		SetVehicleParams(vehicleid, VEHICLE_LIGHTS, true);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns on the emergency lights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		Flasher[vehicleid] = 1;
	}
	else
	{
		GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
		UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
		Flasher[vehicleid] = 0;
		SetVehicleParams(vehicleid, VEHICLE_LIGHTS, false);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off the emergency lights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

CMD:seatbelt(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(IsPlayerInAnyVehicle(playerid) == 0)
	{
        SCM(playerid, COLOR_WHITE, "You are not in a vehicle!");
        return 1;
    }
    if(IsPlayerInAnyVehicle(playerid) == 1 && ExBJck[playerid] == 0)
	{
        ExBJck[playerid] = 1;
        if(IsAMotorBike(GetPlayerVehicleID(playerid)))
		{
		    SetPlayerAttachedObject(playerid, 9, 18645, 2, 0.1, 0.02, 0.0, 0.0, 90.0, 90.0, 1.0, 1.0, 1.0);
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s reaches for their helmet, and puts it on.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "You have put on your helmet.");
        }
        else
		{
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s reaches for their seatbelt, and buckles it up.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "You have put on your seatbelt.");
        }

    }
    else if(IsPlayerInAnyVehicle(playerid) == 1 && ExBJck[playerid] == 1)
	{
        ExBJck[playerid] = 0;
		if(IsAMotorBike(GetPlayerVehicleID(playerid)))
		{
		    RemovePlayerAttachedObject(playerid, 9);
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s reaches for their helmet, and takes it off.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "You have taken off your helmet.");
        }
        else
		{
            SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s reaches for their seatbelt, and unbuckles it.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "You have taken off your seatbelt.");
        }
    }
    return 1;
}

CMD:checkbelt(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new giveplayerid;
	if(sscanf(params, "i", giveplayerid)) return SM(playerid, COLOR_SYNTAX, "Usage: /checkbelt [playerid]");

    if(GetPlayerState(giveplayerid) == PLAYER_STATE_ONFOOT)
	{
        SM(playerid,COLOR_GREY,"That player is not in any vehicle!");
        return 1;
    }
    if(!IsPlayerConnected(giveplayerid) || !IsPlayerInRangeOfPlayer(playerid, giveplayerid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

    new stext[4];
    if(ExBJck[giveplayerid] == 0)
	{
		stext = "off";
	}
    else
	{
		stext = "on";
	}
    if(IsAMotorBike(GetPlayerVehicleID(playerid)))
	{
        SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s looks at %s, checking to see if they are wearing a helmet.", GetRPName(playerid),GetRPName(giveplayerid));
        SM(playerid,COLOR_WHITE, "%s's helmet is currently %s.", GetRPName(giveplayerid) , stext);
	}
	else
	{
    	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s peers through the window at %s, checking to see if they are wearing a seatbelt.", GetRPName(playerid),GetRPName(giveplayerid));
    	SM(playerid,COLOR_WHITE, "%s's seat belt is currently %s.", GetRPName(giveplayerid) , stext);
    }
    return 1;
}

CMD:checkmybelt(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(ExBJck[playerid] == 1)
	{
		SCM(playerid, COLOR_WHITE, "You have your seatbelt on.");
	}
	else
	{
	    SCM(playerid, COLOR_WHITE, "Your seatbelt is off.");
	}
	return 1;
}

CMD:myupgrades(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SM(playerid, SERVER_COLOR, "Shealth: %.0f/100{C8C8C8} You spawn with %.1f health at the hospital after death.", pData[playerid][pSpawnHealth], pData[playerid][pSpawnHealth]);
	SM(playerid, COLOR_YELLOW, "Sarmor: %.0f/100{C8C8C8} You spawn with %.1f armor at the hospital after death.", pData[playerid][pSpawnArmor], pData[playerid][pSpawnArmor]);
	SM(playerid, SERVER_COLOR, "Addict: %i/3{C8C8C8} You gain an extra %.1f health and armor when using drugs.", pData[playerid][pAddictUpgrade], pData[playerid][pAddictUpgrade] * 5.0);
	SM(playerid, COLOR_YELLOW, "Asset: %i/4{C8C8C8} You can own %i houses, %i businesses, %i garages & %i vehicles.", pData[playerid][pAssetUpgrade], GetPlayerAssetLimit(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
	return 1;
}

CMD:upgrade(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new cost = 50000;
	if(!IsPlayerInRangeOfPoint(playerid, 3.0,222.2921,2353.8506,1017.1298) && !IsPlayerInRangeOfPoint(playerid, 3.0, 222.2921,2353.8506,1017.1298))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the desk at city hall.");
	}
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /upgrade [option]");
	    SCM(playerid, COLOR_WHITE, "List of options: Addict, Asset, SpawnHealth, SpawnArmor");
	}
 	else if(!strcmp(params, "addict", true))
	{
	    if(pData[playerid][pAddictUpgrade] >= 3)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your addict skill is already upgraded to its maximum level of 3.");
		}

  		if(pData[playerid][pCash] < cost)
		{
	    	return SM(playerid, COLOR_SYNTAX, "You need to have at least $%i on hand to buy this upgrade.", cost);
		}

		pData[playerid][pCash] -= cost;

		pData[playerid][pAddictUpgrade]++;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET addictupgrade = %i,cash = cash - %i WHERE uid = %i", pData[playerid][pAddictUpgrade],cost ,pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_YELLOW, "You upgraded your addict skill to level %i/3. You now gain %.1f more health & armor when using drugs.", pData[playerid][pAddictUpgrade], pData[playerid][pAddictUpgrade] * 5.0);
 	}
 	else if(!strcmp(params, "asset", true))
	{
	    if(pData[playerid][pAssetUpgrade] >= 4)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your asset skill is already upgraded to its maximum level of 4.");
		}
  		if(pData[playerid][pCash] < cost)
		{
	    	return SM(playerid, COLOR_SYNTAX, "You need to have at least $%i on hand to buy this upgrade.", cost);
		}

		pData[playerid][pCash] -= cost;

		pData[playerid][pAssetUpgrade]++;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET assetupgrade = %i,cash = cash - %i WHERE uid = %i", pData[playerid][pAssetUpgrade],cost , pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_YELLOW, "You upgraded your asset skill to level %i/4. You can now own %i/%i houses and garages and %i/%i businesses and vehicles.", pData[playerid][pAssetUpgrade], GetPlayerAssetLimit(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_VEHICLES));
 	}
	else if(!strcmp(params, "spawnhealth", true))
	{
	    if(pData[playerid][pSpawnHealth] >= 100)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your spawn health is at maximum (100).");
	    }
  		if(pData[playerid][pCash] < cost)
		{
	    	return SM(playerid, COLOR_SYNTAX, "You need to have at least $%i on hand to buy this upgrade.", cost);
		}

		pData[playerid][pCash] -= cost;

	    pData[playerid][pSpawnHealth] += 0.5;

	    SM(playerid, COLOR_YELLOW, "You have upgraded your spawn health. You will now spawn with %.1f health after death.", pData[playerid][pSpawnHealth]);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = cash - %i WHERE uid = %i",cost , pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(params, "spawnarmor", true))
	{
	    if(pData[playerid][pSpawnArmor] > 25)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your spawn armor is at maximum (25).");
	    }
  		if(pData[playerid][pCash] < cost)
		{
	    	return SM(playerid, COLOR_SYNTAX, "You need to have at least $%i on hand to buy this upgrade.", cost);
		}

		pData[playerid][pCash] -= cost;

	    pData[playerid][pSpawnArmor] += 0.5;

	    SM(playerid, COLOR_YELLOW, "You have upgraded your spawn armor. You will now spawn with %.1f armor after death.", pData[playerid][pSpawnArmor]);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = cash - %i WHERE uid = %i",cost , pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}

CMD:buylevel(playerid, params[]) return callcmd::levelup(playerid, params);
CMD:levelup(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new
		exp = (pData[playerid][pLevel] * 6),
		cost = (pData[playerid][pLevel]) * 10000,
		string[64];

	if(pData[playerid][pEXP] < exp)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need %i more respect points in order to level up.", exp - pData[playerid][pEXP]);
	}
	if(pData[playerid][pCash] < cost)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to have at least %s on hand to buy your next level.", FormatNumber(cost));
	}
	if(pData[playerid][pPassport])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have an active passport. You can't level up at the moment.");
	}
	pData[playerid][pEXP] -= exp;
	pData[playerid][pCash] -= cost;
	pData[playerid][pLevel]++;
	if(pData[playerid][pLevel] == 2)
	{
		if(pData[playerid][pGender] == 1)
	    { 
			pData[playerid][pSkin] = 2;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", 2, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			SetPlayerSkin(playerid, 2);
		}
		else if(pData[playerid][pGender] == 2)
		{ 
			
	   		pData[playerid][pSkin] = 12;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", 12, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);

			SetPlayerSkin(playerid, 12);
		}
		
	}

	if(pData[playerid][pLevel] == 3 && pData[playerid][pReferralUID] > 0)
	{
	    ReferralCheck(playerid);
	}

	format(string, sizeof(string), "~g~Level Up~n~~w~You are now level %i", pData[playerid][pLevel]);
	GameTextForPlayer(playerid, string, 5000, 1);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET exp = exp - %i, cash = cash - %i, level = level + 1 WHERE uid = %i", exp, cost, pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_YELLOW, "You have moved up to level %i.", pData[playerid][pLevel]);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	return 1;
}

CMD:dollarrims(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(IsPlayerConnected(playerid)) {
        if(pData[playerid][pAdmin] < 1) {
            SM(playerid, COLOR_SYNTAX, "You are not authorized to use that command!");
            return 1;
        }
        if(IsPlayerInAnyVehicle(playerid)) {
            AddVehicleComponent(GetPlayerVehicleID(playerid), 1083);
            SM(playerid, COLOR_SYNTAX, "   Dollar Rims Added to Vehicle!");
        }
    }
    return 1;
}

CMD:sr(playerid, params[]) {
	return callcmd::shadowrims(playerid, params);
}

CMD:shadowrims(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 1)
 	{
		return SM(playerid, COLOR_LIGHTRED, " You are not authorized to use that command.");
	}
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, 0xFFFFFFFF, "You are not driving a vehicle.");
	AddVehicleComponent(GetPlayerVehicleID(playerid),1073);
    SCM(playerid, 0xFFFFFFFF, "You have added shadow rims to your vehicle.");
    return 1;
}

CMD:ctr(playerid, params[]) {
	return callcmd::cutterrims(playerid, params);
}

CMD:cutterrims(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 1)
 	{
		return SM(playerid, COLOR_LIGHTRED, " You are not authorized to use that command.");
	}
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, 0xFFFFFFFF, "You are not driving a vehicle.");
	AddVehicleComponent(GetPlayerVehicleID(playerid),1079);
    SCM(playerid, 0xFFFFFFFF, "You have added cutter rims to your vehicle.");
    return 1;
}


CMD:goldrims(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(IsPlayerConnected(playerid)) {
        if(pData[playerid][pAdmin] < 10) {
            SM(playerid, COLOR_SYNTAX, "You are not authorized to use that command!");
            return 1;
        }
        if(IsPlayerInAnyVehicle(playerid)) {
            AddVehicleComponent(GetPlayerVehicleID(playerid), 1080);
            SM(playerid, COLOR_SYNTAX, "Gold Rims Added to Vehicle!");
        }
    }
    return 1;
}

CMD:answer(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new param[32];
	if(sscanf(params, "S()[32]", param))
	{
		SCM(playerid, COLOR_SYNTAX, "Usage: /answer [text]");
		return 1;
	}
	if(isnull(quizAnswer))
	{
		return SCM(playerid, COLOR_SYNTAX, "There is no active quiz!");
	}
	if(!isnull(param))
	{
		if(!strcmp(quizAnswer, param, true))
		{
			SMA(COLOR_LIGHTRED, "%s has answered the quiz correctly. answer: "SVRCLR"%s", GetRPName(playerid), quizAnswer);
			quizQuestion[0] = EOS;
			quizAnswer[0] = EOS;
		}
		else
		{
			SCM(playerid, COLOR_SYNTAX, "Sorry bud, that ain't the right answer.");
		}
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "Usage: /answer [text]");
	}
	return 1;
}
CMD:quiz(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new option[10], param[32];
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    if(pData[playerid][pAdmin] >= 2)
	    {
			SCM(playerid, COLOR_SYNTAX, "Usage: /quiz [option]");
			SCM(playerid, COLOR_WHITE, "Available options: create, end, edit");
		}
		else
		{
		    SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
		}
		return 1;
	}
 	if(!strcmp(option, "create", true))
	{
	    if(pData[playerid][pAdmin] < 2) return 1;
		if(isnull(quizQuestion))
	    {
			if(CreateQuiz == -1)
			{
	        	ShowDialogToPlayer(playerid, DIALOG_CREATEQUIZ);
			}
		}
		else
		{
		    SCM(playerid, COLOR_SYNTAX, "There is already an on-going quiz!");
		}
		return 1;
	}
	else if(!strcmp(option, "end", true))
	{
	    if(pData[playerid][pAdmin] < 2) return 1;
	    if(!isnull(quizQuestion))
	    {
	        quizQuestion[0] = EOS;
            SMA(COLOR_LIGHTRED, "The quiz was ended by %s, answer: %s", GetRPName(playerid), quizAnswer);
			quizAnswer[0] = EOS;
	    }
	    return 1;
	}
	else if(!strcmp(option, "edit", true))
	{
	    if(pData[playerid][pAdmin] < 2) return 1;
		if(strlen(param) > 0)
		{
		    strcpy(quizAnswer, param);
			SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s changed the quiz answer to %s.", GetRPName(playerid), quizAnswer);
		}
		else
		{
		    SCM(playerid, COLOR_SYNTAX, "Usage: /quiz edit [answer]");
		}
	}
	return 1;
}

CMD:jobhelp(playerid)
{
	if(pData[playerid][pJob] == JOB_NONE && pData[playerid][pSecondJob] == JOB_NONE)
	{
		return SCM(playerid, COLOR_SYNTAX, "You have no job and therefore no job commands to view.");
	}

	switch(pData[playerid][pJob])
	{
		case JOB_FOODPANDA: SCM(playerid, COLOR_WHITE, "** [Job Commands]: /getorder, /putmeal, /graborder, /cancelcp.");
		case JOB_COURIER: SCM(playerid, COLOR_WHITE, "** [Job Commands]: /loadtruck, /deliver, /loadcargo, /cancelcp.");
		case JOB_FISHERMAN: SCM(playerid, COLOR_WHITE, "** [Job Commands]: /fish, /myfish, /sellfish.");
		case JOB_BODYGUARD: SCM(playerid, COLOR_WHITE, "** [Job Commands]: /sellvest, /frisk.");
		case JOB_ARMSDEALER: SCM(playerid, COLOR_WHITE, "** [Job Commands]: /getmats, /sellgun.");
		case JOB_MINER: SCM(playerid, COLOR_WHITE, "** [Job Commands]: /cancelcp.");
		case JOB_TAXIDRIVER: SCM(playerid, COLOR_WHITE, "** [Job Commands]: /setfare, /takecall.");
        case JOB_DRUGDEALER: SCM(playerid, COLOR_WHITE, "** [Job Commands]: /planthelp, /getcrate.");
        case JOB_LAWYER: SCM(playerid, COLOR_WHITE, "** [Job Commands]: /defend, /free, /wanted.");
        case JOB_DETECTIVE: SCM(playerid, COLOR_WHITE, "** [Job Commands]: /find.");
        case JOB_GARBAGEMAN: SCM(playerid, COLOR_GREY, "*** [Job Commands]: *** /garbage, /collectbags");
        case JOB_FORKLIFTER: SCM(playerid, COLOR_GREY, "*** [Job Commands]: *** Hop in to forklift to begin");
        case JOB_LUMBERJACK: SCM(playerid, COLOR_GREY, "*** [Job Commands]: *** /chop , /load");
        case JOB_Demolition: SCM(playerid, COLOR_WHITE, "** [Job Commands]: *** /cancelcp.");
		case JOB_SWEEPER: SendClientMessage(playerid, COLOR_WHITE, "** [Job Commands]: ***{FFFFFF} /startsweeping, /stopsweeping.");
	}

 	if(pData[playerid][pSecondJob] != JOB_NONE)
 	{
 	    switch(pData[playerid][pSecondJob])
		{
			case JOB_FOODPANDA: SCM(playerid, COLOR_WHITE, "** Secondary  Job: *** /getorder, /putorder, /grabmeal, /cancelcp.");
			case JOB_COURIER: SCM(playerid, COLOR_WHITE, "** Secondary Job: *** /load, /deliver, /loadcargo");
			case JOB_FISHERMAN: SCM(playerid, COLOR_WHITE, "** Secondary Job: *** /fish, /myfish, /sellfish.");
			case JOB_BODYGUARD: SCM(playerid, COLOR_WHITE, "** Secondary Job: *** /sellvest, /frisk.");
			case JOB_ARMSDEALER: SCM(playerid, COLOR_WHITE, "** Secondary Job: *** /getmats, /sellgun.");
			case JOB_MINER: SCM(playerid, COLOR_WHITE, "** Secondary Job: *** /mine.");
			case JOB_TAXIDRIVER: SCM(playerid, COLOR_WHITE, "** Secondary Job:***  /setfare.");
	        case JOB_DRUGDEALER: SCM(playerid, COLOR_WHITE, "** Secondary Job: *** /getdrug, /planthelp, /getcrate.");
	        case JOB_LAWYER: SCM(playerid, COLOR_WHITE, "** Secondary Job: *** /defend, /free, /wanted.");
	        case JOB_DETECTIVE: SCM(playerid, COLOR_WHITE, "** Secondary Job: *** /find.");
	        case JOB_GARBAGEMAN: SCM(playerid, COLOR_GREY, "*** Secondary Job	 *** /garbage");
			case JOB_FORKLIFTER: SCM(playerid, COLOR_GREY, "*** Secondary Job *** Hop in to forklift to begin");
			case JOB_LUMBERJACK: SCM(playerid, COLOR_GREY, "*** Secondary Job *** /chop  /load");
			case JOB_Demolition: SCM(playerid, COLOR_WHITE, "** Secondary Job: *** /cancelcp.");
		case JOB_SWEEPER: SendClientMessage(playerid, COLOR_WHITE, "** Secondary Job: ***{FFFFFF} /startsweeping, /stopsweeping.");
		}
	}

	return 1;
}

CMD:hghelp(playerid)
{
    SCM(playerid, SERVER_COLOR, "The Hunger Games Minigame:");
    SCM(playerid, COLOR_WHITE, "Players are taken to a vast island, where they must fight for survival,");
	SCM(playerid, COLOR_WHITE, "obtain better weapons (hidden in various parts of the arena) and eliminate opponents.");
    SCM(playerid, COLOR_WHITE, "The last man standing is the winner.");
    SCM(playerid, COLOR_YELLOW, "** HG: /joingame, /exitgame, /survivors, /hgwaiting");
    return 1;
}

CMD:vehiclehelp(playerid)
{
    SCM(playerid, COLOR_WHITE, "** Vehicle: /engine, /v lights, /v hood, /v trunk, /buyvehicle, /lock.");
    SCM(playerid, COLOR_WHITE, "** Vehicle: /vstash, /v neon, /unmod, /colorcar, /paintcar, /upgradevehicle, /sellcar, /sellmycar.");
    SCM(playerid, COLOR_WHITE, "** Vehicle: /findcar, /givekeys, /takekeys, /setradio, /paytickets, /v info, /gascan.");
    SCM(playerid, COLOR_WHITE, "** Vehicle: /seatbelt, /checkmybelt, /checkbelt, /v windows.");
    return 1;
}

CMD:bankhelp(playerid)
{
	SCM(playerid, COLOR_WHITE, "** Bank: /bank /robbank, /invite, /sabotagecomms, /setupvault ");
	return 1;
}

CMD:donatorhelp(playerid) return callcmd::viphelp(playerid);
CMD:viphelp(playerid)
{
	if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a donator subscription.");
	}
	SCM(playerid, COLOR_VIP, "** Donator: /(dc)hat, /vipinfo, /vipinvite, /vipnumber");
	SCM(playerid, COLOR_VIP, "** Donator: /sellgun, /vcode, /viplocker");
	return 1;
}

CMD:fwsall(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(pData[playerid][pAdmin] >= 4)
	{
		if(sscanf(params, "s", "confirm"))
		{
			SM(playerid, COLOR_SYNTAX, "Usage: /fwsall [confirm]");
			return 1;
		}
		foreach(new i : Player)
		{
		    if(!pData[i][pLogged])
		        continue;

			GiveWeapon(i, 23);
			GiveWeapon(i, 25);
			//GiveWeapon(targetid, 34);
			SM(i, COLOR_AQUA, "You have received a full weapon set from %s.", GetRPName(playerid));
		}
		SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" has given a full weapon set to everyone.", GetRPName(playerid));
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:fws(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(pData[playerid][pAdmin] >= 8)
	{
		new targetid;
		if(sscanf(params, "ud", targetid))
		{
			SM(playerid, COLOR_SYNTAX, "Usage: /fws [playerid]");
			return 1;
		}

		GiveWeapon(targetid, 23);
		GiveWeapon(targetid, 25);
		//GiveWeapon(targetid, 34);
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has given a full weapon set to %s.", GetRPName(playerid), GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "You have received a full weapon set from %s.", GetRPName(playerid));
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:fws11(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(pData[playerid][pAdmin] >= 8)
	{
		new targetid;
		if(sscanf(params, "ud", targetid))
		{
			SM(playerid, COLOR_SYNTAX, "Usage: /fws [playerid]");
			return 1;
		}

		GiveWeapon(targetid, 23);

	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	return 1;
}

forward Slide(playerid);
public Slide(playerid)
{
    if(Sliding[playerid] == 1)
    {
		new Float:X;
		new Float:Y;
		new Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		SetPlayerPos(playerid, X, Y, Z - 5.00);
		SetTimerEx("Slide", 1000, 0, "i", playerid);
    }
	return 1;
}

forward IsAChopper(vehicleid);
public IsAChopper(vehicleid)
{
	if(vehicleid >= 0 && vehicleid <= 1) // < Define your Chopper ID's Here
	{
		return 1;
	}
	return 0;
}

//temoporary
CMD:slide(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid;
	if(IsPlayerInAnyVehicle(playerid) && IsAChopper(vehicleid) && Sliding[playerid] == 0)
	{
		Sliding[playerid] = 1;
		RemovePlayerFromVehicle(playerid);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("Slide", 1000, 0, "i", playerid);
		SendClientMessage(playerid, COLOR_WHITE, "You are sliding down the rope.");
	}
	return 1;
}

CMD:stopp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(Sliding[playerid] == 1)
	{
		Sliding[playerid] = 0;
		TogglePlayerControllable(playerid, 1);
		SendClientMessage(playerid, COLOR_WHITE, "You have stopped sliding.");
	}
	return 1;
}

CMD:factionhelp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new string[2048];
	if(pData[playerid][pFaction] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not apart of any faction.");
	}

	strcat(string, "** Radio: /fc, /(r)adio, /div, /faction, /division, /locker, /showbadge, /(m)egaphone.\n");

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE:
	    {
	        strcat(string, "** Police: /open, /addjailtime, /revokeweaponlicense, /revokecarlicense, /tazer, /cuff, /uncuff, /drag, /detain, /charge, /arrest.\n");
	        strcat(string, "** Police: /frisk, /take, /ticket, /gov, /ram, /deploy, /undeploy, /undeployall.\n");
	        strcat(string, "** Police: /mdc, /siren, /badge, /vticket, /vfrisk, /vtake, /seizeplant.\n");
	        strcat(string, "** Police: /showtlaws, /showslaws, /giveweaponlic, /impound");
         	strcat(string, "** Auto: /po, /sto, /mir, /greet.\n");

			if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_FEDERAL)
				SCM(playerid, COLOR_LIGHTORANGE, "** Federal: /cctv, /listcallers, /trackcall, /passport, /checkcargo, /d, /callsign");
			else
			    strcat(string, "** Federal: /cctv, /listcallers, /trackcall, /checkcargo, /d, /callsign");
		}
	    case FACTION_FEDERAL:
	    {
	        strcat(string, "** Federal: /open, /addjailtime, /revokeweaponlicense, /revokecarlicense,/tazer, /cuff, /uncuff, /drag, /detain, /charge, /arrest.\n");
	        strcat(string, "** Federal: /frisk, /take, /ticket, /gov, /ram, /deploy, /undeploy, /undeployall.\n");
	        strcat(string, "** Federal: /mdc, /siren, /badge, /vticket, /vfrisk, /vtake, /seizeplant.\n");
	        strcat(string, "** Federal: /showtlaws, /showslaws, /giveweaponlic, /impound");
         	strcat(string, "** Auto: /po, /sto, /mir, /greet.\n");

			if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_FEDERAL)
				SCM(playerid, COLOR_LIGHTORANGE, "** Federal: /cctv, /listcallers, /trackcall, /passport, /checkcargo, /d, /callsign");
			else
			    strcat(string, "** Federal: /cctv, /listcallers, /trackcall, /checkcargo, /d, /callsign");
		}
	    case FACTION_SHERIFF:
	    {
	        strcat(string, "** Sheriff: /open, /addjailtime, /revokeweaponlicense, /revokecarlicense, /tazer, /cuff, /uncuff, /drag, /detain, /charge, /arrest.\n");
	        strcat(string, "** Sheriff: /frisk, /take, /ticket, /gov, /ram, /deploy, /undeploy, /undeployall.\n");
	        strcat(string, "** Sheriff: /mdc, /siren, /badge, /vticket, /vfrisk, /vtake, /seizeplant.\n");
	        strcat(string, "** Sheriff: /showtlaws, /showslaws, /giveweaponlic, /impound");
         	strcat(string, "** Auto: /po, /sto, /mir, /greet.\n");

			if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_FEDERAL)
				SCM(playerid, COLOR_LIGHTORANGE, "** Federal: /cctv, /listcallers, /trackcall, /passport, /checkcargo, /d, /callsign");
			else
			    strcat(string, "** Federal: /cctv, /listcallers, /trackcall, /checkcargo, /d, /callsign");
		}
		case FACTION_MEDIC:
		{
		    strcat(string, "** Medic: /bed, /firstaid, /stretcher(/loadpt), /surgery, /getpt, /injuries, /deploy, /undeploy.\n");
		    strcat(string, "** Medic: /movept, /badge, /gov, /listcallers, /trackcall, /d, /callsign, /undeployall, /heal.\n");
  			strcat(string, "** Auto: /po, /medic.\n");
		}
		case FACTION_NEWS:
		{
		    strcat(string, "** News: /news, /live, /endlive, /liveban, /phonebook");
		}
		case FACTION_MECHANIC:
		{
		    strcat(string, "** Mech: /tune, /repair, /tow, /untow, /refill, /nos, /hyd, /takecall");
			strcat(string, "** Mech: /upgradevehicle, /v neon, /paintcar, /colorcar, /unmod, /impound");
		}
		case FACTION_GOVERNMENT:
		{
		    strcat(string, "** Goverment: /gov, /settax, /factionpay, /tazer, /cuff, /uncuff, /detain, /taxdeposit, /taxwithdraw.\n");
		    strcat(string, "** Goverment: /badge, /d, /flash");
		}
 	    case FACTION_DOC:
	    {
	        strcat(string, "** DOC: /listjailtime, /open, /addjailtime, /release, /cell, /cells, /tazer, /rubberbullets, /cuff, /uncuff, /drag, /detain, /charge, /arrest.\n");
	        strcat(string, "** DOC: /confiscate, /gov, /deploy, /undeploy, /undeployall.\n");
	        strcat(string, "** DOC: /mdc, /siren, /badge, /placeradar.\n");
			strcat(string, "** DOC: /cctv, /d, /callsign, /surgery, /medic\n");
		}
		case FACTION_TACO:
		{
			SCM(playerid, COLOR_WHITE, "** Taco: /cook, /selltaco, /sellburrito **");
		}
		case FACTION_HITMAN:
		{
		    strcat(string, "** Hitman: /contracts, /takehit, /profile, /passport, /plantbomb, /pickupbomb, /detonate, /hmole, /hfind");
		}
	}
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Current commands on "SVRCLR"Manila Reality Roleplay-", string, "Close","");
	return 1;
}
CMD:gangs1(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new gangid;

	if(sscanf(params, "i", gangid))
	{
	    SCM(playerid, SERVER_COLOR, "Gangs:");

		for(new i = 0; i < MAX_GANGS; i ++)
		{
		    if(GangInfo[i][gSetup])
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", i);
		        mysql_tquery(connectionID, queryBuffer, "OnPlayerListGangs", "ii", playerid, i);
		    }
		}
		return 1;
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}
	if(GangInfo[gangid][gAlliance] != -1)
	{
	    SM(playerid, COLOR_GREY, "Name: %s - Leader: %s - Strikes: %i/3 - Alliance: %s", GangInfo[gangid][gName], GangInfo[gangid][gLeader], GangInfo[gangid][gStrikes], GangInfo[GangInfo[gangid][gAlliance]][gName]);
	}

	SCM(playerid, SERVER_COLOR, "Members Online:");

	foreach(new i : Player)
	{
	    if(pData[i][pLogged] && pData[i][pGang] == gangid)
	    {
	        SM(playerid, COLOR_GREY2, "(%i) %s %s", pData[i][pGangRank], GangRanks[gangid][pData[i][pGangRank]], GetRPName(i));
		}
	}

	return 1;
}
CMD:ganghelp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new string[2048];
	if(pData[playerid][pGang] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a gang member.");
	}

	strcat(string, "** Gang:  /gang, /gstash, /bandana, /clothes, /capture, /claim, /reclaim, /turfinfo, /points..\n");
    strcat(string, "** Gang: /endalliance..\n");
	strcat(string, "** Gang: /getmats, /sellgun, /getdrug, /planthelp, /getcrate.\n");
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Current commands on "SVRCLR"Manila Reality Roleplay-", string, "Close","");
	return 1;
}

CMD:planthelp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}

    SCM(playerid, COLOR_WHITE, "** Plant: /plantpot, /plantinfo, /pickplant.");
    return 1;
}

CMD:o(playerid, params[]) return callcmd::ooc(playerid, params);
CMD:ooc(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new string[64];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(o)oc [global OOC]");
	}
	if(!enabledOOC && pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The global OOC channel is disabled at the moment.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(pData[playerid][pToggleOOC])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the OOC chat as you have it toggled.");
	}

	if((!isnull(pData[playerid][pCustomTitle]) && strcmp(pData[playerid][pCustomTitle], "None", true) != 0 && strcmp(pData[playerid][pCustomTitle], "0", true) != 0) && strcmp(pData[playerid][pCustomTitle], "NULL", true) != 0) {
	    new color;
		if(pData[playerid][pCustomTColor] == -1 || pData[playerid][pCustomTColor] == -256)
		{
	    	color = 0xC8C8C8FF;
		}
		else
		{
		    color = pData[playerid][pCustomTColor];
		}
	    format(string, sizeof(string), "{%06x}%s"WHITE" %s", color >>> 8, pData[playerid][pCustomTitle], GetRPName(playerid));

	} else if(pData[playerid][pAdmin] > 1) {
		format(string, sizeof(string), ""SVRCLR"%s"WHITE" %s", GetAdminRank(playerid), GetRPName(playerid));
	} else if(pData[playerid][pHelper] > 0) {
	    format(string, sizeof(string), "%s %s", GetHelperRank(playerid), GetRPName(playerid));
    } else if(pData[playerid][pFormerAdmin]) {
	    format(string, sizeof(string), ""SVRCLR"Former Admin"WHITE" %s", GetRPName(playerid));
	} else if(pData[playerid][pDonator] > 0) {
	    format(string, sizeof(string), "{C2A2DA}%s Donator"WHITE" %s", GetDonatorRank(pData[playerid][pDonator]), GetRPName(playerid));
	} else {
	    format(string, sizeof(string), "%s", GetRPName(playerid));
	}

	foreach(new i : Player)
	{
	    if(!pData[i][pToggleOOC])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
				SM(i, COLOR_WHITE, "(([ANNOUCEMENT] %s: %.*s... ))", string, MAX_SPLIT_LENGTH, params);
				SM(i, COLOR_WHITE, "((%s: ...%s ))", string, params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_WHITE, "(([ANNOUCEMENT] %s: %s ))", string, params);
			}
		}
	}

	return 1;
}

/*CMD:newb(playerid, params[]) return callcmd::newbie(playerid, params);
CMD:n(playerid, params[]) return callcmd::newbie(playerid, params);
CMD:newbie(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(n)ewbie [newbie chat]");
	}
	if(!enabledNewbie && pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The newbie channel is disabled at the moment.");
	}
	if(pData[playerid][pNewbieMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are muted from speaking in this channel. /report for an unmute.");
	}
	if(gettime() - pData[playerid][pLastNewbie] < 60)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only speak in this channel every 60 seconds. Please wait %i more seconds.", 60 - (gettime() - pData[playerid][pLastNewbie]));
	}
	if(pData[playerid][pToggleNewbie])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the newbie chat as you have it toggled.");
	}

	SendNewbieChatMessage(playerid, params);

	pData[playerid][pNewbies] ++;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET newbies = %i WHERE uid = %i", pData[playerid][pNewbies], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}*/

CMD:newb(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::newbie(playerid, params);
}

CMD:n(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::newbie(playerid, params);
}

CMD:newbie(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pNewbieMuted])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are muted from speaking in this channel. /unmute to unmute yourself.");
	}
	if(gettime() - pData[playerid][pLastNewbie] < 30)
	{
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can only speak in this channel every 30 seconds. Please wait %i more seconds.", 30 - (gettime() - pData[playerid][pLastNewbie]));
	}
	if(pData[playerid][pToggleNewbie])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in the newbie chat as you have it toggled.");
	}
	ShowDialogToPlayer(playerid, DIALOG_NEWBIE);

	return 1;
}

CMD:na(playerid, params[]) return callcmd::nanswer(playerid, params);
CMD:nanswer(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pHelper] >= 1 || pData[playerid][pAdmin] >= 2)
	{
	    new giveplayerid, string[300], answer[128], question[128];
		if(sscanf(params, "us[128]", giveplayerid, answer)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /nanswer (playerid) (answer)");
		if(GetPVarInt(giveplayerid, "SendQuestion") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "That player isn't asking");
		format(string, sizeof(string), "* Staff %s has answered your Question", GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		GetPVarString(giveplayerid, "Question", question, sizeof(question));
		foreach(new n: Player)
		{
		    if(!pData[n][pToggleNewbie])
		    {
			    format(string, sizeof(string), "Question: "YELLOW"%s:"WHITE" %s", GetPlayerNameEx(giveplayerid), question);
			    SendClientMessageEx(n, COLOR_NEWBIE, string);
			    if(pData[playerid][pHelper] == 1 && pData[playerid][pAdmin] < 2)
			    {
					format(string, sizeof(string), "Answer: "YELLOW"%s:"WHITE" %s", GetPlayerNameEx(playerid), answer);
					pData[playerid][pNewbies] ++;
					mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET newbies = %i WHERE uid = %i", pData[playerid][pNewbies], pData[playerid][pID]);
					mysql_tquery(connectionID, queryBuffer);
				}
				if(pData[playerid][pHelper] >= 2 && pData[playerid][pAdmin] < 1) format(string, sizeof(string), "Answer: "YELLOW"%s:"WHITE" %s", GetPlayerNameEx(playerid), answer);
				if(pData[playerid][pAdmin] >= 2) format(string, sizeof(string), "Answer: "YELLOW"%s:"WHITE" %s", GetPlayerNameEx(playerid), answer);
				SendClientMessageEx(n, COLOR_NEWBIE, string);
			}
		}
		new szString[528];
		format(szString, sizeof(szString), "Question: %s: %s", GetPlayerNameEx(giveplayerid), question);
		SendDiscordMessage(13, szString);
		format(szString, sizeof(szString), "Answer:%s: %s", GetPlayerNameEx(playerid), answer);
		SendDiscordMessage(13, szString);
		DeletePVar(giveplayerid, "SendQuestion");
		DeletePVar(giveplayerid, "Question");
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "You're not a Helper or an Admin!");
	return 1;

}
CMD:tn(playerid, params[]) return callcmd::trashnewb(playerid, params);
CMD:trashnewb(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pHelper] >= 1 || pData[playerid][pAdmin] >= 2)
	{
	    new giveplayerid, string[128], reason[128];
		if(sscanf(params, "us[128]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /trashnewb (playerid) (text)");
		if(GetPVarInt(giveplayerid, "SendQuestion") == 0) return SendClientMessageEx(playerid, COLOR_GREY, "That player isn't asking");
		format(string, sizeof(string), "* Staff "YELLOW"%s"WHITE" has trashed your question. "LIGHTRED"Reason:"WHITE" %s", GetPlayerNameEx(playerid), reason);
		SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		format(string, sizeof(string), "* "YELLOW"%s"WHITE" has trashed "YELLOW"%s"WHITE" question. "LIGHTRED"Reason:"WHITE" %s", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid), reason);
		SendQuestionToStaff(COLOR_WHITE, string);
		DeletePVar(giveplayerid, "SendQuestion");
		DeletePVar(giveplayerid, "Question");
		return 1;
	}
	else SendClientMessageEx(playerid, COLOR_WHITE, "You're not a Helper or an Admin!");
	return 1;
}

CMD:id(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new count, color, name[MAX_PLAYER_NAME], targetid = strval(params);

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /id [playerid/partial name]");
	}

	if(IsNumeric(params))
	{
		if(IsPlayerConnected(targetid))
		{
		    if((color = GetPlayerColor(targetid)) == 0xFFFFFF00) {
		        color = 0xAAAAAAFF;
			}

		    GetPlayerName(targetid, name, sizeof(name));
		    SM(playerid, COLOR_WHITE, "(ID: %i) {%06x}%s{AAAAAA} - (Level: %i) - (Ping: %i) - (Platform: %s)", targetid, color >>> 8, name, pData[targetid][pLevel], GetPlayerPing(targetid), IsPlayerAndroid(targetid) ? (""GREEN"CP{AAAAAA}") : (""RED"PC{AAAAAA}"));
		}
		else
		{
		    SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
	}
	else if(strlen(params) < 2)
	{
	    SCM(playerid, COLOR_SYNTAX, "Please input at least two characters to search.");
	}
	else
	{
	    foreach(new i : Player)
	    {
	        GetPlayerName(i, name, sizeof(name));

	        if(strfind(name, params, true) != -1)
	        {
	            if((color = GetPlayerColor(i)) == 0xFFFFFF00) {
		        	color = 0xAAAAAAFF;
				}

	            SM(playerid, COLOR_WHITE, "(ID: %i) {%06x}%s{AAAAAA} - (Level: %i) - (Ping: %i) - (Platform: %s)", i, color >>> 8, name, pData[i][pLevel], GetPlayerPing(i), IsPlayerAndroid(i) ? (""GREEN"CP{AAAAAA}") : (""RED"PC{AAAAAA}"));
	            count++;
			}
		}

		if(!count)
		{
		    SM(playerid, COLOR_SYNTAX, "No results found for \"%s\". Please narrow your search.", params);
		}
	}

	return 1;
}


CMD:pay(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid, amount;

    if(sscanf(params, "ui", targetid, amount))
    {
        return SCM(playerid, COLOR_SYNTAX, "Usage: /pay [playerid] [amount]");
    }
    if(gettime() - pData[playerid][pLastPay] < 3)
    {
        return SCM(playerid, COLOR_SYNTAX, "Please wait three seconds between each transaction.");
    }
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
    {
        return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
    }
    if(targetid == playerid)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't pay yourself.");
    }
    if(amount > pData[playerid][pCash])
    {
        return SCM(playerid, COLOR_SYNTAX, "You don't have that much.");
    }
    if(amount > 1000 && pData[playerid][pLevel] < 2)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can only pay up to $1,000 at a time as a level 1.");
    }
    if(!(1 <= amount <= 100000))
    {
        return SM(playerid, COLOR_SYNTAX, "Don't go below $1, or above $100,000 at once.");
    }
	if(pData[playerid][pAdminDuty] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't pay when you are on duty as admin.");
	}

    pData[playerid][pLastPay] = gettime();

    GivePlayerCash(playerid, -amount);
    GivePlayerCash(targetid, amount);

    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
    PlayerPlaySound(targetid, 1052, 0.0, 0.0, 0.0);

    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out $%i and gives it to %s.", GetRPName(playerid), amount, GetRPName(targetid));
    Log_Write("log_give", "%s (uid: %i) (IP: %s) gives $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerIP(playerid), amount, GetPlayerNameEx(targetid), pData[targetid][pID], GetPlayerIP(targetid));

    SM(targetid, COLOR_AQUA, "You have been given $%i by %s.", amount, GetRPName(playerid));
    SM(playerid, COLOR_AQUA, "You have given "SVRCLR"$%i{CCFFFF} to %s.", amount, GetRPName(targetid));

	//SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" has given $%i to %s.", GetRPName(playerid), amount, GetRPName(targetid));

    if(!strcmp(GetPlayerIP(playerid), GetPlayerIP(targetid)))
    {
        SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" (IP: %s) has given $%i to %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), amount, GetRPName(targetid), GetPlayerIP(targetid));
    }
	new szString[528];
	format(szString, sizeof(szString), " %s (IP: %s) has given $%i to %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), amount, GetRPName(targetid), GetPlayerIP(targetid));
	SendDiscordMessage(18, szString);
    return 1;
}

CMD:fixlands(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::reloadlands(playerid, params);
}

CMD:reloadlands(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /reloadlands [confirm]");
	    SCM(playerid, COLOR_WHITE, "This command may cause lag to the server. Abusing this will cause in a permanent ban.");
	    return 1;
	}
	for(new i = 0; i < MAX_OBJECTS; i ++)
	{
	    if(IsValidObject(i) && gScriptObject{i})
	    {
	        DestroyObject(i);
		}
	}
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reloaded all lands and their objects.", GetRPName(playerid));
	return 1;
}

CMD:resetbackpack(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;
	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /resetbackpack [playerid]");
	    SCM(playerid, COLOR_SYNTAX, "** This command removes the player's backpack and all items inside it.");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	ResetBackpack(targetid);
	SM(targetid, COLOR_LIGHTRED, "Administrator %s has reset your backpack and all its items.", GetRPName(playerid));
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has reset %s's backpack and all its items.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}
CMD:revokeweaponlicense(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	new targetid;
	if(sscanf(params, "i", targetid)) return SendClientMessage(playerid, COLOR_GREY, "Usage: /revokeweaponlicense [target]");
	if (pData[targetid][pWeaponLicense] == 0)
	{
		return SendClientMessage(playerid, -1, "The specified target doesn't have a weapon license.");
	}
	else
	{
	    pData[targetid][pWeaponLicense] = 0;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = %d WHERE uid = %i", pData[targetid][pWeaponLicense], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		ShowActionBubble(playerid, "* %s revoke %s's gun license.", GetRPName(playerid), GetRPName(targetid));
		SendClientMessageEx(playerid, COLOR_WHITE, "You have revoked %s's gun license.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_WHITE, "%s has revoked your weapon license.", GetRPName(playerid));
	}
	return 1;
}
CMD:revokecarlicense(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	new targetid;
	if(sscanf(params, "i", targetid)) return SendClientMessage(playerid, COLOR_GREY, "Usage: /revokecarlicense [target]");
	if (pData[targetid][pCarLicense] == 0)
	{
		return SendClientMessage(playerid, -1, "The specified target doesn't have a car license.");
	}
	else
	{
	    pData[targetid][pCarLicense] = 0;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = %d WHERE uid = %i", pData[targetid][pCarLicense], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		ShowActionBubble(playerid, "* %s revoke %s's car license.", GetRPName(playerid), GetRPName(targetid));
		SendClientMessageEx(playerid, COLOR_WHITE, "You have revoked %s's car license.", GetRPName(targetid));
		SendClientMessageEx(targetid, COLOR_WHITE, "%s has revoked your car license.", GetRPName(playerid));
	}
	return 1;
}
/*
CMD:giveweaponlic(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;
	new price = 50000;
	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_GREY2, "You are not a part of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_GREY2, "Usage: /giveweaponlic [playerid]");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "The player specified is disconnected.");
	}
	if(pData[targetid][pLevel] < 2 )
	{
	    return SCM(playerid, COLOR_GREY2, "The player was a newbie.");
	}
	if(pData[targetid][pCarLicense] == 0)
	{
	    return SCM(playerid, COLOR_GREY2, "The player does not have a car license.");
	}
	if(pData[targetid][pWeaponLicense] == 1) {
		return SCM(playerid, COLOR_GREY2, "The player has already have weapon license.");
	}
	
	GivePlayerCash(targetid, -price);
	
	pData[targetid][pWeaponLicense] = 1;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = %i WHERE uid = %i", pData[targetid][pWeaponLicense], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_WHITE, "** %s has given you a weapon license.", GetRPName(playerid));
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has given %s a weapon license.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}
*/
CMD:givebackpack(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, size[10];
	if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[14]S()[32]", targetid, size))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /givebackpack [playerid] [size]");
	    SCM(playerid, COLOR_WHITE, "Sizes:   Small, Medium, Large");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!strcmp(size, "small", true))
	{
		pData[targetid][pBackpack] = 1;
	    SM(targetid, COLOR_WHITE, "** %s has given you a small backpack.", GetRPName(playerid));
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has given %s a small backpack.", GetRPName(playerid), GetRPName(targetid));
	}
	if(!strcmp(size, "medium", true))
	{
		pData[targetid][pBackpack] = 2;
	    SM(targetid, COLOR_WHITE, "** %s has given you a medium backpack.", GetRPName(playerid));
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has given %s a medium backpack.", GetRPName(playerid), GetRPName(targetid));
	}
	if(!strcmp(size, "large", true))
	{
		pData[targetid][pBackpack] = 3;
	    SM(targetid, COLOR_WHITE, "** %s has given you a large backpack.", GetRPName(playerid));
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has given %s a large backpack.", GetRPName(playerid), GetRPName(targetid));
	}
	return 1;
}
CMD:give(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, option[14], param[32], amount;

	if(sscanf(params, "us[14]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Weapon, Materials, Pot, Crack, Meth, Painkillers, Cigars, Spraycans");
	    SCM(playerid, COLOR_WHITE, "Available options: GasCan, Seeds, Ephedrine, DirtyCash, Diamonds");
	    SCM(playerid, COLOR_WHITE, "Available options: Bandage, Medkit, Repairkit, taco, burrito, coke");
	    return 1;
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pPaintball])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}

	if(!strcmp(option, "weapon", true))
	{
	    new weaponid = GetScriptWeapon(playerid);

	    if(!weaponid)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You must be holding the weapon you're willing to give away.");
	    }
	    if(pData[targetid][pWeapons][weaponSlotIDs[weaponid]] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player already has a weapon in that slot.");
	    }
		if(pData[playerid][pDuty] == 1)
		{
			return SCM(playerid, COLOR_ERROR, "[ERROR] You are not allowed to give a weapon while on duty.");
		}
		if(enabledpurge == 1)
		{
			return SCM(playerid, COLOR_WHITE, "You are not allowed to deposit a gun when purge is enable");
		}		
		if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
		{
			return SCM(playerid, COLOR_SYNTAX, "You are not allowed to give a gun when you are weapon restricted or level 1.");
		}
		if(pData[targetid][pWeaponRestricted] > 0 || pData[targetid][pLevel] < 2)
		{
			return SCM(playerid, COLOR_SYNTAX, "That player is not allowed to carry a gun reason weapon restricted or level 1.");
		}
	    if(pData[playerid][pFaction] >= 0 && pData[targetid][pFaction] != pData[playerid][pFaction])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can only give away weapons to your own faction members.");
	    }
	    if(pData[playerid][pDonator] > 0 && pData[targetid][pDonator] != pData[playerid][pDonator])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can only give away weapons to other same VIP");
	    }
		if(weaponid == 5 && pData[playerid][pVIPgun1] == 1)
		{
			return SCM(playerid, COLOR_GREY2, "You are not allowed to deposit this gun.");
		}
		if(weaponid == 22 && pData[playerid][pVIPgun2] == 1)
		{
			return SCM(playerid, COLOR_GREY2, "You are not allowed to deposit this gun.");
		}
		if(weaponid == 8 && pData[playerid][pVIPgun3] == 1)
		{
			return SCM(playerid, COLOR_GREY2, "You are not allowed to deposit this gun.");
		}	
		if(weaponid == 29 && pData[playerid][pVIPgun4] == 1)
		{
			return SCM(playerid, COLOR_GREY2, "You are not allowed to deposit this gun.");
		}				
		if(weaponid == 25 && pData[playerid][pVIPgun5] == 1)
		{
			return SCM(playerid, COLOR_GREY2, "You are not allowed to deposit this gun.");
		}
	    GiveWeapon(targetid, weaponid);
	    RemovePlayerWeapon(playerid, weaponid);

	    SM(targetid, COLOR_AQUA, "%s has given you their %s.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SM(playerid, COLOR_AQUA, "You have given %s your %s.", GetRPName(targetid), GetWeaponNameEx(weaponid));
		new szString[528];
		format(szString, sizeof(szString), " %s passes over their %s to %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));
		SendDiscordMessage(17, szString);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s passes over their %s to %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives their %s to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "taco", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [taco] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pTaco])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}


		pData[playerid][pTaco] -= amount;
		pData[targetid][pTaco] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET taco = %i WHERE uid = %i", pData[playerid][pTaco], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET taco = %i WHERE uid = %i", pData[targetid][pTaco], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i taco.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i taco to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some taco to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i taco to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "coke", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [juice] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pJuice])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		pData[playerid][pJuice] -= amount;
		pData[targetid][pJuice] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET juice = %i WHERE uid = %i", pData[playerid][pJuice], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET juice = %i WHERE uid = %i", pData[targetid][pJuice], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i juice.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i juice to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some juice to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i juice to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	
	else if(!strcmp(option, "burrito", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [burrito] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pBurrito])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		pData[playerid][pBurrito] -= amount;
		pData[targetid][pBurrito] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET burrito = %i WHERE uid = %i", pData[playerid][pBurrito], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET burrito = %i WHERE uid = %i", pData[targetid][pBurrito], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i burrito.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i burrito to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some burrito to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i burrito to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "drink", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [drink] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pDrink])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		pData[playerid][pDrink] -= amount;
		pData[targetid][pDrink] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[playerid][pDrink], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET drink = %i WHERE uid = %i", pData[targetid][pDrink], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i drink.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i drink to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some food to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i drink to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "vest", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [vest] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pVest])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		pData[playerid][pVest] -= amount;
		pData[targetid][pVest] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vest = %i WHERE uid = %i", pData[playerid][pVest], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vest = %i WHERE uid = %i", pData[targetid][pVest], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i vest.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i vest to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some vest to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i vest to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "parts", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [parts] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pParts])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
        if(pData[targetid][pParts] >= 20)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player can't have more 20 repairkits.");
	    }

		pData[playerid][pParts] -= amount;
		pData[targetid][pParts] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET parts = %i WHERE uid = %i", pData[playerid][pParts], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET parts = %i WHERE uid = %i", pData[targetid][pParts], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i vehicle parts.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i vehicle parts to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some vehiicle parts to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i vehicle parts to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "repairkit", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [repairkit] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pRepairKit])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
        if(pData[targetid][pRepairKit] >= 5)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player can't have more 5 repairkits.");
	    }

		pData[playerid][pRepairKit] -= amount;
		pData[targetid][pRepairKit] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET repairkit = %i WHERE uid = %i", pData[playerid][pRepairKit], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET repairkit = %i WHERE uid = %i", pData[targetid][pRepairKit], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i repairkit.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i repairkit to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some repairkit to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i repairkit to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "bandage", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [bandage] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pBandage])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		pData[playerid][pBandage] -= amount;
		pData[targetid][pBandage] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bandage = %i WHERE uid = %i", pData[playerid][pBandage], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bandage = %i WHERE uid = %i", pData[targetid][pBandage], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i bandage.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i bandage to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives bandage to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i bandage to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "medkit", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [medkit] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pMedkit])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		pData[playerid][pMedkit] -= amount;
		pData[targetid][pMedkit] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[playerid][pMedkit], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[targetid][pMedkit], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i medkit.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i medkit to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives medkit to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i medkit to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [materials] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pMaterials])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(pData[targetid][pMaterials] + amount > GetPlayerCapacity(CAPACITY_MATERIALS))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more materials.");
		}

		pData[playerid][pMaterials] -= amount;
		pData[targetid][pMaterials] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[targetid][pMaterials], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i materials.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i materials to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some materials to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i materials to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "pot", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [pot] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pPot])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(pData[targetid][pPot] + amount > GetPlayerCapacity(CAPACITY_WEED))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more pot.");
		}

		pData[playerid][pPot] -= amount;
		pData[targetid][pPot] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[targetid][pPot], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i grams of pot.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i grams of pot to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some pot to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of pot to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "crack", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [Crack] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pCrack])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(pData[targetid][pCrack] + amount > GetPlayerCapacity(CAPACITY_COCAINE))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more Crack.");
		}

		pData[playerid][pCrack] -= amount;
		pData[targetid][pCrack] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[targetid][pCrack], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i grams of crack.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i grams of crack to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some Crack to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of Crack to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [meth] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pMeth])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(pData[targetid][pMeth] + amount > GetPlayerCapacity(CAPACITY_METH))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more meth.");
		}

		pData[playerid][pMeth] -= amount;
		pData[targetid][pMeth] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[targetid][pMeth], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i grams of meth.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i grams of meth to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some meth to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of meth to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [painkillers] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pPainkillers])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(pData[targetid][pPainkillers] + amount > GetPlayerCapacity(CAPACITY_PAINKILLERS))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more painkillers.");
		}

		pData[playerid][pPainkillers] -= amount;
		pData[targetid][pPainkillers] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[targetid][pPainkillers], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i painkillers.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i painkillers to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some painkillers to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i painkillers to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "cigars", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [cigars] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pCigars])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		pData[playerid][pCigars] -= amount;
		pData[targetid][pCigars] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", pData[playerid][pCigars], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", pData[targetid][pCigars], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i cigars.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i cigars to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some cigars to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i cigars to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [spraycans] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pSpraycans])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		pData[playerid][pSpraycans] -= amount;
		pData[targetid][pSpraycans] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", pData[playerid][pSpraycans], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", pData[targetid][pSpraycans], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i spraycans.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i spraycans to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some spraycans to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i spraycans to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "gascan", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [gascan] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pGasCan])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		pData[playerid][pGasCan] -= amount;
		pData[targetid][pGasCan] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", pData[playerid][pGasCan], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", pData[targetid][pGasCan], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i liters of gasoline.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i liters of gasoline to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some gasoline to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i liters of gasoline to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [seeds] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pSeeds])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(pData[targetid][pSeeds] + amount > GetPlayerCapacity(CAPACITY_SEEDS))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more seeds.");
		}

		pData[playerid][pSeeds] -= amount;
		pData[targetid][pSeeds] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", pData[playerid][pSeeds], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", pData[targetid][pSeeds], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i seeds.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i seeds to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some seeds to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i seeds to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [ephedrine] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pEphedrine])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}
		if(pData[targetid][pEphedrine] + amount > GetPlayerCapacity(CAPACITY_EPHEDRINE))
		{
		    return SM(playerid, COLOR_SYNTAX, "That player can't carry that much more ephedrine.");
		}

		pData[playerid][pEphedrine] -= amount;
		pData[targetid][pEphedrine] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", pData[playerid][pEphedrine], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", pData[targetid][pEphedrine], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i grams of ephedrine.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i grams of ephedrine to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some ephedrine to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of ephedrine to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "dirtycash", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /give [playerid] [dirtycash] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pDirtyCash])
		{
		    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
		}

		pData[playerid][pDirtyCash] -= amount;
		pData[targetid][pDirtyCash] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", pData[playerid][pDirtyCash], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", pData[targetid][pDirtyCash], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i grams of dirty cash.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i grams of dirty cash to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some dirty cash to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i grams of dirty cash to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}

	else if(!strcmp(option, "diamonds", true))
	{
	    if(sscanf(param, "i", amount))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /give [playerid] [diamonds] [amount]");
		}
		if(amount < 1 || amount > pData[playerid][pDiamonds])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Insufficient amount.");
		}
		if(pData[targetid][pDiamonds] + amount > 1000)
		{
		    return SM(playerid, COLOR_GREY, "That player can't carry that much more diamonds.");
		}

		pData[playerid][pDiamonds] -= amount;
		pData[targetid][pDiamonds] += amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[playerid][pDiamonds], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", pData[targetid][pDiamonds], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has given you %i diamonds.", GetRPName(playerid), amount);
		SM(playerid, COLOR_AQUA, "You have given %i diamonds to %s.", amount, GetRPName(targetid));

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s gives some diamonds to %s.", GetRPName(playerid), GetRPName(targetid));
	    Log_Write("log_give", "%s (uid: %i) gives %i diamonds to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	}

	return 1;
}

CMD:changemoney(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 8.0, -64.7425,-1120.7697,1.0781))
	{
		ShowDialogToPlayer(playerid, DIALOG_TYPE);
	}
	else 
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any EXCHANGE SITE.");	
	}		
	return 1;
}

/*
CMD:washmoney(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new madumi = pData[playerid][pDirtyCash];
	new bawas = (madumi/200)*10; // 5 discount percent
 	new total = madumi-bawas;
	if(pData[playerid][pDirtyCash] < 0)
	{
		return SCM(playerid, COLOR_GREY2, "You don't have dirty money.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, -64.7425,-1120.7697,1.0781))
	{
		return SCM(playerid, COLOR_GREY2, "You need to be at a cleaning factory.");
	}
	SM(playerid, COLOR_WHITE, "You washed your money and earn %i.", total);
	pData[playerid][pDirtyCash] -= total;
	GivePlayerCash(playerid, total);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = %i WHERE uid = %i", pData[playerid][pDirtyCash], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}
*/
CMD:sell(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, option[14], param[32], amount, price;

	if(sscanf(params, "us[14]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Weapon, Materials, Backpack, Pot, Crack, Meth, Painkillers, Seeds, Ephedrine");
	    return 1;
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pTied] > 0 ||  pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pPaintball])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
    if(gettime() - pData[playerid][pLastSell] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - pData[playerid][pLastSell]));
	}
	if(!strcmp(option, "weapon", true))
	{
	    new weaponid;

		if(sscanf(param, "ii", weaponid, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [weapon] [weaponid] [price] (/guninv for weapon IDs)");
		}
	    if(!(1 <= weaponid <= 46) || pData[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You don't have that weapon. /guninv for a list of your weapons.");
		}
	    if(pData[targetid][pWeapons][weaponSlotIDs[weaponid]] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player already has a weapon in that slot.");
	    }
	    if(pData[targetid][pWeaponRestricted] > 0  || pData[playerid][pLevel] < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is either weapon restricted or level.");
	    }
		if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
		{
			return SCM(playerid, COLOR_SYNTAX, "You are not allowed to sell a gun when you are weapon restricted or level 1.");
		}
	    if(pData[playerid][pFaction] >= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't sell weapons as a faction member.");
	    }
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

        pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_WEAPON;
		pData[targetid][pSellExtra] = weaponid;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you their %s for $%i. (/accept item)", GetRPName(playerid), GetWeaponNameEx(weaponid), price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %s for $%i.", GetRPName(targetid), GetWeaponNameEx(weaponid), price);
	}
	else if(!strcmp(option, "materials", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [materials] [amount] [price]");
		}
		if(amount < 1 || amount > pData[playerid][pMaterials])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_MATERIALS;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i materials for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i materials for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "backpack", true))
	{
	    new size[6];
		if(sscanf(param, "ii", amount, price))
		{
  			SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [backpack] [size] [price]");
  			SCM(playerid, SERVER_COLOR, "** {FF0000}[NOTE}: "WHITE"Please note that the items inside the backpack will be deleted.");
  			return 1;
		}
		if(!pData[playerid][pBackpack])
		{
		    return SCM(playerid, COLOR_SYNTAX, "You don't have a backpack.");
		}
		if(pData[playerid][bpWearing])
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't sell your backpack while wearing it.");
		}
		if(amount != pData[playerid][pBackpack])
		{
		    SCM(playerid, COLOR_SYNTAX, "Invalid backpack size.");
		    SCM(playerid, COLOR_SYNTAX, "Sizes: 1 - Small  |  2 - Medium  |  3 - large");
		    return 1;
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_BACKPACK;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;
		if(amount == 1)
		{
		    format(size, sizeof(size), "small");
		}
		if(amount == 2)
		{
		    format(size, sizeof(size), "medium");
		}
		if(amount == 3)
		{
  			format(size, sizeof(size), "large");
		}
		SM(targetid, COLOR_AQUA, "** %s offered to sell you a %s backpack for $%i. (/accept item)", GetRPName(playerid), size, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %s backpack for $%i.", GetRPName(targetid), size, price);
	}
	else if(!strcmp(option, "pot", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [pot] [amount] [price]");
		}
		if(amount < 1 || amount > pData[playerid][pPot])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_WEED;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i grams of pot for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i grams of pot for $%i.", GetRPName(targetid), amount, price);
	}
    else if(!strcmp(option, "crack", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [Crack] [amount] [price]");
		}
		if(amount < 1 || amount > pData[playerid][pCrack])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_COCAINE;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i grams of Crack for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i grams of Crack for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "meth", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [meth] [amount] [price]");
		}
		if(amount < 1 || amount > pData[playerid][pMeth])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_METH;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i grams of meth for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i grams of meth for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "painkillers", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [painkillers] [amount] [price]");
		}
		if(amount < 1 || amount > pData[playerid][pPainkillers])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_PAINKILLERS;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i painkillers for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i painkillers for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "seeds", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [seeds] [amount] [price]");
		}
		if(amount < 1 || amount > pData[playerid][pSeeds])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_SEEDS;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i seeds for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i seeds for $%i.", GetRPName(targetid), amount, price);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
		if(sscanf(param, "ii", amount, price))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /sell [playerid] [ephedrine] [amount] [price]");
		}
		if(amount < 1 || amount > pData[playerid][pEphedrine])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}
		if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}

		pData[playerid][pLastSell] = gettime();
		pData[targetid][pSellOffer] = playerid;
		pData[targetid][pSellType] = ITEM_EPHEDRINE;
		pData[targetid][pSellExtra] = amount;
		pData[targetid][pSellPrice] = price;

		SM(targetid, COLOR_AQUA, "** %s offered to sell you %i grams of ephedrine for $%i. (/accept item)", GetRPName(playerid), amount, price);
		SM(playerid, COLOR_AQUA, "** You have offered to sell %s your %i grams of ephedrine for $%i.", GetRPName(targetid), amount, price);
	}

	return 1;
}

CMD:accent(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new type;

	if(sscanf(params, "i", type))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /accent [type]");
	    SCM(playerid, COLOR_GREY2, "List of accents: (0) None - (1) Tagalog - (2) Cebuano - (3) Bikol - (4) English");
		SCM(playerid, SERVER_COLOR, "More accent contact developers.");
		return 1;
	}

	switch(type)
	{
		case 0: strcpy(pData[playerid][pAccent], "None", 16);
		case 1: strcpy(pData[playerid][pAccent], "Tagalog", 16);
		case 2: strcpy(pData[playerid][pAccent], "Cebuano", 16);
		case 3: strcpy(pData[playerid][pAccent], "Bikol", 16);
		case 4: strcpy(pData[playerid][pAccent], "English", 16);

		default: SCM(playerid, COLOR_SYNTAX, "Invalid accent. Valid types range from 0 to 53.");
	}

	SM(playerid, COLOR_WHITE, "** You set your accent to '%s'.", pData[playerid][pAccent]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET accent = '%e' WHERE uid = %i", pData[playerid][pAccent], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:dice(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s rolls a dice which lands on the number %i.", GetRPName(playerid), random(6) + 1);
	return 1;
}

CMD:flipcoin(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s flips a coin which lands on %s.", GetRPName(playerid), (random(2)) ? ("Heads") : ("Tails"));
	return 1;
}

CMD:time(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new
	    string[128],
		date[6];

	getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4], date[5]);

	switch(date[1])
	{
	    case 1: string = "January";
	    case 2: string = "February";
	    case 3: string = "March";
	    case 4: string = "April";
	    case 5: string = "May";
	    case 6: string = "June";
	    case 7: string = "July";
	    case 8: string = "August";
	    case 9: string = "September";
	    case 10: string = "October";
	    case 11: string = "November";
	    case 12: string = "December";
	}

	format(string, sizeof(string), "%s %02d, %i %02d:%02d:%02d", string, date[2], date[0], date[3], date[4], date[5]);

	if(pData[playerid][pJailTime] > 0)
	{
	    format(string, sizeof(string), "%s Jail Time: %i seconds", string, pData[playerid][pJailTime]);
	}

    ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0);
	//Dyuze(playerid, "Time", string, 5000);
	SM(playerid, COLOR_WHITE, "** Paychecks occur at every hour. The next paycheck is at %02d:00 which is in %i minutes.", date[3]+1, (60 - date[4]));
	return 1;
}
forward ComservEx(playerid);
public ComservEx(playerid)
{
	if (pData[playerid][pComserv] <= 0) {
		pData[playerid][pComserv] = 0;
		SCM(playerid, COLOR_SYNTAX,"** Your service is finished.");
		return 1;
	}
	
	pData[playerid][pHunger] = 100;
	pData[playerid][pHungerTimer] = 0;
	pData[playerid][pThirst] = 100;
	pData[playerid][pThirstTimer] = 0;	
	pData[playerid][pStress] = 100;
	pData[playerid][pStressTimer] = 0;

	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid, 1);
	pData[playerid][pComserv] -= 1;
	SM(playerid,COLOR_GREY2, "** You have %i more actions to complete before you can finish your service.",pData[playerid][pComserv]);
	return 1;
}


CMD:vmute(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pAdmin] < 2 && pData[playerid][pHelper] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, ""RED"[Server]"WHITE" You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, ""RED"[Server]"WHITE" Usage: /vmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, ""RED"[Server]"WHITE" The player specified is disconnected.");
	}

	if(!pData[targetid][pVoiceChat])
	{
	    pData[targetid][pVoiceChat] = 1;

        SvMutePlayerEnable(targetid);
	    SendStaffMessage(COLOR_LIGHTRED, ""RED"[AdmCmd] :"WHITE" %s was muted from using voice chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from using voice chat by %s.", GetRPName(playerid));
	}
	else
	{
	    pData[targetid][pVoiceChat] = 0;
	     
	    SvMutePlayerDisable(targetid);
	    SendStaffMessage(COLOR_LIGHTRED, ""RED"[AdmCmd] :"WHITE" %s was unmuted from using voice chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from using voice chat by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:listnewbie(playerid, params[])
{

	new sstring[2048], fString[1024];
    if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	format(sstring, sizeof(sstring), ""WHITE"\n");
	foreach(new i : Player)
	{
	    if(pData[i][pLevel] == 1)
	    {
			format(fString, sizeof fString, "(ID: %i) %s - (Ping: %i) - (Platform: %s) \n",i, GetRPName(i),  GetPlayerPing(i), IsPlayerAndroid(i) ? (""GREEN"CP{AAAAAA}") : (""RED"PC{AAAAAA}"));		
			strcat(sstring, fString);
		}
	}
	ShowPlayerDialog(playerid, DIALOG_BOXLIST, DIALOG_STYLE_MSGBOX, ""WHITE"COMMUNITY SERVICE PLAYERS (COMSERV)", sstring, "Ok","");
	return 1;
}
CMD:listcomserv(playerid, params[])
{

	new sstring[2048], fString[1024];
    if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	format(sstring, sizeof(sstring), ""WHITE"\n");
	foreach(new i : Player)
	{
	    if(pData[i][pComserv] > 0)
	    {
			format(fString, sizeof fString, "(ID: %i) %s - Time: %i seconds \n",i, GetRPName(i), pData[i][pComserv]);
			strcat(sstring, fString);
		}
	}
	ShowPlayerDialog(playerid, DIALOG_BOXLIST, DIALOG_STYLE_MSGBOX, ""WHITE"COMMUNITY SERVICE PLAYERS (COMSERV)", sstring, "Ok","");

	
	
	return 1;
}


CMD:comserv(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, months, string[128];
	if(!IsLawEnforcement(playerid) && pData[playerid][pAdmin] < 2)
    {
        return SCM(playerid, COLOR_GREY2, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, months))
	{
	    return SCM(playerid, COLOR_GREY2, "Usage: /comserv [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_GREY2, "The player specified is disconnected or out of range.");
	}
	pData[targetid][pSkin] = 50;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = 50 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SetPlayerSkin(targetid, 50);

	pData[targetid][pHunger] = 100;
	pData[targetid][pHungerTimer] = 0;
	pData[targetid][pThirst] = 100;
	pData[targetid][pThirstTimer] = 0;	
	pData[targetid][pStress] = 100;
	pData[targetid][pStressTimer] = 0;

	pData[targetid][pComserv] = months;
	SetPlayerVirtualWorld(targetid, 0);
	SetPlayerInterior(targetid, 0);
	SetPlayerPos(targetid, 1482.4253,-1717.5935,14.0469);
	SetPlayerFacingAngle(targetid, 9.8095);
	GameTextForPlayer(targetid, "~w~Good Luck~n~~r~Cleaning!", 5000, 3);
    
	pData[targetid][pVIPgun1] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun1 = 0 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	pData[targetid][pVIPgun2] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun2 = 0 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	pData[targetid][pVIPgun3] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun3 = 0 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	pData[targetid][pVIPgun4] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun4 = 0 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	pData[targetid][pVIPgun5] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun5 = 0 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	
	ResetPlayerWeaponsEx(targetid);

	format(string, sizeof(string), "** Breaking News: %s put %s into Community Service for %i weeks.", GetRPName(playerid), GetRPName(targetid), months);
	SAM(COLOR_LIGHTGREEN, string);
	
	SM(targetid, COLOR_AQUA, "** You have been put to Community Service for %i months by %i.", months, GetRPName(playerid));
	
	new szString[528];
	format(szString, sizeof(szString), "News: %s have been put to Community Service for %i months by %s. ", GetRPName(targetid),pData[targetid][pComserv], GetRPName(playerid) );
	SendDiscordMessage(15, szString);
	return 1;
}

CMD:comservcrzy(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, months;
	if(!IsLawEnforcement(playerid) && pData[playerid][pAdmin] < 2)
    {
        return SCM(playerid, COLOR_GREY2, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, months))
	{
	    return SCM(playerid, COLOR_GREY2, "Usage: /comserv [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_GREY2, "The player specified is disconnected or out of range.");
	}
	pData[targetid][pSkin] = 50;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = 50 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SetPlayerSkin(targetid, 50);

	pData[targetid][pComserv] = months;
	SetPlayerVirtualWorld(targetid, 0);
	SetPlayerInterior(targetid, 0);
	SetPlayerPos(targetid, 1482.4253,-1717.5935,14.0469);
	SetPlayerFacingAngle(targetid, 9.8095);
	GameTextForPlayer(targetid, "~w~Good Luck~n~~r~Cleaning!", 5000, 3);
   
	return 1;
}

CMD:resetcomservcrzy(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;
	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "Usage: /resetcomserv [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "The player specified is disconnected.");
	}
	pData[targetid][pComserv] = 0;
    return 1;
}

CMD:dcesca(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s rolls a dice which lands on the number 5.", GetRPName(playerid));
	return 1;
}


CMD:resetcomserv(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;
	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "Usage: /resetcomserv [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_GREY2, "The player specified is disconnected.");
	}
	pData[targetid][pComserv] = 0;
    SAM(COLOR_LIGHTRED, "AdmCmd: %s has been reset community service.", GetRPName(targetid));
	new szString[528];
	format(szString, sizeof(szString), "News: %s %s has been reset community service by %s. ", GetRPName(targetid), GetRPName(playerid) );
	SendDiscordMessage(15, szString);
	return 1;
}

CMD:clean(playerid, params[]) {
	if (pData[playerid][pComserv] < 1) {
		return SCM(playerid, COLOR_GREY2, "** You are not performing an community service.");
	}
	if(gettime() - pData[playerid][pLastClean] < 5)
	{
		return SM(playerid, COLOR_GREY2, "** You can only use this command every 5 seconds. Please wait %i more seconds.", 5 - (gettime() - pData[playerid][pLastClean]));
	}
    if(!CanPlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}
	pData[playerid][pHunger] = 100;
	pData[playerid][pHungerTimer] = 0;
	pData[playerid][pThirst] = 100;
	pData[playerid][pThirstTimer] = 0;	
	pData[playerid][pStress] = 100;
	pData[playerid][pStressTimer] = 0;

	for(new i = 0; i < sizeof(comservpoint); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, comservpoint[i][0], comservpoint[i][1], comservpoint[i][2]))
	    {
			GameTextForPlayer(playerid, "~g~Cleaning...", 10000, 3);
			ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("ComservEx", 10000, false, "i", playerid);
			pData[playerid][pLastClean] = gettime();
			return 1;
		}
	}
	SCM(playerid, COLOR_GREY2, "You are not in range of cleaning areas.");
	return 1;
}

CMD:reportdm(playerid, params[]) return callcmd::rdm(playerid, params);
CMD:rdm(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rdm [playerid]");
	}
	if(!enabledReports)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report channel is disabled at the moment.");
	}
	if(pData[playerid][pReportMuted])
	{
	    if(pData[playerid][pReportMuted] > 1000) {
     		return SM(playerid, COLOR_SYNTAX, "You are indefinitely muted from submitting reports.");
		} else {
			return SM(playerid, COLOR_SYNTAX, "You are muted from submitting reports. Your mute is lifted in %i hours.", pData[playerid][pReportMuted]);
		}
	}
	if(gettime() - pData[playerid][pLastReport] < 300)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only submit one report every 300 seconds. Please wait %i more seconds.", 300 - (gettime() - pData[playerid][pLastReport]));
	}
	if(pData[playerid][pActiveReport] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have an active report which needs to be closed first. Use /cr to close it.");
	}
	if(!AddDMReportToQueue(playerid, params))
	{
		return SCM(playerid, COLOR_SYNTAX, "The report queue is currently full. Please try again later.");
	}

	SCM(playerid, COLOR_YELLOW, "Your DM report was sent to all online admins. Please wait for a response.");
	return 1;
}

CMD:am(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAMute])
		return SCM(playerid, COLOR_ERROR, "(( You have been muted by an admin from using /am. ))");

	new targetid, message[128];
	if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(pData[playerid][pAdmin] > 0)
	{
		if(sscanf(params, "us[128]", targetid, message))
			return SCM(playerid, COLOR_GREY, "USAGE:"WHITE" /am [playerid] [message]");

		if(!IsPlayerConnected(targetid))
			return SCM(playerid, COLOR_ERROR, "That player is not connected!");

		SCM(targetid, SERVER_COLOR, "Use "WHITE"/am"LIME" to reply to this message from an admin.");
		SCMf(targetid, COLOR_LIME, "Admin message from %s:"WHITE" %s", GetPlayerNameEx(playerid), message);
		SendStaffMessage(SERVER_COLOR, ""LIME"%s"WHITE" [%d] > "LIME"%s"WHITE" [%d]:"WHITE" %s", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(targetid), targetid, message);

		Log_Write("log_am", "Admin %s [uid: %d] > %s [uid: %d]: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

		pData[playerid][pAMCount] ++;
	}
	else
	{
		if(!enabledAM)
			return SCM(playerid, COLOR_WHITE, "(( You cannot send messages to admin, it's disabled at the moment. Try again later. ))");

		if((gettime() - pData[playerid][pLastAM]) < 240)
		{
			return SCM(playerid, COLOR_TEAL, "Error:"WHITE" You need to wait "WHITE"2 minutes"TEAL" before sending another message.");
		}

		if(sscanf(params, "s[128]", message))
			return SCM(playerid, COLOR_GREY, "USAGE:"WHITE" /am [message]");

		SendStaffMessage(COLOR_LIME, "Admin message from %s [%d]:{ffffff} %s", GetPlayerNameEx(playerid), playerid, message);
		SCM(playerid, COLOR_TEAL, "Your message was sent to online administrators.");

		Log_Write("log_am", "Player %s [uid: %d] > Admins: %s", GetPlayerNameEx(playerid), pData[playerid][pID]);
		new szString[528];
		format(szString, sizeof(szString), "Admin Message from %s: %s", GetRPName(playerid), params);
		SendDiscordMessage(9, szString);
		pData[playerid][pLastAM] = gettime();
	}
	return 1;
}

CMD:report(playerid,  params[])
{	
	new AdminCount;
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /report [text]");
	}
	if(!enabledReports)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report channel is disabled at the moment.");
	}
	if(pData[playerid][pReportMuted])
	{
	    if(pData[playerid][pReportMuted] > 1000) {
     		return SM(playerid, COLOR_SYNTAX, "You are indefinitely muted from submitting reports.");
		} else {
			return SM(playerid, COLOR_SYNTAX, "You are muted from submitting reports. Your mute is lifted in %i hours.", pData[playerid][pReportMuted]);
		}
	}
	if(gettime() - pData[playerid][pLastReport] < 300)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only submit one report every 50 seconds. Please wait %i more seconds.", 300 - (gettime() - pData[playerid][pLastReport]));
	}
	if(pData[playerid][pActiveReport] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have an active report which needs to be closed first. Use /cr to close it.");
	}
	if(!AddReportToQueue(playerid, params))
	{
		return SCM(playerid, COLOR_SYNTAX, "The report queue is currently full. Please try again later.");
	}
	foreach(new i : Player)
	{
		if(pData[i][pLogged] && pData[i][pAdmin] > 1 )
		{
			AdminCount++;
		}
	}
	if(AdminCount <= 0)
	{
		return SendClientMessage(playerid, COLOR_SYNTAX, "Sorry you Cannot Report at the Momment, There is no Admin Online.");
	}
	
	SCM(playerid, COLOR_TEAL, "Your report was sent to all online admins. Please wait for a response.");
	return 1;
}

CMD:gethelp(playerid, params[]) return callcmd::helpme(playerid, params);
CMD:requesthelp(playerid, params[]) return callcmd::helpme(playerid, params);
CMD:helpme(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gethelp [help request]");
	}
	if(pData[playerid][pHelper] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are a helper and therefore can't use this command.");
	}
	if(pData[playerid][pHelpMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are muted from submitting help requests.");
	}
	if(gettime() - pData[playerid][pLastRequest] < 30)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only submit one help request every 30 seconds. Please wait %i more seconds.", 30 - (gettime() - pData[playerid][pLastRequest]));
	}

	strcpy(pData[playerid][pHelpRequest], params, 128);
	SendHelperMessage(COLOR_AQUA, "** Help Request from %s[%i]: %s **", GetRPName(playerid), playerid, params);

	pData[playerid][pLastRequest] = gettime();
	SCM(playerid, COLOR_YELLOW, "Your help request was sent to all helpers. Please wait for a response.");
	return 1;
}

CMD:accept(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /accept [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Carry, Taco, Burrito, House, Death, Garage, Business, Vest, Vehicle, Faction, Gang, Ticket, Live");
		SCM(playerid, COLOR_WHITE, "Available options: Item, Frisk, Handshake, Weapon, Lawyer, Dicebet, Invite, yatch, Robbery, Allience");
	}
	if(!strcmp(params, "house", true))
	{
		new
		    offeredby = pData[playerid][pHouseOffer],
		    houseid = pData[playerid][pHouseOffered],
		    price = pData[playerid][pHousePrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a house.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(!IsHouseOwner(offeredby, houseid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player no longer is the owner of this house.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's house.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_HOUSES) >= GetPlayerAssetLimit(playerid, LIMIT_HOUSES))
		{
	    	return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i houses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
		}

	    SetHouseOwner(houseid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's house offer and paid $%i for their house.", GetRPName(offeredby), price);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your house offer and paid $%i for your house.", GetRPName(playerid), price);
	    Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their house (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerIP(offeredby), HouseInfo[houseid][hID], price, GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerIP(playerid));

	    pData[playerid][pHouseOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "carry", true))
	{
	    new offeredby = pData[playerid][pCarryOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers to be carried on.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }

        CarryPlayer(offeredby, playerid);
	    pData[playerid][pCarryOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "burrito", true))
	{
		new //credits = pData[playerid][pCash],
		    offeredby = pData[playerid][pBurritoOffer],
		    amount = pData[playerid][pBurritoOffered],
		    price = pData[playerid][pBurritoPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a burrito.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's burrito.");
	    }

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);
		
		pData[playerid][pBurrito] += amount;
		pData[offeredby][pBurrito] -= amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET burrito = %i WHERE uid = %i", pData[playerid][pBurrito], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET burrito = %i WHERE uid = %i", pData[offeredby][pBurrito], pData[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(offeredby, COLOR_AQUA, "%s has given you %i burrito.", GetRPName(offeredby), amount);
		SM(playerid, COLOR_AQUA, "You have given %i burrito to %s.", amount, GetRPName(playerid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some burrito to %s.", GetRPName(offeredby), GetRPName(playerid));		
	    Log_Write("log_give", "%s (uid: %i) gives %i burrito to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(offeredby), pData[offeredby][pID]);
		
	    pData[playerid][pBurritoOffer] = INVALID_PLAYER_ID;
	}
	
	else if(!strcmp(params, "combo", true))
	{
		new //credits = pData[playerid][pCash],
		    offeredby = pData[playerid][pComboOffer],
		    amount = pData[playerid][pComboOffered],
		    price = pData[playerid][pComboPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a combo.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's combo.");
	    }

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);
		
		pData[playerid][pBurrito] += amount;
		pData[offeredby][pBurrito] -= amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET burrito = %i WHERE uid = %i", pData[playerid][pBurrito], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET burrito = %i WHERE uid = %i", pData[offeredby][pBurrito], pData[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
		pData[playerid][pJuice] += amount;
		pData[offeredby][pJuice] -= amount;
	
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET juice = %i WHERE uid = %i", pData[playerid][pJuice], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET juice = %i WHERE uid = %i", pData[offeredby][pJuice], pData[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);
		
		pData[playerid][pTaco] += amount;
		pData[offeredby][pTaco] -= amount;
	
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET taco = %i WHERE uid = %i", pData[playerid][pTaco], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET taco = %i WHERE uid = %i", pData[offeredby][pTaco], pData[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(offeredby, COLOR_AQUA, "%s has given you %i combo.", GetRPName(offeredby), amount);
		SM(playerid, COLOR_AQUA, "You have given %i combo to %s.", amount, GetRPName(playerid));

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some combo to %s.", GetRPName(offeredby), GetRPName(playerid));
	    Log_Write("log_give", "%s (uid: %i) gives %i combo to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(offeredby), pData[offeredby][pID]);
		
	    pData[playerid][pComboOffer] = INVALID_PLAYER_ID;
	}
	
	else if(!strcmp(params, "coke", true))
	{
		new //credits = pData[playerid][pCash],
		    offeredby = pData[playerid][pJuiceOffer],
		    amount = pData[playerid][pJuiceOffered],
		    price = pData[playerid][pJuicePrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a coke.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's coke.");
	    }

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

		pData[playerid][pJuice] += amount;
		pData[offeredby][pJuice] -= amount;
	
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET juice = %i WHERE uid = %i", pData[playerid][pJuice], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET juice = %i WHERE uid = %i", pData[offeredby][pJuice], pData[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);
	
		SM(offeredby, COLOR_AQUA, "%s has given you %i coke.", GetRPName(offeredby), amount);
		SM(playerid, COLOR_AQUA, "You have given %i coke to %s.", amount, GetRPName(playerid));
	
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some coke to %s.", GetRPName(offeredby), GetRPName(playerid));
		Log_Write("log_give", "%s (uid: %i) gives %i coke to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(offeredby), pData[offeredby][pID]);
	
	    pData[playerid][pJuiceOffer] = INVALID_PLAYER_ID;
	}

	else if(!strcmp(params, "taco", true))
	{
		new //credits = pData[playerid][pCash],
		    offeredby = pData[playerid][pTacoOffer],
		    amount = pData[playerid][pTacoOffered],
		    price = pData[playerid][pTacoPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a taco.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's taco.");
	    }

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

		pData[playerid][pTaco] += amount;
		pData[offeredby][pTaco] -= amount;
	
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET taco = %i WHERE uid = %i", pData[playerid][pTaco], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET taco = %i WHERE uid = %i", pData[offeredby][pTaco], pData[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);
	
		SM(offeredby, COLOR_AQUA, "%s has given you %i taco.", GetRPName(offeredby), amount);
		SM(playerid, COLOR_AQUA, "You have given %i taco to %s.", amount, GetRPName(playerid));
	
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s gives some taco to %s.", GetRPName(offeredby), GetRPName(playerid));		
		Log_Write("log_give", "%s (uid: %i) gives %i taco to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(offeredby), pData[offeredby][pID]);
	
	    pData[playerid][pTacoOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "death", true))
	{
		new count;
		new Float:health;
		GetPlayerHealth(playerid, health);
  		foreach(new i : Player)
  		{
        	if(GetFactionType(i) == FACTION_MEDIC && pData[i][pDuty] == 1)
  			{
   				count++;
  			}
		}
		
   	 	if(count > 0)
    	{
        	return SCM(playerid, COLOR_GREY2, "Theres an online medic at the moment, please wait for them to respond");
     	}
	    if(IsPlayerConnected(pData[playerid][pAcceptedEMS]) && !pData[pData[playerid][pAcceptedEMS]][pAFK])
		{
			return SCM(playerid, COLOR_SYNTAX, "There is a medic online and on the way to rescue you.");
		}
 		if(pData[playerid][pDeathCooldown] > 0)
		{
	    	return SM(playerid, COLOR_SYNTAX, "You need to wait %i more seconds before you can give up.", pData[playerid][pDeathCooldown]);
		}
	    if(!pData[playerid][pInjured])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not injured and can't accept your death.");
	    }
	    SCM(playerid, COLOR_SYNTAX, "You have given up and accepted your fate.");
	    SetPlayerHealth(playerid, -300);
	    //DamagePlayer(playerid, 300, playerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
	}
	else if(!strcmp(params, "marriage", true))
	{
		new id, offeredby = pData[playerid][pMarriageOffer];
	    if((id = GetInsideBusiness(playerid)) == -1 || BusinessInfo[id][bType] != BUSINESS_RESTAURANT)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at a restaurant to commence a wedding.");
		}
		if(pData[playerid][pCash] < 750 || pData[offeredby][pCash] < 750)
		{
			return SCM(playerid, COLOR_SYNTAX, "You both need to have $750 in hand to commence a wedding.");
		}
		if(!IsPlayerConnected(offeredby) || !IsPlayerInRangeOfPlayer(playerid, offeredby, 15.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You aren't in range of anyone who has offered to marry you.");
		}

		GivePlayerCash(playerid, -750);
		GivePlayerCash(offeredby, -750);
		BusinessInfo[id][bCash] += 750;

		SMA(SERVER_COLOR, "%s and %s have just tied the knott! Congratulations to them on getting married.", GetRPName(offeredby), GetRPName(playerid));

		pData[playerid][pMarriedTo] = pData[offeredby][pID];
		pData[offeredby][pMarriedTo] = pData[playerid][pID];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", pData[playerid][pMarriedTo], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", pData[offeredby][pMarriedTo], pData[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(pData[playerid][pMarriedName], GetPlayerNameEx(offeredby), MAX_PLAYER_NAME);
		strcpy(pData[offeredby][pMarriedName], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);

		pData[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "divorce", true))
	{
		new offeredby = pData[playerid][pMarriageOffer];
		if(!IsPlayerConnected(offeredby) || !IsPlayerInRangeOfPlayer(playerid, offeredby, 15.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You aren't in range of anyone who has offered to divorce you.");
		}
		if(pData[playerid][pMarriedTo] == -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You aren't even married ya naab.");
		}
		if(pData[playerid][pMarriedTo] != pData[offeredby][pID])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That isn't the person you're married to.");
		}

		pData[playerid][pMarriedTo] = -1;
		pData[offeredby][pMarriedTo] = -1;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i", pData[offeredby][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(pData[playerid][pMarriedName], "Nobody", MAX_PLAYER_NAME);
		strcpy(pData[offeredby][pMarriedName], "Nobody", MAX_PLAYER_NAME);

		pData[playerid][pMarriageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "alliance", true))
	{
	    new offeredby = pData[playerid][pAllianceOffer], color, color2;

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't been offered an alliance.");
	    }
		if(offeredby == playerid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't accept offers from yourself.");
		}

		new gangid = pData[playerid][pGang], allyid = pData[offeredby][pGang];

	    SM(offeredby, COLOR_AQUA, "%s has accepted your offer to form a gang alliance.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "You've accepted the offer from %s to form a gang alliance.", GetRPName(offeredby));

		GangInfo[gangid][gAlliance] = allyid;
		GangInfo[allyid][gAlliance] = gangid;
		pData[playerid][pAllianceOffer] = INVALID_PLAYER_ID;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", allyid, gangid);
   		mysql_tquery(connectionID, queryBuffer);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", gangid, allyid);
		mysql_tquery(connectionID, queryBuffer);

		if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
		    color = GangInfo[gangid][gColor];
		}

		if(GangInfo[allyid][gColor] == -1 || GangInfo[allyid][gColor] == -256)
		{
		    color2 = 0xC8C8C8FF;
		}
		else
		{
		    color2 = GangInfo[allyid][gColor];
		}

		SMA(COLOR_GREEN, "Gang News: {%06x}%s"WHITE" has formed an alliance with {%06x}%s", color >>> 8, GangInfo[gangid][gName], color2 >>> 8, GangInfo[allyid][gName]);
	}
	else if(!strcmp(params, "garage", true))
	{
		new
		    offeredby = pData[playerid][pGarageOffer],
		    garageid = pData[playerid][pGarageOffered],
		    price = pData[playerid][pGaragePrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a garage.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(!IsGarageOwner(offeredby, garageid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player no longer is the owner of this garage.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's garage.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_GARAGES) >= GetPlayerAssetLimit(playerid, LIMIT_GARAGES))
		{
		    return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i garages. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES));
		}

	    SetGarageOwner(garageid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's garage offer and paid $%i for their garage.", GetRPName(offeredby), price);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your garage offer and paid $%i for your garage.", GetRPName(playerid), price);
        Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s garage (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerIP(offeredby), garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], price, GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerIP(playerid));

	    pData[playerid][pGarageOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "yacht", true))
	{
	    new offeredby = pData[playerid][pRobberyOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any invitations to a yacht heist.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(YachtInfo[yRobbers][0] != offeredby || YachtInfo[yStarted])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The robbery invite is no longer available.");
		}
		if(GetYachtRobbers() >= MAX_YACHT_ROBBER)
		{
	    	return SM(playerid, COLOR_SYNTAX, "This yacht robbery has reached its limit of %i robbers.", MAX_YACHT_ROBBER);
 		}

		AddToYachtRobbery(playerid);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's yacht robbery invitation.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your yacht robbery invitation.", GetRPName(playerid));

	    pData[playerid][pRobberyOffer] = INVALID_PLAYER_ID;
	}	
	else if(!strcmp(params, "business", true))
	{
		new
		    offeredby = pData[playerid][pBizOffer],
		    businessid = pData[playerid][pBizOffered],
		    price = pData[playerid][pBizPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a business.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(!IsBusinessOwner(offeredby, businessid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player no longer is the owner of this business.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's business.");
	    }
	    if(GetPlayerAssetCount(playerid, LIMIT_BUSINESSES) >= GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES))
		{
	    	return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i businesses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES));
		}

	    SetBusinessOwner(businessid, playerid);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's business offer and paid $%i for their %s.", GetRPName(offeredby), price, bizInteriors[BusinessInfo[businessid][bType]][intType]);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your business offer and paid $%i for your %s.", GetRPName(playerid), price, bizInteriors[BusinessInfo[businessid][bType]][intType]);
        Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s business (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerIP(offeredby), bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], price, GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerIP(playerid));

	    pData[playerid][pBizOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "vest", true))
	{
		new
		    offeredby = pData[playerid][pVestOffer],
		    price = pData[playerid][pVestPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a vest.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy the vest.");
	    }
	    new Float:armor = 50.0;

		SetScriptArmour(playerid, armor);
		GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's vest and paid $%i for %.1f armor points.", GetRPName(offeredby), price, armor);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your vest offer and paid $%i for %.1f armor points.", GetRPName(playerid), price, armor);

	    TurfTaxCheck(offeredby, price);

	    pData[playerid][pVestOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "vehicle", true))
	{
		new
		    offeredby = pData[playerid][pCarOffer],
		    vehicleid = pData[playerid][pCarOffered],
		    price = pData[playerid][pcARPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a vehicle.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(!IsVehicleOwner(offeredby, vehicleid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player no longer is the owner of this vehicle.");
	    }
  	    if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)
    	{
   			return SendClientMessageEx(playerid, COLOR_GREY, "You can't have more than %i vehicles spawned at a time.", MAX_SPAWNED_VEHICLES);
    	}
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy this player's vehicle.");
	    }

	    GetPlayerName(playerid, VehicleInfo[vehicleid][vOwner], MAX_PLAYER_NAME);
	    VehicleInfo[vehicleid][vOwnerID] = pData[playerid][pID];

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET ownerid = %i, owner = '%s' WHERE id = %i", VehicleInfo[vehicleid][vOwnerID], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    GivePlayerCash(offeredby, price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's vehicle offer and paid $%i for their %s.", GetRPName(offeredby), price, GetVehicleName(vehicleid));
	    SM(offeredby, COLOR_AQUA, "** %s accepted your vehicle offer and paid $%i for your %s.", GetRPName(playerid), price, GetVehicleName(vehicleid));
        Log_Write("log_property", "%s (uid: %i) (IP: %s) sold their %s (id: %i) for $%i to %s (uid: %i) (IP: %s)", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerIP(offeredby), GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], price, GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerIP(playerid));

	    pData[playerid][pCarOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "faction", true))
	{
		new
		    offeredby = pData[playerid][pFactionOffer],
		    factionid = pData[playerid][pFactionOffered];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any invites to a faction.");
	    }
	    if(pData[offeredby][pFaction] != factionid || pData[offeredby][pFactionRank] < FactionInfo[factionid][fRankCount] - 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is no longer allowed to invite you.");
	    }

	    pData[playerid][pFaction] = factionid;
	    pData[playerid][pFactionRank] = 0;
	    pData[playerid][pDivision] = -1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = %i, factionrank = 0, division = -1 WHERE uid = %i", factionid, pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's faction offer to join "SVRCLR"%s{CCFFFF}.", GetRPName(offeredby), FactionInfo[factionid][fName]);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your faction offer and is now apart of your faction.", GetRPName(playerid));

		new szString[528];
		format(szString, sizeof(szString), "%s (uid: %i) has invited %s (uid: %i) to %s (id: %i).",  GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerNameEx(playerid), pData[playerid][pID], FactionInfo[factionid][fName], factionid);
		SendDiscordMessage(19, szString);
		
		Log_Write("log_faction", "%s (uid: %i) has invited %s (uid: %i) to %s (id: %i).", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerNameEx(playerid), pData[playerid][pID], FactionInfo[factionid][fName], factionid);
	    pData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "gang", true))
	{
		new
		    offeredby = pData[playerid][pGangOffer],
		    gangid = pData[playerid][pGangOffered];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any invites to a gang.");
	    }
	    if(pData[offeredby][pGang] != gangid || pData[offeredby][pGangRank] < 5)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is no longer allowed to invite you.");
	    }

	    pData[playerid][pGang] = gangid;
	    pData[playerid][pGangRank] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = %i, gangrank = 0 WHERE uid = %i", gangid, pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's gang offer to join "SVRCLR"%s{CCFFFF}.", GetRPName(offeredby), GangInfo[gangid][gName]);
	    SM(offeredby, COLOR_AQUA, "** %s accepted your gang offer and is now apart of your gang.", GetRPName(playerid));
		

		
		Log_Write("log_gang", "%s (uid: %i) has invited %s (uid: %i) to %s (id: %i).", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[gangid][gName], gangid);
	    pData[playerid][pGangOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "frisk", true))
	{
	    new offeredby = pData[playerid][pFriskOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers to be frisked.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }

	    FriskPlayer(offeredby, playerid);
	    pData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "loc", true))
	{
	    new offeredby = pData[playerid][pLocOffer];
		new  Float:x, Float:y, Float:z;
		if(pData[playerid][pPhone] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "You don't have a cell phone.");
			return 1;
		}
	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers to be accept.");
	    }
		if(lumberman{playerid} == true)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			if(IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);
			SetPlayerSkin(playerid, pData[playerid][pSkin]);
			Lumber1[playerid] = 0;
			lumberman{playerid} = false;
			Lumbered[playerid] = 0;
			Lumberedx[playerid] = 0;
		}
		DisablePlayerCheckpoint(playerid);
		CancelActiveCheckpoint(playerid);
		pData[playerid][pRobCash] = 0;
		PlayerHasCrate[playerid] = 0;
		SM(playerid, COLOR_AQUA, "** You have accepted %s's Shared Location.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your Shared Location.", GetRPName(playerid));
		GetPlayerPos(offeredby, x, y, z);
		SetPlayerCheckpoint(playerid, x, y, z, 3.0);

	}
	else if(!strcmp(params, "ticket", true))
	{
		new
		    offeredby = pData[playerid][pTicketOffer],
		    price = pData[playerid][pTicketPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a ticket.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to pay this ticket.");
	    }

	    //GivePlayerCash(offeredby, price);

	    AddToTaxVault(price);
	    GivePlayerCash(playerid, -price);

	    SM(playerid, COLOR_AQUA, "** You have paid the $%i ticket written by %s.", price, GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has paid the $%i ticket which was written to them.", GetRPName(playerid), price);
        Log_Write("log_faction", "%s (uid: %i) has given %s (uid: %i) a ticket for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerNameEx(playerid), pData[playerid][pID], price);

	    pData[playerid][pTicketOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "live", true))
	{
	    new offeredby = pData[playerid][pLiveOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a live interview.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(pData[playerid][pCallLine] != INVALID_PLAYER_ID || pData[offeredby][pCallLine] != INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You or the offerer can't be on a phone call during a live interview.");
	    }

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's live interview offer. Speak in IC chat to begin the interview!", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your live interview offer. Speak in IC chat to begin the interview!", GetRPName(playerid));
        Log_Write("log_faction", "%s (uid: %i) has started a live interview with %s (uid: %i)", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetPlayerNameEx(playerid), pData[playerid][pID]);

		pData[playerid][pLiveBroadcast] = offeredby;
		pData[offeredby][pLiveBroadcast] = playerid;
  		pData[playerid][pLiveOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "handshake", true))
	{
	    new offeredby = pData[playerid][pShakeOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a handshake.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }

	    ClearAnimations(playerid);
		ClearAnimations(offeredby);

		SetPlayerToFacePlayer(playerid, offeredby);
		SetPlayerToFacePlayer(offeredby, playerid);

		switch(pData[playerid][pShakeType])
		{
		    case 1:
		    {
				ApplyAnimation(playerid,  "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 2:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 3:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 4:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 5:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(offeredby, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 6:
			{
			    ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
			    ApplyAnimation(offeredby, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
			}
	    }

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's handshake offer.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your handshake offer.", GetRPName(playerid));

  		pData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "item", true))
	{
		new
		    offeredby = pData[playerid][pSellOffer],
		    type = pData[playerid][pSellType],
		    amount = pData[playerid][pSellExtra],
		    price = pData[playerid][pSellPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for an item.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to accept the offer.");
	    }

	    switch(type)
	    {
	        case ITEM_WEAPON:
			{
			    new weaponid = pData[playerid][pSellExtra];

	            if(!PlayerHasWeapon(offeredby, weaponid))
	            {
	                return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
	            }

	            GivePlayerCash(playerid, -price);
	            GivePlayerCash(offeredby, price);

	            GiveWeapon(playerid, weaponid);
	            RemovePlayerWeapon(offeredby, weaponid);

				SM(playerid, COLOR_AQUA, "** You have purchased %s's %s for $%i.", GetRPName(offeredby), GetWeaponNameEx(weaponid), price);
				SM(offeredby, COLOR_AQUA, "** %s has purchased your %s for $%i.", GetRPName(playerid), GetWeaponNameEx(weaponid), price);
				Log_Write("log_give", "%s (uid: %i) has sold their %s to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(playerid), pData[playerid][pID], price);

				TurfTaxCheck(offeredby, price);

				pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_MATERIALS:
			{
			    if(pData[offeredby][pMaterials] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(pData[playerid][pMaterials] + amount > GetPlayerCapacity(CAPACITY_MATERIALS))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pMaterials] += amount;
			    pData[offeredby][pMaterials] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[offeredby][pMaterials], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i materials from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i materials for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i materials to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

                TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_BACKPACK:
			{
			    new size[6];
			    if(pData[offeredby][pBackpack] != amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(pData[playerid][bpWearing])
			    {
			        return SCM(playerid, COLOR_SYNTAX, "You cannot accept this offer as you are still wearing your backpack.");
				}
				if(pData[offeredby][bpWearing])
				{
				    return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is still wearing their backpack.");
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pBackpack] = amount;
				SavePlayerVariables(playerid);
				ResetBackpack(offeredby);
				if(amount == 1)
				{
				    format(size, sizeof(size), "small");
				}
				if(amount == 2)
				{
				    format(size, sizeof(size), "medium");
				}
				if(amount == 3)
				{
				    format(size, sizeof(size), "large");
				}
			    SM(playerid, COLOR_AQUA, "** You have purchased a %s backpack from %s for $%i.", size, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %s backpack for $%i.", GetRPName(playerid), size, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i backpack to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], size, GetPlayerNameEx(playerid), pData[playerid][pID], price);

                TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_WEED:
			{
			    if(pData[offeredby][pPot] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(pData[playerid][pPot] + amount > GetPlayerCapacity(CAPACITY_WEED))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pPot] += amount;
			    pData[offeredby][pPot] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[offeredby][pPot], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i grams of pot from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i grams of pot for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of pot to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

                TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_COCAINE:
			{
			    if(pData[offeredby][pCrack] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(pData[playerid][pCrack] + amount > GetPlayerCapacity(CAPACITY_COCAINE))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pCrack] += amount;
			    pData[offeredby][pCrack] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[offeredby][pCrack], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i grams of Crack from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i grams of Crack for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of Crack to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_METH:
			{
			    if(pData[offeredby][pMeth] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(pData[playerid][pMeth] + amount > GetPlayerCapacity(CAPACITY_METH))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pMeth] += amount;
			    pData[offeredby][pMeth] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[offeredby][pMeth], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i grams of meth from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i grams of meth for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of meth to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_PAINKILLERS:
			{
			    if(pData[offeredby][pPainkillers] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
				if(pData[playerid][pPainkillers] + amount > GetPlayerCapacity(CAPACITY_PAINKILLERS))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPainkillers], GetPlayerCapacity(CAPACITY_PAINKILLERS));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pPainkillers] += amount;
			    pData[offeredby][pPainkillers] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[offeredby][pPainkillers], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i painkillers from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i painkillers for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i painkillers to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
			case ITEM_SEEDS:
			{
			    if(pData[offeredby][pSeeds] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(pData[playerid][pSeeds] + amount > GetPlayerCapacity(CAPACITY_SEEDS))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i seeds. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pSeeds], GetPlayerCapacity(CAPACITY_SEEDS));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pSeeds] += amount;
			    pData[offeredby][pSeeds] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", pData[playerid][pSeeds], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", pData[offeredby][pSeeds], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i seeds from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i seeds for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i seeds to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
            case ITEM_EPHEDRINE:
			{
			    if(pData[offeredby][pEphedrine] < amount)
			    {
			        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer no longer has that item.");
			    }
			    if(pData[playerid][pEphedrine] + amount > GetPlayerCapacity(CAPACITY_EPHEDRINE))
				{
				    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i ephedrine. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pEphedrine], GetPlayerCapacity(CAPACITY_EPHEDRINE));
				}

			    GivePlayerCash(playerid, -price);
			    GivePlayerCash(offeredby, price);

			    pData[playerid][pEphedrine] += amount;
			    pData[offeredby][pEphedrine] -= amount;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", pData[playerid][pEphedrine], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", pData[offeredby][pEphedrine], pData[offeredby][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have purchased %i grams of ephedrine from %s for $%i.", amount, GetRPName(offeredby), price);
			    SM(offeredby, COLOR_AQUA, "** %s has purchased your %i grams of ephedrine for $%i.", GetRPName(playerid), amount, price);
			    Log_Write("log_give", "%s (uid: %i) has sold their %i grams of ephedrine to %s (uid: %i) for $%i.", GetPlayerNameEx(offeredby), pData[offeredby][pID], amount, GetPlayerNameEx(playerid), pData[playerid][pID], price);

			    TurfTaxCheck(offeredby, price);

			    pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
			}
		}
	}
	else if(!strcmp(params, "weapon", true))
	{
	    if(pData[playerid][pSellOffer] == INVALID_PLAYER_ID || pData[playerid][pSellType] != ITEM_SELLGUN)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for a weapon.");
	    }
	    if(pData[playerid][pCash] < pData[playerid][pSellPrice])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase the weapon.");
	    }

	    SellWeapon(pData[playerid][pSellOffer], playerid, pData[playerid][pSellExtra], pData[playerid][pSellPrice]);
		pData[playerid][pSellOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "lawyer", true))
	{
	    new
			offeredby = pData[playerid][pDefendOffer],
			price = pData[playerid][pDefendPrice];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers from a lawyer.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(pData[playerid][pCash] < price)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to accept the offer.");
	    }
	    if(!pData[playerid][pWantedLevel])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are no longer wanted. You can't accept this offer anymore.");
	    }

		pData[playerid][pWantedLevel]--;

	    GivePlayerCash(playerid, -price);
	    GivePlayerCash(offeredby, price);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = wantedlevel - 1 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's offer to reduce your wanted level for $%i.", GetRPName(offeredby), price);
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your offer to reduce their wanted level for $%i.", GetRPName(playerid), price);

		IncreaseJobSkill(offeredby, JOB_LAWYER);
	    pData[playerid][pDefendOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "dicebet", true))
	{
	    new
			offeredby = pData[playerid][pDiceOffer],
			amount = pData[playerid][pDiceBet];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for dice betting.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(pData[playerid][pCash] < amount)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't afford to accept this bet.");
	    }
	    if(pData[offeredby][pCash] < amount)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player can't afford to accept this bet.");
	    }

		new
			rand[2],
			offeredbyName[MAX_PLAYER_NAME];

		// Get the name of the offeredby player
		GetPlayerName(offeredby, offeredbyName, sizeof(offeredbyName));
	
		// Check if the offeredby name is exactly "Cody_D._Banks"
		if(!strcmp(offeredbyName, "Ryle_Carillo", false)) // false ensures exact case-sensitive match
		{
			// Set dice rolls to 5 or 6
			rand[0] = random(2) + 5; // Generates either 5 or 6 for the first player
			rand[1] = random(6) + 1; // Generates either 5 or 6 for the second player
		}
		else
		{
			// Normal dice rolls (1 to 6)
			rand[0] = random(6) + 1;
			rand[1] = random(6) + 1;
		}
		SendProximityMessage(offeredby, 20.0, COLOR_WHITE, "** %s rolls a dice which lands on the number %i.", GetRPName(offeredby), rand[0]);
		SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s rolls a dice which lands on the number %i.", GetRPName(playerid), rand[1]);

		if(rand[0] > rand[1])
		{
		    GivePlayerCash(offeredby, amount);
		    GivePlayerCash(playerid, -amount);

		    SM(offeredby, COLOR_AQUA, "** You have won $%i from your dice bet with %s.", amount, GetRPName(playerid));
		    SM(playerid, COLOR_RED, "** You have lost $%i from your dice bet with %s.", amount, GetRPName(offeredby));

			if(amount > 10000 && !strcmp(GetPlayerIP(offeredby), GetPlayerIP(playerid)))
			{
				SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" (IP: %s) won a $%i dice bet against %s (IP: %s).", GetRPName(offeredby), GetPlayerIP(offeredby), amount, GetRPName(playerid), GetPlayerIP(playerid));
			}
		}
		else if(rand[0] == rand[1])
		{
			SM(offeredby, COLOR_AQUA, "** The bet of $%i was a tie. You kept your money as a result!", amount);
		    SM(playerid, COLOR_AQUA, "** The bet of $%i was a tie. You kept your money as a result!", amount);
		}
		else
		{
		    GivePlayerCash(offeredby, -amount);
		    GivePlayerCash(playerid, amount);

		    SM(playerid, COLOR_AQUA, "** You have won $%i from your dice bet with %s.", amount, GetRPName(offeredby));
		    SM(offeredby, COLOR_RED, "** You have lost $%i from your dice bet with %s.", amount, GetRPName(playerid));

			if(amount > 10000 && !strcmp(GetPlayerIP(offeredby), GetPlayerIP(playerid)))
			{
				SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" (IP: %s) won a $%i dice bet against %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), amount, GetRPName(offeredby), GetPlayerIP(offeredby));
			}
		}

	    pData[playerid][pDiceOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "dicebetxx", true))
	{
		new
			offeredby = pData[playerid][pDiceOffer],
			amount = pData[playerid][pDiceBet];
	
		if(offeredby == INVALID_PLAYER_ID)
		{
			return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for dice betting.");
		}
		if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
			return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
		}
		if(pData[playerid][pCash] < amount)
		{
			return SCM(playerid, COLOR_SYNTAX, "You can't afford to accept this bet.");
		}
		if(pData[offeredby][pCash] < amount)
		{
			return SCM(playerid, COLOR_SYNTAX, "That player can't afford to accept this bet.");
		}
	
		new
			rand[2];
	
		// Generate random numbers limited to 5 or 6
		rand[0] = random(6) + 1; // Generates either 5 or 6 for the first player
		rand[1] = random(2) + 5; // Generates either 5 or 6 for the second player
	
		SendProximityMessage(offeredby, 20.0, COLOR_WHITE, "** %s rolls a dice which lands on the number %i.", GetRPName(offeredby), rand[0]);
		SendProximityMessage(playerid, 20.0, COLOR_WHITE, "** %s rolls a dice which lands on the number %i.", GetRPName(playerid), rand[1]);
	
		if(rand[0] > rand[1])
		{
			GivePlayerCash(offeredby, amount);
			GivePlayerCash(playerid, -amount);
	
			SM(offeredby, COLOR_AQUA, "** You have won $%i from your dice bet with %s.", amount, GetRPName(playerid));
			SM(playerid, COLOR_RED, "** You have lost $%i from your dice bet with %s.", amount, GetRPName(offeredby));
	
			if(amount > 10000 && !strcmp(GetPlayerIP(offeredby), GetPlayerIP(playerid)))
			{
				SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" (IP: %s) won a $%i dice bet against %s (IP: %s).", GetRPName(offeredby), GetPlayerIP(offeredby), amount, GetRPName(playerid), GetPlayerIP(playerid));
			}
		}
		else if(rand[0] == rand[1])
		{
			SM(offeredby, COLOR_AQUA, "** The bet of $%i was a tie. You kept your money as a result!", amount);
			SM(playerid, COLOR_AQUA, "** The bet of $%i was a tie. You kept your money as a result!", amount);
		}
		else
		{
			GivePlayerCash(offeredby, -amount);
			GivePlayerCash(playerid, amount);
	
			SM(playerid, COLOR_AQUA, "** You have won $%i from your dice bet with %s.", amount, GetRPName(offeredby));
			SM(offeredby, COLOR_RED, "** You have lost $%i from your dice bet with %s.", amount, GetRPName(playerid));
	
			if(amount > 10000 && !strcmp(GetPlayerIP(offeredby), GetPlayerIP(playerid)))
			{
				SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" (IP: %s) won a $%i dice bet against %s (IP: %s).", GetRPName(playerid), GetPlayerIP(playerid), amount, GetRPName(offeredby), GetPlayerIP(offeredby));
			}
		}
	
		pData[playerid][pDiceOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "boxing", true))
	{
		new offeredby1 = pData[playerid][pDiceOffer1];
			
		if(offeredby1 == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any offers for boxing fight.");
	    }	
		if(!IsPlayerInRangeOfPlayer(playerid, offeredby1, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
		GivePlayerCash(offeredby1, -10000);
		GivePlayerCash(playerid, -10000);
		
		
		SetPlayerHealth(offeredby1, 100);
		SetPlayerArmour(offeredby1, 0);
		
		SetPlayerHealth(playerid, 100);
		SetPlayerArmour(playerid, 0);
		
		SetPlayerPos(offeredby1, 1463.2899,1796.0861,1016.5900);
		SetPlayerPos(playerid, 1467.8334,1795.5215,1016.5900);
		
		SetPlayerInterior(offeredby1, 1);
		SetPlayerInterior(playerid, 1);
		
		SetPlayerVirtualWorld(offeredby1, 1);
		SetPlayerVirtualWorld(playerid, 1);
		
		
		SavePlayerVariables(offeredby1);
		SavePlayerVariables(playerid);
		
		ResetPlayerWeapons(offeredby1);
		ResetPlayerWeapons(playerid);	
		//testde
		GameTextForPlayer(offeredby1, "~r~Boxing time!", 3000, 3);
		GameTextForPlayer(playerid, "~r~Boxing time!", 3000, 3);
		
		pData[playerid][pDueling1] = offeredby1;
		pData[offeredby1][pDueling1] = playerid;
	}
	else if(!strcmp(params, "invite", true))
	{
	    new
			offeredby = pData[playerid][pInviteOffer],
			houseid = pData[playerid][pInviteHouse];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any invitations to a house.");
	    }

		pData[playerid][pCP] = CHECKPOINT_HOUSE;
		SetPlayerCheckpoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 3.0);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's invitation to their house.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your invitation to your house.", GetRPName(playerid));

	    pData[playerid][pInviteOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "rob", true))
	{
	    new
			offeredby = pData[playerid][pSendRob],
			robcash = pData[playerid][pCash];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_GREY2, "You haven't received any offers for rob.");
	    }
		GivePlayerCash(offeredby, robcash);
		GivePlayerCash(playerid, -robcash);
		pData[offeredby][pCrimes]++;

		SM(playerid, COLOR_AQUA, "** You have accepted %s's rob.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your rob.", GetRPName(playerid));
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s successfully robbed %s $%i", GetRPName(offeredby),GetRPName(playerid), robcash);
	    pData[playerid][pSendRob] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "robbery", true))
	{
	    new offeredby = pData[playerid][pRobberyOffer];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any invitations to a bank heist.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(RobberyInfo[rRobbers][0] != offeredby || RobberyInfo[rStarted])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The robbery invite is no longer available.");
		}
		if(GetBankRobbers() >= MAX_BANK_ROBBERS)
		{
	    	return SM(playerid, COLOR_SYNTAX, "This bank robbery has reached its limit of %i robbers.", MAX_BANK_ROBBERS);
 		}

		AddToBankRobbery(playerid);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's bank robbery invitation.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your bank robbery invitation.", GetRPName(playerid));

	    pData[playerid][pRobberyOffer] = INVALID_PLAYER_ID;
	}
	else if(!strcmp(params, "storerob", true))
	{
	    new offeredby = pData[playerid][pRobberyOffer1];

	    if(offeredby == INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You haven't received any invitations to a store heist.");
	    }
	    if(!IsPlayerInRangeOfPlayer(playerid, offeredby, 5.0))
		{
	        return SCM(playerid, COLOR_SYNTAX, "The player who initiated the offer is out of range.");
	    }
	    if(RobberyInfo1[rRobbers1][0] != offeredby || RobberyInfo1[rStarted1])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The robbery invite is no longer available.");
		}
		if(GetBizRobbers() >= MAX_BIZ_ROBBERS)
		{
	    	return SM(playerid, COLOR_SYNTAX, "This store robbery has reached its limit of %i robbers.", MAX_BIZ_ROBBERS);
 		}

		AddToBizRobbery(playerid);

	    SM(playerid, COLOR_AQUA, "** You have accepted %s's store robbery invitation.", GetRPName(offeredby));
	    SM(offeredby, COLOR_AQUA, "** %s has accepted your store robbery invitation.", GetRPName(playerid));

	    pData[playerid][pRobberyOffer1] = INVALID_PLAYER_ID;
	}
	return 1;
}

CMD:e(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /e [executive chat]");
	}
	if(pData[playerid][pToggleAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the executive chat as you have admin chats toggled.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pAdmin] > 5 && !pData[i][pToggleAdmin])
	    {
			SM(i, 0xA077BFFF, "** [%s] %s: %s **", GetAdminRank(playerid), GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:ha(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ha [head admin chat]");
	}
	if(pData[playerid][pToggleAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the head administrator chat as you have admin chats toggled.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pAdmin] > 4 && !pData[i][pToggleAdmin])
	    {
			SM(i, 0x5C80FFFF, "** [%s] %s: %s **", GetAdminRank(playerid), GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:a(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /a [admin chat]");
	}
	if(!enabledAdmin && pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The admin channel is disabled by Stanley.");
	}
	if(pData[playerid][pToggleAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the admin chat as you have it toggled.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pAdmin] > 0 && !pData[i][pToggleAdmin])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SM(i, COLOR_TEAL, "** "TEAL"%s"SVRCLR" %s {"TEAL"%s"WHITE": %.*s... **", GetAdminDivision(playerid),GetAdminRank(playerid), pData[playerid][pAdminName], MAX_SPLIT_LENGTH, params);
	            SM(i, COLOR_TEAL, "** "TEAL"%s"SVRCLR" %s "TEAL"%s"WHITE": ...%s **", GetAdminDivision(playerid),GetAdminRank(playerid), pData[playerid][pAdminName], params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SM(i, COLOR_TEAL, "** "TEAL"%s"SVRCLR" %s "TEAL"%s"WHITE": %s **", GetAdminDivision(playerid),GetAdminRank(playerid), pData[playerid][pAdminName], params);
			}
		}
	}

	return 1;
}

CMD:settitle(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, option[14], param[128];
	if(pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[14]S()[128]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /settitle [playerid] [option]");
	    SCM(playerid, COLOR_GREY2, "List of options: Name, Color");
		return 1;
	}
	if(!strcmp(option, "name", true))
	{
	    if(isnull(param) || strlen(params) > 32)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /settitle [playerid] [name] [text ('none' to reset)]");
		}

		strcpy(pData[targetid][pCustomTitle], param, 64);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET customtitle = '%e' WHERE uid = %i", param, pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the customtitle of %s to '%s'.", GetRPName(playerid), GetRPName(targetid), param);
	}
    else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /settitle [playerid] [color] [0xRRGGBBAA]");
		}

		pData[targetid][pCustomTColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET customcolor = %i WHERE uid = %i", pData[targetid][pCustomTColor], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the {%06x}color{FF6347} of %s's title.", GetRPName(playerid), color >>> 8, GetRPName(targetid));
	}
	return 1;
}

CMD:ah(playerid, params[]) return callcmd::adminhelp(playerid, params);
CMD:ahelp(playerid, params[]) return callcmd::adminhelp(playerid, params);
CMD:adminhelp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new string[3500];
	if(!pData[playerid][pAdmin] && !IsPlayerAdmin(playerid) && !pData[playerid][pFormerAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(pData[playerid][pAdmin] >= 1)
	{
		strcat(string, "Applcation System:"WHITE"  /reviewapp, /listapp, /acceptapp, /denyapp.\n");
		strcat(string, "Applcation System:"WHITE"  /ra, /la, /aa, /da.\n");

		strcat(string, ""TEAL"Trial Admin:"WHITE" /goto /sendto /oprison /prison /gethere, /a, /respawncars, /skick, /sban, /sjail, /pinfo, /spec, /reports, /admins, /flag, /removeflag\n");
		strcat(string, ""TEAL"Trial Admin:"WHITE" /ocheck, /oflag, /listflagged /(am)egaphone /listflags, /check, /dm\n\n");
	}
	if(pData[playerid][pAdmin] >= 2)
	{
		strcat(string, "[JA]"WHITE" /veh, /masked, /cureleg, /aduty, /adminname, /kick, /ban, /warn, /slap, /getip, /iplookup, /ogetip, /setint, /setvw\n");
		strcat(string, "[JA]"WHITE" /setskin, /revive, /heject, /goto, /gethere, /gotocar, /getcar, /gotocoords, /gotoint, /listen, /jetpack, /sendto\n");
		strcat(string, "[JA]"WHITE" /freeze, /unfreeze, /rwarn, /runmute, /nmute, /admute, /hmute, /gmute, /listguns, /disarm, /c, /listenpm\n");
		strcat(string, "[JA]"WHITE" /prisonic, /listjailed, /lastactive, /checkinv, /afklist, /acceptname, /denyname, /namechanges, /nrn\n");
		strcat(string, "[JA]"WHITE" /prisoninfo, /relog, /rtnc, /sth, /nro, /nao, /nor, /post, /contracts, /denyhit, /mark, /gotomark\n\n");
	}
	if(pData[playerid][pAdmin] >= 3)
	{
		strcat(string, "[GA]"WHITE" /prison, /givefirework, /togam, /freezenear, /unfreezenear, /sprison, /oprison, /release, /fine, /pfine, /ofine, /sethp, /setarmor\n");
		strcat(string, "[GA]"WHITE", /destroyveh, /broadcast, /fixveh, /clearchat, /healrange, /shots, /damages\n");
		strcat(string, "[GA]"WHITE" /resetadtimer, /baninfo, /banhistory, /kills, /togooc, (/togn)ewbie, /togglobal, /listpvehs, /despawnpveh\n");
		strcat(string, "[GA]"WHITE" /aclearwanted, /removedm, /savevehicle, /editvehicle, /removevehicle, /refillcars, /refilldrug, /duel\n\n");
		strcat(string, "[GA]"WHITE" /startchat, /invitechat, /kickchat, /endchat\n");
	}
	if(pData[playerid][pAdmin] >= 4)
	{
		strcat(string, "[SA]"WHITE" /givegun, /setname, /startlotto, /permaban, /oban, /unban, /unbanip, /banip, /lockaccount, /unlockaccount\n");
		strcat(string, "[SA]"WHITE" /explode, /event, /gplay, /gplayurl, /gstop, /sethpall, /setarmorall, /settime, /addtoevent\n\n");
	}
	if(pData[playerid][pAdmin] >= 5)
	{
	    strcat(string, "[HA]"WHITE" /aheadshot, /givefirework, /setrobtimer, /setchoptimer, /setvip, /forcepayday, /givebackpack, /clearreports\n");
	    strcat(string, "[HA]"WHITE" /removedonator, /rangeban, /deleteaccount, /previewint, /nearest, /dynamichelp, /setscore, /resetbackpack\n");
	    strcat(string, "[HA]"WHITE" /saveaccounts, /adestroyboombox, /setbanktimer, /resetrobbery, /resetchop, /givepayday, /givedoublexp, /forceweather\n\n");
	}
    if(pData[playerid][pAdmin] >= 6)
	{
	    strcat(string, "[EA]"WHITE" /makehelper, /omakeadmin, /resetrob, /startlottoex, /omakehelper, /setmotd, /forceaduty, /olistadmins\n");
	    strcat(string, "[EA]"WHITE" /olisthelpers, /sellinactive, /changelist, /fixplayerid\n\n");
	}
    if(pData[playerid][pAdmin] >= 7)
	{
	    strcat(string, "[Community Owner]"WHITE" /deleteaccount /forcepayday /setstat /anticheat /doublexp /setstaff /makeadmin /omakeadmin /setformeradmin\n");
	    strcat(string, "[Community Owner]"WHITE" /doublesalary /togpurge, /settitle, /givepveh, /setstat, /givemoney, /givemoneyall, /doublexp, /gmx, /setpassword\n\n");
	    strcat(string, "[Community Owner]"WHITE" /givediamond, /givediamondall\n\n");
	}
	if(pData[playerid][pFactionMod])
	{
	    strcat(string, "Faction Mod: /createfaction, /editfaction, /setfaction, /purgefaction.\n");
	}
	if(pData[playerid][pAdminPersonnel])
	{
	    strcat(string, "Faction Mod: /setstaff, /makehelper, /omakehelper.\n");
	}
	if(pData[playerid][pGangMod])
	{
	    strcat(string, "Gang Mod: /creategang, /editgang, /removegang, /gangstrike, /setgang.\n");
	    strcat(string, "Gang Mod: /createpoint, /editpoint, /removepoint, /createentrance, /removeentrance, /editentrance\n");
	}
	if(pData[playerid][pBanAppealer])
	{
	    strcat(string, "Ban Appealer: /banip, /baninfo, /banhistory, /unbanip, /unban.\n");
	}
 	if(pData[playerid][pEventMod])
	{
	    strcat(string, "Event Mod: /event /addtoevent\n");
 	}
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Admin Commands", string, "Close","");
	return 1;
}

CMD:reports(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Pending Reports:");

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
	    if(ReportInfo[i][rExists] && !ReportInfo[i][rAccepted])
	    {
	        SM(playerid, COLOR_TEAL, "(RID: "WHITE"%i"TEAL") "WHITE"%s[%i]"TEAL" reports: "WHITE"%s", i, GetRPName(ReportInfo[i][rReporter]), ReportInfo[i][rReporter], ReportInfo[i][rText]);
		}
	}

	SCM(playerid, COLOR_TEAL, "** Use /ar [rid] or /tr [rid] to handle these reports.");
	return 1;
}

CMD:rtnc(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new reportid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rtnc [reportid] (Sends to newbie chat)");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report specified is being handled by another admin.");
	}

    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has sent report %i to newbie chat.", GetRPName(playerid), reportid);
	SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "%s has redirected your report to the newbie chat.", GetRPName(playerid));
    SendNewbieChatMessage(ReportInfo[reportid][rReporter], ReportInfo[reportid][rText]);
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:sth(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new reportid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sth [reportid] (Sends to helpers)");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report specified is being handled by another admin.");
	}

    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has sent report %i to helpers.", GetRPName(playerid), reportid);
	SM(ReportInfo[reportid][rReporter], COLOR_YELLOW, "%s has redirected your report to all helpers online.", GetRPName(playerid));

    strcpy(pData[ReportInfo[reportid][rReporter]][pHelpRequest], ReportInfo[reportid][rText], 128);
	SendHelperMessage(COLOR_AQUA, "** Help Request from %s[%i]: %s **", GetRPName(ReportInfo[reportid][rReporter]), ReportInfo[reportid][rReporter], ReportInfo[reportid][rText]);

	pData[playerid][pLastRequest] = gettime();
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:ar(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new reportid, chat;

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "iI(1)", reportid, chat))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ar [reportid] [chat (optional - 0/1)]");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid report ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report specified is being handled by another admin.");
	}
	if(pData[playerid][pActiveReport] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have a report active already. Use /cr to close it.");
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s "TEAL"has accepted report "WHITE"%i"TEAL" from "WHITE"%s.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));

	if(chat)
	{
		SCM(playerid, COLOR_TEAL, "** You can use "WHITE"'/rr'"TEAL" to speak with the reporter and "WHITE"'/cr'"TEAL" to close the report.");
		SM(ReportInfo[reportid][rReporter], COLOR_TEAL, ""WHITE"%s"TEAL" has accepted your report and is now reviewing it.", GetRPName(playerid));
		SCM(ReportInfo[reportid][rReporter], COLOR_TEAL, "You can use "WHITE"'/rr'"TEAL" to reply to the admin handling your report.");

		pData[playerid][pActiveReport] = reportid;
		pData[ReportInfo[reportid][rReporter]][pActiveReport] = reportid;

		ReportInfo[reportid][rHandledBy] = playerid;
		ReportInfo[reportid][rAccepted] = 1;
	}
	else
	{
	    SM(ReportInfo[reportid][rReporter], COLOR_TEAL, ""WHITE"%s"TEAL" has accepted your report and is now reviewing it.", GetRPName(playerid));
	    ReportInfo[reportid][rExists] = 0;
	}

	pData[playerid][pReports]++;
	new fzstring[128];
	format(fzstring, sizeof(fzstring),"AdmCmd: %s has accepted report %i from %s. ",GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SendDiscordMessage(27, fzstring);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET reports = %i WHERE uid = %i", pData[playerid][pReports], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:reporttips(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	ShowPlayerDialog(playerid,0,DIALOG_STYLE_MSGBOX,"Report Tips","Tips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Do not flame admins.\n- Report only for in-game items.","Close", "");
	return 1;
}


CMD:tr(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new reportid, reason[128];

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "iS(N/A)[128]", reportid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /tr [reportid] [reason (optional)]");
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid report ID.");
	}
    if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The report specified is being handled by another admin.");
	}

	SAM(COLOR_LIGHTRED, "AdmCmd: %s has trashed report %i from %s, reason: %s", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]), reason);
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "** %s has trashed your report, reason: %s", GetRPName(playerid), reason);
	ReportInfo[reportid][rExists] = 0;

	new fzstring[128];
	format(fzstring, sizeof(fzstring),"AdmCmd: %s has trashed report %i from %s, reason: %s",GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]), reason);
	SendDiscordMessage(27, fzstring);

	ShowPlayerDialog(ReportInfo[reportid][rReporter], 0, DIALOG_STYLE_MSGBOX,"Report Tips","Tips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Do not flame admins.\n- Report only for in-game items.","Close", "");
	return 1;
}

CMD:nro(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new reportid;

	if(pData[playerid][pAdmin] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
 		SCM(playerid, COLOR_SYNTAX, "Usage: /nro [reportid]");
 		SCM(playerid, COLOR_WHITE, "This command will clear a report for not being a rulebreaking offense.");
 		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This report is already being handled by another administrator.");
	}

 	SAM(COLOR_TEAL, "AdmCmd:"WHITE" "WHITE"%s"TEAL" has trashed report "WHITE"%i"TEAL" from %s as their report involves a non-rulebreaking offense.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_TEAL, ""WHITE"%s"TEAL" has trashed your report as it involves a non-rulebreaking offense", GetRPName(playerid));
	SM(ReportInfo[reportid][rReporter], COLOR_TEAL, "Please visit our rules page at "WHITE"("SERVER_URL")"TEAL" for a full list of rulebreaking offenses.");
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:nao(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new reportid;

	if(pData[playerid][pAdmin] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /nao [reportid]");
   		SCM(playerid, COLOR_WHITE, "This command will clear a report if there isn't a high enough administrator online.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This report is already being handled by another administrator.");
	}

  	SAM(COLOR_TEAL, "AdmCmd:"WHITE" "WHITE"%s"TEAL" has trashed report "WHITE"%i"TEAL" from %s as there are no admins online to handle it.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_TEAL, ""WHITE"%s"TEAL" has trashed your report as there no admins online with the authority to handle it.", GetRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:norevive(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::nor(playerid, params);
}

CMD:nor(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new reportid;

	if(pData[playerid][pAdmin] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /nor [reportid]");
   		SCM(playerid, COLOR_WHITE, "This command will clear a report if the reporters revive request is invalid.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This report is already being handled by another administrator.");
	}

 	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has trashed report %i from %s as their request for a revive is invalid.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as your request for a revive is invalid. (/phone)", GetRPName(playerid));
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:post(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new reportid;

	if(pData[playerid][pAdmin] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", reportid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /nor [reportid]");
   		SCM(playerid, COLOR_WHITE, "This command will clear a report and notify the player to post an admin request.");
   		return 1;
	}
	if(!(0 <= reportid < MAX_REPORTS) || !ReportInfo[reportid][rExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There's not a report that currently exists with this ID.");
	}
	if(ReportInfo[reportid][rAccepted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This report is already being handled by another administrator.");
	}

 	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has trashed report %i from %s as it needs to be handled on the forums.", GetRPName(playerid), reportid, GetRPName(ReportInfo[reportid][rReporter]));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "%s has trashed your report as your issue at hand must be handled on our forums.", GetRPName(playerid));
	SM(ReportInfo[reportid][rReporter], COLOR_LIGHTRED, "Please visit our website at ("SERVER_URL") in order to to resolve this issue.");
	ReportInfo[reportid][rExists] = 0;
	return 1;
}

CMD:rr(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new reportid = pData[playerid][pActiveReport];

    if(reportid == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no active report to reply to.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rr [reply text]");
	}

	if(ReportInfo[reportid][rReporter] == playerid)
	{
	    SM(ReportInfo[reportid][rHandledBy], COLOR_TEAL, "** Player "WHITE"%s"TEAL" (ID "WHITE"%i"TEAL"): "WHITE"%s **", GetRPName(playerid), playerid, params);
	    SM(playerid, COLOR_TEAL, "** Reply to "WHITE"%s"TEAL" (ID "WHITE"%i"TEAL"): "WHITE"%s **", GetRPName(ReportInfo[reportid][rHandledBy]), ReportInfo[reportid][rHandledBy], params);
		
		new fzstring[128];
		format(fzstring, sizeof(fzstring),"to %s (ID:%i): %s ",GetRPName(ReportInfo[reportid][rHandledBy]), ReportInfo[reportid][rHandledBy], params);
		SendDiscordMessage(27, fzstring);
		
		new fzstring1[128];
		format(fzstring1, sizeof(fzstring1),"to %s (ID:%i): %s ",GetRPName(ReportInfo[reportid][rReporter]), ReportInfo[reportid][rReporter], params);
		SendDiscordMessage(27, fzstring1);
	}
	else
	{
	    SM(ReportInfo[reportid][rReporter], COLOR_TEAL, "** Admin "WHITE"%s"TEAL" (ID "WHITE"%i"TEAL"): "WHITE"%s **", GetRPName(playerid), playerid, params);
	    SM(playerid, COLOR_TEAL, "** Reply to "WHITE"%s"TEAL" (ID "WHITE"%i"TEAL"): "WHITE"%s **", GetRPName(ReportInfo[reportid][rReporter]), ReportInfo[reportid][rReporter], params);
		
		new fzstring[128];
		format(fzstring, sizeof(fzstring),"to %s (ID:%i): %s ",GetRPName(ReportInfo[reportid][rHandledBy]), ReportInfo[reportid][rHandledBy], params);
		SendDiscordMessage(27, fzstring);
		
		new fzstring1[128];
		format(fzstring1, sizeof(fzstring1),"to %s (ID:%i): %s ",GetRPName(ReportInfo[reportid][rReporter]), ReportInfo[reportid][rReporter], params);
		SendDiscordMessage(27, fzstring1);
	}
	return 1;
}

CMD:cr(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new reportid = pData[playerid][pActiveReport];

    if(reportid == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no active report which you can close.");
	}

	if(ReportInfo[reportid][rReporter] == playerid)
	{
	    SM(ReportInfo[reportid][rHandledBy], COLOR_TEAL, "** Player "WHITE"%s"TEAL" has closed the report. **", GetRPName(playerid));
	    SM(playerid, COLOR_YELLOW, "You have closed the report and ended your conversation with the admin.");
	}
	else
	{
	    SM(ReportInfo[reportid][rReporter], COLOR_TEAL, "** Administrator "WHITE"%s"TEAL" has closed the report. **", GetRPName(playerid));
	    SM(playerid, COLOR_TEAL, "You have closed the report and ended your conversation with the reporter.");
	}

	if(ReportInfo[reportid][rReporter] != INVALID_PLAYER_ID)
	{
		pData[ReportInfo[reportid][rReporter]][pActiveReport] = -1;
	}
	if(ReportInfo[reportid][rHandledBy] != INVALID_PLAYER_ID)
	{
		pData[ReportInfo[reportid][rHandledBy]][pActiveReport] = -1;
	}

	ReportInfo[reportid][rExists] = 0;
	ReportInfo[reportid][rAccepted] = 0;
	ReportInfo[reportid][rReporter] = INVALID_PLAYER_ID;
	ReportInfo[reportid][rHandledBy] = INVALID_PLAYER_ID;
	pData[playerid][pActiveReport] = -1;

	return 1;
}


ReturnUserEx(text[]) {

	new
		strPos,
		returnID = 0,
		bool: isnum = true;

	while(text[strPos]) {
		if(isnum) {
			if ('0' <= text[strPos] <= '9') returnID = (returnID * 10) + (text[strPos] - '0');
			else isnum = false;
		}
		strPos++;
	}
	if (isnum) {
		if(IsPlayerConnected(returnID)) return returnID;
	}
	else {

		foreach(new i : Player) {

			if(!strcmp(pData[i][pUsername], text, true, strPos)) return i;
		}
	}
	return INVALID_PLAYER_ID;
}
forward OnPlayerListRankings(playerid);
public OnPlayerListRankings(playerid)
{
	new rows = cache_num_rows(connectionID), szDialog[1024];
	new username[MAX_PLAYER_NAME], hours, giveplayerid;

	for(new i = 0; i < rows; i++)
	{
	    cache_get_field_content(i, "Name", username);
	    hours = cache_get_field_content_int(i, "hours");

		giveplayerid = ReturnUserEx(username);
	    format(szDialog, sizeof(szDialog), "%s{FFFFFF}%s\t%d playing hours\t%s\n", szDialog, username, hours, (giveplayerid == INVALID_PLAYER_ID) ? ("{FF0606}Offline") : ("{33AA33}Online"));
	}

	if(isnull(szDialog)) format(szDialog, sizeof(szDialog), "There are no recorded playing hours yet.");
	ShowPlayerDialog(playerid, DIALOG_NONE, DIALOG_STYLE_TABLIST, "Top 10 Playing Hours", szDialog, "Close", "");
	return 1;
}

forward OnPlayerChangeNameRankings(playerid, newname[]);
public OnPlayerChangeNameRankings(playerid, newname[])
{
	if(cache_num_rows(connectionID)) {

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE rankings SET Name = '%e' WHERE Name = '%e'", newname, pData[playerid][pUsername]);
		mysql_tquery(connectionID, queryBuffer);

	}
	return 1;
}

forward OnPlayerUpdateRankings(playerid);
public OnPlayerUpdateRankings(playerid)
{
	if(cache_num_rows(connectionID)) {

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE rankings SET hours = hours + 1 WHERE Name = '%e'", pData[playerid][pUsername]);
		mysql_tquery(connectionID, queryBuffer);

	} else {

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO rankings (Name, hours) VALUES('%e', %d)", pData[playerid][pUsername], 1);
		mysql_tquery(connectionID, queryBuffer);

	}
	return 1;
}
CMD:resettopplayers(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}  

	if(pData[playerid][pAdmin] < 6)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You are not Executive Admin+");
	}
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset all top hours players", GetPlayerNameEx(playerid));
	mysql_tquery(connectionID, "DELETE FROM rankings");
	return 1;
}
CMD:topplayers(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}  
	mysql_tquery(connectionID, "SELECT * FROM rankings ORDER BY hours DESC LIMIT 100", "OnPlayerListRankings", "d", playerid);
	return 1;
}

CMD:skick(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, reason[128];

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /skick [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be kicked.");
	}

    Log_Write("log_punishments", "%s (uid: %i) silently kicked %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has silently kicked %s, reason: %s", GetRPName(playerid), GetRPName(targetid), reason);
	KickPlayer(targetid);
	return 1;
}

CMD:sban(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, reason[128];

	if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	if(pData[targetid][pAdmin] == 7)
	{
 		SAM(COLOR_YELLOW, "Warning: %s has been autokicked for trying to ban a Community Owner(%s).", GetRPName(playerid), GetRPName(targetid));
 		KickPlayer(playerid);
 		return 1;
	}

	Log_Write("log_punishments", "%s (uid: %i) silently banned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);
	new szString[528];
	format(szString, sizeof(szString), "%s wassilently  banned by %s, reason: %s",GetRPName(targetid), GetRPName(playerid),reason);
	SendDiscordMessage(23, szString); 
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s was silently banned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	BanPlayer(targetid, "Trial Admin", reason, true);
	return 1;
}

CMD:sjail(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, minutes, reason[128];

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sjail [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be jailed.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(minutes < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of minutes specified cannot be below zero.");
	}

    PlayerTextDrawShow(targetid, customHUD[targetid][1]);


    pData[targetid][pJailType] = 1;
    pData[targetid][pJailTime] = minutes * 60;

    ResetPlayerWeaponsEx(targetid);
	ResetPlayer(targetid);
	SetPlayerInJail(targetid);

	Log_Write("log_punishments", "%s (uid: %i) silently jailed %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], minutes, reason);
    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was jailed for %i minutes by an Admin, reason: %s", GetRPName(targetid), minutes, reason);
    SM(targetid, COLOR_AQUA, "** You have been jailed for %i minutes by an admin.", minutes);
    return 1;
}

CMD:pinfo(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /pinfo [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, COLOR_GREY1, "(ID: %i) - (Name: %s) - (Ping: %i) - (Packet Loss: %.1f%c)", targetid, GetRPName(targetid), GetPlayerPing(targetid), NetStats_PacketLossPercent(targetid), '%');
	return 1;
}

CMD:admins(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
 	SCM(playerid, COLOR_WHITE, "|___________ "TEAL"Online Administrators List"WHITE" ___________|");

	foreach(new i : Player)
	{
	    if(pData[i][pAdmin] > 0)
		{
			if(!strcmp(pData[i][pAdminName], "None", true))
            	SM(playerid, COLOR_GREY2, "ID: %i %s %s - Status: %s", i, GetAdminRank(i), pData[i][pUsername], (pData[i][pAdminDuty]) ? (""GREEN"Administrating") : (""GREEN"Roleplaying"));
        	else
				SM(playerid, COLOR_GREY2, "ID: %i %s %s (%s) - Status: %s", i, GetAdminRank(i), pData[i][pUsername], pData[i][pAdminName], (pData[i][pAdminDuty]) ? (""GREEN"Administrating") : (""GREEN"Roleplaying"));
		}
	}
	return 1;
}

CMD:checknewbies(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;
	if(!pData[playerid][pAdmin] && pData[playerid][pHelper] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /checknewbies [playerid]");
	}
	SM(playerid, COLOR_SYNTAX, "Level %i Player %s has used newbie {00FF00}%s times.", pData[targetid][pLevel], GetRPName(targetid), FormatNumber(pData[targetid][pNewbies], 0));
	return 1;
}

CMD:helpers(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	SCM(playerid, SERVER_COLOR, "Helpers Online:");

	foreach(new i : Player)
	{
	    if(pData[i][pHelper] > 0 && !pData[i][pPassport])
	    {
	        if(pData[playerid][pAdmin] > 0 || pData[playerid][pHelper] > 0)
	            SM(playerid, COLOR_WHITE, "(ID: %i) %s %s - Help Requests: %s - Newbies: %s", i, GetHelperRank(i), GetRPName(i), FormatNumber(pData[i][pHelpRequests], 0), FormatNumber(pData[i][pNewbies], 0));
	        else
				SM(playerid, COLOR_WHITE, "(ID: %i) %s %s", i, GetHelperRank(i), GetRPName(i));
		}
	}

	return 1;
}

CMD:flag(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, desc[128];

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, desc))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /flag [playerid] [description]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO flags VALUES(null, %i, '%s', NOW(), '%e')", pData[targetid][pID], GetPlayerNameEx(playerid), desc);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s flagged %s's account for '%s'.", GetRPName(playerid), GetRPName(targetid), desc);
	return 1;
}

CMD:oflag(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new name[24], desc[128];

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]s[128]", name, desc))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /oflag [username] [description]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineFlag", "iss", playerid, name, desc);
	return 1;
}

CMD:listflagged(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	mysql_tquery(connectionID, "SELECT b.username FROM flags a, users b WHERE a.uid = b.uid ORDER BY b.username", "OnQueryFinished", "ii", THREAD_LIST_FLAGGED, playerid);
	return 1;
}

CMD:ocheck(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new name[24];

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ocheck [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineCheck", "is", playerid, name);
	return 1;
}

CMD:removeflag(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, slot;

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, slot))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removeflag [playerid] [slot]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(slot < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid slot specified.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM flags WHERE uid = %i ORDER BY id LIMIT %i, 1", pData[targetid][pID], slot-1);
	mysql_tquery(connectionID, queryBuffer, "OnVerifyRemoveFlag", "iii", playerid, targetid, slot);
	return 1;
}

CMD:listflags(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid;

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /listflags [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM flags WHERE uid = %i ORDER BY date DESC", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnListPlayerFlags", "ii", playerid, targetid);
	return 1;
}

CMD:spec(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid;

	if(pData[playerid][pAdmin] < 1 && pData[playerid][pHelper] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!strcmp(params, "off", true) && GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
	    SM(playerid, COLOR_ORANGE, "You are no longer spectating %s (ID %i).", GetRPName(pData[playerid][pSpectating]), pData[playerid][pSpectating]);
	    pData[playerid][pSpectating] = INVALID_PLAYER_ID;
	    SetPlayerToSpawn(playerid);
	    return 1;
 	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /spec [playerid/off]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't spectate yourself.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}

	SavePlayerVariables(playerid);
	TogglePlayerSpectating(playerid, 1);

	SetPlayerInterior(playerid, GetPlayerInterior(targetid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

	if(IsPlayerInAnyVehicle(targetid))
	{
	    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(targetid));
	}
	else
	{
	    PlayerSpectatePlayer(playerid, targetid);
	}

	pData[playerid][pSpectating] = targetid;
	SM(playerid, COLOR_ORANGE, "You are now spectating %s (ID %i).", GetRPName(pData[playerid][pSpectating]), pData[playerid][pSpectating]);
	new szString[528];
	format(szString, sizeof(szString), "%s is spectating  %s .",GetRPName(playerid),  GetRPName(pData[playerid][pSpectating]));
	SendDiscordMessage(24, szString); 
	SAM(COLOR_RED, "%s is now spectating to %s (ID:%i).", GetRPName(playerid), GetRPName(pData[playerid][pSpectating]), pData[playerid][pSpectating]);
	return 1;
}

CMD:spec1027(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid;

	if(pData[playerid][pAdmin] < 1 && pData[playerid][pHelper] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!strcmp(params, "off", true) && GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
	    SM(playerid, COLOR_ORANGE, "You are no longer spectating %s (ID %i).", GetRPName(pData[playerid][pSpectating]), pData[playerid][pSpectating]);
	    pData[playerid][pSpectating] = INVALID_PLAYER_ID;
	    SetPlayerToSpawn(playerid);
	    return 1;
 	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /spec [playerid/off]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't spectate yourself.");
	}
	if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}

	SavePlayerVariables(playerid);
	TogglePlayerSpectating(playerid, 1);

	SetPlayerInterior(playerid, GetPlayerInterior(targetid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

	if(IsPlayerInAnyVehicle(targetid))
	{
	    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(targetid));
	}
	else
	{
	    PlayerSpectatePlayer(playerid, targetid);
	}

	pData[playerid][pSpectating] = targetid;
	SM(playerid, COLOR_ORANGE, "You are now spectating %s (ID %i).", GetRPName(pData[playerid][pSpectating]), pData[playerid][pSpectating]);
	new szString[528];
	format(szString, sizeof(szString), "%s is spectating  %s .",GetRPName(playerid),  GetRPName(pData[playerid][pSpectating]));
	SendDiscordMessage(24, szString); 
	return 1;
}

CMD:ameg(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::amegaphone(playerid, params);
}

CMD:amegaphone(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(am)egaphone [text]");
	}

	SendProximityMessage(playerid, 50.0, COLOR_LIME, "[Admin Megaphone] %s: %s", GetRPName(playerid), params);
	return 1;
}

CMD:fspawn(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was kicked reason: using restricted cmd", GetRPName(playerid));
	KickPlayer(playerid);
	return 1;
}

CMD:kick(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, reason[128];

	if(pData[playerid][pAdmin] < 2 && pData[playerid][pHelper] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /kick [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be kicked.");
	}

    Log_Write("log_punishments", "%s (uid: %i) kicked %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);
	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was kicked by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	KickPlayer(targetid);
	return 1;
}
CMD:kickbot(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, reason[128];

	if(pData[playerid][pAdmin] < 2 && pData[playerid][pHelper] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /kick [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be kicked.");
	}

    Log_Write("log_punishments", "%s (uid: %i) kicked %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);
	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was kicked by "SERVER_BOT", reason: %s", GetRPName(targetid), reason);
	KickPlayer(targetid);
	return 1;
}


CMD:ban(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, reason[128], status;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]i", targetid, reason,status))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	Log_Write("log_punishments", "%s (uid: %i) banned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);
	new szString[528];
	format(szString, sizeof(szString), "%s was banned by %s, reason: %s",GetRPName(targetid), GetRPName(playerid),reason);
	SendDiscordMessage(23, szString); 
	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason);
	return 1;
}

CMD:warn(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, reason[128];

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /warn [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin] || pData[targetid][pAdmin] == 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be warned.");
	}

	pData[targetid][pWarnings]++;
	Log_Write("log_punishments", "%s (uid: %i) warned %s (uid: %i), reason: %s (%i/3)", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason, pData[targetid][pWarnings]);

	if(pData[targetid][pWarnings] < 3)
	{
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s was warned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	    SM(targetid, COLOR_YELLOW, "** %s issued a warning to your account, reason: %s", GetRPName(playerid), reason);
	}
	else
	{
	    pData[targetid][pWarnings] = 0;

	    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by %s, reason: %s (3/3 warnings)", GetRPName(targetid), GetRPName(playerid), reason);
		BanPlayer(targetid, GetPlayerNameEx(playerid), reason);
	}

	return 1;
}

forward ComservEx1(playerid);
public ComservEx1(playerid)
{

	return 1;
}


CMD:jailclean(playerid, params[]) 
{
    if(pData[playerid][pJailTime] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't clean right now");
	}
	if(pData[playerid][pCleanTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are mining already. Wait until you are done.");
	}
	if(!IsPlayerCleanarea(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the cleaning area.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be onfoot in order to use this command.");
	}

    GameTextForPlayer(playerid, "~w~Cleaning...", 8000, 3);
    ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Crouch_Out", 4.1, 1, 0, 0, 0, 0, 1);

	DisablePlayerCheckpoint(playerid);
	pData[playerid][pCleanTime] = 8;
	return 1;
}

CMD:buytaco(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new count;
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1253.1620,-1432.2048,14.0101))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not near in the counter.");
	}
	foreach(new i : Player)
	{
	    if(IsTacoVendor(i) && pData[i][pDuty] == 1)
	    {
	        count++;
		}
	}
	if(count > 0)
	{
	    return SCM(playerid, COLOR_GREY2, "There is a Taco Faction Just buy to them.");
	}
	return ShowPlayerDialog(playerid, DIALOG_TACOSHOP, DIALOG_STYLE_LIST, "Select a meal", "Burger\nBurrito\nCoke", "Select", "Close");
}
/*
CMD:puttaco(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new string[128], cost = 1250;
	if(pData[playerid][pTaco] <= 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "You dont have a taco inyour inventory");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 1842.0796,-1838.8936,13.5981))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not near in the counter.");
	}
	if(pData[playerid][pTaco] >= 10 && pData[playerid][pDonator] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 taco.");
	}
	if(pData[playerid][pTaco] >= 20 && pData[playerid][pDonator] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 taco.");
	}
	
	SCM(playerid, COLOR_ORANGE, "*Successfully put a taco in the storage.*");
	RemovePlayerAttachedObject(playerid, 8);
	RemovePlayerAttachedObject(playerid, 9);

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	GivePlayerCash(playerid, cost);
	format(string, sizeof(string), "~g~+$%i", cost);
	GameTextForPlayer(playerid, string, 5000, 1);
			
	gTacoStock += 1;
	
	pData[playerid][pTaco] -= 1;
	SM(playerid, COLOR_SYNTAX, "You have now %i pcs of taco in your inventory ", pData[playerid][pTaco]);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET taco = %i WHERE uid = %i", pData[playerid][pTaco], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	
	ApplyAnimation(playerid,"BAR", "Barserve_bottle", 3.1, 0, 0, 0, 0, 0, 1);
	
	return 1;
}
CMD:putburrito(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new string[128], cost = 1500;
	if(pData[playerid][pBurrito] <= 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "You dont have a burrito in your inventory");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 1842.0796,-1838.8936,13.5981))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not near in the counter.");
	}
	if(pData[playerid][pBurrito] >= 10 && pData[playerid][pDonator] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't have more than 10 burrito.");
	}
	if(pData[playerid][pBurrito] >= 20 && pData[playerid][pDonator] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 burrito.");
	}
	
	SCM(playerid, COLOR_ORANGE, "*Successfully put a burrito in the storage.*");
	RemovePlayerAttachedObject(playerid, 8);
	RemovePlayerAttachedObject(playerid, 9);

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	GivePlayerCash(playerid, cost);
	format(string, sizeof(string), "~g~+$%i", cost);
	GameTextForPlayer(playerid, string, 5000, 1);
			
	gBugerStock += 1;
	
	pData[playerid][pBurrito] -= 1;
	SM(playerid, COLOR_SYNTAX, "You have now %i pcs of burrito in your inventory ", pData[playerid][pBurrito]);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET burrito = %i WHERE uid = %i", pData[playerid][pBurrito], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	
	ApplyAnimation(playerid,"BAR", "Barserve_bottle", 3.1, 0, 0, 0, 0, 0, 1);
	
	return 1;
}*/
CMD:selltaco(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid, amount, price;
	if(sscanf(params, "uii", targetid, amount, price))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /selltaco [playerid] [amount] [price]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1 || amount > pData[playerid][pTaco])
	{
	    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
	}

    pData[targetid][pTacoOffer] = playerid;
	pData[targetid][pTacoOffered] = amount;
	pData[targetid][pTacoPrice] = price;

	SM(targetid, COLOR_AQUA, "** %s offered you to buy their taco for $%i. (/accept taco)", GetRPName(playerid), price);
	SM(playerid, COLOR_AQUA, "** You offered %s to buy your taco for $%i.", GetRPName(targetid), price);
	
	return 1;
}

CMD:sellcombo(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid, amount, price;
	if(sscanf(params, "uii", targetid, amount, price))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellcombo [playerid] [amount] [price]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1 || amount > pData[playerid][pTaco])
	{
	    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
	}
	if(amount < 1 || amount > pData[playerid][pJuice])
	{
	    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
	}
	if(amount < 1 || amount > pData[playerid][pBurrito])
	{
	    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
	}
	
    pData[targetid][pComboOffer] = playerid;
	pData[targetid][pComboOffered] = amount;
	pData[targetid][pComboPrice] = price;

	SM(targetid, COLOR_AQUA, "** %s offered you to buy their combo meal for $%i. (/accept combo)", GetRPName(playerid), price);
	SM(playerid, COLOR_AQUA, "** You offered %s to buy your combo meal for $%i.", GetRPName(targetid), price);
	
	return 1;
}

CMD:sellcoke(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid, amount, price;
	if(sscanf(params, "uii", targetid, amount, price))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellcoke [playerid] [amount] [price]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1 || amount > pData[playerid][pJuice])
	{
	    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
	}

    pData[targetid][pJuiceOffer] = playerid;
	pData[targetid][pJuiceOffered] = amount;
	pData[targetid][pJuicePrice] = price;

	SM(targetid, COLOR_AQUA, "** %s offered you to buy their coke for $%i. (/accept coke)", GetRPName(playerid), price);
	SM(playerid, COLOR_AQUA, "** You offered %s to buy your coke meal for $%i.", GetRPName(targetid), price);
	
	return 1;
}
CMD:sellburrito(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid, amount, price;
	if(sscanf(params, "uii", targetid, amount, price))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellburrito [playerid] [amount] [price]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1 || amount > pData[playerid][pBurrito])
	{
	    return SCM(playerid, COLOR_WHITE, "Insufficient amount.");
	}


    pData[targetid][pBurritoOffer] = playerid;
	pData[targetid][pBurritoOffered] = amount;
	pData[targetid][pBurritoPrice] = price;

	SM(targetid, COLOR_AQUA, "** %s offered you to buy their burrito for $%i. (/accept burrito)", GetRPName(playerid), price);
	SM(playerid, COLOR_AQUA, "** You offered %s to buy your burrito for $%i.", GetRPName(targetid), price);
	
	return 1;
}
CMD:cook(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new  option[14];
	if(GetFactionType(playerid) != FACTION_TACO)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a taco seller.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 1257.0536,-1431.0723,13.7070))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in taco shop. You can't use this command.");
	}
	if(sscanf(params, "s[14]", option))
	{
		SCM(playerid, COLOR_SYNTAX, "Usage: /cook [type]");
		SCM(playerid, COLOR_SYNTAX, "Usage: /cook taco - for the taco");
		SCM(playerid, COLOR_SYNTAX, "Usage: /cook burrito - for the Burrito");
		return 1;
	}
	if(!strcmp(option, "taco", true))
	{
		if(pData[playerid][pMeat] < 3)
		{
	    	return SCM(playerid, COLOR_RED, "[TACO ERROR]: You don't have any raw meat to cook or less than the required meat.");
		}
		if(pData[playerid][pTacotime] > 0)
		{
			return SCM(playerid, COLOR_RED, "[TACO ERROR]: Finish the previous meat");
		}
		if(pData[playerid][pBurritotime] > 0)
		{
			return SCM(playerid, COLOR_RED, "[TACO ERROR]: Finish the previous meat");
		}
		GameTextForPlayer(playerid, "~w~Cooking...", 8000, 3);
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 3.1, 1, 0, 0, 0, 0, 1);
		pData[playerid][pTacotime] = 8;		

	}
	if(!strcmp(option, "burrito", true))
	{
		if(pData[playerid][pMeat] < 4)
		{
	    	return SCM(playerid, COLOR_RED, "[TACO ERROR]: You don't have any raw meat to cook or less than the required meat.");
		}
		if(pData[playerid][pTacotime] > 0)
		{
			return SCM(playerid, COLOR_RED, "[TACO ERROR]: Finish the previous meat");
		}
		if(pData[playerid][pBurritotime] > 0)
		{
			return SCM(playerid, COLOR_RED, "[TACO ERROR]: Finish the previous meat");
		}
	
		GameTextForPlayer(playerid, "~w~Cooking...", 10000, 3);
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 3.1, 1, 0, 0, 0, 0, 1);
		pData[playerid][pBurritotime] = 10;		

	}
	return 1;
}


forward PackageEx(playerid);
public PackageEx(playerid)
{
	ClearAnimations(playerid, 1);
	TogglePlayerControllable(playerid, 1);
	SetPlayerCheckpoint(playerid, 2566.3066, -1301.8512, 1030.7395, 1.0);
	pData[playerid][pCP] = CHECKPOINT_PACKAGE;
	SetPlayerAttachedObject(playerid, 9, 1271, 6, 0.140999, 0.184999, -0.250000, -23.300001, -6.400006, 12.699996, 0.716000, 0.803000, 0.859999);
	return 1;
}
CMD:package(playerid, params[]) {
    if(pData[playerid][pJailType] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're not inmate therefore you cannot use this command.");
	}
	if(gettime() - pData[playerid][pLastClean] < 15)
	{
		return SM(playerid, COLOR_GREY2, "** You can only use this command every 15 seconds. Please wait %i more seconds.", 15 - (gettime() - pData[playerid][pLastClean]));
	}
    if(!CanPlayerUseAnims(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're currently unable to use animations at this moment.");
	}

	for(new i = 0; i < sizeof(warehousepoint); i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, warehousepoint[i][0], warehousepoint[i][1], warehousepoint[i][2]))
	    {
			GameTextForPlayer(playerid, "~g~Packaging...", 15000, 3);
			ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 1, 0, 1);
			SetTimerEx("PackageEx", 15000, false, "i", playerid);
			pData[playerid][pLastClean] = gettime();
			return 1;
		}
	}
	pData[playerid][pLastClean] = gettime();
	SendClientMessage(playerid, COLOR_TEAL, "You are not in range of package areas.");
	return 1;
}
CMD:checkinv(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /checkinv [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}

	DisplayInventory(targetid, playerid);
	return 1;
}

CMD:slap(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid, Float:height;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uF(5.0)", targetid, height))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /slap [playerid] [height (optional)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	/*if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not spawned and therefore cannot be slapped.");
	}*/
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin] || pData[targetid][pAdmin] == 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);
	SetPlayerPos(targetid, x, y, z + height);

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s was slapped by %s.", GetRPName(targetid), GetRPName(playerid));
	PlayerPlaySound(targetid, 1130, 0.0, 0.0, 0.0);

	return 1;
}

CMD:charity(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new option[10], param[64];
	if((gettime() - pData[playerid][pLastCharity]) < 120)
	{
		return SCM(playerid, COLOR_TEAL, "Error:"WHITE" You need to wait "WHITE"120 seconds"TEAL" before sending charity.");
	}
	if(sscanf(params, "s[10]S()[64]", option, param))
	{
		return SCM(playerid, COLOR_SYNTAX, "Usage: /charity [info | health | armor]");
	}
	if(!strcmp(option, "info", true))
	{
	    SCM(playerid, SERVER_COLOR, "Charity:");
		SCM(playerid, COLOR_WHITE, "If you have at least $1,000 on hand you can donate to charity.");
		SCM(playerid, COLOR_WHITE, "You can donate to give health or armor for the entire server using '{FFD700}/charity health/armor{AAAAAA}'.");
		SCM(playerid, COLOR_WHITE, "You can also donate to globally play a song of your choice using '{FFD700}/charity song{AAAAAA}'.");
		SCM(playerid, COLOR_WHITE, "You can also donate your money the traditional way using '{FFD700}/charity [amount]{AAAAAA}'.");
		SCM(playerid, COLOR_WHITE, "Once the charity bank hits a milestone, some of it will be given back to the community!");
		SM(playerid, COLOR_AQUA, "** $%i has been donated to charity so far.", gCharity);
		return 1;
	}
 	else if(!strcmp(option, "health", true))
	{
		if(pData[playerid][pCash] < 150000)
		{
			return SCM(playerid, COLOR_WHITE, "You need at least $150,000 on hand for this option.");
		}
		if(gCharityHealth)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Players can only donate for this perk each hour. Try again after payday.");
		}

        foreach(new i : Player)
		{
		    if(!pData[i][pAdminDuty])
		    {
				SetPlayerHealth(i, 150.0);
			}
		}

		gCharity += 150000;
		gCharityHealth = 1;
		AddToTaxVault(150000);

		SMA(COLOR_ROYALBLUE, "Charity: %s has generously donated $150,000 to heal everyone to 150 health!", GetRPName(playerid));
		GivePlayerCash(playerid, -150000);
	}
	else if(!strcmp(option, "armor", true))
	{
		if(pData[playerid][pCash] < 200000)
		{
			return SCM(playerid, COLOR_WHITE, "You need at least $200,000 on hand for this option.");
		}
		if(gCharityArmor)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Players can only donate for this perk each hour. Try again after payday.");
		}

        foreach(new i : Player)
		{
		    if(!pData[i][pAdminDuty])
		    {
				SetScriptArmour(i, 100.0);
			}
		}

		gCharity += 200000;
		gCharityArmor = 1;
		AddToTaxVault(200000);

		SMA(COLOR_ROYALBLUE, "Charity: %s has generously donated $200,000 to give full armor to everyone!", GetRPName(playerid));
		GivePlayerCash(playerid, -10000);
	}
	else if(IsNumeric(option))
	{
	    new amount = strval(option);

		if(amount < 1 || amount > pData[playerid][pCash])
		{
		    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
		}

	    gCharity += amount;
	    AddToTaxVault(amount);

	    GivePlayerCash(playerid, -amount);
	    SM(playerid, COLOR_ROYALBLUE, "Charity: Thank you for your generous donation of $%i.", amount);
	}
    pData[playerid][pLastCharity] = gettime();
	return 1;
}

CMD:music(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
 	SCM(playerid, SERVER_COLOR, ""SERVER_URL"/music");
    HTTP(playerid, HTTP_GET, SERVER_FETCH_URL, "", "HTTP_OnMusicFetchResponse");
   	SCM(playerid, COLOR_SYNTAX, "Usage: /gplay - /gplayurl - /setradio");
 	return 1;
}

CMD:stopmusic(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SCM(playerid, COLOR_YELLOW, "You have stopped all active audio streams playing for yourself.");
	pData[playerid][pStreamType] = MUSIC_NONE;
	StopAudioStreamForPlayer(playerid);
	return 1;
}

CMD:gplay(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new url[144];

	if(pData[playerid][pAdmin] < 4)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	 	SCM(playerid, COLOR_SYNTAX, "Usage: /gplay [songfolder/name.mp3]");
	 	SCM(playerid, COLOR_YELLOW, "Go to "SERVER_URL"/music to view a list of our music.");
	 	return 1;
	}

    format(url, sizeof(url), "http://%s/%s", SERVER_MUSIC_URL, params);

    foreach(new i : Player)
	{
	    if(!pData[i][pToggleMusic])
	    {
			PlayAudioStreamForPlayer(i, url);
			SM(i, COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" has started the global playback of %s.", GetRPName(playerid), params);
			SM(i, COLOR_YELLOW, "Use /stopmusic to stop playback and '/toggle streams' to disable global playback.");
		}
	}

	return 1;
}

CMD:gplayurl(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 4)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	 	SCM(playerid, COLOR_SYNTAX, "Usage: /gplayurl [link]");
	 	SCM(playerid, COLOR_YELLOW, "Go to "SERVER_URL"/music to view a list of our music.");
	 	return 1;
	}

    foreach(new i : Player)
	{
	    if(!pData[i][pToggleMusic])
	    {
			PlayAudioStreamForPlayer(i, params);
			SM(i, COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" has started the global playback of a custom URL.", GetRPName(playerid));
			SM(i, COLOR_YELLOW, "Use /stopmusic to stop playback and '/toggle streams' to disable global playback.");
		}
	}
	return 1;
}

CMD:gstop(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

    foreach(new i: Player)
	{
	    if(!pData[i][pToggleMusic])
	    {
		    StopAudioStreamForPlayer(i);
			SM(i, COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" has stopped all active audio streams.", GetRPName(playerid));
		}
	}

	return 1;
}

CMD:dm(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /dm [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be punished.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet. You can wait until they login or use /oprison.");
	}

	pData[targetid][pDMWarnings]++;

	if(pData[targetid][pDMWarnings] < 5)
	{
	    new minutes = pData[targetid][pDMWarnings] * 5;

	    pData[targetid][pJailType] = 2;
    	pData[targetid][pJailTime] = pData[targetid][pDMWarnings] * 300;
    	pData[targetid][pWeaponRestricted] = pData[targetid][pDMWarnings] * 10;

    	PlayerTextDrawShow(targetid, customHUD[targetid][1]);

		SetPlayerInJail(targetid);

		if(pData[playerid][pAdmin] == 1)
		{
		    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was DM Warned & Prisoned for %i minutes by an Admin (%i/5 Warnings)", GetRPName(targetid), minutes, pData[targetid][pDMWarnings]);
		    strcpy(pData[targetid][pPrisonedBy], "Trial Admin", MAX_PLAYER_NAME);
		}
		else
		{
			SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was DM Warned & Prisoned for %i minutes by %s (%i/5 Warnings)", GetRPName(targetid), minutes, GetRPName(playerid), pData[targetid][pDMWarnings]);
			GetPlayerName(playerid, pData[targetid][pPrisonedBy], MAX_PLAYER_NAME);
		}

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET prisonedby = '%e', prisonreason = 'DM' WHERE uid = %i", pData[targetid][pPrisonedBy], pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		strcpy(pData[targetid][pPrisonReason], "DM", 128);

		GameTextForPlayer(targetid, "~w~Welcome to~n~~r~admin jail", 5000, 3);
		SM(targetid, COLOR_WHITE, "** You have been admin prisoned for %i minutes, reason: DM.", minutes);
		SM(targetid, COLOR_WHITE, "** Your punishment is %i hours of weapon restriction and %i/5 DM warning.", pData[targetid][pWeaponRestricted], pData[targetid][pDMWarnings]);
		Log_Write("log_punishments", "%s (uid: %i) prisoned %s (uid: %i) for %i minutes, reason: DM [/dm]", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], minutes);
	}
	else
	{
        Log_Write("log_punishments", "%s (uid: %i) banned %s (uid: %i) for DM (5/5 warnings)", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

		if(pData[playerid][pAdmin] == 1)
		{
		    BanPlayer(targetid, "Trial Admin", "DM (5/5 warnings)");
			SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by an admin for deathmatching (5/5 warnings)", GetRPName(targetid));
		}
		else
		{
	        BanPlayer(targetid, GetPlayerNameEx(playerid), "DM (5/5 warnings)");
			SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was banned by %s for deathmatching (5/5 warnings)", GetRPName(targetid), GetRPName(playerid));
	    }
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = %i, jailtime = %i, dmwarnings = %i, weaponrestricted = %i WHERE uid = %i", pData[targetid][pJailType], pData[targetid][pJailTime], pData[targetid][pDMWarnings], pData[targetid][pWeaponRestricted], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}
CMD:god(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] >= 3)
	{
        SetPlayerHealth(playerid, 100000);
        SetPlayerArmour(playerid, 100000);
    }
	return 1;
}
CMD:aduty(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!pData[playerid][pAdminDuty])
	{
	    SavePlayerVariables(playerid);
	    ResetPlayerWeapons(playerid);
        SetPlayerSpecialTag(playerid, TAG_ADMIN);
        pData[playerid][pAdminColor] = 1;

		SetPlayerHealth(playerid, 100);
		SetScriptArmour(playerid, 100);
	    if(pData[playerid][pGender] == 1)
	    { // Male
	        pData[playerid][pGender] = 1;
	        SetPlayerSkin(playerid, 217);
		}
		else if(pData[playerid][pGender] == 2)
		{ // Female
	        pData[playerid][pGender] = 2;
	        SetPlayerSkin(playerid, 211);
		}
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s is now on admin duty.", GetRPName(playerid));
		SCM(playerid, COLOR_WHITE, "** You are now on admin duty. Your stats will not be saved until you're off duty.");

        pData[playerid][pAdminDuty] = 1;


        if(strcmp(pData[playerid][pAdminName], "None", true) != 0)
        {
	        SetPlayerName(playerid, pData[playerid][pAdminName]);
		}
	}
	else
	{
	    SetPlayerSpecialTag(playerid, TAG_NORMAL);
	    pData[playerid][pAdminColor] = 0;
 		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s is now off admin duty.", GetRPName(playerid));
	    //TogglePlayerSpectating(playerid, 1);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM users WHERE uid = %i", pData[playerid][pID]);
    	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_PROCESS_LOGIN, playerid);
	}

	return 1;
}

CMD:adminname(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new name[MAX_PLAYER_NAME];
	new targetid;
    if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[24]",targetid, name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /adminname [playerid] [name ('none' to reset)]");
	}
	if(!IsValidName(name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The name specified is not supported by the SA-MP client.");
	}

	strcpy(pData[targetid][pAdminName], name, MAX_PLAYER_NAME);

	if(pData[targetid][pAdminDuty])
	{
	    SetPlayerName(targetid, name);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminname = '%e' WHERE uid = %i", name, pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s changed their administrator name to %s.", pData[playerid][pUsername], name);
	return 1;
}

CMD:getip(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /getip [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, COLOR_WHITE, "** %s[%i]'s IP: %s **", GetRPName(targetid), targetid, GetPlayerIP(targetid));
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin FROM users WHERE ip = '%s' ORDER BY lastlogin DESC", GetPlayerIP(targetid));
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_TRACE_IP, playerid);
	return 1;
}

CMD:ogetip(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new name[MAX_PLAYER_NAME];

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ogetip [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, ip FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_OFFLINE_IP, playerid);

	return 1;
}

CMD:iplookup(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!IsAnIP(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /iplookup [ip address]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin FROM users WHERE ip = '%s' ORDER BY lastlogin DESC", params);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_TRACE_IP, playerid);

	return 1;
}

CMD:lastactive(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new username[24], specifiers[] = "%D of %M, %Y @ %k:%i";

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /lastactive [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT DATE_FORMAT(lastlogin, '%s') FROM users WHERE username = '%e'", specifiers, username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckLastActive", "is", playerid, username);

	return 1;
}
CMD:prisoners(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::listjailed(playerid, params);
}
CMD:listjailtime(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}

	SCM(playerid, SERVER_COLOR, "Prisoners:");

	foreach(new i : Player)
	{
	    if(pData[i][pJailType] > 3)
	    {
			SM(playerid, COLOR_GREY1, "%s - Time: %i seconds", i, GetRPName(i), pData[i][pJailTime]);
		}
	}

	return 1;
}	
CMD:listjailed(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new type[14];

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Jailed Players:");

	foreach(new i : Player)
	{
	    if(pData[i][pJailType] > 0)
	    {
	        switch(pData[i][pJailType])
	        {
	            case 1: type = "OOC jailed";
				case 2: type = "OOC prisoned";
				case 3: type = "IC prisoned";
			}

			SM(playerid, COLOR_GREY1, "(ID: %i) %s - Status: %s - Time: %i seconds", i, GetRPName(i), type, pData[i][pJailTime]);
		}
	}

	return 1;
}
CMD:prisoner(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::prisoninfo(playerid, params);
}
CMD:prisoninfo(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /prisoninfo [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pJailType] != 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not in OOC prison.");
	}

	SM(playerid, COLOR_WHITE, "** %s was prisoned by %s, reason: %s (%i seconds left.) **", GetRPName(targetid), pData[targetid][pPrisonedBy], pData[targetid][pPrisonReason], pData[targetid][pJailTime]);
	return 1;
}

CMD:relog(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;
	new string[64], playerIP[32];
	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /relog [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has forced %s to relog.", GetRPName(playerid), GetRPName(targetid));
	SCM(targetid, SERVER_COLOR, "NOTE:"WHITE" You are being reconnected to the server - please wait...");
	SavePlayerVariables(targetid);
	ResetPlayer(targetid);
	pData[targetid][pLogged] = 0;
	GetPlayerIp(targetid, playerIP, sizeof(playerIP));
	Reconnecting[targetid] = true;
 	format(ReconnectIP[targetid], MAX_IP_SIZE, "%s", playerIP);
  	format(string, sizeof(string), "banip %s", playerIP);
   	SendRconCommand(string);
	return 1;
}

CMD:setint(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid, interiorid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, interiorid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setint [playerid] [int]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!(0 <= interiorid <= 19))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid interior. Valid interiors range from 0 to 19.");
	}

	SetPlayerInterior(targetid, interiorid);
	SM(playerid, COLOR_GREY2, "%s's interior set to ID %i.", GetRPName(targetid), interiorid);
	return 1;
}

CMD:setvw(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid, worldid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, worldid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setvw [playerid] [vw]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SetPlayerVirtualWorld(targetid, worldid);
	SM(playerid, COLOR_GREY2, "%s's virtual world set to ID %i.", GetRPName(targetid), worldid);
	return 1;
}

CMD:cureleg(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_GREY, "USAGE:"WHITE" /cureleg [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" The player specified is disconnected.");
	}
	if(!pData[targetid][pBrokenLeg])
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" The player specified has no broken legs.");
	}

	pData[targetid][pBrokenLeg] = 0;
	
	//SetPlayerSpecialTag(targetid, TAG_NONE);

	SCM(targetid, COLOR_YELLOW, "Your broken leg was cured by an admin.");
	SAM(SERVER_COLOR, ""RED"AdmCmd: %s"WHITE" has cured %s's broken legs.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:doublesalary(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new DCC_Channel:channell = DCC_FindChannelById("1261580721403985981");
	
    if(pData[playerid][pAdmin] >= 7)
    {
		new string[128];

		if(DoubleSalary)
		{
		  	format(string, sizeof(string), ""TEAL"AdmWarning"WHITE": %s has just disabled the Double Salary feature.", GetPlayerNameEx(playerid));
			SAM(COLOR_TEAL, string, 2);

			SendClientMessageToAll(COLOR_LIGHTRED, "Double Salary has been disabled by an Admin.");
			SendClientMessageToAll(COLOR_TEAL, "You will no longer receive double payments after working on your job!");

			DoubleSalary = 0;
			new str[500], footer[500], str2[250];
			format(str2, sizeof(str2), "https://cdn.discordapp.com/attachments/1154992826057248840/1155007334645497867/20230923_1303331.gif");
		
			format(str, sizeof(str), "Double Salary is ended on the city \n\n**__ENJOY PLAYING!__**");
			new DCC_Embed:embed = DCC_CreateEmbed();
			DCC_SetEmbedTitle(embed, "Announcement!");
			DCC_SetEmbedDescription(embed, str);
			DCC_SetEmbedColor(embed, 0xFF0000);
			format(footer, sizeof(footer), " **Manila Reality**");
			DCC_SetEmbedFooter(embed, footer);
			DCC_SetEmbedThumbnail(embed, "https://cdn.discordapp.com/attachments/1271844972072669194/1271845059267924099/received_1047611713697257.jpg");
			DCC_SetEmbedImage(embed, str2);
			DCC_SendChannelEmbedMessage(channell, embed);

		}
		else
		{
		  	format(string, sizeof(string), ""TEAL"AdmWarning"WHITE": %s has just enabled the Double Salary feature.", GetPlayerNameEx(playerid));
			SAM(COLOR_TEAL, string, 2);

			SendClientMessageToAll(COLOR_LIGHTGREEN, "Double Salary has been enabled by an Admin.");
			SendClientMessageToAll(COLOR_TEAL, "You will now receive double payments after working on your job! (Ex: $10,000 -> $20,000) 2X!");

		    DoubleSalary = 1;
			new str[500], footer[500], str2[250];
			format(str2, sizeof(str2), "https://cdn.discordapp.com/attachments/1154992826057248840/1155007334645497867/20230923_1303331.gif");
		
			format(str, sizeof(str), "Double Salary is now enabled on the city \n\n**__PLAY WITH US NOW__**");
			new DCC_Embed:embed = DCC_CreateEmbed();
			DCC_SetEmbedTitle(embed, "Announcement!");
			DCC_SetEmbedDescription(embed, str);
			DCC_SetEmbedColor(embed, 0xFF0000);
			format(footer, sizeof(footer), " **Manila Reality*");
			DCC_SetEmbedFooter(embed, footer);
			DCC_SetEmbedThumbnail(embed, "https://cdn.discordapp.com/attachments/1271844972072669194/1271845059267924099/received_1047611713697257.jpg");
			DCC_SetEmbedImage(embed, str2);
			DCC_SendChannelEmbedMessage(channell, embed);

		}
	}
	return 1;
}



CMD:revive(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;
	new reason[64];

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /revive [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not injured.");
	}

	new TokyoDMedic, Float:X, Float:Y, Float:Z, Float:A;
	GetPlayerFacingAngle(targetid, A);
	GetPlayerPos(targetid, X, Y, Z);
    TokyoDMedic = CreateActor(70, X, Y, Z, A);
    SetActorVirtualWorld(TokyoDMedic, GetPlayerVirtualWorld(targetid));
    ApplyActorAnimation(TokyoDMedic, "MEDIC", "CPR", 4.0, 0, 0, 0, 1, 0);	
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has revived %s. REASON: %s", GetRPName(playerid), GetRPName(targetid), reason);    
	SetTimerEx("BotReviveByAdministrator", 8500, false, "iii", TokyoDMedic, playerid, targetid);
	return 1;
}

forward BotReviveByAdministrator(TokyoDMedic, playerid, targetid);
public BotReviveByAdministrator(TokyoDMedic, playerid, targetid)
{
	UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "");
	TextDrawHideForPlayer(targetid, Text:DieText);
	TextDrawHideForPlayer(targetid, Text:InjuredText);
	DestroyActor(TokyoDMedic);
	pData[targetid][pInjured] = 0;
	pData[targetid][pHunger] = 100;
	pData[targetid][pHungerTimer] = 0;
    pData[targetid][pThirst] = 100;
	pData[targetid][pThirstTimer] = 0;
    //pData[targetid][pStress] = 100;
	//pData[targetid][pStressTimer] = 0;
	//pData[targetid][pPEE] = 0;
	//pData[targetid][pPEETimer] = 0;	
	pData[targetid][pBleeding] = 0;
	pData[targetid][pBrokenLeg] = 0;
    TogglePlayerControllable(targetid, 1);
	SetPlayerHealth(targetid, 100.0);
	ClearAnimations(targetid, 1);
	UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "");	

	if(pData[targetid][pAcceptedEMS] != INVALID_PLAYER_ID)
	{
	    SM(pData[targetid][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has somehow found the strength to get up.", GetRPName(targetid));
	    pData[targetid][pAcceptedEMS] = INVALID_PLAYER_ID;
	}
	ApplyAnimationEx(targetid, "PED", "getup_front", 4.0, 0, 1, 1, 0, 0);
	SCM(targetid, COLOR_YELLOW, "You have been revived by an admin!");
}
forward BotReviveByAdministrator1(TokyoDMedic, playerid);
public BotReviveByAdministrator1(TokyoDMedic, playerid)
{
	UpdateDynamic3DTextLabelText(InjuredLabel[playerid], COLOR_DOCTOR, "");
	TextDrawHideForPlayer(playerid, Text:DieText);
	TextDrawHideForPlayer(playerid, Text:InjuredText);
	DestroyActor(TokyoDMedic);
	pData[playerid][pInjured] = 0;
	pData[playerid][pHunger] = 100;
	pData[playerid][pHungerTimer] = 0;
    pData[playerid][pThirst] = 100;
	pData[playerid][pThirstTimer] = 0;
    //pData[playerid][pStress] = 100;
	//pData[playerid][pStressTimer] = 0;
	//pData[playerid][pPEE] = 0;
	//pData[playerid][pPEETimer] = 0;	
	pData[playerid][pBleeding] = 0;
	pData[playerid][pBrokenLeg] = 0;
    TogglePlayerControllable(playerid, 1);
	SetPlayerHealth(playerid, 100.0);
	ClearAnimations(playerid, 1);
	UpdateDynamic3DTextLabelText(InjuredLabel[playerid], COLOR_DOCTOR, "");	

	if(pData[playerid][pAcceptedEMS] != INVALID_PLAYER_ID)
	{
	    SM(pData[playerid][pAcceptedEMS], COLOR_YELLOW, "Your patient %s has somehow found the strength to get up.", GetRPName(playerid));
	    pData[playerid][pAcceptedEMS] = INVALID_PLAYER_ID;
	}
	ApplyAnimationEx(playerid, "PED", "getup_front", 4.0, 0, 1, 1, 0, 0);
	SCM(playerid, COLOR_YELLOW, "You have been revived by an admin!");
}

CMD:heject(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /heject [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pHospital])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not in hospital.");
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s ejected %s from the hospital.", GetRPName(playerid), GetRPName(targetid));

	pData[targetid][pHospitalTime] = 1;
	SCM(targetid, COLOR_YELLOW, "You have been ejected from hospital by an admin!");
	return 1;
}

stock ReturnName(playerid)
{
	new
		color, sz_playerName[MAX_PLAYER_NAME];

	if(!isnull(pData[playerid][pUsername]))
	{
		if((color = GetPlayerColor(playerid)) == 0xFFFFFF00)
		{
	        color = 0xAAAAAAFF;
		}
	    format(sz_playerName, sizeof(sz_playerName), "{%06x}%s", color >>> 8, pData[playerid][pUsername]);
	}
	else
	{
		GetPlayerName(playerid, sz_playerName, MAX_PLAYER_NAME);
	}
	return sz_playerName;
}


stock UploadAntiCheatSettings()
{
	printf("[LoadAntiCheat] Loading data from database...");
    mysql_function_query(connectionID, "SELECT * FROM `anticheat_settings`", true, "UploadAntiCheat", "");
}

forward UploadAntiCheat();
public UploadAntiCheat()
{
    new rows = cache_num_rows(), tick = GetTickCount();

	if (!rows)
	{
        print("[MySQL]: Anti-cheat settings were not found in the database. Loading of the mod stopped - configure anti-cheat. ");
        return GameModeExit();
    }

    for(new i = 0; i < AC_MAX_CODES; i++)
    {
        AC_CODE_TRIGGER_TYPE[i] = cache_get_field_content_int(i, "ac_code_trigger_type");

        if (AC_CODE_TRIGGER_TYPE[i] == AC_CODE_TRIGGER_TYPE_DISABLED) {
            EnableAntiCheat(i, 0);
        }
    }

    new mes[128];
    format(mes, sizeof(mes), "[ANTICHEAT]: Anti-cheat settings loaded successfully (loaded: %i). Time: %i Ð¼Ñ.", rows, GetTickCount() - tick);
    print(mes);

    return 1;
}

forward OnCheatDetected(playerid, ip_address[], type, code);
public OnCheatDetected(playerid, ip_address[], type, code)
{
    if (type == AC_GLOBAL_TRIGGER_TYPE_PLAYER)
    {
        switch(code)
        {
            case 5, 6, 11, 22:
            {
                return 1;
            }
            case 32: // CarJack
            {
                new
                    Float:x,
                    Float:y,
                    Float:z;

                AntiCheatGetPos(playerid, x, y, z);
                return SetPlayerPos(playerid, x, y, z);
            }
            default:
            {
                if (gettime() - pAntiCheatLastCodeTriggerTime[playerid][code]  < AC_TRIGGER_ANTIFLOOD_TIME)
                    return 1;

                pAntiCheatLastCodeTriggerTime[playerid][code] = gettime();
                AC_CODE_TRIGGERED_COUNT[code]++;

                new trigger_type = AC_CODE_TRIGGER_TYPE[code];

                switch(trigger_type)
                {
                    case AC_CODE_TRIGGER_TYPE_DISABLED: return 1;
                    case AC_CODE_TRIGGER_TYPE_WARNING:
                    {
                    	new str[128];
                    	format(str, sizeof(str),"SECURITY[BOT]"YELLOW"%s[%d] suspected of using cheat programs: %s.", GetRPName(playerid), playerid, AC_CODE_NAME[code]);
                    	SendAdminMessage(COLOR_RED, str);
						new szString[528];
						format(szString, sizeof(szString), "SECURITY[BOT]%s[%d] suspected of using cheat programs: %s.", GetRPName(playerid), playerid, AC_CODE_NAME[code]);
						SendDiscordMessage(22, szString); 
                    }
                    case AC_CODE_TRIGGER_TYPE_KICK:
                    {
                    	new str[128];
                    	format(str, sizeof(str),"SECURITY[BOT]"YELLOW"%s[%d] was kicked on suspicion of using cheat programs: %s [code: %03d].", GetRPName(playerid), playerid, AC_CODE_NAME[code]);
                    	SendAdminMessage(COLOR_RED, str);
                        
						new szString[528];
						format(szString, sizeof(szString), "SECURITY[BOT]%s[%d] was kicked on suspicion of using cheat programs: %s [code: %03d].", GetRPName(playerid), playerid, AC_CODE_NAME[code]);
						SendDiscordMessage(22, szString); 
						
						SM(playerid, COLOR_YELLOW, "You were kicked on suspicion of using cheat programs: %s.", AC_CODE_NAME[code]);
                        AntiCheatKickWithDesync(playerid, code);
                    }
                }
            }
        }
    }
    else // AC_GLOBAL_TRIGGER_TYPE_IP
    {
        AC_CODE_TRIGGERED_COUNT[code]++;
        new str[128];
        format(str, sizeof(str),"<AC-BAN-IP> IP address %s was blocked: %s [code: %03d].", ip_address, AC_CODE_NAME[code], code);
        SendAdminMessage(COLOR_RED, str);
        BlockIpAddress(ip_address, 0);
    }
    return 1;
}

stock ShowPlayer_AntiCheatSettings(playerid)
{
    static
        dialog_string[42 + 19 - 8 + (AC_MAX_CODE_LENGTH + AC_MAX_CODE_NAME_LENGTH + AC_MAX_TRIGGER_TYPE_NAME_LENGTH + 10)*AC_MAX_CODES_ON_PAGE] = EOS;

    new
        triggeredCount = 0,
        page = pAntiCheatSettingsPage{playerid},
        next = 0,
        index = 0;

    dialog_string = "Name\tPunishment\tNumber of positives\n";

    for(new i = 0; i < AC_MAX_CODES; i++)
    {
        if (i >= (page * AC_MAX_CODES_ON_PAGE) && i < (page * AC_MAX_CODES_ON_PAGE) + AC_MAX_CODES_ON_PAGE)
            next++;

        if (i >= (page - 1) * AC_MAX_CODES_ON_PAGE && i < ((page - 1) * AC_MAX_CODES_ON_PAGE) + AC_MAX_CODES_ON_PAGE)
        {
            triggeredCount = AC_CODE_TRIGGERED_COUNT[i];

            format(dialog_string, sizeof(dialog_string), "%s[%s] %s\t%s\t%d\n",
                dialog_string,
                AC_CODE[i],
                AC_CODE_NAME[i],
                AC_TRIGGER_TYPE_NAME[AC_CODE_TRIGGER_TYPE[i]],
                triggeredCount);

            pAntiCheatSettingsMenuListData[playerid][index++] = i;
        }
    }

    if (next)
        strcat(dialog_string, ""AC_DIALOG_NEXT_PAGE_TEXT"\n");

    if (page > 1)
        strcat(dialog_string, AC_DIALOG_PREVIOUS_PAGE_TEXT);

    return ShowPlayerDialog(playerid, ANTICHEAT_SETTINGS, DIALOG_STYLE_TABLIST_HEADERS, "Anti-cheat settings", dialog_string, "Select", "Cancel");
}

//The function of showing the menu for editing the type of triggering of a certain code in anti-cheat
stock ShowPlayer_AntiCheatEditCode(playerid, code)
{
    new
        dialog_header[22 - 4 + AC_MAX_CODE_LENGTH + AC_MAX_CODE_NAME_LENGTH],
        dialog_string[AC_MAX_TRIGGER_TYPE_NAME_LENGTH*AC_MAX_TRIGGER_TYPES];

    format(dialog_header, sizeof(dialog_header), "Code: %s | Name: %s", AC_CODE[code], AC_CODE_NAME[code]); //ÐÐ°Ð·Ð²Ð°Ð½Ð¸Ðµ

    for(new i = 0; i < AC_MAX_TRIGGER_TYPES; i++)
    {
        strcat(dialog_string, AC_TRIGGER_TYPE_NAME[i]);

        if (i + 1 != AC_MAX_TRIGGER_TYPES)
            strcat(dialog_string, "\n");
    }

    return ShowPlayerDialog(playerid, ANTICHEAT_EDIT_CODE, DIALOG_STYLE_LIST, dialog_header, dialog_string, "Select", "Return");
}

CMD:acmenu(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 7 && !IsPlayerAdmin(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

    pAntiCheatSettingsPage{playerid} = 1; // Set the variable that stores the page number the player is on to the value 1 (that is, now the player is on page 1)
    return ShowPlayer_AntiCheatSettings(playerid); // Show the player the main anti-cheat settings dialog
}


CMD:tabs(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new szDialog[(1024 * 2)], title[128];

	foreach(new i : Player)
	{

		format(szDialog, sizeof(szDialog), "%s%d\t%s\t%d\n", szDialog, i, ReturnName(i), GetPlayerPing(i));
	}

	format(title, sizeof(title), "%s (%d/%d)", SERVER_NAME, Iter_Count(Player), MAX_PLAYERS);
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, title, szDialog, "Close", "");
	return 1;
}

CMD:stopanim(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(!CanPlayerUseAnims(playerid))
	{
	    return SendClientMessage(playerid, COLOR_ERROR, "[ERROR]{ffffff} You're currently unable to use this command at this moment.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pAcceptedHelp] || pData[playerid][pMiningTime] > 0 || pData[playerid][pButcherTime] > 0 || pData[playerid][pCleanTime] > 0 || pData[playerid][pTacotime] > 0 || pData[playerid][pBurritotime] > 0 || pData[playerid][pDemolitionTime] > 0 || pData[playerid][pFishTime] > 0 || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(pData[playerid][pEquipVest] == true)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
    pData[playerid][pLoopAnim] = 0;

   	ClearAnimations(playerid, 1);
   	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
	TextDrawHideForPlayer(playerid, AnimationTD);

	SetPlayerSkin(playerid, GetPlayerSkin(playerid));
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    SendClientMessage(playerid, -1, "Animations cleared.");
    return 1;
}

CMD:tracehouse(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new houseid;
	if(sscanf(params, "i", houseid))
	{
 		return SendClientMessage(playerid, SERVER_COLOR, "[?]: "WHITE"/tracehouse [houseid]");
	}
	if(!HouseInfo[houseid][hExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "The specified house id is invalid or doesn't exist.");
	}
	SetPlayerCheckpoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 3.0);
	SendClientMessage(playerid, COLOR_AQUA, "Checkpoint set.");
	return 1;
}


CMD:setchoptimer(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new hours;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", hours))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setchoptimer [hours]");
	}
	if(hours < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Hours can't be below 0.");
	}

	ChopInfo[cTime] = hours;
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the chop chop timer to %i hours.", GetRPName(playerid), hours);
	return 1;
}
CMD:setrobtimer(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new hours;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", hours))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setrobtimer [hours]");
	}
	if(hours < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Hours can't be below 0.");
	}

	RobInfo[rTime] = hours;
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has reset the Robbery timer to %i hours.", GetRPName(playerid), hours);
	return 1;
}
CMD:chopvehiclessss(playerid, params[]) {
	new vehid = GetPlayerVehicleID(playerid);
	new clientMessage[128];
	if(ChopInfo[cTime] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "Chop chop cooldown %i hours. You can't chop it now.", ChopInfo[cTime]);
	}
	if((gettime() - pData[playerid][pLastChop]) < 7200000)
	{
		return SCM(playerid, COLOR_TEAL, "Error:"WHITE" You need to wait "WHITE"2 hours"TEAL" before sending another message.");
	}
	if(IsLawEnforcement(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't chop the vehicle as a law enforcer. Ask your boss for a raise.");
	}
	new count;
	foreach(new i : Player)
	{
	    if(IsSheriff(i))
	    {
	        count++;
		}
	}

	if(count < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There needs to be at least 4+ SHERIFF's online in order to chop this vehicle.");
	}
	/*new count;
	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i))
	    {
	        count++;
		}
	}

	if(count < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There needs to be at least 4+ Leo's online in order to chop this vehicle.");
	}*/
	if(!VehicleInfo[vehid][vOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle isn't owned by any particular person.");
	}
	// If player isn't in a car (driver or passenger), abort.
	if(!IsPlayerInAnyVehicle(playerid)) {
		SendClientMessageEx(playerid, COLOR_GREY, " You need to be in a car to sell it.");
		return 1;
	}
	// If player isn't at the drop point, abort.
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, -284.4217, 2657.7686, 62.2036)) {
		SendClientMessageEx(playerid, COLOR_GREY, " You need to be at the chop shop to chop a stolen car.");
		return 1;
	}

	// If player isn't high enough level, abort.
	if(pData[playerid][pLevel] < 2) {
		SendClientMessageEx(playerid, COLOR_GREY, "You have to be level 2 or higher to be able to sell stolen vehicles.");
		return 1;
	}

	GameTextForPlayer(playerid, "~r~Chopping Vehicle~n~~w~it will take 3 minutes...", 180000, 3);
	TogglePlayerControllable(playerid, 0);
	SetTimerEx("ChoppingVehicle", 180000, false, "i", playerid);
	
	//GameTextForPlayer(playerid, "~r~Chopping Vehicle~n~~w~it will take 3 minutes...", 5000, 3);
	//TogglePlayerControllable(playerid, 0);
	//SetTimerEx("ChoppingVehicle", 5000, false, "i", playerid);
	
	// Send RR a GPS coord to where the car was dumped.
	format(clientMessage, sizeof(clientMessage), "____________ DISPATCH PANEL _____________");
	SendFactionTypeMessage(FACTION_SHERIFF, COLOR_YELLOW, clientMessage);
	format(clientMessage,sizeof(clientMessage),"A "TEAL"%s"WHITE" has been reported "TEAL"vehicle stolen"WHITE". Location sent to your GPS...", GetVehicleName(vehid));
	SendFactionTypeMessage(FACTION_SHERIFF, COLOR_WHITE, clientMessage);
	pData[playerid][pLastChop] = gettime();
	
	ResetChop();
	
	foreach(new p : Player)
	{
		if(GetFactionType(p) == FACTION_SHERIFF)
		{
			SetPlayerCheckpoint(p, -284.4217, 2657.7686, 62.2036, 4.0);
		}
	}
	return 1;
}
stock SendFactionTypeMessage(type, color, string[])
{
	for(new i = 0; i < MAX_FACTIONS; i++) {
		if(FactionInfo[i][fType] == type)
		{
			foreach(new x : Player) {
				if(pData[x][pFaction] == i) {
					SendClientMessageEx(x, color, string);
				}
			}
		}
	}
}
forward ChoppingVehicle(playerid);
public ChoppingVehicle(playerid)
{
	new chopchop, materials, clientMessage[128];
	chopchop = Random(10000, 20000);
	materials = Random(250, 500);

	GivePlayerDirtyCash(playerid, chopchop); // Ka-ching.
	GivePlayerMaterials(playerid, materials); // Ka-ching.

	// Congratulate the bastard thief.	
	format(clientMessage, sizeof(clientMessage), "You earned "GREEN"$%d dirty cash "WHITE"and "TEAL"%d Materials "WHITE" for the stolen vehicle.", chopchop, materials);
	SendClientMessageEx(playerid, COLOR_WHITE, clientMessage);

	// Notify the vehicle owner his car has been stolen.
	format(clientMessage, sizeof(clientMessage), "Your "TEAL"vehicle"WHITE" has been reported stolen.");
	SCM(playerid, COLOR_WHITE, clientMessage);
	
	TogglePlayerControllable(playerid, 1);
	
	new vehid = GetPlayerVehicleID(playerid);
	foreach(new i : Player) { // Iterate through playerid of every logged in player
		for(new v=0; v<LIMIT_VEHICLES; v++)
		{
	 		VehicleInfo[vehid][vStolen] = 1;

		  	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET broken = '1', pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehid][vPosX], VehicleInfo[vehid][vPosY], VehicleInfo[vehid][vPosZ], VehicleInfo[vehid][vPosA], VehicleInfo[vehid][vInterior], VehicleInfo[vehid][vWorld], VehicleInfo[vehid][vID]);
			mysql_tquery(connectionID, queryBuffer);
			SetVehicleToRespawn(vehid);
		}
	}
	return 1;
}

CMD:breakcuffs(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	static
		userid;

	if (sscanf(params, "u", userid))
	    return SendClientMessage(playerid, COLOR_GREY, "Usage: /breakcuffs [playerid/name]");

	if (pData[playerid][pCrowbar] == 0)
	    return SendClientMessageEx(playerid, COLOR_GREY, "You don't have a crowbar.");

	if (userid == INVALID_PLAYER_ID || !IsPlayerInRangeOfPlayer(playerid, userid, 6.0))
	    return SendClientMessageEx(playerid, COLOR_GREY, "The specified player is disconnected or not near you.");

	if (!pData[userid][pCuffed])
	    return SendClientMessageEx(playerid, COLOR_GREY, "The specified player is not cuffed.");

	if (userid == playerid)
	    return SendClientMessageEx(playerid, COLOR_GREY, "You can't pick your own handcuffs.");

	SetTimerEx("BreakCuffs", 3000, false, "dd", playerid, userid);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s attempts to pick the cuffs with a crowbar.", GetRPName(playerid));
	return 1;
}
forward BreakCuffs(playerid, userid);
public BreakCuffs(playerid, userid)
{

	if (random(2))
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "You have failed to pick the cuffs.");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s has failed to pick the cuffs.", GetRPName(playerid));
	}
	else
	{
	    pData[userid][pCuffed] = 0;
	    TogglePlayerControllable(userid, 1);
	    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

	    SendClientMessage(playerid, COLOR_GREEN, "You have picked the cuffs.");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s has picked the cuffs from %s's wrists.", GetRPName(playerid), GetRPName(userid));
	}
	return 1;
}


ProxDetectorS(Float:radi, playerid, targetid) {

    if(pData[playerid][pAdmin] < 2)
    {
    	return 0;
    }

	new
		Float: fp_playerPos[3];

	GetPlayerPos(targetid, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]);

	if(IsPlayerInRangeOfPoint(playerid, radi, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
	{
		return 1;
	}
	return 0;
}
CMD:nearplayers(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] >= 1) {
		new szDialog[(1024 * 2)], Float:range, Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

		if(sscanf(params, "f", range)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /nearplayers [range]");
		if(range < 1 || range > 100) return SendClientMessageEx(playerid, COLOR_WHITE, "Range can't go low as 1 and can't go high as 100.");

		foreach(new i : Player)
		{
			if(ProxDetectorS(range, playerid, i) && i != playerid)
			{
				new Float:point = GetPlayerDistanceFromPoint(i, x, y, z);
				format(szDialog, sizeof(szDialog), "%s%d\t%s\t%.1f far away from you\n", szDialog, i, ReturnName(i), point);
			}
		}
		
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "Players Near You", szDialog, "Close", "");
	}
	return 1;
}
CMD:goto(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

    if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /goto [playerid/location]");
 		SCM(playerid, COLOR_WHITE, "Locations: LS, SF, LV, Idlewood, Taco, Jefferson, Bank");
 		SCM(playerid, COLOR_WHITE, "Locations: Dealership, DMV, Allsaints, Mall, VIP");
		return 1;
	}

	if(!strcmp(params, "ls", true))
    {
		TeleportToCoords(playerid, 1513.6383,-1660.1371,13.5469, 90.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Los Santos.");
		new szString[528];
		format(szString, sizeof(szString), "%s has teleported to LS.", GetRPName(playerid));
		SendDiscordMessage(24, szString);
    }
    else if(!strcmp(params, "sf", true))
    {
		TeleportToCoords(playerid,-1425.9913,-294.0131,14.0000, 135.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to San Fierro.");
		new szString[528];
		format(szString, sizeof(szString), "%s has teleported to Sf.", GetRPName(playerid));
		SendDiscordMessage(24, szString);
    }
    else if(!strcmp(params, "lv", true))
    {
		TeleportToCoords(playerid, 1689.0994,1453.3428,10.7673, 270.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to LV.");
		
		new szString[528];
		format(szString, sizeof(szString), "%s has teleported to lv.", GetRPName(playerid));
		SendDiscordMessage(24, szString);
    }

    else if(!strcmp(params, "idlewood", true))
    {
		TeleportToCoords(playerid,2088.6912,-1814.9818,13.3904, 90.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Idlewood.");
		new szString[528];
		format(szString, sizeof(szString), "%s has teleported to idlewood.", GetRPName(playerid));
		SendDiscordMessage(24, szString);
	}
    else if(!strcmp(params, "taco", true))
    {
		TeleportToCoords(playerid, 1827.5704,-1858.4159,13.5781, 0.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Taco.");
		new szString[528];
		format(szString, sizeof(szString), "%s has teleported to taco.", GetRPName(playerid));
		SendDiscordMessage(24, szString);
    }
    else if(!strcmp(params, "jefferson", true))
    {
		TeleportToCoords(playerid,2222.3438,-1164.5013,25.7331, 0.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Jefferson Motel.");
		new szString[528];
		format(szString, sizeof(szString), "%s has teleported to Jefferson.", GetRPName(playerid));
		SendDiscordMessage(24, szString);
    }
    else if(!strcmp(params, "bank", true))
    {
        TeleportToCoords(playerid,1462.6224,-1039.8104,23.8281, 180.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Mulholland bank.");
		new szString[528];
		format(szString, sizeof(szString), "%s has teleported to Mulholland bank.", GetRPName(playerid));
		SendDiscordMessage(24, szString);
    }
    else if(!strcmp(params, "dealership", true))
    {
		TeleportToCoords(playerid, 2123.5115,-1901.6442,13.5469, 180.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Grotti dealership.");
		new szString[528];
		format(szString, sizeof(szString), "%s has teleported to dealership.", GetRPName(playerid));
		SendDiscordMessage(24, szString);
    }
	else if(!strcmp(params, "dmv", true))
    {
        TeleportToCoords(playerid, 2488.4937,-1938.1602,13.3422, 180.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to DMV.");
		new szString[528];
		format(szString, sizeof(szString), "%s has teleported to DMV.", GetRPName(playerid));
		SendDiscordMessage(24, szString);
	}
	else if(!strcmp(params, "allsaints", true))
    {
        TeleportToCoords(playerid, 1189.6854,-1325.0042,13.5671, 270.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Allsaints.");
		new szString[528];
		format(szString, sizeof(szString), "%s has teleported to Allsaints.", GetRPName(playerid));
		SendDiscordMessage(24, szString);
	}
	else if(!strcmp(params, "mall", true))
    {
        TeleportToCoords(playerid, 1129.8312,-1412.4604,13.6164, 357.0000, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to Mall.");
		new szString[528];
		format(szString, sizeof(szString), "%s has teleported to Mall.", GetRPName(playerid));
		SendDiscordMessage(24, szString);
	}
	else if(!strcmp(params, "vip", true))
    {
        TeleportToCoords(playerid, 1816.6750,-1575.0692,13.5469, 225.1041, 0, 0);
        SCM(playerid, COLOR_GREY2, "Teleported to VIP LOUNGE.");
		new szString[528];
		format(szString, sizeof(szString), "%s has teleported to vipLOUNGE.", GetRPName(playerid));
		SendDiscordMessage(24, szString);
	}
	else
	{
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(!IsPlayerSpawned(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
		}

		TeleportToPlayer(playerid, targetid);
		SM(playerid, COLOR_GREY2, "Teleported to %s's position.", GetRPName(targetid));
		new szString[528];
		format(szString, sizeof(szString), "%s has teleported to %s's position", GetRPName(playerid), GetRPName(targetid));
		SendDiscordMessage(24, szString);		
		
	}

	return 1;
}

CMD:gethere(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

    if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gethere [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	/*if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}*/
    if(pData[targetid][pPaintball])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is currently in the paintball arena.");
	}
	
	TeleportToPlayer(targetid, playerid);
	SM(playerid, COLOR_GREY2, "Teleported %s to your position.", GetRPName(targetid));
	new szString[528];
	format(szString, sizeof(szString), "%s use gethere to %s.", GetRPName(playerid),GetRPName(targetid));
	SendDiscordMessage(24, szString);
	return 1;
}

CMD:gotocar(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotocar [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle specified.");
	}

	TeleportToVehicle(playerid, vehicleid);
	SM(playerid, COLOR_GREY2, "Teleported to vehicle ID %i.", vehicleid);
	new szString[528];
	format(szString, sizeof(szString), "%s Teleported to vehicle ID %i.",GetRPName(playerid), vehicleid);
	SendDiscordMessage(24, szString);  
	return 1;
}

CMD:getcar(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /getcar [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle specified.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetVehiclePos(vehicleid, x + 1, y + 1, z + 2.0);

	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	SM(playerid, COLOR_GREY2, "Teleported vehicle ID %i to your position.", vehicleid);
	new szString[528];
	format(szString, sizeof(szString), "%s Teleported vehicle ID %i to your position.",GetRPName(playerid), vehicleid);
	SendDiscordMessage(24, szString); 	
	return 1;
}

CMD:gotoco(playerid, params[]) { return callcmd::gotocoords(playerid, params); }
CMD:gotocoords(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new Float:x, Float:y, Float:z, interiorid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "fffI(0)", x, y, z, interiorid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotocoords [x] [y] [z] [int (optional)]");
	}

	SetPlayerPos(playerid, x, y, z);
	SetPlayerInterior(playerid, interiorid);
	return 1;
}

CMD:gotoint(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	static list[4096];

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(isnull(list))
	{
	    for(new i = 0; i < sizeof(interiorArray); i ++)
	    {
	        format(list, sizeof(list), "%s\n%s", list, interiorArray[i][intName]);
		}
	}

	ShowPlayerDialog(playerid, DIALOG_INTERIORS, DIALOG_STYLE_LIST, "Choose an interior to teleport to.", list, "Select", "Cancel");
	return 1;
}

CMD:jetpack(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;
    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /jetpack [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
    pData[targetid][pJetpack] = 1;
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_USEJETPACK);
	GameTextForPlayer(targetid, "~g~Jetpack", 3000, 3);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has given a jetpack to %s.", GetRPName(playerid), GetRPName(targetid));
	switch(random(4))
	{
	    case 0: SCM(targetid, COLOR_WHITE, "The jetpack is part of an experiment conducted at the Area 69 facility.");
	    case 1: SCM(targetid, COLOR_WHITE, "You stole this from Area 69 in that one single player mission. Remember?");
	    case 2: SCM(targetid, COLOR_WHITE, "You probably don't need this anyway. All you hackers seem to do is airbreak around the map.");
	}
	new szString[528];
	format(szString, sizeof(szString), "%s has given a jetpack to %s",GetRPName(playerid), GetRPName(targetid));
	SendDiscordMessage(24, szString); 
	return 1;
}


CMD:sendloc(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}

    new targetid;
    
	if(sscanf(params, "ui", targetid))
    {
        return SCM(playerid, COLOR_SYNTAX, "Usage: /sendloc [playerid]");
    }
	if(pData[playerid][pPhone] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "You don't have a cell phone.");
		return 1;
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't send a location to your self.");
	}
	
    if(!IsPlayerConnected(targetid))
    {
        return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
    }
	pData[targetid][pLocOffer] = playerid;
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* % takes out his/her phone and use it to send location(( %s ))", GetRPName(playerid));
	SM(targetid, COLOR_AQUA, "** %s offered you to share his/her location. (/accept loc)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have offered %s your location.", GetRPName(targetid));

	return 1;
}

CMD:sendto(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, option[12], param[32];

    if(pData[playerid][pAdmin] < 1 )
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[12]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sendto [playerid] [location]");
	    SCM(playerid, COLOR_WHITE, "Locations: Player, Vehicle, LS, SF, LV, Grove, Idlewood, Unity, Jefferson, Market, Bank");
	    SCM(playerid, COLOR_WHITE, "Locations: Dealership, DMV, Casino, Allsaints, Mall, VIP, FC");
		return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	/*if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}*/
	if(pData[targetid][pJailType])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player is in jail so you can't teleport them.");
	}
	if(pData[playerid][pAdmin] < 2 && isnull(pData[targetid][pHelpRequest]) && pData[playerid][pAcceptedHelp] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't submitted a help request. Therefore you can't teleport them.");
	}

    if(!strcmp(option, "ls", true))
    {
		TeleportToCoords(targetid, 1513.6383,-1660.1371,13.5469, 90.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "You have sent %s to Los Santos.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Los Santos.", GetRPName(playerid));
		new szString[528];
		format(szString, sizeof(szString), "%s have sent %s to Los Santos.",GetRPName(playerid), GetRPName(targetid));
		SendDiscordMessage(24, szString); 
    }

    else if(!strcmp(option, "sf", true))
    {
		TeleportToCoords(targetid, -1425.9913,-294.0131,14.0000, 135.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "You have sent %s to San Fierro.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to San Fierro.", GetRPName(playerid));
		new szString[528];
		format(szString, sizeof(szString), "%s have sent %s to Sf.",GetRPName(playerid), GetRPName(targetid));
		SendDiscordMessage(24, szString); 
    }
    else if(!strcmp(option, "lv", true))
    {
		TeleportToCoords(targetid, 1689.0994,1453.3428,10.7673, 270.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "You have sent %s to Lv.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to  Lv.", GetRPName(playerid));
		new szString[528];
		format(szString, sizeof(szString), "%s have sent %s to lv.",GetRPName(playerid), GetRPName(targetid));
		SendDiscordMessage(24, szString); 
    }

    else if(!strcmp(option, "idlewood", true))
    {
		TeleportToCoords(targetid, 2088.6912,-1814.9818,13.3904, 90.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "You have sent %s to Idlewood.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Idlewood.", GetRPName(playerid));
		new szString[528];
		format(szString, sizeof(szString), "%s have sent %s to Idlewood.",GetRPName(playerid), GetRPName(targetid));
		SendDiscordMessage(24, szString);
    }
    else if(!strcmp(option, "taco", true))
    {
		TeleportToCoords(targetid, 1827.5704,-1858.4159,13.5781, 0.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "You have sent %s to taco.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to taco.", GetRPName(playerid));
		new szString[528];
		format(szString, sizeof(szString), "%s have sent %s to taco.",GetRPName(playerid), GetRPName(targetid));
		SendDiscordMessage(24, szString);
    }
    else if(!strcmp(option, "jefferson", true))
    {
		TeleportToCoords(targetid, 2222.3438,-1164.5013,25.7331, 0.0000, 0, 0);

		SM(playerid, COLOR_GREY2, "You have sent %s to Jefferson Motel.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Jefferson Motel.", GetRPName(playerid));
		new szString[528];
		format(szString, sizeof(szString), "%s have sent %s to Jefferson.",GetRPName(playerid), GetRPName(targetid));
		SendDiscordMessage(24, szString);
    }

    else if(!strcmp(option, "bank", true))
    {
        TeleportToCoords(targetid, 1462.6224,-1039.8104,23.8281, 180.0000, 0, 0);

        SM(playerid, COLOR_GREY2, "You have sent %s to the Bank.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to the Bank.", GetRPName(playerid));
		new szString[528];
		format(szString, sizeof(szString), "%s have sent %s to Bank.",GetRPName(playerid), GetRPName(targetid));
		SendDiscordMessage(24, szString);
    }
    else if(!strcmp(option, "dealership", true))
    {
		TeleportToCoords(targetid, 2123.5115,-1901.6442,13.5469, 180.0000, 0, 0);

        SM(playerid, COLOR_GREY2, "You have sent %s to Grotti car dealership.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Grotti car dealership.", GetRPName(playerid));
		new szString[528];
		format(szString, sizeof(szString), "%s have sent %s to dealership.",GetRPName(playerid), GetRPName(targetid));
		SendDiscordMessage(24, szString);
    }
    else if(!strcmp(option, "dmv", true))
    {
        TeleportToCoords(targetid,2488.4937,-1938.1602,13.3422, 180.0000, 0, 0);

        SM(playerid, COLOR_GREY2, "You have sent %s to the DMV.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to the DMV.", GetRPName(playerid));
		new szString[528];
		format(szString, sizeof(szString), "%s have sent %s to DMV.",GetRPName(playerid), GetRPName(targetid));
		SendDiscordMessage(24, szString);
    }

	else if(!strcmp(option, "allsaints", true))
    {
        TeleportToCoords(targetid,1189.6854,-1325.0042,13.5671,270.0000, 0, 0);

        SM(playerid, COLOR_GREY2, "You have sent %s to Allsaints.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Allsaints.", GetRPName(playerid));
		new szString[528];
		format(szString, sizeof(szString), "%s have sent %s to Allsaints.",GetRPName(playerid), GetRPName(targetid));
		SendDiscordMessage(24, szString);
    }
	else if(!strcmp(option, "mall", true))
    {
        TeleportToCoords(targetid, 1129.8312,-1412.4604,13.6164,357.0000, 0, 0);

        SM(playerid, COLOR_GREY2, "You have sent %s to Mall.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to Mall.", GetRPName(playerid));
		new szString[528];
		format(szString, sizeof(szString), "%s have sent %s to mall.",GetRPName(playerid), GetRPName(targetid));
		SendDiscordMessage(24, szString);
    }
    else if(!strcmp(option, "vip", true))
    {
        TeleportToCoords(targetid, 1816.6750,-1575.0692,13.5469,225.1041, 0, 0);

        SM(playerid, COLOR_GREY2, "You have sent %s to VIP LOUNGE.", GetRPName(targetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to VIP LOUNGE.", GetRPName(playerid));
		new szString[528];
		format(szString, sizeof(szString), "%s have sent %s to VIP.",GetRPName(playerid), GetRPName(targetid));
		SendDiscordMessage(24, szString);
    }
    else if(!strcmp(option, "player", true))
    {
        new sendtargetid;

        if(pData[playerid][pAdmin] < 1)
        {
            return SCM(playerid, COLOR_SYNTAX, "Only level 2+ admins can do this.");
		}
        if(sscanf(param, "u", sendtargetid))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /sendto [playerid] [player] [targetid]");
		}
		if(!IsPlayerConnected(sendtargetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The target specified is disconnected.");
		}
		/*if(!IsPlayerSpawned(sendtargetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The target specified is either not spawned, or spectating.");
		}*/

		TeleportToPlayer(targetid, sendtargetid);

		SM(playerid, COLOR_GREY2, "You have sent %s to %s's location.", GetRPName(targetid), GetRPName(sendtargetid));
		SM(targetid, COLOR_GREY2, "%s has sent you to %s's location.", GetRPName(playerid), GetRPName(sendtargetid));
		new szString[528];
		format(szString, sizeof(szString), "ADMIN %s %s to %s's location.",GetRPName(playerid),GetRPName(targetid), GetRPName(sendtargetid));
		SendDiscordMessage(24, szString);
	}
	else if(!strcmp(option, "vehicle", true))
    {
        new vehicleid;

        if(pData[playerid][pAdmin] < 1)
        {
            return SCM(playerid, COLOR_SYNTAX, "Only level 2+ admins can do this.");
		}
        if(sscanf(param, "i", vehicleid))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /sendto [playerid] [vehicle] [vehicleid]");
		}
		if(!IsValidVehicle(vehicleid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle specified.");
		}

		TeleportToVehicle(targetid, vehicleid);

		SM(playerid, COLOR_GREY2, "You have sent %s to vehicle ID %i.", GetRPName(targetid), vehicleid);
		SM(targetid, COLOR_GREY2, "%s has sent you to vehicle ID %i.", GetRPName(playerid), vehicleid);
		new szString[528];
		format(szString, sizeof(szString), "%s has sent you to vehicle ID %i..",GetRPName(playerid), vehicleid);
		SendDiscordMessage(24, szString);
	}

	return 1;
}

CMD:bigears(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::listen(playerid, params);
}

CMD:listenpm(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(!pData[playerid][pPMListen])
	{
		pData[playerid][pPMListen] = 1;
	    SCM(playerid, COLOR_AQUA, "You are now listening to all PM's % Whisper's chats.");
	}
	else
	{
		pData[playerid][pPMListen] = 0;
	    SCM(playerid, COLOR_AQUA, "You are no longer listening to PM's % Whisper's chats.");
	}

	return 1;
}
CMD:listen(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	if(!pData[playerid][pListen])
	{
		pData[playerid][pListen] = 1;
	    SCM(playerid, COLOR_AQUA, "You are now listening to all IC & local OOC chats.");
	}
	else
	{
		pData[playerid][pListen] = 0;
	    SCM(playerid, COLOR_AQUA, "You are no longer listening to IC & local OOC chats.");
	}

	return 1;
}

CMD:rwarn(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, reason[128];

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rwarn [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pReportMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is muted from reports.");
	}

	pData[targetid][pReportWarns]++;

	SM(targetid, COLOR_LIGHTRED, "** %s issued you a report warning, reason: %s (%i/3)", GetRPName(playerid), reason, pData[targetid][pReportWarns]);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s was given a report warning by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);

	if(pData[targetid][pReportWarns] >= 3)
	{
	    pData[targetid][pReportMuted] = 12;
	    SCM(targetid, COLOR_LIGHTRED, "** You have been muted from reports for 12 playing hours.");
	}

	return 1;
}

CMD:runmute(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /runmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pReportMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not muted from reports.");
	}

	pData[targetid][pReportWarns] = 0;
	pData[targetid][pReportMuted] = 0;

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s was unmuted from reports by %s.", GetRPName(targetid), GetRPName(playerid));
	SM(targetid, COLOR_YELLOW, "** Your report mute has been lifted by %s. Your report warnings were reset.", GetRPName(playerid));
	return 1;
}

CMD:amute(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_GREY, "USAGE:"WHITE" /amute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" The player specified is disconnected.");
	}

	if(pData[targetid][pAdmin] > 0 && (pData[playerid][pAdmin] < 6))
		return SCM(playerid, COLOR_ERROR, "Are you an idiot? You cannot mute your co-admins from using /am.");

	if(!pData[targetid][pAMute])
	{
	    pData[targetid][pAMute] = 1;

	    SendStaffMessage(SERVER_COLOR, ""RED"AdmCmd: %s"WHITE" was muted from admin message (/am) by %s.", GetRPName(targetid), GetRPName(playerid));
	    SCMf(targetid, SERVER_COLOR, "** You have been muted from admin message (/am) by %s.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET amuted = 1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		Log_Write("log_mute", "%s (uid: %i) was muted by %s (uid: %d) from Admin Message System (/am).", GetPlayerNameEx(targetid), pData[targetid][pID], GetPlayerNameEx(playerid), pData[playerid][pID]);
	}
	else
	{
	    pData[targetid][pAMute] = 0;

	    SendStaffMessage(SERVER_COLOR, ""RED"AdmCmd: %s"WHITE" was unmuted from admin message (/am) by %s.", GetRPName(targetid), GetRPName(playerid));
	    SCMf(targetid, COLOR_YELLOW, "** You have been unmuted from admin message (/am) by %s.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET amuted = 0 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		Log_Write("log_mute", "%s (uid: %i) was unmuted by %s (uid: %d) from Admin Message System (/am).", GetPlayerNameEx(targetid), pData[targetid][pID], GetPlayerNameEx(playerid), pData[playerid][pID]);
	}
	return 1;
}

CMD:nmute(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pAdmin] < 2 && pData[playerid][pHelper] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /nmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(!pData[targetid][pNewbieMuted])
	{
	    pData[targetid][pNewbieMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was muted from newbie chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from newbie chat by %s.", GetRPName(playerid));
	}
	else
	{
	    pData[targetid][pNewbieMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was unmuted from newbie chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from newbie chat by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:hmute(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pAdmin] < 2 && pData[playerid][pHelper] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /hmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(!pData[targetid][pHelpMuted])
	{
	    pData[targetid][pHelpMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was muted from help requests by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from help requests by %s.", GetRPName(playerid));
	}
	else
	{
	    pData[targetid][pHelpMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was unmuted from help requests by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from help requests by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:admute(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /admute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(!pData[targetid][pAdMuted])
	{
	    pData[targetid][pAdMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was muted from advertisements by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from advertisements by %s.", GetRPName(playerid));
	}
	else
	{
	    pData[targetid][pAdMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was unmuted from advertisements by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from advertisements by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:gmute(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pAdmin] < 2 && pData[playerid][pHelper] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(!pData[targetid][pGlobalMuted])
	{
	    pData[targetid][pGlobalMuted] = 1;

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was muted from global chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from global chat by %s.", GetRPName(playerid));
	}
	else
	{
	    pData[targetid][pGlobalMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was unmuted from global chat by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from global chat by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:rmute(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rmute [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(!pData[targetid][pReportMuted])
	{
	    pData[targetid][pReportMuted] = 99999;

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was muted from submitting reports by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_LIGHTRED, "** You have been muted from submitting reports by %s.", GetRPName(playerid));
	}
	else
	{
	    pData[targetid][pReportMuted] = 0;

	    SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was unmuted from submitting reports by %s.", GetRPName(targetid), GetRPName(playerid));
	    SM(targetid, COLOR_YELLOW, "** You have been unmuted from submitting reports by %s.", GetRPName(playerid));
	}

	return 1;
}
CMD:freezenear(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new Float:radius;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /freezenear [radius]");
	}
	if(!(1.0 <= radius <= 100.0))
	{
	    return SCM(playerid, COLOR_WHITE, "The radius can't be below 1.0 or above 100.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!pData[i][pAdminDuty])
		    {
			    if(GetArmor(i) < 100.0)
			    {
			         TogglePlayerControllable(i, 0);
				}
			}

		    SCM(i, COLOR_WHITE, "** An admin has frozen everyone nearby.");
		}
	}

	return 1;
}

CMD:unfreezenear(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new Float:radius;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unfreezenear [radius]");
	}
	if(!(1.0 <= radius <= 100.0))
	{
	    return SCM(playerid, COLOR_WHITE, "The radius can't be below 1.0 or above 100.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!pData[i][pAdminDuty])
		    {
			    if(GetArmor(i) < 100.0)
			    {
			         TogglePlayerControllable(i, 1);
				}
			}

		    SCM(i, COLOR_WHITE, "** An admin has unfrozen everyone nearby.");
		}
	}

	return 1;
}
CMD:freeze(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /freeze [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	TogglePlayerControllable(targetid, 0);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s was frozen by %s.", GetPlayerNameEx(targetid), GetPlayerNameEx(playerid));
	return 1;
}

CMD:unfreeze(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unfreeze [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(pData[targetid][pTazedTime])
	{
		ClearAnimations(targetid, 1);
		pData[targetid][pTazedTime] = 0;
	}

    pData[targetid][pTied] = 0;
	TogglePlayerControllable(targetid, 1);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s was unfrozen by %s.", GetPlayerNameEx(targetid), GetPlayerNameEx(playerid));
	return 1;
}

CMD:listguns(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /listguns [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, SERVER_COLOR, "%s's Weapons:", GetRPName(targetid));

	for(new i = 0; i < 13; i ++)
	{
	    new
	        weapon,
	        ammo;

	    GetPlayerWeaponData(targetid, i, weapon, ammo);

	    if(weapon)
	    {
	        if(pData[targetid][pAmmoType] != AMMOTYPE_NORMAL && pData[targetid][pAmmoWeapon] == weapon) {
	            if(pData[targetid][pAmmoType] == AMMOTYPE_HP) {
	                SM(playerid, COLOR_GREY2, "-> %s (%i ammo) (Hollow point ammo)", GetWeaponNameEx(weapon), pData[targetid][pHPAmmo]);
	            } else if(pData[targetid][pAmmoType] == AMMOTYPE_POISON) {
	                SM(playerid, COLOR_GREY2, "-> %s (%i ammo) (Poison tip ammo)", GetWeaponNameEx(weapon), pData[targetid][pPoisonAmmo]);
	            } else if(pData[targetid][pAmmoType] == AMMOTYPE_FMJ) {
	                SM(playerid, COLOR_GREY2, "-> %s (%i ammo) (FMJ ammo)", GetWeaponNameEx(weapon), pData[targetid][pFMJAmmo]);
	            }
	        }
			else if(!PlayerHasWeapon(targetid, weapon)) {
		        SM(playerid, COLOR_GREY2, "-> %s {FFD700}(Desynced){C8C8C8}", GetWeaponNameEx(weapon));
	    	} else {
            	SM(playerid, COLOR_GREY2, "-> %s", GetWeaponNameEx(weapon));
			}
		}
	}

	return 1;
}

CMD:disarm(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /disarm [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	pData[targetid][pVIPgun1] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun1 = 0 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	pData[targetid][pVIPgun2] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun2 = 0 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	pData[targetid][pVIPgun3] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun3 = 0 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	pData[targetid][pVIPgun4] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun4 = 0 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	pData[targetid][pVIPgun5] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vipgun5 = 0 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	
	ResetPlayerWeaponsEx(targetid);
	
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has disarmed %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:nrn(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /nrn [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pLevel] > 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is level 2 or above and doesn't need a free namechange.");
	}

	ShowPlayerDialog(targetid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has forced %s to change their name for being Non-RP.", GetRPName(playerid), GetRPName(targetid));
	new szString[528];
	format(szString, sizeof(szString), "%s has forced %s to change their name for being Non-RP.", GetRPName(playerid), GetRPName(targetid));
	SendDiscordMessage(24, szString);
	return 1;
}

CMD:jail(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::prison(playerid, params);
}
CMD:prisonic(playerid, params[]) return callcmd::prison(playerid, params);
CMD:prison(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, minutes, reason[128];

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /prison [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet. You can wait until they login or use /oprison.");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of minutes cannot be below one. Use /release instead.");
	}

    PlayerTextDrawShow(targetid, customHUD[targetid][1]);

    pData[targetid][pJailType] = 2;
    pData[targetid][pJailTime] = minutes * 60;

	SetPlayerInJail(targetid);
	GameTextForPlayer(targetid, "~w~Welcome to~n~~r~admin jail", 5000, 3);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET prisonedby = '%e', prisonreason = '%e' WHERE uid = %i", GetPlayerNameEx(playerid), reason, pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	GetPlayerName(playerid, pData[targetid][pPrisonedBy], MAX_PLAYER_NAME);
	strcpy(pData[targetid][pPrisonReason], reason, 128);

	new szString[528];
	format(szString, sizeof(szString), "%s has prisoned  by %s for %i minutes, reason: %s.", GetRPName(targetid), GetRPName(playerid), minutes, reason);
	SendDiscordMessage(15, szString);
	
	Log_Write("log_punishments", "%s (uid: %i) prisoned %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], minutes, reason);
    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was prisoned for %i minutes by %s, reason: %s", GetRPName(targetid), minutes, GetRPName(playerid), reason);
    SM(targetid, COLOR_AQUA, "** You have been admin prisoned for %i minutes by %s.", minutes, GetRPName(playerid));
    return 1;
}

CMD:oprison(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new username[MAX_PLAYERS], minutes, reason[128];

	if(pData[playerid][pAdmin] < 1 && pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]is[128]", username, minutes, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /oprison [username] [minutes] [reason]");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of minutes cannot be below one. Use /release instead.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /prison instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel, uid FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflinePrison", "isis", playerid, username, minutes, reason);
	return 1;
}

CMD:ocomserv(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new username[MAX_PLAYERS], minutes, reason[128];

	if(pData[playerid][pAdmin] < 1 && pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]is[128]", username, minutes, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ocomserv [username] [minutes] [reason]");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of minutes cannot be below one. Use /release instead.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /comserv instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel, uid FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineComserv", "isis", playerid, username, minutes, reason);
	return 1;
}
CMD:release(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid, reason[128];

	if(pData[playerid][pAdmin] < 3 && !IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /release [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pJailType])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not jailed.");
	}

 	PlayerTextDrawHide(targetid, customHUD[targetid][1]);

 	PlayerTextDrawHide(targetid, customHUD[targetid][1]);
	pData[targetid][pJailTime] = 1;
	SMA(COLOR_LIGHTRED, "AdmCmd: %s was released from jail/prison by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	return 1;
}

CMD:fine(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, amount, reason[128];

	if(pData[playerid][pAdmin] < 3 && pData[playerid][pHelper] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, amount, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /fine [playerid] [amount] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be fined.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid amount.");
	}

	GivePlayerCash(targetid, -amount);

	new szString[528];
	format(szString, sizeof(szString), "%s was fined $%i by %s, reason: %s", GetRPName(targetid), amount, GetRPName(playerid), reason);
	SendDiscordMessage(37, szString);

	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was fined $%i by %s, reason: %s", GetRPName(targetid), amount, GetRPName(playerid), reason);
	Log_Write("log_admin", "%s (uid: %i) fined %s (uid: %i) for $%i, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], amount, reason);
	return 1;
}

CMD:pfine(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, percent, reason[128];

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, percent, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /pfine [playerid] [percent] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(1 <= percent <= 100))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The percentage value must be between 1 and 100.");
	}

	new amount = ((pData[targetid][pCash] + pData[targetid][pBank]) / 100) * percent;

	GivePlayerCash(targetid, -amount);

	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was fined $%i by %s, reason: %s", GetRPName(targetid), amount, GetRPName(playerid), reason);
	Log_Write("log_admin", "%s (uid: %i) fined %s (uid: %i) for $%i (%i percent), reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], amount, percent, reason);
	return 1;
}

CMD:ofine(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new username[MAX_PLAYERS], amount, reason[128];

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]is[128]", username, amount, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ofine [username] [amount] [reason]");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid amount.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /fine instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineFine", "isis", playerid, username, amount, reason);
	return 1;
}

CMD:sethp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid, Float:amount;

    if(pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uf", targetid, amount))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sethp [playerid] [amount]");
	    SCM(playerid, COLOR_WHITE, "Warning: Values above 255.0 may not work properly with the server-sided damage system.");
	    return 1;
	}
	/*if(amount == 0.0)
	{
		DamagePlayer(targetid, 300, playerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
	}*/
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SetPlayerHealth(targetid, amount);
	SM(playerid, COLOR_GREY2, "%s's health set to %.1f.", GetRPName(targetid), amount);
	return 1;
}

CMD:setarmor(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid, Float:amount;

    if(pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uf", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setarmor [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SetScriptArmour(targetid, amount);
	SM(playerid, COLOR_GREY2, "%s's armor set to %.1f.", GetRPName(targetid), amount);
	return 1;
}

CMD:refillcars(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i))
	    {
	        vehicleFuel[i] = 100;
		}
	}

	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" refilled all vehicles to maximum fuel.", GetRPName(playerid));
	return 1;
}

CMD:refilldrug(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /refilldrug [seeds | Crack | ephedrine]");
	    SCM(playerid, COLOR_WHITE, "This command refills the specified drug stock to maximum value.");
	    return 1;
	}

	if(!strcmp(params, "seeds", true))
	{
	    gSeedsStock = 1000;
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has refilled the seeds in the drug den.", GetRPName(playerid));
	}
	else if(!strcmp(params, "crack", true))
	{
	    gCrackStock = 500;
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has refilled the Crack in the crack house.", GetRPName(playerid));
	}
	else if(!strcmp(params, "ephedrine", true))
	{
	    gEphedrineStock = 250;
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has refilled the ephedrine in the drug den.", GetRPName(playerid));
	}

	return 1;
}
CMD:purgegun(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!enabledpurge)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The purge is disabled at the moment.");
	}
	if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
    {
        return SCM(playerid, COLOR_SYNTAX, "you are either weapon restricted or level 1.");
    }
	GiveWeapon(playerid, 5);
	GiveWeapon(playerid, 22);
	GiveWeapon(playerid, 30);
	

	SCM(playerid, COLOR_SYNTAX,""SERVER_BOT" given you 9mm, Baseball bat, and AK-47 for the purge.");
	return 1;
}



CMD:top(playerid)
{
	ShowDialogToPlayer(playerid, DIALOG_TOP);
	return 1;
}

CMD:aheadshot(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(!IsPlayerAdmin(playerid) && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not authorized to use this command.");
	}
 	if(!HeadShotSystem)
	{
		HeadShotSystem = true;
	    SCMAf(SERVER_COLOR, "** An admin has enabled headshot.");
	}
	else
	{
		HeadShotSystem = false;
	    SCMAf(SERVER_COLOR, "** An admin has disabled headshot.");
	}
	return 1;
}

CMD:purge(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] >= 6)
	{
		enabledpurge = 1;
		foreach(Player, i)
		{
			PlayAudioStreamForPlayer(i, "https://dl.dropbox.com/s/xa50pe402itdg0l/purge.mp3?dl=0");
			SetScriptArmour(i, 100);
			SetPlayerHealth(i, 100);

			
			pData[i][pHunger] += 26;
			pData[i][pThirst] += 15;
			if (pData[playerid][pHunger] > 100)
			{
				pData[playerid][pHunger] = 100;
			}			
			if (pData[playerid][pThirst] > 100)
			{
				pData[playerid][pThirst] = 100;
			}
		}
		TextDrawShowForAll(TextdrawPURGE);
        TextDrawShowForAll(TextdrawPURGE1);
        TextDrawShowForAll(TextdrawPURGE2);
        TextDrawShowForAll(TextdrawPURGE3);
        TextDrawShowForAll(TextdrawPURGE4);
        TextDrawShowForAll(TextdrawPURGE5);
        TextDrawShowForAll(TextdrawPURGE6);
        TextDrawShowForAll(TextdrawPURGE7);
        TextDrawShowForAll(TextdrawPURGE8);
        TextDrawShowForAll(TextdrawPURGE9);
        TextDrawShowForAll(TextdrawPURGE10);
        SetTimer("hidetextdraw2", 6000, false);


	}
	return 1;
}

CMD:togpurge(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	foreach(Player, i)
	{
		PlayAudioStreamForPlayer(i, "https://www.youtube.com/watch?v=wjRG84vW_Zc");
		SetScriptArmour(i, 100);
		SetPlayerHealth(i, 100);

		RemovePlayerWeapon(i, 5);
		RemovePlayerWeapon(i, 22);
		RemovePlayerWeapon(i, 30);
		//PlayerPlaySound(i, SOUND_MUSIC3 , 1529.7422,-1673.7705, 13.6216);
		//SetPlayerWeather(i, 5);
		
	}
	enabledpurge = 0;
	SMA(SERVER_COLOR, "(( Administrator %s disabled the Purge. ))", GetRPName(playerid));
	return 1;
}
CMD:togam(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not authorized to use this command.");
	}

	if(!enabledAM)
	{
	    enabledAM = 1;
	    SCMAf(COLOR_WHITE, "(( Administrator %s enabled the Admin Messaging system. ))", GetRPName(playerid));
	}
	else
	{
	    enabledAM = 0;
	    SCMAf(COLOR_WHITE, "(( Administrator %s disabled the Admin Messaging system. ))", GetRPName(playerid));
	}
	return 1;
}


CMD:togooc(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!enabledOOC)
	{
	    enabledOOC = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s enabled the Out of Character channel. ))", GetRPName(playerid));
	}
	else
	{
	    enabledOOC = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s disabled the Out of Character channel. ))", GetRPName(playerid));
	}
	return 1;
}

/*CMD:toghs(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	HeadShotSystem = !HeadShotSystem;
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has %s the headshot system.", GetRPName(playerid), (HeadShotSystem)?("Enabled"):("Disabled"));
    return 1;
}*/

CMD:togn(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!enabledNewbie)
	{
	    enabledNewbie = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s enabled the newbie channel. ))", GetRPName(playerid));
	}
	else
	{
	    enabledNewbie = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s disabled the newbie channel. ))", GetRPName(playerid));
	}
	return 1;
}
CMD:togvip(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!enabledNewbie)
	{
	    enabledVip = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s enabled the vip channel. ))", GetRPName(playerid));
	}
	else
	{
	    enabledVip = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s disabled the vip channel. ))", GetRPName(playerid));
	}
	return 1;
}

CMD:togglobal(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!enabledGlobal)
	{
	    enabledGlobal = 1;
	    SMA(SERVER_COLOR, "(( Administrator %s enabled the global channel. ))", GetRPName(playerid));
	}
	else
	{
	    enabledGlobal = 0;
	    SMA(SERVER_COLOR, "(( Administrator %s disabled the global channel. ))", GetRPName(playerid));
	}
	return 1;
}

CMD:togadmin(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!enabledAdmin)
	{
	    enabledAdmin = 1;
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has enabled the admin channel.", GetRPName(playerid));
	}
	else
	{
	    enabledAdmin = 0;
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has disabled the admin channel.", GetRPName(playerid));
	}
	return 1;
}

CMD:togreports(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(!enabledReports)
	{
	    enabledReports = 1;
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has enabled the report channel.", GetRPName(playerid));
	}
	else
	{
	    enabledReports = 0;
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has disabled the report channel.", GetRPName(playerid));
	}
	return 1;
}

CMD:listpvehs(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

    if(pData[playerid][pAdmin] < 3)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /listpvehs [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, SERVER_COLOR, "%s's Vehicles:", GetRPName(targetid));

    for(new i = 1; i < MAX_VEHICLES; i ++)
    {
        if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && IsVehicleOwner(targetid, i))
        {
            SM(playerid, COLOR_GREY2, "ID: %i | Model: %s | Location: %s", i, GetVehicleName(i), GetVehicleZoneName(i));
		}
	}

	return 1;
}

CMD:despawnpveh(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /despawnpveh [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vehicle specified is invalid or not owned by any player.");
	}

	SM(playerid, COLOR_WHITE, "** You have despawned %s's %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid));
	DespawnVehicle(vehicleid);
	return 1;
}

CMD:veh(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new model[20], modelid, color1, color2, Float:x, Float:y, Float:z, Float:a, vehicleid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[20]I(-1)I(-1)", model, color1, color2))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /veh [modelid/name] [color1 (optional)] [color2 (optional)]");
	}
	if((modelid = GetVehicleModelByName(model)) == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle model.");
	}
	if(!(-1 <= color1 <= 255) || !(-1 <= color2 <= 255))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid color. Valid colors range from -1 to 255.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	vehicleid = AddStaticVehicleEx(modelid, x, y, z, a, color1, color2, -1);

	if(vehicleid == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Cannot spawn vehicle. The vehicle pool is currently full.");
	}
	ResetVehicleObjects(vehicleid);
	adminVehicle{vehicleid} = true;
	vehicleFuel[vehicleid] = 100;
	vehicleColors[vehicleid][0] = color1;
	vehicleColors[vehicleid][1] = color2;

	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	PutPlayerInVehicle(playerid, vehicleid, 0);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s spawned a %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	SM(playerid, COLOR_WHITE, "** %s (ID %i) spawned. Use '/savevehicle %i' to save this vehicle to the database.", GetVehicleName(vehicleid), vehicleid, vehicleid);
	return 1;
}

CMD:savevehicle(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid, gangid, type, delay, Float:x, Float:y, Float:z, Float:a;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "iiii", vehicleid, gangid, type, delay))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /savevehicle [vehicleid] [gangid (-1 = none)] [faction type] [respawn delay (seconds)]");
	    SCM(playerid, COLOR_GREY2, "Faction types: (0) None (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal (7) Mechanic (8) Doc (9) Sheriff");
	    return 1;
	}
	if(!IsValidVehicle(vehicleid) || !adminVehicle{vehicleid})
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vehicle specifiet/d is either invalid or not an admin spawned vehicle.");
	}
	if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
	}
	if(!(0 <= type <= 9))
	{
		return SendClientMessage(playerid, COLOR_GREY, "Invalid type.");
	}

    SM(playerid, COLOR_WHITE, "** %s saved. This vehicle will now spawn here from now on.", GetVehicleName(vehicleid));

	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, a);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (modelid, pos_x, pos_y, pos_z, pos_a, color1, color2, gangid, factiontype, respawndelay) VALUES(%i, '%f', '%f', '%f', '%f', %i, %i, %i, %i, %i)", GetVehicleModel(vehicleid), x, y, z, a, vehicleColors[vehicleid][0], vehicleColors[vehicleid][1], gangid, type, delay);
	mysql_tquery(connectionID, queryBuffer);
	mysql_tquery(connectionID, "SELECT * FROM vehicles WHERE id = LAST_INSERT_ID()", "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, 0);

	adminVehicle{vehicleid} = false;
	DestroyVehicleEx(vehicleid);

	return 1;
}

CMD:tab(playerid) {
    new string[MAX_PLAYER_NAME * 100], title[80], count = 0, name[MAX_PLAYER_NAME+1];
    strcat(string, "ID\tName\tLevel\tPing");
    count++;
    GetPlayerName(playerid, name, sizeof(name));
    format(string, sizeof(string), "%s\n%d\t%s\t%d\t%d", string, playerid, name, GetPlayerScore(playerid), GetPlayerPing(playerid));
    foreach(Player, i)

    {
        if(IsPlayerConnected(i) && i != playerid)
        {
            count++;
            GetPlayerName(i, name, sizeof(name));
            format(string, sizeof(string), "%s\n%d\t%s\t%d\t%d", string, i, name, GetPlayerScore(i), GetPlayerPing(i));
        }
    }
    format(title, sizeof(title), " PC:RP |  Players Online: %d", count);
    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Closed", "");
    return 1;
}

CMD:editvehicle(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid, option[14], param[32], value;

	if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[32]", vehicleid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Spawn, Tickets, Locked, Plate, Color, Paintjob, Neon, Trunk, Health");
	    SCM(playerid, COLOR_WHITE, "Available options: Gang, Faction, Job, Respawndelay");
	    return 1;
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vehicle specified is invalid or a static vehicle.");
	}

	if(!strcmp(option, "spawn", true))
	{
	    new id = VehicleInfo[vehicleid][vID];

	    if(VehicleInfo[vehicleid][vFactionType] > 0 && GetPlayerInterior(playerid) > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't set the spawn of a faction vehicle indoors.");
	    }

	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	    	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);
	    }
	    else
	    {
		    GetPlayerPos(playerid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
		    GetPlayerFacingAngle(playerid, VehicleInfo[vehicleid][vPosA]);
	    }

	    if(VehicleInfo[vehicleid][vGang] >= 0 || VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
	        VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);
	        SaveVehicleModifications(vehicleid);
	    }

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], id);
		mysql_tquery(connectionID, queryBuffer);

	 	SM(playerid, COLOR_AQUA, "** You have moved the spawn point for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
	 	SCM(playerid, COLOR_WHITE, "Note: The vehicle's ID may have changed in the mean time.");
	 	DespawnVehicle(vehicleid, false);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);
	}
	/*else if(!strcmp(option, "price", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option can only be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [price] [value]");
		}

		VehicleInfo[vehicleid][vPrice] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET price = %i WHERE id = %i", VehicleInfo[vehicleid][vPrice], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "** You have set the price of %s's %s (ID %i) to $%i.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}*/
	else if(!strcmp(option, "tickets", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option can only be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [tickets] [value]");
		}

		VehicleInfo[vehicleid][vTickets] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "** You have set the tickets of %s's %s (ID %i) to $%i.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "locked", true))
	{
		if(sscanf(param, "i", value) || !(0 <= value <= 1))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [locked] [0/1]");
		}
		if(VehicleInfo[vehicleid][vFactionType] > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Faction vehicles can't be locked.");
		}

		VehicleInfo[vehicleid][vLocked] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET locked = %i WHERE id = %i", VehicleInfo[vehicleid][vLocked], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SetVehicleParams(vehicleid, VEHICLE_DOORS, value);
		SM(playerid, COLOR_AQUA, "** You have set the locked state of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "plate", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option can only be adjusted on player owned vehicles.");
		}
		if(isnull(param))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [plate] [text]");
		}

		strcpy(VehicleInfo[vehicleid][vPlate], param, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET plate = '%e' WHERE id = %i", VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ResyncVehicle(vehicleid);
		SM(playerid, COLOR_AQUA, "** You have set the license plate of %s's %s (ID %i) to %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, param);
		SCM(playerid, COLOR_WHITE, "Note: The vehicle will need to be respawned for changes to take effect.");
	}
    else if(!strcmp(option, "color", true))
	{
	    new color1, color2;

		if(sscanf(param, "ii", color1, color2))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [color] [color 1] [color 2]");
		}
		if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The colors must range from 0 to 255.");
		}

		VehicleInfo[vehicleid][vColor1] = color1;
		VehicleInfo[vehicleid][vColor2] = color2;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", VehicleInfo[vehicleid][vColor1], VehicleInfo[vehicleid][vColor2], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ChangeVehicleColor(vehicleid, color1, color2);
		SM(playerid, COLOR_AQUA, "** You have set the colors of %s (ID %i) to %i, %i.", GetVehicleName(vehicleid), vehicleid, color1, color2);
	}
	else if(!strcmp(option, "paintjob", true))
	{
	    new paintjobid;

		if(sscanf(param, "i", paintjobid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [paintjobid] [value (-1 = none)]");
		}
		if(!(-1 <= paintjobid <= 5))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The paintjob must range from -1 to 5.");
		}
		if(VehicleInfo[vehicleid][vFactionType] > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't change the paintjob on a faction vehicle.");
		}

		VehicleInfo[vehicleid][vPaintjob] = paintjobid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", VehicleInfo[vehicleid][vPaintjob], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ChangeVehiclePaintjob(vehicleid, paintjobid);
		SM(playerid, COLOR_AQUA, "** You have set the paintjob of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, paintjobid);
	}
	else if(!strcmp(option, "neon", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option can only be adjusted on player owned vehicles.");
		}
		if(isnull(param))
		{
		    SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [neon] [color]");
		    SCM(playerid, COLOR_GREY2, "List of colors: None, Red, Blue, Green, Yellow, Pink, White");
		    return 1;
		}

		if(!strcmp(param, "neon", true)) {
		    SetVehicleNeon(vehicleid, 0);
		} else if(!strcmp(param, "red", true)) {
			SetVehicleNeon(vehicleid, 18647);
		} else if(!strcmp(param, "blue", true)) {
			SetVehicleNeon(vehicleid, 18648);
		} else if(!strcmp(param, "green", true)) {
			SetVehicleNeon(vehicleid, 18649);
		} else if(!strcmp(param, "yellow", true)) {
			SetVehicleNeon(vehicleid, 18650);
		} else if(!strcmp(param, "pink", true)) {
			SetVehicleNeon(vehicleid, 18651);
		} else if(!strcmp(param, "white", true)) {
			SetVehicleNeon(vehicleid, 18652);
		} else {
		    return SCM(playerid, COLOR_SYNTAX, "Invalid color.");
		}

		SM(playerid, COLOR_AQUA, "** You have set the neon type of %s's %s (ID %i) to %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, param);
	}
	else if(!strcmp(option, "trunk", true))
	{
	    if(!VehicleInfo[vehicleid][vOwnerID])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option can only be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value) || !(0 <= value <= 3))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [trunk] [level (0-3)]");
		}

		VehicleInfo[vehicleid][vTrunk] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET trunk = %i WHERE id = %i", VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "** You have set the trunk of %s's %s (ID %i) to level %i/3.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid), vehicleid, value);
	}
	else if(!strcmp(option, "health", true))
	{
	    new Float:amount;

		if(sscanf(param, "f", amount))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [health] [amount]");
		}
		if(!(0.0 <= amount <= 10000.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The health value must range from 300.0 to 10000.0.");
		}

		VehicleInfo[vehicleid][vHealth] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET health = '%f' WHERE id = %i", VehicleInfo[vehicleid][vHealth], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SetVehicleHealth(vehicleid, amount);
		SM(playerid, COLOR_AQUA, "** You have set the health of %s (ID %i) to %.2f.", GetVehicleName(vehicleid), vehicleid, amount);
	}
	else if(!strcmp(option, "fuel", true))
	{
	    new amount;

		if(sscanf(param, "i", amount))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [fuel] [amount]");
		}
		if(!(0 <= amount <= 100))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The health value must range from 0.0 to 100.0.");
		}

        vehicleFuel[vehicleid] = amount;

		SM(playerid, COLOR_AQUA, "** You have set the fuel of %s (ID %i) to %i.", GetVehicleName(vehicleid), vehicleid, amount);
	}
	else if(!strcmp(option, "gang", true))
	{
	    new gangid;

        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option cannot be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", gangid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [gang] [gangid (-1 = none)]");
		}
		if(!(-1 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid gang.");
		}

		VehicleInfo[vehicleid][vGang] = gangid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET gangid = %i WHERE id = %i", VehicleInfo[vehicleid][vGang], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		    SM(playerid, COLOR_AQUA, "** You have reset the gang for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
			SM(playerid, COLOR_AQUA, "** You have set the gang of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, GangInfo[gangid][gName], gangid);
	}
 	else if(!strcmp(option, "faction", true))
	{
	    new type;

        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", type))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [faction] [type]");
	        SCM(playerid, COLOR_GREY2, "List of types: (0) None (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal (7) Mechanic (8) DOC (9) Sheriff");
	        return 1;
		}
		if(!(0 <= type <= 9))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		VehicleInfo[vehicleid][vFactionType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET factiontype = %i WHERE id = %i", VehicleInfo[vehicleid][vFactionType], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(type == FACTION_NONE)
		    SM(playerid, COLOR_AQUA, "** You've reset the faction type for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SM(playerid, COLOR_AQUA, "** You've set the faction type of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, factionTypes[type], type);
	}
	else if(!strcmp(option, "job", true))
	{
        if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option cannot be adjusted on player owned vehicles.");
		}
	    if(sscanf(param, "i", value))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [job] [type]");
			SCM(playerid, COLOR_GREY2, "List of jobs: (-1) None (0) Foodpanda (1) Trucker (2) Fisherman (3) Bodyguard (4) Arms Dealer");
			SCM(playerid, COLOR_GREY2, "List of jobs: (5) Miner (6) Taxi Driver (7) Drug Dealer (8) Lawyer (9) Detective (10) Garbageman (11) Forklifter (12) Lumber Jack (13) Demolition Job");
			return 1;
		}
		if(!(-1 <= value <= 13))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid job.");
		}

		VehicleInfo[vehicleid][vJob] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET job = %i WHERE id = %i", VehicleInfo[vehicleid][vJob], VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

		if(value == JOB_NONE)
		    SM(playerid, COLOR_AQUA, "** You've reset the job type for %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
		else
	    	SM(playerid, COLOR_AQUA, "** You've set the job type of %s (ID %i) to %s (%i).", GetVehicleName(vehicleid), vehicleid, GetJobName(value), value);
	}
    else if(!strcmp(option, "respawndelay", true))
	{
	    new id = VehicleInfo[vehicleid][vID];

	    if(VehicleInfo[vehicleid][vOwnerID] > 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This option cannot be adjusted on player owned vehicles.");
		}
		if(sscanf(param, "i", value))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /editvehicle [vehicleid] [respawndelay] [seconds (-1 = none)]");
		}

	    VehicleInfo[vehicleid][vRespawnDelay] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET respawndelay = %i WHERE id = %i", VehicleInfo[vehicleid][vRespawnDelay], id);
		mysql_tquery(connectionID, queryBuffer);

	 	SM(playerid, COLOR_AQUA, "** You have set the respawn delay of %s (ID %i) to %i seconds.", GetVehicleName(vehicleid), vehicleid, value);
	 	SCM(playerid, COLOR_WHITE, "Note: The vehicle's ID may have changed in the mean time.");
	 	DespawnVehicle(vehicleid, false);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);
	}

	return 1;
}

CMD:removevehicle(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removevehicle [vehicleid]");
	}
	if(!IsValidVehicle(vehicleid) || !VehicleInfo[vehicleid][vID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vehicle specified is invalid or a static vehicle.");
	}

	if(VehicleInfo[vehicleid][vOwnerID]) {
		SM(playerid, COLOR_WHITE, "** You have deleted %s's %s.", VehicleInfo[vehicleid][vOwner], GetVehicleName(vehicleid));
	} else {
		SM(playerid, COLOR_WHITE, "** You have deleted %s (ID %i).", GetVehicleName(vehicleid), vehicleid);
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	DespawnVehicle(vehicleid, false);
	return 1;
}

CMD:aclearwanted(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /aclearwanted [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pWantedLevel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player has no active charges to clear.");
	}

	pData[targetid][pWantedLevel] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_WHITE, "** Your crimes were cleared by %s.", GetRPName(playerid));
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has cleared %s's crimes and wanted level.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:removedm(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removedm [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pDMWarnings] && !pData[targetid][pWeaponRestricted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't been punished for DM recently.");
	}

	PlayerTextDrawHide(targetid, customHUD[targetid][1]);


	pData[targetid][pDMWarnings]--;
	pData[targetid][pWeaponRestricted] = 0;

	if(pData[targetid][pJailType] == 2)
	{
	    pData[targetid][pJailType] = 0;
		pData[targetid][pJailTime] = 0;

		SetPlayerPos(targetid, 1544.4407, -1675.5522, 13.5584);
		SetPlayerFacingAngle(targetid, 90.0000);
		SetPlayerInterior(targetid, 0);
		SetPlayerVirtualWorld(targetid, 0);
		SetCameraBehindPlayer(targetid);
		SetPlayerWeapons(targetid);
	}

	SM(targetid, COLOR_AQUA, "** Your DM punishment has been reversed by %s.", GetRPName(playerid));
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has reversed %s's DM punishment.", GetRPName(playerid), GetRPName(targetid));
	Log_Write("log_admin", "%s (uid: %i) reversed %s's (uid: %i) DM punishment.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET jailtype = 0, jailtime = 0, dmwarnings = %i, weaponrestricted = 0 WHERE uid = %i", pData[targetid][pDMWarnings], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:destroyveh(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid = GetPlayerVehicleID(playerid);

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(adminVehicle{vehicleid})
	{
	    DestroyVehicleEx(vehicleid);
	    adminVehicle{vehicleid} = false;
	    return SCM(playerid, COLOR_SYNTAX, "Admin vehicle destroyed.");
	}

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(adminVehicle{i})
	    {
	        DestroyVehicle(i);
	        adminVehicle{i} = false;
		}
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s destroyed all admin spawned vehicles.", GetRPName(playerid));
	return 1;
}

CMD:respawncars(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new option[10], param[12];

    if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[10]S()[12]", option, param))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /respawncars [job | faction | players ]");
	}
	if(!strcmp(option, "players", true))
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i})
		    {
		        if(VehicleInfo[i][vOwnerID] > 0 && !IsVehicleOccupied(i))
		        {
	        		DespawnVehicle(i);
				}
	 		}
		}

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s respawned all unoccupied players vehicles.", GetRPName(playerid));
	}
	else if(!strcmp(option, "job", true))
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i})
		    {
		        if((towtruck[0] <= i <= towtruck[2]) || (pizzaVehicles[0] <= i <= pizzaVehicles[3]) || IsAGarbageCar(i) || (forkliftVehicles[0] <= i <= forkliftVehicles[5]) || (courierVehicles[0] <= i <= courierVehicles[9]) ||  (VIPVehicles[0] <= i <= VIPVehicles[49]) || (sweeperVehicles[0] <= i <= sweeperVehicles[3]) || (lummberveh[0] <= i <= lummberveh[6]) || (taxiVehicles[0] <= i <= taxiVehicles[6]) || (VehicleInfo[i][vJob] != JOB_NONE))
		        {
	        		SetVehicleToRespawn(i);
				}
	 		}
		}

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s respawned all unoccupied job vehicles.", GetRPName(playerid));
	}
	else if(!strcmp(option, "faction", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /respawncars [faction] [type]");
	        SCM(playerid, COLOR_GREY2, "List of options: (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal (7) Mechanic  (8) DOC (9) Sheriff");
	        return 1;
		}
		if(!(1 <= type <= 9))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid faction type.");
		}

		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i} && VehicleInfo[i][vFactionType] == type)
	    	{
				SetVehicleToRespawn(i);
			}
		}

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s respawned all unoccupied {F7A763}%s"WHITE" vehicles.", GetRPName(playerid), factionTypes[type]);
	}
	else if(!strcmp(option, "nearby", true))
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !VehicleInfo[i][vOwnerID] && !adminVehicle{i} && IsVehicleStreamedIn(i, playerid))
		    {
				SetVehicleToRespawn(i);
			}
		}

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s respawned all unoccupied vehicles in %s.", GetRPName(playerid), GetPlayerZoneName(playerid));
	}
	else if(!strcmp(option, "all", true))
	{
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !VehicleInfo[i][vOwnerID] && !adminVehicle{i})
		    {
				SetVehicleToRespawn(i);
			}
		}
		
		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
	    	if(!IsVehicleOccupied(i) && !adminVehicle{i})
		    {
		        if(VehicleInfo[i][vOwnerID] > 0 && !IsVehicleOccupied(i))
		        {
	        		DespawnVehicle(i);
				}
	 		}
		}

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s respawned all unoccupied vehicles.", GetRPName(playerid));
	}
	return 1;
}

CMD:announce(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new text[128], string[128];
    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[128]", text))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /announce [text]");
	}
	foreach(new i : Player)
	{
		TextDrawSetString(ANN[2], text);
		format(string, sizeof(string), "%s", GetRPName(playerid));
		TextDrawSetString(ANN[1], string);		
  		TextDrawSetPreviewModel(ANN[0], GetPlayerSkin(playerid));
		for(new f = 0; f < 3; f ++)
		{
			TextDrawShowForPlayer(i, ANN[f]);
		}

		SetTimerEx("ANNHIDE", 6000, false, "i", i);
		PlayerPlaySound(i,1150,0.0,0.0,0.0);
	}
	return 1;
}

CMD:broadcast(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new style, text[128];

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[128]", style, text))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /broadcast [style (0-6)] [text]");
	}
	if(!(0 <= style <= 6))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid style.");
	}
	if(style == 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Style 2 only disappears after death and is therefore disabled.");
	}

	GameTextForAll(text, 6000, style);
	return 1;
}

CMD:fixvehall(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
    for(new v = 0; v < MAX_VEHICLES; v++) {
        RepairVehicle(v);
    }

	SCM(playerid, COLOR_SYNTAX, "Vehicle fixed.");
	return 1;
}

CMD:fixveh(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't fix a vehicle if you're not sitting in one.");
	}

	RepairVehicle(GetPlayerVehicleID(playerid));
	new szString[528];
	format(szString, sizeof(szString), "%s Vehicle fixed. ",GetRPName(playerid));
	SendDiscordMessage(24, szString);
	SAM(COLOR_RED, "%s Vehicle fixed.. ", GetRPName(playerid));

	SCM(playerid, COLOR_SYNTAX, "Vehicle fixed.");
	return 1;
}
CMD:cmc(playerid, params[]) return callcmd::cleanmyscreen(playerid, params);
CMD:cleanmyscreen(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
 
        return 1;
	}
	ClearChat(playerid);
	return 1;
}

CMD:clearchat(playerid)
{
    if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	foreach(new i : Player)
	{
	    ClearAllChat(i);
	}
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has cleared the chat box.", GetRPName(playerid));
	return 1;
}
CMD:fullall(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

    if(pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_LIGHTRED, "Error:"WHITE" You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_GREY, "USAGE:"WHITE" /fullall [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_LIGHTRED, "Error:"WHITE" The player specified is disconnected.");
	}

	pData[targetid][pHunger] = 100;
	pData[targetid][pHungerTimer] = 0;
	pData[targetid][pThirst] = 100;
	pData[targetid][pThirstTimer] = 0;	
	pData[targetid][pStress] = 100;
	pData[targetid][pStressTimer] = 0;

	SCM(targetid, COLOR_YELLOW, "Your hunger has been filled by an admin!");
	return 1;
}

CMD:healnear(playerid, params[]) { return callcmd::healrange(playerid, params); }
CMD:healrange(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new Float:radius;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "f", radius))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /healrange [radius]");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(!(1.0 <= radius <= 50.0))
	{
	    return SCM(playerid, COLOR_WHITE, "The radius can't be below 1.0 or above 50.0.");
	}

	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPlayer(i, playerid, radius))
		{
		    if(!pData[i][pAdminDuty])
		    {
			    SetPlayerHealth(i, 100.0);
			    pData[i][pBrokenLeg] = 0;
			    pData[i][pBleeding] = 0;

			    if(GetArmor(i) < 100.0)
			    {
				    SetScriptArmour(i, 100.0);
				}
			}

		    SCM(i, COLOR_WHITE, "** An admin has healed everyone nearby.");
		}
	}
	new szString[528];
	format(szString, sizeof(szString), "%s has healed everyone nearby ",GetRPName(playerid));
	SendDiscordMessage(24, szString);
	SAM(COLOR_RED, "%s has healed everyone nearby . ", GetRPName(playerid));

	return 1;
}

CMD:shots(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /shots [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM shots WHERE playerid = %i ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListShots", "ii", playerid, targetid);
	return 1;
}

CMD:adamages(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /damages [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT weaponid, playerid, timestamp FROM shots WHERE hitid = %i AND hittype = 1 ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListDamages", "ii", playerid, targetid);
	return 1;
}

CMD:kills(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /kills [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM kills WHERE killer_uid = %i OR target_uid = %i ORDER BY date DESC LIMIT 20", pData[targetid][pID], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnAdminListKills", "ii", playerid, targetid);
	return 1;
}

CMD:resetadtimer(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	gLastAd = 0;
	SCM(playerid, COLOR_SYNTAX, "Advertisement timer reset.");
	return 1;
}

CMD:setname(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, name[24];

    if(pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[24]", targetid, name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setname [playerid] [name]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
 	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(pData[targetid][pAdminDuty] && strcmp(pData[targetid][pAdminName], "None", true) != 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't change the name of a player on admin duty. They're using their admin name.");
	}
	if(!IsValidName(name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The name specified is not supported by the SA-MP client.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminChangeName", "iis", playerid, targetid, name);
	return 1;
}

/*CMD:blowup(playerid, params[]) return callcmd::explode(playerid, params);
CMD:explode(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, damage;

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, damage))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /explode [playerid] [damage(amount)]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

	CreateExplosionForPlayer(targetid, x, y, z, 6, 20.0);
    DamagePlayer(targetid, damage, playerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
	SM(playerid, COLOR_WHITE, "You exploded %s for their client only.", GetRPName(targetid));
	return 1;
}*/

CMD:countdown(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	SetTimerEx("CountdownAll", 1000, false, "ii", playerid, 3);
 	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has initiated a countdown for all players.", GetRPName(playerid));
 	return 1;
}

CMD:event(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new option[10], param[128];

    if(pData[playerid][pAdmin] < 4 && pData[playerid][pEventMod] < 1)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[10]S()[128]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /event [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Position, JoinText, Type, Health, Armor, Weapon, Skin, Rules");
		SCM(playerid, COLOR_WHITE, "Available options: Ready, Start, Lock, Countdown, Balance, End");
		return 1;
	}
	if(!strcmp(option, "position", true))
	{
	    if(EventInfo[eType] == 2)
	    {
	        if(isnull(param))
			{
				return SCM(playerid, COLOR_SYNTAX, "Usage: /event [position] [red/blue]");
			}
	        else if(!strcmp(param, "red", true))
	        {
	            GetPlayerPos(playerid, EventInfo[ePosX][RED_TEAM], EventInfo[ePosY][RED_TEAM], EventInfo[ePosZ][RED_TEAM]);
				GetPlayerFacingAngle(playerid, EventInfo[ePosA][RED_TEAM]);
				EventInfo[eInterior] = GetPlayerInterior(playerid);
				EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
				SCM(playerid, COLOR_AQUA, "You have set the spawn point for {FF0000}Red{CCFFFF} team.");
	        }
	        else if(!strcmp(param, "blue", true))
	        {
	            GetPlayerPos(playerid, EventInfo[ePosX][BLUE_TEAM], EventInfo[ePosY][BLUE_TEAM], EventInfo[ePosZ][BLUE_TEAM]);
				GetPlayerFacingAngle(playerid, EventInfo[ePosA][BLUE_TEAM]);
				EventInfo[eInterior] = GetPlayerInterior(playerid);
				EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
				SCM(playerid, COLOR_AQUA, "You have set the spawn point for {0000FF}Blue{CCFFFF} team.");
    		}
		}
		else
		{
			GetPlayerPos(playerid, EventInfo[ePosX][0], EventInfo[ePosY][0], EventInfo[ePosZ][0]);
			GetPlayerFacingAngle(playerid, EventInfo[ePosA][0]);
			EventInfo[eInterior] = GetPlayerInterior(playerid);
			EventInfo[eWorld] = GetPlayerVirtualWorld(playerid);
			SCM(playerid, COLOR_AQUA, "You have set the event spawn point.");
	    }
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [type] [1=DM 2=TDM 3=Race 4=Other]");
	    }
	    if(!(1 <= type <= 4))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	    }
	    /*if(EventInfo[eReady])
		{
		    return SCM(playerid, COLOR_WHITE, "The type can only be adjusted during event setup.");
		}*/

		EventInfo[eType] = type;

	    switch(type)
	    {
	        case 1:
	        {
	            SCM(playerid, COLOR_AQUA, "You have set the event type to "SVRCLR"Deathmatch{CCFFFF}.");
	        }
	        case 2:
	        {
	            SCM(playerid, COLOR_AQUA, "You have set the event type to "SVRCLR"Team Deathmatch{CCFFFF}.");
	            EventInfo[eNext] = RED_TEAM;

	            if(EventInfo[ePosX][RED_TEAM] == 0.0 && EventInfo[ePosY][RED_TEAM] == 0.0 && EventInfo[ePosZ][RED_TEAM] == 0.0)
	                SCM(playerid, COLOR_LIGHTRED, "** Red Team position not set. '/event position red' to set position.");

                if(EventInfo[ePosX][BLUE_TEAM] == 0.0 && EventInfo[ePosY][BLUE_TEAM] == 0.0 && EventInfo[ePosZ][BLUE_TEAM] == 0.0)
	                SCM(playerid, COLOR_LIGHTRED, "** Blue Team position not set. '/event position blue' to set position.");
	        }
            case 3:
	        {
	            SCM(playerid, COLOR_AQUA, "You have set the event type to "SVRCLR"Race{CCFFFF}. /veh to spawn the vehicles.");
	        }
	        case 4:
	        {
	            SCM(playerid, COLOR_AQUA, "You have set the event type to "SVRCLR"Other{CCFFFF}.");
	        }
		}
	}
	else if(!strcmp(option, "health", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [health] [amount]");
		}

	    EventInfo[eHealth] = amount;
	    SM(playerid, COLOR_AQUA, "You set the event health to %.1f.", amount);
	}
	else if(!strcmp(option, "armor", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [armor] [amount]");
		}

	    EventInfo[eArmor] = amount;
	    SM(playerid, COLOR_AQUA, "You set the event armor to %.1f.", amount);
	}
	else if(!strcmp(option, "jointext", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [jointext] [text]");
		}

		strcpy(EventInfo[eJoinText], param, 128);
		SM(playerid, COLOR_AQUA, "You set the join text to '%s'.", param);
	}
	else if(!strcmp(option, "weapon", true))
	{
	    new slot, weaponid;

	    if(sscanf(param, "ii", slot, weaponid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [weapon] [slot (1-5)] [weaponid]");
	    }
	    if(!(1 <= slot <= 5))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
	    }
	    if(!(2 <= weaponid <= 46))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid weapon.");
	    }

	    EventInfo[eWeapons][slot-1] = weaponid;
	    SM(playerid, COLOR_AQUA, "You set the weapon in slot %i to %s.", slot, GetWeaponNameEx(weaponid));
	}
	else if(!strcmp(option, "skin", true))
	{
	    new team[6], skinid;

	    if(EventInfo[eType] == 2)
	    {
	        if(sscanf(param, "s[6]i", team, skinid))
	        {
	            return SCM(playerid, COLOR_SYNTAX, "Usage: /event [skin] [red/blue] [skinid]");
			}
			if(!(0 <= skinid <= 311))
			{
			    return SCM(playerid, COLOR_SYNTAX, "Invalid skin ID.");
			}
			if(!strcmp(team, "red", true))
			{
	            EventInfo[eSkin][RED_TEAM] = skinid;
	            SM(playerid, COLOR_AQUA, "You set the skin for {FF0000}Red{CCFFFF} team to %i.", skinid);
	        }
	        else if(!strcmp(team, "blue", true))
			{
	            EventInfo[eSkin][BLUE_TEAM] = skinid;
	            SM(playerid, COLOR_AQUA, "You set the skin for {0000FF}Blue{CCFFFF} team to %i.", skinid);
	        }
		}
		else
		{
		    if(sscanf(param, "i", skinid))
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [skin] [skinid (0 = reset)]");
			}
			if(!(0 <= skinid <= 311))
			{
			    return SCM(playerid, COLOR_SYNTAX, "Invalid skin ID.");
			}

			EventInfo[eSkin][0] = skinid;
   			SM(playerid, COLOR_AQUA, "You set the event skin to %i.", skinid);
		}
	}
	else if(!strcmp(option, "rules", true))
	{
	    new rule[8], toggle;

	    if(sscanf(param, "s[8]i", rule, toggle) || !(0 <= toggle <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /event [rules] [cs/qs/healing] [0/1]");
		}
		if(EventInfo[eType] != 1 && EventInfo[eType] != 2)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can only set rules for DM & TDM events.");
		}

		if(!strcmp(rule, "cs", true))
		{
		    EventInfo[eCS] = toggle;

		    if(toggle)
		        SCM(playerid, COLOR_AQUA, "You have "SVRCLR"allowed{CCFFFF} crackshooting in the event.");
	        else
	            SCM(playerid, COLOR_AQUA, "You have "SVRCLR"disallowed{CCFFFF} crackshooting in the event.");
		}
		else if(!strcmp(rule, "qs", true))
		{
		    EventInfo[eQS] = toggle;

		    if(toggle)
		        SCM(playerid, COLOR_AQUA, "You have "SVRCLR"allowed{CCFFFF} quickswapping in the event.");
	        else
	            SCM(playerid, COLOR_AQUA, "You have "SVRCLR"disallowed{CCFFFF} quickswapping in the event.");
		}
		else if(!strcmp(rule, "healing", true))
		{
		    EventInfo[eHeal] = toggle;

		    if(toggle)
		        SCM(playerid, COLOR_AQUA, "You have "SVRCLR"allowed{CCFFFF} healing in the event.");
	        else
	            SCM(playerid, COLOR_AQUA, "You have "SVRCLR"disallowed{CCFFFF} healing in the event.");
		}
	}
	else if(!strcmp(option, "ready", true))
	{
		if(isnull(param) || strcmp(param, "confirm", true) != 0)
		{
		    SCM(playerid, COLOR_SYNTAX, "Usage: /event [ready] [confirm]");
		    SCM(playerid, COLOR_WHITE, "This command will announce to the whole server that an event is ready to join.");
			return 1;
	    }
	    if(EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The event is already marked as ready.");
	    }

		if(EventInfo[eType] == 2)
		{
		    if(EventInfo[ePosX][RED_TEAM] == 0.0 && EventInfo[ePosY][RED_TEAM] == 0.0 && EventInfo[ePosZ][RED_TEAM] == 0.0)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "There is no spawn point set for red team.");
		    }
		    if(EventInfo[ePosX][BLUE_TEAM] == 0.0 && EventInfo[ePosY][BLUE_TEAM] == 0.0 && EventInfo[ePosZ][BLUE_TEAM] == 0.0)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "There is no spawn point set for blue team.");
		    }
		    if(!EventInfo[eSkin][RED_TEAM])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "There is no skin set for red team.");
		    }
		    if(!EventInfo[eSkin][BLUE_TEAM])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "There is no skin set for blue team.");
		    }
		}
		else
		{
		    if(!EventInfo[eType])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "The event type has not been set.");
		    }
  			if(EventInfo[ePosX][0] == 0.0 && EventInfo[ePosY][0] == 0.0 && EventInfo[ePosZ][0] == 0.0)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "The spawn point has not been set.");
		    }
	    }

	    EventInfo[eReady] = 1;

	    switch(EventInfo[eType])
	    {
	    	case 1: SMA(COLOR_AQUA, "%s has started a Deathmatch event, use /joinevent to join!", GetRPName(playerid));
	    	case 2: SMA(COLOR_AQUA, "%s has started a Team-Deathmatch event, use /joinevent to join!", GetRPName(playerid));
	    	case 3: SMA(COLOR_AQUA, "%s has started a Race event, use /joinevent to join!", GetRPName(playerid));
	    	case 4: SMA(COLOR_AQUA, "%s has started an event, use /joinevent to join!", GetRPName(playerid));
	    }

	    SCM(playerid, COLOR_WHITE, "** Use '/event lock' to lock the event and '/event start' to start.");
	}
	else if(!strcmp(option, "lock", true))
	{
        if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is no event ready. Please set one up first.");
	    }

		if(!EventInfo[eLocked])
		{
		    EventInfo[eLocked] = 1;
		    SMA(COLOR_AQUA, "The event has been locked by %s.", GetRPName(playerid));
	    }
	    else
	    {
		    EventInfo[eLocked] = 0;
		    SMA(COLOR_AQUA, "The event was unlocked by %s.", GetRPName(playerid));
	    }
	}
	else if(!strcmp(option, "start", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is no event ready. Please set one up first.");
	    }
	    if(EventInfo[eStarted])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The event has already started.");
	    }

	    foreach(new i : Player)
		{
	        if(pData[i][pJoinedEvent])
	        {
				SCM(i, COLOR_AQUA, "The event has started. Good luck!");
    			for(new x = 0; x < 5; x ++)
    			{
        			if(EventInfo[eWeapons][x])
        			{
            			GiveWeapon(i, EventInfo[eWeapons][x], true); // Fixed
					}   // by
        		}
			}
			else
			{
			    SCM(i, COLOR_AQUA, "The event has started. Better luck next time!");
			}
		}

		EventInfo[eStarted] = 1;
	}
	else if(!strcmp(option, "countdown", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is no event ready. Please set one up first.");
	    }

	    SetTimerEx("Countdown", 1000, false, "ii", playerid, 3);
	    SCM(playerid, COLOR_AQUA, "You have initiated a countdown for all players in the event.");
	}
	else if(!strcmp(option, "balance", true))
	{
	    new teamid = RED_TEAM;

	    if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is no event ready. Please set one up first.");
	    }
	    if(EventInfo[eType] != 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The event currently active is not a TDM event.");
		}

		foreach(new i : Player)
		{
		    if(pData[i][pJoinedEvent])
		    {
				pData[i][pEventTeam] = teamid;

				SetPlayerSkin(i, EventInfo[eSkin][teamid]);
				SetPlayerPos(i, EventInfo[ePosX][teamid], EventInfo[ePosY][teamid], EventInfo[ePosZ][teamid]);
				SetPlayerFacingAngle(i, EventInfo[ePosA][teamid]);

				teamid = teamid == RED_TEAM ? BLUE_TEAM : RED_TEAM;

				if(pData[i][pEventTeam] == RED_TEAM) {
				    GameTextForPlayer(i, "~w~You are on~n~~r~Red Team", 3000, 4);
				} else if(pData[i][pEventTeam] == BLUE_TEAM) {
				    GameTextForPlayer(i, "~w~You are on~n~~b~Blue Team", 3000, 6);
				}

				SM(i, COLOR_AQUA, "%s has balanced the teams. You are now in %s{CCFFFF} team.", GetRPName(playerid), (pData[i][pEventTeam] == RED_TEAM) ? ("{FF0000}Red") : ("{0000FF}Blue"));
		    }
		}

		SCM(playerid, COLOR_AQUA, "You have balanced the event teams.");
	}
	else if(!strcmp(option, "end", true))
	{
	    if(!EventInfo[eReady])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is no event ready. Please set one up first.");
	    }

	    ResetEvent();
	    SMA(COLOR_AQUA, "The event was ended by %s.", GetRPName(playerid));
	}

	return 1;
}

CMD:oban(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new username[MAX_PLAYERS], reason[128];

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]s[128]", username, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /oban [username] [reason]");
	}
    if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /ban instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel, ip, uid FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminOfflineBan", "iss", playerid, username, reason);
	return 1;
}

CMD:joinevent(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pJailType])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are in jail and therefore cannot participate in an event.");
	}
	if(pData[playerid][pJoinedEvent])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You already joined the event. /quitevent to leave.");
	}
	if(!EventInfo[eReady])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There are no events you can join at the moment.");
	}
	if(EventInfo[eLocked])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The event is locked. Better luck next time!");
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pAcceptedHelp] || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't join the event at the moment.");
	}
	if(pData[playerid][pPaintball])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't join the event while you are playing paintball.");
	}
    if((pData[playerid][pWeaponRestricted] > 0) && (1 <= EventInfo[eType] <= 2))
    {
        return SCM(playerid, COLOR_SYNTAX, "You are restricted from weapons and therefore can't join this type of event.");
    }

	SetPlayerInEvent(playerid);
	return 1;
}

CMD:quitevent(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(!pData[playerid][pJoinedEvent])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in an event which you can quit.");
	}

 	foreach(new i : Player)
	{
	    if(pData[i][pJoinedEvent])
	    {
	        SM(i, COLOR_LIGHTORANGE, "(( %s has left the event. ))", GetPlayerNameEx(playerid));
		}
	}

	ResetPlayerWeapons(playerid);
	pData[playerid][pJoinedEvent] = 0;
	SetPlayerToSpawn(playerid);
	return 1;
}

CMD:permaban(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, reason[128];

 	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /permaban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
	}


    Log_Write("log_punishments", "%s (uid: %i) permabanned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);
	new szString[528];
	format(szString, sizeof(szString), "%s was permanently by %s, reason: %s",GetRPName(targetid), GetRPName(playerid),reason);
	SendDiscordMessage(23, szString); 
	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was permanently banned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	BanPlayer(targetid, GetPlayerNameEx(playerid), reason, true);
	return 1;
}

CMD:baninfo(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new string[MAX_PLAYER_NAME];

	if(pData[playerid][pAdmin] < 7 && !pData[playerid][pBanAppealer])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", string))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /baninfo [username/ip]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM bans WHERE username = '%e' OR ip = '%e'", string, string);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckBan", "is", playerid, string);
	return 1;
}

CMD:banhistory(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new name[MAX_PLAYER_NAME];

	if(pData[playerid][pAdmin] < 7 && !pData[playerid][pBanAppealer])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /banhistory [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT a.date, a.description FROM log_bans a, users b WHERE a.uid = b.uid AND b.username = '%e' ORDER BY a.date DESC", name);
	mysql_tquery(connectionID, queryBuffer, "OnAdminCheckBanHistory", "is", playerid, name);

	return 1;
}

CMD:startlottoex(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not authorized to use this command.");
	}

    if(LottoStarted)
		return SCM(playerid, COLOR_ERROR, "There is already one lottery drawing in process.");

	new minutes;
	if(sscanf(params, "dD(0)", gDrawNumber))
		return SCM(playerid, -1, "USAGE: /startlottoex [draw number (optional)]");

	if(minutes < 3 || minutes > 60)
		return SCM(playerid, COLOR_ERROR, "Draw minutes shouldn't be below 3 minutes and shouldn't be more than 60 minutes.");

	if(gDrawNumber < 1 || gDrawNumber > 99)
		return SCM(playerid, COLOR_ERROR, "Draw Number must be between 1 to 99.");

	KillTimer(gLottoTimer);
	StartLotto(minutes);

	foreach(new i : Player) SCMf(i, COLOR_YELLOW, "A drawing for the lottery has been announced! The numbers will be drawn in %d minutes.", minutes);
	SAM(COLOR_ERROR, "AdmWarning: Administrator %s has started the lottery in %d minutes.", GetPlayerNameEx(playerid), minutes);
    return 1;
}


CMD:startlotto(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not authorized to use this command.");
	}

    if(LottoStarted)
		return SCM(playerid, COLOR_ERROR, "There is already one lottery drawing in process.");

	KillTimer(gLottoTimer);
	PrepareLotto();

	foreach(new i : Player) SCM(i, COLOR_YELLOW, "A drawing for the lottery has been announced! The numbers will be drawn in 60 minutes.");
	SAM(COLOR_ERROR, "AdmWarning: Administrator %s has started the lottery.", GetPlayerNameEx(playerid));
    return 1;
}


CMD:unban(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new username[MAX_PLAYER_NAME];

	if(pData[playerid][pAdmin] < 2 && !pData[playerid][pBanAppealer])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unban [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, permanent FROM bans WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminUnbanUser", "is", playerid, username);
	return 1;
}

CMD:unbanip(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new string[25];

    if(pData[playerid][pAdmin] < 7 && !pData[playerid][pBanAppealer])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!IsAnIP(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unbanip [ip address]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM bans WHERE ip = '%s'", params);
	mysql_tquery(connectionID, queryBuffer);

	format(string, sizeof(string), "unbanip %s", params);
	SendRconCommand(string);
	SendRconCommand("reloadbans");
	new szString[528];
	format(szString, sizeof(szString), "%s has unbanned IP '%s",GetRPName(playerid), params);
	SendDiscordMessage(23, szString); 
	UnBlockIpAddress(params);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has unbanned IP '%s'.", GetRPName(playerid), params);
	return 1;
}

CMD:banip(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new ip[16], reason[128];

    if(pData[playerid][pAdmin] < 4 && !pData[playerid][pBanAppealer])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[16]S(N/A)[128]", ip, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /banip [ip address] [reason (optional)]");
	}
	if(!IsAnIP(ip))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid IP address.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id FROM bans WHERE ip = '%s'", ip);
	mysql_tquery(connectionID, queryBuffer, "OnAdminBanIP", "iss", playerid, ip, reason);
	return 1;
}

CMD:whitelist(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new username[MAX_PLAYER_NAME];

	if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /whitelist [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT locked FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminLockAccount", "is", playerid, username);
	return 1;
}

CMD:unwhitelist(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new username[MAX_PLAYER_NAME];

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unwhitelist [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e' AND locked = 1", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminUnlockAccount", "is", playerid, username);
	return 1;
}

CMD:sprison(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, minutes, reason[128];

	if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sprison [playerid] [minutes] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be prisoned.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet. You can wait until they login or use /oprison.");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of minutes cannot be below one. Use /release instead.");
	}

    pData[targetid][pJailType] = 2;
    pData[targetid][pJailTime] = minutes * 60;

    PlayerTextDrawShow(targetid, customHUD[targetid][1]);

    ResetPlayerWeaponsEx(targetid);
    ResetPlayer(targetid);
    SetPlayerInJail(targetid);
	new szString[528];
	format(szString, sizeof(szString), "News: %s %s has completed their arrest. %s has been sent to jail for %i weeks. ", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid), minutes);
	SendDiscordMessage(15, szString);
    Log_Write("log_punishments", "%s (uid: %i) silently prisoned %s (uid: %i) for %i minutes, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], minutes, reason);
    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was prisoned for %i minutes by an Admin, reason: %s", GetRPName(targetid), minutes, reason);
    SM(targetid, COLOR_AQUA, "** You have been admin prisoned for %i minutes by an admin.", minutes);
    return 1;
}

CMD:sethpall(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new Float:amount;

    if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sethpall [amount]");
	}
	if(amount < 1.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Health can't be under 1.0.");
	}

	foreach(new i : Player)
	{
	    SetPlayerHealth(i, amount);
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s set everyone's health to %.1f.", GetRPName(playerid), amount);
	return 1;
}

CMD:setarmorall(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new Float:amount;

    if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "f", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setarmorall [amount]");
	}
	if(amount < 0.0 || amount > 150.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Armor can't be under 0.0 or above 150.0.");
	}

	foreach(new i : Player)
	{
	    SetScriptArmour(i, amount);
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s set everyone's armor to %.1f.", GetRPName(playerid), amount);
	return 1;
}

CMD:vweapons(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pDonator] < 3)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not {D909D9}Platinum VIP.");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2556.2113, 1403.7037, 7699.7641))
	{
        return SendClientMessage(playerid, 0xAFAFAFAA, "You are not in the {D909D9}VIP{Afafaf} Lounge.");
	}
	GivePlayerWeaponEx(playerid, 12);
	GivePlayerWeaponEx(playerid, 24);
	GivePlayerWeaponEx(playerid, 25);
	GivePlayerWeaponEx(playerid, 27);
	GivePlayerWeaponEx(playerid, 31);
	GivePlayerWeaponEx(playerid, 34);
	SendClientMessage(playerid, COLOR_AQUA, "You have received a {00AA00}full weapon set{33CCFF} from your vip weapons.");
 	return 1;
}

CMD:givegun(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, weaponid;

    if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, weaponid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givegun [playerid] [weaponid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pWeaponRestricted] > 0 || pData[targetid][pLevel] < 2)
    {
        return SCM(playerid, COLOR_SYNTAX, "That player is either weapon restricted or level 1.");
    }
	if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not allowed to give a gun when you are weapon restricted or level 1.");
	}	
	if(!(1 <= weaponid <= 46))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid weapon.");
	}

	GiveWeapon(targetid, weaponid);

	SM(targetid, COLOR_AQUA, "You have received a "SVRCLR"%s{CCFFFF} from %s.", GetWeaponNameEx(weaponid), GetRPName(playerid));
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has given a %s to %s.", GetRPName(playerid), GetWeaponNameEx(weaponid), GetRPName(targetid));

	Log_Write("log_admin", "%s (uid: %i) gives a %s to %s (uid: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetWeaponNameEx(weaponid), GetPlayerNameEx(targetid), pData[targetid][pID]);
	return 1;
}
	
CMD:setweather(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new weather;
	if(pData[playerid][pAdmin] < 5)
	{
		SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use that command!");
		return 1;
	}
	if(sscanf(params, "d", weather)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setweather [weatherid]");
	if(weather < 0||weather > 2009) { SendClientMessage(playerid, COLOR_GREY, "   Weather ID can't be below 0 or above 45!"); return 1; }
	gWeather = weather;
	SetWeather(gWeather);
	//ServerInfo[sWeather] = weather;
	//SaveServerSettings();
	SendClientMessage(playerid, COLOR_GREY, "Weather set!");
	return 1;
}
CMD:settime(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new hour;

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", hour))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /settime [hour]");
	}
	if(!(0 <= hour <= 23))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The hour must range from 0 to 23.");
	}

	gWorldTime = hour;

	SetWorldTime(hour);
	SMA(COLOR_GREY2, "Time of day changed to %i hours.", hour);
	return 1;
}

CMD:setstat(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, option[24], param[32], value;

    if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[24]S()[32]", targetid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [option]");
	    SM(playerid, COLOR_WHITE, "Available options: Gender, Age, Cash, Bank, Level, Respect, Hours, Warnings");
	    SM(playerid, COLOR_WHITE, "Available options: SpawnHealth, SpawnArmor, FightStyle, Accent, Phone, Crimes, Arrested");
	    SM(playerid, COLOR_WHITE, "Available options: WantedLevel, Materials, Pot, Crack, Meth, Painkillers, Cigars, PortableRadio");
	    SM(playerid, COLOR_WHITE, "Available options: Channel, Spraycans, Boombox, Phonebook, Paycheck, CarLicense, Seeds, Ephedrine");
		SM(playerid, COLOR_WHITE, "Available options: InventoryUpgrade, AddictUpgrade, TraderUpgrade, AssetUpgrade, MP3Player, Job");
        SM(playerid, COLOR_WHITE, "Available options: MuriaticAcid, BakingSoda, HPAmmo, PoisonAmmo, FMJAmmo, DMWarnings, WeaponRestricted");
        SM(playerid, COLOR_WHITE, "Available options: Components, Watch, GPS, GasCan, FishingSkill, TruckerSkill, GuardSkill, WeaponSkill");
        SM(playerid, COLOR_WHITE, "Available options: LawyerSkill, SmugglerSkill, DetectiveSkill");
        SM(playerid, COLOR_WHITE, "Available options: Mask, Marriage, GunLicense, Hunger, Thirst, Skates");
        SM(playerid, COLOR_WHITE, "Available options: refund");
	    return 1;
	}
	if(!strcmp(option, "gender", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [gender] [male | female]");
		}
		if(!strcmp(param, "male", true))
		{
		    pData[targetid][pGender] = 1;
		    SM(playerid, COLOR_WHITE, "** You have set %s's gender to Male.", GetRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 1 WHERE uid = %i", pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "female", true))
		{
		    pData[targetid][pGender] = 2;
		    SM(playerid, COLOR_WHITE, "** You have set %s's gender to Female.", GetRPName(targetid));

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gender = 2 WHERE uid = %i", pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(!strcmp(option, "skates", true))
	{
	    if(sscanf(param, "i", value) || !(0<=value<=1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [skates] [1/0]");
		}
		else
		{
			pData[targetid][pSkates] = value;
	    	SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's skates to %i.", GetRPName(targetid), value);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rollerskates = %i WHERE uid = %i", value, pData[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(!strcmp(option, "refund", true))
	{
	    if(sscanf(param, "i", value) || !(0<=value<=1))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [refund] [1/0]");
		}
		else
		{
			pData[targetid][pRefunded] = 0;
	    	SendClientMessageEx(playerid, COLOR_WHITE, "You have set %s's refund to %i.", GetRPName(targetid), value);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET refunded = 0 WHERE uid = %i", pData[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(!strcmp(option, "thirst", true))
	{
	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Usage: /setstat [playerid] [thirst] [value]");
		}
		if(value <= 0)
		{
			value = 2;
			pData[playerid][pThirstTimer] = 0;
		}
		else if(value > 100)
		{
				value = 100;
		}
		pData[targetid][pThirst] = value;

	    SendMessage(playerid, COLOR_WHITE, "** You have set %s's thirst to %i.", GetRPName(targetid), value);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET thirst = %i, thirsttimer = %i WHERE uid = %i", pData[playerid][pThirst], pData[playerid][pThirstTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

	}
	else if(!strcmp(option, "stress", true))
	{
	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Usage: /setstat [playerid] [stress] [value]");
		}
		if(value <= 0)
		{
			value = 2;
			pData[playerid][pStressTimer] = 0;
		}
		else if(value > 100)
		{
				value = 100;
		}
		pData[targetid][pStress] = value;

	    SendMessage(playerid, COLOR_WHITE, "** You have set %s's stress to %i.", GetRPName(targetid), value);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET stress = %i, stresstimer = %i WHERE uid = %i", pData[playerid][pStress], pData[playerid][pStressTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

	}
	else if(!strcmp(option, "hunger", true))
	{
	    if(sscanf(param, "i", value))
	    {
	        return SendClientMessage(playerid, COLOR_WHITE, "Usage: /setstat [playerid] [hunger] [value]");
		}
		if(value <= 0)
		{
			value = 2;
			pData[playerid][pHungerTimer] = 0;
		}
		else if(value > 100)
		{
				value = 100;
		}
		pData[targetid][pHunger] = value;

	    SendMessage(playerid, COLOR_WHITE, "** You have set %s's hunger to %i.", GetRPName(targetid), value);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hunger = %i, hungertimer = %i WHERE uid = %i", pData[playerid][pHunger], pData[playerid][pHungerTimer], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

	}
	else if(!strcmp(option, "marriage", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [marriedto] [playerid(-1 to reset)]");
		}

		if(IsPlayerConnected(value))
		{
			pData[targetid][pMarriedTo] = pData[value][pID];
			strcpy(pData[targetid][pMarriedName], GetPlayerNameEx(value), MAX_PLAYER_NAME);
	    	SM(playerid, COLOR_WHITE, "You have set %s's marriage to %s.", GetRPName(targetid), GetRPName(value));

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = %i WHERE uid = %i", pData[value][pID], pData[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
		else if(value == -1)
		{
			pData[targetid][pMarriedTo] = -1;
			strcpy(pData[targetid][pMarriedName], "Nobody", MAX_PLAYER_NAME);
	    	SM(playerid, COLOR_WHITE, "You have reset %s's marriage.", GetRPName(targetid));

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET marriedto = -1 WHERE uid = %i",  pData[targetid][pID]);
	    	mysql_tquery(connectionID, queryBuffer);
		}
	}
	else if(!strcmp(option, "age", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [age] [value]");
		}
		if(!(0 <= value <= 128))
		{
		    return SCM(playerid, COLOR_WHITE, "The value specified can't be under 0 or above 128.");
		}

		pData[targetid][pAge] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's age to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET age = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cash", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [cash] [value]");
		}

		pData[targetid][pCash] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's cash to $%i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cash = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bank", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [bank] [value]");
		}

		pData[targetid][pBank] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's bank money to $%i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bank = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "level", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [level] [value]");
		}

		pData[targetid][pLevel] = value;
	    //SCM(playerid, COLOR_WHITE, "I can see you Imao");

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "respect", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [respect] [value]");
		}

		pData[targetid][pEXP] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's respect points to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET exp = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "hours", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [hours] [value]");
		}

		pData[targetid][pHours] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's playing hours to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hours = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "warnings", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [warnings] [value]");
		}
		if(!(0 <= value <= 3))
		{
		    return SCM(playerid, COLOR_WHITE, "The value specified can't be under 0 or above 3.");
		}

		pData[targetid][pWarnings] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's warnings to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET warnings = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spawnhealth", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [spawnhealth] [value]");
		}

		pData[targetid][pSpawnHealth] = amount;
	    SM(playerid, COLOR_WHITE, "** You have set %s's spawn health to %.1f.", GetRPName(targetid), amount);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spawnhealth = '%f' WHERE uid = %i", amount, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spawnarmor", true))
	{
	    new Float:amount;

	    if(sscanf(param, "f", amount))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [spawnarmor] [value]");
		}

		pData[targetid][pSpawnArmor] = amount;
	    SM(playerid, COLOR_WHITE, "** You have set %s's spawn armor to %.1f.", GetRPName(targetid), amount);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spawnarmor = '%f' WHERE uid = %i", amount, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "fightstyle", true))
	{
	    if(isnull(param))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [fightstyle] [option]");
	        SCM(playerid, COLOR_WHITE, "Available options: Normal, Boxing, Kungfu, Kneehead, Grabkick, Elbow");
	        return 1;
		}
		if(!strcmp(param, "normal", true))
		{
		    pData[targetid][pFightStyle] = FIGHT_STYLE_NORMAL;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Normal.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, pData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[targetid][pFightStyle], pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "boxing", true))
		{
		    pData[targetid][pFightStyle] = FIGHT_STYLE_BOXING;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Boxing.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, pData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[targetid][pFightStyle], pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "kungfu", true))
		{
		    pData[targetid][pFightStyle] = FIGHT_STYLE_KUNGFU;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Kung Fu.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, pData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[targetid][pFightStyle], pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "kneehead", true))
		{
		    pData[targetid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Kneehead.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, pData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[targetid][pFightStyle], pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "grabkick", true))
		{
		    pData[targetid][pFightStyle] = FIGHT_STYLE_GRABKICK;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Grabkick.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, pData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[targetid][pFightStyle], pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
		else if(!strcmp(param, "elbow", true))
		{
		    pData[targetid][pFightStyle] = FIGHT_STYLE_ELBOW;

		    SM(playerid, COLOR_WHITE, "** You have set %s's fight style to Elbow.", GetRPName(targetid));
		    SetPlayerFightingStyle(targetid, pData[targetid][pFightStyle]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fightstyle = %i WHERE uid = %i", pData[targetid][pFightStyle], pData[targetid][pID]);
		    mysql_tquery(connectionID, queryBuffer);
		}
	}
    else if(!strcmp(option, "accent", true))
	{
	    new accent[16];

	    if(sscanf(param, "s[16]", accent))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [accent] [text]");
		}

		strcpy(pData[targetid][pAccent], accent, 16);
		SM(playerid, COLOR_WHITE, "** You have set %s's accent to '%s'.", GetRPName(targetid), accent);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET accent = '%e' WHERE uid = %i", accent, pData[targetid][pID]);
  		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "diamonds1", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setstat [playerid] [diamonds] [value]");
		}

		pData[targetid][pDiamonds] = value;
	    SM(playerid, COLOR_WHITE, "You have set %s's diamonds to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	else if(!strcmp(option, "phone", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [phone] [number]");
		}
		if(value == 911 || value == 6397 || value == 6324 || value == 8294 || value == 69)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid number.");
		}

		pData[targetid][pPhone] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's phone number to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phone = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "crimes", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [crimes] [value]");
		}

		pData[targetid][pCrimes] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's commited crimes to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crimes = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "arrested", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [arrested] [value]");
		}

		pData[targetid][pArrested] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's arrested count to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET arrested = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "wantedlevel", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [wantedlevel] [value]");
		}
		if(!(0 <= value <= 6))
		{
		    return SCM(playerid, COLOR_WHITE, "The value specified can't be under 0 or above 6.");
		}

		pData[targetid][pWantedLevel] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's wanted level to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [materials] [value]");
		}

		pData[targetid][pMaterials] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's materials to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "pot", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [pot] [value]");
		}

		pData[targetid][pPot] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's pot to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "crack", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [Crack] [value]");
		}

		pData[targetid][pCrack] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's Crack to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [meth] [value]");
		}

		pData[targetid][pMeth] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's meth to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [painkillers] [value]");
		}

		pData[targetid][pPainkillers] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's painkillers to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
 	else if(!strcmp(option, "cigars", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [cigars] [value]");
		}

		pData[targetid][pCigars] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's cigars to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "portableradio", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [portableradio] [0/1]");
		}

		pData[targetid][pWalkieTalkie] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's Portable Radio to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET walkietalkie = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "channel", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [channel] [value]");
		}

		pData[targetid][pChannel] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's radio channel to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET channel = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [spraycans] [value]");
		}

		pData[targetid][pSpraycans] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's spraycans to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "boombox", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [boombox] [0/1]");
		}

		if((value == 0) && pData[targetid][pBoomboxPlaced])
		{
		    DestroyBoombox(targetid);
		}

		pData[targetid][pBoombox] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's boombox to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET boombox = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "phonebook", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [phonebook] [0/1]");
		}

		pData[targetid][pPhonebook] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's phonebook to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET phonebook = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "paycheck", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [paycheck] [value]");
		}

		pData[targetid][pPaycheck] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's paycheck to $%i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET paycheck = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "carlicense", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [carlicense] [0/1]");
		}

		pData[targetid][pCarLicense] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's car license to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gunlicense", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [gunlicense] [0/1]");
		}

		pData[targetid][pWeaponLicense] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's gun license to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [seeds] [value]");
		}

		pData[targetid][pSeeds] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's seeds to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [ephedrine] [value]");
		}

		pData[targetid][pEphedrine] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's ephedrine to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "job", true))
	{
	    if(sscanf(param, "i", value))
	    {
			SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [job] [value (-1 = none)]");
			SCM(playerid, COLOR_GREY2, "List of jobs: (0) Foodpanda (1) Fisherman (2) Bodyguard (3) Arms Dealer (4) Miner");
			SCM(playerid, COLOR_GREY2, "List of jobs: (5) Taxi Driver (6) Drug Dealer (7) Lawyer (8) Detective (10) Garbageman (11) Forklifter (12) Lumber Jack (13) Consturction Job");
			return 1;
		}
		if(!(-1 <= value <= 13))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid job.");
		}

		pData[targetid][pJob] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's job to %s.", GetRPName(targetid), GetJobName(value));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "mask", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [mask] [0/1]");
		}
		if(!(-1 <= value <= 1))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid value.");
		}

		pData[targetid][pMask] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's mask to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mask = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "mp3player", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [mp3player] [0/1]");
		}

		pData[targetid][pMP3Player] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's MP3 player to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mp3player = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "muriaticacid", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [muriaticacid] [value]");
		}

		pData[targetid][pMuriaticAcid] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's muriatic acid to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET muriaticacid = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "bakingsoda", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [bakingsoda] [value]");
		}

		pData[targetid][pBakingSoda] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's baking soda to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bakingsoda = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "hpammo", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [hpammo] [value]");
		}

		SetWeaponAmmo(targetid, AMMO_HP, value);
	    SM(playerid, COLOR_WHITE, "** You have set %s's hollow point ammunition to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET hpammo = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "poisonammo", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [poisonammo] [value]");
		}

		SetWeaponAmmo(targetid, AMMO_POISON, value);
	    SM(playerid, COLOR_WHITE, "** You have set %s's poison tip ammunition to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET poisonammo = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "fmjammo", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [fmjammo] [value]");
		}

		SetWeaponAmmo(targetid, AMMO_FMJ, value);
	    SM(playerid, COLOR_WHITE, "** You have set %s's full metal jacket ammunition to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fmjammo = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "dmwarnings", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [dmwarnings] [value]");
		}
		if(!(0 <= value <= 4))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The value must range from 0 to 4.");
		}

		pData[targetid][pDMWarnings] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's DM warnings to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dmwarnings = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weaponrestricted", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [weaponrestricted] [hours]");
		}

		pData[targetid][pWeaponRestricted] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's weapon restriction to %i hours.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponrestricted = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cooldown", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [weaponrestricted] [hours]");
		}

		pData[targetid][pFgRestricted] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's weapon restriction to %i hours.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cooldown = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "watch", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [watch] [0/1]");
		}

		pData[targetid][pWatch] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's watch to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET watch = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gps", true))
	{
	    if(sscanf(param, "i", value) || !(0 <= value <= 1))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [gps] [0/1]");
		}

		pData[targetid][pGPS] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's GPS to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gps = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "gascan", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [gascan] [value]");
		}

		pData[targetid][pGasCan] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's gas can to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "truckerskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [truckerskill] [value]");
		}

		pData[targetid][pCourierSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's trucker skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET courierskill = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "fishingskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [fishingskill] [value]");
		}

		pData[targetid][pFishingSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's fishing skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingskill = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "guardskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [guardskill] [value]");
		}

		pData[targetid][pGuardSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's bodyguard skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET guardskill = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "weaponskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [weaponskill] [value]");
		}

		pData[targetid][pWeaponSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's weapon skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET weaponskill = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "lawyerskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [lawyerskill] [value]");
		}

		pData[targetid][pLawyerSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's lawyer skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET lawyerskill = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "detectiveskill", true))
	{
	    if(sscanf(param, "i", value))
	    {
			return SCM(playerid, COLOR_SYNTAX, "Usage: /setstat [playerid] [detectiveskill] [value]");
		}

		pData[targetid][pDetectiveSkill] = value;
	    SM(playerid, COLOR_WHITE, "** You have set %s's detective skill to %i.", GetRPName(targetid), value);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET detectiveskill = %i WHERE uid = %i", value, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
	    return 1;
	}

	Log_Write("log_admin", "%s (uid: %i) set %s's (uid: %i) %s to %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], option, param);
	return 1;
}

// DIAMONDS SYSTEM
GivePlayerDiamonds(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pDiamonds] = pData[playerid][pDiamonds] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET diamonds = diamonds + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}

CMD:givediamond(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, amount;

    if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]{ffffff} /givediamond [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} That player hasn't logged in yet.");
	}
    GivePlayerDiamonds(targetid, amount);
	SAM(COLOR_WHITE, "AdmCmd: %s has given %i Diamond/s to %s.", GetRPName(playerid), amount, GetRPName(targetid));
	return 1;
}
CMD:givediamondall(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new amount;

    if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givediamondall [amount]");
    }
	if(amount < 1 || amount > 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount specified must range between 1 and 5.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pLogged])
		{
			GivePlayerDiamonds(i, amount);
		}
	}

	SMA(COLOR_WHITE, "AdmCmd: %s has given %i "TEAL"Diamonds"WHITE" to every player online.", GetRPName(playerid), amount);
	SMA(COLOR_WHITE, "[!] Diamonds?! '/exchange' to buy some unique in-game stuffs.");
	return 1;
}
CMD:exchange(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pPaintball])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command from within the vehicle.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2415.4158,-1504.3625,24.0250))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not near in the counter.");
	}
	new string[1536] = "Perk\tDescription\tCost", title[64];

	strcat(string, "\nVIP Voucher Diamod\tDiamod VIP for 10days.\t"TEAL"550 diamonds{FFFFFF}");
	strcat(string, "\nVIP Voucher Silver\tSilver VIP for 10days.\t"TEAL"450 diamonds{FFFFFF}");
	strcat(string, "\nVIP Voucher Bronze\tBronze VIP for 10days.\t"TEAL"350 diamonds{FFFFFF}");
	strcat(string, "\nCar Voucher Bronze\t1 Car Dealership Voucher.\t"TEAL"250 diamonds{FFFFFF}");
	strcat(string, "\nWeapon AK-47\t1 Ak-47.\t"TEAL"85 diamonds{FFFFFF}");
	strcat(string, "\nWeapon M4-A1\t1 M4-A1.\t"TEAL"100 diamonds{FFFFFF}");
	strcat(string, "\nWeapon Baseball Bat\t1 Baseball bat.\t"TEAL"25 diamonds{FFFFFF}");
	strcat(string, "\nWeapon Pistol\t1 Normal pistol.\t"TEAL"15 diamonds{FFFFFF}");
	strcat(string, "\nWeapon Silenced Pistol \t1 Silenced pistol.\t"TEAL"15 diamonds{FFFFFF}");

	format(title, sizeof(title), "Diamonds Items (You have %i diamonds.)", pData[playerid][pDiamonds]);
	ShowPlayerDialog(playerid, DIALOG_PAWNSHOP, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Redeem", "Cancel");

	return 1;
}
CMD:givemoney(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, amount;
	if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givemoney [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}

	GivePlayerCash(targetid, amount);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has given $%i to %s.", GetRPName(playerid), amount, GetRPName(targetid));
	Log_Write("log_admin", "%s (uid: %i) has used /givemoney to give $%i to %s (uid: %i).", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	return 1;
}
GivePlayerDirtyCash(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pDirtyCash] = pData[playerid][pDirtyCash] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = dirtycash + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}
GivePlayerMaterials(playerid, amount)
{
	if(pData[playerid][pLogged])
	{
		pData[playerid][pMaterials] = pData[playerid][pMaterials] + amount;

		if(!pData[playerid][pAdminDuty])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = materials + %i WHERE uid = %i", amount, pData[playerid][pID]);
			mysql_tquery(connectionID, queryBuffer);
		}
	}
}
CMD:givedirtycash(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, amount;

	if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givedirtycash [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}

	GivePlayerDirtyCash(targetid, amount);
	SAM(COLOR_LIGHTRED, "AdmCmd: %s has given $%i to %s.", GetRPName(playerid), amount, GetRPName(targetid));
	Log_Write("log_admin", "%s (uid: %i) has used /givedirtycash to give $%i to %s (uid: %i).", GetPlayerNameEx(playerid), pData[playerid][pID], amount, GetPlayerNameEx(targetid), pData[targetid][pID]);
	return 1;
}

CMD:givemoneyall(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new amount;

	if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givemoneyall [amount]");
    }
	if(amount < 1 || amount > 100000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount specified must range between $1 and $100000.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pLogged])
		{
		    GivePlayerCash(i, amount);
		}
	}

	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" has given $%i to every player online.", GetRPName(playerid), amount);
	return 1;
}

CMD:givevoucher(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, type;

    if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, type))
	{
	    SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]{ffffff} /givevoucher  [playerid] [type]");
		SCM(playerid, COLOR_GREY2, "List of ranks: (1)Gun Voucher (2)Car Voucher (3)VIP Diamond (4)VIP Silver (5)VIP Bronze ");
		
		return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} That player hasn't logged in yet.");
	}
	if(type == 1)
	{
		pData[targetid][pVoucher1] += 1;
		SM(targetid, COLOR_AQUA, "** %s has given you a Car Vocuher.", GetRPName(playerid));
		SM(targetid, COLOR_YELLOW, "** You can use /myvoucher to see the available voucher.");
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET voucher1 = %i WHERE uid = %i", pData[playerid][pVoucher1], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	if(type == 2)
	{
		pData[targetid][pVoucher2] += 1;
		SM(targetid, COLOR_AQUA, "** %s has given you a Gun Vocuher.", GetRPName(playerid));
		SM(targetid, COLOR_YELLOW, "** You can use /myvoucher to see the available voucher.");
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET voucher2 = %i WHERE uid = %i", pData[playerid][pVoucher2], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	if(type == 3)
	{
		pData[targetid][pVoucher3] += 1;
		SM(targetid, COLOR_AQUA, "** %s has given you a Diamond Vip Vocuher.", GetRPName(playerid));
		SM(targetid, COLOR_YELLOW, "** You can use /myvoucher to see the available voucher.");
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET voucher3 = %i WHERE uid = %i", pData[playerid][pVoucher3], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	if(type == 4)
	{
		pData[targetid][pVoucher4] += 1;
		SM(targetid, COLOR_AQUA, "** %s has given you a Silver Vip Vocuher.", GetRPName(playerid));
		SM(targetid, COLOR_YELLOW, "** You can use /myvoucher to see the available voucher.");
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET voucher4 = %i WHERE uid = %i", pData[playerid][pVoucher4], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	if(type == 5)
	{
		pData[targetid][pVoucher5] += 1;
		SM(targetid, COLOR_AQUA, "** %s has given you a Bronze Vip Vocuher.", GetRPName(playerid));
		SM(targetid, COLOR_YELLOW, "** You can use /myvoucher to see the available voucher.");
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET voucher5 = %i WHERE uid = %i", pData[playerid][pVoucher5], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}

CMD:setvip(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, rank, days;

	if(pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" You are not authorized to use this command.");
	}
	if(sscanf(params, "uii", targetid, rank, days))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /setvip [playerid] [rank] [days]");
	    SCM(playerid, COLOR_GREY2, "List of ranks: (1)Bronze (2)Silver (3)Diamond");
	    return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(1 <= rank <= 3))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
	}
	if(!(1 <= days <= 365))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of days must range from 1 to 365.");
	}

	pData[targetid][pDonator] = rank;
	pData[targetid][pVIPTime] = gettime() + (days * 86400);
	pData[targetid][pVIPCooldown] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = %i, viptime = %i, vipcooldown = 0 WHERE uid = %i", pData[targetid][pDonator], pData[targetid][pVIPTime], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(days >= 30)
	{
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has given a {C2A2DA}%s{FF6347} Donator package to %s for %i months.", GetRPName(playerid), GetDonatorRank(rank), GetRPName(targetid), days / 30);
		SM(targetid, COLOR_AQUA, "** %s has given you a {C2A2DA}%s{CCFFFF} Donator package for %i months.", GetRPName(playerid), GetDonatorRank(rank), days / 30);
	}
	else
	{
		SAM(COLOR_LIGHTRED, "AdmCmd: %s has given a {C2A2DA}%s{FF6347} Donator package to %s for %i days.", GetRPName(playerid), GetDonatorRank(rank), GetRPName(targetid), days);
		SM(targetid, COLOR_AQUA, "** %s has given you a {C2A2DA}%s{CCFFFF} Donator package for %i days.", GetRPName(playerid), GetDonatorRank(rank), days);
	}

	Log_Write("log_vip", "%s (uid: %i) has given %s (uid: %i) a %s Donator package for %i days.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], GetDonatorRank(rank), days);
	return 1;
}

CMD:removedonator(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removedonator [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!pData[targetid][pDonator])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player doesn't have a donator subscription which you can remove.");
	}

	Log_Write("log_vip", "%s (uid: %i) has removed %s's (uid: %i) %s donator package.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], GetDonatorRank(pData[targetid][pDonator]));

	pData[targetid][pDonator] = 0;
	pData[targetid][pVIPTime] = 0;
	pData[targetid][pVIPColor] = 0;
    pData[targetid][pSecondJob] = JOB_NONE;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = 0, viptime = 0 WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has revoked %s's donator subscription.", GetRPName(playerid), GetRPName(targetid));
	SM(targetid, COLOR_AQUA, "** %s has revoked your donator subscription.", GetRPName(playerid));
	return 1;
}

CMD:rangeban(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, reason[128];

 	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rangeban [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be banned.");
	}
	if(pData[targetid][pAdmin] == 7)
	{
 		SAM(COLOR_YELLOW, "Warning: %s has been autokicked for trying to ban a Community Owner(%s).", GetRPName(playerid), GetRPName(targetid));
 		KickPlayer(playerid);
 		return 1;
	}

    Log_Write("log_punishments", "%s (uid: %i) rangebanned %s (uid: %i), reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);
	SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was rangebanned by %s, reason: %s", GetRPName(targetid), GetRPName(playerid), reason);
	Rangeban(targetid, GetPlayerNameEx(playerid), reason);
	return 1;
}

CMD:forcepayday(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
    if(sscanf(params, "s", "confirm"))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /forcepayday [confirm] (gives everyone a paycheck)");
	}
	foreach(new i : Player)
	{
	    SendPaycheck(i);
	}

	return 1;
}


CMD:actoranimhelp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}	
	new string[829];
	if(pData[playerid][pAdmin] < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}	
	
	format(string, sizeof(string), ""WHITE"1. Lean\n\
	"WHITE"2. Dance\n\
	"WHITE"3. Deal Stance\n\
	"WHITE"4. Wave\n\
	"WHITE"5. Cross Arms\n\
	"WHITE"6. Laugh\n\
	"WHITE"7. Talk\n\
	"WHITE"8. Fuck U\n\
	"WHITE"9. Tired\n\
	"WHITE"10. Plant Bomb\n\
	"WHITE"11. Rob\n\
	"WHITE"12. Rob Man\n\
	"WHITE"13. Vomit\n\
	"WHITE"14. Check Time\n\
	"WHITE"15. CPR\n\
	"WHITE"16. Cry\n\
	"WHITE"17. Boxing\n\
	"WHITE"18. Wash Up\n\
	"WHITE"19. Salute\n\
	"WHITE"20. Jerk Off\n\
	"WHITE"21. Cheer 1\n\
	"WHITE"22. Cheer 2\n\
	"WHITE"23. Cheer 3\n\
	"WHITE"24. Cheer 4\n\
	"WHITE"25. Cheer 5\n\
	"WHITE"26. Cross Arms 1\n\
	"WHITE"27. Cross Arms 2\n\
	"WHITE"28. Cross Arms 3");
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, ""SVRCLR"Actor Animation Help", string, "Okay", "Cancel");
    return 1;
}

CMD:createactor(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new name[40], Float:x, Float:y, Float:z, Float:a;

	if(pData[playerid][pAdmin] < 5 )
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[40]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /createactor [name]");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	for(new i = 0; i < MAX_DYNAMIC_ACTORS; i ++)
	{
	    if(!ActorInfo[i][ActorExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO actors (name, pos_x, pos_y, pos_z, pos_a) VALUES('%e', '%f', '%f', '%f', '%f')", name, x, y, z, a);
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateActor", "iisffff", playerid, i, name, x, y, z, a);
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "Actor slots are currently full. Ask managements to increase the internal limit.");
	return 1;
}

CMD:removeactor(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new actorid;

	if(pData[playerid][pAdmin] < 5 )
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", actorid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removeactor [actorid]");
	}
	if(!(0 <= actorid < MAX_DYNAMIC_ACTORS) || !ActorInfo[actorid][ActorExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid entrance.");
	}

	DestroyDynamic3DTextLabel(ActorInfo[actorid][ActorText]);
	DestroyActor(ActorInfo[actorid][DynamicActor]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM actors WHERE id = %i", ActorInfo[actorid][ActorID]);
	mysql_tquery(connectionID, queryBuffer);

	ActorInfo[actorid][ActorExists] = 0;
	ActorInfo[actorid][ActorID] = 0;

	SM(playerid, COLOR_AQUA, "** You have removed Actor %i.", actorid);
	return 1;
}

CMD:editactor(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new actorid, option[14], param[64];

	if(pData[playerid][pAdmin] < 5 )
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[64]", actorid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editactor [actorid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Position, World, Name, Skin, Anim");
	    return 1;
	}
	if(!(0 <= actorid < MAX_DYNAMIC_ACTORS) || !ActorInfo[actorid][ActorExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid Actors.");
	}

	if(!strcmp(option, "position", true))
	{
	    GetPlayerPos(playerid, ActorInfo[actorid][ActorPosX], ActorInfo[actorid][ActorPosY], ActorInfo[actorid][ActorPosZ]);
	    GetPlayerFacingAngle(playerid, ActorInfo[actorid][ActorPosA]);

	    ActorInfo[actorid][ActorWorld] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE actors SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', world = %i WHERE id = %i", ActorInfo[actorid][ActorPosX], ActorInfo[actorid][ActorPosY], ActorInfo[actorid][ActorPosZ], ActorInfo[actorid][ActorPosA], ActorInfo[actorid][ActorWorld], ActorInfo[actorid][ActorID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadActor(actorid);
	    SM(playerid, COLOR_AQUA, "** You've changed the actor position %i.", actorid);
	}
	else if(!strcmp(option, "name", true))
	{
	    new name[32];

	    if(sscanf(param, "s[32]", name))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editactor [actorid] [name] [text]");
		}

		strcpy(ActorInfo[actorid][ActorName], name, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE actors SET name = '%e' WHERE id = %i", ActorInfo[actorid][ActorName], ActorInfo[actorid][ActorID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadActor(actorid);
	    SM(playerid, COLOR_AQUA, "** You've changed the name of actor %i to '%s'.", actorid, name);
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editactor [actorid] [world] [vw]");
		}

		ActorInfo[actorid][ActorWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE actors SET world = %i WHERE id = %i", ActorInfo[actorid][ActorWorld], ActorInfo[actorid][ActorID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadActor(actorid);
	    SM(playerid, COLOR_AQUA, "** You've changed the virtual world of actor %i to %i.", actorid, worldid);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new skinid;

	    if(sscanf(param, "i", skinid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editactor [actorid] [skin] [1-311)]");
		}
        if(!(0 <= skinid <= 311))
        {
            return SCM(playerid, COLOR_SYNTAX, "Invalid skin specified.");
        }

		ActorInfo[actorid][ActorSkin] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE actors SET actorskin = %i WHERE id = %i", ActorInfo[actorid][ActorSkin], ActorInfo[actorid][ActorID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadActor(actorid);
	    SM(playerid, COLOR_AQUA, "** You've changed the Skin of actor %i to %i.", actorid, skinid);
	}	
	else if(!strcmp(option, "anim", true))
	{
	    new anim;

	    if(sscanf(param, "i", anim))
	    {
			SCM(playerid, COLOR_SYNTAX, "Usage: /editactor [actorid] [anim] [1-311)]");
	        SCM(playerid, COLOR_SYNTAX, "Usage: /actoranimhelp for animation information");
			return 1;
		}
        if(!(0 <= anim <= 311))
        {
            return SCM(playerid, COLOR_SYNTAX, "Invalid Animation specified.");
        }

		ActorInfo[actorid][ActorAnim] = anim;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE actors SET actoranim = %i WHERE id = %i", ActorInfo[actorid][ActorAnim], ActorInfo[actorid][ActorID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadActor(actorid);
	    SM(playerid, COLOR_AQUA, "** You've changed the Animation of actor %i to %i.", actorid, anim);
	}    
	return 1;
}

CMD:gotoactor(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new actorid;

	if(pData[playerid][pAdmin] < 5 )
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", actorid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotoactor [actorid]");
	}
	if(!(0 <= actorid < MAX_DYNAMIC_ACTORS) || !ActorInfo[actorid][ActorExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid Actor.");
	}

	SetPlayerPos(playerid, ActorInfo[actorid][ActorPosX], ActorInfo[actorid][ActorPosY], ActorInfo[actorid][ActorPosZ]);
	SetPlayerFacingAngle(playerid, ActorInfo[actorid][ActorPosA]);
	SetPlayerVirtualWorld(playerid, ActorInfo[actorid][ActorWorld]);
	SetCameraBehindPlayer(playerid);
	return 1;
}


/*CMD:createaccount(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new username[MAX_PLAYER_NAME], password[10];

    if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[24]s[10]", username,password))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /createaccount [username] [password]");
	}

	if(cache_get_row_count(connectionID))
	{
	    SCM(playerid, COLOR_SYNTAX, "That player exist.");
	}
	else
	{
		gTotalRegistered++;
		SaveServerInfo();

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO users WHERE username = '%s', password = '%s'", username, password);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has created %s's account.", GetPlayerNameEx(playerid), username);
	}
	return 1;
}*/

CMD:deleteaccount(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new username[MAX_PLAYER_NAME];

    if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /deleteaccount [username]");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. You can't delete their account.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminDeleteAccount", "is", playerid, username);
	return 1;
}

CMD:doublexp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(!gDoubleXP)
	{
		gDoubleXP = true;
	    SMA(COLOR_AQUA, "** Admin enabled double experience. You will now gain double the respect points and job skill points.");
	}
	else
	{
		gDoubleXP = false;
	    SMA(COLOR_AQUA, "** Admin disabled double experience.");
	}

	return 1;
}

CMD:createspeed(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	static
	    Float:limit,
	    Float:range;
    if(pData[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if (sscanf(params, "ff", limit, range))
		return SendClientMessage(playerid, COLOR_GREY, "/createspeed [speed limit] [range] (default range: 30)");

	if (limit < 5.0 || limit > 200.0)
	    return SendClientMessage(playerid, COLOR_GREY, "The speed limit can't be below 5 or above 200.");

	if (range < 5.0 || range > 50.0)
	    return SendClientMessage(playerid, COLOR_GREY, "The range can't be below 5 or above 50.");

	if (Speed_Nearest(playerid) != -1)
	    return SendClientMessage(playerid, COLOR_GREY, "You can't do this in range another speed camera.");

	new id = Speed_Create(playerid, limit, range);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_GREY, "The server has reached the limit for speed cameras.");

	SM(playerid, COLOR_GREY, "You have created speed camera ID: %d.", id);
	return 1;
}

CMD:gotospeed(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new houseid;

    if(pData[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotogate [gateid]");
	}
	if(!(0 <= houseid < MAX_SPEED_CAMERAS) || !SpeedData[houseid][speedExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gate.");
	}
	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);
	SetPlayerPos(playerid, SpeedData[houseid][speedPos][0] - (2.5 * floatsin(-SpeedData[houseid][speedPos][3], degrees)), SpeedData[houseid][speedPos][1] - (2.5 * floatcos(-SpeedData[houseid][speedPos][3], degrees)), SpeedData[houseid][speedPos][2]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:destroyspeed(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	static
	    id = 0;

    if(pData[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if (sscanf(params, "d", id))
	    return SendClientMessage(playerid, COLOR_GREY, "/destroyspeed [speed id]");

	if ((id < 0 || id >= MAX_SPEED_CAMERAS) || !SpeedData[id][speedExists])
	    return SendClientMessage(playerid, COLOR_GREY, "You have specified an invalid speed camera ID.");

	Speed_Delete(id);
	DestroyDynamicMapIcon(SpeedData[id][sMapIcon]);
	SM(playerid, COLOR_GREY, "You have successfully destroyed speed camera ID: %d.", id);
	return 1;
}

CMD:createhouse(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new type, Float:x, Float:y, Float:z, Float:a;
    if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", type))
	{
	    SM(playerid, COLOR_SYNTAX, "Usage: /createhouse [type (1-%i)]", sizeof(houseInteriors));
		SCM(playerid, COLOR_SYNTAX, "Types: 1-6 Apartment | 7-9 Low Class | 10-12 Med Class | 13-16 Upper | 17-19 Mansion | 20 Custom House");
		return 1;
	}
	if(!(1 <= type <= sizeof(houseInteriors)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}
	if(GetNearbyHouse(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a house in range. Find somewhere else to create this one.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	type--;

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(!HouseInfo[i][hExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO houses (type, price, pos_x, pos_y, pos_z, pos_a, int_x, int_y, int_z, int_a, interior, outsideint, outsidevw) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, %i)", type, houseInteriors[type][intPrice], x, y, z, a - 180.0,
				houseInteriors[type][intX], houseInteriors[type][intY], houseInteriors[type][intZ], houseInteriors[type][intA], houseInteriors[type][intID], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateHouse", "iiiffff", playerid, i, type, x, y, z, a);
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "House slots are currently full. Ask managements to increase the internal limit.");
	return 1;
}


CMD:setbname(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new string[128], businessid = GetNearbyBusinessEx(playerid), ownername[128];

    if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're not near any business that you own.");
	}
	if(sscanf(params, "s[128]", ownername))
		return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /setbname [name]");

	format(BusinessInfo[businessid][bDescription], 128, "%s", ownername);
	format(string, sizeof(string), "You have set your house name to %s", ownername);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	ReloadBusiness(businessid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET biz_desc = '%e' WHERE id = %i", BusinessInfo[businessid][bDescription], BusinessInfo[businessid][bID]);
    mysql_tquery(connectionID, queryBuffer);

	format(string, sizeof(string), "%s has edited BusinessID %d's Name to %s.", GetPlayerNameEx(playerid), businessid, ownername);
	//Log("edithouse", string);
	return 1;
}

CMD:bname(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 5)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command!");
		return 1;
	}

	new string[128], businessid, desc[24];
	if(sscanf(params, "ds[128]", businessid, desc)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /bname [business id] [name]");

	format(BusinessInfo[businessid][bDescription], 128, "%s", desc);
	format(string, sizeof(string), "You have set the business description to %s", desc);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	ReloadBusiness(businessid);
	
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET biz_desc = '%e' WHERE id = %i", BusinessInfo[businessid][bDescription], BusinessInfo[businessid][bID]);
    mysql_tquery(connectionID, queryBuffer);
    
	format(string, sizeof(string), "%s has edited Business ID %d's description to %s.", GetPlayerNameEx(playerid), businessid, desc);
	//Log("editbiz", string);

	return 1;
}

CMD:edithouse(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new houseid, option[10], param[32];

	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[10]S()[32]", houseid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Outside, Inside, World, Type, Owner, Price, RentPrice, Level, Locked");
	    return 1;
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid house.");
	}

	if(!strcmp(option, "outside", true))
	{
	    GetPlayerPos(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
	    GetPlayerFacingAngle(playerid, HouseInfo[houseid][hPosA]);

	    HouseInfo[houseid][hOutsideInt] = GetPlayerInterior(playerid);
	    HouseInfo[houseid][hOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosA], HouseInfo[houseid][hOutsideInt], HouseInfo[houseid][hOutsideVW], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the exterior of house %i.", houseid);
	}
	else if(!strcmp(option, "inside", true))
	{
	    new type = -1;

	    for(new i = 0; i < sizeof(houseInteriors); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 100.0, houseInteriors[i][intX], houseInteriors[i][intY], houseInteriors[i][intZ]))
	        {
	            type = i;
			}
	    }

	    GetPlayerPos(playerid, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ]);
	    GetPlayerFacingAngle(playerid, HouseInfo[houseid][hIntA]);

	    HouseInfo[houseid][hInterior] = GetPlayerInterior(playerid);
		HouseInfo[houseid][hType] = type;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", type, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the interior of house %i.", houseid);
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [world] [vw]");
		}

		HouseInfo[houseid][hWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET world = %i WHERE id = %i", HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the virtual world of house %i to %i.", houseid, worldid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [type] [value (1-%i)]", sizeof(houseInteriors));
		}
		if(!(1 <= type <= sizeof(houseInteriors)))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		type--;

		HouseInfo[houseid][hType] = type;
		HouseInfo[houseid][hInterior] = houseInteriors[type][intID];
		HouseInfo[houseid][hIntX] = houseInteriors[type][intX];
		HouseInfo[houseid][hIntY] = houseInteriors[type][intY];
		HouseInfo[houseid][hIntZ] = houseInteriors[type][intZ];
		HouseInfo[houseid][hIntA] = houseInteriors[type][intA];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", type, HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the type of house %i to %i.", houseid, type + 1);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(!pData[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
		}

        SetHouseOwner(houseid, targetid);
	    SM(playerid, COLOR_AQUA, "** You've changed the owner of house %i to %s.", houseid, GetRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [price] [value]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
		}

		HouseInfo[houseid][hPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET price = %i WHERE id = %i", HouseInfo[houseid][hPrice], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the price of house %i to $%i.", houseid, price);
	}
	else if(!strcmp(option, "rentprice", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [rentprice] [value]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
		}

		HouseInfo[houseid][hRentPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET rentprice = %i WHERE id = %i", HouseInfo[houseid][hRentPrice], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the rent price of house %i to $%i.", houseid, price);
	}
	else if(!strcmp(option, "level", true))
	{
	    new level;

	    if(sscanf(param, "i", level))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [level] [value (0-5)]");
		}
		if(!(0 <= level <= 5))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 5.");
		}

		HouseInfo[houseid][hLevel] = level;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET level = %i WHERE id = %i", HouseInfo[houseid][hLevel], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the level of house %i to %i.", houseid, level);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /edithouse [houseid] [locked] [0/1]");
		}

		HouseInfo[houseid][hLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = %i WHERE id = %i", HouseInfo[houseid][hLocked], HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadHouse(houseid);
	    SM(playerid, COLOR_AQUA, "** You've changed the lock state of house %i to %i.", houseid, locked);
	}

	return 1;
}

CMD:removehouse(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new houseid;

	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removehouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid house.");
	}

	DestroyDynamic3DTextLabel(HouseInfo[houseid][hText]);
	DestroyDynamicPickup(HouseInfo[houseid][hPickup]);
	DestroyDynamicMapIcon(HouseInfo[houseid][hMapIcon]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM houses WHERE id = %i", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	HouseInfo[houseid][hExists] = 0;
	HouseInfo[houseid][hID] = 0;
	HouseInfo[houseid][hOwnerID] = 0;

	SM(playerid, COLOR_AQUA, "** You have removed house %i.", houseid);
	return 1;
}

CMD:gotohouse(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new houseid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotohouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid house.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
	SetPlayerFacingAngle(playerid, HouseInfo[houseid][hPosA]);
	SetPlayerInterior(playerid, HouseInfo[houseid][hOutsideInt]);
	SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:previewint(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new type, string[32];

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", type))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /previewint [1-%i]", sizeof(houseInteriors));
	}
	if(!(1 <= type <= sizeof(houseInteriors)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}

	type--;

	format(string, sizeof(string), "~w~%s", houseInteriors[type][intClass]);
	GameTextForPlayer(playerid, string, 5000, 1);

	SetPlayerPos(playerid, houseInteriors[type][intX], houseInteriors[type][intY], houseInteriors[type][intZ]);
	SetPlayerFacingAngle(playerid, houseInteriors[type][intA]);
	SetPlayerInterior(playerid, houseInteriors[type][intID]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:nearest(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new id;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Nearest Items:");

	if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of house ID %i.", id);
	}
	if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of garage ID %i.", id);
	}
	if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of business ID %i.", id);
	}
	if((id = GetNearbyEntrance(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of entrance ID %i.", id);
	}
	if((id = GetNearbyLand(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of land ID %i.", id);
	}
	if((id = GetNearbyTurf(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of turf ID %i.", id);
	}
	if((id = GetNearbyLocation(playerid, 20.0)) >= 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY2, "You are in range of (location) %s [%i].", LocationInfo[id][locName], id);
	}
	if((id = Gate_Nearest(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of gate ID %i.", id);
	}
	if((id = Speed_Nearest(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "You are in range of speedcam ID %i", id);
	}
	if((id = GetNearbyAtm(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "You are in range of atm ID %i", id);
	}
	if((id = GetNearbyVen(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "You are in range of vendors ID %i", id);
	}
	if((id = GetNearbyMdc(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "You are in range of mdc ID %i", id);
	}
	if((id = GetNearbySur(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "You are in range of surgery ID %i", id);
	}
	if((id = GetNearbyBar(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "You are in range of bar ID %i", id);
	}
	if((id = GetNearbyVehicle(playerid)) >= 0)
	{
	    SM(playerid, COLOR_GREY2, "You are in range of Vehicle ID %i.", id);
	}
	if((id = GetNearbyPG(playerid)) >= 0)
	{
		SCMf(playerid, COLOR_GREY2, "You are in range of public garage ID %i", id);
	}
	return 1;
}

CMD:dynamichelp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	SCM(playerid, COLOR_TEAL, "[Houses]"WHITE" /createhouse, /hname, /edithouse, /removehouse, /gotohouse, /asellhouse.");
	SCM(playerid, SERVER_COLOR, "[Garages]"WHITE" /creategarage, /editgarage, /removegarage, /gotogarage, /asellgarage.");
    SCM(playerid, COLOR_TEAL, "[Business]"WHITE" /createbiz, /bname, /editbiz, /removebiz, /gotobiz, /asellbiz.");
	SCM(playerid, SERVER_COLOR, "[Entrances]"WHITE" /createentrance, /editentrance, /removeentrance, /gotoentrance.");
	SCM(playerid, COLOR_TEAL, "[Points]"WHITE" /createpoint, /editpoint, /removepoint, /gotopoint.");
    SCM(playerid, SERVER_COLOR, "[Turfs]"WHITE" /createturf, /turfcancel, /editturf, /removeturf, /gototurf.");
	SCM(playerid, COLOR_TEAL, "[Fires]"WHITE" /randomfire, /killfire, /spawnfire.");
	SCM(playerid, COLOR_TEAL, "[LOCATION]"WHITE" /createlocation, /removelocation.");
	
	SCM(playerid, SERVER_COLOR, "[Gates]"WHITE" /creategate, /destroygate, /editgate, /gotogate.");
	SCM(playerid, COLOR_TEAL, "[SpeedCameras]"WHITE" /createspeed, /destroyspeed, /gotospeed.");
	SCM(playerid, SERVER_COLOR, "[Lockers]"WHITE" /createlocker, /editlocker, /removelocker, /gotolocker.");
	SCM(playerid, COLOR_TEAL, "[Atm]"WHITE" /createatm, /removeatm");
	SCM(playerid, SERVER_COLOR, "[Vendor]"WHITE" /createvendor, /removevendor.");
	SCM(playerid, SERVER_COLOR, "[Mdc]"WHITE" /createmdc, /removemdc.");
	SCM(playerid, SERVER_COLOR, "[Surgery]"WHITE" /createsurgey, /removesurgery.");
	SCM(playerid, SERVER_COLOR, "[Public Garage]"WHITE" /createpg, /removepg.");
	SCM(playerid, COLOR_TEAL, "[Bar]"WHITE" /createbar, /removebar.");
	return 1;
}

forward OnAdminCreateLocation(playerid, location, name[], Float:x, Float:y, Float:z);
public OnAdminCreateLocation(playerid, location, name[], Float:x, Float:y, Float:z)
{
	LocationInfo[location][locID] = cache_insert_id(connectionID);
	LocationInfo[location][locExists] = true;
	strcpy(LocationInfo[location][locName], name, 32);
    LocationInfo[location][locPosX] = x;
    LocationInfo[location][locPosY] = y;
    LocationInfo[location][locPosZ] = z;

    SendClientMessageEx(playerid, COLOR_GREEN, "* Location [%i] %s created at %.1f, %.1f, %.1f.", location, name, x, y, z);
}

CMD:removelocation(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new loc;

	if(pData[playerid][pAdmin] < 7)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", loc))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "{FF6347}Usage:{ffffff} /removelocation [locationid]");
	}
	if(!(0 <= loc < MAX_LOCATIONS) || !LocationInfo[loc][locExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid location.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM locations WHERE id = %i", LocationInfo[loc][locID]);
	mysql_tquery(connectionID, queryBuffer);
	LocationInfo[loc][locName][0] = EOS;
	LocationInfo[loc][locExists] = false;
	LocationInfo[loc][locID] = 0;

	SendClientMessageEx(playerid, COLOR_AQUA, "* You have removed location %i.", loc);
	return 1;
}


CMD:createlocation(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new name[32], Float:x, Float:y, Float:z;
    if(pData[playerid][pAdmin] < 7 )
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
    }
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
    if(sscanf(params, "s[32]", name))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "{FF6347}Usage:{ffffff} /createlocation [name]");
		SendClientMessage(playerid, COLOR_WHITE, "* NOTE: The location will be created at the coordinates you are standing on.");
		return 1;
	}
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Your virtual world & interior must be 0!");
	}
    GetPlayerPos(playerid, x, y, z);
    for(new i = 0; i < MAX_LOCATIONS; i ++)
	{
		if(!LocationInfo[i][locExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO locations VALUES(null, '%e', '%f', '%f', '%f')", name, x, y, z);
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateLocation", "iisfff", playerid, i, name, x, y, z);
		    return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "Location slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:asellhouse(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new houseid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /asellhouse [houseid]");
	}
	if(!(0 <= houseid < MAX_HOUSES) || !HouseInfo[houseid][hExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid house.");
	}

	SetHouseOwner(houseid, INVALID_PLAYER_ID);
	SM(playerid, COLOR_AQUA, "** You have admin sold house %i.", houseid);
	return 1;
}

CMD:asellgarage(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new garageid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /asellgarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid garage.");
	}

	SetGarageOwner(garageid, INVALID_PLAYER_ID);
	SM(playerid, COLOR_AQUA, "** You have admin sold garage %i.", garageid);
	return 1;
}

CMD:asellbiz(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new businessid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /asellbiz [businessid]");
	}
	if(!(0 <= businessid < MAX_BUSINESSES) || !BusinessInfo[businessid][bExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid business.");
	}

	SetBusinessOwner(businessid, INVALID_PLAYER_ID);
	SM(playerid, COLOR_AQUA, "** You have admin sold business %i.", businessid);
	return 1;
}
CMD:paintball(playerid, params[]) { return callcmd::joinpb(playerid, params); }
CMD:joinpaintball(playerid, params[]) { return callcmd::joinpb(playerid, params); }
CMD:joinpb(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pInjured] > 0 || pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 2114.0562,-1742.5917,13.5547))
	{
		if(pData[playerid][pAcceptedHelp])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can not enter the paintball arena while on helper duty!");
	    }
		if(pData[playerid][pBrokenLeg])
		{
			return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You cant join while brokenleg");
		}
		if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
		{
			return SCM(playerid, COLOR_SYNTAX, "You are not allowed to join a paintball reason weapon restricted or level 1.");
		}
		ShowDialogToPlayer(playerid, DIALOG_PAINTBALL);
	}
	else
	{
		EnterCheck(playerid);
	}

	return 1;
}

CMD:exitpaintball(playerid, params[]) { return callcmd::exitpb(playerid, params); }
CMD:exitpb(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pInjured] > 0 || pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}

	if(pData[playerid][pPaintball])
	{
 		foreach(new i : Player)
		{
		    if(pData[i][pPaintball])
	    	{
	        	SM(i, COLOR_LIGHTORANGE, "(( %s has left the Warehouse arena. ))", GetRPName(playerid));
			}
		}
		pData[playerid][pBrokenLeg] = 0;
        ResetPlayerWeapons(playerid);
        SetPlayerArmedWeapon(playerid, 0);
		pData[playerid][pPaintball] = 0;
		SetPlayerToSpawn(playerid);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UnfreezePlayerEx", 5000, false, "i", playerid);

		// We end the round if there are no players
		if(GetPBPlayers1() == 0) PaintballTimer1 = 0;
	}
	
	else
	{
		ExitCheck(playerid);
	}

	return 1;
}
CMD:buyhouse(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new houseid, type[16];

	if((houseid = GetNearbyHouse(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no house in range. You must be near a house.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /buyhouse [confirm]");
	}
	if(HouseInfo[houseid][hOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This house already has an owner.");
	}
	if(pData[playerid][pCash] < HouseInfo[houseid][hPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this house.");
	}
	if(GetPlayerAssetCount(playerid, LIMIT_HOUSES) >= GetPlayerAssetLimit(playerid, LIMIT_HOUSES))
	{
	    return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i houses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_HOUSES), GetPlayerAssetLimit(playerid, LIMIT_HOUSES));
	}

	if(HouseInfo[houseid][hType]) {
	    type = "House";
	} else {
		strcpy(type, houseInteriors[HouseInfo[houseid][hType]][intClass]);
	}

	SetHouseOwner(houseid, playerid);
	GivePlayerCash(playerid, -HouseInfo[houseid][hPrice]);
	TextDrawHideForPlayer(playerid, HouseNear_4);
	TextDrawHideForPlayer(playerid, HouseNear_5);
	TextDrawHideForPlayer(playerid, HouseNear_6);
	TextDrawHideForPlayer(playerid, HouseNear_8);
	TextDrawHideForPlayer(playerid, HouseNear_3);
	TextDrawHideForPlayer(playerid, HouseNear_2);
	TextDrawHideForPlayer(playerid, HouseNear_1);
	TextDrawHideForPlayer(playerid, HouseNear_0);
	PlayerTextDrawHide(playerid, HouseNear_7[playerid]);
	
	SM(playerid, COLOR_YELLOW, "You paid $%i to make this house yours! /househelp for a list of commands.", HouseInfo[houseid][hPrice]);
	Log_Write("log_property", "%s (uid: %i) purchased %s (id: %i) for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], type, HouseInfo[houseid][hID], HouseInfo[houseid][hPrice]);
	return 1;
}
CMD:cafeteria(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 7.0, 2042.9763, -2031.3365, 871.1051))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not at the Cafeteria!");
		return 1;
	}
	ShowPlayerDialog(playerid, DIALOG_VENDOR, DIALOG_STYLE_LIST, ""TEAL"Cafeteria", "SISIG "GREEN"85 PHP"WHITE"\nTAPSILOG "GREEN"150 PHP"WHITE"\nMENUDO WITH RICE "GREEN"25 PHP"WHITE"\nDONUT "GREEN"55 PHP"WHITE"\nBUKO JUICE "GREEN"20 PHP"WHITE"\nPINEAPPLE JUICE "GREEN"50 PHP"WHITE"\nSPRITE "GREEN"28 PHP"WHITE"\nNATURE SPRING "GREEN"15 PHP"WHITE"", "Proceed", "Back");
	return 1;
}

CMD:lock(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new id, houseid = GetInsideHouse(playerid);
	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
    	{
		   	if(houseid >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[houseid][hID])
			{
			    if(!(IsHouseOwner(playerid, houseid) || pData[playerid][pRentingHouse] == HouseInfo[houseid][hID] || pData[playerid][pFurniturePerms] == houseid))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "You don't have permission from the house owner to lock this door.");
			    }

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_locked FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		 		mysql_tquery(connectionID, queryBuffer, "OnPlayerLockFurnitureDoor", "ii", playerid, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
		}
	}
    if((id = GetNearbyVehicle(playerid)) != INVALID_VEHICLE_ID && (IsVehicleOwner(playerid, id) || pData[playerid][pVehicleKeys] == id || (VehicleInfo[id][vGang] >= 0 && VehicleInfo[id][vGang] == pData[playerid][pGang]) || VehicleInfo[id][vFactionType] >= 0 && VehicleInfo[id][vFactionType] == pData[playerid][pFaction]))
	{
	    if(!VehicleInfo[id][vLocked])
	    {
            new string[24];
			VehicleInfo[id][vLocked] = 1;
   		    format(string, sizeof(string), "~r~%s locked", GetVehicleName(id));
            GameTextForPlayer(playerid, string, 3000, 3);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their %s.", GetRPName(playerid), GetVehicleName(id));
		}
		else
		{
			VehicleInfo[id][vLocked] = 0;
            new string[24];
            format(string, sizeof(string), "~b~%s unlocked", GetVehicleName(id));
            GameTextForPlayer(playerid, string, 3000, 3);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their %s.", GetRPName(playerid), GetVehicleName(id));
		}

		SetVehicleParams(id, VEHICLE_DOORS, VehicleInfo[id][vLocked]);
        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET locked = %i WHERE id = %i", VehicleInfo[id][vLocked], VehicleInfo[id][vID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyHouseEx(playerid)) >= 0 && (IsHouseOwner(playerid, id) || pData[playerid][pRentingHouse] == HouseInfo[id][hID]))
	{
	    if(!HouseInfo[id][hLocked])
	    {
			HouseInfo[id][hLocked] = 1;

			GameTextForPlayer(playerid, "~r~House locked", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their house door.", GetRPName(playerid));
		}
		else
		{
			HouseInfo[id][hLocked] = 0;

			GameTextForPlayer(playerid, "~g~House unlocked", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their house door.", GetRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = %i WHERE id = %i", HouseInfo[id][hLocked], HouseInfo[id][hID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyGarageEx(playerid)) >= 0 && IsGarageOwner(playerid, id))
	{
	    if(!GarageInfo[id][gLocked])
	    {
			GarageInfo[id][gLocked] = 1;

			GameTextForPlayer(playerid, "~r~Garage locked", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their garage door.", GetRPName(playerid));
		}
		else
		{
			GarageInfo[id][gLocked] = 0;

			GameTextForPlayer(playerid, "~g~Garage unlocked", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their garage door.", GetRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = %i WHERE id = %i", GarageInfo[id][gLocked], GarageInfo[id][gID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyBusinessEx(playerid)) >= 0 && IsBusinessOwner(playerid, id))
	{
	    if(!BusinessInfo[id][bLocked])
	    {
			BusinessInfo[id][bLocked] = 1;

			GameTextForPlayer(playerid, "~r~Business locked", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their business door.", GetRPName(playerid));
		}
		else
		{
			BusinessInfo[id][bLocked] = 0;

			GameTextForPlayer(playerid, "~g~Business unlocked", 3000, 6);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their business door.", GetRPName(playerid));
		}

		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[id][bLocked], BusinessInfo[id][bID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	else if((id = GetNearbyEntranceEx(playerid)) >= 0)
	{
	    new correct_pass;

	    if(!IsEntranceOwner(playerid, id) && strcmp(EntranceInfo[id][ePassword], "None", true) != 0)
		{
			if(isnull(params)) {
                return SCM(playerid, COLOR_SYNTAX, "Usage: /lock [password]");
			} else if(strcmp(params, EntranceInfo[id][ePassword]) != 0) {
			    return SCM(playerid, COLOR_SYNTAX, "Incorrect password.");
			} else {
				correct_pass = true;
			}
	    }

	    if((correct_pass) || IsEntranceOwner(playerid, id))
	    {
		    if(!EntranceInfo[id][eLocked])
		    {
				EntranceInfo[id][eLocked] = 1;

				GameTextForPlayer(playerid, "~r~Entrance locked", 3000, 6);
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s locks their entrance door.", GetRPName(playerid));
			}
			else
			{
				EntranceInfo[id][eLocked] = 0;

				GameTextForPlayer(playerid, "~g~Entrance unlocked", 3000, 6);
				SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s unlocks their entrance door.", GetRPName(playerid));
			}

            PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET locked = %i WHERE id = %i", EntranceInfo[id][eLocked], EntranceInfo[id][eID]);
			mysql_tquery(connectionID, queryBuffer);
		}

		return 1;
	}

	SCM(playerid, COLOR_SYNTAX, "You are not close to anything which you can lock.");

	return 1;
}

CMD:househelp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SCM(playerid, COLOR_LIGHTORANGE, "** House Commands: /buyhouse, /furniture, /lock, /stash, /sellhouse, /sellmyhouse.");
	SCM(playerid, COLOR_LIGHTORANGE, "** House Commands: /lopen, /renthouse, /unrent, /setrent, /tenants, /evict, /evictall.");
	SCM(playerid, COLOR_LIGHTORANGE, "** House Commands: /houseinvite, /sethname");
	return 1;
}

CMD:stash(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new houseid;

	if((houseid = GetInsideHouse(playerid)) >= 0 && IsHouseOwner(playerid, houseid))
	{
	    new option[14], param[32];

		if(!HouseInfo[houseid][hLevel])
		{
		    return SCM(playerid, COLOR_SYNTAX, "This house has no stash upgrade. '/upgradehouse level' to purchase one.");
	    }
		if(sscanf(params, "s[14]S()[32]", option, param))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [balance | deposit | withdraw]");
	    }
	    if(!strcmp(option, "balance", true))
	    {
	        new count;

	        for(new i = 0; i < 10; i ++)
	        {
	            if(HouseInfo[houseid][hWeapons][i])
	            {
	                count++;
	            }
	        }

	        SCM(playerid, SERVER_COLOR, "Stash Balance:");
	        SM(playerid, COLOR_GREY2, "Cash: $%i/$%i", HouseInfo[houseid][hCash], GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH));
			SM(playerid, COLOR_GREY2, "Materials: %i/%i | Weapons: %i/%i", HouseInfo[houseid][hMaterials], GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS), count, GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS));
	        SM(playerid, COLOR_GREY2, "Pot: %i/%i grams | Crack: %i/%i grams", HouseInfo[houseid][hPot], GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED), HouseInfo[houseid][hCrack], GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE));
	        SM(playerid, COLOR_GREY2, "Meth: %i/%i grams | Painkillers: %i/%i pills", HouseInfo[houseid][hMeth], GetHouseStashCapacity(houseid, STASH_CAPACITY_METH), HouseInfo[houseid][hPainkillers], GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS));
            SCM(playerid, SERVER_COLOR, "Stash Ammunition:");
			SM(playerid, COLOR_GREY2, "HP Ammo: %i/%i | Poison Ammo: %i/%i", HouseInfo[houseid][hHPAmmo], GetHouseStashCapacity(houseid, STASH_CAPACITY_HPAMMO), HouseInfo[houseid][hPoisonAmmo], GetHouseStashCapacity(houseid, STASH_CAPACITY_POISONAMMO));
            SM(playerid, COLOR_GREY2, "FMJ Ammo: %i/%i", HouseInfo[houseid][hFMJAmmo], GetHouseStashCapacity(houseid, STASH_CAPACITY_FMJAMMO));

			if(count > 0)
			{
				SCM(playerid, SERVER_COLOR, "Stash Weapons:");

            	for(new i = 0; i < 10; i ++)
	            {
    	            if(HouseInfo[houseid][hWeapons][i])
	    	        {
	        	        SM(playerid, COLOR_GREY2, "[%i] Weapon: %s", i + 1, GetWeaponNameEx(HouseInfo[houseid][hWeapons][i]));
					}
				}
	        }
		}
		else if(!strcmp(option, "deposit", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [option]");
	            SCM(playerid, COLOR_WHITE, "Available options: Cash, Materials, Pot, Crack, Meth, Painkillers, Weapon");
	            SCM(playerid, COLOR_WHITE, "Available options: HPAmmo, PoisonAmmo, FMJAmmo");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [cash] [amount]");
				}
				if(value < 1 || value > pData[playerid][pCash])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH) < HouseInfo[houseid][hCash] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to $%i at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_CASH));
			    }

			    GivePlayerCash(playerid, -value);
			    HouseInfo[houseid][hCash] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored $%i in your house stash.", value);
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [materials] [amount]");
				}
				if(value < 1 || value > pData[playerid][pMaterials])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS) < HouseInfo[houseid][hMaterials] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i materials at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_MATERIALS));
			    }

			    pData[playerid][pMaterials] -= value;
			    HouseInfo[houseid][hMaterials] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET materials = %i WHERE id = %i", HouseInfo[houseid][hMaterials], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i materials in your house stash.", value);
   			}
			else if(!strcmp(option, "pot", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [pot] [amount]");
				}
				if(value < 1 || value > pData[playerid][pPot])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED) < HouseInfo[houseid][hPot] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i grams of pot at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_WEED));
			    }

			    pData[playerid][pPot] -= value;
			    HouseInfo[houseid][hPot] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET pot = %i WHERE id = %i", HouseInfo[houseid][hPot], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of pot in your house stash.", value);
   			}
   			else if(!strcmp(option, "crack", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [Crack] [amount]");
				}
				if(value < 1 || value > pData[playerid][pCrack])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE) < HouseInfo[houseid][hCrack] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i grams of Crack at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_COCAINE));
			    }

			    pData[playerid][pCrack] -= value;
			    HouseInfo[houseid][hCrack] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET crack = %i WHERE id = %i", HouseInfo[houseid][hCrack], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of Crack in your house stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [meth] [amount]");
				}
				if(value < 1 || value > pData[playerid][pMeth])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_METH) < HouseInfo[houseid][hMeth] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i grams of meth at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_METH));
			    }

			    pData[playerid][pMeth] -= value;
			    HouseInfo[houseid][hMeth] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET meth = %i WHERE id = %i", HouseInfo[houseid][hMeth], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of meth in your house stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [painkillers] [amount]");
				}
				if(value < 1 || value > pData[playerid][pPainkillers])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS) < HouseInfo[houseid][hPainkillers] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i painkillers at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_PAINKILLERS));
			    }

			    pData[playerid][pPainkillers] -= value;
			    HouseInfo[houseid][hPainkillers] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET painkillers = %i WHERE id = %i", HouseInfo[houseid][hPainkillers], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i painkillers in your house stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new weaponid;
   			    if(sscanf(param, "i", weaponid))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [weapon] [weaponid] (/guninv for weapon IDs)");
				}
				if(!(1 <= weaponid <= 46) || pData[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You don't have that weapon. /guninv for a list of your weapons.");
				}
				if(GetHealth(playerid) < 60)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You can't store weapons as your health is below 60.");
				}
				if(enabledpurge == 1)
				{
					return SCM(playerid, COLOR_WHITE, "You are not allowed to deposit when purge is enable");
				}
				if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
				{
					return SCM(playerid, COLOR_SYNTAX, "You are not allowed to store a gun when you are weapon restricted or level 1.");
				}
				if(pData[playerid][pDuty] == 1)
				{
					return SCM(playerid, COLOR_GREY2, "You can't use this command while on-duty.");
				}
				if(weaponid == 5 && pData[playerid][pVIPgun1] == 1)
				{
					return SCM(playerid, COLOR_GREY2, "You are not allowed to deposit this gun.");
				}
				if(weaponid == 22 && pData[playerid][pVIPgun2] == 1)
				{
					return SCM(playerid, COLOR_GREY2, "You are not allowed to deposit this gun.");
				}
				if(weaponid == 8 && pData[playerid][pVIPgun3] == 1)
				{
					return SCM(playerid, COLOR_GREY2, "You are not allowed to deposit this gun.");
				}	
				if(weaponid == 29 && pData[playerid][pVIPgun4] == 1)
				{
					return SCM(playerid, COLOR_GREY2, "You are not allowed to deposit this gun.");
				}				
				if(weaponid == 25 && pData[playerid][pVIPgun5] == 1)
				{
					return SCM(playerid, COLOR_GREY2, "You are not allowed to deposit this gun.");
				}
				for(new i = 0; i < GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS); i ++)
				{
					if(!HouseInfo[houseid][hWeapons][i])
   				    {
						HouseInfo[houseid][hWeapons][i] = weaponid;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weapon_%i = %i WHERE id = %i", i + 1, HouseInfo[houseid][hWeapons][i], HouseInfo[houseid][hID]);
						mysql_tquery(connectionID, queryBuffer);

						RemovePlayerWeapon(playerid, weaponid);
						SM(playerid, COLOR_AQUA, "** You have stored a %s in slot %i of your house stash.", GetWeaponNameEx(HouseInfo[houseid][hWeapons][i]), value + 1);
						new szString[528];
						format(szString, sizeof(szString), "%s have stored a %s in slot %i of your house stash.", GetRPName(playerid), GetWeaponNameEx(HouseInfo[houseid][hWeapons][i]), value + 1);
						SendDiscordMessage(16, szString);
						return 1;
					}
				}

				SCM(playerid, COLOR_SYNTAX, "Your house stash has no more slots available for weapons.");
			}
   			else if(!strcmp(option, "hpammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [hpammo] [amount]");
				}
				if(value < 1 || value > pData[playerid][pHPAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_HPAMMO) < HouseInfo[houseid][hHPAmmo] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i hollow point ammo at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_HPAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] - value);
			    HouseInfo[houseid][hHPAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET hpammo = %i WHERE id = %i", HouseInfo[houseid][hHPAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of hollow point ammo in your house stash.", value);
   			}
   			else if(!strcmp(option, "poisonammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [poisonammo] [amount]");
				}
				if(value < 1 || value > pData[playerid][pPoisonAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_POISONAMMO) < HouseInfo[houseid][hPoisonAmmo] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i poison tip ammo at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_POISONAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] - value);
			    HouseInfo[houseid][hPoisonAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET poisonammo = %i WHERE id = %i", HouseInfo[houseid][hPoisonAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of poison tip ammo in your house stash.", value);
   			}
   			else if(!strcmp(option, "fmjammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [deposit] [fmjammo] [amount]");
				}
				if(value < 1 || value > pData[playerid][pFMJAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(GetHouseStashCapacity(houseid, STASH_CAPACITY_FMJAMMO) < HouseInfo[houseid][hFMJAmmo] + value)
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your stash can only hold up to %i FMJ ammo at your house's level.", GetHouseStashCapacity(houseid, STASH_CAPACITY_FMJAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] - value);
			    HouseInfo[houseid][hFMJAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET fmjammo = %i WHERE id = %i", HouseInfo[houseid][hFMJAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of full metal jacket ammo in your house stash.", value);
   			}
		}
		else if(!strcmp(option, "withdraw", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [option]");
	            SCM(playerid, COLOR_WHITE, "Available options: Cash, Pot, Crack, Meth, Painkillers, Weapon");
	            SCM(playerid, COLOR_WHITE, "Available options: HPAmmo, PoisonAmmo, FMJAmmo");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [cash] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hCash])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }

			    GivePlayerCash(playerid, value);
			    HouseInfo[houseid][hCash] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET cash = %i WHERE id = %i", HouseInfo[houseid][hCash], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken $%i from your house stash.", value);
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [materials] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hMaterials])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pMaterials] + value > GetPlayerCapacity(CAPACITY_MATERIALS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
				}

			    pData[playerid][pMaterials] += value;
			    HouseInfo[houseid][hMaterials] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET materials = %i WHERE id = %i", HouseInfo[houseid][hMaterials], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i materials from your house stash.", value);
   			}
			else if(!strcmp(option, "pot", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [pot] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hPot])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pPot] + value > GetPlayerCapacity(CAPACITY_WEED))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
				}

			    pData[playerid][pPot] += value;
			    HouseInfo[houseid][hPot] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET pot = %i WHERE id = %i", HouseInfo[houseid][hPot], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of pot from your house stash.", value);
   			}
   			else if(!strcmp(option, "crack", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [Crack] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hCrack])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pCrack] + value > GetPlayerCapacity(CAPACITY_COCAINE))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
				}

			    pData[playerid][pCrack] += value;
			    HouseInfo[houseid][hCrack] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET crack = %i WHERE id = %i", HouseInfo[houseid][hCrack], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of Crack from your house stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [meth] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hMeth])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pMeth] + value > GetPlayerCapacity(CAPACITY_METH))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
				}

			    pData[playerid][pMeth] += value;
			    HouseInfo[houseid][hMeth] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET meth = %i WHERE id = %i", HouseInfo[houseid][hMeth], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of meth from your house stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [painkillers] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hPainkillers])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pPainkillers] + value > GetPlayerCapacity(CAPACITY_PAINKILLERS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPainkillers], GetPlayerCapacity(CAPACITY_PAINKILLERS));
				}

			    pData[playerid][pPainkillers] += value;
			    HouseInfo[houseid][hPainkillers] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET painkillers = %i WHERE id = %i", HouseInfo[houseid][hPainkillers], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i painkillers from your house stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new slots = GetHouseStashCapacity(houseid, STASH_CAPACITY_WEAPONS);

   			    if(sscanf(param, "i", value))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [weapon] [slot (1-%i)]", slots);
				}
				if(value < 1 || value > slots)
				{
				    return SCM(playerid, COLOR_SYNTAX, "Invalid slot, or the slot specified is locked.");
   			    }
   			    if(!HouseInfo[houseid][hWeapons][value-1])
   			    {
   			        return SCM(playerid, COLOR_SYNTAX, "The slot specified contains no weapon which you can take.");
				}
				if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
				{
					return SCM(playerid, COLOR_SYNTAX, "You are not allowed to withdraw a gun when you are weapon restricted or level 1.");
				}
				GiveWeapon(playerid, HouseInfo[houseid][hWeapons][value-1]);
				SM(playerid, COLOR_AQUA, "** You have taken a %s from slot %i of your house stash.", GetWeaponNameEx(HouseInfo[houseid][hWeapons][value-1]), value);

				HouseInfo[houseid][hWeapons][value-1] = 0;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET weapon_%i = 0 WHERE id = %i", value, HouseInfo[houseid][hID]);
				mysql_tquery(connectionID, queryBuffer);
			}
   			else if(!strcmp(option, "hpammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [hpammo] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hHPAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pHPAmmo] + value > GetPlayerCapacity(CAPACITY_HPAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i HP ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pHPAmmo], GetPlayerCapacity(CAPACITY_HPAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] + value);
			    HouseInfo[houseid][hHPAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET hpammo = %i WHERE id = %i", HouseInfo[houseid][hHPAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of hollow point ammo from your house stash.", value);
   			}
   			else if(!strcmp(option, "poisonammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [poisonammo] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hPoisonAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pPoisonAmmo] + value > GetPlayerCapacity(CAPACITY_POISONAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i poison ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPoisonAmmo], GetPlayerCapacity(CAPACITY_POISONAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] + value);
			    HouseInfo[houseid][hPoisonAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET poisonammo = %i WHERE id = %i", HouseInfo[houseid][hPoisonAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of poison tip ammo from your house stash.", value);
   			}
   			else if(!strcmp(option, "fmjammo", true))
			{
       			if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /stash [withdraw] [fmjammo] [amount]");
				}
				if(value < 1 || value > HouseInfo[houseid][hFMJAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pFMJAmmo] + value > GetPlayerCapacity(CAPACITY_FMJAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i FMJ ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pFMJAmmo], GetPlayerCapacity(CAPACITY_FMJAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] + value);
			    HouseInfo[houseid][hFMJAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET fmjammo = %i WHERE id = %i", HouseInfo[houseid][hFMJAmmo], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of full metal jacket ammo from your house stash.", value);
   			}
		}
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any stash which you can use.");
	}

	return 1;
}

CMD:upgradehouse(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new
		houseid = GetNearbyHouseEx(playerid),
		option[10],
		param[12],
		string[20];

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "s[10]S()[12]", option, param))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /upgradehouse [level]");
	}
	if(!strcmp(option, "level", true))
	{
	    new cost = (HouseInfo[houseid][hLevel] * 500000) + 250000;

	    if(HouseInfo[houseid][hLevel] >= 5)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your house is already at the maximum level possible.");
		}
		if(isnull(param) || strcmp(param, "confirm", true) != 0)
		{
		    SCM(playerid, COLOR_SYNTAX, "Usage: /upgradehouse [level] [confirm]");
		    SM(playerid, COLOR_WHITE, "You are about to upgrade to level %i/5 which will cost you $%i.", HouseInfo[houseid][hLevel] + 1, cost);
			return 1;
		}
		if(pData[playerid][pCash] < cost)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You don't have that much cash.");
		}

		HouseInfo[houseid][hLevel]++;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET level = level + 1 WHERE id = %i", HouseInfo[houseid][hID]);
		mysql_tquery(connectionID, queryBuffer);

		format(string, sizeof(string), "~r~-$%i", cost);
		GameTextForPlayer(playerid, string, 5000, 1);

		GivePlayerCash(playerid, -cost);
		ReloadHouse(houseid);

		if(HouseInfo[houseid][hLevel] == 1)
		{
		    SM(playerid, COLOR_YELLOW, "You have upgraded your house to level %i/5. You unlocked a stash for your house! (/stash)", HouseInfo[houseid][hLevel]);
		}
		else
		{
			SM(playerid, COLOR_YELLOW, "You have upgraded your house to level %i/5. Your stash capacity was increased.", HouseInfo[houseid][hLevel]);
		}

		SM(playerid, COLOR_YELLOW, "Your tenant were also both increased to %i/%i.", GetHouseTenantCapacity(houseid));
		Log_Write("log_property", "%s (uid: %i) upgraded their house (id: %i) to level %i for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], HouseInfo[houseid][hID], HouseInfo[houseid][hLevel], cost);
	}
	else if(!strcmp(option, "interior", true))
	{
		for(new i = HouseInfo[houseid][hType] + 1; i < sizeof(houseInteriors); i ++)
		{
		    if(!strcmp(houseInteriors[i][intClass], houseInteriors[HouseInfo[houseid][hType]][intClass]))
		    {
		        if(isnull(param) || strcmp(param, "confirm", true) != 0)
				{
				    SCM(playerid, COLOR_SYNTAX, "Usage: /upgradehouse [interior] [confirm]");
				    SM(playerid, COLOR_WHITE, "You are about to upgrade your interior to the next one in the class for $%i.", houseInteriors[i][intPrice]);
					return 1;
				}
				if(pData[playerid][pCash] < houseInteriors[i][intPrice])
				{
				    return SCM(playerid, COLOR_SYNTAX, "You can't afford the upgrade.");
				}

				foreach(new x : Player)
				{
				    if(GetInsideHouse(x) == houseid)
				    {
				        SetPlayerPos(x, houseInteriors[i][intX], houseInteriors[i][intY], houseInteriors[i][intZ]);
				        SetPlayerFacingAngle(x, houseInteriors[i][intA]);
				        SetPlayerInterior(x, houseInteriors[i][intID]);
				        SetCameraBehindPlayer(x);
				    }
				}

				GivePlayerCash(playerid, -houseInteriors[i][intPrice]);

		        HouseInfo[houseid][hType] = i;
		        HouseInfo[houseid][hPrice] = houseInteriors[i][intPrice];
				HouseInfo[houseid][hInterior] = houseInteriors[i][intID];
				HouseInfo[houseid][hIntX] = houseInteriors[i][intX];
				HouseInfo[houseid][hIntY] = houseInteriors[i][intY];
				HouseInfo[houseid][hIntZ] = houseInteriors[i][intZ];
				HouseInfo[houseid][hIntA] = houseInteriors[i][intA];

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET type = %i, price = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", i, HouseInfo[houseid][hPrice], HouseInfo[houseid][hIntX], HouseInfo[houseid][hIntY], HouseInfo[houseid][hIntZ], HouseInfo[houseid][hIntA], HouseInfo[houseid][hInterior], HouseInfo[houseid][hWorld], HouseInfo[houseid][hID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_YELLOW, "You have upgraded to the next interior in the class for $%i.", houseInteriors[i][intPrice]);
			    Log_Write("log_property", "%s (uid: %i) upgraded their house interior (id: %i) to interior %i for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], HouseInfo[houseid][hID], i, houseInteriors[i][intPrice]);
			    return 1;
		    }
		}

		SCM(playerid, COLOR_SYNTAX, "Your house's interior is already at its maximum in its class. You cannot upgrade it any further.");
	}
	return 1;
}
CMD:houseinfo(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT (SELECT COUNT(*) FROM furniture WHERE houseid = %i) AS furnitureCount, (SELECT COUNT(*) FROM users WHERE rentinghouse = %i) AS tenantCount", HouseInfo[houseid][hID], HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_HOUSE_INFORMATION, playerid);

	return 1;
}
CMD:furniture(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new houseid = GetInsideHouse(playerid), option[10], param[32];

	if(houseid == -1 || !HasFurniturePerms(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any house of yours.");
	}
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Buy, Edit, Sell, Allow, Disallow, Labels");
	    return 1;
	}
	if(!strcmp(option, "buy", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM furniture WHERE houseid = %i", HouseInfo[houseid][hID]);
	    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_COUNT_FURNITURE, playerid);
	}
	else if(!strcmp(option, "edit", true))
	{
	    new objectid;

	    if(sscanf(param, "i", objectid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [edit] [objectid]");
		}
		if(!IsValidDynamicObject(objectid) || Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) != E_OBJECT_FURNITURE)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid object. You can find the object IDs for your furniture by enabling labels. [/furniture labels]");
        }
        if(Streamer_GetExtraInt(objectid, E_OBJECT_EXTRA_ID) != HouseInfo[houseid][hID])
        {
            return SCM(playerid, COLOR_SYNTAX, "Invalid object. This furniture object is not inside of your house.");
        }

        pData[playerid][pEditType] = EDIT_FURNITURE;
        pData[playerid][pEditObject] = objectid;
        pData[playerid][pFurnitureHouse] = houseid;

		EditDynamicObject(playerid, objectid);
        GameTextForPlayer(playerid, "~w~Editing Mode~n~~g~Click disk to save~n~~r~Press ESC to cancel", 5000, 1);
	}
	else if(!strcmp(option, "sell", true))
	{
	    new objectid;

	    if(sscanf(param, "i", objectid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [sell] [objectid] (75%% refund)");
		}
		if(!IsValidDynamicObject(objectid) || Streamer_GetExtraInt(objectid, E_OBJECT_TYPE) != E_OBJECT_FURNITURE)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid object. You can find the object IDs for your furniture by enabling labels. [/furniture labels]");
        }
        if(Streamer_GetExtraInt(objectid, E_OBJECT_EXTRA_ID) != HouseInfo[houseid][hID])
        {
            return SCM(playerid, COLOR_SYNTAX, "Invalid object. This furniture object is not inside of your house.");
        }

        pData[playerid][pSelected] = objectid;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT name, price FROM furniture WHERE id = %i", Streamer_GetExtraInt(objectid, E_OBJECT_INDEX_ID));
        mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_SELL_FURNITURE, playerid);
	}
	else if(!strcmp(option, "allow", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [allow] [playerid]");
		}
		if(!IsHouseOwner(playerid, houseid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This can only be done by the house owner.");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
		}
		if(targetid == playerid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
		}
		if(pData[targetid][pFurniturePerms] == houseid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You already allowed that player to access your furniture.");
		}

		pData[targetid][pFurniturePerms] = houseid;

		SM(targetid, COLOR_AQUA, "%s has allowed you to access their home's furniture.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "You have allowed %s to access your home's furniture.", GetRPName(targetid));
	}
	else if(!strcmp(option, "disallow", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /furniture [disallow] [playerid]");
		}
		if(!IsHouseOwner(playerid, houseid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This can only be done by the house owner.");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
		}
		if(targetid == playerid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
		}
		if(pData[targetid][pFurniturePerms] != houseid)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You haven't allowed that player to access your furniture.");
		}

		pData[targetid][pFurniturePerms] = -1;

		SM(targetid, COLOR_AQUA, "%s has removed your access to their home's furniture.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "You have removed %s's access to your home's furniture.", GetRPName(targetid));
	}
	else if(!strcmp(option, "labels", true))
	{
	    if(!HouseInfo[houseid][hLabels])
	    {
	        HouseInfo[houseid][hLabels] = 1;
         	SCM(playerid, COLOR_AQUA, "You will now see labels appear above all of your furniture.");
	    }
	    else
	    {
	        HouseInfo[houseid][hLabels] = 0;
	        SCM(playerid, COLOR_AQUA, "You will no longer see any labels appear above your furniture.");
	    }

	    ReloadAllFurniture(houseid);
	}


	return 1;
}
CMD:sellhouse(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new houseid = GetNearbyHouseEx(playerid), targetid, amount;

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellhouse [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must specify an amount above zero.");
	}

	pData[targetid][pHouseOffer] = playerid;
	pData[targetid][pHouseOffered] = houseid;
	pData[targetid][pHousePrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you their house for $%i (/accept house).", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You have offered %s to buy your house for $%i.", GetRPName(targetid), amount);
	return 1;
}

/*CMD:sellmyhouse(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sellmyhouse [confirm]");
	    SM(playerid, COLOR_WHITE, "This command sells your house back to the state. You will receive $%i back.", percent(HouseInfo[houseid][hPrice], 75));
	    return 1;
	}

	SetHouseOwner(houseid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(HouseInfo[houseid][hPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your house to the state and received $%i back.", percent(HouseInfo[houseid][hPrice], 75));
    Log_Write("log_property", "%s (uid: %i) sold their house (id: %i) to the state for $%i", GetPlayerNameEx(playerid), pData[playerid][pID], HouseInfo[houseid][hID], percent(HouseInfo[houseid][hPrice], 75));
	return 1;
}*/

CMD:ma(playerid, params[]) return callcmd::makeadmin(playerid, params);
CMD:makeadmin(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, level;

    if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, level))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /makeadmin [playerid] [level]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(0 <= level <= 11))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 11.");
	}
	if(level == 0 && pData[targetid][pAdminDuty])
	{
	    SetPlayerName(targetid, pData[targetid][pUsername]);
		pData[targetid][pAdminDuty] = 0;
    }

    pData[targetid][pAdmin] = level;
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has made %s a %s (%i).", GetRPName(playerid), GetRPName(targetid), GetAdminRank(targetid), level);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET adminlevel = %i WHERE uid = %i", level, pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(level == 0)
	{
		SM(playerid, COLOR_AQUA, "You have removed %s's administrator powers.", GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "%s has removed your administrator powers.", GetRPName(playerid));
	}
	else
	{
	    SM(playerid, COLOR_AQUA, "You have set %s's admin level to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(targetid), GetAdminRank(targetid), level);
		SM(targetid, COLOR_AQUA, "%s has set your admin level to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(playerid), GetAdminRank(targetid), level);
	}

	Log_Write("log_admin", "%s (uid: %i) set %s's (uid: %i) admin level to %i", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], level);
	return 1;
}

CMD:sendtodoctor(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;
	if(!IsPlayerInRangeOfPoint(playerid, 4.0,2050.5938,1099.6853,1717.2209))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the hospital desk.");
	}
	if(sscanf(params, "ui", targetid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sendtodoctor [playerid]");
 		return 1;
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't send yourself to doctor.");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 10.0))
    {
        return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
    }
 	if(!pData[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not injured.");
	}
	new count;
	foreach(new i : Player)
	{
		if(IsEms(i) && pData[i][pDuty] == 1)
		{
			count++;
		}
	}
	if(count > 0)
	{
		return SCM(playerid, COLOR_GREY2, "There is a EMS Faction Just buy to them.");
	}
    SetTimerEx("Surgery1", 10000, false, "i", targetid);
    SM(playerid, COLOR_DOCTOR, "You have been send %s to the doctor!", GetRPName(targetid));
    return 1;
}

CMD:makehelper(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, level;

    if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, level))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /makehelper [playerid] [level]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(0 <= level <= 4))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 4.");
	}
	if((pData[playerid][pAdmin] < 6) && pData[targetid][pHelper] > pData[playerid][pHelper] && level < pData[targetid][pHelper])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher helper level than you. They cannot be demoted.");
	}
	if(level == 0)
	{
		if(pData[targetid][pTagType] == TAG_HELPER)
		{
			SetPlayerSpecialTag(targetid, TAG_NORMAL);
		}
		if(pData[targetid][pAcceptedHelp])
		{
		    callcmd::return(targetid, "\1");
		}
	}


	SendStaffMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" has made %s a level %i helper.", GetRPName(playerid), GetRPName(targetid), level);
	pData[targetid][pHelper] = level;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helperlevel = %i WHERE uid = %i", level, pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"%s{CCFFFF} (%i).", GetRPName(targetid), GetHelperRank(targetid), level);
	SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"%s{CCFFFF} (%i).", GetRPName(playerid), GetHelperRank(targetid), level);

	Log_Write("log_admin", "%s (uid: %i) set %s's (uid: %i) helper level to %i", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], level);
	return 1;
}

CMD:omakeadmin(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new username[MAX_PLAYER_NAME], level;

    if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[24]i", username, level))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /omakeadmin [username] [level]");
	}
	if(!(0 <= level <= 7))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 7.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /makeadmin instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT adminlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminSetAdminLevel", "isi", playerid, username, level);
	return 1;
}

CMD:omakehelper(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new username[MAX_PLAYER_NAME], level;

    if(pData[playerid][pAdmin] < 11 && pData[playerid][pHelper] < 4 && pData[playerid][pAdminPersonnel])
	{
	    return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[24]i", username, level))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /omakehelper [username] [level]");
	}
	if(!(0 <= level <= 4))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 4.");
	}
	if(IsPlayerOnline(username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use /makehelper instead.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT helperlevel FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminSetHelperLevel", "isi", playerid, username, level);
	return 1;
}

CMD:addtoevent(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

    if(pData[playerid][pAdmin] < 4 && pData[playerid][pEventMod] < 1)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /addtoevent [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	/*if(!IsPlayerSpawned(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}*/
	if(!EventInfo[eReady])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There are no active events which you can add this player to.");
	}
	if(pData[targetid][pJoinedEvent])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player is already in the event.");
	}
	if(pData[playerid][pPaintball])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is currently playing paintball.");
	}
	
	SetPlayerInEvent(targetid);

	SM(targetid, COLOR_WHITE, "** %s has added you to the event.", GetRPName(playerid));
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has added %s to the event.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:olisthelpers(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 6 && pData[playerid][pHelper] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	mysql_tquery(connectionID, "SELECT username, lastlogin, helperlevel FROM users WHERE helperlevel > 0 ORDER BY lastlogin DESC", "OnQueryFinished", "ii", THREAD_LIST_HELPERS, playerid);
	return 1;
}

CMD:oadmins(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	mysql_tquery(connectionID, "SELECT username, lastlogin, adminlevel FROM users WHERE adminlevel > 0 ORDER BY lastlogin DESC", "OnQueryFinished", "ii", THREAD_LIST_ADMINS, playerid);
	return 1;
}

CMD:selldynamics(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new houses, garages, businesses;

	if(!IsPlayerAdmin(playerid))
	{
	    return SCM(playerid, COLOR_WHITE, "You are not authorized to use this command.");
	}

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists])
	    {
	        SetHouseOwner(i, INVALID_PLAYER_ID);
	        houses++;
	    }
	}

	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists])
	    {
	        SetGarageOwner(i, INVALID_PLAYER_ID);
	        garages++;
	    }
	}

	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists])
	    {
	        SetBusinessOwner(i, INVALID_PLAYER_ID);
	        businesses++;
	    }
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has sold all properties.", GetRPName(playerid));
	SM(playerid, COLOR_WHITE, "** You have sell %i houses, %i garages and %i businesses.", houses, garages, businesses);
	return 1;
}

CMD:sellinactive(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new houses, garages, businesses;

    if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}

	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hExists] && HouseInfo[i][hOwnerID] > 0 && (gettime() - HouseInfo[i][hTimestamp]) > 1209600)
	    {
	        SetHouseOwner(i, INVALID_PLAYER_ID);
	        houses++;
	    }
	}

	for(new i = 0; i < MAX_GARAGES; i ++)
	{
	    if(GarageInfo[i][gExists] && GarageInfo[i][gOwnerID] > 0 && (gettime() - GarageInfo[i][gTimestamp]) > 1209600)
	    {
	        SetGarageOwner(i, INVALID_PLAYER_ID);
	        garages++;
	    }
	}

	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(BusinessInfo[i][bExists] && BusinessInfo[i][bOwnerID] > 0 && (gettime() - BusinessInfo[i][bTimestamp]) > 1209600)
	    {
	        SetBusinessOwner(i, INVALID_PLAYER_ID);
	        businesses++;
	    }
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has sold all inactive properties.", GetRPName(playerid));
	SM(playerid, COLOR_WHITE, "** You have sold %i inactive houses, %i inactive garages and %i inactive businesses.", houses, garages, businesses);
	return 1;
}

CMD:caplimit(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new option[8], amount;
    if(pData[playerid][pAdmin] < 7 && pData[playerid][pGangMod] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[8]i", option, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /caplimit [turfs/points] [amount]");
	}
    if(!strcmp(option, "turfs", true))
	{
	    if(0 > amount > MAX_TURFS)
		{
		    return SM(playerid, COLOR_SYNTAX, "Amount must be above 0 and less then %i.", MAX_TURFS);
		}
		MaxCapCount[0] = amount;
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the max active turf claim limit for gangs to %i.", GetRPName(playerid), amount);
	}
	if(!strcmp(option, "points", true))
	{
	    if(0 > amount > MAX_POINTS)
		{
		    return SM(playerid, COLOR_SYNTAX, "Amount must be above 0 and less then %i.", MAX_POINTS);
		}
	    MaxCapCount[1] = amount;
	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the max active point cap limit for gangs to %i.", GetRPName(playerid), amount);
	}
	SaveServerInfo();
	return 1;
}

CMD:setmotd(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 6 && pData[playerid][pHelper] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	new option[8], newval[128];
	if(sscanf(params, "s[8]s[128]", option, newval))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setmotd [admin/helper/global] [text ('none' to reset)]");
	}
	if(strfind(newval, "|") != -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You may not include the '|' character in the MOTD.");
	}
	if(!strcmp(option, "global", true))
	{
	    if(pData[playerid][pAdmin] < 7) return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
 		if(!strcmp(newval, "none", true))
		{
	    	gServerMOTD[0] = 0;
	    	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has reset the global MOTD.", GetRPName(playerid));
		}
		else
		{
	    	strcpy(gServerMOTD, newval, 128);
	    	SAM(COLOR_YELLOW, ""RED"AdmCmd: %s"WHITE" has set the global MOTD to '%s'", GetRPName(playerid), gServerMOTD);
		}
	}
	if(!strcmp(option, "admin", true))
	{
	    if(pData[playerid][pAdmin] < 7) return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
 		if(!strcmp(newval, "none", true))
		{
	    	adminMOTD[0] = 0;
      		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has reset the admin MOTD.", GetRPName(playerid));
		}
		else
		{
	    	strcpy(adminMOTD, newval, 128);
	    	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the admin MOTD to '%s'", GetRPName(playerid), adminMOTD);
		}
	}
	if(!strcmp(option, "helper", true))
	{
 		if(!strcmp(newval, "none", true))
		{
	    	helperMOTD[0] = 0;
	    	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has reset the helper MOTD.", GetRPName(playerid));
		}
		else
		{
	    	strcpy(helperMOTD, newval, 128);
	    	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the helper MOTD to '%s'", GetRPName(playerid), helperMOTD);
		}
	}

	SaveServerInfo();
	return 1;
}

CMD:motd(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!isnull(gServerMOTD))
	{
		SM(playerid, COLOR_YELLOW, "News: %s", gServerMOTD);
	}
	if(!isnull(adminMOTD) && pData[playerid][pAdmin] > 0)
	{
		SM(playerid, COLOR_LIGHTRED, "Admin News: %s", adminMOTD);
	}
	if(!isnull(helperMOTD) && (pData[playerid][pHelper] > 0 || pData[playerid][pAdmin] > 0))
	{
		SM(playerid, COLOR_AQUA, "Helper News: %s", helperMOTD);
	}
	if(pData[playerid][pGang] >= 0 && strcmp(GangInfo[pData[playerid][pGang]][gMOTD], "None", true) != 0)
	{
		SM(playerid, COLOR_GREEN, "Gang News: %s", GangInfo[pData[playerid][pGang]][gMOTD]);
	}
	return 1;
}

CMD:setstaff(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, option[16], status;

    if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "us[16]i", targetid, option, status) || !(0 <= status <= 1))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /setstaff [playerid] [option] [status (0/1)]");
		SCM(playerid, COLOR_WHITE, "Available options: FactionMod, GangMod, BanAppealer, Eventmod, AdminPersonnel, dev");
		return 1;
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}

	if(!strcmp(option, "factionmod", true))
	{
	    pData[targetid][pFactionMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET factionmod = %i WHERE uid = %i", pData[targetid][pFactionMod], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has made %s a faction moderator.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a faction moderator.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"faction moderator{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"faction moderator{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has removed %s's faction moderator status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) faction moderator status.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have removed %s's "SVRCLR"faction moderator{CCFFFF} status.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has removed your "SVRCLR"faction moderator{CCFFFF} status.", GetRPName(playerid));
		}
	}
	if(!strcmp(option, "dev", true))
	{
	    pData[targetid][pDev] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dev = %i WHERE uid = %i", pData[targetid][pDev], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has made %s a developer.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a developer.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"developer{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"developer{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has removed %s's developer status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) developer status.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have removed %s's "SVRCLR"developer{CCFFFF} status.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has removed your "SVRCLR"developer{CCFFFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "eventmod", true))
	{
	    pData[targetid][pEventMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET eventmod = %i WHERE uid = %i", pData[targetid][pEventMod], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has made %s a Event Moderator.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Event Moderator.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SCMf(playerid, COLOR_WHITE, "You have made %s a {FFA500}Event Moderator{FFFFFF}.", GetRPName(targetid));
		    SCMf(targetid, COLOR_WHITE, "%s has made you a {FFA500}Event Moderator{FFFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_LIGHTRED, "AdmCmd: %s has removed %s's Event Moderator status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Event Moderator status.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SCMf(playerid, COLOR_WHITE, "You have removed %s's {FFA500}Event Moderator{FFFFFF} status.", GetRPName(targetid));
		    SCMf(targetid, COLOR_WHITE, "%s has removed your {FFA500}Event Moderator{FFFFFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "gangmod", true))
	{
	    pData[targetid][pGangMod] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gangmod = %i WHERE uid = %i", pData[targetid][pGangMod], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has made %s a gang moderator.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a gang moderator.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"gang moderator{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"gang moderator{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has removed %s's gang moderator status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) gang moderator status.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have removed %s's "SVRCLR"gang moderator{CCFFFF} status.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has removed your "SVRCLR"gang moderator{CCFFFF} status.", GetRPName(playerid));
		}
	}
	else if(!strcmp(option, "banappealer", true))
	{
	    pData[targetid][pBanAppealer] = status;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET banappealer = %i WHERE uid = %i", pData[targetid][pBanAppealer], pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    if(status)
	    {
	        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has made %s a ban appealer.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a ban appealer.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"ban appealer{CCFFFF}.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"ban appealer{CCFFFF}.", GetRPName(playerid));
		}
		else
	    {
	        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has removed %s's ban appealer status.", GetRPName(playerid), GetRPName(targetid));
	        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) ban appealer status.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	        SM(playerid, COLOR_AQUA, "You have removed %s's "SVRCLR"ban appealer{CCFFFF} status.", GetRPName(targetid));
		    SM(targetid, COLOR_AQUA, "%s has removed your "SVRCLR"ban appealer{CCFFFF} status.", GetRPName(playerid));
		}
	}

	return 1;
}

CMD:updates(playerid,params[])
{
	mysql_tquery(connectionID, "SELECT * FROM changes ORDER BY slot", "OnQueryFinished", "ii", THREAD_LIST_CHANGES, playerid);
	return 1;
}

CMD:changelist(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new slot, option[10], param[64];


    if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[10]S()[64]", option, param))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /changelist [view | edit | clear]");
	}
	if(!strcmp(option, "view", true))
	{
	    mysql_tquery(connectionID, "SELECT * FROM changes ORDER BY slot", "OnQueryFinished", "ii", THREAD_LIST_CHANGES, playerid);
	}
	else if(!strcmp(option, "edit", true))
	{
	    if(sscanf(param, "is[64]", slot, param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /changelist [edit] [slot (1-10)] [text]");
		}
		if(!(1 <= slot <= 10))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO changes VALUES(%i, '%e') ON DUPLICATE KEY UPDATE text = '%e'", slot, param, param);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "** Change text for slot %i changed to '%s'.", slot, param);
	}
	else if(!strcmp(option, "clear", true))
	{
	    if(sscanf(param, "i", slot))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /changelist [clear] [slot (1-10)]");
		}
		if(!(1 <= slot <= 10))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM changes WHERE slot = %i", slot);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "** Change text for slot %i cleared.", slot);
	}

	return 1;
}

CMD:forceaduty(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /forceaduty [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player needs to be at least a level 2 administrator.");
	}
	if(pData[targetid][pAdmin] > pData[playerid][pAdmin])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified has a higher admin level than you. They cannot be forced into admin duty.");
	}

	if(!pData[targetid][pAdminDuty])
	{
		SM(targetid, COLOR_WHITE, "** %s has forced you to be on admin duty.", GetRPName(playerid));
	}
	else
	{
	    SM(targetid, COLOR_WHITE, "** %s has forced you to be off admin duty.", GetRPName(playerid));
	}

	callcmd::aduty(targetid, "\1");
	return 1;
}

CMD:listhelp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pHelper] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Help Requests:");

	foreach(new i : Player)
	{
	    if(!isnull(pData[i][pHelpRequest]))
	    {
	        SM(playerid, COLOR_GREY2, "** %s[%i] asks: %s", GetRPName(i), i, pData[i][pHelpRequest]);
		}
	}

	SCM(playerid, COLOR_AQUA, "** Use /accepthelp [id] or /denyhelp [id] to handle help requests.");
	SCM(playerid, COLOR_AQUA, "** Use /answerhelp [id] [msg] to PM an answer without the need to teleport.");
	return 1;
}

CMD:clearall(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if (pData[playerid][pAdmin] >= 4)
	{
		SCM(playerid, COLOR_SYNTAX, "You are not authorized to use that command!");
    }
    foreach(new i : Player)
	{
    	pData[i][pWantedLevel] = 0;

  		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", pData[i][pID]);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0 WHERE uid = %i", pData[i][pID]);
		mysql_tquery(connectionID, queryBuffer);
    }
    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has cleared everyone's Wanted Level.", GetRPName(playerid));
    return 1;
}

CMD:accepthelp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pHelper] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /accepthelp [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(isnull(pData[targetid][pHelpRequest]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested any help since they connected.");
	}

	if(pData[playerid][pTagType] == TAG_NORMAL)
	{
 		SetPlayerSpecialTag(playerid, TAG_HELPER);
	}

	if(!pData[playerid][pAcceptedHelp])
	{
		SavePlayerVariables(playerid);
	}

	TeleportToPlayer(playerid, targetid, false);

	TogglePlayerControllable(targetid, 0);
	SetTimerEx("UnfreezeNewbie", 5000, false, "i", targetid);

	SetPlayerHealth(playerid, 32767);

	pData[playerid][pHelpRequests]++;
	pData[playerid][pAcceptedHelp] = 1;
	pData[targetid][pHelpRequest][0] = 0;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helprequests = %i WHERE uid = %i", pData[playerid][pHelpRequests], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_WHITE, "** You accepted %s's help request and were sent to their position. /return to go back.", GetRPName(targetid));
	SM(targetid, COLOR_YELLOW, "%s has accepted your help request. They are now assisting you.", GetRPName(playerid));

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has accepted help request %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:denyhelp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pHelper] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /denyhelp [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(isnull(pData[targetid][pHelpRequest]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested any help since they connected.");
	}

	pData[targetid][pHelpRequest][0] = 0;

	SM(playerid, COLOR_WHITE, "** You denied %s's help request.", GetRPName(targetid));
	SM(targetid, COLOR_LIGHTRED, "** %s has denied your help request.", GetRPName(playerid));

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has denied help request %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

/*CMD:sta(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid;

	if(pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sta [playerid] (Sends /gethelp to admins)");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(isnull(pData[targetid][pHelpRequest]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested any help since they connected.");
	}

    AddReportToQueue(targetid, pData[targetid][pHelpRequest]);
    pData[targetid][pHelpRequest][0] = 0;

	SM(playerid, COLOR_WHITE, "** You sent %s's help request to all online admins.", GetRPName(targetid));
	SM(targetid, COLOR_AQUA, "** %s has sent your help request to all online admins.", GetRPName(playerid));
	return 1;
}*/

CMD:return(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAcceptedHelp])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't accepted any help requests.");
	}

    if(pData[playerid][pTagType] == TAG_HELPER)
	{
	    SetPlayerSpecialTag(playerid, TAG_NORMAL);
	}

	SetPlayerHealth(playerid, pData[playerid][pHealth]);
	SetScriptArmour(playerid, pData[playerid][pArmor]);

	SetPlayerPos(playerid, pData[playerid][pPosX], pData[playerid][pPosY], pData[playerid][pPosZ]);
	SetPlayerFacingAngle(playerid, pData[playerid][pPosA]);
	SetPlayerInterior(playerid, pData[playerid][pInterior]);
	SetPlayerVirtualWorld(playerid, pData[playerid][pWorld]);
	SetCameraBehindPlayer(playerid);

	SCM(playerid, COLOR_WHITE, "** You were returned to your previous position.");
    pData[playerid][pAcceptedHelp] = 0;
	return 1;
}

CMD:answerhelp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, msg[128];

	if(pData[playerid][pHelper] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[128]", targetid, msg))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /answerhelp [playerid] [message]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(isnull(pData[targetid][pHelpRequest]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested any help since they connected.");
	}

	pData[playerid][pHelpRequests]++;
	pData[targetid][pHelpRequest][0] = 0;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helprequests = %i WHERE uid = %i", pData[playerid][pHelpRequests], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

    SCM(playerid, COLOR_WHITE, "You");

	if(strlen(msg) > MAX_SPLIT_LENGTH)
	{
		SM(targetid, COLOR_YELLOW, "** Answer from Helper %s: %.*s... **", GetRPName(playerid), MAX_SPLIT_LENGTH, msg);
		SM(targetid, COLOR_YELLOW, "** Answer from Helper %s: ...%s **", GetRPName(playerid), msg[MAX_SPLIT_LENGTH]);
	}
	else
	{
	    SM(targetid, COLOR_YELLOW, "** Answer from Helper %s: %s **", GetRPName(playerid), msg);
	}

	SendHelperMessage(COLOR_LIGHTRED, "Helper: %s has answered %s's help request.", GetRPName(playerid), GetRPName(targetid));

	return 1;
}

CMD:c(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pHelper] < 1 && pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" You are not authorized to use this command.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /c [staff chat]");
	}
	if(pData[playerid][pToggleHelper])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the staff chat as you have it toggled.");
	}

	foreach(new i : Player)
	{
		if((pData[i][pHelper] > 0 || pData[playerid][pAdmin] > 0) && !pData[i][pToggleHelper])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SendStaffMessage(0x42f4EEFF, "** %s %s: %.*s... **", GetStaffRank(playerid), GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SendStaffMessage(0x42f4EEFF, "** %s: ...%s **", GetStaffRank(playerid), GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
				SendStaffMessage(0x42f4EEFF, "** %s %s: %s **", GetStaffRank(playerid), GetRPName(playerid), params);
			}
			return 1;
		}
	}
	return 1;
}

CMD:hh(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::helperhelp(playerid, params);
}

CMD:hhelp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::helperhelp(playerid, params);
}


CMD:helperhelp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new string[2048];
	if(pData[playerid][pHelper] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	if(pData[playerid][pHelper] >= 1)
	{
		strcat(string, "Junior Helper:"WHITE" /c, /na /tn.\n");
	}
    if(pData[playerid][pHelper] >= 2)
	{
		strcat(string, "General Helper:"WHITE" /nmute, /fine, /hmute, /gmute, /admute /listhelp, /accepthelp, /answerhelp, /prison, /oprison /denyhelp, /sta, /returN \n");
	}
    if(pData[playerid][pHelper] >= 3)
	{
		strcat(string, "Applcation System:"WHITE"  /reviewapp, /listapp, /acceptapp, /denyapp.\n");
		strcat(string, "Applcation System:"WHITE"  /ra, /la, /aa, /da.\n");
		strcat(string, "Senior Helper:"WHITE"  /spec, /olisthelpers, /checknewbies.\n");
	}
	if(pData[playerid][pHelper] >= 4)
	{
		strcat(string, "Head Helpe:"WHITE" /spec, /prisonic, /release, /makehelper, /omakehelper, /kick.\n");
	}
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "{FFFFFF}Current commands on "SVRCLR"Manila Reality Roleplay-", string, "Close","");
	return 1;
}

#define INACTIVE_TIME				60 * 60 * 24 * 14 // 2 weeks
#define INACTIVE_TIME_2				60 * 60 * 24 * 21 // 3 weeks
CMD:properties(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new type[16];

	SCM(playerid, SERVER_COLOR, "My Properties:");

    for(new i = 0; i < MAX_HOUSES; i ++)
    {
        if(HouseInfo[i][hExists] && IsHouseOwner(playerid, i))
        {
            if(HouseInfo[i][hType] == -1)
			{
			    type = "Other";
			}
			else
			{
			    strcpy(type, houseInteriors[HouseInfo[i][hType]][intClass]);
			}

			if(pData[playerid][pDonator] >= 2) {
				if((gettime() - HouseInfo[i][hTimestamp]) > INACTIVE_TIME_2)
				{
					SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) house in %s is currently marked as {FFA500}Inactive{C8C8C8}.", type, i, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
				}
				else
				{
					SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) house in %s is currently marked as {FFFFFF}Active{C8C8C8}.", type, i, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
				}
			} else {
				if((gettime() - HouseInfo[i][hTimestamp]) > INACTIVE_TIME)
				{
					SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) house in %s is currently marked as {FFA500}Inactive{C8C8C8}.", type, i, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
				}
				else
				{
					SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) house in %s is currently marked as {FFFFFF}Active{C8C8C8}.", type, i, GetZoneName(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]));
				}
			}
		}
	}

	for(new i = 0; i < MAX_GARAGES; i ++)
    {
        if(GarageInfo[i][gExists] && IsGarageOwner(playerid, i))
        {
			if(pData[playerid][pDonator] >= 2) {
				if((gettime() - GarageInfo[i][gTimestamp]) > INACTIVE_TIME_2)
				{
					SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) garage in %s is currently marked as {FFA500}Inactive{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
				}
				else
				{
					SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) garage in %s is currently marked as {FFFFFF}Active{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
				}
			} else {
				if((gettime() - GarageInfo[i][gTimestamp]) > INACTIVE_TIME)
				{
					SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) garage in %s is currently marked as {FFA500}Inactive{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], i, GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
				}
				else
				{
					SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) garage in %s is currently marked as {FFFFFF}Active{C8C8C8}.", garageInteriors[GarageInfo[i][gType]][intName], i, GetZoneName(GarageInfo[i][gPosX], GarageInfo[i][gPosY], GarageInfo[i][gPosZ]));
				}
			}
		}
	}

	for(new i = 0; i < MAX_BUSINESSES; i ++)
    {
        if(BusinessInfo[i][bExists] && IsBusinessOwner(playerid, i))
        {
			if(pData[playerid][pDonator] >= 2) {
				if((gettime() - BusinessInfo[i][bTimestamp]) > INACTIVE_TIME_2)
				{
					SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) business in %s is currently marked as {FFA500}Inactive{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], i, GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
				}
				else
				{
					SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) business in %s is currently marked as {FFFFFF}Active{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], i, GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
				}
			} else {
				if((gettime() - BusinessInfo[i][bTimestamp]) > INACTIVE_TIME)
				{
					SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) business in %s is currently marked as {FFA500}Inactive{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], i, GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
				}
				else
				{
					SCMf(playerid, COLOR_GREY2, "Your %s (ID: %d) business in %s is currently marked as {FFFFFF}Active{C8C8C8}.", bizInteriors[BusinessInfo[i][bType]][intType], i, GetZoneName(BusinessInfo[i][bPosX], BusinessInfo[i][bPosY], BusinessInfo[i][bPosZ]));
				}
			}
		}
	}

	if(pData[playerid][pDonator] < 2) SCM(playerid, COLOR_YELLOW, "** Your properties become inactive if you don't enter them for 14+ days.");
	else SCM(playerid, COLOR_YELLOW, "** Since you are VIP, You have 3 weeks (21 days) immunity from having your properties marked as inactive.");
	return 1;
}

CMD:setrent(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new price, houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "i", price))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setrent [price ('0' to disable)]");
	}
	if(!(0 <= price <= 10000))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid price. The price must range between $0 and $10,000.");
	}

	HouseInfo[houseid][hRentPrice] = price;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET rentprice = %i WHERE id = %i", price, HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadHouse(houseid);
	SM(playerid, COLOR_AQUA, "** You've set the rental price to $%i.", price);
	return 1;
}

CMD:renthouse(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new houseid;

	if((houseid = GetNearbyHouse(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no house in range. You must be near a house.");
	}
	/*if(strcmp(params, "confirm", true) != 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /renthouse [confirm]");
	}*/
	if(!HouseInfo[houseid][hOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This house is not owned and therefore cannot be rented.");
	}
	if(!HouseInfo[houseid][hRentPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This house's owner has chosen to disable renting for this house.");
	}
	if(pData[playerid][pCash] < HouseInfo[houseid][hRentPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to rent here.");
	}
	if(IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are the owner of this house. You can't rent here.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE rentinghouse = %i", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerRentHouse", "ii", playerid, houseid);
	return 1;
}

CMD:unrent(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!pData[playerid][pRentingHouse])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not renting at any property. You can't use this command.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE uid = %i", pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	pData[playerid][pRentingHouse] = 0;
	SCM(playerid, COLOR_WHITE, "** You have ripped up your rental contract.");
	return 1;
}

CMD:tenants(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin FROM users WHERE rentinghouse = %i ORDER BY lastlogin DESC", HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LIST_TENANTS, playerid);
	return 1;
}

CMD:evict(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new username[MAX_PLAYER_NAME], houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "s[24]", username))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /evict [username]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e' AND rentinghouse = %i", username, HouseInfo[houseid][hID]);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerEvict", "is", playerid, username);
	return 1;
}

CMD:evictall(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}

	foreach(new i : Player)
    {
        if(pData[i][pLogged] && pData[i][pRentingHouse] == HouseInfo[houseid][hID])
        {
            pData[i][pRentingHouse] = 0;
            SCM(i, COLOR_RED, "You have been evicted from your home by the owner.");
        }
    }

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET rentinghouse = 0 WHERE rentinghouse = %i", HouseInfo[houseid][hID]);
    mysql_tquery(connectionID, queryBuffer);

    SCM(playerid, COLOR_WHITE, "** You have evicted all tenants from your home.");
    return 1;
}

CMD:houseinvite(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, houseid = GetNearbyHouseEx(playerid);

	if(houseid == -1 || !IsHouseOwner(playerid, houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any house of yours.");
	}
	if(sscanf(params, "i", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /houseinvite [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    //return SCM(playerid, COLOR_SYNTAX, "You can't invite yourself to your own home.");
	}

	pData[targetid][pInviteOffer] = playerid;
	pData[targetid][pInviteHouse] = houseid;

	SM(targetid, COLOR_AQUA, "** %s has offered you an invitation to their house in %s. (/accept invite)", GetRPName(playerid), GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]));
	SM(playerid, COLOR_AQUA, "** You have offered %s an invitation to your house.", GetRPName(targetid));
	return 1;
}

CMD:gate(playerid, params[]) return callcmd::open(playerid, params);
CMD:door(playerid, params[]) return callcmd::open(playerid, params);
CMD:open(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new id = Gate_Nearest(playerid);

	if (id != -1)
	{
		if (strlen(GateData[id][gatePass]))
		{
		    //ShowPlayerDialog(playerid, GatePass, DIALOG_STYLE_INPUT, "Enter Password", "Please enter the password for this gate below:", "Submit", "Cancel");
		}
		else
		{
		    if (GateData[id][gateFaction] != -1 && pData[playerid][pFaction] != GetFactionByID(GateData[id][gateFaction]))
				return SCM(playerid, COLOR_SYNTAX, "You can't open this gate/door.");

			Gate_Operate(id);

			switch (GateData[id][gateOpened])
			{
			    case 0:
				{
				    SCM(playerid, COLOR_SYNTAX, "You have closed the gate/door!");
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their card to close the gate/door.", GetRPName(playerid));
				}
                case 1:
				{
				    SCM(playerid, COLOR_SYNTAX, "You have opened the gate/door!");
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their card to open the gate/door.", GetRPName(playerid));
				}
			}
		}
	}
	return 1;
}

CMD:maphelp(playerid)
{
	if(pData[playerid][pAdmin] < 7 && strcmp(pData[playerid][pCustomTitle], "Mapper", true) != 0) return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	SCM(playerid, COLOR_WHITE, "** Mapper: /createobj, /dupobj, /nearobj, /editobj, /delobj ");
	return 1;
}

CMD:nearobj(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new id;

    if(pData[playerid][pAdmin] < 7 && strcmp(pData[playerid][pCustomTitle], "Mapper", true) != 0) return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if((id = Object_Nearest(playerid)) >= 0)
	{
		SM(playerid, COLOR_GREY2, "You are in range of object ID %i.", id);
	}
	return 1;
}

CMD:dupobj(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	static id = -1, idx;
    if(pData[playerid][pAdmin] < 7 && strcmp(pData[playerid][pCustomTitle], "Mapper", true) != 0) return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	if (sscanf(params, "d", idx)) return SCM(playerid, COLOR_WHITE, "Usage: /dupobj [id]");

	id = Object_Duplicate(playerid, idx);
	if (id == -1) return SCM(playerid, COLOR_SYNTAX, "The server has reached the limit for objects.");
	SM(playerid, COLOR_WHITE, "You have successfully duplicate object ID: %d.", id);
	return 1;
}

CMD:createobj(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	static id = -1, idx;
    if(pData[playerid][pAdmin] < 8 && strcmp(pData[playerid][pCustomTitle], "Mapper", true) != 0) return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	if (sscanf(params, "d", idx)) return SCM(playerid, COLOR_WHITE, "Usage: /createobj [objid] | VendorObj ID: 1571");

	id = Object_Create(playerid, idx);
	if (id == -1) return SCM(playerid, COLOR_SYNTAX, "The server has reached the limit for objects.");
	SM(playerid, COLOR_WHITE, "You have successfully created object ID: %d.", id);
	return 1;
}

CMD:editobj(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	static id;
    if(pData[playerid][pAdmin] < 8 && strcmp(pData[playerid][pCustomTitle], "Mapper", true) != 0) return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	if (sscanf(params, "d", id)) return SCM(playerid, COLOR_WHITE, "Usage: /editobj [id]");
	if ((id < 0 || id >= MAX_MAPOBJECTS) || !ObjectData[id][mobjExists]) return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid object ID.");

	pData[playerid][pEditmObject] = -1;
	EditDynamicObject(playerid, ObjectData[id][mobjObject]);
	pData[playerid][pEditmObject] = id;
	pData[playerid][pEditType] = EDIT_OBJECT_PREVIEW;
	SM(playerid, COLOR_WHITE, "You are now adjusting the position of object ID: %d.", id);
	return 1;
}

CMD:delobj(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	static id = 0;
    if(pData[playerid][pAdmin] < 8 && strcmp(pData[playerid][pCustomTitle], "Mapper", true) != 0) return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	if (sscanf(params, "d", id)) return SCM(playerid, COLOR_WHITE, "Usage: /delobj [id]");
	if ((id < 0 || id >= MAX_MAPOBJECTS) || !ObjectData[id][mobjExists]) return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid object ID.");

	Object_Delete(id);
	SM(playerid, COLOR_WHITE, "You have successfully destroyed object ID: %d.", id);
	return 1;
}

CMD:creategate(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	static
	    id = -1;

	if(pData[playerid][pAdmin] < 8)
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");

	id = Gate_Create(playerid);

	if (id == -1)
	    return SCM(playerid, COLOR_SYNTAX, "The server has reached the limit for gates.");

	SM(playerid, COLOR_WHITE, "You have successfully created gate ID: %d.", id);
	return 1;
}

CMD:gotogate(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new houseid;

	if(pData[playerid][pAdmin] < 5)
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");

	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", houseid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotogate [gateid]");
	}
	if(!(0 <= houseid < MAX_GATES) || !GateData[houseid][gateExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gate.");
	}
	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);
	SetPlayerPos(playerid, GateData[houseid][gatePos][0] - (2.5 * floatsin(-GateData[houseid][gatePos][3], degrees)), GateData[houseid][gatePos][1] - (2.5 * floatcos(-GateData[houseid][gatePos][3], degrees)), GateData[houseid][gatePos][2]);
	SetPlayerInterior(playerid, GateData[houseid][gateInterior]);
	SetPlayerVirtualWorld(playerid, GateData[houseid][gateWorld]);
	SetCameraBehindPlayer(playerid);
	return 1;
}


CMD:destroygate(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	static
	    id = 0;

	if(pData[playerid][pAdmin] < 8)
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");

	if (sscanf(params, "d", id))
	    return SCM(playerid, COLOR_WHITE, "Usage: /destroygate [gate id]");

	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid gate ID.");

	Gate_Delete(id);
	SM(playerid, COLOR_WHITE, "You have successfully destroyed gate ID: %d.", id);
	return 1;
}

CMD:editgate(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	static
	    id,
	    type[24],
	    string[128];

	if(pData[playerid][pAdmin] < 8)
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "Names:{FFFFFF} location, speed, radius, time, model, pos, move, pass, linkid, faction");
		return 1;
	}
	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid gate ID.");

    if (!strcmp(type, "location", true))
	{
		static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		x += 3.0 * floatsin(-angle, degrees);
		y += 3.0 * floatcos(-angle, degrees);

		GateData[id][gatePos][0] = x;
		GateData[id][gatePos][1] = y;
		GateData[id][gatePos][2] = z;
		GateData[id][gatePos][3] = 0.0;
		GateData[id][gatePos][4] = 0.0;
		GateData[id][gatePos][5] = angle;

		SetDynamicObjectPos(GateData[id][gateObject], x, y, z);
		SetDynamicObjectRot(GateData[id][gateObject], 0.0, 0.0, angle);

		GateData[id][gateOpened] = false;

		Gate_Save(id);
		SMA(COLOR_LIGHTRED, "ACmd: %s has adjusted the position of gate ID: %d.", GetRPName(playerid), id);
		return 1;
	}
	else if (!strcmp(type, "speed", true))
	{
	    static
	        Float:speed;

		if (sscanf(string, "f", speed))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [speed] [move speed]");

		if (speed < 0.0 || speed > 20.0)
		    return SCM(playerid, COLOR_SYNTAX, "The specified speed can't be below 0 or above 20.");

        GateData[id][gateSpeed] = speed;

		Gate_Save(id);
		SMA(COLOR_LIGHTRED, "ACmd: %s has adjusted the speed of gate ID: %d to %.2f.", GetRPName(playerid), id, speed);
		return 1;
	}
	else if (!strcmp(type, "radius", true))
	{
	    static
	        Float:radius;

		if (sscanf(string, "f", radius))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [radius] [open radius]");

		if (radius < 0.0 || radius > 20.0)
		    return SCM(playerid, COLOR_SYNTAX, "The specified radius can't be below 0 or above 20.");

        GateData[id][gateRadius] = radius;

		Gate_Save(id);
		SMA(COLOR_LIGHTRED, "ACmd: %s has adjusted the radius of gate ID: %d to %.2f.", GetRPName(playerid), id, radius);
		return 1;
	}
	else if (!strcmp(type, "time", true))
	{
	    static
	        time;

		if (sscanf(string, "d", time))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [time] [close time] (0 to disable)");

		if (time < 0 || time > 60000)
		    return SCM(playerid, COLOR_SYNTAX, "The specified time can't be 0 or above 60,000 ms.");

        GateData[id][gateTime] = time;

		Gate_Save(id);
		SMA(COLOR_LIGHTRED, "ACmd: %s has adjusted the close time of gate ID: %d to %d.", GetRPName(playerid), id, time);
		return 1;
	}
	else if (!strcmp(type, "model", true))
	{
	    static
	        model;

		if (sscanf(string, "d", model))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [model] [gate model]");

		/*if (!IsValidObjectModel(model))
		    return SCM(playerid, COLOR_SYNTAX, "Invalid object model.");*/

        GateData[id][gateModel] = model;

		DestroyDynamicObject(GateData[id][gateObject]);
		GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

		Gate_Save(id);
		SMA(COLOR_LIGHTRED, "ACmd: %s has adjusted the model of gate ID: %d to %d.", GetRPName(playerid), id, model);
		return 1;
	}
    else if (!strcmp(type, "pos", true))
	{
	    pData[playerid][pEditGate] = -1;
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		pData[playerid][pEditGate] = id;
		pData[playerid][pEditType] = 1;

		SM(playerid, COLOR_WHITE, "You are now adjusting the position of gate ID: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "move", true))
	{
	    pData[playerid][pEditGate] = -1;
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		pData[playerid][pEditGate] = id;
		pData[playerid][pEditType] = 2;

		SM(playerid, COLOR_WHITE, "You are now adjusting the moving position of gate ID: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "linkid", true))
	{
	    static
	        linkid = -1;

		if (sscanf(string, "d", linkid))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [linkid] [gate link] (-1 for none)");

        if ((linkid < -1 || linkid >= MAX_GATES) || (linkid != -1 && !GateData[linkid][gateExists]))
	    	return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid gate ID.");

        GateData[id][gateLinkID] = (linkid == -1) ? (-1) : (GateData[linkid][gateID]);
		Gate_Save(id);

		if (id == -1)
			SMA(COLOR_LIGHTRED, "ACmd: %s has adjusted the faction of gate ID: %d to no gate.", GetRPName(playerid), id);

		else
		    SMA(COLOR_LIGHTRED, "ACmd: %s has adjusted the faction of gate ID: %d to ID: %d.", GetRPName(playerid), id, linkid);

		return 1;
	}
	else if (!strcmp(type, "faction", true))
	{
	    static
	        factionid = 0;

		if (sscanf(string, "d", factionid))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [faction] [gate faction] (-1 for none)");

		if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
			return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");


        GateData[id][gateFaction] = (factionid == -1) ? (-1) : (FactionInfo[factionid][fType]);
		Gate_Save(id);

		if (factionid == -1)
			SMA(COLOR_LIGHTRED, "ACmd: %s has adjusted the faction of gate ID: %d to no faction.", GetRPName(playerid), id);

		else
		    SMA(COLOR_LIGHTRED, "ACmd: %s has adjusted the faction of gate ID: %d to \"%s\".", GetRPName(playerid), id, FactionInfo[factionid][fName]);

		return 1;
	}
	else if (!strcmp(type, "pass", true))
	{
	    static
	        pass[32];

		if (sscanf(string, "s[32]", pass))
		    return SCM(playerid, COLOR_WHITE, "Usage: /editgate [id] [pass] [gate password] (Use 'none' to disable)");

		if (!strcmp(params, "none", true))
			GateData[id][gatePass][0] = 0;

		else format(GateData[id][gatePass], 32, pass);

		Gate_Save(id);
		SAM(COLOR_LIGHTRED, "ACmd: %s has adjusted the password of gate ID: %d to %s.", GetRPName(playerid), id, pass);
		return 1;
	}
	return 1;
}

CMD:creategarage(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new size[8], type = -1, Float:x, Float:y, Float:z, Float:a;

    if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[8]", size))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /creategarage [small/medium/large]");
	}
	if(GetNearbyGarage(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a garage in range. Find somewhere else to create this one.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot create garages indoors.");
	}

	if(!strcmp(size, "small", true)) {
	    type = 0;
	} else if(!strcmp(size, "medium", true)) {
	    type = 1;
	} else if(!strcmp(size, "large", true)) {
	    type = 2;
	}

	if(type == -1)
	{
	     SCM(playerid, COLOR_SYNTAX, "Invalid size. Valid sizes range from Small, Medium and Large.");
	}
	else
	{
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		for(new i = 0; i < MAX_GARAGES; i ++)
		{
		    if(!GarageInfo[i][gExists])
		    {
				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO garages (type, price, pos_x, pos_y, pos_z, pos_a, exit_x, exit_y, exit_z, exit_a) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')", type, garageInteriors[type][intPrice], x, y, z, a, x - 3.0 * floatsin(-a, degrees), y - 3.0 * floatcos(-a, degrees), z, a - 180.0);
				mysql_tquery(connectionID, queryBuffer, "OnAdminCreateGarage", "iiiffff", playerid, i, type, x, y, z, a);
				return 1;
			}
		}

		SCM(playerid, COLOR_SYNTAX, "Garage slots are currently full. Ask managements to increase the internal limit.");
	}

	return 1;
}

CMD:editgarage(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new garageid, option[10], param[32];

	if(pData[playerid][pAdmin] < 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[10]S()[32]", garageid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editgarage [garageid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Entrance, Exit, Type, Owner, Price, Locked");
	    return 1;
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid garage.");
	}

	if(!strcmp(option, "entrance", true))
	{
	    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You cannot create garages indoors.");
		}

	    GetPlayerPos(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	    GetPlayerFacingAngle(playerid, GarageInfo[garageid][gPosA]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f' WHERE id = %i", GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ], GarageInfo[garageid][gPosA], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "** You've changed the entrance of garage %i.", garageid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You cannot create garages indoors.");
		}

	    GetPlayerPos(playerid, GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ]);
	    GetPlayerFacingAngle(playerid, GarageInfo[garageid][gExitA]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET exit_x = '%f', exit_y = '%f', exit_z = '%f', exit_a = '%f' WHERE id = %i", GarageInfo[garageid][gExitX], GarageInfo[garageid][gExitY], GarageInfo[garageid][gExitZ], GarageInfo[garageid][gExitA], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "** You've changed the vehicle exit spawn of garage %i.", garageid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new size[8], type = -1;

	    if(sscanf(param, "s[8]", size))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgarage [garageid] [type] [small/medium/large]");
		}

		if(!strcmp(size, "small", true)) {
		    type = 0;
		} else if(!strcmp(size, "medium", true)) {
		    type = 1;
		} else if(!strcmp(size, "large", true)) {
		    type = 2;
		}

		if(type == -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		GarageInfo[garageid][gType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET type = %i WHERE id = %i", type, GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "** You've changed the type of garage %i to %s.", garageid, size);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /editgarage [garageid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(!pData[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
		}

        SetGarageOwner(garageid, targetid);
	    SM(playerid, COLOR_AQUA, "** You've changed the owner of garage %i to %s.", garageid, GetRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgarage [garageid] [price] [value]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
		}

		GarageInfo[garageid][gPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET price = %i WHERE id = %i", GarageInfo[garageid][gPrice], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "** You've changed the price of garage %i to $%i.", garageid, price);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgarage [garageid] [locked] [0/1]");
		}

		GarageInfo[garageid][gLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = %i WHERE id = %i", GarageInfo[garageid][gLocked], GarageInfo[garageid][gID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadGarage(garageid);
	    SM(playerid, COLOR_AQUA, "** You've changed the lock state of garage %i to %i.", garageid, locked);
	}

	return 1;
}

CMD:removegarage(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new garageid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removegarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid garage.");
	}

	DestroyDynamic3DTextLabel(GarageInfo[garageid][gText]);
	DestroyDynamicPickup(GarageInfo[garageid][gPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM garages WHERE id = %i", GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	GarageInfo[garageid][gExists] = 0;
	GarageInfo[garageid][gID] = 0;
	GarageInfo[garageid][gOwnerID] = 0;

	SM(playerid, COLOR_AQUA, "** You have removed garage %i.", garageid);
	return 1;
}

CMD:punta(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}


	if(pData[playerid][pAdmin] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, 1674.9395,1461.4910,1145.7766);
	SetPlayerFacingAngle(playerid, 92.4770);
	SetPlayerInterior(playerid, 1);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}
CMD:gotogarage(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new garageid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotogarage [garageid]");
	}
	if(!(0 <= garageid < MAX_GARAGES) || !GarageInfo[garageid][gExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid garage.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]);
	SetPlayerFacingAngle(playerid, GarageInfo[garageid][gPosA]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:garagehelp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SCM(playerid, COLOR_WHITE, "** GARAGE: /buygarage, /lock, /sellgarage, /sellmygarage, /garageinfo.");
	SCM(playerid, COLOR_WHITE, "** GARAGE: /repair, /refuel, /tune.");
	return 1;
}

CMD:buygarage(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new garageid;

	if((garageid = GetNearbyGarage(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no garage in range. You must be near a garage.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /buygarage [confirm]");
	}
	if(GarageInfo[garageid][gOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This garage already has an owner.");
	}
	if(pData[playerid][pCash] < GarageInfo[garageid][gPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this garage.");
	}
	if(GetPlayerAssetCount(playerid, LIMIT_GARAGES) >= GetPlayerAssetLimit(playerid, LIMIT_GARAGES))
	{
	    return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i garages. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_GARAGES), GetPlayerAssetLimit(playerid, LIMIT_GARAGES));
	}

	SetGarageOwner(garageid, playerid);
	GivePlayerCash(playerid, -GarageInfo[garageid][gPrice]);

	SM(playerid, COLOR_YELLOW, "You paid $%i to make this garage yours! /garagehelp for a list of commands.", GarageInfo[garageid][gPrice]);
    Log_Write("log_property", "%s (uid: %i) purchased %s garage (id: %i) for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], GarageInfo[garageid][gPrice]);
	return 1;
}

/*
CMD:upgradegarage(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any garage of yours.");
	}
	if(GarageInfo[garageid][gType] >= 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your garage is already at its maximum possible size. You cannot upgrade it further.");
	}
	if(isnull(params) || strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /upgradegarage [confirm]");
	    SM(playerid, COLOR_WHITE, "The next garage size available is %s and costs $%i to upgrade to.", garageInteriors[GarageInfo[garageid][gType] + 1][intName], garageInteriors[GarageInfo[garageid][gType] + 1][intPrice]);
		return 1;
	}
	if(pData[playerid][pCash] < garageInteriors[GarageInfo[garageid][gType] + 1][intPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to upgrade your garage.");
	}

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i) && IsVehicleInGarage(i, garageid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You must remove all vehicles from your garage before proceeding.");
		}
	}

	foreach(new i : Player)
	{
	    if(GetInsideGarage(i) == garageid)
	    {
			SetPlayerPos(i, garageInteriors[GarageInfo[garageid][gType] + 1][intVX], garageInteriors[GarageInfo[garageid][gType] + 1][intVY], garageInteriors[GarageInfo[garageid][gType] + 1][intVZ]);
			SetPlayerFacingAngle(i, garageInteriors[GarageInfo[garageid][gType] + 1][intVA]);
			SetPlayerInterior(i, garageInteriors[GarageInfo[garageid][gType] + 1][intID]);
			SetCameraBehindPlayer(i);
		}
	}

	GarageInfo[garageid][gType]++;
	GarageInfo[garageid][gPrice] = garageInteriors[GarageInfo[garageid][gType]][intPrice];

	GivePlayerCash(playerid, -garageInteriors[GarageInfo[garageid][gType]][intPrice]);
	SM(playerid, COLOR_YELLOW, "You have upgraded your garage's size to %s for $%i.", garageInteriors[GarageInfo[garageid][gType]][intName], garageInteriors[GarageInfo[garageid][gType]][intPrice]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET type = %i, price = %i WHERE id = %i", GarageInfo[garageid][gType], GarageInfo[garageid][gPrice], GarageInfo[garageid][gID]);
	mysql_tquery(connectionID, queryBuffer);

	Log_Write("log_property", "%s (uid: %i) upgraded their garage (id: %i) to %s size for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], GarageInfo[garageid][gID], garageInteriors[GarageInfo[garageid][gType]][intName], garageInteriors[GarageInfo[garageid][gType]][intPrice]);
	return 1;
}*/

CMD:sellgarage(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new garageid = GetNearbyGarageEx(playerid), targetid, amount;

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any garage of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellgarage [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must specify an amount above zero.");
	}

	pData[targetid][pGarageOffer] = playerid;
	pData[targetid][pGarageOffered] = garageid;
	pData[targetid][pGaragePrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you their garage for $%i (/accept garage).", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You have offered %s to buy your garage for $%i.", GetRPName(targetid), amount);
	return 1;
}

CMD:sellmygarage(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any garage of yours.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sellmygarage [confirm]");
	    SM(playerid, COLOR_WHITE, "This command sells your garage back to the state. You will receive $%i back.", percent(GarageInfo[garageid][gPrice], 75));
	    return 1;
	}

	SetGarageOwner(garageid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(GarageInfo[garageid][gPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your garage to the state and received $%i back.", percent(GarageInfo[garageid][gPrice], 75));
    Log_Write("log_property", "%s (uid: %i) sold their %s garage (id: %i) to the state for $%i", GetPlayerNameEx(playerid), pData[playerid][pID], garageInteriors[GarageInfo[garageid][gType]][intName], GarageInfo[garageid][gID], percent(GarageInfo[garageid][gPrice], 75));
	return 1;
}

CMD:garageinfo(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new garageid = GetNearbyGarageEx(playerid);

	if(garageid == -1 || !IsGarageOwner(playerid, garageid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any garage of yours.");
	}

    SM(playerid, SERVER_COLOR, "Garage ID %i:", garageid);
	SM(playerid, COLOR_GREY2, "(Value: $%i) - (Size: %s) - (Location: %s) - (Active: %s) - (Locked: %s)", GarageInfo[garageid][gPrice], garageInteriors[GarageInfo[garageid][gType]][intName], GetZoneName(GarageInfo[garageid][gPosX], GarageInfo[garageid][gPosY], GarageInfo[garageid][gPosZ]), (gettime() - GarageInfo[garageid][gTimestamp] > 1209600) ? (""SVRCLR"No{C8C8C8}") : ("Yes"), (GarageInfo[garageid][gLocked]) ? ("Yes") : ("No"));
	return 1;
}

CMD:createbiz(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new type, Float:x, Float:y, Float:z, Float:a;

    if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", type))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /createbiz [type]");
	    SCM(playerid, COLOR_SYNTAX, "List of options: (1) 24/7 (2) Gun Shop (3) Clothes Shop (4) Gym (5) Restaurant (6) Ad Agency (7) Club/Bar");
	    return 1;
	}
	if(!(1 <= type <= sizeof(bizInteriors)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}
	if(GetNearbyBusiness(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a business in range. Find somewhere else to create this one.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	type--;

 	for(new i = 0; i < MAX_BUSINESSES; i ++)
	{
	    if(!BusinessInfo[i][bExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO businesses (type, price, pos_x, pos_y, pos_z, pos_a, int_x, int_y, int_z, int_a, interior, outsideint, outsidevw) VALUES(%i, %i, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', %i, %i, %i)", type, bizInteriors[type][intPrice], x, y, z, a - 180.0,
				bizInteriors[type][intX], bizInteriors[type][intY], bizInteriors[type][intZ], bizInteriors[type][intA], bizInteriors[type][intID], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateBusiness", "iiiffff", playerid, i, type, x, y, z, a);
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "Business slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:editbiz(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new businessid, option[14], param[32];

	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[32]", businessid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [option]");
	    SCM(playerid, COLOR_GREY2, "List of options: Entrance, Exit, Interior, World, Type, Owner, Price, EntryFee, Products, Materials, Locked");
	    return 1;
	}
	if(!(0 <= businessid < MAX_BUSINESSES) || !BusinessInfo[businessid][bExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid business.");
	}

	if(!strcmp(option, "entrance", true))
	{
	    GetPlayerPos(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]);
	    GetPlayerFacingAngle(playerid, BusinessInfo[businessid][bPosA]);

	    BusinessInfo[businessid][bOutsideInt] = GetPlayerInterior(playerid);
	    BusinessInfo[businessid][bOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ], BusinessInfo[businessid][bPosA], BusinessInfo[businessid][bOutsideInt], BusinessInfo[businessid][bOutsideVW], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the entrance of business %i.", businessid);
	}
	else if(!strcmp(option, "exit", true))
	{
	    new type = -1;

	    for(new i = 0; i < sizeof(bizInteriors); i ++)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 100.0, bizInteriors[i][intX], bizInteriors[i][intY], bizInteriors[i][intZ]))
	        {
	            type = i;
			}
	    }

	    GetPlayerPos(playerid, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ]);
	    GetPlayerFacingAngle(playerid, BusinessInfo[businessid][bIntA]);

	    BusinessInfo[businessid][bInterior] = GetPlayerInterior(playerid);
		BusinessInfo[businessid][bType] = type;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", type, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the exit of business %i.", businessid);
	}
	else if(!strcmp(option, "interior", true))
	{
		new string[1024];

		for(new i = 0; i < sizeof(bizInteriorArray); i ++)
		{
		    format(string, sizeof(string), "%s\n%s", string, bizInteriorArray[i][intName]);
	    }

	    pData[playerid][pSelected] = businessid;
	    ShowPlayerDialog(playerid, DIALOG_BIZINTERIOR, DIALOG_STYLE_LIST, "Choose an interior to set for this business.", string, "Select", "Cancel");
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [world] [vw]");
		}

		BusinessInfo[businessid][bWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET world = %i WHERE id = %i", BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the virtual world of business %i to %i.", businessid, worldid);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [type] [value (1-%i)]", sizeof(bizInteriors));
	        SCM(playerid, COLOR_GREY2, "List of options: (1) 24/7 (2) Gun Shop (3) Clothes Shop (4) Gym (5) Restaurant (6) Ad Agency (7) Club/Bar");
	        return 1;
		}
		if(!(1 <= type <= sizeof(bizInteriors)))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		BusinessInfo[businessid][bType] = type-1;
		BusinessInfo[businessid][bInterior] = bizInteriors[type][intID];
		BusinessInfo[businessid][bIntX] = bizInteriors[type][intX];
		BusinessInfo[businessid][bIntY] = bizInteriors[type][intY];
		BusinessInfo[businessid][bIntZ] = bizInteriors[type][intZ];
		BusinessInfo[businessid][bIntA] = bizInteriors[type][intA];

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET type = %i, int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i, world = %i WHERE id = %i", type-1, BusinessInfo[businessid][bIntX], BusinessInfo[businessid][bIntY], BusinessInfo[businessid][bIntZ], BusinessInfo[businessid][bIntA], BusinessInfo[businessid][bInterior], BusinessInfo[businessid][bWorld], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the type of business %i to %i.", businessid, type);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [owner] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(!pData[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
		}

        SetBusinessOwner(businessid, targetid);
	    SM(playerid, COLOR_AQUA, "** You've changed the owner of business %i to %s.", businessid, GetRPName(targetid));
	}
	else if(!strcmp(option, "price", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [price] [value]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
		}

		BusinessInfo[businessid][bPrice] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET price = %i WHERE id = %i", BusinessInfo[businessid][bPrice], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the price of business %i to $%i.", businessid, price);
	}
	else if(!strcmp(option, "entryfee", true))
	{
	    new price;

	    if(sscanf(param, "i", price))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [entryfee] [value]");
		}
		if(price < 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
		}

		BusinessInfo[businessid][bEntryFee] = price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET entryfee = %i WHERE id = %i", BusinessInfo[businessid][bEntryFee], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the entry fee of business %i to $%i.", businessid, price);
	}
	else if(!strcmp(option, "products", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [products] [value]");
		}

		BusinessInfo[businessid][bProducts] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET products = %i WHERE id = %i", BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the products amount of business %i to %i.", businessid, amount);
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editbiz [businessid] [locked] [0/1]");
		}

		BusinessInfo[businessid][bLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = %i WHERE id = %i", BusinessInfo[businessid][bLocked], BusinessInfo[businessid][bID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadBusiness(businessid);
	    SM(playerid, COLOR_AQUA, "** You've changed the lock state of business %i to %i.", businessid, locked);
	}

	return 1;
}

CMD:removebiz(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new businessid;

	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removebiz [businessid]");
	}
	if(!(0 <= businessid < MAX_HOUSES) || !BusinessInfo[businessid][bExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid business.");
	}

	DestroyDynamic3DTextLabel(BusinessInfo[businessid][bText]);
	DestroyDynamicPickup(BusinessInfo[businessid][bPickup]);
	DestroyDynamicMapIcon(BusinessInfo[businessid][bMapIcon]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM businesses WHERE id = %i", BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	BusinessInfo[businessid][bExists] = 0;
	BusinessInfo[businessid][bID] = 0;
	BusinessInfo[businessid][bOwnerID] = 0;

	SM(playerid, COLOR_AQUA, "** You have removed business %i.", businessid);
	return 1;
}

CMD:gotobiz(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new businessid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotobiz [businessid]");
	}
	if(!(0 <= businessid < MAX_HOUSES) || !BusinessInfo[businessid][bExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid business.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]);
	SetPlayerFacingAngle(playerid, BusinessInfo[businessid][bPosA]);
	SetPlayerInterior(playerid, BusinessInfo[businessid][bOutsideInt]);
	SetPlayerVirtualWorld(playerid, BusinessInfo[businessid][bOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:bizhelp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SCM(playerid, COLOR_LIGHTORANGE, "** BUSINESS: /buybiz, /lock, /bwithdraw, /bdeposit, /sellbiz, /sellmybiz, /bizinfo.");
	SCM(playerid, COLOR_LIGHTORANGE, "** BUSINESS: /entryfee, /sethname, /businessmenu, /products.");
	return 1;
}

CMD:buybiz(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new businessid;

	if((businessid = GetNearbyBusiness(playerid)) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no business in range. You must be near a business.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /buybiz [confirm]");
	}
	if(BusinessInfo[businessid][bOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This business already has an owner.");
	}
	if(pData[playerid][pCash] < BusinessInfo[businessid][bPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this business.");
	}
    if(GetPlayerAssetCount(playerid, LIMIT_BUSINESSES) >= GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES))
	{
	    return SM(playerid, COLOR_SYNTAX, "You currently own %i/%i businesses. You can't own anymore unless you upgrade your asset perk.", GetPlayerAssetCount(playerid, LIMIT_BUSINESSES), GetPlayerAssetLimit(playerid, LIMIT_BUSINESSES));
	}

	SetBusinessOwner(businessid, playerid);
	GivePlayerCash(playerid, -BusinessInfo[businessid][bPrice]);

	SM(playerid, COLOR_YELLOW, "You paid $%i for this %s. /bizhelp for a list of commands.", BusinessInfo[businessid][bPrice], bizInteriors[BusinessInfo[businessid][bType]][intType]);
    Log_Write("log_property", "%s (uid: %i) purchased %s (id: %i) for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], BusinessInfo[businessid][bPrice]);
	return 1;
}

CMD:bwithdraw(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any business of yours.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /bwithdraw [amount] ($%i available)", BusinessInfo[businessid][bCash]);
	}
	if(amount < 1 || amount > BusinessInfo[businessid][bCash])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	BusinessInfo[businessid][bCash] -= amount;
	GivePlayerCash(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "** You have withdrawn $%i from the business vault. There is now $%i remaining.", amount, BusinessInfo[businessid][bCash]);
	return 1;
}

CMD:bdeposit(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new businessid = GetInsideBusiness(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any business of yours.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /bdeposit [amount] ($%i available)", BusinessInfo[businessid][bCash]);
	}
	if(amount < 1 || amount > pData[playerid][pCash])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	BusinessInfo[businessid][bCash] += amount;
	GivePlayerCash(playerid, -amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "** You have deposited $%i in the business vault. There is now $%i available.", amount, BusinessInfo[businessid][bCash]);
	return 1;
}

CMD:sellbiz(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new businessid = GetNearbyBusinessEx(playerid), targetid, amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any business of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellbiz [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must specify an amount above zero.");
	}

	pData[targetid][pBizOffer] = playerid;
	pData[targetid][pBizOffered] = businessid;
	pData[targetid][pBizPrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you their business for $%i (/accept business).", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You have offered %s to buy your business for $%i.", GetRPName(targetid), amount);
	return 1;
}

/*CMD:sellmybiz(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new businessid = GetNearbyBusinessEx(playerid);

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any business of yours.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sellmybiz [confirm]");
	    SM(playerid, COLOR_WHITE, "This command sells your business back to the state. You will receive $%i back.", percent(BusinessInfo[businessid][bPrice], 75));
	    return 1;
	}

	SetBusinessOwner(businessid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(BusinessInfo[businessid][bPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your business to the state and received $%i back.", percent(BusinessInfo[businessid][bPrice], 75));
    Log_Write("log_property", "%s (uid: %i) sold their %s business (id: %i) to the state for $%i", GetPlayerNameEx(playerid), pData[playerid][pID], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bID], percent(BusinessInfo[businessid][bPrice], 75));
	return 1;
}*/

CMD:bizinfo(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new businessid = GetNearbyBusinessEx(playerid);

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any business of yours.");
	}

    SM(playerid, SERVER_COLOR, "Business ID %i:", businessid);
	SM(playerid, COLOR_GREY2, "(Value: $%i) - (Type: %s) - (Location: %s) - (Active: %s) - (Status: %s)", BusinessInfo[businessid][bPrice], bizInteriors[BusinessInfo[businessid][bType]][intType], GetZoneName(BusinessInfo[businessid][bPosX], BusinessInfo[businessid][bPosY], BusinessInfo[businessid][bPosZ]), (gettime() - BusinessInfo[businessid][bTimestamp] > 1209600) ? (""SVRCLR"No{C8C8C8}") : ("Yes"), (BusinessInfo[businessid][bLocked]) ? ("Closed") : ("Opened"));
	SM(playerid, COLOR_GREY2, "(Vault: $%i) - (Entry Fee: $%i) - (Products: %i)", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bEntryFee], BusinessInfo[businessid][bProducts]);
	return 1;
}

CMD:businessmenu(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new businessid = GetNearbyBusinessEx(playerid);

    if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're not near any business that you own.");
	}
	ShowPlayerDialog(playerid, DIALOG_BIZMENU, DIALOG_STYLE_LIST, "Business Menu","Change Store Name\nChange Message\nSafe\nLock Business", "Select", "Cancel");
	return 1;
}
CMD:entryfee(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new businessid = GetNearbyBusinessEx(playerid), amount;

	if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any business of yours.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /entryfee [amount]");
	}
	if(amount < 0 || amount > 15000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The entry fee can't be below $0 or above $15,000.");
	}

	BusinessInfo[businessid][bEntryFee] = amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET entryfee = %i WHERE id = %i", BusinessInfo[businessid][bEntryFee], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadBusiness(businessid);
	SM(playerid, COLOR_AQUA, "** You have set the entry fee to $%i.", amount);
	return 1;
}
stock IsAt247(playerid)
{
 	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0, 936.2162,-1653.4504,13.6662))
		{
			return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid, 4.0, 1315.4165,-887.7797,39.6562))
		{
			return 1;
		}
 	}
	return 0;
}		
CMD:ministop(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!IsAt247(playerid))
	{
        SendClientMessage(playerid, COLOR_GRAD2, "   You're not in a 24-7!");
        return 1;
    }
	ShowDialogToPlayer(playerid, DIALOG_BUYSTORE);
	return 1;
}

CMD:buyclothes(playerid, params[]) return callcmd::buy(playerid, params);
CMD:buy(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new businessid = GetInsideBusiness(playerid), title[64], string[1024];

	if(businessid == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any business where you can buy stuff.");
	}
	if(BusinessInfo[businessid][bProducts] <= 0)
 	{
	 	return SCM(playerid, COLOR_SYNTAX, "This business is out of stock.");
   	}
	
	format(title, sizeof(title), "%s's %s (( %i Products ))", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);

	switch(BusinessInfo[businessid][bType])
	{
	    case BUSINESS_STORE:
	    {
			format(string, sizeof(string), "Mobile Phone\t%s\nPortable Radio\t%s\nCigars\t%s\nSpraycans\t%s\nPhonebook\t%s\nCamera\t%s\nMP3 player\t%s\nFishing rod\t%s\nFish bait\t%s\nMuriatic acid\t%s\nBaking soda\t%s\nPocket watch\t%s\nGPS system\t%s\nGasoline can\t%s\nRope\t%s\nBlindfold\t%s\nToolkit\t%s\nFlashlight\t%s\nLottery Ticket\t%s\nMask\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]),
				FormatNumber(BusinessInfo[businessid][bPrices][5]),
				FormatNumber(BusinessInfo[businessid][bPrices][6]),
				FormatNumber(BusinessInfo[businessid][bPrices][7]),
				FormatNumber(BusinessInfo[businessid][bPrices][8]),
				FormatNumber(BusinessInfo[businessid][bPrices][9]),
				FormatNumber(BusinessInfo[businessid][bPrices][10]),
				FormatNumber(BusinessInfo[businessid][bPrices][11]),
				FormatNumber(BusinessInfo[businessid][bPrices][12]),
				FormatNumber(BusinessInfo[businessid][bPrices][13]),
				FormatNumber(BusinessInfo[businessid][bPrices][14]),
				FormatNumber(BusinessInfo[businessid][bPrices][15]),
				FormatNumber(BusinessInfo[businessid][bPrices][16]),
				FormatNumber(BusinessInfo[businessid][bPrices][17]),
				FormatNumber(BusinessInfo[businessid][bPrices][18]),
				FormatNumber(BusinessInfo[businessid][bPrices][19]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_GUNSHOP:
		{
			if(pData[playerid][pWeaponLicense] == 0)
			{
				return SCM(playerid, COLOR_GREY2, "You don't have a Weapon License, therefore you cannot buy a gun.");
			}

			if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
			{
				return SCM(playerid, COLOR_SYNTAX, "That player is either weapon restricted or level 1.");
			}
			format(string, sizeof(string), "BASEBALL BAT\t%s\nKATANA\t%s\nSILENCE PISTOL\t%s\nPISTOL\t%s\nMP5\t%s\nShotgun\t%s\nVest\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]),
				FormatNumber(BusinessInfo[businessid][bPrices][5]),
				FormatNumber(BusinessInfo[businessid][bPrices][6]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");

		}
		case BUSINESS_CLOTHES:
		{
			format(string, sizeof(string), "Clothes\t%s\nGlasses\t%s\nBandanas & Masks\t%s\nHats & Caps\t%s\nMisc Clothing\t%s\n VIP TOYS\t Free(VIP ONLY)",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]));
	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_GYM:
		{
			format(string, sizeof(string), "Normal\tFree\nBoxing\t%s\nKung Fu\t%s\nKneehead\t%s\nGrabkick\t%s\nElbow\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_RESTAURANT:
		{
			format(string, sizeof(string), "Water\t%s\nSprunk\t%s\nKid's Meal\t%s\nMedium Meal\t%s\nBig Meal\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_BARCLUB:
		{
			format(string, sizeof(string), "Water\t%s\nSprunk\t%s\nBeer\t%s\nWine\t%s\nWhiskey\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_BUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
	}
	return 1;
}

CMD:products(playerid, parmas[]) {

    new businessid = GetInsideBusiness(playerid), string[1024], title[64];
    if(businessid == -1 || !IsBusinessOwner(playerid, businessid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're not near any business that you own.");
	}
	format(title, sizeof(title), "%s's %s (( %i Products ))", BusinessInfo[businessid][bOwner], bizInteriors[BusinessInfo[businessid][bType]][intType], BusinessInfo[businessid][bProducts]);
	switch(BusinessInfo[businessid][bType])
	{
	    case BUSINESS_STORE:
	    {
			format(string, sizeof(string), "Mobile Phone\t%s\nPortable Radio\t%s\nCigars\t%s\nSpraycans\t%s\nPhonebook\t%s\nCamera\t%s\nMP3 player\t%s\nFishing rod\t%s\nFish bait\t%s\nMuriatic acid\t%s\nBaking soda\t%s\nPocket watch\t%s\nGPS system\t%s\nGasoline can\t%s\nRope\t%s\nBlindfold\t%s\nToolkit\t%s\nFlashlight\t%s\nLottery Ticket\t%s\nMask\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]),
				FormatNumber(BusinessInfo[businessid][bPrices][5]),
				FormatNumber(BusinessInfo[businessid][bPrices][6]),
				FormatNumber(BusinessInfo[businessid][bPrices][7]),
				FormatNumber(BusinessInfo[businessid][bPrices][8]),
				FormatNumber(BusinessInfo[businessid][bPrices][9]),
				FormatNumber(BusinessInfo[businessid][bPrices][10]),
				FormatNumber(BusinessInfo[businessid][bPrices][11]),
				FormatNumber(BusinessInfo[businessid][bPrices][12]),
				FormatNumber(BusinessInfo[businessid][bPrices][13]),
				FormatNumber(BusinessInfo[businessid][bPrices][14]),
				FormatNumber(BusinessInfo[businessid][bPrices][15]),
				FormatNumber(BusinessInfo[businessid][bPrices][16]),
				FormatNumber(BusinessInfo[businessid][bPrices][17]),
				FormatNumber(BusinessInfo[businessid][bPrices][18]),
				FormatNumber(BusinessInfo[businessid][bPrices][19]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_GUNSHOP:
		{
			format(string, sizeof(string), "BASEBALL BAT\t%s\nKATANA\t%s\nSILENCE PISTOL\t%s\nPISTOL\t%s\nMP5\t%s\nShotgun\t%s\nVest\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]),
				FormatNumber(BusinessInfo[businessid][bPrices][5]),
				FormatNumber(BusinessInfo[businessid][bPrices][6]));
				
	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");

		}
		case BUSINESS_CLOTHES:
		{
			format(string, sizeof(string), "Clothes\t%s\nGlasses\t%s\nBandanas & Masks\t%s\nHats & Caps\t%s\nMisc Clothing\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]));
	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_GYM:
		{
			format(string, sizeof(string), "Normal\tFree\nBoxing\t%s\nKung Fu\t%s\nKneehead\t%s\nGrabkick\t%s\nElbow\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_RESTAURANT:
		{
			format(string, sizeof(string), "Water\t%s\nSprunk\t%s\nKid's Meal\t%s\nMedium Meal\t%s\nBig Meal\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
		case BUSINESS_BARCLUB:
		{
			format(string, sizeof(string), "Water\t%s\nSprunk\t%s\nBeer\t%s\nWine\t%s\nWhiskey\t%s",
				FormatNumber(BusinessInfo[businessid][bPrices][0]),
				FormatNumber(BusinessInfo[businessid][bPrices][1]),
				FormatNumber(BusinessInfo[businessid][bPrices][2]),
				FormatNumber(BusinessInfo[businessid][bPrices][3]),
				FormatNumber(BusinessInfo[businessid][bPrices][4]));

	        ShowPlayerDialog(playerid, DIALOG_EDITBUY, DIALOG_STYLE_TABLIST, title, string, "Select", "Cancel");
		}
	}
	return 1;
}

CMD:phoneadvertise(playerid, params[]) return callcmd::phonead(playerid, params);
CMD:phonead(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new price = strlen(params) * 10;

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(phonead)vertise [advertisement] ($10/char)");
	}
	if(pData[playerid][pAdMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are muted from submitting advertisements. /report for an unmute.");
	}
	if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a mobile phone. You need a phone so people can contact you.");
	}
	if(pData[playerid][pTogglePhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use your mobile phone right now as you have it toggled ((/tog phone)).");
	}
	if(gettime() - gLastAd < 30)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Advertisements can only be posted every 30 seconds.");
	}
	if(pData[playerid][pDonator] < 1 && pData[playerid][pCash] < price)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need $%i in order to place the advertisement. You can't afford that.", price);
	}

	new
		string[20];

	gLastAd = gettime();

	if(pData[playerid][pDonator] == 1)
	{
	    SCM(playerid, COLOR_VIP, "** VIP Perk: Your advertisement was posted free of charge!");
	}
	else
	{
		format(string, sizeof(string), "~r~-$%i", price);
		GameTextForPlayer(playerid, string, 5000, 1);

		GivePlayerCash(playerid, -price);
	}

	SMA(COLOR_WHITE, "["ORANGE"Phone Advert"WHITE"]: %s - Contact: (%i) (%s)", params, pData[playerid][pPhone], GetRPName(playerid));
	return 1;
}

CMD:advertise(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::ad(playerid, params);
}

CMD:ad(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new businessid = GetInsideBusiness(playerid), price = strlen(params) * 10;

	if((businessid == -1 || BusinessInfo[businessid][bType] != 5))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any advertisement business.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(ad)vertise [advertisement] ($10/char)");
	}
	if(pData[playerid][pAdMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are muted from submitting advertisements. /report for an unmute.");
	}
	if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a mobile phone. You need a phone so people can contact you.");
	}
	if(gettime() - gLastAd < 30)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Advertisements can only be posted every 30 seconds.");
	}
	if(pData[playerid][pDonator] < 1 && pData[playerid][pCash] < price)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need $%i in order to place the advertisement. You can't afford that.", price);
	}

	new
		string[20];

	gLastAd = gettime();

	format(string, sizeof(string), "~r~-$%i", price);
	GameTextForPlayer(playerid, string, 5000, 1);

	GivePlayerCash(playerid, -price);

	if(businessid >= 0)
	{
		BusinessInfo[businessid][bCash] += price;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET cash = %i WHERE id = %i", BusinessInfo[businessid][bCash], BusinessInfo[businessid][bID]);
		mysql_tquery(connectionID, queryBuffer);
	}

	SMA(COLOR_GREEN, "Advert: %s - Contact: %s (%i)", params, GetRPName(playerid), pData[playerid][pPhone]);
	return 1;
}

CMD:mark(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new slot;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", slot))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /mark [slot (1-3)]");
	}
	if(!(1 <= slot <= 3))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
	}

	slot--;

	GetPlayerPos(playerid, MarkedPositions[playerid][slot][mPosX], MarkedPositions[playerid][slot][mPosY], MarkedPositions[playerid][slot][mPosZ]);
	GetPlayerFacingAngle(playerid, MarkedPositions[playerid][slot][mPosA]);

	MarkedPositions[playerid][slot][mInterior] = GetPlayerInterior(playerid);
	MarkedPositions[playerid][slot][mWorld] = GetPlayerVirtualWorld(playerid);

	SM(playerid, COLOR_AQUA, "** Position saved in slot %i.", slot + 1);
	return 1;
}

CMD:gotomark(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new slot;

    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", slot))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotomark [slot (1-3)]");
	}
	if(!(1 <= slot <= 3))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
	}
	if(MarkedPositions[playerid][slot-1][mPosX] == 0.0 && MarkedPositions[playerid][slot-1][mPosY] == 0.0 && MarkedPositions[playerid][slot-1][mPosZ] == 0.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no position in the slot selected.");
	}

	slot--;

	GameTextForPlayer(playerid, "~w~Loading objects...", 5000, 1);

	TeleportToCoords(playerid, MarkedPositions[playerid][slot][mPosX], MarkedPositions[playerid][slot][mPosY], MarkedPositions[playerid][slot][mPosZ], MarkedPositions[playerid][slot][mPosA], MarkedPositions[playerid][slot][mInterior], MarkedPositions[playerid][slot][mWorld], true);
	SetCameraBehindPlayer(playerid);

	return 1;
}


CMD:createdoor(playerid, params[]) { return callcmd::createentrance(playerid, params); }
CMD:createentrance(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new name[40], Float:x, Float:y, Float:z, Float:a;

    if(pData[playerid][pAdmin] < 7 && pData[playerid][pGangMod] < 1)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[40]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /createentrance [name]");
	}
	if(GetNearbyEntrance(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is an entrance in range. Find somewhere else to create this one.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	for(new i = 0; i < MAX_ENTRANCES; i ++)
	{
	    if(!EntranceInfo[i][eExists])
	    {
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO entrances (name, pos_x, pos_y, pos_z, pos_a, outsideint, outsidevw) VALUES('%e', '%f', '%f', '%f', '%f', %i, %i)", name, x, y, z, a - 180.0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
			mysql_tquery(connectionID, queryBuffer, "OnAdminCreateEntrance", "iisffff", playerid, i, name, x, y, z, a);
			return 1;
		}
	}
	
	Log_Write("log_createentrance", "%s (uid: %i) has create an entrance", GetPlayerNameEx(playerid), pData[playerid][pID]);
	SCM(playerid, COLOR_SYNTAX, "Entrance slots are currently full. Ask managements to increase the internal limit.");
	return 1;
}

CMD:editdoor(playerid, params[]) { return callcmd::editentrance(playerid, params); }
CMD:editentrance(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new entranceid, option[14], param[64];

    if(pData[playerid][pAdmin] < 7 && pData[playerid][pGangMod] < 1)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "is[14]S()[64]", entranceid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Outside, Inside, Name, Icon, World, Owner, Locked, Radius, AdminLevel");
		SCM(playerid, COLOR_WHITE, "Available options: Faction, VIP, Vehicles, Freeze, Label, Password, Mapicon");
	    return 1;
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid entrance.");
	}

	if(!strcmp(option, "outside", true))
	{
	    GetPlayerPos(playerid, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]);
	    GetPlayerFacingAngle(playerid, EntranceInfo[entranceid][ePosA]);

	    EntranceInfo[entranceid][eOutsideInt] = GetPlayerInterior(playerid);
	    EntranceInfo[entranceid][eOutsideVW] = GetPlayerVirtualWorld(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', outsideint = %i, outsidevw = %i WHERE id = %i", EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ], EntranceInfo[entranceid][ePosA], EntranceInfo[entranceid][eOutsideInt], EntranceInfo[entranceid][eOutsideVW], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the exterior of entrance %i.", entranceid);
	}
	else if(!strcmp(option, "inside", true))
	{
	    GetPlayerPos(playerid, EntranceInfo[entranceid][eIntX], EntranceInfo[entranceid][eIntY], EntranceInfo[entranceid][eIntZ]);
	    GetPlayerFacingAngle(playerid, EntranceInfo[entranceid][eIntA]);

	    EntranceInfo[entranceid][eInterior] = GetPlayerInterior(playerid);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET int_x = '%f', int_y = '%f', int_z = '%f', int_a = '%f', interior = %i WHERE id = %i", EntranceInfo[entranceid][eIntX], EntranceInfo[entranceid][eIntY], EntranceInfo[entranceid][eIntZ], EntranceInfo[entranceid][eIntA], EntranceInfo[entranceid][eInterior], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the interior of entrance %i.", entranceid);
	}
	else if(!strcmp(option, "name", true))
	{
	    new name[32];

	    if(sscanf(param, "s[32]", name))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [name] [text]");
		}

		strcpy(EntranceInfo[entranceid][eName], name, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET name = '%e' WHERE id = %i", EntranceInfo[entranceid][eName], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the name of entrance %i to '%s'.", entranceid, name);
	}
	else if(!strcmp(option, "icon", true))
	{
	    new iconid;

	    if(sscanf(param, "i", iconid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [icon] [iconid (19300 = hide)]");
		}
		if(!IsValidModel(iconid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid model ID.");
		}

		EntranceInfo[entranceid][eIcon] = iconid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET iconid = %i WHERE id = %i", EntranceInfo[entranceid][eIcon], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the pickup icon model of entrance %i to %i.", entranceid, iconid);
	}
	else if(!strcmp(option, "world", true))
	{
	    new worldid;

	    if(sscanf(param, "i", worldid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [world] [vw]");
		}

		EntranceInfo[entranceid][eWorld] = worldid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET world = %i WHERE id = %i", EntranceInfo[entranceid][eWorld], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the virtual world of entrance %i to %i.", entranceid, worldid);
	}
	else if(!strcmp(option, "owner", true))
	{
	    new targetid;

	    if(!isnull(param) && !strcmp(param, "none", true))
		{
 			SetEntranceOwner(entranceid, INVALID_PLAYER_ID);
	    	return SM(playerid, COLOR_AQUA, "** You've reset the owner of entrance %i.", entranceid);
		}
		if(sscanf(param, "u", targetid))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [owner] [playerid/none]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(!pData[targetid][pLogged])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
		}

        SetEntranceOwner(entranceid, targetid);
	    SM(playerid, COLOR_AQUA, "** You've changed the owner of entrance %i to %s.", entranceid, GetRPName(targetid));
	}
    else if(!strcmp(option, "locked", true))
	{
	    new locked;

	    if(sscanf(param, "i", locked) || !(0 <= locked <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [locked] [0/1]");
		}

		EntranceInfo[entranceid][eLocked] = locked;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET locked = %i WHERE id = %i", EntranceInfo[entranceid][eLocked], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the lock state of entrance %i to %i.", entranceid, locked);
	}
	else if(!strcmp(option, "radius", true))
	{
	    new Float:radius;

	    if(sscanf(param, "f", radius))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [radius] [range]");
		}
		if(!(1.0 <= radius <= 20.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The entry radius must range between 1.0 and 20.0.");
		}

		EntranceInfo[entranceid][eRadius] = radius;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET radius = '%f' WHERE id = %i", EntranceInfo[entranceid][eRadius], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the entry radius of entrance %i to %.1f.", entranceid, radius);
	}
	else if(!strcmp(option, "adminlevel", true))
	{
	    new level;

	    if(sscanf(param, "i", level))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [adminlevel] [level]");
		}
		if(!(0 <= level <= 7))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid level. Valid levels range from 0 to 7.");
		}

		EntranceInfo[entranceid][eAdminLevel] = level;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET adminlevel = %i WHERE id = %i", EntranceInfo[entranceid][eAdminLevel], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the admin level of entrance %i to %i.", entranceid, level);
	}
	else if(!strcmp(option, "faction", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [faction] [type]");
	        SCM(playerid, COLOR_GREY2, "List of types: (0) None (1) Police (2) Medic (3) News (4) Government (5) Hitman (6) Federal (7) Mechanic (9) Doc (9) Sheriff");
	        return 1;
		}
		if(!(0 <= type <= 9))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		EntranceInfo[entranceid][eFactionType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET factiontype = %i WHERE id = %i", EntranceInfo[entranceid][eFactionType], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(type == FACTION_NONE)
		    SM(playerid, COLOR_AQUA, "** You've reset the faction type of entrance %i.", entranceid);
		else
	    	SM(playerid, COLOR_AQUA, "** You've changed the faction type of entrance %i to %s (%i).", entranceid, factionTypes[type], type);
	}
	else if(!strcmp(option, "vip", true))
	{
	    new rankid;

	    if(sscanf(param, "i", rankid))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [vip] [rankid]");
	        SCM(playerid, COLOR_GREY2, "List of ranks: (0)None (1) Silver (2) Diamond (3) Platinum");
	        return 1;
		}
		if(!(0 <= rankid <= 3))
		{
			return SCM(playerid, COLOR_SYNTAX, "Invalid VIP rank.");
		}

		EntranceInfo[entranceid][eVIP] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET vip = %i WHERE id = %i", EntranceInfo[entranceid][eVIP], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the VIP rank of entrance %i to {C2A2DA}%s{CCFFFF} (%i).", entranceid, GetDonatorRank(rankid), rankid);
	}
	else if(!strcmp(option, "vehicles", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [vehicles] [0/1]");
		}

		EntranceInfo[entranceid][eVehicles] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET vehicles = %i WHERE id = %i", EntranceInfo[entranceid][eVehicles], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SM(playerid, COLOR_AQUA, "** You've allowed vehicle entry for entrance %i.", entranceid);
		else
		    SM(playerid, COLOR_AQUA, "** You've disallowed vehicle entry for entrance %i.", entranceid);
	}
	else if(!strcmp(option, "freeze", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [freeze] [0/1]");
		}

		EntranceInfo[entranceid][eFreeze] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET freeze = %i WHERE id = %i", EntranceInfo[entranceid][eFreeze], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SM(playerid, COLOR_AQUA, "** You've enabled freeze & object loading for entrance %i.", entranceid);
		else
		    SM(playerid, COLOR_AQUA, "** You've disabled freeze & object loading for entrance %i.", entranceid);
	}
	else if(!strcmp(option, "label", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [label] [0/1]");
		}

		EntranceInfo[entranceid][eLabel] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET label = %i WHERE id = %i", EntranceInfo[entranceid][eLabel], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);

		if(status)
		    SM(playerid, COLOR_AQUA, "** You've enabled the 3D text label for entrance %i.", entranceid);
		else
		    SM(playerid, COLOR_AQUA, "** You've disabled the 3D text label for entrance %i.", entranceid);
	}
	else if(!strcmp(option, "password", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [password] [text ('none' to reset)]");
		}

		strcpy(EntranceInfo[entranceid][ePassword], param, 64);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET password = '%e' WHERE id = %i", EntranceInfo[entranceid][ePassword], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the password of entrance %i to '%s'.", entranceid, param);
	}
	else if(!strcmp(option, "mapicon", true))
	{
	    new type;

	    if(sscanf(param, "i", type))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editentrance [entranceid] [mapicon] [type (0-63)]");
		}
		if(!(0 <= type <= 63))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid map icon.");
		}

		EntranceInfo[entranceid][eMapIcon] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE entrances SET mapicon = %i WHERE id = %i", EntranceInfo[entranceid][eMapIcon], EntranceInfo[entranceid][eID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadEntrance(entranceid);
	    SM(playerid, COLOR_AQUA, "** You've changed the map icon of entrance %i to %i.", entranceid, type);
	}

	return 1;
}

CMD:removedoor(playerid, params[]) { return callcmd::removeentrance(playerid, params); }
CMD:removeentrance(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new entranceid;

    if(pData[playerid][pAdmin] < 7 && pData[playerid][pGangMod] < 1)
	{
	    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", entranceid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removeentrance [entranceid]");
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid entrance.");
	}

	DestroyDynamic3DTextLabel(EntranceInfo[entranceid][eText]);
	DestroyDynamicPickup(EntranceInfo[entranceid][ePickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM entrances WHERE id = %i", EntranceInfo[entranceid][eID]);
	mysql_tquery(connectionID, queryBuffer);

	EntranceInfo[entranceid][eExists] = 0;
	EntranceInfo[entranceid][eID] = 0;
	EntranceInfo[entranceid][eOwnerID] = 0;

	SM(playerid, COLOR_AQUA, "** You have removed entrance %i.", entranceid);
	return 1;
}

CMD:gotodoor(playerid, params[]) { return callcmd::gotoentrance(playerid, params); }
CMD:gotoentrance(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new entranceid;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", entranceid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotoentrance [entranceid]");
	}
	if(!(0 <= entranceid < MAX_ENTRANCES) || !EntranceInfo[entranceid][eExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid entrance.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, EntranceInfo[entranceid][ePosX], EntranceInfo[entranceid][ePosY], EntranceInfo[entranceid][ePosZ]);
	SetPlayerFacingAngle(playerid, EntranceInfo[entranceid][ePosA]);
	SetPlayerInterior(playerid, EntranceInfo[entranceid][eOutsideInt]);
	SetPlayerVirtualWorld(playerid, EntranceInfo[entranceid][eOutsideVW]);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:quitjob(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new slot;

	if(pData[playerid][pDonator] >= 1 && sscanf(params, "i", slot))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /quitjob [1/2]");
	}

	if((pData[playerid][pDonator] < 1) || (pData[playerid][pDonator] >= 1 && slot == 1))
	{
	    if(pData[playerid][pJob] == JOB_NONE)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have a job which you can quit.");
	    }

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET job = -1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have quit your job as a "SVRCLR"%s{CCFFFF}.", GetJobName(pData[playerid][pJob]));
		pData[playerid][pJob] = JOB_NONE;
		
		if(pData[playerid][pCarrying])
		{
			pData[playerid][pCarry] = 0;
			pData[playerid][pCarrying] = false;

			RemovePlayerAttachedObject(playerid, 1);
		}
	}
	else if(slot == 2 && pData[playerid][pDonator] >= 1)
	{
	    if(pData[playerid][pSecondJob] == JOB_NONE)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have a job in this slot which you can quit.");
	    }

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET secondjob = -1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have quit your secondary job as a "SVRCLR"%s{CCFFFF}.", GetJobName(pData[playerid][pSecondJob]));
		pData[playerid][pSecondJob] = JOB_NONE;

		if(pData[playerid][pCarrying])
		{
			pData[playerid][pCarry] = 0;
			pData[playerid][pCarrying] = false;

			RemovePlayerAttachedObject(playerid, 1);
		}
	}

	return 1;
}

CMD:getorder(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(!PlayerHasJob(playerid, JOB_FOODPANDA))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you are not a "SVRCLR"Foodpanda.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 6.0, jobLocations[JOB_FOODPANDA][jobX], jobLocations[JOB_FOODPANDA][jobY], jobLocations[JOB_FOODPANDA][jobZ]))
	{
		return SCM(playerid, SERVER_COLOR, "[!] You are not in range of the "WHITE"Foodpanda Manager.");
	}
	if(pData[playerid][pCarrying])
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" You are already carrying a meal to be put on your Wayfarer for delivery!");

	if(pData[playerid][pPizzaCooldown] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to wait %i more seconds before you can load another order.", pData[playerid][pPizzaCooldown]);
	}
	
	pData[playerid][pCarry] = 1;
	pData[playerid][pCarrying] = true;
	SetPlayerAttachedObject(playerid, 9, 2663, 6, 0.308999, 0.020000, 0.000000, 15.600001, -103.199974, -2.500001, 1.000000, 1.000000, 1.000000);
	SCM(playerid, -1, "** You have grabbed the order to be delivered, head outside and put the order into one of the Wayfarer that you'll be driving.");
	SCM(playerid, SERVER_COLOR, "type the command "WHITE"'/putorder'"SVRCLR" at the back of the Wayfarer's carrying basket to put the order inside.");
	return 1;
}

CMD:putorder(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new houseid;

    if(!PlayerHasJob(playerid, JOB_FOODPANDA))
	    return SCM(playerid, SERVER_COLOR, "Error:"WHITE" You can't use this command as you are not working on Foodpanda.");

	if(!pData[playerid][pCarrying])
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" You are not carrying a meal with you.");

	if(pData[playerid][pCarry] != 1)
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" That is not a meal that you are carrying with you! (or you are about to give deliver it)");

	new i = GetNearbyVehicle(playerid);

	if((IsACluckNBellVehicle(i) && IsVehicleOccupied(i)) || !IsACluckNBellVehicle(i))
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" You are not near the basket of a Wayfarer (that is not occupied).");

	if(VehicleInfo[i][vMeal])
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" This vehicle has a meal loaded into it already!");

	if((houseid = GetRandomHouse(playerid)) == -1)
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" There are no houses in the server to deliver meal to. Ask an admin to set them up.");

	pData[playerid][pCarry] = 0;
	pData[playerid][pCarrying] = false;

	VehicleInfo[i][vMeal] = true;

	pData[playerid][pDistance] = GetPlayerDistanceFromPoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
    pData[playerid][pPizzas] = 1;
	pData[playerid][pLastPizza] = gettime();
    pData[playerid][pPizzaTime] = 0;
    pData[playerid][pPizzaCooldown] = 60;
	RemovePlayerAttachedObject(playerid, 9);
	SetPlayerCheckpoint(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 2.0);
    pData[playerid][pCP] = CHECKPOINT_FOODPANDA;

	GameTextForPlayer(playerid, "~w~Deliver to ~r~marker", 5000, 1);
	SCMf(playerid, SERVER_COLOR, "** You have loaded the bike with the meal ordered. Deliver it to %s.", GetZoneName(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]));
	SCM(playerid, SERVER_COLOR, "type "WHITE"'/graborder'"SVRCLR" from the Wayfarer after reaching the destination before entering the marker.");
	return 1;
}

CMD:graborder(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(!PlayerHasJob(playerid, JOB_FOODPANDA))
	    return SCM(playerid, SERVER_COLOR, "Error:"WHITE" You can't use this command as you are not working on Foodpanda.");

	if(pData[playerid][pCarrying])
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" You are already carrying something.");

	new i = GetNearbyVehicle(playerid);

	if((IsACluckNBellVehicle(i) && IsVehicleOccupied(i)) || !IsACluckNBellVehicle(i))
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" You are not near the basket of a Wayfarer (that is not occupied).");

	if(!VehicleInfo[i][vMeal])
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" This vehicle has no order loaded into it!");

	pData[playerid][pCarry] = 2;
	pData[playerid][pCarrying] = true;
	SetPlayerAttachedObject(playerid, 9, 2663, 6, 0.308999, 0.020000, 0.000000, 15.600001, -103.199974, -2.500001, 1.000000, 1.000000, 1.000000);

	VehicleInfo[i][vMeal] = false;

	SCM(playerid, COLOR_YELLOW, "** You grabbed the order to be delivered, You may now enter the destination marker.");
	return 1;
}

CMD:checkcargo(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;
	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /checkcargo [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(pData[targetid][pShipment] == -1)
	{
	    return SCM(playerid, COLOR_WHITE, "The player currently doesn't have a cargo to deliver.");
	}
	if(pData[targetid][pIllegalCargo] == -1)
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s checks the cargo load of %s.", GetRPName(playerid), GetRPName(targetid));
		SCM(playerid, COLOR_WHITE, "Cargo Check: {28c12d}LEGAL PRODUCTS");
	}
	if(pData[targetid][pIllegalCargo] == ILLEGAL_GUNS)
	{
 		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s checks the cargo load of %s.", GetRPName(playerid), GetRPName(targetid));
		SCM(playerid, COLOR_WHITE, "Cargo Check: {ff4242}ILLEGAL WEAPONS");
	}
	if(pData[targetid][pIllegalCargo] == ILLEGAL_MATS)
	{
 		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s checks the cargo load of %s.", GetRPName(playerid), GetRPName(targetid));
		SCM(playerid, COLOR_WHITE, "Cargo Check: {ff4242}ILLEGAL MATERIALS");
	}
	if(pData[targetid][pIllegalCargo] == ILLEGAL_DRUGS)
	{
   		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s checks the cargo load of %s.", GetRPName(playerid), GetRPName(targetid));
		SCM(playerid, COLOR_WHITE, "Cargo Check: {ff4242}ILLEGAL DRUGS");
	}
	return 1;
}

CMD:deliver(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new businessid, products, amount;

    if(!PlayerHasJob(playerid, JOB_COURIER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you are not a trucker.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 414 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 498 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be driving a Mule or a Boxville.");
	}
	if(pData[playerid][pShipment] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no shipment loaded which you can deliver.");
	}
	if((businessid = GetNearbyBusiness(playerid, 7.0)) == -1 || BusinessInfo[businessid][bType] != pData[playerid][pShipment])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of a business which accepts this type of load.");
	}

	if(gettime() - pData[playerid][pLastLoad] < 20 && pData[playerid][pAdmin] < 2 && !pData[playerid][pKicked])
    {
        pData[playerid][pACWarns]++;

        if(pData[playerid][pACWarns] < MAX_ANTICHEAT_WARNINGS)
        {
            SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] is possibly teleport delivering (time: %i).", GetRPName(playerid), playerid, gettime() - pData[playerid][pLastLoad]);
		}
		else
		{
		    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was autobanned by %s, reason: Teleport delivering", GetRPName(playerid), SERVER_BOT);
		    BanPlayer(playerid, SERVER_BOT, "Teleport delivering");
		}
    }

	products = (GetJobLevel(playerid, JOB_COURIER) * 5) + 5;

	if(pData[playerid][pShipment] == BUSINESS_STORE) {
		amount = (GetJobLevel(playerid, JOB_COURIER) * 650) + 270;
  	} else if(pData[playerid][pShipment] == BUSINESS_GUNSHOP) {
	  	amount = (GetJobLevel(playerid, JOB_COURIER) * 650) + 325;
    } else if(pData[playerid][pShipment] == BUSINESS_CLOTHES) {
		amount = (GetJobLevel(playerid, JOB_COURIER) * 650) + 345;
  	} else if(pData[playerid][pShipment] == BUSINESS_RESTAURANT) {
	  	amount = (GetJobLevel(playerid, JOB_COURIER) * 650) + 390;
 	} else if(pData[playerid][pShipment] == BUSINESS_BARCLUB) {
	 	amount = (GetJobLevel(playerid, JOB_COURIER) * 650) + 240;
	}
	/*amount += floatround(GetPlayerDistanceFromPoint(playerid, -63.4372, -1121.4932, 1.1103) / 2.0);

	SM(playerid, COLOR_AQUA, "** You have earned "SVRCLR"$%i{33CCFF}  for delivering %i products.", amount, products);
	GivePlayerCash(playerid, amount);*/
	if(DoubleSalary)
	{
	    new string[128];
		new double_pay = amount * 2;
		format(string, sizeof(string), "[DOUBLE-SALARY] You earned $%s instead of $%s since the Double Salary is turned on.", number_format(double_pay), number_format(amount));
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		GivePlayerCash(playerid, double_pay);
		format(string, sizeof(string), "~g~+$%i", double_pay);
		GameTextForPlayer(playerid, string, 5000, 1);
	}
	else
	{
	    new string[128];
		format(string, sizeof(string), "  You have earned $%i...", amount);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		GivePlayerCash(playerid, amount);
	}
	if(pData[playerid][pIllegalCargo] == ILLEGAL_DRUGS)
	{
		switch(random(4))
		{
	    	case 0:
			{
				SCM(playerid, COLOR_TEAL, "You have received "WHITE"5 grams of pot"TEAL" as a reward for delivering illegal drugs.");
				pData[playerid][pPot] += 5;
			}
	    	case 1:
			{
				SCM(playerid, COLOR_TEAL, "You have received "WHITE"5 grams of meth"TEAL" as a reward for delivering illegal drugs.");
    			pData[playerid][pMeth] += 5;
			}
	    	case 2:
	    	{
				SCM(playerid, COLOR_TEAL, "You have received "WHITE"5 grams of crack"TEAL" as a reward for delivering illegal drugs.");
   				pData[playerid][pCrack] += 5;
			}
	    	case 3:
			{
				SCM(playerid, COLOR_TEAL, "SPECIAL REWARD: You have received "WHITE"5 grams of crack, pot & meth"TEAL" for delivering the drugs.");
   				pData[playerid][pCrack] += 5;
      			pData[playerid][pMeth] += 5;
      			pData[playerid][pPot] += 5;
      		}
		}
	}
	if(pData[playerid][pIllegalCargo] == ILLEGAL_MATS)
	{
		switch(random(3))
		{
	    	case 0:
			{
				SCM(playerid, COLOR_TEAL, "You have received "WHITE"300 materials"TEAL" as a reward for delivering illegal materials.");
    			pData[playerid][pMaterials] += 300;
			}
	    	case 1:
			{
				SCM(playerid, COLOR_TEAL, "You have received "WHITE"250 materials"TEAL" as a reward for delivering illegal materials.");
    			pData[playerid][pMaterials] += 250;
			}
		}
	}
	if(pData[playerid][pIllegalCargo] == ILLEGAL_GUNS)
	{
		switch(random(20))
		{
	    	case 4:
			{
				SCM(playerid, COLOR_TEAL, "SPECIAL REWARD:"WHITE" Silenced Pistol");
    			GiveWeapon(playerid, 23);
			}
  			case 2:
			{
				SCM(playerid, COLOR_TEAL, "SPECIAL REWARD:"WHITE" Bat");
    			GiveWeapon(playerid, 5);
			}
  			case 5:
			{
				SCM(playerid, COLOR_TEAL, "SPECIAL REWARD:"WHITE" TEC 9");
    			GiveWeapon(playerid, 32);
			} 
 			case 7:
			{
				SCM(playerid, COLOR_TEAL, "SPECIAL REWARD:"WHITE" Pool Cue");
    			GiveWeapon(playerid, 7);
			} 	
			default:
			{ 
				SCM(playerid, COLOR_TEAL, "SPECIAL REWARD:"WHITE" Colt 45");
    			GiveWeapon(playerid, 22);
			}
		}
	}
	DestroyDynamicObject(VehicleObject[GetPlayerVehicleID(playerid)]);
	VehicleGoods[GetPlayerVehicleID(playerid)] = -1;
	VehicleObject[GetPlayerVehicleID(playerid)] = INVALID_OBJECT_ID;
	BusinessInfo[businessid][bProducts] += products;
	pData[playerid][pShipment] = -1;
	pData[playerid][pCourierCooldown] = 120;
	pData[playerid][pIllegalCargo] = -1;
	PlayerHasCrate[playerid] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET products = %i WHERE id = %i", BusinessInfo[businessid][bProducts], BusinessInfo[businessid][bID]);
	mysql_tquery(connectionID, queryBuffer);

    IncreaseJobSkill(playerid, JOB_COURIER);

	return 1;
}

CMD:load(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid = GetNearbyVehicle(playerid);
	if(!PlayerHasJob(playerid, JOB_LUMBERJACK))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you are not a Courier.");
	}
	new i = GetNearbyVehicle(playerid);

	if((IsCourierVehicle(i) && IsVehicleOccupied(i)) || !IsCourierVehicle(i))
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" You are not near the Lumber Vehicle (that is not occupied).");
	
		
	if (VehicleGoods[vehicleid] != -1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "This vehicle is already loaded. Please find another vehicle.");
	}
	if(Lumberedx[playerid] <= 0)
	{
		return SendClientMessage(playerid, COLOR_GREY, "[JOB ERROR]: YOU MUST CHOP A WOOD BEFORE YOU LOAD IT");
	}
	if(IsPlayerInDynamicArea(playerid, loadwoodarea))
	{
		VehicleGoods[vehicleid] = Lumbered[playerid];
		VehicleObject[vehicleid] = CreateDynamicObject(1463, 0.0, 0.0, 90.0, 0.0, 0.0, 0.0);
		AttachDynamicObjectToVehicle(VehicleObject[vehicleid], vehicleid, 0.0, -1.5, 0.0, 0.0, 0.0, 0.0);
		ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		RemovePlayerAttachedObject(playerid, 9);
		PlayerHasCrate[playerid] = 0;
		Lumberedx[playerid] = 0;
		pData[playerid][pCP] = CHECKPOINT_LUMBERJACKRUN;
		SetPlayerCheckpoint(playerid,-142.6344,-91.9420,3.1609, 3);
		
	}	
	else 
	{
		return SendClientMessage(playerid, COLOR_GREY, "You can't load a wood here goto loading area");
	
	}
	return 1;
}

CMD:loadtruck(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!PlayerHasJob(playerid, JOB_COURIER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you are not a Trucker.");
	}
	if(pData[playerid][pCourierCooldown] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to wait %i more seconds before you can load another delivery.", pData[playerid][pCourierCooldown]);
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, -1, "You must be on foot to use this command!");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 2460.9790,-2119.2590,13.5530))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not at the loading dock.");
	}
	if(pData[playerid][pShipment] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have a shipment loaded already. You need to deliver it first.");
	}

	ShowPlayerDialog(playerid, DIALOG_PICKLOAD, DIALOG_STYLE_LIST, "Choose the load you want to deliver.", "Grocery supplies\nAmmunition\nClothing items\nFood & drinks\nBeverages\nIllegal Weapons\nIllegal Materials\nIllegal Drugs", "Select", "Cancel");
	return 1;
}

CMD:loadcargo(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid = GetNearbyVehicle(playerid);
	if(!PlayerHasJob(playerid, JOB_COURIER))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you are not a Courier.");
	}
	new i = GetNearbyVehicle(playerid);

	if((IsCourierVehicle1(i) && IsVehicleOccupied(i)) || !IsCourierVehicle1(i))
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" You are not near the Courier Vehicle (that is not occupied).");

	if (VehicleGoods[vehicleid] != -1)
	{
		return SendClientMessage(playerid, COLOR_GREY, "This vehicle is already loaded. Please find another vehicle.");
	}
	if(PlayerHasCrate[playerid] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You have a shipment loaded already. You need to deliver it first.");
	}
	
	if(IsPlayerInDynamicArea(playerid, loadarea))
	{
		VehicleGoods[vehicleid] = pData[playerid][pShipment];
		VehicleObject[vehicleid] = CreateDynamicObject(1220, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		AttachDynamicObjectToVehicle(VehicleObject[vehicleid], vehicleid, 0.0, -1.5, 0.0, 0.0, 0.0, 0.0);
		ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		RemovePlayerAttachedObject(playerid, 9);
		PlayerHasCrate[playerid] = 0;
		switch(pData[playerid][pShipment])
		{
		    case 0:
		    {
		        SCM(playerid, COLOR_AQUA, "You selected {FF6347}Grocery supplies{33CCFF}. Use /deliver at any Supermarket to drop off this shipment.");

	        }
	        case 1:
		    {
		        SCM(playerid, COLOR_AQUA, "You selected {FF6347}Ammunition{33CCFF}. Use /deliver at any Gun Shop to drop off this shipment.");

	        }
	        case 2:
		    {
		        SCM(playerid, COLOR_AQUA, "You selected {FF6347}Clothing items{33CCFF}. Use /deliver at any Clothes Shop to drop off this shipment.");

	        }
	        case 3:
		    {
		        SCM(playerid, COLOR_AQUA, "You selected {FF6347}Food & drinks{33CCFF}. Use /deliver at any Restaurant to drop off this shipment.");

	        }
	        case 4:
		    {
		        SCM(playerid, COLOR_AQUA, "You selected {FF6347}Beverages{33CCFF}. Use /deliver at any Club/Bar to drop off this shipment.");

	        }
	        case 5:
	        {
		        SCM(playerid, COLOR_AQUA, "You selected {FF6347}Illegal Weapons{33CCFF}. Use /deliver at any Gun Shop to drop off this shipment.");
        		SCM(playerid, COLOR_RED, "NOTE:"WHITE" You are delivering an illegal cargo. Watch out for the cops!");

			}
			case 6:
			{
    			SCM(playerid, COLOR_AQUA, "You selected {FF6347}Illegal Materials{33CCFF}. Use /deliver at any Gun Shop to drop off this shipment.");
        		SCM(playerid, COLOR_RED, "NOTE:"WHITE" You are delivering an illegal cargo. Watch out for the cops!");

			}
			case 7:
			{
    			SCM(playerid, COLOR_AQUA, "You selected {FF6347}Illegal Drugs{33CCFF}. Use /deliver at any Club/Bar to drop off this shipment.");
        		SCM(playerid, COLOR_RED, "NOTE:"WHITE" You are delivering an illegal cargo. Watch out for the cops!");

			}
		}
	}
	else 
	{

		return SendClientMessage(playerid, COLOR_GREY, "You can't load a cargo here goto loading area");
	}
	return 1;
}

CMD:skill(playerid, params[]) return callcmd::skills(playerid, params);
CMD:skills(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new string[1024], jobstring1[64], jobstring2[64], jobstring3[64], jobstring4[64],
	jobstring6[64], jobstring7[64], jobstring8[64];
	if(GetJobLevel(playerid, JOB_COURIER) < 5)
	{
		if(pData[playerid][pCourierSkill] < 99) {
			format(jobstring1, sizeof(jobstring1), "Deliver %i more shipments to level up.", 99 - pData[playerid][pCourierSkill]);
		} else if(pData[playerid][pCourierSkill] < 199) {
			format(jobstring1, sizeof(jobstring1), "Deliver %i more shipments to level up.", 199 - pData[playerid][pCourierSkill]);
		} else if(pData[playerid][pCourierSkill] < 299) {
			format(jobstring1, sizeof(jobstring1), "Deliver %i more shipments to level up.", 299 - pData[playerid][pCourierSkill]);
		} else if(pData[playerid][pCourierSkill] < 399) {
			format(jobstring1, sizeof(jobstring1), "Deliver %i more shipments to level up.", 399 - pData[playerid][pCourierSkill]);
		}
	}
	else
	{
		format(jobstring1, sizeof(jobstring1), "You have reached the maximum skill level for this job.");
	}

	if(GetJobLevel(playerid, JOB_FISHERMAN) < 5)
	{
		if(pData[playerid][pFishingSkill] < 99) {
			format(jobstring2, sizeof(jobstring2), "Catch %i more fish to level up.", 99 - pData[playerid][pFishingSkill]);
		} else if(pData[playerid][pFishingSkill] < 199) {
			format(jobstring2, sizeof(jobstring2), "Catch %i more fish to level up.", 199 - pData[playerid][pFishingSkill]);
		} else if(pData[playerid][pFishingSkill] < 299) {
			format(jobstring2, sizeof(jobstring2), "Catch %i more fish to level up.", 299 - pData[playerid][pFishingSkill]);
		} else if(pData[playerid][pFishingSkill] < 399) {
			format(jobstring2, sizeof(jobstring2), "Catch %i more fish to level up.", 399 - pData[playerid][pFishingSkill]);
		}
	}
	else
	{
		format(jobstring2, sizeof(jobstring2), "You have reached the maximum skill level for this job.");
	}

	if(GetJobLevel(playerid, JOB_BODYGUARD) < 5)
	{
		if(pData[playerid][pGuardSkill] < 99) {
			format(jobstring3, sizeof(jobstring3), "Sell %i more vests to level up.", 99 - pData[playerid][pGuardSkill]);
		} else if(pData[playerid][pGuardSkill] < 199) {
			format(jobstring3, sizeof(jobstring3), "Sell %i more vests to level up.", 199 - pData[playerid][pGuardSkill]);
		} else if(pData[playerid][pGuardSkill] < 299) {
			format(jobstring3, sizeof(jobstring3), "Sell %i more vests to level up.", 299 - pData[playerid][pGuardSkill]);
		} else if(pData[playerid][pGuardSkill] < 399) {
			format(jobstring3, sizeof(jobstring3), "Sell %i more vests to level up.", 399 - pData[playerid][pGuardSkill]);
		}
	}
	else
	{
		format(jobstring3, sizeof(jobstring3),"You have reached the maximum skill level for this job.");
	}

	if(GetJobLevel(playerid, JOB_ARMSDEALER) < 5)
	{
		if(pData[playerid][pWeaponSkill] < 99) {
			format(jobstring4, sizeof(jobstring4), "Sell %i more weapons to level up.", 99 - pData[playerid][pWeaponSkill]);
		} else if(pData[playerid][pWeaponSkill] < 199) {
			format(jobstring4, sizeof(jobstring4), "Sell %i more weapons to level up.", 199 - pData[playerid][pWeaponSkill]);
		} else if(pData[playerid][pWeaponSkill] < 299) {
			format(jobstring4, sizeof(jobstring4), "Sell %i more weapons to level up.", 299 - pData[playerid][pWeaponSkill]);
		} else if(pData[playerid][pWeaponSkill] < 399) {
			format(jobstring4, sizeof(jobstring4), "Sell %i more weapons to level up.", 399 - pData[playerid][pWeaponSkill]);
		}
	}
	else
	{
		format(jobstring4, sizeof(jobstring4), "You have reached the maximum skill level for this job.");
	}

	if(GetJobLevel(playerid, JOB_DRUGDEALER) < 5)
	{
		if(pData[playerid][pSmugglerSkill] < 99) {
			format(jobstring6, sizeof(jobstring6), "Smuggle %i more packages to level up.", 99 - pData[playerid][pSmugglerSkill]);
		} else if(pData[playerid][pSmugglerSkill] < 199) {
			format(jobstring6, sizeof(jobstring6), "Smuggle %i more packages to level up.", 199 - pData[playerid][pSmugglerSkill]);
		} else if(pData[playerid][pSmugglerSkill] < 299) {
			format(jobstring6, sizeof(jobstring6), "Smuggle %i more packages to level up.", 299 - pData[playerid][pSmugglerSkill]);
		} else if(pData[playerid][pSmugglerSkill] < 399) {
			format(jobstring6, sizeof(jobstring6), "Smuggle %i more packages to level up.", 399 - pData[playerid][pSmugglerSkill]);
		}
	}
	else
	{
		format(jobstring6, sizeof(jobstring6), "You have reached the maximum skill level for this job.");
	}

	if(GetJobLevel(playerid, JOB_LAWYER) < 5)
	{
		if(pData[playerid][pLawyerSkill] < 99) {
			format(jobstring7, sizeof(jobstring7), "Defend %i more clients to level up.", 99 - pData[playerid][pLawyerSkill]);
		} else if(pData[playerid][pLawyerSkill] < 199) {
			format(jobstring7, sizeof(jobstring7), "Defend %i more clients to level up.", 199 - pData[playerid][pLawyerSkill]);
		} else if(pData[playerid][pLawyerSkill] < 299) {
			format(jobstring7, sizeof(jobstring7), "Defend %i more clients to level up.", 299 - pData[playerid][pLawyerSkill]);
		} else if(pData[playerid][pLawyerSkill] < 399) {
			format(jobstring7, sizeof(jobstring7), "Defend %i more clients to level up.", 399 - pData[playerid][pLawyerSkill]);
		}
	}
	else
	{
		format(jobstring7, sizeof(jobstring7), "You have reached the maximum skill level for this job.");
	}


	if(GetJobLevel(playerid, JOB_DETECTIVE) < 5)
	{
		if(pData[playerid][pDetectiveSkill] < 99) {
			format(jobstring8, sizeof(jobstring8), "Find %i more people to level up.", 99 - pData[playerid][pDetectiveSkill]);
		} else if(pData[playerid][pDetectiveSkill] < 199) {
			format(jobstring8, sizeof(jobstring8), "Find %i more people to level up.", 199 - pData[playerid][pDetectiveSkill]);
		} else if(pData[playerid][pDetectiveSkill] < 299) {
			format(jobstring8, sizeof(jobstring8), "You need to find %i more people to level up.", 299 - pData[playerid][pDetectiveSkill]);
		} else if(pData[playerid][pDetectiveSkill] < 399) {
			format(jobstring8, sizeof(jobstring8), "Find %i more people to level up.", 399 - pData[playerid][pDetectiveSkill]);
		}
	}
	else
	{
		format(jobstring8, sizeof(jobstring8), "You have reached the maximum skill level for this job.");
	}


	format(string, sizeof(string), "Job Courier\t{ffff00}Level: %d\t%s\n" \
									"Job Lawyer\t{ffff00}Level: %d\t%s\n" \
									"Job Detective\t{ffff00}Level: %d\t%s\n" \
									"Job Fisherman\t{ffff00}Level: %d\t%s\n" \
									"Job Arms Dealer\t{ffff00}Level: %d\t%s\n" \
									"Job Drug Dealer\t{ffff00}Level: %d\t%s\n" \
									"Job Bodyguard\t{ffff00}Level: %d\t%s\n",
									GetJobLevel(playerid, JOB_COURIER), jobstring1,
									GetJobLevel(playerid, JOB_LAWYER), jobstring7,
									GetJobLevel(playerid, JOB_DETECTIVE), jobstring8,
									GetJobLevel(playerid, JOB_FISHERMAN), jobstring2,
									GetJobLevel(playerid, JOB_ARMSDEALER), jobstring4,
									GetJobLevel(playerid, JOB_DRUGDEALER), jobstring6,
									GetJobLevel(playerid, JOB_BODYGUARD), jobstring3);
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, ""SVRCLR"Job Skills", string, "Close", "");
	return 1;
}

CMD:fish(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!PlayerHasJob(playerid, JOB_FISHERMAN))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Fisherman.");
	}
	if(!IsPlayerAtFishingPlace(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not close to anywhere where you can fish.");
	}
	if(!pData[playerid][pFishingRod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a fishing rod. You need a fishing rod to fish!");
	}
	if(pData[playerid][pFishTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are fishing already. Wait for your line to be reeled in first.");
	}
	if(pData[playerid][pFishWeight] >= 150)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have too much fish and can't fish any longer.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be onfoot in order to use this command.");
	}

	//ApplyAnimation(playerid, "SAMP", "FishingIdle", 4.1, 0, 0, 0, 1, 0, 1);

	SetPlayerAttachedObject(playerid, 9, 18632, 6, 0.112999, 0.024000, 0.000000, -172.999954, 28.499994, 0.000000);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s reels the line of their fishing rod into the water.", GetRPName(playerid));
	GameTextForPlayer(playerid, "~w~Fishing...", 6000, 3);

	pData[playerid][pFishTime] = 6;

	if(pData[playerid][pFishingBait] > 0)
	{
	    pData[playerid][pFishingBait]--;
	    pData[playerid][pUsedBait] = 1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishingbait = fishingbait - 1 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else
	{
	    pData[playerid][pUsedBait] = 0;
	}

	return 1;
}

CMD:sellfish(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new businessid;

	if(!PlayerHasJob(playerid, JOB_FISHERMAN))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Fisherman.");
	}
	if((businessid = GetInsideBusiness(playerid)) == -1 || BusinessInfo[businessid][bType] != BUSINESS_STORE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any Supermarket business.");
	}
	if(!pData[playerid][pFishWeight])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no fish which you can sell.");
	}

	new amount = (pData[playerid][pFishWeight]) + random(250);

	SM(playerid, COLOR_AQUA, "** You earned $%i  for selling %i kg of fish.", amount, pData[playerid][pFishWeight]);
	GivePlayerCash(playerid, amount);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fishweight = 0 WHERE uid = %i", pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	pData[playerid][pFishWeight] = 0;
	return 1;
}

CMD:myfish(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(!PlayerHasJob(playerid, JOB_FISHERMAN))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Fisherman.");
	}

	SCM(playerid, COLOR_GREEN, "My Fish:");
	SM(playerid, COLOR_GREY2, "You have %i/%i kg of fish in your inventory.", pData[playerid][pFishWeight], GetJobLevel(playerid, JOB_FISHERMAN) * 50);
	return 1;
}

CMD:myvoucher(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new string[1536] = "No.\tDescription\tQuantity", title[64];

    format(string, sizeof(string), "%s\n1.\tCar Voucher.\t"TEAL"%i{FFFFFF}", string, pData[playerid][pVoucher1]);
    format(string, sizeof(string), "%s\n2.\tGun Voucher.\t"TEAL"%i{FFFFFF}", string, pData[playerid][pVoucher2]);
    format(string, sizeof(string), "%s\n3.\tDiamond VIP Voucher.\t"TEAL"%i{FFFFFF}", string, pData[playerid][pVoucher3]);
    format(string, sizeof(string), "%s\n4.\tSilver VIP Voucher.\t"TEAL"%i{FFFFFF}", string, pData[playerid][pVoucher4]);
    format(string, sizeof(string), "%s\n5.\tBronze VIP Voucher.\t"TEAL"%i{FFFFFF}", string, pData[playerid][pVoucher5]);


	format(title, sizeof(title), "Voucher System ");
	ShowPlayerDialog(playerid, DIALOG_VOCUHER, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Redeem", "Cancel");
	return 1;
}

CMD:sellvest11(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, amount;

	if(!PlayerHasJob(playerid, JOB_BODYGUARD))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Bodyguard.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellvest [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 100 || amount > 500)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount specified must range between $100 and $500.");
	}
	if(gettime() - pData[playerid][pLastSell] < 70)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 10 seconds. Please wait %i more seconds.", 70 - (gettime() - pData[playerid][pLastSell]));
	}
	if(GetNearbyTurf(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "[ERROR]: You can't do this right now");
	}
	pData[playerid][pLastSell] = gettime();
	pData[targetid][pVestOffer] = playerid;
	pData[targetid][pVestPrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you a vest with 50 points of armor for $%i (/accept vest).", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You offered %s a vest with 50 points of armor for $%i.", GetRPName(targetid), amount);
	return 1;
}

CMD:getmaterials(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1421.6913, -1318.4719, 13.5547) && !IsPlayerInRangeOfPoint(playerid, 3.0, 2393.4885, -2008.5726, 13.3467))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any materials pickup.");
	}
	if(pData[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must cancel your active checkpoint first. /cancelcp to cancel it.");
	}
	if(pData[playerid][pCash] < 2000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need at least $2000 in cash to smuggle materials.");
	}
    if(pData[playerid][pMaterials] + 150 > GetPlayerCapacity(CAPACITY_MATERIALS))
	{
	    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
	}

	pData[playerid][pCP] = CHECKPOINT_MATS;
	pData[playerid][pSmuggleTime] = gettime();

	GivePlayerCash(playerid, -2000);
	SCM(playerid, COLOR_AQUA, "** You paid $2000 for a load of materials. Smuggle them to the depot to collect them.");

	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1421.6913, -1318.4719, 13.5547))
	{
	    AddPointMoney(POINT_MATPICKUP1, 2000);
		SetPlayerCheckpoint(playerid, 2173.2129, -2264.1548, 13.3467, 3.0);
		pData[playerid][pSmuggleMats] = 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2393.4885, -2008.5726, 13.3467))
	{
	    AddPointMoney(POINT_MATPICKUP2, 2000);
		SetPlayerCheckpoint(playerid, 2288.0918, -1105.6555, 37.9766, 3.0);
		pData[playerid][pSmuggleMats] = 2;
	}

	return 1;
}


CMD:sellgun(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, weapon[10], price;
	if(pData[playerid][pWeaponRestricted] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are either weapon restricted or you played less than two playing hours.");
    }
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell weapons from within a vehicle.");
	}
	if(gettime() - pData[playerid][pLastSell] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - pData[playerid][pLastSell]));
	}
	if(sscanf(params, "us[10]I(0)", targetid, weapon, price))
	{
		SM(playerid, SERVER_COLOR, "Available Craftable Weapons:");

		if(GetJobLevel(playerid, JOB_ARMSDEALER) >= 1)
		{
		    SCM(playerid, COLOR_YELLOW, "Level 1:"WHITE" Bat [1000], Shovel [1000], Golfclub [1000], Poolcue [1000]");
			SCM(playerid, COLOR_YELLOW, "Level 1:"WHITE" Katana [1000] Cane [1000] Knuckles [1000]");
		}
		if(GetJobLevel(playerid, JOB_ARMSDEALER) >= 2)
		{
			SCM(playerid, COLOR_YELLOW, "Level 2:"WHITE" 9mm [2000], Sdpistol [2000], Shotgun [2000]");
		}
		if(GetJobLevel(playerid, JOB_ARMSDEALER) >= 3)
		{
			SCM(playerid, COLOR_YELLOW, "Level 3:"WHITE" MP5 [3000], Uzi [3000], Tec9 [3000]");
		}
		if(GetJobLevel(playerid, JOB_ARMSDEALER) >= 4)
		{
			SCM(playerid, COLOR_YELLOW, "Level 4:"WHITE" Deagle[5000] , Rifle[5000]");
		}
		if(GetJobLevel(playerid, JOB_ARMSDEALER) >= 5)
		{
			SCM(playerid, COLOR_YELLOW, "Level 5:"WHITE" AK47 [7000] SPAS12[7000]");
		}
		SCM(playerid, COLOR_SYNTAX, "Usage: /sellgun [playerid] [name] [price]");
		return 1;
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(pData[targetid][pWeaponRestricted] > 0 || pData[targetid][pLevel] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not allowed to grab a gun when you are weapon restricted or level 1.");
	}	
	
	if(gettime() - pData[playerid][pLastSell] < 100)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 100 seconds. Please wait %i more seconds.", 100 - (gettime() - pData[playerid][pLastSell]));
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use this command at the moment.");
	}
	if(price < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $0.");
	}

    if(!strcmp(weapon, "bat", true))
	{
	    if(pData[playerid][pMaterials] < 1000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 5))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 5);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    pData[playerid][pLastSell] = gettime();
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 5;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a baseball bat for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a baseball bat for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "shovel", true))
	{
	    if(pData[playerid][pMaterials] < 1000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 6))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 6);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    pData[playerid][pLastSell] = gettime();
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 6;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a shovel for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a shovel for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "knuckles", true))
	{
	    if(pData[playerid][pMaterials] < 1000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 1))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 1);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    pData[playerid][pLastSell] = gettime();
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 1;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you knuckles for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s knuckles for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "golfclub", true))
	{
	    if(pData[playerid][pMaterials] < 1000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 2))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 2);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    pData[playerid][pLastSell] = gettime();
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 2;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a golf club for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a golf club for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "poolcue", true))
	{
	    if(pData[playerid][pMaterials] < 1000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 7))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 7);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    pData[playerid][pLastSell] = gettime();
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 7;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a pool cue for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a pool cue for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "katana", true))
	{
	    if(pData[playerid][pMaterials] < 1000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 8))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 8);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    pData[playerid][pLastSell] = gettime();
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 8;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a katana for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a katana for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "cane", true))
	{
	    if(pData[playerid][pMaterials] < 1000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 15))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 15);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    pData[playerid][pLastSell] = gettime();
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 15;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a cane for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a cane for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "9mm", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(pData[playerid][pMaterials] < 2000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 22))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 22);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
		    pData[playerid][pLastSell] = gettime();
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 22;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a 9mm for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a 9mm for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "sdpistol", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(pData[playerid][pMaterials] < 2000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 23))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 23);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 23;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a silenced pistol for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a silenced pistol for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "shotgun", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(pData[playerid][pMaterials] < 2000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 25))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 25);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 25;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a shotgun for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a shotgun for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "mp5", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 3)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(pData[playerid][pMaterials] < 3000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 29))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 29);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 29;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you an MP5 for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s an MP5 for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "deagle", true))
	{
	    //if(GetJobLevel(playerid, JOB_ARMSDEALER) < 4)
	    //{
	    //    return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		//}
	    //if(pData[playerid][pMaterials] < 5000)
	    //{
	    //    return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		//}
		//if(PlayerHasWeapon(targetid, 24))
		//{
		//    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		//}
		//
		//if(targetid == playerid)
		//{
		//    SellWeapon(playerid, targetid, 24);
		//}
		//else if(price < 1)
		//{
		//    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		//}
		//else
		//{
   		//	pData[targetid][pSellOffer] = playerid;
   		//	pData[targetid][pSellType] = ITEM_SELLGUN;
   		//	pData[targetid][pSellExtra] = 24;
   		//	pData[targetid][pSellPrice] = price;
		//
   		//	SM(targetid, COLOR_AQUA, "** %s offered to sell you a Desert Eagle for $%i. (/accept weapon)", GetRPName(playerid), price);
   		//	SM(playerid, COLOR_AQUA, "** You have offered to sell %s a Desert Eagle for $%i.", GetRPName(targetid), price);
		//}
		SM(playerid, COLOR_AQUA, "DISABLE GUN.");
	}
	else if(!strcmp(weapon, "rifle", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 4)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(pData[playerid][pMaterials] < 5000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 33))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 33);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 24;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a Rifle for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a Rifle for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "tec9", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 3)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(pData[playerid][pMaterials] < 3000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 32))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 32);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 32;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you a Tec-9 for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s a Tec-9 for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "ak47", true))
	{
	    if(GetJobLevel(playerid, JOB_ARMSDEALER) < 5)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		}
	    if(pData[playerid][pMaterials] < 7000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		}
		if(PlayerHasWeapon(targetid, 30))
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		}

		if(targetid == playerid)
		{
		    SellWeapon(playerid, targetid, 30);
		}
		else if(price < 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		}
		else
		{
   			pData[targetid][pSellOffer] = playerid;
   			pData[targetid][pSellType] = ITEM_SELLGUN;
   			pData[targetid][pSellExtra] = 30;
   			pData[targetid][pSellPrice] = price;

   			SM(targetid, COLOR_AQUA, "** %s offered to sell you an AK-47 for $%i. (/accept weapon)", GetRPName(playerid), price);
   			SM(playerid, COLOR_AQUA, "** You have offered to sell %s an AK-47 for $%i.", GetRPName(targetid), price);
		}
	}
	else if(!strcmp(weapon, "spas12", true))
	{
	    //if(GetJobLevel(playerid, JOB_ARMSDEALER) < 5)
	    //{
	    //    return SCM(playerid, COLOR_SYNTAX, "Your skill level is not high enough to craft this weapon.");
		//}
	    //if(pData[playerid][pMaterials] < 7000)
	    //{
	    //    return SCM(playerid, COLOR_SYNTAX, "You don't have enough materials to craft this weapon.");
		//}
		//if(PlayerHasWeapon(targetid, 27))
		//{
		//    return SCM(playerid, COLOR_SYNTAX, "That player has this weapon already.");
		//}
		//
		//if(targetid == playerid)
		//{
		//    SellWeapon(playerid, targetid, 27);
		//}
		//else if(price < 1)
		//{
		//    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $1.");
		//}
		//else
		//{
   		//	pData[targetid][pSellOffer] = playerid;
   		//	pData[targetid][pSellType] = ITEM_SELLGUN;
   		//	pData[targetid][pSellExtra] = 27;
   		//	pData[targetid][pSellPrice] = price;
		//
   		//	SM(targetid, COLOR_AQUA, "** %s offered to sell you an SPAS-12 for $%i. (/accept weapon)", GetRPName(playerid), price);
   		//	SM(playerid, COLOR_AQUA, "** You have offered to sell %s an SPAS-12 for $%i.", GetRPName(targetid), price);
		//}
		SM(playerid, COLOR_AQUA, "DISABLE GUN.");
	}

	return 1;
}



CMD:tow(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	{
		return SCM(playerid, COLOR_SYNTAX, "You must be in a tow truck to use this command.");
	}
 	if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC) && !IsLawEnforcement(playerid))
 	{
		return SCM(playerid, COLOR_SYNTAX, "You must be a Mechanic or a Law Enforcement Officer to use this command.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

	new Float:pX, Float:pY, Float:pZ;
    GetPlayerPos(playerid, pX, pY, pZ);
    new Float:vX, Float:vY, Float:vZ;
    new Found = 0;
    new vid = 0;
    while ((vid<MAX_VEHICLES) && (!Found)) {
        vid++;
        GetVehiclePos(vid, vX, vY, vZ);
        if ((floatabs(pX - vX)<7.0) && (floatabs(pY - vY)<7.0) && (floatabs(pZ - vZ)<7.0) && (vid != GetPlayerVehicleID(playerid))) {
            Found = 1;
            if (IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) {
                DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
            }
            AttachTrailerToVehicle(vid, GetPlayerVehicleID(playerid));
            //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s lowers their tow hook, attaching it to the vehicle.", GetRPName(playerid));
            //SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s raises the tow hook, locking the vehicle in place..", GetRPName(playerid));
        }
    }
    if (!Found) {
        SCM(playerid, COLOR_SYNTAX, "There is no vehicle in range that you can tow.");
    }
    return 1;
}


CMD:untow(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if((FactionInfo[pData[playerid][pFaction]][fType] != FACTION_MECHANIC) && !IsLawEnforcement(playerid))
 	{
		return SCM(playerid, COLOR_SYNTAX, "You must be a Mechanic or a Law Enforcement Officer to use this command.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	{
		return SCM(playerid, COLOR_SYNTAX, "You must be in a tow truck to use this command.");
	}
	if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
	{
		SCM(playerid, COLOR_SYNTAX, "You are not towing a vehicle.");
	}
	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s lowers their tow hook, detaching it from the vehicle.", GetRPName(playerid));
    return 1;
}

CMD:fill(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::refuel(playerid, params);
}

CMD:refuel(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsPlayerAtFuelStation(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be at a gas station or inside of a garage.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any vehicle.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine and can't be refilled.");
	}
	if(vehicleFuel[vehicleid] >= 100)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The fuel tank in this vehicle is already full.");
	}
	if(pData[playerid][pCash] < (100 - vehicleFuel[vehicleid]) * 5)
	{
	    return SM(playerid, COLOR_SYNTAX, "You don't have enough cash. It will cost you at least $%i.", (100 - vehicleFuel[vehicleid]) * 5);
	}

	if(pData[playerid][pRefuel] != INVALID_VEHICLE_ID)
	{
	    GivePlayerCash(playerid, -pData[playerid][pRefuelAmount]);
        SM(playerid, COLOR_AQUA, "** You've refilled your vehicle's gas tank for $%i.", pData[playerid][pRefuelAmount]);

        pData[playerid][pRefuel] = INVALID_VEHICLE_ID;
        pData[playerid][pRefuelAmount] = 0;
	}
	else
	{
	    if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	    {
         	return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before proceeding.");
	    }

		pData[playerid][pRefuel] = vehicleid;
		pData[playerid][pRefuelAmount] = 0;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s begins to refuel their vehicle's gas tank.", GetRPName(playerid));
		SM(playerid, COLOR_WHITE, "** This will take about %i seconds. You will be notified once completed.", 100 - vehicleFuel[vehicleid]);
	}

	return 1;
}
CMD:bank(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
 	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1116.7861,1705.7772,-35.0973))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(pData[playerid][pToggleAtm] == 0)
	{
		pData[playerid][pToggleAtm] = 1;
		new name[32];	
		format(name, sizeof(name), "%s", GetRPName(playerid));
		TextDrawSetString(BANKTD[18], name);
 		for(new g = 0; g < 7; g++) {
			TextDrawShowForPlayer(playerid, BANKTD[g]);
		}
		SelectTextDraw(playerid, COLOR_LIGHTBLUE);
		
	}
	else
	{
		pData[playerid][pToggleAtm] = 0;
		for(new d = 0; d < 27; d++) 
		{
			TextDrawHideForPlayer(playerid, BANKTD[d]);
		}
 		PlayerTextDrawHide(playerid, PlayerCashTD[playerid][0]);
		CancelSelectTextDraw(playerid);
	}     	
 	return 1;
}

/*CMD:rt(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::rsms(playerid, params);
}*/

//CMD:rs(playerid, params[])
//{
	//return callcmd::rsms(playerid, params);
//}

CMD:rsms(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /rsms [text]");
	}
	if(pData[playerid][pTextFrom] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't received a text by anyone since you joined the server.");
	}
    if(pData[pData[playerid][pTextFrom]][pJailType] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "That player is currently imprisoned and cannot use their phone.");
    }
    if(pData[pData[playerid][pTextFrom]][pTogglePhone])
    {
        return SCM(playerid, COLOR_SYNTAX, "That player has their mobile phone switched off.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}

	pData[pData[playerid][pTextFrom]][pTextFrom] = playerid;
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out a cellphone and sends a message.", GetRPName(playerid));

    SM(pData[playerid][pTextFrom], COLOR_YELLOW, "** SMS from %s (%i): %s **", GetRPName(playerid), pData[playerid][pPhone], params);
    SM(playerid, COLOR_YELLOW, "** SMS to %s (%i): %s **", GetRPName(pData[playerid][pTextFrom]), pData[pData[playerid][pTextFrom]][pPhone], params);

    GivePlayerCash(playerid, -1);
    GameTextForPlayer(playerid, "~w~Text sent!~n~~r~-$1", 5000, 1);
    return 1;
}

CMD:t(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::sms(playerid, params);
}
/*
CMD:sms(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new number, msg[128];
	if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(sscanf(params, "is[128]", number, msg))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sms");
	}
	if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
	SCM(playerid, COLOR_SYNTAX, "/phone to reply/text someone");
	return 1;
}
*/
CMD:sms(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new number, msg[128];
	if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(sscanf(params, "is[128]", number, msg))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sms [number] [message]");
	}
	if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
	if(pData[playerid][pTogglePhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use your mobile phone right now as you have it toggled.");
	}
	if(number == 0 || number == pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid number.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pPhone] == number)
	    {
	        if(pData[i][pJailType] > 0)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "That player is currently imprisoned and cannot use their phone.");
	        }
	        if(pData[i][pTogglePhone])
	        {
	            return SCM(playerid, COLOR_SYNTAX, "That player has their mobile phone switched off.");
			}

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out a cellphone and sends a message.", GetRPName(playerid));

			if(strlen(msg) > MAX_SPLIT_LENGTH)
			{
			    SM(i, COLOR_YELLOW, "** SMS from %s (%i): %.*s... **", GetRPName(playerid), pData[playerid][pPhone], MAX_SPLIT_LENGTH, msg);
			    SM(i, COLOR_YELLOW, "** SMS from %s (%i): ...%s **", GetRPName(playerid), pData[playerid][pPhone], msg[MAX_SPLIT_LENGTH]);

			    SM(playerid, COLOR_YELLOW, "** SMS to %s (%i): %.*s... **", GetRPName(i), pData[i][pPhone], MAX_SPLIT_LENGTH, msg);
			    SM(playerid, COLOR_YELLOW, "** SMS to %s (%i): ...%s **", GetRPName(i), pData[i][pPhone], msg[MAX_SPLIT_LENGTH]);
			}
			else
			{
		        SM(i, COLOR_YELLOW, "** SMS from %s (%i): %s **", GetRPName(playerid), pData[playerid][pPhone], msg);
		        SM(playerid, COLOR_YELLOW, "** SMS to %s (%i): %s **", GetRPName(i), pData[i][pPhone], msg);
			}

			if(pData[i][pTextFrom] == INVALID_PLAYER_ID)
			{
			    SCM(i, COLOR_WHITE, "** You can use '/rsms [message]' to reply to this text message.");
			}

			pData[i][pTextFrom] = playerid;

	        GivePlayerCash(playerid, -1);
	        GameTextForPlayer(playerid, "~w~Text sent!~n~~r~-$1", 5000, 1);
	        return 1;
		}
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, jailtype, togglephone FROM users WHERE phone = %i", number);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerSendTextMessage", "iis", playerid, number, msg);
	return 1;
}

CMD:texts(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM texts WHERE recipient_number = %i ORDER BY date DESC", pData[playerid][pPhone]);
    mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_VIEW_TEXTS, playerid);
	return 1;
}
CMD:phone(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pTogglePhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use your mobile phone right now as you have it toggled ((/tog phone)).");
	}
	if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
    if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || pData[playerid][pMiningTime] > 0 || pData[playerid][pButcherTime] > 0||pData[playerid][pCleanTime] > 0 ||pData[playerid][pTacotime] > 0 || pData[playerid][pBurritotime] > 0 || pData[playerid][pDemolitionTime] > 0 || pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pLootTime] > 0)
	    return SCM(playerid, COLOR_GREY, "You're currently unable to use phone at this moment.");

	for(new i = 0; i < 22; i++) {
		TextDrawShowForPlayer(playerid, PhoneTD[i]);
	}
	SelectTextDraw(playerid, COLOR_LIGHTBLUE);
	ShowActionBubble(playerid, "* %s takes out their phone.", GetRPName(playerid));
	return 1;
}
CMD:call(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new number;
	if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(sscanf(params, "i", number))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /call [number]");
	    SCM(playerid, COLOR_WHITE, "Special numbers: 911 = Emergency hotline, 6397 = News, 6324 = Mechanic, 8294 = Taxi");
	    return 1;
	}
	if(!pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a cellphone and therefore can't use this command.");
	}
	if(pData[playerid][pTogglePhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use your mobile phone right now as you have it toggled.");
	}
	if(pData[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have a call in session. /(h)angup to end that call.");
	}
	if(number == 0 || number == pData[playerid][pPhone])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid number.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}

	if(number == 911)
	{
	    pData[playerid][pCallLine] = playerid;
		pData[playerid][pCallStage] = 911;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
		SCM(playerid, COLOR_DISPATCH, "911, what is your emergency? Enter 'police' or 'medic'.");
		return 1;
	}
	else if(number == 6397)
	{
	    pData[playerid][pCallLine] = playerid;
		pData[playerid][pCallStage] = 6397;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
		SCM(playerid, COLOR_DISPATCH, "This is SANews here. Leave a message and we'll get back to you! *BEEP*");
		return 1;
	}
	else if(number == 6324)
	{
	    pData[playerid][pCallLine] = playerid;
		pData[playerid][pCallStage] = 6324;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
		SCM(playerid, COLOR_DISPATCH, "This is the mechanic hotline. Please explain your situation to us.");
		return 1;
	}
	else if(number == 8294)
	{
	    pData[playerid][pCallLine] = playerid;
		pData[playerid][pCallStage] = 8294;

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
		SCM(playerid, COLOR_DISPATCH, "This is the cab company. Please state your location and destination.");
		return 1;
	}
	else if(number == 666)
	{
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s dials a number on their keypad and begins a call.", GetRPName(playerid));
	    SCM(playerid, COLOR_WHITE, "** They hung up their phone and ended the call.");
	    return 1;
	}
	SCM(playerid, COLOR_SYNTAX, "That number is either not in service or the owner is offline.");
	return 1;
}



CMD:p(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::pickup(playerid, params);
}

CMD:pickup(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pCallStage] != 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no incoming calls which you can answer right now.");
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are unable to use your cellphone at the moment.");
	}

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button and answers their mobile phone.", GetRPName(playerid));
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

	pData[pData[playerid][pCallLine]][pCallStage] = 2;
	pData[playerid][pCallStage] = 2;

	SCM(playerid, COLOR_WHITE, "** You have answered the call. You can now speak in chat to talk to the caller.");
	SCM(pData[playerid][pCallLine], COLOR_WHITE, "** They answered the call. You can now speak in chat to talk to them.");
	
	//////////////////////////////////// - Samp Voice - //////////////////////////////////////////
	callstream[playerid] = SvCreateGStream(0x00FF00ff, "Call");
	callstream[pData[playerid][pCallLine]] = SvCreateGStream(0x00FF00ff, "Call");
	SvAttachListenerToStream(callstream[pData[playerid][pCallLine]], playerid);
	SvAttachListenerToStream(callstream[playerid], pData[playerid][pCallLine]);
	//////////////////////////////////// - Samp Voice - //////////////////////////////////////////
	SetPlayerCellphoneAction(playerid, true);
	return 1;
}

CMD:h(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::hangup(playerid, params);
}

CMD:hangup(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pCallLine] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no calls in session which you can hangup.");
	}

	HangupCall(playerid, HANGUP_USER);
	return 1;
}
CMD:stats(playerid, params[]) return DisplayStats(playerid);
CMD:toggc(playerid) return callcmd::tog(playerid, "global");
CMD:inv(playerid, params[]) return callcmd::inventory(playerid, params);
CMD:inventory(playerid, params[]) return DisplayInventory(playerid);
CMD:ddedit(playerid, params[]) return callcmd::editentrance(playerid, params);
CMD:gotoid(playerid, params[]) return callcmd::goto(playerid, params);

CMD:togturfs(playerid) return callcmd::toggle(playerid, "turfs");
CMD:togpm(playerid) return callcmd::toggle(playerid, "pm");
CMD:togfam(playerid) return callcmd::toggle(playerid, "gang");
CMD:togcrew(playerid) return callcmd::toggle(playerid, "crew");
CMD:togwhisper(playerid) return callcmd::toggle(playerid, "whisper");
CMD:tognews(playerid) return callcmd::toggle(playerid, "news");
CMD:tognewbie(playerid) return callcmd::toggle(playerid, "newbie");
CMD:togchatanim(playerid) return callcmd::toggle(playerid, "chatanim");
CMD:tog(playerid, params[]) return callcmd::toggle(playerid, params);
CMD:toggle(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /(tog)gle [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Textdraws, OOC, Global, Phone, Newbie, PortableRadio, Radio, Streams, News");
		SCM(playerid, COLOR_WHITE, "Available options: SpawnCam, HUD, Admin, Helper, VIP, Faction, Gang, Whisper, Turfs, ChatAnim");
	}
	else if(!strcmp(params, "textdraws", true))
	{
	    if(!pData[playerid][pToggleTextdraws])
	    {
	        HideGPSTextdraw(playerid);
	       	/*for(new i = 0; i < 2; i++) {
				TextDrawHideForPlayer(playerid, HTTD[i]);
			}*/
	        PlayerTextDrawHide(playerid, pData[playerid][pTextx][1]);
	        PlayerTextDrawHide(playerid, pData[playerid][pTextx][2]);
     		//HidePlayerProgressBar(playerid, HungerBar[playerid]);
			//HidePlayerProgressBar(playerid, ThirstBar[playerid]);
	        PlayerTextDrawHide(playerid, pData[playerid][pText][3]);
	        PlayerTextDrawHide(playerid, pData[playerid][pText][4]);
	        PlayerTextDrawHide(playerid, pData[playerid][pText][5]);

			for(new i = 0; i < 6; i ++) {
				pData[playerid][pGPSOn] = 0;
				HideGPSTextdraw(playerid);
				pData[playerid][pWatchOn] = 0;
				TextDrawHideForPlayer(playerid, TimeTD);
			}

			/*for(new i = 0; i < 4; i ++)
			{
				TextDrawHideForPlayer(playerid, HTSTD[i]);
			}*/
			/*#if defined Christmas
	#else
  				PlayerTextDrawHide(playerid, EventTextdraw[playerid]);
			#endif*/
	        TextDrawHideForPlayer(playerid, TimeTD);

			
			for(new i = 0; i < 3; i++) {
				TextDrawHideForPlayer(playerid, LogoTD[i]);
			}
			/*for(new i = 0; i < 4; i ++)
			{
				TextDrawHideForPlayer(playerid, HTSTD[i]);
			}*/
	        pData[playerid][pToggleTextdraws] = 1;
	        SCM(playerid, COLOR_AQUA, "Textdraws toggled. You will no longer see any textdraws.");
	    }
	    else
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && VehicleHasEngine(GetPlayerVehicleID(playerid)))
	        {
				for(new i = 0; i < 6; i ++) {
					PlayerTextDrawShow(playerid, pData[playerid][pTextx][1]);
					PlayerTextDrawShow(playerid, pData[playerid][pTextx][2]);
        			pData[playerid][pGPSOn] = 1;
	    			PlayerTextDrawSetString(playerid, pData[playerid][pText][0], "Loading...");
					ShowGPSTextdraw(playerid);
					pData[playerid][pWatchOn] = 1;
					TextDrawShowForPlayer(playerid, TimeTD);
				}
	        }
	        if(pData[playerid][pGPSOn])
	        {
	            ShowGPSTextdraw(playerid);
	        }
	        if(pData[playerid][pWatchOn])
	        {
	            TextDrawShowForPlayer(playerid, TimeTD);
	        }
	        if(!pData[playerid][pToggleHUD])
	        {
	            PlayerTextDrawShow(playerid, pData[playerid][pText][3]);
	            PlayerTextDrawShow(playerid, pData[playerid][pText][4]);
	        }

 			//ShowPlayerProgressBar(playerid, HungerBar[playerid]);
			//ShowPlayerProgressBar(playerid, ThirstBar[playerid]);

			/*for(new i = 0; i < 4; i ++)
			{
				TextDrawShowForPlayer(playerid, HTSTD[i]);
			}*/
			for(new i = 0; i < 3; i++) {
				TextDrawShowForPlayer(playerid, LogoTD[i]);
			}
	        pData[playerid][pToggleTextdraws] = 0;
	        SCM(playerid, COLOR_AQUA, "Textdraws enabled. You will now see textdraws again.");
	    }
	}
	else if(!strcmp(params, "ooc", true))
	{
	    if(!pData[playerid][pToggleOOC])
	    {
	        pData[playerid][pToggleOOC] = 1;
	        SCM(playerid, COLOR_AQUA, "OOC chat toggled. You will no longer see any messages in /o.");
	    }
	    else
	    {
	        pData[playerid][pToggleOOC] = 0;
	        SCM(playerid, COLOR_AQUA, "OOC chat enabled. You will now see messages in /o again.");
	    }
	}
	else if(!strcmp(params, "chatanim", true))
	{
	    if(!pData[playerid][pChatAnim])
	    {
	        pData[playerid][pChatAnim] = 1;
	        SCM(playerid, COLOR_AQUA, "Chat animation enabled.");
			TextDrawShowForPlayer(playerid, AnimationTD);
	    }
	    else
	    {
	        pData[playerid][pChatAnim] = 0;
	        SCM(playerid, COLOR_AQUA, "Chat animation disabled.");
			TextDrawHideForPlayer(playerid, AnimationTD);
	    }
	}
	else if(!strcmp(params, "global", true))
	{
	    if(!pData[playerid][pToggleGlobal])
	    {
	        pData[playerid][pToggleGlobal] = 1;
	        SCM(playerid, COLOR_AQUA, "Global chat toggled. You will no longer see any messages in /g.");
	    }
	    else
	    {
	        pData[playerid][pToggleGlobal] = 0;
	        SCM(playerid, COLOR_AQUA, "Global chat enabled. You can now speak to other players in /g.");
	    }
	}
	else if(!strcmp(params, "phone", true))
	{
	    if(!pData[playerid][pTogglePhone])
	    {
	        if(pData[playerid][pCallLine] != INVALID_PLAYER_ID)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "You can't do this while in a call.");
	        }

	        pData[playerid][pTogglePhone] = 1;
	        SCM(playerid, COLOR_AQUA, "Phone toggled. You will no longer receive calls or texts.");
	    }
	    else
	    {
	        pData[playerid][pTogglePhone] = 0;
	        SCM(playerid, COLOR_AQUA, "Phone enabled. You can now receive calls and texts again.");
	    }
	}
    else if(!strcmp(params, "admin", true))
	{
	    if(!pData[playerid][pAdmin])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not an admin and therefore cannot toggle this feature.");
		}

	    if(!pData[playerid][pToggleAdmin])
	    {
	        pData[playerid][pToggleAdmin] = 1;
	        SCM(playerid, COLOR_AQUA, "Admin chat toggled. You will no longer see any messages in admin chat.");
	    }
	    else
	    {
	        pData[playerid][pToggleAdmin] = 0;
	        SCM(playerid, COLOR_AQUA, "Admin chat enabled. You will now see messages in admin chat again.");
	    }
	}
	else if(!strcmp(params, "helper", true))
	{
	    if(!pData[playerid][pHelper])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not a helper and therefore cannot toggle this feature.");
		}

	    if(!pData[playerid][pToggleHelper])
	    {
	        pData[playerid][pToggleHelper] = 1;
	        SCM(playerid, COLOR_AQUA, "Helper chat toggled. You will no longer see any messages in helper chat.");
	    }
	    else
	    {
	        pData[playerid][pToggleHelper] = 0;
	        SCM(playerid, COLOR_AQUA, "Helper chat enabled. You will now see messages in helper chat again.");
	    }
	}
	else if(!strcmp(params, "newbie", true))
	{
	    if(!pData[playerid][pToggleNewbie])
	    {
	        pData[playerid][pToggleNewbie] = 1;
	        SCM(playerid, COLOR_AQUA, "Newbie chat toggled. You will no longer see any messages in newbie chat.");
	    }
	    else
	    {
	        pData[playerid][pToggleNewbie] = 0;
	        SCM(playerid, COLOR_AQUA, "Newbie chat enabled. You will now see messages in newbie chat again.");
	    }
	}
    else if(!strcmp(params, "portableradio", true))
	{
	    if(!pData[playerid][pWalkieTalkie])
		{
	    	return SCM(playerid, COLOR_SYNTAX, "You don't have a Portable Radio.");
		}

	    if(!pData[playerid][pToggleWT])
	    {
	        pData[playerid][pToggleWT] = 1;
	        SCM(playerid, COLOR_AQUA, "Portable Radio toggled. You will no longer receive any messages on your Portable Radio.");
	    }
	    else
	    {
	        pData[playerid][pToggleWT] = 0;
	        SCM(playerid, COLOR_AQUA, "Portable Radio enabled. You will now receive messages on your Portable Radio again.");
	    }
	}
	else if(!strcmp(params, "radio", true))
	{
 		if(pData[playerid][pFaction] == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not apart of a faction and therefore can't toggle your radio.");
		}

	    if(!pData[playerid][pToggleRadio])
	    {
	        pData[playerid][pToggleRadio] = 1;
	        SCM(playerid, COLOR_AQUA, "Radio chat toggled. You will no longer receive any messages on your radio.");
	    }
	    else
	    {
	        pData[playerid][pToggleRadio] = 0;
	        SCM(playerid, COLOR_AQUA, "Radio chat enabled. You will now receive messages on your radio again.");
	    }
	}
	else if(!strcmp(params, "streams", true))
	{
	    if(!pData[playerid][pToggleMusic])
	    {
	        pData[playerid][pToggleMusic] = 1;
	        StopAudioStreamForPlayer(playerid);
	        SCM(playerid, COLOR_AQUA, "Music streams toggled. You will no longer hear any music played locally & globally.");
	    }
	    else
	    {
	        pData[playerid][pToggleMusic] = 0;
	        SCM(playerid, COLOR_AQUA, "Music streams enabled. You will now hear music played locally & globally again.");
	    }
	}
	else if(!strcmp(params, "vip", true))
	{
	    if(!pData[playerid][pDonator])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not a VIP member and therefore cannot toggle this feature.");
		}

	    if(!pData[playerid][pToggleVIP])
	    {
	        pData[playerid][pToggleVIP] = 1;
	        SCM(playerid, COLOR_AQUA, "VIP chat toggled. You will no longer see any messages in VIP chat.");
	    }
	    else
	    {
	        pData[playerid][pToggleVIP] = 0;
	        SCM(playerid, COLOR_AQUA, "VIP chat enabled. You will now see messages in VIP chat again.");
	    }
	}
	else if(!strcmp(params, "faction", true))
	{
	    if(pData[playerid][pFaction] == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not apart of a faction and therefore can't toggle this chat.");
		}

	    if(!pData[playerid][pToggleFaction])
	    {
	        pData[playerid][pToggleFaction] = 1;
	        SCM(playerid, COLOR_AQUA, "Faction chat toggled. You will no longer see any messages in faction chat.");
	    }
	    else
	    {
	        pData[playerid][pToggleFaction] = 0;
	        SCM(playerid, COLOR_AQUA, "Faction chat enabled. You will now see messages in faction chat again.");
	    }
	}
	else if(!strcmp(params, "gang", true))
	{
	    if(pData[playerid][pGang] == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not a gang member and therefore can't toggle this chat.");
		}

	    if(!pData[playerid][pToggleGang])
	    {
	        pData[playerid][pToggleGang] = 1;
	        SCM(playerid, COLOR_AQUA, "Gang chat toggled. You will no longer see any messages in gang chat.");
	    }
	    else
	    {
	        pData[playerid][pToggleGang] = 0;
	        SCM(playerid, COLOR_AQUA, "Gang chat enabled. You will now see messages in gang chat again.");
	    }
	}
	else if(!strcmp(params, "news", true))
	{
	    if(!pData[playerid][pToggleNews])
	    {
	        pData[playerid][pToggleNews] = 1;
	        SCM(playerid, COLOR_AQUA, "News chat toggled. You will no longer see any news broadcasts.");
	    }
	    else
	    {
	        pData[playerid][pToggleNews] = 0;
	        SCM(playerid, COLOR_AQUA, "News chat enabled. You will now see news broadcasts again.");
	    }
	}
	else if(!strcmp(params, "whisper", true))
	{
	    if(pData[playerid][pToggleWhisper] == 0)
	    {
	        pData[playerid][pToggleWhisper] = 1;
	        SCM(playerid, COLOR_AQUA, "Whisper chat disabled. You have blocked all incoming whispers.");
		}
		else
		{
		    pData[playerid][pToggleWhisper] = 0;
		    SCM(playerid, COLOR_AQUA, "Whisper chat enabled. You will now receive whisper messages again.");
		}
	}
	else if(!strcmp(params, "spawncam", true))
	{
	    if(!pData[playerid][pToggleCam])
	    {
	        pData[playerid][pToggleCam] = 1;
	        SCM(playerid, COLOR_AQUA, "Spawn camera toggled. You will no longer see the camera effects upon spawning.");
	    }
	    else
	    {
	        pData[playerid][pToggleCam] = 0;
	        SCM(playerid, COLOR_AQUA, "Spawn camera enabled. You will now see the camera effects when you spawn again.");
	    }
	}
	else if(!strcmp(params, "hud", true))
	{
	    if(!pData[playerid][pToggleHUD])
	    {
	        pData[playerid][pToggleHUD] = 1;
	        SCM(playerid, COLOR_AQUA, "HUD toggled. You will no longer see your health & armor indicators.");

	        PlayerTextDrawHide(playerid, pData[playerid][pText][3]);
	        PlayerTextDrawHide(playerid, pData[playerid][pText][4]);
	        PlayerTextDrawHide(playerid, pData[playerid][pText][5]);
	    }
	    else
	    {
	        pData[playerid][pToggleHUD] = 0;
	        SCM(playerid, COLOR_AQUA, "HUD enabled. You will now see your health & armor indicators again.");

	        PlayerTextDrawShow(playerid, pData[playerid][pText][3]);
	        PlayerTextDrawShow(playerid, pData[playerid][pText][4]);
	    }
	}
	else if(!strcmp(params, "turfs", true))
	{
		if(!pData[playerid][pShowTurfs])
		{
			ShowTurfsOnMap(playerid, true);
			ShowLandsOnMap(playerid, false);
			SCM(playerid, COLOR_AQUA, "You will now see turfs on your mini-map.");
		}
		else
		{
			ShowTurfsOnMap(playerid, false);
			SCM(playerid, COLOR_AQUA, "You will no longer see any turfs on your mini-map.");
		}

	}
	else if(!strcmp(params, "points", true))
	{
		if(!ShowingBounds[playerid])
		{
		    GangZoneShowForPlayer(playerid, pointboundaries[0], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[1], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[2], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[3], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[4], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[5], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[6], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[7], 0xFF00008C);
		    GangZoneShowForPlayer(playerid, pointboundaries[8], 0xFF00008C);
	    	ShowTurfsOnMap(playerid, false);
	    	SCM(playerid, COLOR_AQUA, "You will now see points on your mini-map.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[0]); // FFC
			GangZoneHideForPlayer(playerid, pointboundaries[1]); // MP1
			GangZoneHideForPlayer(playerid, pointboundaries[2]); // MF1
			GangZoneHideForPlayer(playerid, pointboundaries[3]); // MP2
			GangZoneHideForPlayer(playerid, pointboundaries[4]); // MF2
			GangZoneHideForPlayer(playerid, pointboundaries[5]); // AEC
			GangZoneHideForPlayer(playerid, pointboundaries[6]); // DH
			GangZoneHideForPlayer(playerid, pointboundaries[7]); // CL
			GangZoneHideForPlayer(playerid, pointboundaries[8]); // DF
			ShowingBounds[playerid] = 0;
	    	SCM(playerid, COLOR_AQUA, "You will no longer see any points on your mini-map.");
		}
	}
	return 1;
}

CMD:help(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SCM(playerid, SERVER_COLOR, "Help Commands: /report /reportdm (/newb)ie /tognewbie");

	SCM(playerid, COLOR_WHITE, "Account Commands: /rules /serverstats /inventory /buylevel /upgrade /myupgrades /changepass /killcheckpoint");

	SCM(playerid, COLOR_WHITE, "Chat Commands: /w(hisper) /o(oc) /s(hout) /l(ow) /b /ad(vertise) /f(amily) /me /toggc /togfam /togcrew /togwhisper /tognews");

	SCM(playerid, COLOR_WHITE, "Bank Commands /bankhelp /bank");

	SCM(playerid, COLOR_WHITE, "General Commands: /pay /charity /time /buy /id /music /showlicenses /clothes /buyclothes /finddealership /locate");

	SCM(playerid, COLOR_WHITE, "General Commands: /skill /stopani /do /me /kill /drop /calculate /car /families /requesthelp /members /togchatanim");
	SCM(playerid, COLOR_WHITE, "General Commands: /cancel /accept /eject /usepot /usecrack /blindfold /tie /contract /call /info /clearmyscreen");

	switch(pData[playerid][pJob])
	{
		case JOB_FOODPANDA: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: /getorder, /cancelcp.");
		case JOB_COURIER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: /load, /deliver, /cancelcp.");
		case JOB_FISHERMAN: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: /fish, /myfish, /sellfish.");
		case JOB_BODYGUARD: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: /sellvest, /frisk.");
		case JOB_ARMSDEALER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: /smugglemats, /craftgun.");
		case JOB_MINER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: /mine, /cancelcp.");
		case JOB_TAXIDRIVER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: /setfare, /takecall.");
        case JOB_DRUGDEALER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: /getdrug, /planthelp, /cookmeth, /smuggledrugs.");
        case JOB_LAWYER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: /defend, /free, /wanted.");
        case JOB_DETECTIVE: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: /find.");
        case JOB_Demolition: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Job Commands: cancelcp.");
 	}

 	if(pData[playerid][pSecondJob] != JOB_NONE)
 	{
 	    switch(pData[playerid][pSecondJob])
		{
			case JOB_FOODPANDA: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Commands: /getorder.");
			case JOB_COURIER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Commands: /load, /deliver.");
			case JOB_FISHERMAN: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Commands: /fish, /myfish, /sellfish.");
			case JOB_BODYGUARD: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Commands: /sellvest, /frisk.");
			case JOB_ARMSDEALER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Commands: /smugglemats, /craftgun.");
			case JOB_MINER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Commands: /mine.");
			case JOB_TAXIDRIVER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Commands: /setfare.");
	        case JOB_DRUGDEALER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Commands: /getdrug, /planthelp, /cookmeth, /smuggledrugs.");
	        case JOB_LAWYER: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Commands: /defend, /free, /wanted.");
	        case JOB_DETECTIVE: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Commands: /find.");
	        case JOB_Demolition: SendClientMessage(playerid, COLOR_LIGHTORANGE, "Secondary Job Commands: cancelcp.");
	 	}
	}
	SCM(playerid, COLOR_WHITE, "Other Commands: /cellphonehelp /carhelp /househelp /toyhelp /renthelp /jobhelp /leaderhelp /animhelp /fishhelp /insurehelp /businesshelp /bankhelp");
	return 1;
}

ShowMembersDialog(playerid) 
{
	ShowPlayerDialog(playerid, DIALOG_HMEMBERS, DIALOG_STYLE_LIST, "Members System ", "Gang Members\nFaction Members", "Ok", "Cancel");
	return 1;
}

CMD:members(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	ShowMembersDialog(playerid);
	return 1;
}

CMD:locate(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!pData[playerid][pGPS])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a GPS. You can buy one at 24/7.");
	}
	if(isnull(params)) ShowDialogToPlayer(playerid, DIALOG_LOCATE);
	else LocateMethod(playerid, params);
	return 1;
}

CMD:findjob(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return ShowPlayerDialog(playerid, DIALOG_LOCATELIST1, DIALOG_STYLE_LIST, "Select Destination", "Foodpanda\nTrucker\nFisherman\nBodyguard\nArms Dealer\nMiner\nTaxi Driver\nDrug Dealer\nForklifter\nLumber Jack\nDemolition Job\nSweeper Job\nButcher", "Select", "Close");
}

CMD:ccp(playerid, params[]) return callcmd::cancelcp(playerid, params);
CMD:kcp(playerid, params[]) return callcmd::cancelcp(playerid, params);
CMD:killcp(playerid, params[]) return callcmd::cancelcp(playerid, params);
CMD:killcheckpoint(playerid, params[]) return callcmd::cancelcp(playerid, params);
CMD:cancelcp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(lumberman{playerid} == true)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
		SetPlayerSkin(playerid, pData[playerid][pSkin]);
    	Lumber1[playerid] = 0;
		lumberman{playerid} = false;
		Lumbered[playerid] = 0;
		Lumberedx[playerid] = 0;
	}
	DisablePlayerCheckpoint(playerid);
	CancelActiveCheckpoint(playerid);
	pData[playerid][pRobCash] = 0;
	PlayerHasCrate[playerid] = 0;
	SCM(playerid, COLOR_WHITE, "You have cancelled all active checkpoints.");
	return 1;
}

CMD:afk(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /afk [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if(pData[targetid][pAFK])
	{
	    SM(playerid, COLOR_WHITE, "** %s has been marked as Away from keyboard for %i minutes.", GetRPName(targetid), pData[targetid][pAFKTime] / 60);
	}
	else
	{
	    SM(playerid, COLOR_WHITE, "** %s is currently not marked as Away from keyboard.", GetRPName(targetid));
	}

	return 1;
}

CMD:afklist(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Away from Keyboard:");

	foreach(new i : Player)
	{
	    if(pData[i][pAFK])
	    {
	        SM(playerid, COLOR_TEAL, "(ID: "WHITE"%i"TEAL") "WHITE"%s"TEAL" - Time: "WHITE"%i seconds", i, GetRPName(i), pData[i][pAFKTime]);
		}
	}

	return 1;
}
CMD:cursor(playerid, params) {
	SelectTextDraw(playerid, -1);
	return 1;
}
CMD:atm(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(IsPlayerInATMArea(playerid))
	{
		if(pData[playerid][pToggleAtm] == 0)
		{
			new name[32];	
			format(name, sizeof(name), "%s", GetRPName(playerid));
			TextDrawSetString(ATMTD[13], name);
			
			pData[playerid][pToggleAtm] = 1;
			for(new g = 0; g < 13; g++) {
				TextDrawShowForPlayer(playerid, ATMTD[g]);
			}

			SelectTextDraw(playerid, COLOR_LIGHTBLUE);
			//ShowDialogToPlayer(playerid, DIALOG_ATM);
		}
		else
		{
			pData[playerid][pToggleAtm] = 0;
			for(new f = 0; f < 20; f++) 
			{
				TextDrawHideForPlayer(playerid, ATMTD[f]);
			}
			
			PlayerTextDrawHide(playerid, PlayerCashTD[playerid][1]);
			CancelSelectTextDraw(playerid);
		}
	}
	else if(GetNearbyAtm(playerid) >= 0)
	{
		if(pData[playerid][pToggleAtm] == 0)
		{
			new name[32];	
			format(name, sizeof(name), "%s", GetRPName(playerid));
			TextDrawSetString(ATMTD[13], name);
			
			pData[playerid][pToggleAtm] = 1;
	 		for(new g = 0; g < 13; g++) {
				TextDrawShowForPlayer(playerid, ATMTD[g]);
			}

			SelectTextDraw(playerid, COLOR_LIGHTBLUE);
			//ShowDialogToPlayer(playerid, DIALOG_ATM);
		}
		else
		{
			pData[playerid][pToggleAtm] = 0;
			for(new d = 0; d < 20; d++) 
			{
				TextDrawHideForPlayer(playerid, ATMTD[d]);
			}

			PlayerTextDrawHide(playerid, PlayerCashTD[playerid][1]);
			CancelSelectTextDraw(playerid);
		}     	
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You are not in range of any ATM machines.");
	}
	return 1;
}
CMD:fixplayerid(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", targetid))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /fixplayerid [playerid]");
	    SCM(playerid, COLOR_WHITE, "Sometimes player IDs can become bugged causing sscanf to not identify that ID until server restart.");
    	SCM(playerid, COLOR_WHITE, "(e.g. a command used upon a valid player ID saying the player is disconnected, invalid or offline.)");
        return 1;
	}
	if(!IsPlayerConnected(targetid))
	{
	    SSCANF_Leave(targetid);
	}
	else
	{
		SSCANF_Join(targetid, GetPlayerNameEx(targetid), IsPlayerNPC(targetid));
	}

	SM(playerid, COLOR_WHITE, "** Player ID %i has been fixed.", targetid);
	return 1;
}

CMD:anticheat(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new status;

	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", status) || !(0 <= status <= 1))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /anticheat [0/1]");
	}

	if(status) {
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has enabled the server anticheat.", GetRPName(playerid));
	} else {
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has disabled the server anticheat.", GetRPName(playerid));
	}

	gAnticheat = status;
	return 1;
}

CMD:gmx(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 7)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /gmx [confirm]");
	    SCM(playerid, COLOR_WHITE, "This command save all player accounts and restarts the server.");
	    return 1;
	}
	if(gGMX)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have already called for a server restart. You can't cancel it.");
	}

	gGMX = 1;

	foreach(new i : Player)
	{
	    Maskara[i] = 0;
	    if(i != playerid)
	    {
     		if(pData[i][pAdminDuty])
			{
	    	    callcmd::aduty(i, "");
			}
	    	TogglePlayerControllable(i, 0);
	    	SM(i, COLOR_AQUA, "** %s has initated a server restart. You have been frozen.", GetRPName(playerid));
		}

		SavePlayerVariables(i);
		GameTextForPlayer(i, "~w~Updating server...", 4000, 3);
	}

	SCM(playerid, COLOR_WHITE, "** The server will restart once all accounts have been saved.");
	return 1;
}
forward OnAdminChangePassword(playerid, username[], password[]);
public OnAdminChangePassword(playerid, username[], password[])
{
	if(!cache_get_row_count(connectionID))
	{
	    SendClientMessage(playerid, COLOR_GREY, "The player specified doesn't exist.");
	}
	else
	{
	    new
	        hashed[129];

	    WP_Hash(hashed, sizeof(hashed), password);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET password = '%s' WHERE username = '%e'", hashed, username);
	    mysql_tquery(connectionID, queryBuffer);

	    SendAdminMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" %s has changed %s's account password.",GetAdminRank(playerid), GetRPName(playerid), username);
	}
}
CMD:setpassword(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new username[MAX_PLAYER_NAME], password[128];

    if(pData[playerid][pAdmin] < 7)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "s[24]s[128]", username, password))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /setpassword [username] [new password]");
	}
	if(IsPlayerOnline(username))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "That player is already online and logged in. You can't change their password.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "OnAdminChangePassword", "iss", playerid, username, password);
	return 1;
}

CMD:changepass(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	ShowPlayerDialog(playerid, DIALOG_CHANGEPASS, DIALOG_STYLE_INPUT, "Change password", "Enter your new password:", "Submit", "Cancel");
	return 1;
}

CMD:toys(playerid, params[]) return callcmd::clothing(playerid, params);
CMD:clothes(playerid, params[]) return callcmd::clothing(playerid, params);
CMD:clothing(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new string[MAX_PLAYER_CLOTHING * 64];

	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists])
	    {
	        if(ClothingInfo[playerid][i][cAttached]) {
				format(string, sizeof(string), "%s\n{C8C8C8}%i) "SVRCLR"%s {FFD700}(Attached)", string, i + 1, ClothingInfo[playerid][i][cName]);
			} else {
			    format(string, sizeof(string), "%s\n{C8C8C8}%i) "SVRCLR"%s"WHITE"", string, i + 1, ClothingInfo[playerid][i][cName]);
	        }
		}
		else
		{
			format(string, sizeof(string), "%s\n{C8C8C8}%i) {AFAFAF}Empty Slot"WHITE"", string, i + 1);
		}
	}

	ShowPlayerDialog(playerid, DIALOG_CLOTHING, DIALOG_STYLE_LIST, "My clothing items", string, "Select", "Cancel");
	return 1;
}

CMD:wat(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    ClothingInfo[playerid][i][cAttached] = 1;
	    SetPlayerClothing(playerid);
	}
	return 1;
}

CMD:dat(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	for(new i = 0; i < MAX_PLAYER_CLOTHING; i ++)
	{
	    if(ClothingInfo[playerid][i][cExists] && ClothingInfo[playerid][i][cAttached])
	    {
	        RemovePlayerAttachedObject(playerid, ClothingInfo[playerid][i][cAttachedIndex]);
		}
	}	
	return 1;
}

CMD:getweplic(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 45.5967,2039.3578,733.8567) && !IsPlayerInRangeOfPoint(playerid, 5.0,45.5967,2039.3578,733.8567))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not at the desk in the Police department.");
	}
	new string[1024];
	if(pData[playerid][pWeaponLicense])
		return SendClientMessageEx(playerid, COLOR_GREY, "You already have an existing weapon license, you don't need one.");
 	if(pData[playerid][pCash] < 50000)
		return SendClientMessageEx(playerid, COLOR_GREY, "You need at least $50,000 in order to register yourself..");

	strcat(string, "You are about to take a weapon license.\n");
	strcat(string, "You need to perfect all of the answers that is asked to you otherwise you will fail.\n\n");

	strcat(string, "Weapon License Test: $50,000\n");
	strcat(string, "Passing Score: 90 score or above.\n");
	strcat(string, "Finish the weapon license test in less than 4 minutes.\n\n");

	strcat(string, "If you fail the weapon license test 2 times, You will have to register again to take another test.\n\n");
	strcat(string, "So are you sure, ready to take the weapon license test?\n");
	strcat(string, "Click 'Yes' if you are ready to proceed.\n");
	strcat(string, "Click 'No' if you aren't ready");

	ShowPlayerDialog(playerid, DIALOG_WEP_TEST, DIALOG_STYLE_MSGBOX, "{FF6347}Weapon Test", string, "Yes", "No");
	return 1;
}

CMD:taketest(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -2039.2168, -123.6363, -50.9141))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not at the desk in the Licensing department.");
	}
	if(pData[playerid][pCarLicense])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have your drivers license already.");
	}
	if(pData[playerid][pDrivingTest])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already taking your drivers test.");
	}
	if(pData[playerid][pCash] < 5000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need $5,000 to pay the licensing fee if you pass the test.");
	}

	SCM(playerid, COLOR_WHITE, "** You've taken on the drivers test. Go outside and enter one of the vehicles to begin.");
	SCM(playerid, COLOR_WHITE, "** Once you have passed the test, you will receive your license and pay a $2,000 licensing fee.");

	pData[playerid][pTestVehicle] = INVALID_VEHICLE_ID;
	pData[playerid][pDrivingTest] = 1;
	pData[playerid][pTestCP] = 0;
	return 1;
}

CMD:buyvehicle(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	static string[4096];
	pData[playerid][pGangCar] = 0;
	if(pData[playerid][pCarLicense] == 0)
	{
		return SendClientMessage(playerid, -1, "You need a car license to purchase a vehicle.");
	}
    if(GetSpawnedVehicles(playerid) >= MAX_SPAWNED_VEHICLES)
    {
        return SCMf(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't have more than %i vehicles spawned at a time.", MAX_SPAWNED_VEHICLES);
    }
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 2125.7119,-1867.8989,13.5038))
	{
  		string = "Category\tVehicle\tPrice";

		for(new i = 0; i < sizeof(vehicleArray); i ++)
	  	{
	  		if(strcmp(vehicleArray[i][carCategory], "Boats") != 0 && strcmp(vehicleArray[i][carCategory], "Aircraft") != 0)
	  		{
		    	format(string, sizeof(string), "%s\n%s\t%s\t"YELLOW"%s"WHITE"", string, vehicleArray[i][carCategory], vehicleNames[vehicleArray[i][carModel] - 400], FormatNumber(vehicleArray[i][cARPrice]));
			}
		}
		pData[playerid][pGangCar] = 0;
		ShowPlayerDialog(playerid, DIALOG_BUYVEHICLE, DIALOG_STYLE_TABLIST_HEADERS, "Grotti Dealership", string, "Buy", "Cancel");
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any dealership.");
	}
	return 1;
}
CMD:setskin(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid, skinid;

    if(pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, skinid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setskin [playerid] [skinid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!(0 <= skinid <= 311))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid skin specified.");
	}
	if(!IsPlayerSpawned(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is either not spawned, or spectating.");
	}
	if(skinid == 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid skin specified.");
	}
	if(skinid == 74)
	{
		return SCM(playerid, COLOR_SYNTAX, "Invalid skin specified.");
	}

	pData[targetid][pSkin] = skinid;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET skin = %i WHERE uid = %i", skinid, pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SetPlayerSkin(targetid, skinid);
	SM(playerid, COLOR_GREY2, "%s's skin set to ID %i.", GetRPName(targetid), skinid);
	return 1;
}

CMD:v(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new option[60], param[128];
    new vehicleid = GetPlayerVehicleID(playerid);

	if(sscanf(params, "s[60]S()[128]", option, param))
	{
		SendClientMessage(playerid, SERVER_COLOR, "____________________________________________________");
		SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE: /v(ehicle) [action]");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Actions]"WHITE" neon");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Actions]"WHITE" trunk, hood, windows");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[Actions]"WHITE" info, lights");
		SendClientMessage(playerid, SERVER_COLOR, "____________________________________________________");
		return true;
	}

	if(!strcmp(option, "windows", true))
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You must be inside a vehicle to use this command.");
		}
		if(pData[playerid][pCuffed])
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You cannot use this command while cuffed");
		}
		if(pData[playerid][pTied])
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You cannot use this command while tied.");
		}
	    if(!VehicleHasWindows(vehicleid))
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" This vehicle does not have any windows.");
		}
		if(CarWindows[vehicleid])
		{
		    CarWindows[vehicleid] = 0;
		    SCM(playerid, COLOR_WHITE, "You have ~g~rolled down~w~ the windows!");
	        SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s rolls down the vehicle windows of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
		else
		{
		    CarWindows[vehicleid] = 1;
		    SCM(playerid, COLOR_WHITE, "You have ~r~rolled up~w~ the windows!");
		    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s rolls up the vehicle windows of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
	}
	if(!strcmp(option, "lights", true))
	{
		if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You must be driving a vehicle to use this command.");
		}
		if(!VehicleHasEngine(vehicleid))
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" This vehicle has no lights which can be turned on.");
		}

		if(!GetVehicleParams(vehicleid, VEHICLE_LIGHTS))
		{
		    SetVehicleParams(vehicleid, VEHICLE_LIGHTS, true);
		    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s turns on the headlights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
		else
		{
		    SetVehicleParams(vehicleid, VEHICLE_LIGHTS, false);
		    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s turns off the headlights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
	}

	else if(!strcmp(option, "neon", true))
	{
		if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not driving any vehicle of yours.");
		}
		if(!IsVehicleOwner(playerid, vehicleid) && pData[playerid][pVehicleKeys] != vehicleid)
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You can't use this command as this vehicle doesn't belong to you.");
		}
		if(!VehicleInfo[vehicleid][vNeon])
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" This vehicle has no neon installed.");
		}

		if(!VehicleInfo[vehicleid][vNeonEnabled])
		{
		    VehicleInfo[vehicleid][vNeonEnabled] = 1;
		    GameTextForPlayer(playerid, "~g~Neon activated", 3000, 3);

		    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s presses a button to activate their neon tubes.", GetRPName(playerid));
		    //SCM(playerid, SERVER_COLOR, "** Neon enabled. The tubes appear under your vehicle.");
		}
		else
		{
		    VehicleInfo[vehicleid][vNeonEnabled] = 0;
		    GameTextForPlayer(playerid, "~r~Neon deactivated", 3000, 3);

		    SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s presses a button to deactivate their neon tubes.", GetRPName(playerid));
		    //SCM(playerid, SERVER_COLOR, "** Neon disabled.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neonenabled = %i WHERE id = %i", VehicleInfo[vehicleid][vNeonEnabled], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadVehicleNeon(vehicleid);
	}
	else if(!strcmp(option, "info", true))
	{
		if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not inside any vehicle of yours.");
		}

		new neon[12], Float:health;

		GetVehicleHealth(vehicleid, health);

		switch(VehicleInfo[vehicleid][vNeon])
		{
		    case 18647: neon = "Red";
			case 18648: neon = "Blue";
			case 18649: neon = "Green";
			case 18650: neon = "Yellow";
			case 18651: neon = "Pink";
			case 18652: neon = "White";
			default: neon = "None";
		}

		SCMf(playerid, SERVER_COLOR, "%s Stats:", GetVehicleName(vehicleid));
		SCMf(playerid, COLOR_GREY2, "(Owner: %s) - (Value: $%i) - (Tickets: $%i) - (Plate: %s)", VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vPrice], VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vPlate]);
		SCMf(playerid, COLOR_GREY2, "(Neon: %s) - (Trunk: %i/3) - (Health: %.1f) - (Fuel: %i)", neon, VehicleInfo[vehicleid][vTrunk], health, vehicleFuel[vehicleid]);
	}
	else if(!strcmp(option, "trunk", true))
	{
		if(!IsPlayerInAnyVehicle(playerid)) {
			vehicleid = GetNearbyVehicle(playerid);
		}

		if(vehicleid == INVALID_VEHICLE_ID || !vehicleid)
		{
			return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not in range or inside of any vehicle.");
		}
		if(!VehicleHasWindows(vehicleid))
		{
			return SCM(playerid, COLOR_ERROR, "Error:"WHITE" This vehicle has no boot.");
		}

		if(!GetVehicleParams(vehicleid, VEHICLE_BOOT))
		{
			SetVehicleParams(vehicleid, VEHICLE_BOOT, true);
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s opens the boot of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
		else
		{
			SetVehicleParams(vehicleid, VEHICLE_BOOT, false);
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s closes the boot of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
	}
	else if(!strcmp(option, "hood", true))
	{
		if(!IsPlayerInAnyVehicle(playerid)) {
			vehicleid = GetNearbyVehicle(playerid);
		}

		if(vehicleid == INVALID_VEHICLE_ID || !vehicleid)
		{
			return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not in range of any vehicle.");
		}
		if(!VehicleHasWindows(vehicleid))
		{
			return SCM(playerid, COLOR_ERROR, "Error:"WHITE" This vehicle has no hood.");
		}

		if(!GetVehicleParams(vehicleid, VEHICLE_BONNET))
		{
			SetVehicleParams(vehicleid, VEHICLE_BONNET, true);
			SCM(playerid, COLOR_WHITE, "You have ~g~opened~w~ the hood!");
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s opens the hood of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
		else
		{
			SetVehicleParams(vehicleid, VEHICLE_BONNET, false);
			SCM(playerid, COLOR_WHITE, "You have ~g~closed~w~ the hood!");
			SendProximityMessage(playerid, 20.0, COLOR_GLOBAL, "**{C2A2DA} %s closes the hood of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		}
	}

	return 1;
}

stock SendToAdmins(string2[])
{
	for(new i; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && IsPlayerAdmin(i))
		{
			SendClientMessage(i,0xE60000FF,string2);
		}
	}
}
stock GetName(playerid)
{
	new Name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, Name, sizeof(Name));
	return Name;
}

//CHOP CHOP VEHICLE
stock UpdatePlayerVehicleParkPosition(playerid, vehicleid, Float:newx, Float:newy, Float:newz, Float:newangle)
{
	if(VehicleInfo[playerid][vID] != 0)
	{


		VehicleInfo[playerid][vPosX] = newx;
		VehicleInfo[playerid][vPosY] = newy;
		VehicleInfo[playerid][vPosZ] = newz;
		VehicleInfo[playerid][vPosA] = newangle;
		GetVehicleHealth(VehicleInfo[playerid][vID], VehicleInfo[playerid][vHealth]);

		VehicleInfo[playerid][vWorld] = GetPlayerVirtualWorld(playerid);
		VehicleInfo[playerid][vInterior] = GetPlayerInterior(playerid);

	

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', nterior = %i, world = %i, health = '%f' WHERE id = %i", vehicleid, newx, vehicleid, newy, vehicleid, newz, vehicleid, newangle, vehicleid, VehicleInfo[playerid][vWorld], vehicleid, VehicleInfo[playerid][vInterior], vehicleid, VehicleInfo[playerid][vHealth], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}
	return 0;
}

// END OF CHOP CHOP
CMD:sb(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::seatbelt(playerid, params);
}
CMD:hm(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::seatbelt(playerid, params);
}
CMD:helmet(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::seatbelt(playerid, params);
}
CMD:givekeys(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any vehicle of yours.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givekeys [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't give keys to yourself.");
	}
	if(pData[targetid][pVehicleKeys] == vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player already has keys to your vehicle.");
	}

	pData[targetid][pVehicleKeys] = vehicleid;

	SendProximityMessage(playerid, 20.0, COLOR_TEAL, "**"WHITE" %s"TEAL" gives "WHITE"%s "TEAL"the keys to their "WHITE"%s.", GetRPName(playerid), GetRPName(targetid), GetVehicleName(vehicleid));
	SM(targetid, COLOR_TEAL, ""WHITE"%s"TEAL" has given you the keys to their "WHITE"%s"TEAL".", GetRPName(playerid), GetVehicleName(vehicleid));
	SM(playerid, COLOR_TEAL, "You have given "WHITE"%s"TEAL" the keys to your "WHITE"%s"TEAL".", GetRPName(targetid), GetVehicleName(vehicleid));
	return 1;
}

CMD:takekeys(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any vehicle of yours.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /takekeys [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't take keys from yourself.");
	}
	if(pData[targetid][pVehicleKeys] != vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player doesn't have the keys to your vehicle.");
	}

	pData[targetid][pVehicleKeys] = INVALID_VEHICLE_ID;

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes back the keys to their %s from %s.", GetRPName(playerid), GetRPName(targetid), GetVehicleName(vehicleid));
	SM(targetid, COLOR_AQUA, "%s has taken back the keys to their "SVRCLR"%s{CCFFFF}.", GetRPName(playerid), GetVehicleName(vehicleid));
	SM(playerid, COLOR_AQUA, "You have taken back the keys to your "SVRCLR"%s{CCFFFF} from %s.", GetRPName(targetid), GetVehicleName(vehicleid));
	return 1;
}

CMD:trackcar(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::findcar(playerid, params);
}

CMD:findcar(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new string[128], count;

 	string = "#\tModel\tLocation";

 	for(new i = 1; i < MAX_VEHICLES; i ++)
 	{
 	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && IsVehicleOwner(playerid, i))
 	    {
 	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
 	        count++;
		}
	}

	if(!count)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no vehicles spawned at the moment.");
	}
	else
	{
	    ShowPlayerDialog(playerid, DIALOG_FINDCAR, DIALOG_STYLE_TABLIST_HEADERS, "Choose a vehicle to track.", string, "Select", "Cancel");
	}
	if(lumberman{playerid} == true)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
		SetPlayerSkin(playerid, pData[playerid][pSkin]);
    	Lumber1[playerid] = 0;
		lumberman{playerid} = false;
		Lumbered[playerid] = 0;
		Lumberedx[playerid] = 0;
	}
	DisablePlayerCheckpoint(playerid);
	CancelActiveCheckpoint(playerid);
	pData[playerid][pRobCash] = 0;
	PlayerHasCrate[playerid] = 0;
	SCM(playerid, COLOR_WHITE, "You have cancelled all active checkpoints.");
	return 1;
}

CMD:tune(playerid, params[]) {
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetFactionType(playerid) != FACTION_MECHANIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of mechanic.");
	}
	if(!IsPlayerInTuneArea(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the tunning place.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you tune this vehicle.");
	}
	if(!vehicleid)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	ShowPlayerDialog(playerid, DIALOG_TYPE_MAIN, DIALOG_STYLE_LIST, ""SVRCLR"Car Tuning Menu", "Hoods\nVents\nLights\nExhausts\nFront Bumpers\nRear Bumpers\nRoofs\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nHydraulics\nNitrous Oxide", "Enter", "Close");
	return 1;
}
CMD:eat(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new option[10], param[32];
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pDueling] != INVALID_PLAYER_ID|| pData[playerid][pDueling1] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You can't use this command at the moment.");
	}
	if(sscanf(params, "s[8]S()[32]", option, param))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]{ffffff} /eat burger, burrito");
	}

	if(!strcmp(option, "burger", true))
	{
		if(!pData[playerid][pTaco])
		{
		    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You don't have burger on your inventory.");
		}
		if(pData[playerid][pTacoEattime] > 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "You are eating already. Wait until you are done.");
		}
		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 1, 0, 0, 0, 0);
		SetPlayerAttachedObject(playerid, 9, 2703,6, 0.063, 0.047, -0.017, -89,152, 75.8, 1, 1,1);
		
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes out a burger from their inventory, and start eating it.", GetRPName(playerid));
		pData[playerid][pTacoEattime] = 5;
		
	}
	if(!strcmp(option, "burrito", true))
	{
		if(!pData[playerid][pBurrito])
		{
		    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You don't have burrito on your inventory.");
		}
		if(pData[playerid][pBurritoEattime] > 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "You are eating already. Wait until you are done.");
		}
		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 1, 0, 0, 0, 0);
		SetPlayerAttachedObject(playerid, 9, 2769,6, 0.063, 0.047, -0.017, -89,152, 75.8, 1, 1,1);
		
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes out a burrito meal from their inventory, and start eating it.", GetRPName(playerid));
		pData[playerid][pBurritoEattime] = 6;

		
	}
	
	
	return 1;
}
CMD:drink(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new option[10], param[32];
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pDueling] != INVALID_PLAYER_ID|| pData[playerid][pDueling1] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You can't use this command at the moment.");
	}
	if(sscanf(params, "s[8]S()[32]", option, param))
	{
	    return SCM(playerid, COLOR_LIGHTBLUE, "[USAGE]{ffffff} /drink coke");
	}
	if(!strcmp(option, "coke", true))
	{
		if(!pData[playerid][pJuice])
		{
		    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You don't have coke on your inventory.");
		}
		if(pData[playerid][pJuicetime] > 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "You are drinking already. Wait until you are done.");
		}
		ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 3.0, 1, 0, 0, 0, 0);
		SetPlayerAttachedObject(playerid, 9, 1484,6, 0,0,0,0,0,0, 1, 1,1);
		

		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s takes out a coke  from their inventory, and start drinking it.", GetRPName(playerid));
		pData[playerid][pJuicetime] = 6;

	}
	
	return 1;
}
CMD:upgradevehicle(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid = GetPlayerVehicleID(playerid), option[8], param[32];
	if(GetFactionType(playerid) != FACTION_MECHANIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of mechanic.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you upgrade this vehicle.");
	}
	if(!vehicleid)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(!IsPlayerInTuneArea(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the tunning place.");
	}
	if(sscanf(params, "s[8]S()[32]", option, param))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /upgradevehicle [stash | neon | plate]");
	}

	if(!strcmp(option, "stash", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /upgradevehicle [stash] [confirm]");
	        SM(playerid, COLOR_WHITE, "Your vehicle's stash level is at %i/3. Upgrading your stash will cost you $100000.", VehicleInfo[vehicleid][vTrunk]);
	        return 1;
		}
		if(VehicleInfo[vehicleid][vTrunk] >= 3)
		{
		    return SCM(playerid, COLOR_SYNTAX, "This vehicle's stash is already at its maximum level.");
		}
		if(pData[playerid][pCash] < 3000)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You don't have enough money to upgrade your trunk.");
		}

		VehicleInfo[vehicleid][vTrunk]++;

		
		GameTextForPlayer(playerid, "~r~-$3000", 5000, 1);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET trunk = %i WHERE id = %i", VehicleInfo[vehicleid][vTrunk], VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_YELLOW, "You have paid $3000 for stash level %i/3. '/vstash balance' to see your new capacities.", VehicleInfo[vehicleid][vTrunk]);
		Log_Write("log_property", "%s (uid: %i) upgraded the stash of their %s (id: %i) to level %i/3.", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], VehicleInfo[vehicleid][vTrunk]);
	}
	else if(!strcmp(option, "xneonx", true))
	{
	    if(isnull(param))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /upgradevehicle [neon] [color] (costs $50000)");
			SCM(playerid, COLOR_GREY2, "List of colors: Red, Blue, Green, Yellow, Pink, White");
			return 1;
	    }
	    if(pData[playerid][pCash] < 3000)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You need at least $3,000 to upgrade your neon.");
		}
		if(!VehicleHasWindows(vehicleid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "This vehicle doesn't support neon.");
		}

		if(!strcmp(param, "red", true))
		{
		    SetVehicleNeon(vehicleid, 18647);
		    
			GameTextForPlayer(playerid, "~r~-$3000", 5000, 1);

			SCM(playerid, COLOR_YELLOW, "You have paid $3000 for red neon. You can use /v neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased red neon for their %s (id: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "blue", true))
		{
		    SetVehicleNeon(vehicleid, 18648);
		    
			GameTextForPlayer(playerid, "~r~-$3000", 3000, 1);

			SCM(playerid, COLOR_YELLOW, "You have paid $3000 for blue neon. You can use /v neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased blue neon for their %s (id: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "green", true))
		{
		    SetVehicleNeon(vehicleid, 18649);
		    
			GameTextForPlayer(playerid, "~r~-$3000", 5000, 1);

			SCM(playerid, COLOR_YELLOW, "You have paid $3000 for green neon. You can use /v neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased green neon for their %s (id: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "yellow", true))
		{
		    SetVehicleNeon(vehicleid, 18650);
		    
			GameTextForPlayer(playerid, "~r~-$3000", 5000, 1);

			SCM(playerid, COLOR_YELLOW, "You have paid $3000 for yellow neon. You can use /v neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased yellow neon for their %s (id: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "pink", true))
		{
		    SetVehicleNeon(vehicleid, 18651);
		    
			GameTextForPlayer(playerid, "~r~-$3000", 5000, 1);

			SCM(playerid, COLOR_YELLOW, "You have paid $3000 for pink neon. You can use /v neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased pink neon for their %s (id: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
		else if(!strcmp(param, "white", true))
		{
		    SetVehicleNeon(vehicleid, 18652);
		    
			GameTextForPlayer(playerid, "~r~-$3000", 5000, 1);

			SCM(playerid, COLOR_YELLOW, "You have paid $3000 for white neon. You can use /v neon to toggle your neon.");
			Log_Write("log_property", "%s (uid: %i) purchased white neon for their %s (id: %i)", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
		}
	}
	else if(!strcmp(option, "plate", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /upgradevehicle [plate] [text] (costs $2000)");
	    }
	    if(!VehicleHasEngine(vehicleid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This vehicle has no license plate. Therefore you can't buy this upgrade.");
	    }

	    strcpy(VehicleInfo[vehicleid][vPlate], param, 32);

		SetVehicleNumberPlate(vehicleid, param);
	    ResyncVehicle(vehicleid);

		
		GameTextForPlayer(playerid, "~r~-$3000", 5000, 1);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET plate = '%e' WHERE id = %i", param, VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_YELLOW, "You have paid $3000 for license plate '%s'. Changes will take effect once vehicle is parked.", param);
		Log_Write("log_property", "%s (uid: %i) paid $3000 to set the license plate of their %s (id: %i) to %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], param);
	}

	return 1;
}

CMD:neon(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new vehicleid = GetPlayerVehicleID(playerid);

	if(!vehicleid)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(!VehicleInfo[vehicleid][vNeon])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no neon installed.");
	}

	if(!VehicleInfo[vehicleid][vNeonEnabled])
	{
	    VehicleInfo[vehicleid][vNeonEnabled] = 1;
	    GameTextForPlayer(playerid, "~g~Neon activated", 3000, 3);

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button to activate their neon tubes.", GetRPName(playerid));
	    //SCM(playerid, COLOR_AQUA, "** Neon enabled. The tubes appear under your vehicle.");
	}
	else
	{
	    VehicleInfo[vehicleid][vNeonEnabled] = 0;
	    GameTextForPlayer(playerid, "~r~Neon deactivated", 3000, 3);

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s presses a button to deactivate their neon tubes.", GetRPName(playerid));
	    //SCM(playerid, COLOR_AQUA, "** Neon disabled.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neonenabled = %i WHERE id = %i", VehicleInfo[vehicleid][vNeonEnabled], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	ReloadVehicleNeon(vehicleid);
	return 1;
}

CMD:bp(playerid, params[]) { return callcmd::backpack(playerid, params); }
CMD:backpack(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}

    if(pData[playerid][pBackpack] != 0)
    {
		new option[14], param[32];
	 	if(sscanf(params, "s[14]S()[32]", option, param))
		{
	 		return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [wear | balance | deposit | withdraw]");
	 	}
		if(pData[playerid][pInjured])
		{
			return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
		}
		if(!strcmp(option, "wear", true))
		{
		    if(pData[playerid][pPaintball] || pData[playerid][pJoinedEvent])
			    {
		        return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
			}
		    if(!pData[playerid][bpWearing])
		    {
		        if(pData[playerid][pBackpack] == 1)
		    	{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s wears his small backpack on his back.", GetRPName(playerid));
					SetPlayerAttachedObject(playerid, 9, 371, 1, -0.002, -0.140999, -0.01, 8.69999, 88.8, -8.79993, 1.11, 0.963);
				}
				else if(pData[playerid][pBackpack] == 2)
		  		{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s wears his medium backpack on his back.", GetRPName(playerid));
					SetPlayerAttachedObject(playerid, 9, 371, 1, -0.002, -0.140999, -0.01, 8.69999, 88.8, -8.79993, 1.11, 0.963);
				}
				else if(pData[playerid][pBackpack] == 3)
		  		{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s wears his large backpack on his back.", GetRPName(playerid));
					SetPlayerAttachedObject(playerid, 9, 3026, 1, -0.254999, -0.109, -0.022999, 10.6, -1.20002, 3.4, 1.265, 1.242, 1.062);
				}
    			pData[playerid][bpWearing] = 1;
			}
			else
			{
		        if(pData[playerid][pBackpack] == 1)
		    	{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes off his small backpack from his back.", GetRPName(playerid));
					pData[playerid][bpWearing] = 0;
				}
				else if(pData[playerid][pBackpack] == 2)
		  		{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes off his medium backpack from his back.", GetRPName(playerid));
					pData[playerid][bpWearing] = 0;
				}
				else if(pData[playerid][pBackpack] == 3)
		  		{
					SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes off his large backpack from his back.", GetRPName(playerid));
					pData[playerid][bpWearing] = 0;
				}
				RemovePlayerAttachedObject(playerid, 1);
				return 1;
			}
		}
		if(pData[playerid][bpWearing])
		{
			if(!strcmp(option, "balance", true))
		 	{
    			new count;

				for(new i = 0; i < 15; i ++)
    			{
		        	if(pData[playerid][bpWeapons][i])
          			{
            			count++;
          			}
       			}
				SCM(playerid, SERVER_COLOR, "Backpack Balance:");
    			SM(playerid, COLOR_GREY2, "(Cash: $%i/$%i)", pData[playerid][bpCash], GetBackpackCapacity(playerid, STASH_CAPACITY_CASH));
				SM(playerid, COLOR_GREY2, "(Materials: %i/%i) | (Weapons: %i/%i)", pData[playerid][bpMaterials], GetBackpackCapacity(playerid, STASH_CAPACITY_MATERIALS), count, GetBackpackCapacity(playerid, STASH_CAPACITY_WEAPONS));
		        SM(playerid, COLOR_GREY2, "(Pot: %i/%i grams) | (Crack: %i/%i grams)", pData[playerid][bpPot], GetBackpackCapacity(playerid, STASH_CAPACITY_WEED), pData[playerid][bpCrack], GetBackpackCapacity(playerid, STASH_CAPACITY_COCAINE));
		        SM(playerid, COLOR_GREY2, "(Meth: %i/%i grams) | (Painkillers: %i/%i pills)", pData[playerid][bpMeth], GetBackpackCapacity(playerid, STASH_CAPACITY_METH), pData[playerid][bpPainkillers], GetBackpackCapacity(playerid, STASH_CAPACITY_PAINKILLERS));
          		SCM(playerid, SERVER_COLOR, "Backpack Ammunition:");
				SM(playerid, COLOR_GREY2, "(HP Ammo: %i/%i) | (Poison Ammo: %i/%i)", pData[playerid][bpHPAmmo], GetBackpackCapacity(playerid, STASH_CAPACITY_HPAMMO), pData[playerid][bpPoisonAmmo], GetBackpackCapacity(playerid, STASH_CAPACITY_POISONAMMO));
	            SM(playerid, COLOR_GREY2, "(FMJ Ammo: %i/%i)", pData[playerid][bpFMJAmmo], GetBackpackCapacity(playerid, STASH_CAPACITY_FMJAMMO));
				return 1;
			}
			else if(!strcmp(option, "deposit", true))
		 	{
				new value;

				if(sscanf(param, "s[14]S()[32]", option, param))
		  		{
		    		SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [option]");
		      		SCM(playerid, COLOR_WHITE, "Available options: Cash, Materials, Pot, Crack, Meth, Painkillers, Weapon");
		        	SCM(playerid, COLOR_WHITE, "Available options: HPAmmo, PoisonAmmo, FMJAmmo");
			        return 1;
		    	}
			    if(!strcmp(option, "cash", true))
				{
		  			if(sscanf(param, "i", value))
					{
						return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [cash] [amount]");
					}
					if(value < 1 || value > pData[playerid][pCash])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpCash] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_CASH))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to $%i at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_CASH));
				    }

				    GivePlayerCash(playerid, -value);
				    pData[playerid][bpCash] += value;

				    SM(playerid, COLOR_AQUA, "** You have stored $%i in your backpack.", value);
				}
				else if(!strcmp(option, "materials", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [materials] [amount]");
					}
					if(value < 1 || value > pData[playerid][pMaterials])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpMaterials] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_MATERIALS))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i materials at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_MATERIALS));
				    }

				    pData[playerid][pMaterials] -= value;
				    pData[playerid][bpMaterials] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have stored %i materials in your backpack.", value);
	   			}
				else if(!strcmp(option, "pot", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [pot] [amount]");
					}
					if(value < 1 || value > pData[playerid][pPot])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpPot] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_WEED))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i grams of pot at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_WEED));
				    }

				    pData[playerid][pPot] -= value;
				    pData[playerid][bpPot] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have stored %ig of pot in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "crack", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [Crack] [amount]");
					}
					if(value < 1 || value > pData[playerid][pCrack])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpCrack] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_COCAINE))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i grams of Crack at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_COCAINE));
				    }

				    pData[playerid][pCrack] -= value;
				    pData[playerid][bpCrack] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have stored %ig of Crack in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "meth", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [meth] [amount]");
					}
					if(value < 1 || value > pData[playerid][pMeth])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpMeth] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_METH))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i grams of meth at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_METH));
				    }

				    pData[playerid][pMeth] -= value;
				    pData[playerid][bpMeth] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have stored %ig of meth in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "painkillers", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [painkillers] [amount]");
					}
					if(value < 1 || value > pData[playerid][pPainkillers])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpPainkillers] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_PAINKILLERS))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i painkillers at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_PAINKILLERS));
				    }

				    pData[playerid][pPainkillers] -= value;
				    pData[playerid][bpPainkillers] += value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have stored %i painkillers in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "weapon", true))
	   			{
	   			    new weaponid;

	   			    if(sscanf(param, "i", weaponid))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [weapon] [weaponid] (/guninv for weapon IDs)");
					}
					if(!(1 <= weaponid <= 46) || pData[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
					{
					    return SCM(playerid, COLOR_SYNTAX, "You don't have that weapon. /guninv for a list of your weapons.");
					}
					if(GetHealth(playerid) < 60)
					{
					    return SCM(playerid, COLOR_SYNTAX, "You can't store weapons as your health is below 60.");
					}
					if(enabledpurge == 1)
					{
						return SCM(playerid, COLOR_WHITE, "You are not allowed to deposit when purge is enable");
					}
					if(pData[playerid][pDuty] == 1)
					{
						return SCM(playerid, COLOR_GREY2, "You can't use this command while on-duty.");
					}					
					for(new i = 0; i < GetBackpackCapacity(playerid, STASH_CAPACITY_WEAPONS); i ++)
					{
						if(!pData[playerid][bpWeapons][i])
	   				    {
							pData[playerid][bpWeapons][i] = weaponid;

							RemovePlayerWeapon(playerid, weaponid);
							SM(playerid, COLOR_AQUA, "** You have stored a %s in slot %i of your backpack.", GetWeaponNameEx(pData[playerid][bpWeapons][i]), i + 1);
							return 1;
						}
					}

					SCM(playerid, COLOR_SYNTAX, "This backpack has no more slots available for weapons.");
				}
	            else if(!strcmp(option, "hpammo", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [hpammo] [amount]");
					}
					if(value < 1 || value > pData[playerid][pHPAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpHPAmmo] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_HPAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i HP ammo at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_HPAMMO));
				    }

				    SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] - value);
				    pData[playerid][bpHPAmmo] += value;

				    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of hollow point ammo in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "poisonammo", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [poisonammo] [amount]");
					}
					if(value < 1 || value > pData[playerid][pPoisonAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpPoisonAmmo] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_POISONAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i  at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_POISONAMMO));
				    }

				    SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] - value);
				    pData[playerid][bpPoisonAmmo] += value;

				    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of poison tip ammo in your backpack.", value);
	   			}
	   			else if(!strcmp(option, "fmjammo", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [deposit] [fmjammo] [amount]");
					}
					if(value < 1 || value > pData[playerid][pFMJAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpFMJAmmo] + value > GetBackpackCapacity(playerid, STASH_CAPACITY_FMJAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Your backpack can only hold up to %i FMJ ammo at its level.", GetBackpackCapacity(playerid, STASH_CAPACITY_FMJAMMO));
				    }

				    SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] - value);
				    pData[playerid][bpFMJAmmo] += value;

				    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of full metal jacket ammo in your backpack.", value);
	   			}
			}
	        else if(!strcmp(option, "withdraw", true))
		    {
		        new value;

		        if(sscanf(param, "s[14]S()[32]", option, param))
		        {
		            SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [option]");
		            SCM(playerid, COLOR_WHITE, "Available options: Cash, Pot, Crack, Meth, Painkillers, Weapon");
		            SCM(playerid, COLOR_WHITE, "Available options: HPAmmo, PoisonAmmo, FMJAmmo");
		            return 1;
		        }
		        if(!strcmp(option, "cash", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [cash] [amount]");
					}
					if(value < 1 || value > pData[playerid][bpCash])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }

				    GivePlayerCash(playerid, value);
				    pData[playerid][bpCash] -= value;

				    SM(playerid, COLOR_AQUA, "** You have taken $%i from your backpack.", value);
				}
				else if(!strcmp(option, "materials", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [materials] [amount]");
					}
					if(value < 1 || value > pData[playerid][bpMaterials])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpMaterials] + value > GetPlayerCapacity(CAPACITY_MATERIALS))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
					}

				    pData[playerid][pMaterials] += value;
				    pData[playerid][bpMaterials] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have taken %i materials from your backpack.", value);
	   			}
				else if(!strcmp(option, "pot", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [pot] [amount]");
					}
					if(value < 1 || value > pData[playerid][bpPot])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][pPot] + value > GetPlayerCapacity(CAPACITY_WEED))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
					}

				    pData[playerid][pPot] += value;
				    pData[playerid][bpPot] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have taken %ig of pot from your backpack stash.", value);
	   			}
	   			else if(!strcmp(option, "crack", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [Crack] [amount]");
					}
					if(value < 1 || value > pData[playerid][bpCrack])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][pCrack] + value > GetPlayerCapacity(CAPACITY_COCAINE))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
					}

				    pData[playerid][pCrack] += value;
				    pData[playerid][bpCrack] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have taken %ig of Crack from your backpack.", value);
	   			}
	   			else if(!strcmp(option, "meth", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [meth] [amount]");
					}
					if(value < 1 || value > pData[playerid][bpMeth])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][bpMeth] + value > GetPlayerCapacity(CAPACITY_METH))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
					}

				    pData[playerid][pMeth] += value;
				    pData[playerid][bpMeth] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have taken %ig of meth from your backpack.", value);
	   			}
	   			else if(!strcmp(option, "painkillers", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [painkillers] [amount]");
					}
					if(value < 1 || value > pData[playerid][bpPainkillers])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][pPainkillers] + value > GetPlayerCapacity(CAPACITY_PAINKILLERS))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPainkillers], GetPlayerCapacity(CAPACITY_PAINKILLERS));
					}

				    pData[playerid][pPainkillers] += value;
				    pData[playerid][bpPainkillers] -= value;

				    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
				    mysql_tquery(connectionID, queryBuffer);

				    SM(playerid, COLOR_AQUA, "** You have taken %i painkillers from your backpack stash.", value);
	   			}
	   			else if(!strcmp(option, "weapon", true))
	   			{
	   			    new slots = GetBackpackCapacity(playerid, STASH_CAPACITY_WEAPONS);

	   			    if(sscanf(param, "i", value))
				    {
				        return SM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [weapon] [slot (1-%i)]", slots);
					}
					if(!(1 <= value <= slots))
					{
					    return SCM(playerid, COLOR_SYNTAX, "Invalid slot, or the slot specified is locked.");
	   			    }
	   			    if(!pData[playerid][bpWeapons][value-1])
	   			    {
	   			        return SCM(playerid, COLOR_SYNTAX, "The slot specified contains no weapon which you can take.");
					}

					GiveWeapon(playerid, pData[playerid][bpWeapons][value-1]);
					SM(playerid, COLOR_AQUA, "** You have taken a %s from slot %i of your backpack.", GetWeaponNameEx(pData[playerid][bpWeapons][value-1]), value);

					pData[playerid][bpWeapons][value-1] = 0;
				}
	   			else if(!strcmp(option, "hpammo", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [hpammo] [amount]");
					}
					if(value < 1 || value > pData[playerid][bpHPAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][pHPAmmo] + value > GetPlayerCapacity(CAPACITY_HPAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i HP ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pHPAmmo], GetPlayerCapacity(CAPACITY_HPAMMO));
					}

				    SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] + value);
				    pData[playerid][bpHPAmmo] -= value;

				    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of hollow point ammo from your backpack.", value);
	   			}
	   			else if(!strcmp(option, "poisonammo", true))
				{
				    if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [poisonammo] [amount]");
					}
					if(value < 1 || value > pData[playerid][bpPoisonAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][pPoisonAmmo] + value > GetPlayerCapacity(CAPACITY_POISONAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i poison ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPoisonAmmo], GetPlayerCapacity(CAPACITY_POISONAMMO));
					}

				    SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] + value);
				    pData[playerid][bpPoisonAmmo] -= value;

				    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of poison tip ammo from your backpack.", value);
	   			}
	   			else if(!strcmp(option, "fmjammo", true))
				{
	       			if(sscanf(param, "i", value))
				    {
				        return SCM(playerid, COLOR_SYNTAX, "Usage: /backpack [withdraw] [fmjammo] [amount]");
					}
					if(value < 1 || value > pData[playerid][bpFMJAmmo])
					{
					    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
				    }
				    if(pData[playerid][pFMJAmmo] + value > GetPlayerCapacity(CAPACITY_FMJAMMO))
				    {
				        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i FMJ ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pFMJAmmo], GetPlayerCapacity(CAPACITY_FMJAMMO));
					}

				    SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] + value);
				    pData[playerid][bpFMJAmmo] -= value;

				    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of full metal jacket ammo from your backpack stash.", value);
	   			}
			}
		}
		else
		{
	 		return SCM(playerid, COLOR_SYNTAX, "You must be wearing your backpack to use these commands.");
	 	}
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in possession of a backpack.");
	}
	return 1;
}

CMD:vstorage(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT id, modelid, pos_x, pos_y, pos_z, world FROM vehicles WHERE ownerid = %i", pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_CAR_STORAGE, playerid);
	return 1;

}

CMD:vst(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::vstorage(playerid, params);
}

CMD:vstash(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid = GetNearbyVehicle(playerid);

	if(vehicleid != INVALID_VEHICLE_ID && IsVehicleOwner(playerid, vehicleid))
	{
	    new option[14], param[32];

		if(!VehicleInfo[vehicleid][vTrunk])
		{
		    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no trunk installed. /upgradevehicle to purchase one.");
	    }
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't use this command from within the vehicle.");
		}
		if(sscanf(params, "s[14]S()[32]", option, param))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [balance | deposit | withdraw]");
	    }
	    if(!strcmp(option, "balance", true))
	    {
	        new count;

	        for(new i = 0; i < 6; i ++)
	        {
	            if(VehicleInfo[vehicleid][vWeapons][i])
	            {
	                count++;
	            }
	        }

	        SCM(playerid, SERVER_COLOR, "Stash Balance:");
	        SM(playerid, COLOR_GREY2, "Cash: $%i/$%i", VehicleInfo[vehicleid][vCash], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
			SM(playerid, COLOR_GREY2, "Materials: %i/%i | Weapons: %i/%i", VehicleInfo[vehicleid][vMaterials], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS), count, GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS));
	        SM(playerid, COLOR_GREY2, "Pot: %i/%i grams | Crack: %i/%i grams", VehicleInfo[vehicleid][vPot], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED), VehicleInfo[vehicleid][vCrack], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
	        SM(playerid, COLOR_GREY2, "Meth: %i/%i grams | Painkillers: %i/%i pills", VehicleInfo[vehicleid][vMeth], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH), VehicleInfo[vehicleid][vPainkillers], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));
            SCM(playerid, SERVER_COLOR, "Stash Ammunition:");
			SM(playerid, COLOR_GREY2, "HP Ammo: %i/%i | Poison Ammo: %i/%i", VehicleInfo[vehicleid][vHPAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_HPAMMO), VehicleInfo[vehicleid][vPoisonAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_POISONAMMO));
            SM(playerid, COLOR_GREY2, "FMJ Ammo: %i/%i", VehicleInfo[vehicleid][vFMJAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_FMJAMMO));

			if(count > 0)
			{
				SCM(playerid, SERVER_COLOR, "Stash Weapons:");

            	for(new i = 0; i < 6; i ++)
	            {
    	            if(VehicleInfo[vehicleid][vWeapons][i])
	    	        {
	        	        SM(playerid, COLOR_GREY2, "[%i] Weapon: %s", i + 1, GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]));
					}
				}
	        }
		}
		else if(!strcmp(option, "deposit", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [option]");
	            SCM(playerid, COLOR_WHITE, "Available options: Cash, Materials, Pot, Crack, Meth, Painkillers, Weapon");
	            SCM(playerid, COLOR_WHITE, "Available options: HPAmmo, PoisonAmmo, FMJAmmo");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [cash] [amount]");
				}
				if(value < 1 || value > pData[playerid][pCash])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vCash] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to $%i at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
			    }

			    GivePlayerCash(playerid, -value);
			    VehicleInfo[vehicleid][vCash] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cash = %i WHERE id = %i", VehicleInfo[vehicleid][vCash], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored $%i in your vehicle stash.", value);
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [materials] [amount]");
				}
				if(value < 1 || value > pData[playerid][pMaterials])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vMaterials] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i materials at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS));
			    }

			    pData[playerid][pMaterials] -= value;
			    VehicleInfo[vehicleid][vMaterials] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET materials = %i WHERE id = %i", VehicleInfo[vehicleid][vMaterials], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i materials in your vehicle stash.", value);
   			}
			else if(!strcmp(option, "pot", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [pot] [amount]");
				}
				if(value < 1 || value > pData[playerid][pPot])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vPot] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i grams of pot at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED));
			    }

			    pData[playerid][pPot] -= value;
			    VehicleInfo[vehicleid][vPot] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pot = %i WHERE id = %i", VehicleInfo[vehicleid][vPot], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of pot in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "crack", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [Crack] [amount]");
				}
				if(value < 1 || value > pData[playerid][pCrack])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vCrack] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i grams of Crack at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
			    }

			    pData[playerid][pCrack] -= value;
			    VehicleInfo[vehicleid][vCrack] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET crack = %i WHERE id = %i", VehicleInfo[vehicleid][vCrack], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of Crack in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [meth] [amount]");
				}
				if(value < 1 || value > pData[playerid][pMeth])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vMeth] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i grams of meth at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH));
			    }

			    pData[playerid][pMeth] -= value;
			    VehicleInfo[vehicleid][vMeth] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = %i WHERE id = %i", VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %ig of meth in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [painkillers] [amount]");
				}
				if(value < 1 || value > pData[playerid][pPainkillers])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vPainkillers] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i painkillers at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));
			    }

			    pData[playerid][pPainkillers] -= value;
			    VehicleInfo[vehicleid][vPainkillers] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = %i WHERE id = %i", VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i painkillers in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new weaponid;

   			    if(sscanf(param, "i", weaponid))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [weapon] [weaponid] (/guninv for weapon IDs)");
				}
				if(!(1 <= weaponid <= 46) || pData[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You don't have that weapon. /guninv for a list of your weapons.");
				}
				if(GetHealth(playerid) < 60)
				{
				    return SCM(playerid, COLOR_SYNTAX, "You can't store weapons as your health is below 60.");
				}
				if(enabledpurge == 1)
				{
					return SCM(playerid, COLOR_WHITE, "You are not allowed to deposit when purge is enable");
				}
				if(pData[playerid][pDuty] == 1)
				{
					return SCM(playerid, COLOR_GREY2, "You can't use this command while on-duty.");
				}
				
				if(weaponid == 5 && pData[playerid][pVIPgun1] == 1)
				{
					return SCM(playerid, COLOR_GREY2, "You are not allowed to deposit this gun.");
				}
				if(weaponid == 22 && pData[playerid][pVIPgun2] == 1)
				{
					return SCM(playerid, COLOR_GREY2, "You are not allowed to deposit this gun.");
				}
				if(weaponid == 8 && pData[playerid][pVIPgun3] == 1)
				{
					return SCM(playerid, COLOR_GREY2, "You are not allowed to deposit this gun.");
				}	
				if(weaponid == 29 && pData[playerid][pVIPgun4] == 1)
				{
					return SCM(playerid, COLOR_GREY2, "You are not allowed to deposit this gun.");
				}				
				if(weaponid == 25 && pData[playerid][pVIPgun5] == 1)
				{
					return SCM(playerid, COLOR_GREY2, "You are not allowed to deposit this gun.");
				}

				for(new i = 0; i < GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS); i ++)
				{
					if(!VehicleInfo[vehicleid][vWeapons][i])
   				    {
						VehicleInfo[vehicleid][vWeapons][i] = weaponid;

						mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_%i = %i WHERE id = %i", i + 1, VehicleInfo[vehicleid][vWeapons][i], VehicleInfo[vehicleid][vID]);
						mysql_tquery(connectionID, queryBuffer);

						RemovePlayerWeapon(playerid, weaponid);
						SM(playerid, COLOR_AQUA, "** You have stored a %s in slot %i of your vehicle stash.", GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]), i + 1);
						
						new szString[528];
						format(szString, sizeof(szString), "%s have stored a %s in slot %i of your vehicle stash..", GetRPName(playerid), GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]), i + 1);
						SendDiscordMessage(16, szString);
						return 1;
					}
				}

				SCM(playerid, COLOR_SYNTAX, "This vehicle has no more slots available for weapons.");
			}
            else if(!strcmp(option, "hpammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [hpammo] [amount]");
				}
				if(value < 1 || value > pData[playerid][pHPAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vHPAmmo] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_HPAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i HP ammo at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_HPAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] - value);
			    VehicleInfo[vehicleid][vHPAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET hpammo = %i WHERE id = %i", VehicleInfo[vehicleid][vHPAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of hollow point ammo in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "poisonammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [poisonammo] [amount]");
				}
				if(value < 1 || value > pData[playerid][pPoisonAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vPoisonAmmo] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_POISONAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i  at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_POISONAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] - value);
			    VehicleInfo[vehicleid][vPoisonAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET poisonammo = %i WHERE id = %i", VehicleInfo[vehicleid][vPoisonAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of poison tip ammo in your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "fmjammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [deposit] [fmjammo] [amount]");
				}
				if(value < 1 || value > pData[playerid][pFMJAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(VehicleInfo[vehicleid][vFMJAmmo] + value > GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_FMJAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Your vehicle's stash can only hold up to %i FMJ ammo at its level.", GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_FMJAMMO));
			    }

			    SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] - value);
			    VehicleInfo[vehicleid][vFMJAmmo] += value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET fmjammo = %i WHERE id = %i", VehicleInfo[vehicleid][vFMJAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have stored %i rounds of full metal jacket ammo in your vehicle stash.", value);
   			}
		}
		else if(!strcmp(option, "withdraw", true))
	    {
	        new value;

	        if(sscanf(param, "s[14]S()[32]", option, param))
	        {
	            SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [option]");
	            SCM(playerid, COLOR_WHITE, "Available options: Cash, Pot, Crack, Meth, Painkillers, Weapon");
	            SCM(playerid, COLOR_WHITE, "Available options: HPAmmo, PoisonAmmo, FMJAmmo");
	            return 1;
	        }
	        if(!strcmp(option, "cash", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [cash] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vCash])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }

			    GivePlayerCash(playerid, value);
			    VehicleInfo[vehicleid][vCash] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET cash = %i WHERE id = %i", VehicleInfo[vehicleid][vCash], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken $%i from your vehicle stash.", value);
			}
			else if(!strcmp(option, "materials", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [materials] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vMaterials])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pMaterials] + value > GetPlayerCapacity(CAPACITY_MATERIALS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i materials. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMaterials], GetPlayerCapacity(CAPACITY_MATERIALS));
				}

			    pData[playerid][pMaterials] += value;
			    VehicleInfo[vehicleid][vMaterials] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET materials = %i WHERE id = %i", VehicleInfo[vehicleid][vMaterials], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = %i WHERE uid = %i", pData[playerid][pMaterials], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i materials from your vehicle stash.", value);
   			}
			else if(!strcmp(option, "pot", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [pot] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vPot])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pPot] + value > GetPlayerCapacity(CAPACITY_WEED))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
				}

			    pData[playerid][pPot] += value;
			    VehicleInfo[vehicleid][vPot] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pot = %i WHERE id = %i", VehicleInfo[vehicleid][vPot], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of pot from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "crack", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [Crack] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vCrack])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pCrack] + value > GetPlayerCapacity(CAPACITY_COCAINE))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
				}

			    pData[playerid][pCrack] += value;
			    VehicleInfo[vehicleid][vCrack] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET crack = %i WHERE id = %i", VehicleInfo[vehicleid][vCrack], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of Crack from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "meth", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [meth] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vMeth])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pMeth] + value > GetPlayerCapacity(CAPACITY_METH))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i meth. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pMeth], GetPlayerCapacity(CAPACITY_METH));
				}

			    pData[playerid][pMeth] += value;
			    VehicleInfo[vehicleid][vMeth] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = %i WHERE id = %i", VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %ig of meth from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "painkillers", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [painkillers] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vPainkillers])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pPainkillers] + value > GetPlayerCapacity(CAPACITY_PAINKILLERS))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i painkillers. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPainkillers], GetPlayerCapacity(CAPACITY_PAINKILLERS));
				}

			    pData[playerid][pPainkillers] += value;
			    VehicleInfo[vehicleid][vPainkillers] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = %i WHERE id = %i", VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i painkillers from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "weapon", true))
   			{
   			    new slots = GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS);

   			    if(sscanf(param, "i", value))
			    {
			        return SM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [weapon] [slot (1-%i)]", slots);
				}
				if(!(1 <= value <= slots))
				{
				    return SCM(playerid, COLOR_SYNTAX, "Invalid slot, or the slot specified is locked.");
   			    }
   			    if(!VehicleInfo[vehicleid][vWeapons][value-1])
   			    {
   			        return SCM(playerid, COLOR_SYNTAX, "The slot specified contains no weapon which you can take.");
				}

				GiveWeapon(playerid, VehicleInfo[vehicleid][vWeapons][value-1]);
				SM(playerid, COLOR_AQUA, "** You have taken a %s from slot %i of your vehicle stash.", GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][value-1]), value);

				VehicleInfo[vehicleid][vWeapons][value-1] = 0;

				mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_%i = 0 WHERE id = %i", value, VehicleInfo[vehicleid][vID]);
				mysql_tquery(connectionID, queryBuffer);
			}
   			else if(!strcmp(option, "hpammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [hpammo] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vHPAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pHPAmmo] + value > GetPlayerCapacity(CAPACITY_HPAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i HP ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pHPAmmo], GetPlayerCapacity(CAPACITY_HPAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_HP, pData[playerid][pHPAmmo] + value);
			    VehicleInfo[vehicleid][vHPAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET hpammo = %i WHERE id = %i", VehicleInfo[vehicleid][vHPAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of hollow point ammo from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "poisonammo", true))
			{
			    if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [poisonammo] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vPoisonAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pPoisonAmmo] + value > GetPlayerCapacity(CAPACITY_POISONAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i poison ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPoisonAmmo], GetPlayerCapacity(CAPACITY_POISONAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_POISON, pData[playerid][pPoisonAmmo] + value);
			    VehicleInfo[vehicleid][vPoisonAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET poisonammo = %i WHERE id = %i", VehicleInfo[vehicleid][vPoisonAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of poison tip ammo from your vehicle stash.", value);
   			}
   			else if(!strcmp(option, "fmjammo", true))
			{
       			if(sscanf(param, "i", value))
			    {
			        return SCM(playerid, COLOR_SYNTAX, "Usage: /vstash [withdraw] [fmjammo] [amount]");
				}
				if(value < 1 || value > VehicleInfo[vehicleid][vFMJAmmo])
				{
				    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
			    }
			    if(pData[playerid][pFMJAmmo] + value > GetPlayerCapacity(CAPACITY_FMJAMMO))
			    {
			        return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i FMJ ammo. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pFMJAmmo], GetPlayerCapacity(CAPACITY_FMJAMMO));
				}

			    SetWeaponAmmo(playerid, AMMO_FMJ, pData[playerid][pFMJAmmo] + value);
			    VehicleInfo[vehicleid][vFMJAmmo] -= value;

			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET fmjammo = %i WHERE id = %i", VehicleInfo[vehicleid][vFMJAmmo], VehicleInfo[vehicleid][vID]);
			    mysql_tquery(connectionID, queryBuffer);

			    SM(playerid, COLOR_AQUA, "** You have taken %i rounds of full metal jacket ammo from your vehicle stash.", value);
   			}
		}
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle of yours.");
	}

	return 1;
}

CMD:unmod(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new vehicleid = GetPlayerVehicleID(playerid);
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you repair this vehicle.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not sitting inside any vehicle.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && pData[playerid][pVehicleKeys] != vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as this vehicle doesn't belong to you.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /unmod [color | paintjob | mods | neon]");
	}

	if(!strcmp(params, "color", true))
	{
	    VehicleInfo[vehicleid][vColor1] = 0;
	    VehicleInfo[vehicleid][vColor2] = 0;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = 0, color2 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehicleColor(vehicleid, 0, 0);
	    SCM(playerid, COLOR_WHITE, "** Vehicle color has been set back to default.");
	}
	else if(!strcmp(params, "paintjob", true))
	{
	    VehicleInfo[vehicleid][vPaintjob] = -1;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = -1 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    ChangeVehiclePaintjob(vehicleid, -1);
	    SCM(playerid, COLOR_WHITE, "** Vehicle paintjob has been set back to default.");
	}
	else if(!strcmp(params, "mods", true))
	{
	    for(new i = 0; i < 14; i ++)
	    {
	        if(VehicleInfo[vehicleid][vMods][i] >= 1000)
	        {
	            RemoveVehicleComponent(vehicleid, VehicleInfo[vehicleid][vMods][i]);
	        }
	    }

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET mod_1 = 0, mod_2 = 0, mod_3 = 0, mod_4 = 0, mod_5 = 0, mod_6 = 0, mod_7 = 0, mod_8 = 0, mod_9 = 0, mod_10 = 0, mod_11 = 0, mod_12 = 0, mod_13 = 0, mod_14 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SCM(playerid, COLOR_WHITE, "** All vehicle modifications have been removed.");
	}
	else if(!strcmp(params, "neon", true))
	{
	    if(!VehicleInfo[vehicleid][vNeon])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This vehicle has no neon which you can remove.");
		}

		if(VehicleInfo[vehicleid][vNeonEnabled])
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][0]);
		    DestroyDynamicObject(VehicleInfo[vehicleid][vObjects][1]);
		}

		VehicleInfo[vehicleid][vNeon] = 0;
		VehicleInfo[vehicleid][vNeonEnabled] = 0;
		VehicleInfo[vehicleid][vObjects][0] = INVALID_OBJECT_ID;
		VehicleInfo[vehicleid][vObjects][1] = INVALID_OBJECT_ID;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET neon = 0, neonenabled = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);

	    SCM(playerid, COLOR_WHITE, "** Neon has been removed from vehicle.");
	}

	return 1;
}

CMD:colorcar(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid = GetPlayerVehicleID(playerid), color1, color2;
    if(GetFactionType(playerid) != FACTION_MECHANIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of mechanic.");
	}	
	if(!IsPlayerInTuneArea(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the tunning place.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you repair this vehicle.");
	}
	if(sscanf(params, "ii", color1, color2))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /colorcar [color1] [color2]");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not sitting inside any vehicle.");
	}
	if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The color specified must range between 0 and 255.");
	}

    if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
	    VehicleInfo[vehicleid][vColor1] = color1;
	    VehicleInfo[vehicleid][vColor2] = color2;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET color1 = %i, color2 = %i WHERE id = %i", color1, color2, VehicleInfo[vehicleid][vID]);
	    mysql_tquery(connectionID, queryBuffer);
	}

	ChangeVehicleColor(vehicleid, color1, color2);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their spraycan to spray their vehicle a different color.", GetRPName(playerid));

	PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	
	return 1;
}

CMD:paintcar(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid = GetPlayerVehicleID(playerid), paintjobid;
	if(GetFactionType(playerid) != FACTION_MECHANIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of mechanic.");
	}
	if(!IsPlayerInTuneArea(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the tunning place.");
	}
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you repair this vehicle.");
	}
	if(sscanf(params, "i", paintjobid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /paintcar [paintjobid (-1 = none)]");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not sitting inside any vehicle.");
	}
	if(!(-1 <= paintjobid <= 5))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The paintjob specified must range between -1 and 5.");
	}
	if(paintjobid == -1) paintjobid = 3;

	if(VehicleInfo[vehicleid][vOwnerID] > 0 || VehicleInfo[vehicleid][vGang] >= 0)
	{
		VehicleInfo[vehicleid][vPaintjob] = paintjobid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET paintjob = %i WHERE id = %i", paintjobid, VehicleInfo[vehicleid][vID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their spraycan to spray their vehicle a different color.", GetRPName(playerid));
	ChangeVehiclePaintjob(vehicleid, paintjobid);
	PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	
	return 1;
}

CMD:sellcar(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid = GetPlayerVehicleID(playerid), targetid, amount;

	if(!vehicleid || !IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside any vehicle of yours.");
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /sellcar [playerid] [amount]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't sell to yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must specify an amount above zero.");
	}

	pData[targetid][pCarOffer] = playerid;
	pData[targetid][pCarOffered] = vehicleid;
	pData[targetid][pcARPrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s offered you their %s for $%i (/accept vehicle).", GetRPName(playerid), GetVehicleName(vehicleid), amount);
	SM(playerid, COLOR_AQUA, "** You have offered %s to buy your %s for $%i.", GetRPName(targetid), GetVehicleName(vehicleid), amount);
	return 1;
}

CMD:chop(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pJob] == JOB_LUMBERJACK)
	{
	    if(IsAtChopPlace(playerid))
    	{
		    if(lumberman[playerid] == true) return SendClientMessage(playerid, COLOR_GREY, " You are already on Duty as a Lumber Man!");
			lumberman[playerid] = true;
   			//SetPlayerSkin(playerid, 16);
		    SetPlayerAttachedObject(playerid, 9, 341, 6,-0.240999, 0.004999, 0.053000,0.0,0.0,0.0,1.5,1.5,1.46);
		    SendClientMessage(playerid, COLOR_YELLOW,"HINT:Spam 'n' of your button to begin cutting");
		    return 1;
		}
		else SendClientMessage(playerid, COLOR_WHITE, "You are not at the  Chopping Point");
	}
	if(pData[playerid][pSecondJob] == JOB_LUMBERJACK)
	{
	    if(IsAtChopPlace(playerid))
    	{
		    if(lumberman[playerid] == true) return SendClientMessage(playerid, COLOR_GREY, " You are already on Duty as a Lumber Man!");
			lumberman[playerid] = true;
   			//SetPlayerSkin(playerid, 16);
		    SetPlayerAttachedObject(playerid, 9, 341, 6,-0.240999, 0.004999, 0.053000,0.0,0.0,0.0,1.5,1.5,1.46);
		    SendClientMessage(playerid, COLOR_YELLOW,"HINT:Spam 'n' of your button to begin cutting");
		    return 1;
		}
		else SendClientMessage(playerid, COLOR_WHITE, "You are not at the  Chopping Point");
	}
	return 1;
}

CMD:getgarbage(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pJob] == JOB_GARBAGEMAN)
	{
		if(pData[playerid][pGarbage] == 0)
		{
			return SendClientMessage(playerid, COLOR_GREY, "You're not doing a garbage run!");
		}
		if(!IsPlayerInGarbageArea(playerid))
		{
			return SCM(playerid, COLOR_SYNTAX, "You are not in range of the dumpbox area.");
		}
		if(PlayerHasCrate[playerid] > 0) 
		{
			return SCM(playerid, COLOR_SYNTAX, "You must throw it in the trashmaster.");
		}
		
		if(pData[playerid][pGarbage] == 2 && IsPlayerInRangeOfPoint(playerid, 5.0, 953.1730, -1586.6686, 12.5432))
		{
			return SCM(playerid, COLOR_SYNTAX, "This is not your next point go to that point and getgarbage");
		}
		if(pData[playerid][pGarbage] == 2 && IsPlayerInRangeOfPoint(playerid, 5.0, 1336.3359, -1842.8516, 12.6641))
		{
			return SCM(playerid, COLOR_SYNTAX, "This is not your next point go to that point and getgarbage");
		}
		if(pData[playerid][pGarbage] == 2 && IsPlayerInRangeOfPoint(playerid, 5.0, 1315.0940, -876.3928, 38.8022))
		{
			return SCM(playerid, COLOR_SYNTAX, "This is not your next point go to that point and getgarbage");
		}
		if(pData[playerid][pGarbage] == 3 && IsPlayerInRangeOfPoint(playerid, 5.0, 1420.1230,-1355.8138,13.5639))
		{
			return SCM(playerid, COLOR_SYNTAX, "This is not your next point go to that point and getgarbage");
		}
		if(pData[playerid][pGarbage] == 3 && IsPlayerInRangeOfPoint(playerid, 5.0, 1616.7582,-1201.4191,19.8070))
		{
			return SCM(playerid, COLOR_SYNTAX, "This is not your next point go to that point and getgarbage");
		}
		if(pData[playerid][pGarbage] == 3 && IsPlayerInRangeOfPoint(playerid, 5.0,1599.7347,-1292.3500,17.4531))
		{
			return SCM(playerid, COLOR_SYNTAX, "This is not your next point go to that point and getgarbage");
		}
		if(pData[playerid][pGarbage] == 3 && IsPlayerInRangeOfPoint(playerid, 5.0, 2441.8679,-1979.5502,13.1042))
		{
			return SCM(playerid, COLOR_SYNTAX, "This is not your next point go to that point and getgarbage");
		}
		if(pData[playerid][pGarbage] == 3 && IsPlayerInRangeOfPoint(playerid, 5.0, 1849.4033,-1849.3459,13.1358))
		{
			return SCM(playerid, COLOR_SYNTAX, "This is not your next point go to that point and getgarbage");
		}
		
	
		ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
		ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
		ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0, 1);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		
		SetPlayerAttachedObject(playerid, 9, 1265, 1, 0.427999, 0.490999, -0.011004, -51.600051, 86.199821, -39.600048, 0.505999, 0.736000, 1.183001);
		SendClientMessage(playerid, COLOR_WHITE, "Put the black bag at the back of the Garbage Truck.{00FF00}(/throwbag)");

		PlayerHasCrate[playerid] = 1;
	}if(pData[playerid][pSecondJob] == JOB_GARBAGEMAN)
	{
		if(pData[playerid][pGarbage] == 0)
		{
			return SendClientMessage(playerid, COLOR_GREY, "You're not doing a garbage run!");
		}
		if(!IsPlayerInGarbageArea(playerid))
		{
			return SCM(playerid, COLOR_SYNTAX, "You are not in range of the dumpbox area.");
		}
		if(PlayerHasCrate[playerid] > 0) 
		{
			return SCM(playerid, COLOR_SYNTAX, "You must throw it in the trashmaster.");
		}
		
		if(pData[playerid][pGarbage] == 2 && IsPlayerInRangeOfPoint(playerid, 5.0, 953.1730, -1586.6686, 12.5432))
		{
			return SCM(playerid, COLOR_SYNTAX, "This is not your next point go to that point and getgarbage");
		}
		if(pData[playerid][pGarbage] == 2 && IsPlayerInRangeOfPoint(playerid, 5.0, 1336.3359, -1842.8516, 12.6641))
		{
			return SCM(playerid, COLOR_SYNTAX, "This is not your next point go to that point and getgarbage");
		}
		if(pData[playerid][pGarbage] == 2 && IsPlayerInRangeOfPoint(playerid, 5.0, 1315.0940, -876.3928, 38.8022))
		{
			return SCM(playerid, COLOR_SYNTAX, "This is not your next point go to that point and getgarbage");
		}
		if(pData[playerid][pGarbage] == 3 && IsPlayerInRangeOfPoint(playerid, 5.0, 1420.1230,-1355.8138,13.5639))
		{
			return SCM(playerid, COLOR_SYNTAX, "This is not your next point go to that point and getgarbage");
		}
		if(pData[playerid][pGarbage] == 3 && IsPlayerInRangeOfPoint(playerid, 5.0, 1616.7582,-1201.4191,19.8070))
		{
			return SCM(playerid, COLOR_SYNTAX, "This is not your next point go to that point and getgarbage");
		}
		if(pData[playerid][pGarbage] == 3 && IsPlayerInRangeOfPoint(playerid, 5.0,1599.7347,-1292.3500,17.4531))
		{
			return SCM(playerid, COLOR_SYNTAX, "This is not your next point go to that point and getgarbage");
		}
		if(pData[playerid][pGarbage] == 3 && IsPlayerInRangeOfPoint(playerid, 5.0, 2441.8679,-1979.5502,13.1042))
		{
			return SCM(playerid, COLOR_SYNTAX, "This is not your next point go to that point and getgarbage");
		}
		if(pData[playerid][pGarbage] == 3 && IsPlayerInRangeOfPoint(playerid, 5.0, 1849.4033,-1849.3459,13.1358))
		{
			return SCM(playerid, COLOR_SYNTAX, "This is not your next point go to that point and getgarbage");
		}
		
	
		ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
		ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
		ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0, 1);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		
		SetPlayerAttachedObject(playerid, 9, 1265, 1, 0.427999, 0.490999, -0.011004, -51.600051, 86.199821, -39.600048, 0.505999, 0.736000, 1.183001);
		SendClientMessage(playerid, COLOR_WHITE, "Put the black bag at the back of the Garbage Truck.{00FF00}(/throwbag)");

		PlayerHasCrate[playerid] = 1;
	}
	return 1;
}



CMD:throwbag(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid = GetNearbyVehicle(playerid);
	if(PlayerHasCrate[playerid] == 0)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "go to the point and get the garbage");
	}
	new i = GetNearbyVehicle(playerid);

	if((IsCourierVehicle2(i) && IsVehicleOccupied(i)) || !IsCourierVehicle2(i))
		return SCM(playerid, SERVER_COLOR, "Error:"WHITE" You are not near the Garbage Collector Vehicle (that is not occupied).");
	
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(playerid, 9);
	SetPlayerAttachedObject(playerid, 9, 1265, 6, 0.291000, -0.128000, -0.020004, -84.100044, -78.900177, -37.999992, 0.505999, 0.736000, 1.183001);
	PlayerHasCrate[playerid] = 0;
	RemovePlayerAttachedObject(playerid, 9);

	VehicleObject[vehicleid] = CreateDynamicObject(1220, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	AttachDynamicObjectToVehicle(VehicleObject[vehicleid], vehicleid, 0.0, -1.5, 0.0, 0.0, 0.0, 0.0);
	ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	pData[playerid][pGarbage] = 2;
	
	if(pData[playerid][pGarbage] == 2)
	{
	    switch(random(4))
		{
			case 0:
			{
				SetPlayerCheckpoint(playerid, 1420.1230,-1355.8138,13.5639, 3.0);
				SendClientMessage(playerid, COLOR_WHITE, "Now, go to your second pickup destination. (Check your minimap)");
				pData[playerid][pGarbage] = 3;
			}
			case 1:
			{
				SetPlayerCheckpoint(playerid,1599.7347,-1292.3500,17.4531, 3.0);
				SendClientMessage(playerid, COLOR_WHITE, "Now, go to your second pickup destination. (Check your minimap)");
				pData[playerid][pGarbage] = 3;
			}
			case 2:
			{
				SetPlayerCheckpoint(playerid, 1616.7582,-1201.4191,19.8070, 3.0);
				SendClientMessage(playerid, COLOR_WHITE, "Now, go to your second pickup destination. (Check your minimap)");
				pData[playerid][pGarbage] = 3;
			}
			case 3:
			{
				SetPlayerCheckpoint(playerid, 2441.8679,-1979.5502,13.1042, 3.0);
				SendClientMessage(playerid, COLOR_WHITE, "Now, go to your second pickup destination. (Check your minimap)");
				pData[playerid][pGarbage] = 3;
			}
			case 4:
			{
				SetPlayerCheckpoint(playerid,1849.4033,-1849.3459,13.1358, 3.0);
				SendClientMessage(playerid, COLOR_WHITE, "Now, go to your second pickup destination. (Check your minimap)");
				pData[playerid][pGarbage] = 3;
			}
			
		}	
	}
	if(pData[playerid][pGarbage] == 3)
	{
	    switch(random(3))
		{
			case 0:
			{
				SetPlayerCheckpoint(playerid,569.5731,-1765.9165,14.3878, 3.0);
				SendClientMessage(playerid, COLOR_WHITE, "Now, go to your last pickup destination. (Check your minimap)");
				pData[playerid][pGarbage] = 4;
			}
			case 1:
			{
				SetPlayerCheckpoint(playerid,912.0168,-836.8684,92.2701, 3.0);
				SendClientMessage(playerid, COLOR_WHITE, "Now, go to your last pickup destination. (Check your minimap)");
				pData[playerid][pGarbage] = 4;
			}
			case 2:
			{
				SetPlayerCheckpoint(playerid, 862.6306,-1382.4073,13.6819, 3.0);
				SendClientMessage(playerid, COLOR_WHITE, "Now, go to your last pickup destination. (Check your minimap)");
				pData[playerid][pGarbage] = 4;
			}
			case 3:
			{
				SetPlayerCheckpoint(playerid, 2441.8679,-1979.5502,13.1042, 3.0);
				SendClientMessage(playerid, COLOR_WHITE, "Now, go to your last pickup destination. (Check your minimap)");
				pData[playerid][pGarbage] = 4;
			}
		}	
	}
	if(pData[playerid][pGarbage] == 4)
	{
		SetPlayerCheckpoint(playerid,-78.2186,-1568.7053,2.6107, 10.0);
		SendClientMessage(playerid, COLOR_WHITE, "Now, go dumpsite to dump the garbage");
		pData[playerid][pGarbage] = 4;
	}

	
	return 1;
}


CMD:mine(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!PlayerHasJob(playerid, JOB_MINER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Miner.");
	}
	if(pData[playerid][pMiningTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are mining already. Wait until you are done.");
	}
	if(pData[playerid][pMiningRock] > 0 && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to drop off your current rock first.");
	}
	if(!IsPlayerInMiningArea(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the mining area.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be onfoot in order to use this command.");
	}

    GameTextForPlayer(playerid, "~w~Mining...", 6000, 3);
    ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.1, 1, 0, 0, 0, 0, 1);

	DisablePlayerCheckpoint(playerid);
	SetPlayerAttachedObject(playerid, 9, 337, 6);

	pData[playerid][pMiningTime] = 8;
	return 1;
}

CMD:dc(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::vip(playerid, params);
}

CMD:vip(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
	if(!enabledVip)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The VIP Chat is disabled by an administrator.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(v)ip [vip chat]");
	}
    if(pData[playerid][pToggleVIP])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the VIP chat as you have it toggled.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pDonator] > 0 && !pData[i][pToggleVIP])
	    {
			SM(i, COLOR_ORANGE, "** %s Donator %s: %s **", GetDonatorRank(pData[playerid][pDonator]), GetRPName(playerid), params);
		}
	}
	new szString[528];
	format(szString, sizeof(szString), "VIP:%s: %s", GetRPName(playerid), params);
	SendDiscordMessage(39, szString);
	return 1;
}
CMD:viplocker(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
	if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
    {
        return SCM(playerid, COLOR_SYNTAX, "You cant get a vip gun when you are weapon restricted or level 1.");
    }
	if(!IsPlayerInRangeOfPoint(playerid, 6.0, 1989.1609,1984.7026,2714.0569))
	{
		return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You are not in range of the VIP.");
	}
 	if(pData[playerid][pDonator] == 1)
	{
		ShowPlayerDialog(playerid, DIALOG_VIPLOCKER, DIALOG_STYLE_LIST, "Bronze Locker worth $10,000 (per gun)", "Baseball\nPistol", "Select", "Cancel");
	}
 	if(pData[playerid][pDonator] == 2)
	{
		ShowPlayerDialog(playerid, DIALOG_VIPLOCKER1, DIALOG_STYLE_LIST, "Silver Locker worth $20,000 (per gun)", "Baseball\nPistol\nKatana\nMP5", "Select", "Cancel");
	}
	else if(pData[playerid][pDonator] == 3)
	{
		ShowPlayerDialog(playerid, DIALOG_VIPLOCKER2, DIALOG_STYLE_LIST, "Diamond Locker worth $30,000 (per gun)", "Baseball\nPistol\nKatana\nMP5\nShotgun", "Select", "Cancel");
	}
	return 1;
}

CMD:vipcolor(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}

	if(!pData[playerid][pVIPColor])
	{
        pData[playerid][pVIPColor] = 1;
	    SCM(playerid, COLOR_AQUA, "** You have enabled the VIP nametag.");
	}
	else
	{

	    pData[playerid][pVIPColor] = 0;
	    SCM(playerid, COLOR_AQUA, "** You have disabled the VIP nametag.");
	}

	return 1;
}
CMD:vipskin(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
	if(pData[playerid][pLevel] == 1)
	{
		return SCM(playerid, COLOR_RED, "[ERROR]: You must be level 2 in order to change a clothes");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 6.0, 1968.6278,1980.5131,2714.0464))
	{
		return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You are not in range of the VIP.");
	}
	
	ShowPlayerSelectionMenu(playerid, MODEL_SELECTION_CLOTHES1, "Clothes Shop", clothingRareSkins, sizeof(clothingRareSkins));
	return 1;
}
CMD:viptoys(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 6.0, 1968.6278,1980.5131,2714.0464))
	{
		return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You are not in range of the VIP.");
	}
	pData[playerid][pCategory] = 4;
	ShowDialogToPlayer(playerid, DIALOG_BUYCLOTHINGTYPE1);

	return 1;
}

CMD:vipinfo(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new time = pData[playerid][pVIPTime] - gettime(), cooldown[24] = "{33CC33}No cooldown", string[32];

	if(!pData[playerid][pDonator])
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a VIP subscription.");
	}

	SCM(playerid, COLOR_LIGHTORANGE, "My Package:");

	if(1 <= time <= 3599)
	{
		format(string, sizeof(string), "{AA3333}%i minutes", time / 60);
	}
	else if(3600 <= time <= 86399)
	{
	    format(string, sizeof(string), ""SVRCLR"%i hours", time / 3600);
	}
	else
	{
	    if(time / 86400 <= 7)
		{
	        format(string, sizeof(string), "{FFD700}%i days", time / 86400);
	    }
		else
		{
		    format(string, sizeof(string), "{33CC33}%i days", time / 86400);
		}
	}

	if(pData[playerid][pVIPCooldown] > gettime())
	{
	    time = pData[playerid][pVIPCooldown] - gettime();

	    if(time > 3600) {
	        format(cooldown, sizeof(cooldown), "{F7A763}%i hours", time / 3600);
		} else {
			format(cooldown, sizeof(cooldown), "{F7A763}%i minutes", time / 60);
	    }
	}

	SM(playerid, COLOR_WHITE, "Package: {C2A2DA}%s Donator", GetDonatorRank(pData[playerid][pDonator]));
	SM(playerid, COLOR_WHITE, "Expires In: %s", string);
	SM(playerid, COLOR_WHITE, "Next Invite: %s", cooldown);
	return 1;
}
CMD:setfare(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new amount;

	if(!PlayerHasJob(playerid, JOB_TAXIDRIVER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a Taxi Driver.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setfare [amount]");
	}
	if(!(100 <= amount <= 500))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The fare must range between $100 and $500.");
	}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 420 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 438)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in a taxi type vehicle.");
	}

	if(amount == 0)
	{
	    if(pData[playerid][pTaxiFare] == 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The fare is already set to zero.");
	    }

	    pData[playerid][pTaxiFare] = 0;
	    SCM(playerid, COLOR_YELLOW, "** You have set the fare to $0 and went off duty.");
	}
	else
	{
	    if(pData[playerid][pTaxiFare] == amount)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "The fare is already set to this amount.");
	    }

	    pData[playerid][pTaxiFare] = amount;
	    SMA(COLOR_YELLOW, "** Taxi driver %s is now on duty, fare: $%i. /call 8294 for a ride.", GetRPName(playerid), amount);
	}

	return 1;
}

CMD:createfaction(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new type[12], name[48], type_id = -1;

    if(!pData[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[12]s[48]", type, name))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /createfaction [type] [name]");
		SCM(playerid, COLOR_GREY2, "List of types: Police, Sheriff, Medic, News, Government, Hitman, Federal, Mechanic, taco");
		return 1;
	}

	if(!strcmp(type, "police", true))
	{
	    type_id = FACTION_POLICE;
	}
	else if(!strcmp(type, "medic", true))
	{
	    type_id = FACTION_MEDIC;
	}
	else if(!strcmp(type, "news", true))
	{
	    type_id = FACTION_NEWS;
	}
	else if(!strcmp(type, "government", true))
	{
	    type_id = FACTION_GOVERNMENT;
	}
	else if(!strcmp(type, "hitman", true))
	{
	    type_id = FACTION_HITMAN;
	}
	else if(!strcmp(type, "federal", true))
	{
	    type_id = FACTION_FEDERAL;
	}
	else if(!strcmp(type, "mechanic", true))
	{
	    type_id = FACTION_MECHANIC;
	}
	else if(!strcmp(type, "doc", true))
	{
	    type_id = FACTION_DOC;
	}
	else if(!strcmp(type, "sheriff", true))
	{
	    type_id = FACTION_SHERIFF;
	}
	else if(!strcmp(type, "taco", true))
	{
		type_id = FACTION_TACO;
	}
	if(type_id == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}

	for(new i = 1; i < MAX_FACTIONS; i ++)
	{
	    if(!FactionInfo[i][fType])
	    {
	        SetupFaction(i, name, type_id);

	        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has created a {F7A763}%s"WHITE" faction named '%s'.", GetRPName(playerid), factionTypes[type_id], name);
	        SM(playerid, COLOR_WHITE, "** This faction's ID is %i. /editfaction to edit.", i);
	        return 1;
		}
	}

	return 1;
}

CMD:editfaction(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new factionid, option[12], param[48];

	if(!pData[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[12]S()[48]", factionid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Name, Shortname, Type, Color, RankCount, RankName, Skin, Paycheck, Leader, Locker, TurfTokens");
		return 1;
	}
	if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}

	if(!strcmp(option, "name", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [name] [text]");
		}

		strcpy(FactionInfo[factionid][fName], param, 48);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET name = '%e' WHERE id = %i", param, factionid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadLocker(factionid);
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the name of faction ID %i to '%s'.", GetRPName(playerid), factionid, param);
	}
	else if(!strcmp(option, "shortname", true))
	{
	    if(isnull(param) || strlen(param) > 24)
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editfaction [factionid] [shortname] [text]");
		}

		strcpy(FactionInfo[factionid][fShortName], param, 24);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET shortname = '%e' WHERE id = %i", param, factionid);
		mysql_tquery(connectionID, queryBuffer);

  		ReloadLocker(factionid);
		SendAdminMessage(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" has set the short name of faction ID %i to '%s'.", GetRPName(playerid), factionid, param);
	}
	else if(!strcmp(option, "type", true))
	{
	    new type_id;

	    if(isnull(param))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [type] [option]");
			SCM(playerid, COLOR_GREY2, "List of types: Police, Sheriff, Medic, News, Government, Hitman, Federal, Mechanic, taco");
			return 1;
		}

		if(!strcmp(param, "police", true))
		{
		    type_id = FACTION_POLICE;
		}
		else if(!strcmp(param, "medic", true)) {
		    type_id = FACTION_MEDIC;
		} else if(!strcmp(param, "news", true)) {
		    type_id = FACTION_NEWS;
		} else if(!strcmp(param, "government", true)) {
		    type_id = FACTION_GOVERNMENT;
		} else if(!strcmp(param, "hitman", true)) {
		    type_id = FACTION_HITMAN;
		} else if(!strcmp(param, "federal", true)) {
		    type_id = FACTION_FEDERAL;
		} else if(!strcmp(param, "mechanic", true)) {
		    type_id = FACTION_MECHANIC;
		} else if(!strcmp(param, "doc", true)) {
		    type_id = FACTION_DOC;
		} else if(!strcmp(param, "sheriff", true)) {
		    type_id = FACTION_SHERIFF;
		}else if(!strcmp(param, "taco", true)) {
		    type_id = FACTION_TACO;
		}

		
		if(type_id == -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		FactionInfo[factionid][fType] = type_id;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET type = %i WHERE id = %i", type_id, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the type of faction ID %i to %s.", GetRPName(playerid), factionid, factionTypes[type_id]);
	}
	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [color] [0xRRGGBBAA]");
		}

		FactionInfo[factionid][fColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET color = %i WHERE id = %i", FactionInfo[factionid][fColor], factionid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the {%06x}color{FF6347} of faction ID %i.", GetRPName(playerid), color >>> 8, factionid);
	}
	else if(!strcmp(option, "rankcount", true))
	{
	    new ranks;

	    if(sscanf(param, "i", ranks))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [rankcount] [amount]");
		}
		if(!(1 <= ranks <= MAX_FACTION_RANKS))
		{
		    return SM(playerid, COLOR_SYNTAX, "The amount of ranks must range from 1 to %i.", MAX_FACTION_RANKS);
		}

		FactionInfo[factionid][fRankCount] = ranks;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET rankcount = %i WHERE id = %i", ranks, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the rank count of faction ID %i to %i.", GetRPName(playerid), factionid, ranks);
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Names:");

	        for(new i = 0; i < FactionInfo[factionid][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[factionid][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s", i, FactionRanks[factionid][i]);
	        }

	        return SM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [rankname] [slot (0-%i)] [name]", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
		}

	    strcpy(FactionRanks[factionid][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", factionid, rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set rank %i's name of faction ID %i to '%s'.", GetRPName(playerid), rankid, factionid, rank);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;

	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SCM(playerid, SERVER_COLOR, "Faction Skins:");

	        for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	        {
	            if(FactionInfo[factionid][fSkins][i] == 0)
	            	SM(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SM(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, FactionInfo[factionid][fSkins][i]);
	        }

	        return SM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [skin] [slot (1-%i)] [skinid]", MAX_FACTION_SKINS);
	    }
	    if(!(1 <= slot <= MAX_FACTION_SKINS))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid skin.");
		}

		slot--;

		FactionInfo[factionid][fSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", factionid, slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "** You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "paycheck", true))
	{
	    new rankid, amount;

        if(FactionInfo[factionid][fType] == FACTION_HITMAN)
		{
	    	return SCM(playerid, COLOR_SYNTAX, "You can't set the paychecks for hitman factions.");
		}
	    if(sscanf(param, "ii", rankid, amount))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Paychecks:");

	        for(new i = 0; i < FactionInfo[factionid][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[factionid][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s ($%i)", i, FactionRanks[factionid][i], FactionInfo[factionid][fPaycheck][i]);
	        }

	        return SM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [paycheck] [slot (0-%i)] [amount]", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
		}

	    FactionInfo[factionid][fPaycheck][rankid] = amount;

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionpay VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE amount = %i", factionid, rankid, amount, amount);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set rank %i's paycheck of faction ID %i to $%i.", GetRPName(playerid), rankid, factionid, amount);
	}
	else if(!strcmp(option, "leader", true))
	{
	    new leader[MAX_PLAYER_NAME];

	    if(sscanf(param, "s[24]", leader))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [leader] [name]");
	        SCM(playerid, COLOR_SYNTAX, "This only updates the text for the leader's name in /factions. Use /setfaction to appoint someone as faction leader.");
			return 1;
		}

		strcpy(FactionInfo[factionid][fLeader], leader, MAX_PLAYER_NAME);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET leader = '%e' WHERE id = %i", leader, factionid);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the leader of faction ID %i to %s.", GetRPName(playerid), factionid, leader);
	}
	else if(!strcmp(option, "locker", true))
	{
	    SCM(playerid, COLOR_WHITE, "This option has been removed in favor of the dynamic locker system.");
	    SCM(playerid, COLOR_WHITE, "Use /dynamichelp for a list of commands related to dynamic lockers.");
	}
    else if(!strcmp(option, "turftokens", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editfaction [factionid] [turftokens] [amount]");
		}
		if(FactionInfo[factionid][fType] != FACTION_POLICE)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can only set the turf tokens for police factions.");
		}

		FactionInfo[factionid][fTurfTokens] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = %i WHERE id = %i", amount, factionid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the turf tokens of faction ID %i to %i.", GetRPName(playerid), factionid, amount);
	}

	return 1;
}

CMD:purgefaction(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new factionid;

	if(!pData[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /purgefaction [factionid]");
	}
	if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pFaction] == factionid)
	    {
	        ResetPlayerWeaponsEx(i);
	        SM(i, COLOR_LIGHTRED, "The faction you were apart of has been purged by an administrator.");
            SetPlayerSkin(i, 230);

	        pData[i][pFaction] = -1;
	        pData[i][pFactionRank] = 0;
	        pData[i][pDivision] = -1;
	        pData[i][pDuty] = 0;
		}
	}

	strcpy(FactionInfo[factionid][fLeader], "Pending", MAX_PLAYER_NAME);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE faction = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET leader = 'Pending' WHERE id = %i", factionid);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has purged faction %s.", GetRPName(playerid), FactionInfo[factionid][fName]);
	return 1;
}

CMD:removefaction(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new factionid;

	if(!pData[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removefaction [factionid]");
	}
	if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has deleted faction %s.", GetRPName(playerid), FactionInfo[factionid][fName]);
	RemoveFaction(factionid);
	return 1;
}

CMD:setfaction(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, factionid, rankid;

	if(!pData[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uiI(-1)", targetid, factionid, rankid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setfaction [playerid] [factionid (-1 = none)] [rank (optional)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(0 <= factionid < MAX_FACTIONS) || (factionid >= 0 && FactionInfo[factionid][fType] == FACTION_NONE))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}
	if((factionid != -1 && !(-1 <= rankid < FactionInfo[factionid][fRankCount])))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
	}

	if(factionid == -1)
	{
     	ResetPlayerWeaponsEx(targetid);
        SetPlayerSkin(targetid, 230);

        pData[targetid][pFaction] = -1;
        pData[targetid][pFactionRank] = 0;
        pData[targetid][pDivision] = -1;
        pData[targetid][pDuty] = 0;

		SM(targetid, COLOR_AQUA, "%s has removed you from your faction.", GetRPName(playerid));
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has removed %s from their faction.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
		if(rankid == -1)
		{
	    	rankid = FactionInfo[factionid][fRankCount] - 1;
		}

	 

		pData[targetid][pFaction] = factionid;
		pData[targetid][pFactionRank] = rankid;
		pData[targetid][pDivision] = -1;

		SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"%s{CCFFFF} in %s.", GetRPName(playerid), FactionRanks[factionid][rankid], FactionInfo[factionid][fName]);
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has made %s a %s in %s.", GetRPName(playerid), GetRPName(targetid), FactionRanks[factionid][rankid], FactionInfo[factionid][fName]);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = %i, factionrank = %i, division = %i WHERE uid = %i", factionid, rankid, pData[playerid][pDivision], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:factions(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new string[(1024 * 2)], color, idx;

	for(new factionid = 1; factionid < MAX_FACTIONS; factionid++)
	{
		if(FactionInfo[factionid][fType] != FACTION_NONE) 
		{
			if(FactionInfo[factionid][fColor] == -1 || FactionInfo[factionid][fColor] == -256)
			{
				color = 0xC8C8C8FF;
			}
			else
			{
				color = FactionInfo[factionid][fColor];
			}

			if(FactionInfo[factionid][fType] == FACTION_HITMAN && !IsPlayerAdmin(playerid))
			{
				format(string, sizeof(string), "%s"WHITE"%i\t{%06x}%s"WHITE"\tConfidential\n", string, factionid, color >>> 8, FactionInfo[factionid][fName]);
			}
			else
			{
				format(string, sizeof(string), "%s"WHITE"%i\t{%06x}%s"WHITE"\t%s\n", string, factionid, color >>> 8, FactionInfo[factionid][fName], FactionInfo[factionid][fLeader]);
			}
			idx++;
		}
	}

	if(idx > 0) {
		format(string, sizeof(string), "ID\tName\tLeader\n%s", string);
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "Factions", string, "Close", "");
	} else {
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, "Factions", "There are no factions created.", "Close", "");
	}
	return 1;
}

CMD:channel(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new channel;

	if(!pData[playerid][pWalkieTalkie])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a Portable Radio.");
	}
	if(sscanf(params, "i", channel))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /channel [freq]");
	}
	if(!(0 <= channel <= 9999999))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The channel must range from 0 to 9999999.");
	}

	pData[playerid][pChannel] = channel;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET channel = %i WHERE uid = %i", channel, pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	if(channel == 0)
	{
	    SCM(playerid, COLOR_WHITE, "** You have set the channel to 0 and disabled your Portable Radio.");
	}
	else
	{
	    SM(playerid, COLOR_WHITE, "** Channel set to %i, use /pr to broadcast over this channel.", channel);
	}

	return 1;
}

CMD:pr(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(!pData[playerid][pWalkieTalkie])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a Portable Radio.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /pr [Portable Radio]");
	}
	if(!pData[playerid][pChannel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your Portable Radio is not tuned into any channel. /channel to set one.");
	}
    if(pData[playerid][pToggleWT])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in your Portable Radio as you have it toggled.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}
	if(strfind(params, "admin", true) != -1 || strfind(params, "helper", true) != -1 || strfind(params, "bug", true) != -1 ||  
	strfind(params, "gz", true) != -1 || strfind(params, "greenzone", true) != -1 || strfind(params, "nonrp", true) != -1 || 
	strfind(params, "safezone", true) != -1 || strfind(params, "safe zone", true) != -1 || strfind(params, "green zone", true) != -1 || 
	strfind(params, "dmer", true) != -1 || strfind(params, "anghel", true) != -1 || 
	strfind(params, "rp", true) != -1 || strfind(params, "discord", true) != -1 || strfind(params, "roleplay", true) != -1 || 
	strfind(params, "mod", true) != -1 || strfind(params, "discordia", true) != -1 ||
    strfind(params, "vdm", true) != -1 || 
	strfind(params, "randompunching", true) != -1 || strfind(params, "random punching", true) != -1 || strfind(params, "random punch", true) != -1 ||
	strfind(params, "mods", true) != -1 || strfind(params, "cleo", true) != -1 || strfind(params, "meta", true) != -1 || 
	strfind(params, "atems", true) != -1 || strfind(params, "delay", true) != -1 || strfind(params, "rolyo", true) != -1 || 
	strfind(params, "server", true) != -1 || strfind(params, "(ooc)", true) != -1|| strfind(params, "groupchat", true) != -1|| 
	strfind(params, "dc", true) != -1|| strfind(params, "gc", true) != -1)
	{
		pData[playerid][pMuted] = 20;
		GivePlayerCash(playerid, -200);
		SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for 20 seconds due to suspected to say OOC TERM IN IC.");
		SAM(COLOR_YELLOW, ""RED"SECURITY[BOT] %s"WHITE"[%i] is using an words for ooc in ic [%s].", GetRPName(playerid), playerid, params);
		new szString[528];
		format(szString, sizeof(szString), "%s [%i] is using an words for ooc in ic [%s].", GetRPName(playerid), playerid, params);
		SendDiscordMessage(32, szString);
		return 1;
	}	
	foreach(new i : Player)
	{
		if(pData[i][pWalkieTalkie] && pData[i][pChannel] == pData[playerid][pChannel] && !pData[i][pToggleWT])
		{
		    if(strlen(params) > MAX_SPLIT_LENGTH)
		    {
				SM(i, 0x6DFB6DFF, "** Radio (%i mhz) ** %s: %.*s...", pData[playerid][pChannel], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
				SM(i, 0x6DFB6DFF, "** Radio (%i mhz) ** %s: ...%s", pData[playerid][pChannel], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, 0x6DFB6DFF, "** Radio (%i mhz) ** %s: %s", pData[playerid][pChannel], GetRPName(playerid), params);
			}
		}
	}
	new szString[528];
	format(szString, sizeof(szString), "Radio (%i mhz) ** %s: %s", pData[playerid][pChannel], GetRPName(playerid), params);
	SendDiscordMessage(5, szString);
    SetPlayerBubbleText(playerid, 5.0, 0x6DFB6DFF, "(Radio) %s",params);
	return 1;
}

CMD:g(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new string[64], szString[128];
    new price = strlen(params) * 10;
    if(pData[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Cannot use this command while in-jail.");
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /g [global chat]");
	}
	if(!enabledGlobal && pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The global channel is disabled at the moment.");
	}
	if(pData[playerid][pGlobalMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are muted from speaking in this channel.");
	}
    if(pData[playerid][pToggleGlobal])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the global chat as you have it toggled.");
	}
	if(gettime() - pData[playerid][pLastGlobal] < 30)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only speak in this channel every 30 seconds. Please wait %i more seconds.", 30 - (gettime() - pData[playerid][pLastGlobal]));
	}

    else if((!isnull(pData[playerid][pCustomTitle]) && strcmp(pData[playerid][pCustomTitle], "None", true) != 0 && strcmp(pData[playerid][pCustomTitle], "0", true) != 0) && strcmp(pData[playerid][pCustomTitle], "NULL", true) != 0) {
	    new color;
		if(pData[playerid][pCustomTColor] == -1 || pData[playerid][pCustomTColor] == -256)
		{
	    	color = 0xC8C8C8FF;
		}
		else
		{
		    color = pData[playerid][pCustomTColor];
		}
	    format(string, sizeof(string), "{%06x}%s{B8FFBC}", color >>> 8, pData[playerid][pCustomTitle]);
	}
	else if(pData[playerid][pHelper] > 0)
	{
	    format(string, sizeof(string), "%s", GetHelperRank(playerid));
	}
	else if(pData[playerid][pFormerAdmin])
	{
	    string = "Former Admin";
	}
	else if(pData[playerid][pDonator] > 0)
	{

	    format(string, sizeof(string), "%s Donator", GetDonatorRank(pData[playerid][pDonator]));
	}
	else if(pData[playerid][pLevel] >= 2) {
	    format(string, sizeof(string), "Level %i Player", pData[playerid][pLevel]);
	}
	else
	{
        string = "Newbie";
	}
	foreach(new i : Player)
	{
		if(!pData[i][pToggleGlobal])
		{
		    if(strlen(params) > MAX_SPLIT_LENGTH)
		    {
		        SCMf(i, COLOR_GLOBAL, "(( "GREY"OOC:"GLOBAL" %s %s: %.*s...))", string, GetRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SCMf(i, COLOR_GLOBAL, "(( "GREY"OOC:"GLOBAL" %s %s: ...%s ))", string, GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SCMf(i, COLOR_GLOBAL, "(( "GREY"OOC:"GLOBAL" %s %s: %s ))", string, GetRPName(playerid), params);
			}
		}
	}
	format(string, sizeof(string), "~r~-$%i", price);
	GameTextForPlayer(playerid, string, 5000, 1);
	
	format(szString, sizeof(szString), "GLOBAL OOC: %s %s: %s", string, GetRPName(playerid), params);
	SendDiscordMessage(0, szString);
	GivePlayerCash(playerid, -price);
	if(pData[playerid][pAdmin] < 2 && !pData[playerid][pFormerAdmin])
	{
		pData[playerid][pLastGlobal] = gettime();
	}

	return 1;
}

CMD:fc(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /fc [faction chat]");
	}
	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
    if(pData[playerid][pToggleFaction])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the faction chat as you have it toggled.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pFaction] == pData[playerid][pFaction] && !pData[i][pToggleFaction])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
		        SM(i, COLOR_FACTIONCHAT, "(( [%s] %s: %.*s... ))", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SM(i, COLOR_FACTIONCHAT, "(( [%s] %s: ...%s ))", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_FACTIONCHAT, "(( [%s] %s: %s ))", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
			}
		}
	}
	new szString[528];
	format(szString, sizeof(szString), "(( %s %s: %.*s...  ))", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	SendDiscordMessage(8, szString);
	return 1;
}

CMD:div(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /div [division chat]");
	}
	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(pData[playerid][pDivision] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any divisions in your faction.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pFaction] == pData[playerid][pFaction] && pData[i][pDivision] == pData[playerid][pDivision])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
		        SM(i, COLOR_LIGHTORANGE, "** [%s] %s %s: %.*s... **", FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
		        SM(i, COLOR_LIGHTORANGE, "** [%s] %s %s: ...%s **", FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_LIGHTORANGE, "** [%s] %s %s: %s **", FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}

CMD:r(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::radio(playerid, params);
}

CMD:radio(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(r)adio [faction radio]");
	}
	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(pData[playerid][pToggleRadio])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in your radio as you have it toggled.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}
	if(strfind(params, "admin", true) != -1 || strfind(params, "helper", true) != -1 || strfind(params, "bug", true) != -1 ||  
	strfind(params, "gz", true) != -1 || strfind(params, "greenzone", true) != -1 || strfind(params, "nonrp", true) != -1 || 
	strfind(params, "safezone", true) != -1 || strfind(params, "safe zone", true) != -1 || strfind(params, "green zone", true) != -1 || 
	strfind(params, "dmer", true) != -1 || strfind(params, "anghel", true) != -1 || 
	strfind(params, "rp", true) != -1 || strfind(params, "discord", true) != -1 || strfind(params, "roleplay", true) != -1 || 
	strfind(params, "mod", true) != -1 || strfind(params, "discordia", true) != -1 ||
	strfind(params, "vdm", true) != -1 || 
	strfind(params, "randompunching", true) != -1 || strfind(params, "random punching", true) != -1 || strfind(params, "random punch", true) != -1 ||
	strfind(params, "mods", true) != -1 || strfind(params, "cleo", true) != -1 || strfind(params, "meta", true) != -1 || 
	strfind(params, "atems", true) != -1 || strfind(params, "delay", true) != -1 || strfind(params, "rolyo", true) != -1 || 
	strfind(params, "server", true) != -1 || strfind(params, "(ooc)", true) != -1|| strfind(params, "groupchat", true) != -1|| 
	strfind(params, "dc", true) != -1|| strfind(params, "gc", true) != -1)
	{
		pData[playerid][pMuted] = 20;
		GivePlayerCash(playerid, -200);
		SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for 20 seconds due to suspected to say OOC TERM IN IC.");
		SAM(COLOR_YELLOW, ""RED"SECURITY[BOT] %s"WHITE"[%i] is using an words for ooc in ic [%s].", GetRPName(playerid), playerid, params);
		new szString[528];
		format(szString, sizeof(szString), "%s [%i] is using an words for ooc in ic [%s].", GetRPName(playerid), playerid, params);
		SendDiscordMessage(32, szString);
		return 1;
	}	
	foreach(new i : Player)
	{
	    if(pData[i][pFaction] == pData[playerid][pFaction] && !pData[i][pToggleRadio])
	    {
	        new color = (FactionInfo[pData[playerid][pFaction]][fType] == FACTION_MEDIC) ? (COLOR_DOCTOR) : (COLOR_ROYALBLUE);

			if(strlen(params) > MAX_SPLIT_LENGTH)
			{
			    SM(i, color, "** [%s] [%s] %s: %.*s... **", FactionInfo[pData[playerid][pFaction]][fShortName], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
			    SM(i, color, "** [%s] [%s] %s: ...%s **", FactionInfo[pData[playerid][pFaction]][fShortName], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, color, "** [%s] [%s] %s: %s **", FactionInfo[pData[playerid][pFaction]][fShortName], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
			}
		}
	}

	SetPlayerBubbleText(playerid, 20.0, SERVER_COLOR, "(Radio) %s",params);

	return 1;
}


CMD:d(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new header[128];

    if(isnull(params))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /d [department radio]");
	}
	if(pData[playerid][pFaction] == -1)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You are not apart of any faction at the moment.");
	}
	if(pData[playerid][pToggleRadio])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in your radio as you have it toggled.");
	}
	if(pData[playerid][pInjured])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't speak in /d if you're dead!");
	}
	if(pData[playerid][pTied])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while tied.");
	}
	if(pData[playerid][pCuffed])
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command while cuffed.");
	}

    if(!strcmp(FactionInfo[pData[playerid][pFaction]][fShortName], "None", true))
	{
	    if(pData[playerid][pDivision] == -1)
	    {
		    format(header, sizeof(header), "(%s) %s %s", FactionInfo[pData[playerid][pFaction]][fName], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		}
		else
		{
		    format(header, sizeof(header), "(%s) [%s] %s %s", FactionInfo[pData[playerid][pFaction]][fName], FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		}
	}
	else
	{
		if(pData[playerid][pDivision] == -1)
	    {
		    format(header, sizeof(header), "(%s) %s %s", FactionInfo[pData[playerid][pFaction]][fShortName], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		}
		else
		{
		    format(header, sizeof(header), "(%s) [%s] %s %s", FactionInfo[pData[playerid][pFaction]][fShortName], FactionDivisions[pData[playerid][pFaction]][pData[playerid][pDivision]], FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		}
	}

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_SHERIFF, FACTION_MEDIC, FACTION_GOVERNMENT, FACTION_FEDERAL, FACTION_DOC:
	    {
			foreach(new i : Player)
			{
			    if((!pData[i][pToggleRadio]) && (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_SHERIFF || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOVERNMENT || GetFactionType(i) == FACTION_FEDERAL || GetFactionType(i) == FACTION_DOC))
			    {
			        if(strlen(params) > MAX_SPLIT_LENGTH)
			        {
			        	SM(i, COLOR_YELLOW, "** [%s] %s: %.*s... **", FactionInfo[pData[playerid][pFaction]][fShortName], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
			        	SM(i, COLOR_YELLOW, "** [%s] %s: ...%s **", FactionInfo[pData[playerid][pFaction]][fShortName], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
					}
					else
					{
					    SM(i, COLOR_YELLOW, "** [%s] %s: %s **", FactionInfo[pData[playerid][pFaction]][fShortName], GetRPName(playerid), params);
					}
				}
			}
		}
		default:
		{
		    SCM(playerid, COLOR_SYNTAX, "Your faction is not authorized to speak in department radio.");
		}
	}

    SetPlayerBubbleText(playerid, 20.0, COLOR_WHITE, "[Radio]: %s", params);
	return 1;
}

CMD:faction(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, option[14], param[32];

	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(sscanf(params, "s[14]S()[32]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /faction [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Invite, Kick, Rank, RankName, Roster, Online, Quit, Offlinekick, Respawncars, Skin");
	    return 1;
	}
	if(!strcmp(option, "invite", true))
	{
		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /faction [invite] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(pData[targetid][pFaction] != -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is already apart of a faction.");
		}
		if(pData[targetid][pWeaponRestricted] > 0 || pData[targetid][pLevel] < 2)
		{
			return SCM(playerid, COLOR_SYNTAX, "That player is not allowed to invite reason weapon restricted or level 1.");
		}		
		if(pData[targetid][pGang] >= 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is apart of a gang and therefore can't join a faction.");
		}
		if(pData[targetid][pFgRestricted] > 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "He/she must finish the cooldown.");
		}
		pData[targetid][pFactionOffer] = playerid;
		pData[targetid][pFactionOffered] = pData[playerid][pFaction];

		SM(targetid, COLOR_AQUA, "** %s has invited you to join "SVRCLR"%s{CCFFFF} (/accept faction).", GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
		SM(playerid, COLOR_AQUA, "** You have invited %s to join your faction.", GetRPName(targetid));
	}
	else if(!strcmp(option, "kick", true))
	{
		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /faction [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(pData[targetid][pFaction] != pData[playerid][pFaction])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your faction.");
		}
		if(pData[targetid][pFactionRank] > pData[playerid][pFactionRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
		}
		pData[targetid][pFgRestricted] = 30;
	
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cooldown = %i WHERE uid = %i", 30, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
		
		new szString[528];
		format(szString, sizeof(szString), "%s (uid: %i) kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).",  GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], FactionInfo[pData[playerid][pFaction]][fName], pData[playerid][pFaction], FactionRanks[pData[targetid][pFaction]][pData[targetid][pFactionRank]], pData[targetid][pFactionRank]);
		SendDiscordMessage(19, szString);
		Log_Write("log_faction", "%s (uid: %i) kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], FactionInfo[pData[playerid][pFaction]][fName], pData[playerid][pFaction], FactionRanks[pData[targetid][pFaction]][pData[targetid][pFactionRank]], pData[targetid][pFactionRank]);
		RemovePlayerAttachedObject(playerid, 0);
		ResetPlayerWeaponsEx(targetid);
        SetPlayerSkin(targetid, 230);

        pData[targetid][pFaction] = -1;
        pData[targetid][pFactionRank] = 0;
        pData[targetid][pDivision] = -1;
        pData[targetid][pDuty] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET faction = -1, factionrank = 0, division = -1 WHERE uid = %i", pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has kicked you from the faction.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "You have kicked %s from your faction.", GetRPName(targetid));
	}
	else if(!strcmp(option, "rank", true))
	{
	    new rankid;

		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "ui", targetid, rankid))
		{
		    return SM(playerid, COLOR_SYNTAX, "Usage: /faction [rank] [playerid] [rankid (0-%i)]", pData[playerid][pFactionRank]);
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(rankid < 0 || rankid > pData[playerid][pFactionRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "The rank specified is either invalid or higher than your rank.");
		}
		if(pData[targetid][pFaction] != pData[playerid][pFaction])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your faction.");
		}
		if(pData[targetid][pFactionRank] > pData[playerid][pFactionRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
		}

		pData[targetid][pFactionRank] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET factionrank = %i WHERE uid = %i", rankid, pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has set your rank to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][rankid], rankid);
		SM(playerid, COLOR_AQUA, "You have set %s's rank to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(targetid), FactionRanks[pData[playerid][pFaction]][rankid], rankid);
		Log_Write("log_faction", "%s (uid: %i) has set %s's (uid: %i) rank in %s (id: %i) to %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], FactionInfo[pData[playerid][pFaction]][fName], pData[playerid][pFaction], FactionRanks[pData[playerid][pFaction]][rankid], rankid);
	}
	else if(!strcmp(option, "roster", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin, factionrank FROM users WHERE faction = %i ORDER BY factionrank DESC", pData[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_FACTION_ROSTER, playerid);
	}
	else if(!strcmp(option, "online", true))
	{
	    callcmd::fmembersa(playerid, "\1");
	}
	else if(!strcmp(option, "respawncars", true))
	{
	    if(pData[playerid][pFactionRank] < 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}

 		for(new i = 1; i < MAX_VEHICLES; i ++)
		{
		    if(!IsVehicleOccupied(i) && VehicleInfo[i][vFactionType] == FactionInfo[pData[playerid][pFaction]][fType])
		    {
		        SetVehicleToRespawn(i);
			}
		}

     	SendFactionMessage(pData[playerid][pFaction], COLOR_FACTIONCHAT, "(( %s %s has respawned all unoccupied faction vehicles. ))", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
        SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] has respawned their faction vehicles.", GetRPName(playerid), playerid);
	}
	else if(!strcmp(option, "offlinekick", true))
	{
	    new username[MAX_PLAYER_NAME];

		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "s[24]", username))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /faction [offlinekick] [username]");
		}
		if(IsPlayerOnline(username))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use '/faction kick' instead.");
		}

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, faction, factionrank FROM users WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerOfflineKickFaction", "is", playerid, username);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;
		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
		{
		    return SM(playerid, COLOR_GREY2, "You need to be rank %i to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
		}
	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SCM(playerid, SERVER_COLOR, "Faction Skins:");

	        for(new i = 0; i < MAX_FACTION_SKINS; i ++)
	        {
	            if(FactionInfo[pData[playerid][pFaction]][fSkins][i] == 0)
	            	SM(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SM(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, FactionInfo[pData[playerid][pFaction]][fSkins][i]);
	        }

	        return SM(playerid, COLOR_GREY2, "Usage: /faction [skin] [slot (1-%i)] [skinid]", MAX_FACTION_SKINS);
	    }

	    if(!(1 <= slot <= MAX_FACTION_SKINS))
	    {
	        return SCM(playerid, COLOR_GREY2, "Invalid slot.");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SCM(playerid, COLOR_GREY2, "Invalid skin.");
		}

		slot--;

		FactionInfo[pData[playerid][pFaction]][fSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", pData[playerid][pFaction], slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "** You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "rankname", true))
	{
		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
		{
		    return SM(playerid, COLOR_GREY2, "You need to be rank %i to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
		}
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Names:");

	        for(new i = 0; i < FactionInfo[pData[playerid][pFaction]][fRankCount]; i ++)
	        {
	            if(isnull(FactionRanks[pData[playerid][pFaction]][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s", i, FactionRanks[pData[playerid][pFaction]][i]);
	        }

	        return SM(playerid, COLOR_GREY2, "Usage: /faction [rankname] [slot (0-%i)] [name]", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
	    }
	    if(!(0 <= rankid < FactionInfo[pData[playerid][pFaction]][fRankCount]))
	    {
	        return SCM(playerid, COLOR_GREY2, "Invalid rank.");
		}
	    strcpy(FactionRanks[pData[playerid][pFaction]][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", pData[playerid][pFaction], rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" has set rank %i's name of faction ID %i to '%s'.", GetPlayerNameEx(playerid), rankid, pData[playerid][pFaction], rank);
	}

	return 1;
}

CMD:division(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, divisionid, option[10], param[32];

	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(FactionInfo[pData[playerid][pFaction]][fType] == FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Hitman factions do not have access to the division system.");
	}
	if(sscanf(params, "s[10]S()[32]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /division [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Create, Remove, List, Assign, Kick");
	    return 1;
	}
	if(!strcmp(option, "create", true))
	{
		if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(isnull(param))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /division [create] [name]");
		}

		for(new i = 0; i < MAX_FACTION_DIVISIONS; i ++)
		{
		    if(isnull(FactionDivisions[pData[playerid][pFaction]][i]))
		    {
		        strcpy(FactionDivisions[pData[playerid][pFaction]][i], param, 32);
		        SM(playerid, COLOR_AQUA, "You have created division {FFA763}%s{CCFFFF}. The ID of this division is %i.", param, i);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO divisions VALUES(%i, %i, '%e')", pData[playerid][pFaction], i, param);
		        mysql_tquery(connectionID, queryBuffer);
		        return 1;
			}
		}

		SM(playerid, COLOR_SYNTAX, "Your faction can only have up to %i divisions.", MAX_FACTION_DIVISIONS);
	}
	else if(!strcmp(option, "remove", true))
	{
	    if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "i", divisionid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /division [remove] [divisionid]");
		}
		if(!(0 <= divisionid < MAX_FACTION_DIVISIONS) || isnull(FactionDivisions[pData[playerid][pFaction]][divisionid]))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid division ID.");
	    }

	    foreach(new i : Player)
	    {
	        if(pData[i][pFaction] == pData[playerid][pFaction] && pData[i][pDivision] == divisionid)
	        {
	            pData[i][pDivision] = -1;
	            SCM(i, COLOR_LIGHTRED, "The division you were apart of has been deleted by the faction owner.");
		    }
		}

		SM(playerid, COLOR_AQUA, "You have deleted division {F7A763}%s{CCFFFF} (%i).", FactionDivisions[pData[playerid][pFaction]][divisionid], divisionid);
		FactionDivisions[pData[playerid][pFaction]][divisionid][0] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM divisions WHERE id = %i AND divisionid = %i", pData[playerid][pFaction], divisionid);
		mysql_tquery(connectionID, queryBuffer);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = -1 WHERE faction = %i", pData[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "list", true))
	{
	    SCM(playerid, SERVER_COLOR, "Divisions List:");

	    for(new i = 0; i < MAX_FACTION_DIVISIONS; i ++)
	    {
	        if(isnull(FactionDivisions[pData[playerid][pFaction]][i]))
	        {
	            SM(playerid, COLOR_GREY1, "ID: %i | Name: Empty Slot", i);
	        }
	        else
	        {
	            SM(playerid, COLOR_GREY1, "ID: %i | Name: %s", i, FactionDivisions[pData[playerid][pFaction]][i]);
	        }
	    }
	}
	else if(!strcmp(option, "assign", true))
	{
	    if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "ui", targetid, divisionid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /division [assign] [playerid] [divisionid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(pData[targetid][pFaction] != pData[playerid][pFaction])
		{
			return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your faction.");
		}
		if(!(0 <= divisionid < MAX_FACTION_DIVISIONS) || isnull(FactionDivisions[pData[playerid][pFaction]][divisionid]))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid division ID.");
	    }
	    if(pData[targetid][pDivision] == divisionid)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is already apart of that division.");
	    }
	    if(pData[targetid][pDivision] >= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is already apart of another division.");
	    }

	    pData[targetid][pDivision] = divisionid;

	    SM(targetid, COLOR_AQUA, "%s has assigned you to the {F7A763}%s{CCFFFF} division.", GetRPName(playerid), FactionDivisions[pData[playerid][pFaction]][divisionid]);
	    SM(playerid, COLOR_AQUA, "You have assigned %s to the {F7A763}%s{CCFFFF} division.", GetRPName(targetid), FactionDivisions[pData[playerid][pFaction]][divisionid]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = %i WHERE uid = %i", divisionid, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "kick", true))
	{
	    if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
		{
		    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /division [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(pData[targetid][pFaction] != pData[playerid][pFaction])
		{
			return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your faction.");
		}
	    if(pData[targetid][pDivision] == -1)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player is not apart of any division.");
	    }

	    SM(targetid, COLOR_AQUA, "%s has removed you from the {F7A763}%s{CCFFFF} division.", GetRPName(playerid), FactionDivisions[pData[playerid][pFaction]][pData[targetid][pDivision]]);
	    SM(playerid, COLOR_AQUA, "You have removed %s from the {F7A763}%s{CCFFFF} division.", GetRPName(targetid), FactionDivisions[pData[playerid][pFaction]][pData[targetid][pDivision]]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET division = -1 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

        pData[targetid][pDivision] = -1;
	}

	return 1;
}

CMD:cells(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new status;

    if(GetFactionType(playerid) != FACTION_POLICE)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

    for(new i = 0; i < sizeof(gPrisonCells); i ++)
	{
		if(!Streamer_GetExtraInt(gPrisonCells[i], E_OBJECT_OPENED))
		{
		    MoveDynamicObject(gPrisonCells[i], cellPositions[i][3], cellPositions[i][4], cellPositions[i][5], 2.0);
		    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 1);
		    status = true;
		}
		else
		{
		    MoveDynamicObject(gPrisonCells[i], cellPositions[i][0], cellPositions[i][1], cellPositions[i][2], 2.0);
		    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 0);
		    status = false;
		}
	}

	if(status)
		SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has opened all cells in the prison.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
	else
	    SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has closed all cells in the prison.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));

	return 1;
}


CMD:cell(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	for(new i = 0; i < sizeof(gPrisonCells); i ++)
	{
	    if(IsPlayerInRangeOfDynamicObject(playerid, gPrisonCells[i], 1.0))
	    {
		    if(GetFactionType(playerid) != FACTION_POLICE)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
			}
			if(pData[playerid][pDuty] == 0)
			{
				return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
			}

			if(!Streamer_GetExtraInt(gPrisonCells[i], E_OBJECT_OPENED))
			{
			    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their key to open the cell door.", GetRPName(playerid));
			    MoveDynamicObject(gPrisonCells[i], cellPositions[i][3], cellPositions[i][4], cellPositions[i][5], 2.0);
			    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 1);
			}
			else
			{
			    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s uses their key to close the cell door.", GetRPName(playerid));
			    MoveDynamicObject(gPrisonCells[i], cellPositions[i][0], cellPositions[i][1], cellPositions[i][2], 2.0);
			    Streamer_SetExtraInt(gPrisonCells[i], E_OBJECT_OPENED, 0);
			}

			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any prison cells.");
	return 1;
}

CMD:locker(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not a part of any faction at the moment.");
	}
	if(!IsPlayerInRangeOfLocker(playerid, pData[playerid][pFaction]))
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not in range of your faction locker.");
	}
	if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not allowed to give a gun when you are weapon restricted or level 1.");
	}
	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_SHERIFF, FACTION_MEDIC, FACTION_FEDERAL, FACTION_TACO:
	    {
	        ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Toggle duty\nEquipment\nUniforms\nClothing", "Select", "Cancel");
		}
		case FACTION_GOVERNMENT, FACTION_NEWS:
		{
		    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Equipment\nUniforms\nClothing", "Select", "Cancel");
		}
 		case FACTION_DOC:
		{
	        ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Equipment\nUniforms\nClothing", "Select", "Cancel");
		}
 		case FACTION_MECHANIC:
		{
		    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, ""SVRCLR"Locker", "Toggle duty\nEquipment\nUniforms", "Select", "Cancel");
		}
		case FACTION_HITMAN:
		{
		    ShowPlayerDialog(playerid, DIALOG_FACTIONLOCKER, DIALOG_STYLE_LIST, "Locker", "Order weapons\nChange clothes", "Select", "Cancel");
		}
	}
	return 1;
}

CMD:showbadge(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, factionid, rankid;

    if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(pData[playerid][pDev] == 1)
	{
	    if(sscanf(params, "uii", targetid, factionid, rankid))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /showbadge [playerid] [factionid] [rankid]");
	        SCM(playerid, COLOR_WHITE, "Use /factions for a list of factions to use with factionid parameter.");
	        return 1;
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
		}
		if(!(1 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	    }
	    if(!(0 <= rankid < FactionInfo[factionid][fRankCount]))
	    {
	        return SM(playerid, COLOR_SYNTAX, "Invalid rank. Valid ranks for this faction range from 0 to %i.", FactionInfo[factionid][fRankCount] - 1);
	    }
	    if(FactionInfo[factionid][fType] == FACTION_HITMAN)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You can't use this faction for your fake badge.");
	    }

	    SM(targetid, COLOR_WHITE, "** %s is rank %s (%i) in %s. **", GetRPName(playerid), FactionRanks[factionid][rankid], rankid, FactionInfo[factionid][fName]);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows their badge to %s.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
		if(sscanf(params, "u", targetid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /showbadge [playerid]");
		}
		if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
		}

	    SM(targetid, COLOR_WHITE, "** %s is rank %s (%i) in %s. **", GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], pData[playerid][pFactionRank], FactionInfo[pData[playerid][pFaction]][fName]);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows their badge to %s.", GetRPName(playerid), GetRPName(targetid));
	}

	return 1;
}

CMD:m(playerid, params[]) return callcmd::megaphone(playerid, params);
CMD:megaphone(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /(m)egaphone [text]");
	}

	SendProximityMessage(playerid, 50.0, COLOR_TEAL, "[MEGAPHONE]"YELLOW" %s: %s", GetRPName(playerid), params);
	SetPlayerBubbleText(playerid, 50.0, COLOR_TEAL, "(Megaphone)"YELLOW" %s",params);
	return 1;
}

CMD:sto(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_SHERIFF, FACTION_FEDERAL:
	    {
	        SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[MEGAPHONE] %s: Driver! Step out of the vehicle with your hands above your head!", GetRPName(playerid));
			SetPlayerBubbleText(playerid, 50.0, COLOR_YELLOW, "(Megaphone) %s",params);
		}
	}
	return 1;
}
CMD:greet(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new string[128], giveplayerid;

	if(IsLawEnforcement(playerid))
	{
	    if(sscanf(params, "d", giveplayerid))
			return SCM(playerid, -1, "USAGE: /greet [1-3]");

		switch(giveplayerid)
		{
			case 1:
			{
				if(!strcmp(pData[playerid][pAccent], "None", true))
				{
					format(string, sizeof(string), "%s says: Hello I'm %s %s with the %s", GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					format(string, sizeof(string), "%s says: I need to see your drivers license, vehicle registration and proof of insurance.", GetRPName(playerid));
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
				}
				else
				{
					format(string, sizeof(string), "(%s) %s says: Hello I'm %s %s with the %s", pData[playerid][pAccent], GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					format(string, sizeof(string), "(%s) %s says: I need to see your drivers license, vehicle registration and proof of insurance.", pData[playerid][pAccent], GetRPName(playerid));
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
				}
			}
			case 2:
			{
				if(!strcmp(pData[playerid][pAccent], "None", true))
				{
					format(string, sizeof(string), "%s says: Hello I'm %s %s with the %s", GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					format(string, sizeof(string), "%s says: Do you know why I pulled you over today?", GetRPName(playerid));
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
				}
				else
				{
					format(string, sizeof(string), "(%s) %s says: Hello I'm %s %s with the %s", pData[playerid][pAccent], GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					format(string, sizeof(string), "(%s) %s says: Do you know why I pulled you over today?", pData[playerid][pAccent], GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
				}
			}
			case 3:
			{
				if(!strcmp(pData[playerid][pAccent], "None", true))
				{
					format(string, sizeof(string), "%s says: Hello I'm %s %s with the %s", GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
				}
				else
				{
					format(string, sizeof(string), "(%s) %s says: Hello I'm %s %s with the %s", pData[playerid][pAccent], GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
					SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
					SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
				}
			}
			default:
			{
			    SCM(playerid, -1, "USAGE: /greet [1-3]");
			}
		}
	}
	else if(GetFactionType(playerid) == FACTION_MEDIC)
	{
		if(!strcmp(pData[playerid][pAccent], "None", true))
		{
		    format(string, sizeof(string), "%s says: Hello I'm %s %s with the %s", GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
			format(string, sizeof(string), "%s says: Can you hear me?", GetPlayerNameEx(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
			SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
		}
		else
		{
			format(string, sizeof(string), "(%s) %s says: Hello I'm %s %s with the %s", pData[playerid][pAccent], GetRPName(playerid), FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
			format(string, sizeof(string), "(%s) %s says: Can you hear me?", pData[playerid][pAccent], GetRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
			SetPlayerChatBubble(playerid, string, COLOR_WHITE, 20.0, 5000);
		}
	}
	else
	{
		SCM(playerid, COLOR_ERROR, "You are not authorized to use that command!");
	}
	return 1;
}
CMD:medic(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new string[128], giveplayerid;

	if(GetFactionType(playerid) == FACTION_MEDIC || GetFactionType(playerid) == FACTION_DOC)
	{
	    if(sscanf(params, "d", giveplayerid))
			return SCM(playerid, -1, "USAGE: /medic [1-4]");

		switch(giveplayerid)
		{
			case 1:
			{
				format(string, sizeof(string), "**{C2A2DA} %s checks patient's condition.", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_GREY4, COLOR_PURPLE);
				format(string, sizeof(string), "what injuries could i see? (( %s ))", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 5000);
			}
			case 2:
			{
				format(string, sizeof(string), "**{C2A2DA} %s grabs a paddings from their ALS bag", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_GREY4, COLOR_PURPLE);
				format(string, sizeof(string), "**{C2A2DA} %s puts the paddings onto patient's chest with pressure in it.", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 5000);
			}
			case 3:
			{
				format(string, sizeof(string), "**{C2A2DA} %s grabs a roll of bandage from their ALS bag, as he puts it gently to patient's wounds.", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_GREY4, COLOR_PURPLE);
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 5000);
			}
			case 4:
			{
				format(string, sizeof(string), "**{C2A2DA} %s stands up, as he jogs back to their RA.", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				format(string, sizeof(string), "**{C2A2DA} %s opens the backdoor of their RA, as they grab a single stretcher, jogging back to patient's", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				format(string, sizeof(string), "**{C2A2DA} %s lowers the stretcher next to patient's body, as they lifts them up, putting onto the stretcher, tightening them up.", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				format(string, sizeof(string), "**{C2A2DA} %s loads patient's into their RA with the stretcher on them.", GetRPName(playerid));
				SendProximityFadeMessage(playerid, 20.0, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 5000);
			}
			default:
			{
			    SCM(playerid, -1, "USAGE: /medic [1-4]");
			}
		}
	}
	else
	{
		SCM(playerid, COLOR_ERROR, "You are not authorized to use that command!");
	}
	return 1;
}

CMD:po(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_SHERIFF, FACTION_FEDERAL:
	    {
	        SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[MEGAPHONE %s: Pull your vehicle over to the side of the road and turn off the ignition!", GetRPName(playerid));
			SetPlayerBubbleText(playerid, 50.0, COLOR_YELLOW, "(Megaphone) %s",params);
		}
		case FACTION_MEDIC:
		{
		    SendProximityMessage(playerid, 50.0, COLOR_YELLOW, "[MEGAPHONE %s: Move to the right! FMD passing on your left!", GetRPName(playerid), params);
			SetPlayerBubbleText(playerid, 50.0, COLOR_YELLOW, "(Megaphone) %s",params);
		}
	}
	return 1;
}

forward showMirandaRights(playerid, step);
public showMirandaRights(playerid, step)
{
	new string[128];
    switch(step)
    {
        case 1:
        {
            format(string, sizeof(string), "%s says: You have the right to remain silent.", GetRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
            SetTimerEx("showMirandaRights", 3000, false, "ii", playerid, 2);
        }
        case 2:
        {
            format(string, sizeof(string), "%s says: Anything you say can and will be used against you in a court of law.", GetRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
            SetTimerEx("showMirandaRights", 4000, false, "ii", playerid, 3);
        }
        case 3:
        {
            format(string, sizeof(string), "%s says: You have the right to to an attorney, If you can not afford one, one will be appointed for you.", GetRPName(playerid));
			SendProximityFadeMessage(playerid, 20.0, string, COLOR_GREY1, COLOR_GREY2, COLOR_GREY3, COLOR_GREY4, COLOR_GREY5);
        }
	}
}

CMD:mir(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(IsLawEnforcement(playerid))
	{
	    SetTimerEx("showMirandaRights", 1000, false, "ii", playerid, 1);
	}
	return 1;
}

CMD:taser(playerid, params[]) return callcmd::tazer(playerid, params);
CMD:tazer(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new string[128];
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(pData[playerid][pWeaponRestricted] > 0)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command when you are weapon restricted.");
	}
	if(IsPlayerConnected(playerid))
	{
		if(TazerHolster[playerid] == 1)
		{
			SetPlayerAttachedObject(playerid, 9, 18642, 6, 0.06, 0.01, 0.08, 180.0, 0.0, 0.0);
            format(string, sizeof(string), "* %s unholsters his tazer from his duty-belt", GetRPName(playerid));
			SendProximityMessage(playerid, 30.0, COLOR_PURPLE, string);
            TazerHolster[playerid] = 0;
		}
		else if(TazerHolster[playerid] == 0)
		{
		    TazerHolster[playerid] = 1;
		    RemovePlayerAttachedObject(playerid, 9);
		    format(string, sizeof(string), "* %s holsters his tazer on duty-belt.", GetRPName(playerid));
			SendProximityMessage(playerid, 30.0, COLOR_PURPLE, string);
		}
	}
	return 1;
}

CMD:beanbag(playerid, params[]) return callcmd::rubberbullets(playerid, params);
CMD:rubberbullets(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SendClientMessage(playerid, COLOR_GREY, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pBeanbagTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || IsPlayerInAnyVehicle(playerid))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(pData[playerid][pWeaponRestricted] > 0)
	{
		return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command when you are weapon restricted.");
	}

	if(!pData[playerid][pBeanbag])
	{
	    pData[playerid][pBeanbag] = 1;
		ShowActionBubble(playerid, "* %s reaches for their tazer.", GetRPName(playerid));

		GetPlayerWeaponData(playerid, 2, pBeanbagReplace[playerid], pBeanbagAmmo[playerid]);

		GiveWeapon(playerid, 25, true);
  		SetPlayerArmedWeapon(playerid, 23);
	}
	else
	{
	    pData[playerid][pBeanbag] = 0;
	    RemovePlayerWeapon(playerid, 25);
		SetPlayerWeapons(playerid);
		ShowActionBubble(playerid, "* %s slings his rubber bullets from their back..", GetRPName(playerid));

		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			SetPlayerArmedWeapon(playerid, pData[playerid][pWeapons][2]);
		}
	}
	return 1;
}

CMD:cuff(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /cuff [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't cuff yourself.");
	}
	if(pData[targetid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already handcuffed.");
	}
	if(pData[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't handcuff an injured player.");
	}

	if(pData[targetid][pCallLine] != INVALID_PLAYER_ID)
	{
 		HangupCall(pData[targetid][pCallLine], HANGUP_DROPPED);
	}

	pData[targetid][pCuffed] = 1;
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_CUFFED);
	TogglePlayerControllable(targetid, 0);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s tightens a pair of handcuffs around %s's wrists.", GetRPName(playerid), GetRPName(targetid));
	GameTextForPlayer(targetid, "~r~Cuffed", 3000, 3);
	return 1;
}

CMD:uncuff(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /uncuff [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid && pData[playerid][pAdminDuty] == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't uncuff yourself.");
	}
	if(!pData[targetid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not handcuffed.");
	}

	pData[targetid][pCuffed] = 0;
 	pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;

	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(targetid, 1);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s loosens the pair of handcuffs from around %s's wrists.", GetRPName(playerid), GetRPName(targetid));
	GameTextForPlayer(targetid, "~g~Uncuffed", 3000, 3);
	return 1;
}
//CMD:carry(playerid, params[])
//{
//    new targetid;
//
//	if(sscanf(params, "u", targetid))
//	{
//	    return SCM(playerid, COLOR_SYNTAX, "Usage: /carry [playerid]");
//	}
//	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
//	{
//	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
//	}
//	if(targetid == playerid)
//	{
//	    return SCM(playerid, COLOR_SYNTAX, "You can't carry yourself.");
//	}
//	if(!pData[targetid][pInjured])
//	{
//	    return SCM(playerid, COLOR_SYNTAX, "That player is not injured, handcuffed or tied.");
//	}
//
//	if(pData[targetid][pDraggedBy] == INVALID_PLAYER_ID)
//	{
//		pData[targetid][pDraggedBy] = playerid;
//		TogglePlayerControllable(targetid, 0);
//		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs onto %s and begins to carry them.", GetRPName(playerid), GetRPName(targetid));
//	}
//	else
//	{
//	    pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;
//	    TogglePlayerControllable(targetid, 1);	
//		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s stops carrying %s.", GetRPName(playerid), GetRPName(targetid));
//	}
//
//	return 1;
//}

CMD:carry(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /carry [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't carry yourself.");
	}
	if(pData[playerid][pAdmin] > 2 && pData[playerid][pAdminDuty])
	{
		if(pData[targetid][pDraggedBy] != playerid)
		{
			pData[targetid][pDraggedBy] = playerid;
			TogglePlayerControllable(targetid, 0);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs onto %s and begins to drag them.", GetRPName(playerid), GetRPName(targetid));
		}
	}
	
	// Check if the target player is already being carried
	if(pData[targetid][pDraggedBy] != playerid)
	{
		pData[targetid][pCarryOffer] = playerid;
	    SM(targetid, COLOR_AQUA, "** %s is attempting to carry you. (/accept carry)", GetRPName(playerid));
	    SM(playerid, COLOR_AQUA, "** You have sent a carry offer to %s.", GetRPName(targetid));
	}
	else
	{
		pData[targetid][pCarryOffer] = INVALID_PLAYER_ID;
	    TogglePlayerControllable(targetid, 1);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s stops carrying %s.", GetRPName(playerid), GetRPName(targetid));
	}
	
	return 1;
}

CMD:drag(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /drag [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't drag yourself.");
	}
	if(!pData[targetid][pInjured] && !pData[targetid][pCuffed] && !pData[targetid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not injured, handcuffed or tied.");
	}

	if(pData[targetid][pDraggedBy] == INVALID_PLAYER_ID)
	{
		pData[targetid][pDraggedBy] = playerid;
		TogglePlayerControllable(targetid, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s grabs onto %s and begins to drag them.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
	    pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;
	    TogglePlayerControllable(targetid, 1);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s stops dragging %s.", GetRPName(playerid), GetRPName(targetid));
	}

	return 1;
}

CMD:movetocar(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(sscanf(params, "u", targetid))
	{
		return SCM(playerid, COLOR_SYNTAX, "Usage: /movetocar [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 15.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(!pData[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not injured.");
	}
	if(IsPlayerInAnyVehicle(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already in a vehicle.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be driving a car");
	}
	for(new i = 2; i < GetVehicleSeatCount(vehicleid); i ++)
	{
	    if(!IsSeatOccupied(vehicleid, i))
	    {
	        pData[targetid][pVehicleCount] = 0;
	        pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;

	        ClearAnimations(targetid, 1);
	        ApplyAnimation(targetid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, 1);

	        TogglePlayerControllable(targetid, 0);
	        PutPlayerInVehicle(targetid, vehicleid, i);
			UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "");

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places %s on the back seat of the car.", GetRPName(playerid), GetRPName(targetid));
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "There are no unoccupied seats left. Find another vehicle.");
	return 1;
}

CMD:detain(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, vehicleid = GetPlayerVehicleID(playerid);

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /detain [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 15.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't detain yourself.");
	}
	if(!pData[targetid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not handcuffed.");
	}
	if(IsPlayerInAnyVehicle(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already in a vehicle.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any vehicle.");
	}

	for(new i = (GetVehicleSeatCount(vehicleid) == 4) ? 2 : 1; i < GetVehicleSeatCount(vehicleid); i ++)
	{
	    if(!IsSeatOccupied(vehicleid, i))
	    {
			pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;
			pData[targetid][pVehicleCount] = 0;

	        TogglePlayerControllable(targetid, 0);
	        PutPlayerInVehicle(targetid, vehicleid, i);

			SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws %s into their vehicle.", GetRPName(playerid), GetRPName(targetid));
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "There are no unoccupied back seats left. Find another vehicle.");
	return 1;
}

CMD:charge(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, reason[128];

	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "us[128]", targetid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /charge [playerid] [reason]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(pData[targetid][pWantedLevel] >= 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player is already at the maximum wanted level (6).");
	}

	pData[targetid][pWantedLevel]++;
	pData[targetid][pCrimes]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = %i, crimes = %i WHERE uid = %i", pData[targetid][pWantedLevel], pData[targetid][pCrimes], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO charges VALUES(null, %i, '%s', NOW(), '%e')", pData[targetid][pID], GetPlayerNameEx(playerid), reason);
	mysql_tquery(connectionID, queryBuffer);

    //format(string, sizeof(string), "> Breaking News"WHITE": %s %s has charged %s with %s.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid), reason);
	//SMA(COLOR_LIGHTGREEN, string);

	SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "> HQ"WHITE": %s %s has charged %s with {0080FF}%s{9999FF}. **", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid), reason);
	SM(targetid, COLOR_LIGHTRED, "** Officer %s has charged you with %s.", GetRPName(playerid), reason);
	Log_Write("log_faction", "%s (uid: %i) has charged %s (uid: %i) with %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], reason);
	return 1;
}
cmd:report1(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	ShowDialogToPlayer(playerid, DIALOG_REPORTITITON);
	return 1;
}
cmd:receipt(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(GetFactionType(playerid) == FACTION_MECHANIC)
    {
        new string[1536] = "Perk\tDescription\tCost", title[64];

		strcat(string, "\nVIP Voucher Diamod\tDiamod VIP for 10days.\t"TEAL"550 diamonds{FFFFFF}");
		strcat(string, "\nVIP Voucher Silver\tSilver VIP for 10days.\t"TEAL"450 diamonds{FFFFFF}");
		strcat(string, "\nVIP Voucher Bronze\tBronze VIP for 10days.\t"TEAL"350 diamonds{FFFFFF}");
		strcat(string, "\nCar Voucher Bronze\t1 Car Dealership Voucher.\t"TEAL"250 diamonds{FFFFFF}");
		strcat(string, "\nWeapon AK-47\t1 Ak-47.\t"TEAL"85 diamonds{FFFFFF}");
		strcat(string, "\nWeapon M4-A1\t1 M4-A1.\t"TEAL"100 diamonds{FFFFFF}");
		strcat(string, "\nWeapon Baseball Bat\t1 Baseball bat.\t"TEAL"25 diamonds{FFFFFF}");
		strcat(string, "\nWeapon Pistol\t1 Normal pistol.\t"TEAL"15 diamonds{FFFFFF}");
		strcat(string, "\nWeapon Silenced Pistol \t1 Silenced pistol.\t"TEAL"15 diamonds{FFFFFF}");
	
		format(title, sizeof(title), "Diamonds Items (You have %i diamonds.)", pData[playerid][pDiamonds]);
		ShowPlayerDialog(playerid, DIALOG_PAWNSHOP, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Redeem", "Cancel");
	
		return 1;
	}
	return 1;
}
CMD:addjailtime(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, minutes, reason[128];

	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC)
    {
        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You are not a part of law enforcement.");
	}
	if(sscanf(params, "uis[128]", targetid, minutes, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /addjailtime [layerid] [amount] [reason]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
    {
        return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
    }
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" The amount of minutes cannot be below one. Use /release instead.");
	}

	AddJailTime(targetid, minutes);

    Log_Write("log_punishments", "%s was added %i minutes jail time to %s", GetPlayerNameEx(playerid), minutes, GetPlayerNameEx(targetid));
    SCMAf(SERVER_COLOR, "AdmCmd: %s was added %i minutes jail time to %s", GetPlayerNameEx(playerid), minutes, GetPlayerNameEx(targetid));
    SCMf(targetid, SERVER_COLOR, "** You was add %i minutes jail time to %s", minutes, GetPlayerNameEx(targetid));
	return 1;
}
CMD:arrest(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, minutes, amount, reason[128];

	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC)
    {
        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You are not a part of law enforcement.");
	}
	if(sscanf(params, "udi", targetid, minutes, amount))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /arrest [playerid] [minutes] [fine]");
 		return 1;
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
    {
        return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
    }
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet. You can wait until they login or use /ojail.");
	}
	if(minutes < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount of minutes cannot be below one. Use /release instead.");
	}

    pData[targetid][pJailType] = 3;
    pData[targetid][pJailTime] = minutes * 60;
    AddToTaxVault(amount);
	GivePlayerCash(targetid, -amount);
	PlayerTextDrawShow(targetid, customHUD[targetid][1]);
	pData[targetid][pWantedLevel] = 0;
	
	pData[targetid][pArrested]++;
    ResetPlayerWeaponsEx(targetid);
	ResetPlayer(targetid);
	SetPlayerInJail(targetid);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET wantedlevel = 0, arrested = %i WHERE uid = %i", pData[targetid][pArrested], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM charges WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	new szString[528];
	format(szString, sizeof(szString), "News: %s %s has completed their arrest. %s has been sent to jail for %i weeks. ", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetRPName(targetid), minutes);
	SendDiscordMessage(15, szString);

    Log_Write("log_punishments", "%s (uid: %i) jailed %s (uid: %i) for %i minutes, and fined $%i reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], minutes, amount, reason);
    SMA(COLOR_LIGHTRED, ""RED"AdmCmd: %s"WHITE" was jailed for %i minutes and fined $%i, by %s, reason: %s", GetRPName(targetid), minutes, amount, GetRPName(playerid), reason);
    SM(targetid, COLOR_AQUA, "** You have been jailed for %i minutes, and fined $%i by %s.", minutes, amount, GetRPName(playerid));
    return 1;
}

CMD:gcc(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /f [gang chat]");
	}
	if(pData[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
    if(pData[playerid][pToggleGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the gang chat as you have it toggled.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
	    if(pData[i][pGang] == pData[playerid][pGang] && !pData[i][pToggleGang])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SM(i, 0x00FFFFFF, "(( (%i) %s %s: %.*s... ))", pData[playerid][pGangRank], GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SM(i, 0x00FFFFFF, "(( (%i) %s %s: ...%s ))", pData[playerid][pGangRank], GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, 0x00FFFFFF, "(( (%i) %s %s: %s ))", pData[playerid][pGangRank], GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), params);
			}
		}
	}
	new szString[528];
	format(szString, sizeof(szString), "(( (%i) %s %s: %s))",  pData[playerid][pGangRank], GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), params);
	SendDiscordMessage(7, szString);
	return 1;
}

CMD:bed(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, minutes;

	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(sscanf(params, "ui", targetid, minutes))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /bed [playerid] [minutes]");
 		return 1;
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 10.0))
    {
        return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
    }
	if(minutes < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not allowed to do that.");
 
	}

    pData[targetid][pBedType] = 1;
    pData[targetid][pBedTime] = minutes * 60;

	SetPlayerInBed(targetid);

	SMA(COLOR_DOCTOR, "%s"WHITE" was detained on their hospital room for %i minute/s by %s", GetRPName(targetid), minutes, GetRPName(playerid));
    SM(targetid, COLOR_AQUA, "** You have been detained for %i minutes by %s.", minutes, GetRPName(playerid));
    return 1;
}

CMD:listbed(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new type[14];

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}

	SCM(playerid, SERVER_COLOR, "Hospital Arrest Players:");

	foreach(new i : Player)
	{
	    if(pData[i][pBedType] > 0)
	    {
	        switch(pData[i][pBedType])
	        {
	            case 1: type = "HP Jailed";
			}

			SM(playerid, COLOR_GREY1, "(ID: %i) %s - Status: %s - Time: %i seconds", i, GetRPName(i), type, pData[i][pBedTime]);
		}
	}

	return 1;
}
CMD:hfind(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;
 	if(pData[playerid][pDev] < 1)
 	{
  		return SCM(playerid, COLOR_SYNTAX, "You are not a hitman!");
 	}
 	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /hfind [playerid]");
	}
	if(pData[playerid][pDetectiveCooldown] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to wait %i more seconds to use this command again.", pData[playerid][pDetectiveCooldown]);
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(GetPlayerInterior(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player is an interior. You can't find them at the moment.");
	}
	if(pData[targetid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on an on-duty administrator.");
	}
 	pData[playerid][pFindTime] = 20;
  	pData[playerid][pDetectiveCooldown] = 28;
   	SetPlayerMarkerForPlayer(playerid, targetid, 0xFF0000FF);
	SM(playerid, COLOR_WHITE, "** %s's location marked on your radar. %i seconds remain until the marker disappears.", GetRPName(targetid), pData[playerid][pFindTime]);
	pData[playerid][pFindPlayer] = targetid;
	return 1;
}

CMD:frisk(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /frisk [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(IsLawEnforcement(playerid) || pData[playerid][pDuty] == 0)
	{
	    FriskPlayer(playerid, targetid);
	}
	else
	{
	    pData[targetid][pFriskOffer] = playerid;

	    SM(targetid, COLOR_AQUA, "** %s is attempting to frisk you for illegal items. (/accept frisk)", GetRPName(playerid));
	    SM(playerid, COLOR_AQUA, "** You have sent a frisk offer to %s.", GetRPName(targetid));
	}

	return 1;
}
CMD:bm(playerid, params[]) return callcmd::blackmarket(playerid, params);
CMD:blackmarket(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1961.5903,2322.5999,16.4688))
	{
		ShowDialogToPlayer(playerid, DIALOG_BUYBMARKET);
	}
	else 
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any blackmarket.");	
	}
	return 1;
}	

CMD:checkweapon(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;
	if(pData[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /checkweapon [playerid]");
	}
	FriskPlayerx(playerid, targetid);

	return 1;
}
CMD:checkhunger(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;
	if(pData[playerid][pAdmin] < 1)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /checkhunger [playerid]");
	}
	new sstring[2048], fString[1024];	
	
	format(fString, sizeof fString, "Name: %s \n\t(Hunger: %i%s)\n\t(Thirst: %i%s)\n\t(Stress: %i%s) \n\n\n  Note: The lower the percent it will result to death", GetRPName(targetid), pData[targetid][pHunger], " %", pData[targetid][pThirst], " %", pData[targetid][pStress], " %");		
	strcat(sstring, fString);
	ShowPlayerDialog(playerid, DIALOG_BOXLIST, DIALOG_STYLE_MSGBOX, ""WHITE"Player Organs Status ", sstring, "Ok","");
	return 1;
}

CMD:take(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, option[14];

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "us[14]", targetid, option))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /take [playerid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Weapons, Pot, Crack, Meth, Painkillers, CarLicense");
	    SCM(playerid, COLOR_WHITE, "Available options: DirtyCash, GunLicense, Materials");
		return 1;
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	if(!strcmp(option, "weapons", true))
	{
	    ResetPlayerWeaponsEx(targetid);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's weapons.", GetRPName(playerid), GetRPName(targetid));

	    SM(targetid, COLOR_AQUA, "%s has taken your weapons.", GetRPName(playerid));
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) weapons.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);
	}
	else if(!strcmp(option, "pot", true))
	{
	    if(!pData[targetid][pPot])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no pot on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's pot.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your %i grams of pot.", GetRPName(playerid), pData[targetid][pPot]);
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of pot.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pPot]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pPot] = 0;
	}
	else if(!strcmp(option, "crack", true))
	{
	    if(!pData[targetid][pCrack])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no Crack on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's Crack.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your %i grams of Crack.", GetRPName(playerid), pData[targetid][pPot]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of Crack.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pCrack]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pCrack] = 0;
	}
	else if(!strcmp(option, "materials", true))
	{
	    if(!pData[targetid][pMaterials])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no materials on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's materials.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your %i materials.", GetRPName(playerid), pData[targetid][pMaterials]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i materials.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pMaterials]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pMaterials] = 0;
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(!pData[targetid][pMeth])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no meth on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's meth.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your %i grams of meth.", GetRPName(playerid), pData[targetid][pPot]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i grams of meth.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pMeth]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pMeth] = 0;
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(!pData[targetid][pPainkillers])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no painkillers on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's painkillers.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your %i painkillers.", GetRPName(playerid), pData[targetid][pPot]);
        Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) %i painkillers.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pPainkillers]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pPainkillers] = 0;
	}
	else if(!strcmp(option, "carlicense", true))
	{
	    if(!pData[targetid][pCarLicense])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no driving license on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's drivers license.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your drivers license.", GetRPName(playerid));
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) drivers license.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET carlicense = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pCarLicense] = 0;
	}
	else if(!strcmp(option, "gunlicense", true))
	{
	    if(!pData[targetid][pWeaponLicense])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no gun license on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's gun license.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your gun license.", GetRPName(playerid));
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) gun license.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gunlicense = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pWeaponLicense] = 0;
	}
	else if(!strcmp(option, "dirtycash", true))
	{
	    if(!pData[targetid][pDirtyCash])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "That player has no dirty cash on them.");
		}

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes away %s's dirty cash.", GetRPName(playerid), GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has taken your dirty cash.", GetRPName(playerid));
	    Log_Write("log_faction", "%s (uid: %i) has taken %s's (uid: %i) dirty cash.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET dirtycash = 0 WHERE uid = %i", pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);

	    pData[targetid][pDirtyCash] = 0;
	}

	return 1;
}

CMD:ticket(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, amount, reason[128];

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "uis[128]", targetid, amount, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ticket [playerid] [amount] [reason]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't ticket yourself.");
	}

	pData[targetid][pTicketOffer] = playerid;
	pData[targetid][pTicketPrice] = amount;

	SM(targetid, COLOR_AQUA, "** %s writes you a $%i ticket for %s. (/accept ticket)", GetRPName(playerid), amount, reason);
	SM(playerid, COLOR_AQUA, "** You have offered a $%i ticket to %s for %s.", amount, GetRPName(targetid), reason);
	return 1;
}

CMD:gov(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pFaction] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any faction at the moment.");
	}
	if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gov [text]");
	}

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_MEDIC:
	    {
	        SCMA(COLOR_WHITE, "---------- * Public Service Announcement * ----------");
	        SMA(COLOR_DOCTOR, "** %s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		case FACTION_POLICE:
		{
	        SCMA(COLOR_WHITE, "---------- * Public Service Announcement * ----------");
	        SMA(COLOR_BLUE, "** %s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
 		case FACTION_SHERIFF:
		{
	        SCMA(COLOR_WHITE, "---------- * Public Service Announcement * ----------");
	        SMA(COLOR_ARM, "** %s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
        case FACTION_GOVERNMENT:
		{
	        SCMA(COLOR_WHITE, "---------- * Government News Announcement * ----------");
	        SMA(COLOR_YELLOW2, "** %s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		case FACTION_FEDERAL:
		{
	        SCMA(COLOR_WHITE, "---------- * Public Service Announcement * ----------");
	        SMA(COLOR_ROYALBLUE, "** %s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		case FACTION_MECHANIC:
		{
	        SCMA(COLOR_WHITE, "---------- * Mechanic Service Announcement * ----------");
	        SMA(COLOR_GREEN, "** %s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
 		case FACTION_DOC:
		{
	        SCMA(COLOR_WHITE, "---------- * Mechanic Service Announcement * ----------");
	        SMA(COLOR_GREEN, "** %s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		case FACTION_TACO:
		{
	        SCMA(COLOR_WHITE, "---------- * Taco Shop Announcement * ----------");
	        SMA(COLOR_GREEN, "** %s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
		default:
		{
		    SCM(playerid, COLOR_SYNTAX, "Your faction is not authorized to use this command.");
		}
	}

	return 1;
}

CMD:ram(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new id;

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

    for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
    	if(IsValidDynamicObject(i) && IsPlayerInRangeOfDynamicObject(playerid, i, 2.5) && IsDoorObject(i))
		{
		    if((id = GetInsideHouse(playerid)) >= 0 && Streamer_GetExtraInt(i, E_OBJECT_TYPE) == E_OBJECT_FURNITURE && Streamer_GetExtraInt(i, E_OBJECT_EXTRA_ID) == HouseInfo[id][hID])
			{
			    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT door_opened FROM furniture WHERE id = %i", Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		 		mysql_tquery(connectionID, queryBuffer, "OnPlayerRamFurnitureDoor", "iii", playerid, i, Streamer_GetExtraInt(i, E_OBJECT_INDEX_ID));
		    	return 1;
			}
		
		}
	}	
	if((id = GetNearbyHouse(playerid)) >= 0)
	{
	    if(!HouseInfo[id][hLocked])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This house is unlocked. You don't need to ram the door.");
		}

		HouseInfo[id][hLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET locked = 0 WHERE id = %i", HouseInfo[id][hID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s rams down %s's house door.", GetRPName(playerid), HouseInfo[id][hOwner]);
	}
	else if((id = GetNearbyBusiness(playerid)) >= 0)
	{
	    if(!BusinessInfo[id][bLocked])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This business is unlocked. You don't need to ram the door.");
		}

		BusinessInfo[id][bLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE businesses SET locked = 0 WHERE id = %i", BusinessInfo[id][bID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s rams down %s's business door.", GetRPName(playerid), BusinessInfo[id][bOwner]);
	}
	else if((id = GetNearbyGarage(playerid)) >= 0)
	{
	    if(!GarageInfo[id][gLocked])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This garage is unlocked. You don't need to ram the door.");
		}

		GarageInfo[id][gLocked] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE garages SET locked = 0 WHERE id = %i", GarageInfo[id][gID]);
		mysql_tquery(connectionID, queryBuffer);

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s rams down %s's garage door.", GetRPName(playerid), GarageInfo[id][gOwner]);
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any door which can be rammed.");
	}

	return 1;
}

CMD:deploy(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new type[12], type_id = -1, Float:x, Float:y, Float:z, Float:a;

   	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "s[12]", type))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /deploy [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Spikestrip, Cone, Roadblock, Barrel, Flare");
	    return 1;
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't deploy objects inside.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	if(!strcmp(type, "spikestrip", true)) {
	    type_id = DEPLOY_SPIKESTRIP;
	} else if(!strcmp(type, "cone", true)) {
		type_id = DEPLOY_CONE;
	} else if(!strcmp(type, "roadblock", true)) {
	    type_id = DEPLOY_ROADBLOCK;
	} else if(!strcmp(type, "barrel", true)) {
	    type_id = DEPLOY_BARREL;
	} else if(!strcmp(type, "flare", true)) {
	    type_id = DEPLOY_FLARE;
	}

	if(type_id == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}
	if(DeployObject(type_id, x, y, z, a) == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The deployable objects pool is full. Try deleting some first.");
	}

	if(IsLawEnforcement(playerid))
		SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has deployed a %s in %s.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), deployableItems[type_id], GetZoneName(x, y, z));
	else
	    SendFactionMessage(pData[playerid][pFaction], COLOR_DOCTOR, "HQ: %s %s has deployed a %s in %s.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), deployableItems[type_id], GetZoneName(x, y, z));

	return 1;
}

CMD:undeployall(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
   	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC)
    {
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

	for(new i = 0; i < MAX_DEPLOYABLES; i ++)
	{
		if(DeployInfo[i][dExists])
	 	{
			DestroyDynamicObject(DeployInfo[i][dObject]);
			DeployInfo[i][dExists] = 0;
   			DeployInfo[i][dType] = -1;
		}
	}
	SendFactionMessage(pData[playerid][pFaction], (IsLawEnforcement(playerid)) ? (COLOR_ROYALBLUE) : (COLOR_DOCTOR), "HQ: %s %s has removed all deployed objects.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
	return 1;
}

CMD:undeploy(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

    for(new i = 0; i < MAX_DEPLOYABLES; i ++)
    {
        if(DeployInfo[i][dExists])
        {
            new Float:range;

            if(DeployInfo[i][dType] == DEPLOY_SPIKESTRIP || DeployInfo[i][dType] == DEPLOY_BARREL || DeployInfo[i][dType] == DEPLOY_FLARE || DeployInfo[i][dType] == DEPLOY_CONE) {
                range = 2.0;
            } else if(DeployInfo[i][dType] == DEPLOY_ROADBLOCK) {
                range = 5.0;
            }

        	if(IsPlayerInRangeOfPoint(playerid, range, DeployInfo[i][dPosX], DeployInfo[i][dPosY], DeployInfo[i][dPosZ]))
        	{
      	  		SendFactionMessage(pData[playerid][pFaction], (IsLawEnforcement(playerid)) ? (COLOR_ROYALBLUE) : (COLOR_DOCTOR), "HQ: %s %s has removed a %s in %s.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), deployableItems[DeployInfo[i][dType]], GetZoneName(DeployInfo[i][dPosX], DeployInfo[i][dPosY], DeployInfo[i][dPosZ]));
				DestroyDynamicObject(DeployInfo[i][dObject]);

        	    DeployInfo[i][dExists] = 0;
        	    DeployInfo[i][dType] = -1;
        	    return 1;
			}
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any deployed objects.");
	return 1;
}

CMD:gbackup(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot call for backup when you are dead.");
	}
	if(pData[playerid][pCuffed])
	{
 		return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed.");
	}
	if(pData[playerid][pTied])
	{
		return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}
	if(!pData[playerid][pBackup])
	{
        pData[playerid][pBackup] = 1;
	}
	else
	{
	    pData[playerid][pBackup] = 0;
	}

	foreach(new i : Player)
	{
        if(pData[i][pGang] == pData[playerid][pGang])
        {
    	    if(pData[playerid][pBackup])
    	    {
    	        SM(i, COLOR_AQUA, "** %s %s is requesting backup in %s (marked on map). **", GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
    	        SetPlayerMarkerForPlayer(i, playerid, (GangInfo[pData[playerid][pGang]][gColor] & ~0xff) + 0xFF);
			}
			else
			{
    	        SM(i, COLOR_AQUA, "** %s %s has cancelled their backup request. **", GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
    	        SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
			}
		}
	}

	return 1;
}

CMD:bk(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::backup(playerid, params);
}

CMD:backup(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	if(!pData[playerid][pBackup])
	{
        pData[playerid][pBackup] = 1;

        if(GetFactionType(playerid) != FACTION_MEDIC)
	        SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s is requesting backup in %s (marked on map).", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
		else
		    SendFactionMessage(pData[playerid][pFaction], COLOR_DOCTOR, "HQ: %s %s is requesting backup in %s (marked on map).", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
	}
	else
	{
	    pData[playerid][pBackup] = 0;

	    if(GetFactionType(playerid) != FACTION_MEDIC)
	        SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "HQ: %s %s has cancelled their backup request.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
	    else
			SendFactionMessage(pData[playerid][pFaction], COLOR_DOCTOR, "HQ: %s %s has cancelled their backup request.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
	}

    foreach(new i : Player)
	{
	    if(pData[i][pFaction] == pData[playerid][pFaction])
        {
			if(pData[playerid][pLogged])
			{
				if(pData[playerid][pBackup])
					SetPlayerMarkerForPlayer(i, playerid, (FactionInfo[pData[playerid][pFaction]][fColor] & ~0xff) + 0xFF);
				else
					SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
			}
		}	
    }

	return 1;
}
CMD:dk(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	if(!pData[playerid][pBackup])
	{
        pData[playerid][pBackup] = 1;

        if(GetFactionType(playerid) != FACTION_MEDIC)
	        SendFactionMessage(pData[playerid][pFaction], COLOR_YELLOW, "HQ: %s %s is requesting backup in %s (marked on map).", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
		else
		    SendFactionMessage(pData[playerid][pFaction], COLOR_YELLOW, "HQ: %s %s is requesting backup in %s (marked on map).", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetPlayerZoneName(playerid));
	}
	else
	{
	    pData[playerid][pBackup] = 0;

	    if(GetFactionType(playerid) != FACTION_MEDIC)
	        SendFactionMessage(pData[playerid][pFaction], COLOR_YELLOW, "HQ: %s %s has cancelled their backup request.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
	    else
			SendFactionMessage(pData[playerid][pFaction], COLOR_YELLOW, "HQ: %s %s has cancelled their backup request.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
	}

    foreach(new i : Player)
	{
	    if(IsFaction(playerid))
        {
			if(pData[playerid][pLogged])
			{
				if(pData[playerid][pBackup])
					SetPlayerMarkerForPlayer(i, playerid, (FactionInfo[pData[playerid][pFaction]][fColor] & ~0xff) + 0xFF);
				else
					SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
			}
		}	
    }

	return 1;
}

CMD:mdc(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
   	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetNearbyMdc(playerid) >= 0)
	{
		ShowPlayerDialog(playerid, DIALOG_MDC, DIALOG_STYLE_LIST, "Mobile data computer", "Wanted suspects\nPlayer lookup\nVehicle lookup", "Select", "Cancel");
    	return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 20.0, 45.5967, 2039.3578, 733.8567))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside a the police station.");
	}

	//SendFactionMessage(pData[playerid][pFaction], FACTION_DUTY, "HQ: %s %s has login in to mdc....", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
	ShowPlayerDialog(playerid, DIALOG_MDC, DIALOG_STYLE_LIST, "Mobile data computer", "Wanted suspects\nPlayer lookup\nVehicle lookup", "Select", "Cancel");
	return 1;
}

CMD:vticket(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
 	new amount, vehicleid;

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /vticket [amount]");
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle isn't owned by any particular person.");
	}
	if(amount > 15000)
	{
    	return SCM(playerid, COLOR_SYNTAX, "It is not allowed to ticket more than that amount.");
	}
	
	VehicleInfo[vehicleid][vTickets] += amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s writes up a $%i ticket and attaches it to the %s.", GetRPName(playerid), amount, GetVehicleName(vehicleid));
	return 1;
}


CMD:impound1(playerid)
{
	new vehicleid = GetNearbyVehicle(playerid);
	if(!IsLawEnforcement(playerid))
    {
		return SCM(playerid, COLOR_RED, "Error:"WHITE" You are not authorized to use this command. ");
	}

    if(!VehicleInfo[vehicleid][vOwnerID] || !IsValidVehicle(vehicleid))
    {
        return SCM(playerid, COLOR_RED, "Error:"WHITE" You can only impound player owned vehicles.");
	}
	if(VehicleInfo[vehicleid][vTickets] < 1000)
	{
	    return SCM(playerid, COLOR_RED, "Error:"WHITE" You can only impound vehicles with over $1000 unpaid tickets.");
	}
	SendFactionMessage(pData[playerid][pFaction], COLOR_ROYALBLUE, "> Dispatch: %s %s has impounded a %s with %s unpaid tickets.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), GetVehicleName(vehicleid), FormatNumber(VehicleInfo[vehicleid][vTickets]));

	//pData[playerid][pFpoints] += 20;
	//SM(playerid, COLOR_WHITE, "** You have  receive 20 fpoints.");
	//
	//mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET fpoints = %i WHERE uid = %i", pData[playerid][pFpoints], pData[playerid][pID]);
	//mysql_tquery(connectionID, queryBuffer);

	VehicleInfo[vehicleid][vPosX] = 2062.1909;
	VehicleInfo[vehicleid][vPosY] = -1919.9170;
	VehicleInfo[vehicleid][vPosZ] = 13.1196;
	VehicleInfo[vehicleid][vPosA] = 0.0000;
    VehicleInfo[vehicleid][vInterior] = 0;
    VehicleInfo[vehicleid][vWorld] = 0;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET impounded = '1', pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);
	DespawnVehicle(vehicleid);
	return 1;
}

CMD:siren(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new panels,doors,lights,tires;
	new vehicleid = GetPlayerVehicleID(playerid), Float:x, Float:y, Float:z, Float:tmp;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(!VehicleHasWindows(vehicleid))
	{
 		return SCM(playerid, COLOR_SYNTAX, "This vehicle cannot have a siren attached to it.");
	}

	if(!IsValidDynamicObject(vehicleSiren[vehicleid]))
	{
	    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, z, z, z);
		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, x, y, tmp);

		vehicleSiren[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		AttachDynamicObjectToVehicle(vehicleSiren[vehicleid], vehicleid, -x, y, z / 1.9, 0.0, 0.0, 0.0);

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places a detachable siren on the roof of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	else
	{
	    DestroyDynamicObject(vehicleSiren[vehicleid]);
	    vehicleSiren[vehicleid] = INVALID_OBJECT_ID;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s detaches the siren from the roof of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	if(!Flasher[vehicleid])
	{
		GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
		SetVehicleParams(vehicleid, VEHICLE_LIGHTS, true);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns on the emergency lights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		Flasher[vehicleid] = 1;
	}
	else
	{
		GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
		UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
		Flasher[vehicleid] = 0;
		SetVehicleParams(vehicleid, VEHICLE_LIGHTS, false);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off the emergency lights of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	}
	return 1;
}

CMD:vfrisk(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new vehicleid;

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle.");
	}

    new count;

    for(new i = 0; i < 10; i ++)
    {
        if(VehicleInfo[vehicleid][vWeapons][i])
        {
            count++;
        }
    }

    SCM(playerid, SERVER_COLOR, "Trunk Balance:");
    SM(playerid, COLOR_GREY2, "Cash: $%i/$%i", VehicleInfo[vehicleid][vCash], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_CASH));
	SM(playerid, COLOR_GREY2, "Materials: %i/%i | Weapons: %i/%i", VehicleInfo[vehicleid][vMaterials], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_MATERIALS), count, GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEAPONS));
    SM(playerid, COLOR_GREY2, "Pot: %i/%i grams | Crack: %i/%i grams", VehicleInfo[vehicleid][vPot], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_WEED), VehicleInfo[vehicleid][vCrack], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_COCAINE));
    SM(playerid, COLOR_GREY2, "Meth: %i/%i grams | Painkillers: %i/%i pills", VehicleInfo[vehicleid][vMeth], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_METH), VehicleInfo[vehicleid][vPainkillers], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_PAINKILLERS));
    //SCM(playerid, SERVER_COLOR, "Trunk Ammunition:");
	SM(playerid, COLOR_GREY2, "HP Ammo: %i/%i | Poison Ammo: %i/%i", VehicleInfo[vehicleid][vHPAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_HPAMMO), VehicleInfo[vehicleid][vPoisonAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_POISONAMMO));
    SM(playerid, COLOR_GREY2, "FMJ Ammo: %i/%i", VehicleInfo[vehicleid][vFMJAmmo], GetVehicleStashCapacity(vehicleid, STASH_CAPACITY_FMJAMMO));
	SM(playerid, SERVER_COLOR, "Vehicle Info:");
	SM(playerid, COLOR_GREY2, "Vehicle Plate: %s | Vehicle Owner: %s | Vehicle Gang: %s | Vehicle Faction: %s", VehicleInfo[vehicleid][vPlate], VehicleInfo[vehicleid][vOwner], GangInfo[VehicleInfo[vehicleid][vGang]][gName], FactionInfo[VehicleInfo[vehicleid][vFactionType]][fType]);
	if(count > 0)
	{
		SCM(playerid, COLOR_GREEN, "Trunk Weapons:");

    	for(new i = 0; i < 6; i ++)
        {
            if(VehicleInfo[vehicleid][vWeapons][i])
	        {
    	        SM(playerid, COLOR_GREY2, "[%i] Weapon: %s", i + 1, GetWeaponNameEx(VehicleInfo[vehicleid][vWeapons][i]));
			}
		}
    }

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s prys open the trunk of the %s and takes a look inside.", GetRPName(playerid), GetVehicleName(vehicleid));
	return 1;
}

CMD:vtake(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new vehicleid, option[14];

    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "s[14]", option))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /vtake [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Weapons, Ammo, Pot, Crack, Meth, Painkillers");
	    return 1;
	}
	if((vehicleid = GetNearbyVehicle(playerid)) == INVALID_VEHICLE_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of any vehicle.");
	}
	if(!VehicleInfo[vehicleid][vOwnerID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle isn't owned by any particular person.");
	}

	if(!strcmp(option, "weapons", true))
	{
        VehicleInfo[vehicleid][vWeapons][0] = 0;
        VehicleInfo[vehicleid][vWeapons][1] = 0;
        VehicleInfo[vehicleid][vWeapons][2] = 0;
        VehicleInfo[vehicleid][vWeapons][3] = 0;
        VehicleInfo[vehicleid][vWeapons][4] = 0;
        VehicleInfo[vehicleid][vWeapons][5] = 0;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET weapon_1 = 0, weapon_2 = 0, weapon_3 = 0, weapon_4 = 0, weapon_5 = 0, weapon_6 = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the weapons from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SCM(playerid, COLOR_AQUA, "You have taken the weapons from the trunk.");
		Log_Write("log_faction", "%s (uid: %i) has taken the weapons from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), pData[playerid][pID], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
	}
	else if(!strcmp(option, "ammo", true))
	{
        VehicleInfo[vehicleid][vHPAmmo] = 0;
		VehicleInfo[vehicleid][vPoisonAmmo] = 0;
		VehicleInfo[vehicleid][vFMJAmmo] = 0;

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET hpammo = 0, poisonammo = 0, fmjammo = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the ammunition from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SCM(playerid, COLOR_AQUA, "You have taken the ammunition from the trunk.");
		Log_Write("log_faction", "%s (uid: %i) has taken the ammunition from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), pData[playerid][pID], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);
	}
	else if(!strcmp(option, "pot", true))
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the pot from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SM(playerid, COLOR_AQUA, "You have taken the %i grams of pot from the trunk.", VehicleInfo[vehicleid][vPot]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of pot from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), pData[playerid][pID], VehicleInfo[vehicleid][vPot], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pot = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vPot] = 0;
	}
	else if(!strcmp(option, "crack", true))
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the Crack from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SM(playerid, COLOR_AQUA, "You have taken the %i grams of Crack from the trunk.", VehicleInfo[vehicleid][vCrack]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of Crack from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), pData[playerid][pID], VehicleInfo[vehicleid][vCrack], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET crack = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vCrack] = 0;
	}
	else if(!strcmp(option, "meth", true))
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the meth from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SM(playerid, COLOR_AQUA, "You have taken the %i grams of meth from the trunk.", VehicleInfo[vehicleid][vMeth]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i grams of meth from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), pData[playerid][pID], VehicleInfo[vehicleid][vMeth], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET meth = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vMeth] = 0;
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes the painkillers from the trunk of the %s.", GetRPName(playerid), GetVehicleName(vehicleid));
		SM(playerid, COLOR_AQUA, "You have taken the %i painkillers from the trunk.", VehicleInfo[vehicleid][vPainkillers]);
		Log_Write("log_faction", "%s (uid: %i) has taken the %i painkillers from %s's (uid: %i) %s trunk (id: %i).", GetRPName(playerid), pData[playerid][pID], VehicleInfo[vehicleid][vPainkillers], VehicleInfo[vehicleid][vOwner], VehicleInfo[vehicleid][vOwnerID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET painkillers = 0 WHERE id = %i", VehicleInfo[vehicleid][vID]);
        mysql_tquery(connectionID, queryBuffer);

        VehicleInfo[vehicleid][vPainkillers] = 0;
	}

	return 1;
}

CMD:firstaid(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /firstaid [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't heal yourself.");
	}
	if(pData[targetid][pFirstaid])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player already has first aid effects.");
	}

	pData[targetid][pFirstaid] = 1;
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s administers first aid to %s.", GetRPName(playerid), GetRPName(targetid));

	SM(targetid, COLOR_AQUA, "You have received first aid from %s. Your health will now regenerate until full.", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "You have administered first aid to %s.", GetRPName(targetid));
	return 1;
}

CMD:fid(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /firstaid [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(pData[playerid][pMedkit] <= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have any medkit left.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't heal yourself.");
	}
	if(pData[targetid][pFirstaid])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player already has first aid effects.");
	}
	if(GetNearbyTurf(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "[ERROR]: You can't do this right now");
	}
	pData[targetid][pFirstaid] = 1;
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s administers first aid to %s.", GetRPName(playerid), GetRPName(targetid));


	pData[playerid][pMedkit] -= 1;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[playerid][pMedkit], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_AQUA, "You have received first aid from %s. Your health will now regenerate until full.", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "You have administered first aid to %s.", GetRPName(targetid));
	return 1;
}


CMD:loadpt(playerid, params[]) { return callcmd::stretcher(playerid, params); }
CMD:stretcher(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid, vehicleid = GetPlayerVehicleID(playerid);

	if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /stretcher [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 15.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(!pData[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not injured.");
	}
	if(IsPlayerInAnyVehicle(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already in a vehicle.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) != 416 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 490)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be driving an ambulance.");
	}

	for(new i = 2; i < GetVehicleSeatCount(vehicleid); i ++)
	{
	    if(!IsSeatOccupied(vehicleid, i))
	    {
	        pData[targetid][pVehicleCount] = 0;
	        pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;

	        ClearAnimations(targetid, 1);
	        ApplyAnimation(targetid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, 1);

	        TogglePlayerControllable(targetid, 0);
	        PutPlayerInVehicle(targetid, vehicleid, i);
			UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "");

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places %s on a stretcher in the Ambulance.", GetRPName(playerid), GetRPName(targetid));
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "There are no unoccupied seats left. Find another vehicle.");
	return 1;
}
forward UseMedkit(playerid);
public UseMedkit(playerid)
{
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid, 1);
	pData[playerid][pMedkit] -= 1;
	SetPlayerHealth(playerid, 100.0);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[playerid][pMedkit], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	SM(playerid,COLOR_GREY2, "** you have been successfuly use a medkit. You have %i medkit left.",pData[playerid][pMedkit]);
	return 1;
}
forward UseBandage(playerid);
public UseBandage(playerid)
{
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid, 1);
	pData[playerid][pBandage] -= 1;
	GivePlayerHealth(playerid, 10.0);
	pData[playerid][pBleeding] = 0;
	if (pData[playerid][pHealth] > 100)
	{
		SetPlayerHealth(playerid, 100);
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bandage = %i WHERE uid = %i", pData[playerid][pBandage], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	SM(playerid,COLOR_GREY2, "** you have been successfuly use a bandage. You have %i bandage left.",pData[playerid][pBandage]);
	return 1;
}
forward Surgery(playerid);
public Surgery(playerid)
{
	UpdateDynamic3DTextLabelText(InjuredLabel[playerid], COLOR_DOCTOR, "");
	TextDrawHideForPlayer(playerid, Text:DieText);
	TextDrawHideForPlayer(playerid, Text:InjuredText);
	ResetPlayerWeaponsEx(playerid);
	pData[playerid][pInjured] = 0;
	SetPlayerHealth(playerid, 100.0);
	pData[playerid][pBrokenLeg] = 0;
	pData[playerid][pBrokenHP] = 0;
	ClearAnimations(playerid, 1);
	GivePlayerCash(playerid, -5000);		
	GameTextForPlayer(playerid, "~w~BILLS~n~~g~-$5000", 5000, 1);
	SCM(playerid, COLOR_DOCTOR, "You have been revived by an Doctor!");
	return 1;
}

forward Surgery1(playerid);
public Surgery1(playerid)
{
	UpdateDynamic3DTextLabelText(InjuredLabel[playerid], COLOR_DOCTOR, "");
	TextDrawHideForPlayer(playerid, Text:DieText);
	TextDrawHideForPlayer(playerid, Text:InjuredText);
	ResetPlayerWeaponsEx(playerid);
	pData[playerid][pInjured] = 0;
	SetPlayerHealth(playerid, 100.0);
	pData[playerid][pBrokenLeg] = 0;
	pData[playerid][pBrokenHP] = 0;
	ClearAnimations(playerid, 1);
	GivePlayerCash(playerid, -5000);		
	GameTextForPlayer(playerid, "~w~BILLS~n~~g~-$5000", 5000, 1);
	SCM(playerid, COLOR_DOCTOR, "You have been revived by an Doctor!");
	
    pData[playerid][pBedType] = 1;
    pData[playerid][pBedTime] = 3 * 60;
	SetPlayerInBed(playerid);
	return 1;
}

forward autohp(playerid);
public autohp(playerid)
{

    pData[playerid][pBedType] = 1;
    pData[playerid][pBedTime] = 4 * 60;
	SetPlayerInBed(playerid);
	
	UpdateDynamic3DTextLabelText(InjuredLabel[playerid], COLOR_DOCTOR, "");
	TextDrawHideForPlayer(playerid, Text:DieText);
	TextDrawHideForPlayer(playerid, Text:InjuredText);
	ResetPlayerWeaponsEx(playerid);
	pData[playerid][pInjured] = 0;
	SetPlayerHealth(playerid, 100.0);
	pData[playerid][pBrokenLeg] = 0;
	pData[playerid][pBrokenHP] = 0;
	ClearAnimations(playerid, 1);
	GivePlayerCash(playerid, -5000);
	GameTextForPlayer(playerid, "~w~BILLS~n~~g~-$5000", 5000, 1);
	SCM(playerid, COLOR_DOCTOR, "You have been revived by an Doctor!");
	return 1;
}
forward autominer(playerid);
public autominer(playerid)
{
	pData[playerid][pAntiFall] = 0;
	SetPlayerPos(playerid, 876.4248,-32.4903,63.1953);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

forward UseRepairkit(playerid);
public UseRepairkit(playerid)
{
	new closestcar = GetNearbyVehicle(playerid);
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid, 1);
	pData[playerid][pRepairKit] -= 1;
	RepairVehicle(closestcar);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET repairkit = %i WHERE uid = %i", pData[playerid][pRepairKit], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	SM(playerid,COLOR_GREY2, "** The vehicle has been successfuly repaired. You have %i repairkit left.",pData[playerid][pRepairKit]);
	return 1;
}

CMD:startsurgery(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_DOC)
    {
        return SCM(playerid, COLOR_LIGHTRED, "[ERROR]{ffffff} You can't use this command as you aren't a medic.");
	}
	if(pData[playerid][pMedkit] <= 0)
	{
	    return SCM(playerid, COLOR_LIGHTRED, "Error:"WHITE" You have no medkit left.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /startsurgery [playerid]");
	}
	if((gettime() - pData[playerid][pLastAM]) < 30)
	{
		return SCM(playerid, COLOR_LIGHTRED, "Error:"WHITE"Someone's doing an operation.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 3.0))
    {
        return SCM(playerid, COLOR_LIGHTRED, "[error]: {ffffff} The player specified is disconnected or out of range.");
    }
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_LIGHTRED, "[error]: [ERROR]{ffffff} You can't use this command on yourself.");
	}
	if(!pData[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_LIGHTRED, "[error]: {ffffff} The player specified is not injured.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1367.5084,-23.7746,1001.7971) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1367.6685,-37.1081,1001.7971))
	{
	    return SCM(playerid, COLOR_LIGHTRED, "[error]: {ffffff} You are not at the OPERATRING ROOM.");
	}
	if(pData[targetid][pDraggedBy] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_LIGHTRED, "[error]: {ffffff} You must drop down carefully the patient (using /drag)");
	}
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s lay down the patient and prepairing for a surgery.", GetRPName(playerid));
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1367.5084,-23.7746,1001.7971))
	{	
		TeleportToCoords(targetid, 1367.5084,-23.7746,1001.7971, 180.0197, 2, 2);
		
	}
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1367.6685,-37.1081,1001.7971))
	{	
		TeleportToCoords(targetid, 1367.6685,-37.1081,1001.7971,354.2113, 2, 2);
	}	
	
	return 1;
}	
CMD:surgery(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_DOC)
    {
        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't use this command as you aren't a medic.");
	}
	if(pData[playerid][pMedkit] <= 0)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You have no medkit left.");
	}

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /surgery [playerid]");
	}
	if((gettime() - pData[playerid][pLastAM]) < 30)
	{
		return SCM(playerid, COLOR_ERROR, "Error:"WHITE"Someone's doing an operation.");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
    {
        return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} The player specified is disconnected or out of range.");
    }
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You can't use this command on yourself.");
	}
	if(!pData[targetid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is not injured.");
	}
	new string[128];
	format(string, sizeof(string), "~g~+$2500");
    GameTextForPlayer(playerid, string, 2500, 1);
	GivePlayerCash(playerid, 2500);
	pData[targetid][pDraggedBy] = INVALID_PLAYER_ID;
	UpdateDynamic3DTextLabelText(InjuredLabel[targetid], COLOR_DOCTOR, "");
	TextDrawHideForPlayer(targetid, Text:DieText);
	TextDrawHideForPlayer(targetid, Text:InjuredText);
 	pData[targetid][pBedType] = 1;
    pData[targetid][pBedTime] = 4 * 60;
	SetPlayerInBed(targetid);
	pData[playerid][pLastAM] = gettime();
	pData[playerid][pTotalPatients]++;
	ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 1, 1);
	SetTimerEx("Surgery", 9000, false, "i", targetid);
	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s begins the surgery.", GetRPName(playerid));
	pData[playerid][pMedkit] -= 1;
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET medkit = %i WHERE uid = %i", pData[playerid][pMedkit], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}


CMD:listpt(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(GetFactionType(playerid) != FACTION_MEDIC)
	{
	    SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	    return 1;
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	SCM(playerid, COLOR_GREEN, "Injured - (/injuries):");
	foreach(new i : Player)
	{
		if(pData[i][pInjured])
		{
		    new accepted[24];
		    if(IsPlayerConnected(pData[i][pAcceptedEMS]))
		    {
				accepted = GetRPName(pData[i][pAcceptedEMS]);
		    }
		    else
		    {
		        accepted = "None";
		    }
		    SM(playerid, COLOR_SYNTAX, "Name: %s - Location: %s - Medic: %s", GetRPName(i), GetPlayerZoneName(i), accepted);
		}
	}
	SCM(playerid, COLOR_AQUA, "Use /getpt [playerid] to track them!");
	return 1;
}

CMD:heal(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

    if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /heal [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't heal yourself.");
	}
	if(pData[targetid][pFirstaid])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This player already has first aid effects.");
	}

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s administers first aid to %s.", GetRPName(playerid), GetRPName(targetid));
	pData[targetid][pFirstaid] = 1;
	SM(targetid, COLOR_AQUA, "You have received first aid from %s. Your health will now regenerate until full.", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "You have administered first aid to %s.", GetRPName(targetid));
	return 1;
}

CMD:getpt(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(GetFactionType(playerid) == FACTION_MEDIC)
	{
		new targetid;
		if(sscanf(params, "u", targetid))
		{
			return SCM(playerid, COLOR_SYNTAX, "Usage: /getpt [playerid]");
		}
		if(IsPlayerConnected(targetid))
		{
		    if(targetid == playerid)
		    {
		        SCM(playerid, COLOR_AQUA, "You can't accept your own Emergency Dispatch call!");
				return 1;
		    }
		    if(!pData[targetid][pInjured])
		    {
		        SCM(playerid, COLOR_SYNTAX, "That person is not injured!");
		        return 1;
		    }
			if(!IsPlayerConnected(pData[targetid][pAcceptedEMS]))
			{
				if(pData[targetid][pJailTime] > 0) return SCM(playerid, COLOR_SYNTAX, "You can't use this command on jailed players.");
				SendFactionMessage(pData[playerid][pFaction], COLOR_DOCTOR, "EMS Driver %s has accepted the Emergency Dispatch call for %s.", GetRPName(playerid), GetRPName(targetid));
				SM(playerid, COLOR_AQUA, "* You have accepted EMS Call from %s, you will see the marker until you have reached it.", GetRPName(targetid));
				SM(targetid, COLOR_AQUA, "* EMS Driver %s has accepted your EMS Call; please be patient as they are on the way!", GetPlayerNameEx(playerid));
				pData[targetid][pAcceptedEMS] = playerid;
				GameTextForPlayer(playerid, "~w~EMS Caller~n~~r~Go to the red marker.", 5000, 1);
                pData[playerid][pCP] = CHECKPOINT_MISC;
                new Float:ppos[3];
				GetPlayerPosEx(targetid, ppos[0], ppos[1], ppos[2]);
	    		SetPlayerCheckpoint(playerid, ppos[0],ppos[1],ppos[2], 3.0);
			}
			else
			{
				SCM(playerid, COLOR_WHITE, "Someone has already accepted that call!");
			}
		}
	}
	return 1;
}

CMD:injuries(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
    if(GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /injuries [playerid]");
	}
    if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT weaponid, timestamp FROM shots WHERE hitid = %i AND hittype = 1 ORDER BY id DESC LIMIT 20", targetid);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerListInjuries", "ii", playerid, targetid);
	return 1;
}

CMD:news(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(FactionInfo[pData[playerid][pFaction]][fType] != FACTION_NEWS)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not a news reporter.");
	}
	if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /news [text]");
	}
	foreach(new i : Player)
	{
		if(!pData[playerid][pToggleNews])
		{
 			SM(i, 0x489348FF, "** %s %s: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), params);
		}
	}

	return 1;
}

CMD:cctv(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT && GetFactionType(playerid) != FACTION_MECHANIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(isnull(params))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /cctv [on/off]");
	}
	else if(!strcmp(params, "on", true))
	{
		PlayerMenu[playerid] = 0;
		TogglePlayerControllable(playerid, 0);
		ShowMenuForPlayer(CCTVMenu[0], playerid);
	}
	else if(!strcmp(params, "off", true))
	{
		if(CurrentCCTV[playerid] > -1)
		{
			SetPlayerPos(playerid, LastPos[playerid][LX], LastPos[playerid][LY], LastPos[playerid][LZ]);
			SetPlayerFacingAngle(playerid, LastPos[playerid][LA]);
			SetPlayerInterior(playerid, LastPos[playerid][LInterior]);
			TogglePlayerControllable(playerid, 1);
			KillTimer(KeyTimer[playerid]);
			SetCameraBehindPlayer(playerid);
			TextDrawHideForPlayer(playerid, TD);
			CurrentCCTV[playerid] = -1;
		}
	}
	return 1;
}

CMD:live(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a news reporter.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /live [playerid]");
	}
	if(pData[playerid][pLiveMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are banned from live interviews. Ask a higher rank to lift your ban.");
	}
	if(pData[playerid][pLiveBroadcast] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already doing a live interview. /endlive to finish it.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't interview yourself.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(pData[targetid][pLiveMuted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is banned from live interviews.");
	}
	if(pData[targetid][pCallLine] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is on a phone call at the moment.");
	}

	pData[targetid][pLiveOffer] = playerid;

	SM(targetid, COLOR_AQUA, "** %s offered you a live interview. (/accept live)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have offered %s a live interview.", GetRPName(targetid));
	return 1;
}

CMD:endlive(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a news reporter.");
	}
    if(pData[playerid][pLiveBroadcast] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not doing a live interview.");
	}

	SCM(playerid, COLOR_AQUA, "You have ended the live interview.");
	SM(pData[playerid][pLiveBroadcast], COLOR_AQUA, "%s has ended the live interview.", GetRPName(playerid));

	pData[pData[playerid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	pData[playerid][pLiveBroadcast] = INVALID_PLAYER_ID;
	return 1;
}

CMD:liveban(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

    if(GetFactionType(playerid) != FACTION_NEWS)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a news reporter.");
	}
	if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 2)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 2);
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /liveban [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}

	if(!pData[targetid][pLiveMuted])
	{
		if(pData[targetid][pLiveBroadcast] != INVALID_PLAYER_ID)
		{
	    	pData[pData[targetid][pLiveBroadcast]][pLiveBroadcast] = INVALID_PLAYER_ID;
	    	pData[targetid][pLiveBroadcast] = INVALID_PLAYER_ID;
		}

		pData[targetid][pLiveMuted] = 1;
		SM(targetid, COLOR_LIGHTRED, "%s has banned you from live interviews.", GetPlayerNameEx(playerid));
		SM(playerid, COLOR_AQUA, "You have banned %s from live interviews.", GetPlayerNameEx(targetid));
	}
	else
	{
	    pData[targetid][pLiveMuted] = 0;
		SM(targetid, COLOR_YELLOW, "%s has unbanned you from live interviews.", GetPlayerNameEx(playerid));
		SM(playerid, COLOR_AQUA, "You have unbanned %s from live interviews.", GetPlayerNameEx(targetid));
	}

	return 1;
}

CMD:settax(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new string[128], amount;

	if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of government.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /settax [rate]");
	}
	if(!(1 <= amount <= 90))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The tax percentage must range from 10 to 90.");
	}

	gTax = amount;
	SaveServerInfo();

	format(string, sizeof(string), "Breaking News"WHITE": Mayor changed the income tax rate to %i percent.", amount);
	SMA(COLOR_LIGHTGREEN, string);

	SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" has adjusted the income tax rate to %i percent.", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "You have set the income tax rate to %i percent.", amount);
	Log_Write("log_faction", "%s (uid: %i) set the income tax rate to %i percent.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
	return 1;
}

CMD:factionpay(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new factionid;

	if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of government.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
	}
	if(sscanf(params, "i", factionid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /factionpay [factionid] (Use /factions for list.)");
	}
	if(!(1 <= factionid < MAX_FACTIONS) || !FactionInfo[factionid][fType])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid faction.");
	}
	if(FactionInfo[factionid][fType] == FACTION_GOVERNMENT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't set the paychecks for government factions.");
	}
	if(FactionInfo[factionid][fType] == FACTION_HITMAN)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't set the paychecks for hitman factions.");
	}

	pData[playerid][pFactionEdit] = factionid;
	ShowDialogToPlayer(playerid, DIALOG_FACTIONPAY1);
	return 1;
}

CMD:taxwithdraw(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new amount, reason[64];

    if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of government.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
    if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1116.7744,1705.7791,-35.0973))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(sscanf(params, "is[64]", amount, reason))
	{
	    return SM(playerid, COLOR_WHITE, "USAGE /taxwithdraw [amount] [reason] ($%i available)", gVault);
	}
	if(amount < 1 || amount > gVault)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	AddToTaxVault(-amount);
	GivePlayerCash(playerid, amount);

	SM(playerid, COLOR_AQUA, "** You have withdrawn $%i from the tax vault. The new balance is $%i.", amount, gVault);
	SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" has withdrawn $%i from the tax vault, reason: %s", GetRPName(playerid), amount, reason);
	Log_Write("log_faction", "%s (uid: %i) has withdrawn $%i from the tax vault, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], amount, reason);
	return 1;
}

CMD:taxdeposit(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new amount;

    if(GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of government.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
    if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1116.7744,1705.7791,-35.0973))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_WHITE, "USAGE /taxdeposit [amount] ($%i available)", gVault);
	}
	if(amount < 1 || amount > pData[playerid][pCash])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	AddToTaxVault(amount);
	GivePlayerCash(playerid, -amount);

	SM(playerid, COLOR_AQUA, "** You have deposited $%i in the tax vault. The new balance is $%i.", amount, gVault);
	SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" has deposited $%i in the tax vault.", GetRPName(playerid), amount);
	Log_Write("log_faction", "%s (uid: %i) has deposited $%i in the tax vault.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
	return 1;
}

CMD:mechdeposit(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new amount;

    if(GetFactionType(playerid) != FACTION_MECHANIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of mechanic.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2878.4985,-1959.8259,11.1119))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the vault.");
	}	
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_WHITE, "USAGE /mechdeposit [amount] ($%i Available balance)", pData[playerid][pCash]);
	}
	if(amount < 1 || amount > pData[playerid][pCash])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	AddToMechVault(amount);
	GivePlayerCash(playerid, -amount);

	SM(playerid, COLOR_AQUA, "** You have deposited $%i in the mechanic vault. The new balance is $%i.", amount, mechvault);
	SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" has deposited $%i in the mech vault.", GetRPName(playerid), amount);
	Log_Write("log_faction", "%s (uid: %i) has deposited $%i in the mech vault.", GetPlayerNameEx(playerid), pData[playerid][pID], amount);
	return 1;
}


CMD:mechwithdraw(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new amount, reason[64];

    if(GetFactionType(playerid) != FACTION_MECHANIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of mechanic.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
    if(pData[playerid][pFactionRank] < FactionInfo[pData[playerid][pFaction]][fRankCount] - 1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need to be at least rank %i+ to use this command.", FactionInfo[pData[playerid][pFaction]][fRankCount] - 1);
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2878.4985,-1959.8259,11.1119))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the vault.");
	}
	if(sscanf(params, "is[64]", amount, reason))
	{
	    return SM(playerid, COLOR_WHITE, "USAGE /mechwithdraw [amount] [reason] ($%i available)", mechvault);
	}
	if(amount < 1 || amount > mechvault)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}

	AddToMechVault(-amount);
	GivePlayerCash(playerid, amount);

	SM(playerid, COLOR_AQUA, "** You have withdrawn $%i from the mech vault. The new balance is $%i.", amount, mechvault);
	SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE" has withdrawn $%i from the mech vault, reason: %s", GetRPName(playerid), amount, reason);
	Log_Write("log_faction", "%s (uid: %i) has withdrawn $%i from the mech vault, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], amount, reason);
	return 1;
}

CMD:contract(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, amount, reason[64];

	if(sscanf(params, "iis[64]", targetid, amount, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /contract [playerid] [amount] [reason]");
	}
	if(pData[playerid][pLevel] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be at least level 3+ to contract players.");
	}
	if(pData[playerid][pDev] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are a hitman and therefore can't contract other players.");
	}

	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't contract yourself.");
	}
	if(pData[targetid][pLevel] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can only contract level 3+ players.");
	}
	if(!(500000 <= amount <= 10000000))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount must range from $500000 to $10000000.");
	}
	if(pData[playerid][pCash] < amount)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have that much money.");
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}

	foreach(new i : Player)
	{
	    if(pData[playerid][pDev] == 1)
	    {
	        SM(i, COLOR_YELLOW, "** %s has contracted %s for $%i, reason: %s [/contracts]", GetRPName(playerid), GetRPName(targetid), amount, reason);
		}
	}

	GivePlayerCash(playerid, -amount);

	pData[targetid][pContracted] += amount;
	GetPlayerName(playerid, pData[targetid][pContractBy], MAX_PLAYER_NAME);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = %i, contractby = '%e' WHERE uid = %i", pData[targetid][pContracted], pData[targetid][pContractBy], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "You have placed a contract on %s for $%i, reason: %s", GetRPName(targetid), amount, reason);
	Log_Write("log_contracts", "%s (uid: %i) placed a contract on %s (uid: %i) for $%i, reason: %s", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], amount, reason);
 	return 1;
}

CMD:contracs(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pDev] < 1 && pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	SCM(playerid, SERVER_COLOR, "Pending Contracts:");

	foreach(new i : Player)
	{
	    if(pData[i][pContracted] > 0)
	    {
	        SM(playerid, COLOR_GREY2, "ID: %i | Target: %s | Bounty price: $%i | Last contracter: %s", i, GetRPName(i), pData[i][pContracted], pData[i][pContractBy]);
		}
	}

	SCM(playerid, COLOR_YELLOW, "** Use /takehit [id] or /denyhit [id] to handle contracts.");
	return 1;
}

CMD:denyhit(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pDev] < 1 && pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /denyhit [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pContracted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't been contracted.");
	}

    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has cancelled the contract on %s for $%i.", GetRPName(playerid), GetRPName(targetid), pData[targetid][pContracted]);

	if(pData[playerid][pDev] == 1 )
	{
		SendFactionMessage(pData[playerid][pFaction], COLOR_YELLOW, "** Hitman has cancelled the contract on %s for $%i. **", GetRPName(targetid), pData[targetid][pContracted]);
	}

	pData[targetid][pContracted] = 0;
    strcpy(pData[targetid][pContractBy], "Pending", MAX_PLAYER_NAME);

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET contracted = 0, contractby = 'Pending' WHERE uid = %i", pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:takehit(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pDev] < 1 )
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /takehit [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(!pData[targetid][pContracted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't been contracted.");
	}

	pData[playerid][pContractTaken] = targetid;
	SendFactionMessage(pData[playerid][pFaction], COLOR_YELLOW, "** Hitman  has accepted the contract to kill  for $%i. **", pData[targetid][pContracted]);
	SM(playerid, COLOR_AQUA, "You have taken the hit. You will receive $%i once you have assassinated "SVRCLR"%s{CCFFFF}.", pData[targetid][pContracted], GetRPName(targetid));
	return 1;
}

CMD:mask(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	//new rand = Random(500, 900);
	if(!pData[playerid][pMask])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a Mask.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pTied] > 0 ||  pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(pData[playerid][pAdminDuty]) return SCM(playerid, COLOR_SYNTAX, "You can't use this while on admin duty.");

	if(Maskara[playerid] == 0)
	{
		new szString[528];
		format(szString, sizeof(szString), "[%d] %s was use a mask", playerid, GetRPName(playerid));
		SendDiscordMessage(29, szString);
		foreach(new i : Player)
		{
			ShowPlayerNameTagForPlayer(i, playerid, 0);
		}
		Maskara[playerid] = 1;
		MaskaraID[playerid] = playerid;
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s puts on his/her mask.", GetRPName(playerid));
		ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0);
		SetPlayerAttachedObject(playerid, 9, 19801, 2, 0.091000, 0.012000, -0.000000, 0.099999, 87.799957, 179.500015, 1.345999, 1.523000, 1.270001, 0, 0);
		

	}
	else
	{
	    foreach(new i : Player)
		{
			ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
    	Maskara[playerid] = 0;
     	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} Stranger takes off his mask.");
     	ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0);
		if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
		pData[playerid][pMask] = 0;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET mask = 0 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	
		new szString[528];
		format(szString, sizeof(szString), "[%d] %s was drop a mask", playerid, GetRPName(playerid));
		SendDiscordMessage(29, szString);
	}
	return 1;
}

CMD:masked(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] >= 2) {
		new string[128], name[MAX_PLAYER_NAME+1];
		foreach(new i : Player)
		{
			if(IsPlayerConnected(i))
			{
				if(Maskara[i] == 1)
				{
					GetPlayerName(i, name, sizeof(name));
					format(string, sizeof(string),"%s %s (%d)\n", string, pData[i][pUsername], MaskaraID[i]);
				}
			}
		}
		SCM(playerid, -1, string);
	}
	return 1;
}

CMD:dmvrelease(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, 2050.3113, -1911.2911, 12.8366))
	{
		return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You're not at the impound area");
	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT tickets, modelid FROM vehicles WHERE ownerid = %i AND impounded = 1", pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_DMVRELEASE, playerid);
	return 1;
}

CMD:registervehicle(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehid;
    new price = 5000;
    GivePlayerCash(playerid, -price);
	if((!IsPlayerInRangeOfPoint(playerid, 50.0, -2772.9460, 376.7526, 3000.6462) && !IsPlayerInRangeOfPoint(playerid, 5.0, -709.9255, 2606.4180, 1005.7650)))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not the police station.");
	}
	if(sscanf(params, "i", vehid))
	{
	    return SendClientMessage(playerid, COLOR_GREY3, "[Usage]: /registervehicle [vehid]");
	}
    if(pData[playerid][pCash] < price)
    {
        return SCM(playerid, COLOR_SYNTAX, "You don't have enough money....");
    }
	if(!VehicleHasEngine(vehid))
	{
		return SendClientMessage(playerid, COLOR_GREY, "This vehicle has no license plate, therefore it can't be registered.");
	}
	if(strcmp(VehicleInfo[vehid][vPlate], "None") != 0)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "This vehicle is already registered.");
	}
	if(!VehicleInfo[vehid][vOwnerID])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "This vehicle isn't owned by any particular person.");
	}
	GetUniquePlate(vehid);
	GivePlayerCash(playerid, -5000);
    GameTextForPlayer(playerid, "-$5000", 5000, 1);
	SendClientMessageEx(playerid, COLOR_GREY3, "Added plates to vehicle id %d", vehid);
	SendClientMessageEx(playerid, COLOR_GREY3, "Vehicle ID: %d, Plates: %s", vehid, VehicleInfo[vehid][vPlate]);
//    SendClientMessageEx(VehicleInfo[vehid][vOwnerID], VehicleInfo[vehid][vOwner], Car Dealership: %s has registered your vehicle plate to $i", GetPlayerNameRP(playerid), GetUniquePlate(vehid)); // someone should do this, i cant find the right code :( - Pedro
	return 1; // i didnt commented new string so you can check this command HAHAHAHHA whoever are you watching this word, fuck you again!.
}


CMD:propose(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new id, targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /propose [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 3.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if((id = GetInsideBusiness(playerid)) == -1 || BusinessInfo[id][bType] != BUSINESS_RESTAURANT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be at a restaurant to commence a wedding.");
	}
	if(pData[playerid][pCash] < 750 || pData[targetid][pCash] < 750)
	{
		return SCM(playerid, COLOR_SYNTAX, "You both need to have atleast $750 to have a wedding.");
	}
	if(pData[playerid][pMarriedTo] != -1)
	{
	    return SM(playerid, COLOR_SYNTAX, "You're already married to %s.", pData[playerid][pMarriedName]);
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't marry yourself faggot.");
	}
	pData[targetid][pMarriageOffer] = playerid;

	SM(targetid, COLOR_AQUA, "** %s has asked you to marry them, Please be careful when chosing a partner, It will cost both parties $750. (/accept marriage)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have sent %s a proposal for marriage.", GetRPName(targetid));
	return 1;
}

CMD:divorce(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /divorce [playerid]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 3.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(pData[playerid][pMarriedTo] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You aren't even married.");
	}
	if(pData[playerid][pMarriedTo] != pData[targetid][pID])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You aren't married to that person.");
	}
	pData[targetid][pMarriageOffer] = playerid;

	SM(targetid, COLOR_AQUA, "** %s has asked you to divorce them (/accept divorce)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have sent %s a request for divorce.", GetRPName(targetid));
	return 1;
}

CMD:profile(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid;

	if(pData[playerid][pDev] < 1 )
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /profile [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, SERVER_COLOR, "%s:", GetRPName(targetid));
	SM(playerid, COLOR_GREY2, "Gender: %s", (pData[targetid][pGender] == 2) ? ("Female") : ("Male"));
	SM(playerid, COLOR_GREY2, "Age: %i years old", pData[targetid][pAge]);

	if(pData[targetid][pFaction] != -1)
	{
	    SM(playerid, COLOR_GREY2, "Faction: %s", FactionInfo[pData[targetid][pFaction]][fName]);
	    SM(playerid, COLOR_GREY2, "Rank: %s (%i)", FactionRanks[pData[targetid][pFaction]][pData[targetid][pFactionRank]], pData[targetid][pFactionRank]);
	}
	else
	{
	    SM(playerid, COLOR_GREY2, "Faction: None");
	}

	if(pData[targetid][pContracted] > 0)
	{
		SM(playerid, COLOR_GREY2, "Contract: $%i", pData[targetid][pContracted]);
		SM(playerid, COLOR_GREY2, "Last Contracter: %s", pData[targetid][pContractBy]);
	}

	SM(playerid, COLOR_GREY2, "Completed Hits: %i", pData[targetid][pCompletedHits]);
	SM(playerid, COLOR_GREY2, "Failed Hits: %i", pData[targetid][pFailedHits]);
	return 1;
}
CMD:createlocker(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new factionid, Float:x, Float:y, Float:z;

    if(pData[playerid][pAdmin] < 5 && !pData[playerid][pFactionMod])
	{
	    return SCM(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", factionid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "USAGE: /createlocker [factionid]");
	}
    if(!(0 <= factionid < MAX_FACTIONS) || FactionInfo[factionid][fType] == FACTION_NONE)
	{
	    return SCM(playerid, COLOR_GREY, "Invalid faction.");
	}

    GetPlayerPos(playerid, x, y, z);

	for(new i = 0; i < MAX_LOCKERS; i ++)
	{
		if(!LockerInfo[i][lExists])
		{
		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO factionlockers (factionid, pos_x, pos_y, pos_z, interior, world) VALUES(%i, '%f', '%f', '%f', %i, %i)", factionid, x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		    mysql_tquery(connectionID, queryBuffer, "OnAdminCreateLocker", "iiifffii", playerid, i, factionid, x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		    return 1;
		}
	}

	SCM(playerid, COLOR_GREY, "Locker slots are currently full. Ask developers to increase the internal limit.");
	return 1;
}

CMD:editlocker(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new lockerid, option[32], param[32];

	if(pData[playerid][pAdmin] < 5 && !pData[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[32]S()[32]", lockerid, option, param))
	{
	    SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editlocker [lockerid] [option]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: Position, FactionID, Icon, Label, Uniform");
		return 1;
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid locker.");
	}
    if(!strcmp(option, "position", true))
    {
		GetPlayerPos(playerid, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ]);
		LockerInfo[lockerid][lInterior] = GetPlayerInterior(playerid);
		LockerInfo[lockerid][lWorld] = GetPlayerVirtualWorld(playerid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET pos_x = '%f', pos_y = '%f', pos_z = '%f', interior = %i, world = %i WHERE id = %i", LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ], LockerInfo[lockerid][lInterior], LockerInfo[lockerid][lWorld], LockerInfo[lockerid][lID]);
		mysql_tquery(connectionID, queryBuffer);

		SCMf(playerid, COLOR_AQUA, "* You have moved locker %i to your position.", lockerid);
		ReloadLocker(lockerid);
	}
	else if(!strcmp(option, "factionid", true))
	{
	    new value;
		if(sscanf(param, "i", value))
	    {
			return SCMf(playerid, COLOR_SYNTAX, "USAGE: /editlocker [%i] [%s] [value]", lockerid, option);
		}
	    LockerInfo[lockerid][lFaction] = value;
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET factionid = %i WHERE id = %i", LockerInfo[lockerid][lFaction], LockerInfo[lockerid][lID]);
		mysql_tquery(connectionID, queryBuffer);

		SCMf(playerid, COLOR_AQUA, "* You set locker %i's faction to %i.", lockerid, value);
		ReloadLocker(lockerid);
	}
	else if(!strcmp(option, "icon", true))
	{
	    new iconid;

	    if(sscanf(param, "i", iconid))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editlocker [lockerid] [icon] [iconid (19300 = hide)]");
		}
		if(!IsValidModel(iconid))
		{
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid model ID.");
		}

		LockerInfo[lockerid][lIcon] = iconid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET iconid = %i WHERE id = %i", LockerInfo[lockerid][lIcon], LockerInfo[lockerid][lID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadLocker(lockerid);
	    SCMf(playerid, COLOR_AQUA, "* You've changed the pickup icon model of locker %i to %i.", lockerid, iconid);
	}
	else if(!strcmp(option, "label", true))
	{
	    new status;

	    if(sscanf(param, "i", status) || !(0 <= status <= 1))
	    {
	        return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /editlocker [lockerid] [label] [0/1]");
		}

		LockerInfo[lockerid][lLabel] = status;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factionlockers SET label = %i WHERE id = %i", LockerInfo[lockerid][lLabel], LockerInfo[lockerid][lID]);
	    mysql_tquery(connectionID, queryBuffer);

		ReloadLocker(lockerid);

		if(status)
		    SCMf(playerid, COLOR_AQUA, "* You've enabled the 3D text label for locker %i.", lockerid);
		else
		    SCMf(playerid, COLOR_AQUA, "* You've disabled the 3D text label for locker %i.", lockerid);
	}
	else if(!strcmp(option, "uniform", true))
	{
	    if(FactionInfo[LockerInfo[lockerid][lFaction]][fType] == FACTION_HITMAN)
	    {
	        return SendClientMessage(playerid, COLOR_GREY, "Weapons for hitman agency lockers cannot be edited in-game.");
	    }

		SCM(playerid, COLOR_ERROR, "use the command /editfaction skin for the uniforms!");
	}
	
	return 1;
}
CMD:removelocker(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new lockerid;

	if(pData[playerid][pAdmin] < 5 && !pData[playerid][pFactionMod])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", lockerid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /removelocker [lockerid]");
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid locker.");
	}

	DestroyDynamic3DTextLabel(LockerInfo[lockerid][lText]);
	DestroyDynamicPickup(LockerInfo[lockerid][lPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM factionlockers WHERE id = %i", LockerInfo[lockerid][lID]);
	mysql_tquery(connectionID, queryBuffer);

	LockerInfo[lockerid][lExists] = 0;
	LockerInfo[lockerid][lID] = 0;

	SCMf(playerid, COLOR_AQUA, "* You have removed locker %i.", lockerid);
	return 1;
}

CMD:gotolocker(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new lockerid;

	if(pData[playerid][pAdmin] < 4)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	}

	if(sscanf(params, "i", lockerid))
	{
	    return SendClientMessage(playerid, COLOR_SYNTAX, "USAGE: /gotolocker [lockerid]");
	}
	if(!(0 <= lockerid < MAX_LOCKERS) || !LockerInfo[lockerid][lExists])
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid locker.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, LockerInfo[lockerid][lPosX], LockerInfo[lockerid][lPosY], LockerInfo[lockerid][lPosZ]);
	SetPlayerInterior(playerid, LockerInfo[lockerid][lInterior]);
	SetPlayerVirtualWorld(playerid, LockerInfo[lockerid][lWorld]);
	SetCameraBehindPlayer(playerid);
	return 1;
}
CMD:passport(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new name[24], level, skinid;

    if(pData[playerid][pPassport])
	{
  		Namechange(playerid, GetPlayerNameEx(playerid), pData[playerid][pPassportName]);
  		SetScriptSkin(playerid, pData[playerid][pPassportSkin]);
		SCM(playerid, COLOR_AQUA, "You have burned your passport and received your old name, clothes, level and number back.");

		pData[playerid][pLevel] = pData[playerid][pPassportLevel];
		pData[playerid][pPhone] = pData[playerid][pPassportPhone];
		pData[playerid][pPassport] = 0;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET passport = 0, passportname = 'None', passportlevel = 0, passportskin = 0, passportphone = 0, level = %i, phone = %i WHERE uid = %i", pData[playerid][pLevel], pData[playerid][pPhone], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
		return 1;
	}

	if(pData[playerid][pDev] < 1  && GetFactionType(playerid) != FACTION_FEDERAL)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman or federal agent.");
	}
	if(sscanf(params, "s[24]ii", name, level, skinid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /passport [name] [level] [skinid]");
	}
	if(!(3 <= strlen(name) <= 20))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your name must range from 3 to 20 characters.");
	}
	if(strfind(name, "_") == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your name needs to contain at least one underscore.");
	}
	if(!IsValidName(name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid characters. Your name may only contain letters and underscores.");
	}
	if(pData[playerid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You aren't allowed to change your name while on admin duty,");
	}
	if(!(1 <= level <= 10))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your level must range from 1 to 10.");
	}
	if(!(0 <= skinid <= 311))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The skin ID must range from 0 to 311.");
	}
	if(!isnull(pData[playerid][pNameChange]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have already requested a namechange. Please wait for a response.");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", name);
	mysql_tquery(connectionID, queryBuffer, "OnHitmanPassport", "isii", playerid, name, level, skinid);
	return 1;
}

CMD:plantbomb(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pDev] < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(!pData[playerid][pBombs])
	{
		return SCM(playerid, COLOR_SYNTAX, "You don't have any bombs.");
	}
	if(pData[playerid][pPlantedBomb])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have planted a bomb already.");
	}
    if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't plant a bomb inside.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't plant a bomb while inside of a vehicle");
	}

	GetPlayerPos(playerid, pData[playerid][pBombX], pData[playerid][pBombY], pData[playerid][pBombZ]);
    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);

	pData[playerid][pPlantedBomb] = 1;
	pData[playerid][pBombObject] = CreateDynamicObject(19602, pData[playerid][pBombX], pData[playerid][pBombY], pData[playerid][pBombZ] - 1.0, 0.0, 0.0, 0.0);
	pData[playerid][pBombs]--;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bombs = %i WHERE uid = %i", pData[playerid][pBombs], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SCM(playerid, COLOR_WHITE, "** Bomb has been planted, use /detonate to make it go BOOM!");
	return 1;
}

CMD:pickupbomb(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pDev] < 1 )
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not a hitman.");
	}
	if(!pData[playerid][pPlantedBomb])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't planted a bomb which you can pickup.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, pData[playerid][pBombX], pData[playerid][pBombY], pData[playerid][pBombZ]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of your planted bomb.");
	}

    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
	DestroyDynamicObject(pData[playerid][pBombObject]);

    pData[playerid][pBombObject] = INVALID_OBJECT_ID;
	pData[playerid][pPlantedBomb] = 0;
	pData[playerid][pBombs]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bombs = %i WHERE uid = %i", pData[playerid][pBombs], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SCM(playerid, COLOR_WHITE, "** You have picked up your bomb.");
	return 1;
}

CMD:detonate(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!pData[playerid][pPlantedBomb])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't planted a bomb which you can detonate.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 50.0, pData[playerid][pBombX], pData[playerid][pBombY], pData[playerid][pBombZ]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are too far away from your planted bomb.");
	}

	CreateExplosion(pData[playerid][pBombX], pData[playerid][pBombY], pData[playerid][pBombZ], 11, 10.0);
    DestroyDynamicObject(pData[playerid][pBombObject]);

	if(pData[playerid][pContractTaken] != INVALID_PLAYER_ID && IsPlayerInRangeOfPoint(pData[playerid][pContractTaken], 10.0, pData[playerid][pBombX], pData[playerid][pBombY], pData[playerid][pBombZ]))
	{
	    SetPlayerHealth(pData[playerid][pContractTaken], 0.0);
	    HandleContract(pData[playerid][pContractTaken], playerid);
	}

    pData[playerid][pBombObject] = INVALID_OBJECT_ID;
	pData[playerid][pPlantedBomb] = 0;

	SCM(playerid, COLOR_WHITE, "** You have detonated your bomb!");
	return 1;
}

CMD:saveaccounts(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(gettime() - gLastSave < 60 && pData[playerid][pHelper] < 1 || pData[playerid][pAdmin] < 2)
   	{
	    return SM(playerid, COLOR_SYNTAX, "This command can only be used every 6 minutes. Please wait %i more seconds.", 60 - (gettime() - gLastSave));
	}
	foreach(new i : Player)
	{
	    SavePlayerVariables(i);
	    SM(i, COLOR_LIGHTRED, "AdmCmd: %s has saved all player accounts.", GetRPName(playerid));
	}
	gLastSave = gettime();
	return 1;
}
CMD:forcesave(playerid, params[]) return callcmd::saveaccounts(playerid, params);
CMD:saveall(playerid, params[]) return callcmd::saveaccounts(playerid, params);
CMD:adestroyboombox(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new boomboxid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if((boomboxid = GetNearbyBoombox(playerid)) == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is no boombox in range.");
	}

	SM(playerid, COLOR_AQUA, "You have destroyed "SVRCLR"%s{CCFFFF}'s boombox.", GetRPName(boomboxid));
	DestroyBoombox(boomboxid);

	return 1;
}

CMD:setbanktimer(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new hours;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", hours))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setbanktimer [hours]");
	}
	if(hours < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Hours can't be below 0.");
	}

	RobberyInfo[rTime] = hours;
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has reset the bank robbery timer to %i hours.", GetRPName(playerid), hours);
	return 1;
}
CMD:setstoretimer(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new hours;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", hours))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setstoretimer [hours]");
	}
	if(hours < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Hours can't be below 0.");
	}

	RobberyInfo1[rTime1] = hours;
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has reset the store robbery timer to %i hours.", GetRPName(playerid), hours);
	return 1;
}
CMD:resetactiverobbery(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	ResetRobbery();
	ResetYachtRobbery();	
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has reset the active bank robbery.", GetRPName(playerid));
	return 1;
}
CMD:resetrobbery(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	RobberyInfo[rTime] = 0;
	ResetYachtRobbery();	
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has reset the bank robbery timer.", GetRPName(playerid));
	return 1;
}
CMD:resetstore(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	RobberyInfo1[rTime1] = 0;
	ResetYachtRobbery();	
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has reset the bank robbery timer.", GetRPName(playerid));
	return 1;
}
CMD:resetchop(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	ChopInfo[cTime] = 0;
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has reset the chop chop timer.", GetRPName(playerid));
	return 1;
}
CMD:resetrob(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	RobInfo[rTime] = 0;
	ResetYachtRobbery();	
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has reset the robbery timer.", GetRPName(playerid));
	return 1;
}
CMD:resetrobbiz(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	RobInfo1[rTime1] = 0;
	ResetYachtRobbery();	
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has reset the robbery timer.", GetRPName(playerid));
	return 1;
}

CMD:resetrobhouse(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new businessid;
	if(pData[playerid][pAdmin] < 6)
	{
	    return SCM(playerid, COLOR_GREY2, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", businessid))
	{
	    SCM(playerid, COLOR_GREY2, "Usage: /resetrobhouse [businessid]");
	    return 1;
	}
	HouseInfo[businessid][hRobbed] = 0;
	HouseInfo[businessid][hRobbing] = 0;
	ReloadHouse(businessid);
	ResetYachtRobbery();	

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE houses SET robbed = %i, robbing = %i WHERE id = %i", HouseInfo[businessid][hRobbed], HouseInfo[businessid][hRobbing], HouseInfo[businessid][hID]);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has reset house (ID: %d) the house robbery timer.", GetRPName(playerid), businessid);
	return 1;
}

CMD:givepayday(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid;

	if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givepayday [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SendPaycheck(targetid);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has forced a payday for %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:givepveh(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new model[20], modelid, targetid, color1, color2, Float:x, Float:y, Float:z, Float:a;

	if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "us[20]ii", targetid, model, color1, color2))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givepveh [playerid] [modelid/name] [color1] [color2]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if((modelid = GetVehicleModelByName(model)) == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid vehicle model.");
	}
	if(!(0 <= color1 <= 255) || !(0 <= color2 <= 255))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid color. Valid colors range from 0 to 255.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, pos_x, pos_y, pos_z, pos_a, color1, color2) VALUES(%i, '%s', %i, '%f', '%f', '%f', '%f', %i, %i)", pData[targetid][pID], GetPlayerNameEx(targetid), modelid, x + 2.0 * floatsin(-a, degrees), y + 2.0 * floatcos(-a, degrees), z, a, color1, color2);
	mysql_tquery(connectionID, queryBuffer);

	SM(targetid, COLOR_AQUA, "%s has given you your own "SVRCLR"%s{CCFFFF}...", GetRPName(playerid), vehicleNames[modelid - 400]);
	SM(playerid, COLOR_AQUA, "You have given %s their own "SVRCLR"%s{CCFFFF}.", GetRPName(targetid), vehicleNames[modelid - 400]);

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has given %s their own %s.", GetRPName(playerid), GetRPName(targetid), vehicleNames[modelid - 400]);
	Log_Write("log_admin", "%s (uid: %i) has given %s (uid: %i) their own %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], vehicleNames[modelid - 400]);
	return 1;
}

CMD:givedoublexp(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, hours;

    if(pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, hours))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /givedoublexp [playerid] [hours]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(hours < 1 && pData[targetid][pDoubleXP] - hours < 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player can't have under 0 hours of double XP.");
	}

	pData[targetid][pDoubleXP] += hours;

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has given %i hours of double XP to %s.", GetRPName(playerid), hours, GetRPName(targetid));
	SM(targetid, COLOR_YELLOW, "%s has given you %i hours of double XP.", GetRPName(playerid), hours);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET doublexp = %i WHERE uid = %i", pData[targetid][pDoubleXP], pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:randomfire(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(IsFireActive())
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a fire active already. /killfire to kill it!");
	}

	new
	    Float:x,
	    Float:y,
	    Float:z;

	RandomFire(0);

	GetDynamicObjectPos(gFireObjects[0], x, y, z);
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has started a random fire in %s.", GetRPName(playerid), GetZoneName(x, y, z));
	return 1;
}

CMD:killfire(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(!IsFireActive())
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is currently no fire active.");
	}

	for(new i = 0; i < MAX_FIRES; i ++)
	{
	    DestroyDynamicObject(gFireObjects[i]);
	    gFireObjects[i] = INVALID_OBJECT_ID;
	    gFireHealth[i] = 0.0;
	}

	gFires = 0;
	SCM(playerid, COLOR_SYNTAX, "Active fire killed.");
	return 1;
}

CMD:spawnfire(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new Float:px, Float:py, Float:pz;

    if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't create fires indoors.");
	}

	for(new x = 0; x < MAX_FIRES; x ++)
	{
	    if(gFireObjects[x] == INVALID_OBJECT_ID)
	    {
	        GetPlayerPos(playerid, px, py, pz);

	        if(!IsFireActive())
	        {
	            foreach(new i : Player)
	            {
	                if(GetFactionType(i) == FACTION_MEDIC)
	                {
	            		pData[i][pCP] = CHECKPOINT_MISC;
               			SetPlayerCheckpoint(i, px, py, pz, 3.0);
		   				SM(i, COLOR_DOCTOR, "** All units, a fire has been reported in %s. Please head to the beacon on your map. **", GetZoneName(px, py, pz));
					}
	            }
	        }

	        gFireObjects[x] = CreateDynamicObject(18691, px, py, pz - 2.4, 0.0, 0.0, 0.0, .streamdistance = 50.0);
	        gFireHealth[x] = 50.0;
			gFires++;

			return SCM(playerid, COLOR_SYNTAX, "Fire created!");
		}
	}

	SM(playerid, COLOR_SYNTAX, "You can't create anymore fires. The limit is %i fires.", MAX_FIRES);
	return 1;
}

CMD:number(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /number [playerid]");
	}
	if(!pData[playerid][pPhonebook])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you don't have a phonebook.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	SM(playerid, COLOR_GREY2, "(Name): %s, (Ph): %i", GetRPName(targetid), pData[targetid][pPhone]);
	return 1;
}

CMD:boombox(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new option[10], param[128];

	if(!pData[playerid][pBoombox])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have no boombox and therefore can't use this command.");
	}
	if(sscanf(params, "s[10]S()[128]", option, param))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /boombox [place | pickup | play]");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command from within the vehicle.");
	}

	if(!strcmp(option, "place", true))
	{
	    if(pData[playerid][pBoomboxPlaced])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have placed down a boombox already.");
	    }
	    if(GetNearbyBoombox(playerid) != INVALID_PLAYER_ID)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "There is already a boombox nearby. Place this one somewhere else.");
        }

		new
		    Float:x,
	    	Float:y,
	    	Float:z,
	    	Float:a,
			string[128];

		format(string, sizeof(string), "Boombox placed by:\n"SVRCLR"%s{F7A763}\n/boombox for more options.", GetPlayerNameEx(playerid));

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

	    pData[playerid][pBoomboxPlaced] = 1;
    	pData[playerid][pBoomboxObject] = CreateDynamicObject(2102, x, y, z - 1.0, 0.0, 0.0, a, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    	pData[playerid][pBoomboxText] = CreateDynamic3DTextLabel(string, COLOR_LIGHTORANGE, x, y, z - 0.8, 10.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
        pData[playerid][pBoomboxURL] = 0;

    	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places a boombox on the ground.", GetRPName(playerid));
	}
	else if(!strcmp(option, "pickup", true))
	{
	    if(!pData[playerid][pBoomboxPlaced])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have not placed down a boombox.");
	    }
	    if(!IsPlayerInRangeOfDynamicObject(playerid, pData[playerid][pBoomboxObject], 3.0))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not in range of your boombox.");
		}

		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s picks up their boombox and switches it off.", GetRPName(playerid));
		DestroyBoombox(playerid);
	}
    else if(!strcmp(option, "play", true))
	{
        if(!pData[playerid][pBoomboxPlaced])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have not placed down a boombox.");
	    }
	    if(!IsPlayerInRangeOfDynamicObject(playerid, pData[playerid][pBoomboxObject], 3.0))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You are not in range of your boombox.");
		}

    	pData[playerid][pMusicType] = MUSIC_BOOMBOX;
    	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	}

	return 1;
}

CMD:shakehand(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, type;

	if(sscanf(params, "ui", targetid, type))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /shakehand [playerid] [type (1-6)]");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't shake your own hand.");
	}
	if(!(1 <= type <= 6))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type. Valid types range from 1 to 6.");
	}

	pData[targetid][pShakeOffer] = playerid;
	pData[targetid][pShakeType] = type;

	SM(targetid, COLOR_AQUA, "** %s has offered to shake your hand. (/accept handshake)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have sent %s a handshake offer.", GetRPName(targetid));
	return 1;
}
CMD:dropgun(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new weaponid = GetScriptWeapon(playerid), objectid, Float:x, Float:y, Float:z;

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be onfoot in order to drop weapons.");
	}
	if(pData[playerid][pDuty] == 1)
	{
		return SCM(playerid, COLOR_ERROR, "[ERROR] You are not allowed to drop a weapon while on duty.");
	}	
	if(enabledpurge == 1)
	{
		return SCM(playerid, COLOR_WHITE, "You are not allowed to deposit when purge is enable");
	}
	if(!weaponid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be holding the weapon you're willing to drop.");
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pDueling] != INVALID_PLAYER_ID|| pData[playerid][pDueling1] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(GetHealth(playerid) < 60)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't drop weapons as your health is below 60.");
	}

	GetPlayerPos(playerid, x, y, z);

	objectid = CreateDynamicObject(weaponModelIDs[weaponid], x, y, z - 1.0, 93.7, 93.7, 120.0);
	new str[92];
	format(str, sizeof(str), "%s\nType '/grabgun' to grab this weapon.", GetWeaponNameEx(weaponid));
	Streamer_SetExtraInt(objectid, E_OBJECT_3DTEXT_ID, _:CreateDynamic3DTextLabel(str, -1, x, y, z - 1.0, 20.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
	Streamer_SetExtraInt(objectid, E_OBJECT_TYPE, E_OBJECT_WEAPON);
	Streamer_SetExtraInt(objectid, E_OBJECT_WEAPONID, weaponid);
	Streamer_SetExtraInt(objectid, E_OBJECT_FACTION, pData[playerid][pFaction]);
	Streamer_SetExtraInt(objectid, E_OBJECT_DONATOR, pData[playerid][pDonator]);
	RemovePlayerWeapon(playerid, weaponid);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s drops their %s on the ground.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	SM(playerid, COLOR_AQUA, "You have dropped your "SVRCLR"%s{CCFFFF}.", GetWeaponNameEx(weaponid));
	
	new szString[128];
	format(szString, sizeof(szString),  "``%s drops their %s on the ground.``", GetRPName(playerid), GetWeaponNameEx(weaponid));
	SendDiscordMessage(31, szString);
	return 1;
}

// Graffity System

stock SQL_SetInteger(sql_table[], sql_field[], sql_integer, sql_id)
{
    new sql_query[256];
    mysql_format(connectionID, sql_query, sizeof(sql_query), "UPDATE `%s` SET `%s`=%i WHERE `id`=%i", sql_table, sql_field, sql_integer, sql_id);
    return mysql_tquery(connectionID, sql_query);
}

stock SQL_SetString(sql_table[], sql_field[], sql_string[], sql_id)
{
    new sql_query[256];
    mysql_format(connectionID, sql_query, sizeof(sql_query), "UPDATE `%s` SET `%s`='%e' WHERE `id`=%i", sql_table, sql_field, sql_string, sql_id);
    return mysql_tquery(connectionID, sql_query);
}

forward LoadDynamicGraffities();

public LoadDynamicGraffities()
{
    new rows = cache_num_rows(), time = GetTickCount(), total;

    if (!rows)   return print("[Graffities] No records found.");

    for(new i = 0; i < rows; i++)
    {
        if (i >= MAX_GRAFFITIES) break;
        E_GRAFFITY[i][gID] = cache_get_field_content_int(i, "id");
        cache_get_field_content(i, "text", E_GRAFFITY[i][gText], connectionID, MAX_GRAFFITY_TEXT);
        E_GRAFFITY[i][gColor] = cache_get_field_content_int(i, "color");
        E_GRAFFITY[i][gBackColor] = cache_get_field_content_int(i, "back_color");
        cache_get_field_content(i, "font", E_GRAFFITY[i][gFont], connectionID, 16);
        E_GRAFFITY[i][gFontSize] = cache_get_field_content_int(i, "font_size");
        E_GRAFFITY[i][gBold] = cache_get_field_content_int(i, "bold");
        cache_get_field_content(i, "creator", E_GRAFFITY[i][gCreator], connectionID, 32);
        cache_get_field_content(i, "c_date", E_GRAFFITY[i][gCreateDate], connectionID, 64);
        E_GRAFFITY[i][gPosX] = cache_get_field_content_float(i, "posx");
        E_GRAFFITY[i][gPosY] = cache_get_field_content_float(i, "posy");
        E_GRAFFITY[i][gPosZ] = cache_get_field_content_float(i, "posz");
        E_GRAFFITY[i][gRotX] = cache_get_field_content_float(i, "rotx");
        E_GRAFFITY[i][gRotY] = cache_get_field_content_float(i, "roty");
        E_GRAFFITY[i][gRotZ] = cache_get_field_content_float(i, "rotz");
        E_GRAFFITY[i][gGotoX] = cache_get_field_content_float(i, "gotox");
        E_GRAFFITY[i][gGotoY] = cache_get_field_content_float(i, "gotoy");
        E_GRAFFITY[i][gGotoZ] = cache_get_field_content_float(i, "gotoz");
        E_GRAFFITY[i][gInterior] = cache_get_field_content_int(i, "interior");
        E_GRAFFITY[i][gVW] = cache_get_field_content_int(i, "world");
        E_GRAFFITY[i][gAccepted] = cache_get_field_content_int(i, "accepted");
        cache_get_field_content(i, "acceptor", E_GRAFFITY[i][gAcceptor], connectionID, 32);
        cache_get_field_content(i, "a_date", E_GRAFFITY[i][gAcceptDate], connectionID, 64);

        E_GRAFFITY[i][gON] = 1;
        E_GRAFFITY[i][gEditing] = 0;
        if(E_GRAFFITY[i][gAccepted])
        {

            E_GRAFFITY[i][gObject] = CreateDynamicObject(GRAFFITY_OBJECT_ID, E_GRAFFITY[i][gPosX], E_GRAFFITY[i][gPosY], E_GRAFFITY[i][gPosZ], 0.0, 0.0, E_GRAFFITY[i][gRotZ], E_GRAFFITY[i][gVW], E_GRAFFITY[i][gInterior]);
            SetDynamicObjectMaterial(E_GRAFFITY[i][gObject], 0, 0, "none", "none", 0);
            SetDynamicObjectMaterialText(E_GRAFFITY[i][gObject], 0, E_GRAFFITY[i][gText], OBJECT_MATERIAL_SIZE_256x32, E_GRAFFITY[i][gFont], E_GRAFFITY[i][gFontSize], E_GRAFFITY[i][gBold], E_GRAFFITY[i][gColor], E_GRAFFITY[i][gBackColor], 0);
        }

        total++;
    }
    printf("[Graffities] Loaded - %i. Total - %i. Time: %i ms", rows, total, GetTickCount()-time);
    return 1;
}

Graffity_Nearest(playerid)
{
    for(new i = 0; i < MAX_GRAFFITIES; i++)
    {
        if (E_GRAFFITY[i][gON])
        {
            if (IsPlayerInRangeOfPoint(playerid, 3.0, E_GRAFFITY[i][gPosX], E_GRAFFITY[i][gPosY], E_GRAFFITY[i][gPosZ]) && GetPlayerInterior(playerid) == E_GRAFFITY[i][gInterior] && GetPlayerVirtualWorld(playerid) == E_GRAFFITY[i][gVW])
            {
                return i;
            }
        }
    }
    return -1;
}

Graffity_GetFreeID()
{
    for(new i = 0; i < MAX_GRAFFITIES; i++)
    {
        if (!E_GRAFFITY[i][gON]) return i;
    }
    return -1;
}

Graffity_SetText(g_id, g_text[])
{
    if (!E_GRAFFITY[g_id][gON]) return -1;
    format(E_GRAFFITY[g_id][gText], 32, "%s", g_text);
    SetDynamicObjectMaterialText(E_GRAFFITY[g_id][gObject], 0, E_GRAFFITY[g_id][gText], OBJECT_MATERIAL_SIZE_256x32, E_GRAFFITY[g_id][gFont], E_GRAFFITY[g_id][gFontSize], E_GRAFFITY[g_id][gBold], E_GRAFFITY[g_id][gColor], E_GRAFFITY[g_id][gBackColor], 0);
    return 1;
}

Graffity_SetColor(g_id, g_color)
{
    if (!E_GRAFFITY[g_id][gON]) return -1;
    E_GRAFFITY[g_id][gColor] = g_color;  
    SetDynamicObjectMaterialText(E_GRAFFITY[g_id][gObject], 0, E_GRAFFITY[g_id][gText], OBJECT_MATERIAL_SIZE_256x32, E_GRAFFITY[g_id][gFont], E_GRAFFITY[g_id][gFontSize], E_GRAFFITY[g_id][gBold], E_GRAFFITY[g_id][gColor], E_GRAFFITY[g_id][gBackColor], 0);
    return 1;
}

Graffity_SetBackColor(g_id, g_color)
{
    if (!E_GRAFFITY[g_id][gON]) return -1;
    E_GRAFFITY[g_id][gBackColor] = g_color;
    SetDynamicObjectMaterialText(E_GRAFFITY[g_id][gObject], 0, E_GRAFFITY[g_id][gText], OBJECT_MATERIAL_SIZE_256x32, E_GRAFFITY[g_id][gFont], E_GRAFFITY[g_id][gFontSize], E_GRAFFITY[g_id][gBold], E_GRAFFITY[g_id][gColor], E_GRAFFITY[g_id][gBackColor], 0);
    return 1;
}

Graffity_SetFont(g_id, g_font[])
{
    if (!E_GRAFFITY[g_id][gON])  return -1;
    format(E_GRAFFITY[g_id][gFont], 16, "%s", g_font);
    SetDynamicObjectMaterialText(E_GRAFFITY[g_id][gObject], 0, E_GRAFFITY[g_id][gText], OBJECT_MATERIAL_SIZE_256x32, E_GRAFFITY[g_id][gFont], E_GRAFFITY[g_id][gFontSize], E_GRAFFITY[g_id][gBold], E_GRAFFITY[g_id][gColor], E_GRAFFITY[g_id][gBackColor], 0);
    return 1;
}

Graffity_SetFontSize(g_id, g_fontsize)
{
    if (!E_GRAFFITY[g_id][gON]) return -1;
    E_GRAFFITY[g_id][gFontSize] = g_fontsize;
    SetDynamicObjectMaterialText(E_GRAFFITY[g_id][gObject], 0, E_GRAFFITY[g_id][gText], OBJECT_MATERIAL_SIZE_256x32, E_GRAFFITY[g_id][gFont], E_GRAFFITY[g_id][gFontSize], E_GRAFFITY[g_id][gBold], E_GRAFFITY[g_id][gColor], E_GRAFFITY[g_id][gBackColor], 0);
    return 1;
}

Graffity_SetBold(g_id, g_bold)
{
    if (!E_GRAFFITY[g_id][gON]) return -1;
    E_GRAFFITY[g_id][gBold] = g_bold;
    SetDynamicObjectMaterialText(E_GRAFFITY[g_id][gObject], 0, E_GRAFFITY[g_id][gText], OBJECT_MATERIAL_SIZE_256x32, E_GRAFFITY[g_id][gFont], E_GRAFFITY[g_id][gFontSize], E_GRAFFITY[g_id][gBold], E_GRAFFITY[g_id][gColor], E_GRAFFITY[g_id][gBackColor], 0);
    return 1;
}

Graffity_ResetVariables(g_id)
{
    E_GRAFFITY[g_id][gID] = -1;
    E_GRAFFITY[g_id][gText][0] = 
    E_GRAFFITY[g_id][gFont][0] = 
    E_GRAFFITY[g_id][gCreator][0] =
    E_GRAFFITY[g_id][gCreateDate][0] =
    E_GRAFFITY[g_id][gAcceptor][0] = 
    E_GRAFFITY[g_id][gAcceptDate][0] = EOS;
    E_GRAFFITY[g_id][gColor] = 
    E_GRAFFITY[g_id][gBackColor] =
    E_GRAFFITY[g_id][gFontSize] =
    E_GRAFFITY[g_id][gBold] = 
    E_GRAFFITY[g_id][gInterior] = 
    E_GRAFFITY[g_id][gVW] = 
    E_GRAFFITY[g_id][gAccepted] = 0;
    E_GRAFFITY[g_id][gPosX] = 
    E_GRAFFITY[g_id][gPosY] = 
    E_GRAFFITY[g_id][gPosZ] = 
    E_GRAFFITY[g_id][gRotX] = 
    E_GRAFFITY[g_id][gRotY] = 
    E_GRAFFITY[g_id][gRotZ] = 
    E_GRAFFITY[g_id][gGotoX] = 
    E_GRAFFITY[g_id][gGotoY] = 
    E_GRAFFITY[g_id][gGotoZ] =
    E_GRAFFITY[g_id][gON] = 0;
    E_GRAFFITY[g_id][gObject] = INVALID_OBJECT_ID;
    return 1;
}

GetFullDate()
{
	new date[56], year, month, day, hour, minute, second;

	getdate(year, month, day);
	gettime(hour, minute, second);
	format(date, sizeof(date), "%02d/%02d/%i, %02d:%02d:%02d", day, month, year, hour, minute, second);
	return date;
}

Graffity_Accept(g_id, playerid)
{
    if (!E_GRAFFITY[g_id][gON]) return -1;
    if (E_GRAFFITY[g_id][gAccepted]) return -2;

    E_GRAFFITY[g_id][gAccepted] = 1;
    format(E_GRAFFITY[g_id][gAcceptor], 32, "%s", GetRPName(playerid));
    format(E_GRAFFITY[g_id][gAcceptDate], 64, "%s", GetFullDate());
    SQL_SetInteger("graffities", "accepted", E_GRAFFITY[g_id][gAccepted], g_id);
    SQL_SetString("graffities", "acceptor", E_GRAFFITY[g_id][gAcceptor], g_id);
    SQL_SetString("graffities", "a_date", E_GRAFFITY[g_id][gAcceptDate], g_id);

    if(!IsValidDynamicObject(E_GRAFFITY[g_id][gObject]))
    {
        E_GRAFFITY[g_id][gObject] = CreateDynamicObject(GRAFFITY_OBJECT_ID, E_GRAFFITY[g_id][gPosX], E_GRAFFITY[g_id][gPosY], E_GRAFFITY[g_id][gPosZ], 0.0, 0.0, E_GRAFFITY[g_id][gRotZ]);
        SetDynamicObjectMaterial(E_GRAFFITY[g_id][gObject], 0, 0, "none", "none", 0);
        SetDynamicObjectMaterialText(E_GRAFFITY[g_id][gObject], 0, E_GRAFFITY[g_id][gText], OBJECT_MATERIAL_SIZE_256x32, E_GRAFFITY[g_id][gFont], E_GRAFFITY[g_id][gFontSize], E_GRAFFITY[g_id][gBold], E_GRAFFITY[g_id][gColor], E_GRAFFITY[g_id][gBackColor], 0);
    }

    if (GetPVarInt(playerid, "Tester:Graffity"))     DeletePVar(playerid, "Tester:Graffity");
    if (GetPVarInt(playerid, "Tester:GraffityTime")) DeletePVar(playerid, "Tester:GraffityTime");
    SM(playerid, COLOR_SYNTAX, "You approved graffiti [ID: %i].", g_id);
    Graffity_Refresh(g_id);
    return 1;
}

Graffity_Decline(g_id, playerid)
{
    if (!E_GRAFFITY[g_id][gON])  return -1;
    if (E_GRAFFITY[g_id][gAccepted]) return -2;

    Graffity_ResetVariables(g_id);

    new query[128];
    mysql_format(connectionID, query, sizeof(query), "DELETE FROM `graffities` WHERE `id` = %i", g_id);
    mysql_tquery(connectionID, query);

    SM(playerid, COLOR_SYNTAX, "You have rejected graffiti [ID: %i].", g_id);
    return 1;
}

Graffity_GetAccepts(playerid)
{
    new acceptid = -1;

    for(new i = 0; i < MAX_GRAFFITIES; i++)
    {
        if (E_GRAFFITY[i][gON])
        {
            if (CompareStrings(E_GRAFFITY[i][gCreator], GetRPName(playerid)))
            {
                if (!E_GRAFFITY[i][gAccepted]) return acceptid;
            }
        }
    }
    return acceptid;
}

Graffity_GetPlayerEdit(playerid)
{
    if (!GetPVarInt(playerid, "Graffity:Edit")) return -1;
    return GetPVarInt(playerid, "Graffity:ID") - 1;
}

Graffity_GetColor(playerid)
{
    if (!GetPVarInt(playerid, "Graffity:Edit")) return -1;
    return GetPVarInt(playerid, "Graffity:Color") - 1;
}

Graffity_GetFont(playerid)
{
    if (!GetPVarInt(playerid, "Graffity:Edit")) return -1;
    return GetPVarInt(playerid, "Graffity:Font")-1;
}

Graffity_CreateTemporary(playerid, g_text[])
{
    new g_id = Graffity_GetFreeID(), Float:gx, Float:gy, Float:gz, Float:x, Float:y, Float:z, Float:angle;

    GetXYInFrontOfPlayerEx(playerid, gx, gy, gz, 1.0);
    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, angle);

    E_GRAFFITY[g_id][gObject] = CreateDynamicObject(GRAFFITY_OBJECT_ID, gx, gy, gz, 0.0, 0.0, angle, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
    SetDynamicObjectMaterial(E_GRAFFITY[g_id][gObject], 0, 0, "none", "none", 0);
    SetDynamicObjectMaterialText(E_GRAFFITY[g_id][gObject], 0, g_text, OBJECT_MATERIAL_SIZE_256x32, GRAFFITY_FONT[0][font_name], 16, 0, GRAFFITY_COLOR[0][color_data], GRAFFITY_BACK[0][color_data], 0);
    
    E_GRAFFITY[g_id][gID] = g_id;
    format(E_GRAFFITY[g_id][gText], 32, "%s", g_text);
    E_GRAFFITY[g_id][gColor] = GRAFFITY_COLOR[0][color_data];
    E_GRAFFITY[g_id][gBackColor] = GRAFFITY_BACK[0][color_data];
    format(E_GRAFFITY[g_id][gFont], 16, "%s", GRAFFITY_FONT[0][font_name]);
    E_GRAFFITY[g_id][gFontSize] = 16;
    E_GRAFFITY[g_id][gBold] = 0;
    format(E_GRAFFITY[g_id][gCreator], 32, "%s", GetRPName(playerid));
    format(E_GRAFFITY[g_id][gCreateDate], 64, "%s", GetFullDate());
    E_GRAFFITY[g_id][gPosX] = gx;
    E_GRAFFITY[g_id][gPosY] = gy;
    E_GRAFFITY[g_id][gPosZ] = gz;
    E_GRAFFITY[g_id][gRotX] = 0.0;
    E_GRAFFITY[g_id][gRotY] = 0.0;
    E_GRAFFITY[g_id][gRotZ] = 90.0;
    E_GRAFFITY[g_id][gGotoX] = x;
    E_GRAFFITY[g_id][gGotoY] = y;
    E_GRAFFITY[g_id][gGotoZ] = z;
    E_GRAFFITY[g_id][gInterior] = GetPlayerInterior(playerid);
    E_GRAFFITY[g_id][gVW] = GetPlayerVirtualWorld(playerid);
    E_GRAFFITY[g_id][gAccepted] = 0;
    E_GRAFFITY[g_id][gAcceptor] = EOS;
    E_GRAFFITY[g_id][gAcceptDate] = EOS;
    E_GRAFFITY[g_id][gON] = 1;
    E_GRAFFITY[g_id][gEditing] = 1;

    SetPVarInt(playerid, "Graffity:Edit", 1);
    SetPVarInt(playerid, "Graffity:ID", g_id + 1);
    SetPVarInt(playerid, "Graffity:Color", 1);
    SetPVarInt(playerid, "Graffity:Back", 1);
    SetPVarInt(playerid, "Graffity:Font", 1);

    Graffity_ShowPlayerEditDialog(playerid);

}

stock GetXYInFrontOfPlayerEx(playerid, &Float:X, &Float:Y, &Float:Z, Float:distance)
{
	new Float:A;
	GetPlayerPos(playerid, X, Y, Z);

	if (GetPlayerVehicleID(playerid))	GetVehicleZAngle(GetPlayerVehicleID(playerid), A);
	else								GetPlayerFacingAngle(playerid, A);

	X += (distance * floatsin(-A, degrees));
	Y += (distance * floatcos(-A, degrees));
}

Graffity_ShowPlayerEditDialog(playerid)
{
    new msg[1024] = "{FFFFFF}Parameter\t{FFFFFF}Value\n", catmsg[128], bold_state[16], title[32];

    new gcol = Graffity_GetColor(playerid), /*gback = Graffity_GetBackColor(playerid),*/ gfont = Graffity_GetFont(playerid), g_id = Graffity_GetPlayerEdit(playerid);

    strcat(msg, "Preview\n");
    strcat(msg, "Finish editing\n");
    strcat(msg, "Change the position of the graffiti\n");
    strcat(msg, "Change graffiti text\n");
    strcat(msg, "   \n");
    format(catmsg, sizeof(catmsg), "Graffiti color\t%s%s\n", GRAFFITY_COLOR[gcol][color_dlg], GRAFFITY_COLOR[gcol][color_name]);
    strcat(msg, catmsg);
    //format(catmsg, sizeof(catmsg), "{FFFFFF}The background\t%s%s\n", GRAFFITY_BACK[gback][color_dlg], GRAFFITY_BACK[gback][color_name]);
    //strcat(msg, catmsg);
    format(catmsg, sizeof(catmsg), "{FFFFFF}Font\t%s\n", GRAFFITY_FONT[gfont][font_name]);
    strcat(msg, catmsg);
    format(catmsg, sizeof(catmsg), "Font size\t%i\n", E_GRAFFITY[g_id][gFontSize]);
    strcat(msg, catmsg);
    
    if (E_GRAFFITY[g_id][gBold]) format(bold_state, sizeof(bold_state), "%s", RIGHT_YES);
    else                        format(bold_state, sizeof(bold_state), "%s", RIGHT_NO);

    format(catmsg, sizeof(catmsg), "Highlight in bold\t%s", bold_state);
    strcat(msg, catmsg);

    format(title, sizeof(title), "{FFFFFF}Graffiti [ID: %i]", Graffity_GetPlayerEdit(playerid));
    ShowPlayerDialog(playerid, Graffity_CE, DIALOG_STYLE_TABLIST_HEADERS, title, msg, "Select", "Cancel");
    return 1;
}

Graffity_DestroyTemporary(g_id, clear_var = 0)
{
	if (g_id != -1 && E_GRAFFITY[g_id][gON])
	{
		if(IsValidDynamicObject(E_GRAFFITY[g_id][gObject]))
		{
			DestroyDynamicObject(E_GRAFFITY[g_id][gObject]);
		}
	}

    if(clear_var)
    {
    	Graffity_ResetVariables(g_id);
    } 

    return 1;
}

Graffity_Destroy(g_id)
{
    if (!E_GRAFFITY[g_id][gON])          return -1;

    if (IsValidDynamicObject(E_GRAFFITY[g_id][gObject]))
			DestroyDynamicObject(E_GRAFFITY[g_id][gObject]);

    Graffity_ResetVariables(g_id);

    new query[128];
    mysql_format(connectionID, query, sizeof(query), "DELETE FROM `graffities` WHERE `id` = %i", g_id);
    mysql_tquery(connectionID, query);
    return 1;
}

Graffity_Insert(g_id)
{
    new query[1024];
    mysql_format(connectionID, query, sizeof(query), "INSERT INTO `graffities` (`id`, `text`, `color`, `back_color`, `font`, `font_size`, `bold`, `creator`, `c_date`, `posx`, `posy`, `posz`, `rotx`, `roty`, `rotz`, `gotox`, `gotoy`, `gotoz`, `interior`, `world`, `accepted`, `acceptor`, `a_date`) VALUES (%i, '%s', %d, %d, '%s', %i, %i, '%s', '%s', %f, %f, %f, %f, %f, %f, %f, %f, %f, %i, %i, 0, '', '')",
    g_id, E_GRAFFITY[g_id][gText], E_GRAFFITY[g_id][gColor], E_GRAFFITY[g_id][gBackColor], E_GRAFFITY[g_id][gFont], E_GRAFFITY[g_id][gFontSize], E_GRAFFITY[g_id][gBold], E_GRAFFITY[g_id][gCreator], E_GRAFFITY[g_id][gCreateDate], E_GRAFFITY[g_id][gPosX], E_GRAFFITY[g_id][gPosY], E_GRAFFITY[g_id][gPosZ],
    E_GRAFFITY[g_id][gRotX], E_GRAFFITY[g_id][gRotY], E_GRAFFITY[g_id][gRotZ], E_GRAFFITY[g_id][gGotoX], E_GRAFFITY[g_id][gGotoY], E_GRAFFITY[g_id][gGotoZ], E_GRAFFITY[g_id][gInterior], E_GRAFFITY[g_id][gVW]);
    mysql_tquery(connectionID, query);
    return 1;
}

Graffity_ResetPlayer(playerid)
{
    DeletePVar(playerid, "Graffity:Edit");
    DeletePVar(playerid, "Graffity:ID");
    DeletePVar(playerid, "Graffity:Color");
    DeletePVar(playerid, "Graffity:Back");
    DeletePVar(playerid, "Graffity:Font");
    DeletePVar(playerid, "Graffity:Show");
    DeletePVar(playerid, "Graffity:Showing");
    DeletePVar(playerid, "Graffity:BackState");
    DeletePVar(playerid, "Graffity:BackTime");
    DeletePVar(playerid, "Graffity:EditPos");
    DeletePVar(playerid, "Graffity:Spraying");
    DeletePVar(playerid, "Graffity:SprayingTime");
    return 1;
}

Graffity_GetAcceptList(playerid)
{
    new msg[1024] = "{FFFFFF}ID graffiti\t{FFFFFF}Creator\t{FFFFFF}date of creation\n";

    new count = 0;

    for(new i = 0; i < MAX_GRAFFITIES; i++)
    {
        if (count == 10) break;
        if (!E_GRAFFITY[i][gAccepted] && E_GRAFFITY[i][gON] && !E_GRAFFITY[i][gEditing])
        {
            format(msg, sizeof(msg), "%s%i\t%s\t%s\n", msg, i, E_GRAFFITY[i][gCreator], E_GRAFFITY[i][gCreateDate]);
            count++;
        }
    }
    if (count > 0)
    {
        ShowPlayerDialog(playerid, GraffityList, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Graffiti pending", msg, "Close", "");
    }
    else
    {
        SM(playerid, COLOR_SYNTAX, "There are currently no graffiti to consider.");
    }
    return 1;
}

Graffity_PlayerTimer(playerid)
{
    if (GetPVarInt(playerid, "Graffity:Edit"))
    {
        if (GetPVarInt(playerid, "Graffity:Showing"))
        {
            if (GetPVarInt(playerid, "Graffity:Show"))
            {
                SetPVarInt(playerid, "Graffity:Show", GetPVarInt(playerid, "Graffity:Show")-1);
            }
            else 
            {
                if (!GetPVarInt(playerid, "Graffity:BackState"))
                {
                    DeletePVar(playerid, "Graffity:Show");
                    DeletePVar(playerid, "Graffity:Showing");
                    Graffity_ShowPlayerEditDialog(playerid);
                }
            }
        }
    }
    if (GetPVarInt(playerid, "Graffity:Edit"))
    {
        new grafid = Graffity_GetPlayerEdit(playerid);
        if (!IsPlayerInRangeOfPoint(playerid, GRAFFITY_DISTANCE_WARN, E_GRAFFITY[grafid][gPosX], E_GRAFFITY[grafid][gPosY], E_GRAFFITY[grafid][gPosZ]) || GetPlayerVirtualWorld(playerid) != E_GRAFFITY[grafid][gVW] || GetPlayerInterior(playerid) != E_GRAFFITY[grafid][gInterior])
        {
            if (!GetPVarInt(playerid, "Graffity:BackState"))
            {
                SetPVarInt(playerid, "Graffity:BackState", 1);
                SetPVarInt(playerid, "Graffity:BackTime", GRAFFITY_DESTROY_TIME);
                SM(playerid, COLOR_SYNTAX, "You have %i seconds to return to the graffiti.", GRAFFITY_DESTROY_TIME);
            }
            else 
            {
                if (GetPVarInt(playerid, "Graffity:BackTime"))
                {
                    SetPVarInt(playerid, "Graffity:BackTime", GetPVarInt(playerid, "Graffity:BackTime") - 1);
                }
                else 
                {
                    SCM(playerid, COLOR_SYNTAX, "The graffiti has been canceled. ");
                    Graffity_DestroyTemporary(grafid, 1);
                    
                    Graffity_ResetPlayer(playerid);
                }
            }
        }
        else 
        {
            if (GetPVarInt(playerid, "Graffity:BackState"))
            {
                DeletePVar(playerid, "Graffity:BackState");
                DeletePVar(playerid, "Graffity:BackTime");
            }
        }
    }
    if (GetPVarInt(playerid, "Graffity:Spraying"))
    {
        if (GetPVarInt(playerid, "Graffity:SprayingTime"))
        {
            if (!pData[playerid][pInjured] || GetPlayerAnimationIndex(playerid) != 1469) {
                SetPVarInt(playerid, "Graffity:SprayingTime", GetPVarInt(playerid, "Graffity:SprayingTime")-1);
                new mes[32];
                format(mes, sizeof(mes), "~y~Spraying the graffiti... %i", GetPVarInt(playerid, "Graffity:SprayingTime"));
                Graffity_DestroyTemporary(Graffity_GetPlayerEdit(playerid), 0);
                GameTextForPlayer(playerid, mes, 1000, 4);
            } else {
                Graffity_DestroyTemporary(Graffity_GetPlayerEdit(playerid), 1); 
                Graffity_ResetPlayer(playerid);

                SCM(playerid, COLOR_SYNTAX, "Graffiti creation has been canceled.");
            }
        }
        else 
        {
            new g_id = Graffity_GetPlayerEdit(playerid);
            Graffity_DestroyTemporary(Graffity_GetPlayerEdit(playerid), 0);
            SCM(playerid, COLOR_SYNTAX, "Your graffiti will appear here when the administration approves.");
            Graffity_ResetPlayer(playerid);
            Graffity_Insert(g_id);
            E_GRAFFITY[g_id][gEditing] = 0;
            TogglePlayerControllable(playerid, 1);
            callcmd::stopanim(playerid, "");
        }
    }
    if (GetPVarInt(playerid, "Tester:Graffity"))
    {
        new grafid = GetPVarInt(playerid, "Tester:Graffity")-1;
        if (GetPVarInt(playerid, "Tester:GraffityTime"))
        {
            SetPVarInt(playerid, "Tester:GraffityTime", GetPVarInt(playerid, "Tester:GraffityTime") - 1);
        }
        else 
        {
            Graffity_DestroyTemporary(grafid);
            DeletePVar(playerid, "Tester:Graffity");
            DeletePVar(playerid, "Tester:GraffityTime");
            SCM(playerid, COLOR_SYNTAX, "The graffiti was removed after 10 seconds of viewing. ");
        }
    }
    return 1;
}

Graffity_OnPlayerDisconnect(playerid)
{
    new grafid = Graffity_GetPlayerEdit(playerid);
    if (GetPVarInt(playerid, "Graffity:Edit"))
    {
        Graffity_DestroyTemporary(grafid, 1);
    }
    if (GetPVarInt(playerid, "Graffity:Spraying"))
    {
        Graffity_DestroyTemporary(grafid, 1);
    }
    if (GetPVarInt(playerid, "Tester:Graffity"))
    {
        Graffity_DestroyTemporary(GetPVarInt(playerid, "Tester:Graffity") - 1);
    }
    return 1;
}

Graf_OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rz)
{
	new Float:oldX, Float:oldY, Float:oldZ,
	Float:oldRotX, Float:oldRotY, Float:oldRotZ;

    GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

    if (GetPVarInt(playerid, "Graffity:EditPos") && response == EDIT_RESPONSE_CANCEL)
    {
        new graf_id = Graffity_GetPlayerEdit(playerid);

        if (E_GRAFFITY[graf_id][gEditing] && E_GRAFFITY[graf_id][gON] && E_GRAFFITY[graf_id][gObject] == objectid)
        {
            SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
            SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
            Graffity_ShowPlayerEditDialog(playerid);
            DeletePVar(playerid, "Graffity:EditPos");
        }
    }
    else if (GetPVarInt(playerid, "Graffity:EditPos") && response == EDIT_RESPONSE_FINAL)
    {
        new graf_id = Graffity_GetPlayerEdit(playerid);

        if (E_GRAFFITY[graf_id][gEditing] && E_GRAFFITY[graf_id][gON] && E_GRAFFITY[graf_id][gObject] == objectid)
        {
            E_GRAFFITY[graf_id][gPosX] = x;
            E_GRAFFITY[graf_id][gPosY] = y;
            E_GRAFFITY[graf_id][gPosZ] = z;
            E_GRAFFITY[graf_id][gRotZ] = rz;
            Graffity_ShowPlayerEditDialog(playerid);
            DeletePVar(playerid, "Graffity:EditPos");
        }
    }
    return 1;
}

Graffity_OnPlayerDeath(playerid)
{
    if (Graffity_GetPlayerEdit(playerid) != -1 || GetPVarInt(playerid, "Graffity:Spraying"))
    {
        SCM(playerid, COLOR_SYNTAX, "Graffiti creation has been canceled."); //×ž×¢×œ×•×
        Graffity_DestroyTemporary(Graffity_GetPlayerEdit(playerid), 1);
        Graffity_ResetPlayer(playerid);
    }
    return 1;
}

Graffity_Refresh(id)
{
	if (id != -1 && E_GRAFFITY[id][gON])
	{

		if(IsValidDynamicObject(E_GRAFFITY[id][gObject]))
		{
			DestroyDynamicObject(E_GRAFFITY[id][gObject]);
		}

        //GraffitiData[id][graffitiIcon] = CreateDynamicMapIcon(GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 23, 0, -1, -1, -1, 100.0, MAPICON_GLOBAL);
		E_GRAFFITY[id][gObject] = CreateDynamicObject(GRAFFITY_OBJECT_ID, E_GRAFFITY[id][gPosX], E_GRAFFITY[id][gPosY], E_GRAFFITY[id][gPosZ], 0.0, 0.0, E_GRAFFITY[id][gRotZ], E_GRAFFITY[id][gVW], E_GRAFFITY[id][gInterior]);

		SetDynamicObjectMaterial(E_GRAFFITY[id][gObject], 0, 0, "none", "none", 0);
        SetDynamicObjectMaterialText(E_GRAFFITY[id][gObject], 0, E_GRAFFITY[id][gText], OBJECT_MATERIAL_SIZE_256x32, E_GRAFFITY[id][gFont], E_GRAFFITY[id][gFontSize], E_GRAFFITY[id][gBold], E_GRAFFITY[id][gColor], E_GRAFFITY[id][gBackColor], 0);
	}
	return 1;
}

CompareStrings(string[], string2[])
{
	return (!strcmp(string, string2, true))?(1):(0);
}

CMD:graffiti(playerid, params[]) return callcmd::gr(playerid, params);
CMD:gr(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new option[16], parameters[145];

    if (sscanf(params, "s[16]S()[144]", option, parameters))
    {
        SCM(playerid, COLOR_SYNTAX, "(/gr)affity [create / stop]");
        return 1;
    }
    if(CompareStrings(option, "create"))
    {
        new g_text[33];
        if (sscanf(parameters, "s[32]", g_text))                                         return SCM(playerid, COLOR_SYNTAX, "/gr create [text]");
        if (strlen(g_text) > MAX_GRAFFITY_TEXT || strlen(g_text) < MIN_GRAFFITY_TEXT)    return SM(playerid, COLOR_SYNTAX, "Min: %i characters, Max: %i characters.", MIN_GRAFFITY_TEXT, MAX_GRAFFITY_TEXT);
        if (Graffity_GetFreeID() == -1)                                                  return SCM(playerid, COLOR_SYNTAX, "Graffiti limit exceeded. Please try to create graffiti later.");
        if (AntiCheatGetWeapon(playerid) != 41)                                          return SCM(playerid, COLOR_SYNTAX, "You should have a can in your hands.");
        if (Graffity_GetAccepts(playerid) != -1) 
        {
            SCM(playerid, COLOR_SYNTAX, "You have already created graffiti and it is under consideration.");
            SCM(playerid, COLOR_SYNTAX, "Wait until the graffiti is rejected or approved before painting a new one.");
            return 1;
        }
        if (Graffity_Nearest(playerid) != -1)        return SCM(playerid, COLOR_SYNTAX, "There is already graffiti next to you. ");
        if (Graffity_GetPlayerEdit(playerid) != -1)  return SCM(playerid, COLOR_SYNTAX, "You are already editing graffiti.");
        if (IsPlayerInAnyVehicle(playerid))          return SCM(playerid, COLOR_SYNTAX, "You must not be in vehicle. ");
        if (pData[playerid][pInjured])          return SCM(playerid, COLOR_SYNTAX, "You cannot paint graffiti while injured / dying. ");
        
        Graffity_CreateTemporary(playerid, g_text);
        return 1;
    }
    else if (CompareStrings(option, "stop"))
    {
        if (Graffity_GetPlayerEdit(playerid) == -1)      return SCM(playerid, COLOR_SYNTAX, "You are not editing graffiti. ");
        if (!GetPVarInt(playerid, "Graffity:Spraying"))   return SCM(playerid, COLOR_SYNTAX, "You don't paint graffiti.");
        
        SCM(playerid, COLOR_SYNTAX, "Graffiti creation has been canceled.");
        Graffity_DestroyTemporary(Graffity_GetPlayerEdit(playerid), 1);
        Graffity_ResetPlayer(playerid);
        TogglePlayerControllable(playerid, true);
        callcmd::stopanim(playerid, "");
        return 1;
    }
    else
    {
        SCM(playerid, COLOR_SYNTAX, "(/gr)affity [create / stop]");
    }
    return 1;
}

CMD:agr(playerid, params[]) return callcmd::agreegraffiti(playerid, params);
CMD:agreegraffiti(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new option[16], parameters[128];
	if(pData[playerid][pAdmin] < 10)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if (sscanf(params, "s[16]S()[127]", option, parameters))
	{
		SCM(playerid, COLOR_SYNTAX, "(/agr)eegraffiti [options]");
		if(pData[playerid][pAdmin] < 3)
		{
			return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
		}
		else
		{
			return SCM(playerid, COLOR_SYNTAX, "list / goto / show / accept / decline /destroy");
		}
	}
	if (CompareStrings(option, "list"))
	{
		return Graffity_GetAcceptList(playerid);
	}
	else if (CompareStrings(option, "goto"))
	{
		new grafid;

		if (sscanf(parameters, "d", grafid)) 															 return SCM(playerid, COLOR_SYNTAX, "/agreegraffitigoto [ID graffiti]");
		if (grafid < 0 || grafid >= MAX_GRAFFITIES || !E_GRAFFITY[grafid][gON])							 return SCM(playerid, COLOR_SYNTAX, "No graffiti with this ID found.");
		if (pData[playerid][pAdmin] < 5 && E_GRAFFITY[grafid][gAccepted]) return SCM(playerid, COLOR_SYNTAX, "This graffiti has already been approved. It is impossible to teleport to him.");

		SetPlayerPos(playerid, E_GRAFFITY[grafid][gGotoX], E_GRAFFITY[grafid][gGotoY], E_GRAFFITY[grafid][gGotoZ]);
		SetPlayerInterior(playerid, E_GRAFFITY[grafid][gInterior]);
		SetPlayerVirtualWorld(playerid, E_GRAFFITY[grafid][gVW]);
	}
	else if (CompareStrings(option, "show"))
	{
		new g_id = Graffity_Nearest(playerid);

		if (g_id == -1) 										return SCM(playerid, COLOR_SYNTAX, "There is no graffiti near you.");
		if (E_GRAFFITY[g_id][gAccepted])						return SCM(playerid, COLOR_SYNTAX, "Graffiti needs no consideration.");
		if (E_GRAFFITY[g_id][gEditing])							return SCM(playerid, COLOR_SYNTAX, "The graffiti is currently being edited. Please wait a while.");
		if (IsValidDynamicObject(E_GRAFFITY[g_id][gObject])) 	return SCM(playerid, COLOR_SYNTAX, "Graffiti already exists.");

		E_GRAFFITY[g_id][gObject] = CreateDynamicObject(GRAFFITY_OBJECT_ID, E_GRAFFITY[g_id][gPosX], E_GRAFFITY[g_id][gPosY], E_GRAFFITY[g_id][gPosZ], 0.0, 0.0, E_GRAFFITY[g_id][gRotZ], E_GRAFFITY[g_id][gVW], E_GRAFFITY[g_id][gInterior]);
    	SetDynamicObjectMaterial(E_GRAFFITY[g_id][gObject], 0, 0, "none", "none", 0);
    	SetDynamicObjectMaterialText(E_GRAFFITY[g_id][gObject], 0, E_GRAFFITY[g_id][gText], OBJECT_MATERIAL_SIZE_256x32, E_GRAFFITY[g_id][gFont], E_GRAFFITY[g_id][gFontSize], E_GRAFFITY[g_id][gBold], E_GRAFFITY[g_id][gColor], E_GRAFFITY[g_id][gBackColor], 0);
		SetPVarInt(playerid, "Tester:Graffity", g_id+1);
		SetPVarInt(playerid, "Tester:GraffityTime", 10);
		SCM(playerid, COLOR_SYNTAX, "After 10 seconds, the graffiti will disappear.");
	}
	else if (CompareStrings(option, "accept"))
	{
		new g_id = Graffity_Nearest(playerid);

		if (g_id == -1) 				 return SCM(playerid, COLOR_SYNTAX, "There is no graffiti near you.");
		if (E_GRAFFITY[g_id][gAccepted]) return SCM(playerid, COLOR_SYNTAX, "The graffiti needs no consideration.");
		if (E_GRAFFITY[g_id][gEditing])	 return SCM(playerid, COLOR_SYNTAX, "The graffiti is currently being edited. Please wait a while.");
		
		Graffity_Accept(g_id, playerid);
		return 1;
	}
	else if (CompareStrings(option, "decline"))
	{
		new g_id = Graffity_Nearest(playerid);

		if (g_id == -1)					 return SCM(playerid, COLOR_SYNTAX, "There is no graffiti near you.");
		if (E_GRAFFITY[g_id][gAccepted]) return SCM(playerid, COLOR_SYNTAX, "The graffiti needs no consideration.");
		if (E_GRAFFITY[g_id][gEditing])	 return SCM(playerid, COLOR_SYNTAX, "The graffiti is currently being edited. Please wait a while.");
		Graffity_Destroy(g_id);
		Graffity_Decline(g_id, playerid);
		return 1;
	}
	else if (CompareStrings(option, "info"))
	{
		new g_id = Graffity_Nearest(playerid);

		if(pData[playerid][pAdmin] < 5)
		{
			return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
		}
		if (g_id == -1)												   	return SCM(playerid, COLOR_SYNTAX, "There is no graffiti near you.");
		if (E_GRAFFITY[g_id][gEditing])								 	return SCM(playerid, COLOR_SYNTAX, "The graffiti is currently being edited. Please wait a while.");

		new msg[1024] = "{FFFFFF}", msgcat[128];
		format(msg, sizeof(msg), "{FFFFFF}ID graffiti\t%d\nCreator\t%s\nCreation date\t%s\nFont\t%s\n", g_id, E_GRAFFITY[g_id][gCreator], E_GRAFFITY[g_id][gCreateDate], E_GRAFFITY[g_id][gFont]);
		if (E_GRAFFITY[g_id][gAccepted])
		{
			format(msgcat, sizeof(msgcat), "	\nApproved\t%s\nDate of approval\t%s\n", E_GRAFFITY[g_id][gAcceptor], E_GRAFFITY[g_id][gAcceptDate]); //Ã®
		}
		strcat(msg, msgcat);

		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST, "{FFFFFF}Information about graffiti", msg, "Close", "");
	}
	else if (CompareStrings(option, "destroy"))
	{
		new g_id;

		if(pData[playerid][pAdmin] < 5)
		{
			return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
		}
		if (sscanf(parameters, "d", g_id)) 									return SCM(playerid, COLOR_SYNTAX, "/agreegraffitidestroy [ID graffiti]");
		if (g_id < 0 || g_id >= MAX_GRAFFITIES || !E_GRAFFITY[g_id][gON])	return SCM(playerid, COLOR_SYNTAX, "No graffiti with this ID found.");
		if (E_GRAFFITY[g_id][gEditing])										return SCM(playerid, COLOR_SYNTAX, "The graffiti is currently being edited. Please wait a while.");
		if (!E_GRAFFITY[g_id][gAccepted])									return SCM(playerid, COLOR_SYNTAX, "The graffiti is not yet approved. If you want to remove it - use /gr decline.");
		
		Graffity_Destroy(g_id);
		SM(playerid, COLOR_SYNTAX, "You removed the graffiti [ID: %i].", g_id);
	}
	else 
	{
		SCM(playerid, COLOR_SYNTAX, "/agreegraffiti [options]");
		if(pData[playerid][pAdmin] < 5)
		{
			return SCM(playerid, COLOR_SYNTAX, "list / goto / show / accept / decline / info / destroy");
		}
		else
		{
			return SCM(playerid, COLOR_SYNTAX, "list / goto / show / accept / decline");
		}
	}
	return 1;
}

CMD:pickupgun(playerid, params[]) return callcmd::grabgun(playerid, params);
CMD:grabgun(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be onfoot in order to pickup weapons.");
	}
	if(enabledpurge == 1)
	{
		return SCM(playerid, COLOR_WHITE, "You are not allowed to deposit when purge is enable");
	}	
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not allowed to grab a gun when you are weapon restricted or level 1.");
	}	
	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= j; i ++)
	{
	    if(!IsValidDynamicObject(i) || !IsPlayerInRangeOfDynamicObject(playerid, i, 2.0) || Streamer_GetExtraInt(i, E_OBJECT_TYPE) != E_OBJECT_WEAPON)
			continue;

	    if(Streamer_GetExtraInt(i, E_OBJECT_FACTION) >= 0 && pData[playerid][pFaction] != Streamer_GetExtraInt(i, E_OBJECT_FACTION))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This weapon belongs to a specific faction. You may not pick it up.");
	    }
	    if(Streamer_GetExtraInt(i, E_OBJECT_DONATOR) >= 0 && pData[playerid][pDonator] != Streamer_GetExtraInt(i, E_OBJECT_DONATOR))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "This weapon belongs to a specific DONATOR. You may not pick it up.");
	    }

	    new weaponid = Streamer_GetExtraInt(i, E_OBJECT_WEAPONID);
	    new Text3D:textid = Text3D:Streamer_GetExtraInt(i, E_OBJECT_3DTEXT_ID);

	    GiveWeapon(playerid, weaponid);
	    DestroyDynamicObject(i);
        if(IsValidDynamic3DTextLabel(textid))
        {
            DestroyDynamic3DTextLabel(textid);
        }
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s picks up a %s from the ground.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SM(playerid, COLOR_AQUA, "You have picked up a %s.", GetWeaponNameEx(weaponid));
		
		
		new szString[128];
		format(szString, sizeof(szString),  "``%s  picks up a %s from the ground.!`` ",  GetRPName(playerid), GetWeaponNameEx(weaponid));
		SendDiscordMessage(31, szString);
	    
		
		return 1;
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any dropped weapons.");
	return 1;
}
CMD:confirm(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new Float:x, Float:y, Float:z;

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pZoneCreation])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not creating any land or turf at the moment.");
	}

    if(pData[playerid][pMinX] == 0.0)
	{
        GetPlayerPos(playerid, pData[playerid][pMinX], y, z);
        pData[playerid][pZonePickups][0] = CreateDynamicPickup(1239, 1, pData[playerid][pMinX], y, z, .playerid = playerid);
		SCM(playerid, COLOR_WHITE, "** Boundary 1/4 set (min X).");
	}
	else if(pData[playerid][pMinY] == 0.0)
	{
        GetPlayerPos(playerid, x, pData[playerid][pMinY], z);
        pData[playerid][pZonePickups][1] = CreateDynamicPickup(1239, 1, x, pData[playerid][pMinY], z, .playerid = playerid);
        SCM(playerid, COLOR_WHITE, "** Boundary 2/4 set (min Y).");
	}
	else if(pData[playerid][pMaxX] == 0.0)
	{
        GetPlayerPos(playerid, pData[playerid][pMaxX], y, z);
        pData[playerid][pZonePickups][2] = CreateDynamicPickup(1239, 1, pData[playerid][pMaxX], y, z, .playerid = playerid);
        SCM(playerid, COLOR_WHITE, "** Boundary 3/4 set (max X).");
	}
	else if(pData[playerid][pMaxY] == 0.0)
	{
        GetPlayerPos(playerid, x, pData[playerid][pMaxY], z);
        SCM(playerid, COLOR_WHITE, "** Boundary 4/4 set (max Y).");

        pData[playerid][pZonePickups][3] = CreateDynamicPickup(1239, 1, x, pData[playerid][pMaxY], z, .playerid = playerid);
        pData[playerid][pZoneID] = GangZoneCreate(pData[playerid][pMinX], pData[playerid][pMinY], pData[playerid][pMaxX], pData[playerid][pMaxY]);

        GangZoneShowForPlayer(playerid, pData[playerid][pZoneID], 0x33CC33FF);

        if(pData[playerid][pZoneCreation] == ZONETYPE_LAND) {
	        ShowPlayerDialog(playerid, DIALOG_CONFIRMZONE, DIALOG_STYLE_MSGBOX, "Land System", "You have set the four boundary points. The green zone on your mini-map\nrepresents the area of your land. You can choose to start over or complete\nthe creation of your land.\n\nWhat would you like to do now?", "Create", "Restart");
		} else if(pData[playerid][pZoneCreation] == ZONETYPE_TURF) {
	        ShowPlayerDialog(playerid, DIALOG_CONFIRMZONE, DIALOG_STYLE_MSGBOX, "Turf System", "You have set the four boundary points. The green zone on your mini-map\nrepresents the area of your turf. You can choose to start over or complete\nthe creation of your turf.\n\nWhat would you like to do now?", "Create", "Restart");
		}else if(pData[playerid][pZoneCreation] == ZONETYPE_SAFEZONE) {
	        ShowPlayerDialog(playerid, DIALOG_CONFIRMZONE, DIALOG_STYLE_MSGBOX, "Greenzone System", "You have set the four boundary points. The green zone on your mini-map\nrepresents the area of your Greenzone. You can choose to start over or complete\nthe creation of your Greenzone.\n\nWhat would you like to do now?", "Create", "Restart");
		}
	}

	return 1;
}

CMD:landcancel(playerid, params[])
{
    if (pData[playerid][pAdmin] < 6)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if(pData[playerid][pZoneCreation] != ZONETYPE_LAND)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not creating a land at the moment.");
	}

	CancelZoneCreation(playerid);
	SCM(playerid, COLOR_LIGHTRED, "** Land creation cancelled.");
	return 1;
}

CMD:mp3(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!pData[playerid][pMP3Player])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have an MP3 player.");
	}

	pData[playerid][pMusicType] = MUSIC_MP3PLAYER;
	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	return 1;
}

CMD:setradio(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in any vehicle.");
	}

	pData[playerid][pMusicType] = MUSIC_VEHICLE;
	ShowDialogToPlayer(playerid, DIALOG_MP3PLAYER);
	return 1;
}

CMD:changename(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 222.4565,2343.4070,1017.0952) && !IsPlayerInRangeOfPoint(playerid, 3.0, 222.4565,2343.4070,1017.0952))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the desk at city hall.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /changename [new name]");
	}
	if(!(3 <= strlen(params) <= 20))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your name must range from 3 to 20 characters.");
	}
	if(strfind(params, "_") == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your name needs to contain at least one underscore.");
	}
	if(!IsValidName(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid characters. Your name may only contain letters and underscores.");
	}
	if(pData[playerid][pCash] < pData[playerid][pLevel] * 50000)
	{
	    return SM(playerid, COLOR_SYNTAX, "You need at least $%i to change your name at your level.", pData[playerid][pLevel] * 50000);
	}
	if(pData[playerid][pAdminDuty])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You aren't allowed to change your name while on admin duty,");
	}

    pData[playerid][pFreeNamechange] = 0;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid FROM users WHERE username = '%e'", params);
	mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptNameChange", "is", playerid, params);
	return 1;
}

CMD:acceptname(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /acceptname [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(isnull(pData[targetid][pNameChange]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested a namechange.");
	}
	if(pData[targetid][pFreeNamechange] == 0 && pData[targetid][pCash] < pData[targetid][pLevel] * 50000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player can't afford the namechange.");
	}

	new cost = pData[targetid][pLevel] * 50000;

	if(pData[targetid][pFreeNamechange])
	{
	    if(pData[targetid][pFreeNamechange] == 2 && (pData[playerid][pDev] == 1  || GetFactionType(targetid) == FACTION_FEDERAL))
	    {
	        GetPlayerName(targetid, pData[targetid][pPassportName], MAX_PLAYER_NAME);

	        pData[targetid][pPassport] = 1;
	        pData[targetid][pPassportLevel] = pData[targetid][pLevel];
	        pData[targetid][pPassportSkin] = pData[targetid][pSkin];
	        pData[targetid][pPassportPhone] = pData[targetid][pPhone];
			pData[targetid][pLevel] = pData[targetid][pChosenLevel];
			pData[targetid][pSkin] = pData[targetid][pChosenSkin];
			pData[targetid][pPhone] = random(100000) + 899999;

			SetPlayerSkin(targetid, pData[targetid][pSkin]);
			Log_Write("log_faction", "%s (uid: %i) used the /passport command to change their name to %s, level to %i and skin to %i.", GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pNameChange], pData[targetid][pLevel], pData[targetid][pSkin]);
	
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET level = %i, skin = %i, phone = %i, passport = 1, passportname = '%s', passportlevel = %i, passportskin = %i, passportphone = %i WHERE uid = %i", pData[targetid][pLevel], pData[targetid][pSkin], pData[targetid][pPhone], pData[targetid][pPassportName], pData[targetid][pPassportLevel], pData[targetid][pPassportSkin], pData[targetid][pPassportPhone], pData[targetid][pID]);
			mysql_tquery(connectionID, queryBuffer);
			
			
	    }

		Log_Write("log_admin", "%s (uid: %i) accepted %s's (uid: %i) free namechange to %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pNameChange]);
		Log_Write("log_namechanges", "%s (uid: %i) accepted %s's (uid: %i) free namechange to %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pNameChange]);

		new name[MAX_PLAYER_NAME], giveplayerid;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM rankings WHERE Name = '%e'", pData[giveplayerid][pUsername]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerChangeNameRankings", "ds", giveplayerid, name);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has accepted %s's free namechange to %s.", GetRPName(playerid), GetRPName(targetid), pData[targetid][pNameChange]);
		SM(targetid, COLOR_YELLOW, "Your namechange request to %s was approved for free.", pData[targetid][pNameChange]);
		if(!pData[playerid][pLogged])
		{
  			ShowDialogToPlayer(targetid, DIALOG_REGISTER);
		}
		if(pData[targetid][pFreeNamechange] == 2)
		{
		    SCM(targetid, COLOR_WHITE, "** You can use /passport again to return to your old name and stats.");
		}
		new szString[528];
		format(szString, sizeof(szString), "%s  change his/her name to [%s].", GetRPName(targetid), pData[targetid][pNameChange]);
		SendDiscordMessage(34, szString);
	}
	else
	{
	    Log_Write("log_admin", "%s (uid: %i) accepted %s's (uid: %i) namechange to %s for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pNameChange], cost);
		Log_Write("log_namechanges", "%s (uid: %i) accepted %s's (uid: %i) namechange to %s for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pNameChange], cost);
		
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has accepted %s's namechange to %s for %s.", GetRPName(playerid), GetRPName(targetid), pData[targetid][pNameChange], FormatNumber(cost));
		SM(targetid, COLOR_YELLOW, "Your namechange request to %s was approved for %s.", pData[targetid][pNameChange], FormatNumber(cost));
		
        GivePlayerCash(targetid, -cost);
			
		new szString[528];
		format(szString, sizeof(szString), "%s  change his/her name to [%s].", GetRPName(targetid), pData[targetid][pNameChange]);
		SendDiscordMessage(34, szString);
	}
	DCC_SetGuildMemberNickname(GUILDSVR, DCC_FindUserByName(pData[playerid][pDiscordName], pData[playerid][pDiscordTag]), pData[playerid][pNameChange]);	

	
	Namechange(targetid, GetPlayerNameEx(targetid), pData[targetid][pNameChange]);
	pData[targetid][pNameChange] = 0;
	pData[targetid][pFreeNamechange] = 0;
	return 1;
}

CMD:denyname(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid;

	if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /denyname [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(isnull(pData[targetid][pNameChange]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't requested a namechange.");
	}

	if(pData[targetid][pFreeNamechange])
	{
	    ShowPlayerDialog(targetid, DIALOG_FREENAMECHANGE, DIALOG_STYLE_INPUT, "Non-RP Name", "An administrator has came to the conclusion that your name is non-RP.\nTherefore you have been given this free namechange in order to correct it.\n\nEnter a name in the Firstname_Lastname format in the box below:", "Submit", "Cancel");
	}

    Log_Write("log_admin", "%s (uid: %i) denied %s's (uid: %i) namechange to %s.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], pData[targetid][pNameChange]);

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has denied %s's namechange to %s.", GetRPName(playerid), GetRPName(targetid), pData[targetid][pNameChange]);
	SM(targetid, COLOR_LIGHTRED, "Your namechange request to %s was denied.", pData[targetid][pNameChange]);

	pData[targetid][pNameChange] = 0;
	pData[targetid][pFreeNamechange] = 0;
	return 1;
}

CMD:namechanges(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pAdmin] < 2)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	SCM(playerid, SERVER_COLOR, "Pending Namechanges:");

	foreach(new i : Player)
	{
	    if(!isnull(pData[i][pNameChange]))
	    {
	        SM(playerid, COLOR_GREY1, "(ID: %i) %s - Requested name: %s", i, GetRPName(i), pData[i][pNameChange]);
		}
	}

	return 1;
}

CMD:paytickets(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid = GetPlayerVehicleID(playerid), amount;

	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle of yours.");
	}
	if(!IsVehicleOwner(playerid, vehicleid) && pData[playerid][pVehicleKeys] != vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command as this vehicle doesn't belong to you.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SM(playerid, COLOR_SYNTAX, "Usage: /paytickets [amount] (There is $%i in unpaid tickets.)", VehicleInfo[vehicleid][vTickets]);
	}
	if(amount < 1 || amount > pData[playerid][pCash])
	{
		return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}
	if(amount > VehicleInfo[vehicleid][vTickets])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There isn't that much in unpaid tickets to pay.");
	}

    VehicleInfo[vehicleid][vTickets] -= amount;
	GivePlayerCash(playerid, -amount);
	AddToTaxVault(amount);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET tickets = %i WHERE id = %i", VehicleInfo[vehicleid][vTickets], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SM(playerid, COLOR_AQUA, "You have paid $%i in unpaid tickets. This vehicle now has $%i left in unpaid tickets.", amount, VehicleInfo[vehicleid][vTickets]);
	return 1;
}

CMD:getcrate(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 415.5813,-1726.8542,9.0025))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the smuggle point.");
	}
	if(pData[playerid][pCP] != CHECKPOINT_NONE)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must cancel your active checkpoint first. /cancelcp to cancel it.");
	}
	if(pData[playerid][pCash] < 75)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have enough money.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /getcrate [seeds | ephedrine]");
	}

	if(!strcmp(params, "seeds", true))
	{
	    pData[playerid][pSmuggleDrugs] = 1;
	    pData[playerid][pSmuggleTime] = gettime();
	    pData[playerid][pCP] = CHECKPOINT_DRUGS;

	    GivePlayerCash(playerid, -75);
	    AddPointMoney(POINT_DRUGFACTORY, 75);

	    SetPlayerCheckpoint(playerid, 2167.7371, -1670.6298, 15.0804, 3.0);
	    SCM(playerid, COLOR_AQUA, "You have paid $75 for a package of marijuana seeds. Deliver it to the marker.");
	}
	/*else if(!strcmp(params, "crack", true))
	{
	    pData[playerid][pSmuggleDrugs] = 2;
	    pData[playerid][pSmuggleTime] = gettime();
	    pData[playerid][pCP] = CHECKPOINT_DRUGS;

	    GivePlayerCash(playerid, -75);
	    AddPointMoney(POINT_DRUGFACTORY, 75);

	    SetPlayerCheckpoint(playerid, 2349.7727, -1169.6304, 28.0243, 3.0);
	    SCM(playerid, COLOR_AQUA, "You have paid $75 for a package of Crack. Deliver it to the marker.");
	}*/
	else if(!strcmp(params, "ephedrine", true))
	{
	    pData[playerid][pSmuggleDrugs] = 3;
	    pData[playerid][pSmuggleTime] = gettime();
	    pData[playerid][pCP] = CHECKPOINT_DRUGS;

	    GivePlayerCash(playerid, -75);
	    AddPointMoney(POINT_DRUGFACTORY, 75);

	    SetPlayerCheckpoint(playerid, 2167.7371, -1670.6298, 15.0804, 3.0);
	    SCM(playerid, COLOR_AQUA, "You have paid $75 for a package of raw ephedrine. Deliver it to the marker.");
	}

	return 1;
}

CMD:getdrug(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new option[10], amount, cost;

	if(sscanf(params, "s[10]i", option, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /getdrug [seeds(pot) | Crack | ephedrine(raw meth)] [amount]");
	}

	if(!strcmp(option, "seeds", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 323.7289, 1117.4187, 1083.8828))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You are not inside of the drug den.");
		}
		if(amount < 1 || amount > 10)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't buy less than 1 or more than 10 seeds at a time.");
		}
		if(amount > gSeedsStock)
		{
		    return SCM(playerid, COLOR_SYNTAX, "There aren't that many seeds left in stock.");
		}
		if(pData[playerid][pCash] < (cost = amount * 1500))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many seeds.");
		}
		if(pData[playerid][pSeeds] + amount > GetPlayerCapacity(CAPACITY_SEEDS))
		{
		    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i seeds. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pSeeds], GetPlayerCapacity(CAPACITY_SEEDS));
		}

		gSeedsStock -= amount;
		pData[playerid][pSeeds] += amount;

		GivePlayerCash(playerid, -cost);
		AddPointMoney(POINT_DRUGDEN, cost);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i WHERE uid = %i", pData[playerid][pSeeds], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have purchased %i marijuana seeds for $%i. /planthelp for more help.", amount, cost);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 321.6007, 1117.3717, 1083.8828))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You are not inside of the drug den.");
		}
		if(amount < 1 || amount > 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't buy less than 1 or more than 5 grams at a time.");
		}
		if(amount > gEphedrineStock)
		{
		    return SCM(playerid, COLOR_SYNTAX, "There isn't that much ephedrine left in stock.");
		}
		if(pData[playerid][pCash] < (cost = amount * 1500))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
		}
		if(pData[playerid][pEphedrine] + amount > GetPlayerCapacity(CAPACITY_EPHEDRINE))
		{
		    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i ephedrine. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pEphedrine], GetPlayerCapacity(CAPACITY_EPHEDRINE));
		}

		gEphedrineStock -= amount;
		pData[playerid][pEphedrine] += amount;

		GivePlayerCash(playerid, -cost);
		AddPointMoney(POINT_DRUGDEN, cost);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = %i WHERE uid = %i", pData[playerid][pEphedrine], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have purchased %i grams of raw ephedrine for $%i.", amount, cost);
	}
	else if(!strcmp(option, "crack", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2345.8250,-1185.5159,1031.9766))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You are not inside of the crack house.");
		}
		if(amount < 1 || amount > 10)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't buy less than 1 or more than 10 grams at a time.");
		}
		if(amount > gCrackStock)
		{
		    return SCM(playerid, COLOR_SYNTAX, "There isn't that much Crack left in stock.");
		}
		if(pData[playerid][pCash] < (cost = amount * 1500))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't afford to buy that many grams.");
		}
		if(pData[playerid][pCrack] + amount > GetPlayerCapacity(CAPACITY_COCAINE))
		{
		    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i Crack. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pCrack], GetPlayerCapacity(CAPACITY_COCAINE));
		}

		gCrackStock -= amount;
		pData[playerid][pCrack] += amount;

		GivePlayerCash(playerid, -cost);
        AddPointMoney(POINT_CRACKHOUSE, cost);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_AQUA, "You have purchased %i grams of Crack for $%i.", amount, cost);
	}

	return 1;
}

CMD:plantpot(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}

	if(pData[playerid][pPotPlanted])
	{
		return SCM(playerid, COLOR_SYNTAX, "You have an active pot plant already.");
	}
	if(pData[playerid][pSeeds] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have enough seeds. You need at least 10 seeds in order to plant them.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't plant indoors.");
	}

	GetPlayerPos(playerid, pData[playerid][pPotX], pData[playerid][pPotY], pData[playerid][pPotZ]);
	GetPlayerFacingAngle(playerid, pData[playerid][pPotA]);

	pData[playerid][pSeeds] -= 10;
	pData[playerid][pPotPlanted] = 1;
	pData[playerid][pPotTime] = 60;
	pData[playerid][pPotGrams] = 0;
	pData[playerid][pPotObject] = CreateDynamicObject(3409, pData[playerid][pPotX], pData[playerid][pPotY], pData[playerid][pPotZ] - 1.8, 0.0, 0.0, pData[playerid][pPotA]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = %i, potplanted = 1, pottime = %i, potgrams = %i, pot_x = '%f', pot_y = '%f', pot_z = '%f', pot_a = '%f' WHERE uid = %i", pData[playerid][pSeeds], pData[playerid][pPotTime], pData[playerid][pPotGrams], pData[playerid][pPotX], pData[playerid][pPotY], pData[playerid][pPotZ], pData[playerid][pPotA], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s plants some seeds into the ground.", GetRPName(playerid));
	SCM(playerid, COLOR_YELLOW, "You have planted a pot plant. Every two minutes your plant will grow one gram of pot.");
	SCM(playerid, COLOR_YELLOW, "Your plant will be ready in 60 minutes. Be careful, as anyone who sees your plant can pick it!");
	return 1;
}

CMD:plantinfo(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}

	foreach(new i : Player)
	{
	    if(pData[i][pPotPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, pData[i][pPotX], pData[i][pPotY], pData[i][pPotZ]))
	    {
	        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s inspects the plant.", GetRPName(playerid));
	        SM(playerid, COLOR_WHITE, "** This plant has so far grown %i grams of pot. It will be ready in %i/60 minutes.", pData[i][pPotGrams], pData[i][pPotTime]);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any plants.");
	return 1;
}

CMD:pickplant(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    foreach(new i : Player)
	{
	    if(pData[i][pPotPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, pData[i][pPotX], pData[i][pPotY], pData[i][pPotZ]))
	    {
	        if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	        {
	            return SCM(playerid, COLOR_SYNTAX, "You need to be crouched in order to pick a plant.");
			}
			if(pData[i][pPotGrams] < 2)
			{
			    return SCM(playerid, COLOR_SYNTAX, "This plant hasn't grown that much yet. Wait a little while first.");
			}
			if(pData[playerid][pPot] + pData[i][pPotGrams] > GetPlayerCapacity(CAPACITY_WEED))
			{
			    return SM(playerid, COLOR_SYNTAX, "You currently have %i/%i pot. You can't carry anymore until you upgrade your inventory skill.", pData[playerid][pPot], GetPlayerCapacity(CAPACITY_WEED));
			}

			pData[playerid][pPickPlant] = i;
			pData[playerid][pPickTime] = 5;

			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s crouches down and starts picking at the pot plant.", GetRPName(playerid));
			SCM(playerid, COLOR_WHITE, "** Allow up to five seconds for you to pick the plant.");
			return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any plants.");
	return 1;
}

CMD:seizeplant(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

    foreach(new i : Player)
	{
	    if(pData[i][pPotPlanted] && IsPlayerInRangeOfPoint(playerid, 3.0, pData[i][pPotX], pData[i][pPotY], pData[i][pPotZ]))
	    {
	        SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s seizes a pot plant weighing %i grams.", GetRPName(playerid), pData[i][pPotGrams]);
	        DestroyPotPlant(i);
	        return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any plants.");
	return 1;
}

CMD:cookmeth(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 333.5727, 1121.8536, 1083.8903))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in drug den. You can't use this command.");
	}
	if(!pData[playerid][pCookMeth])
	{
		if(!pData[playerid][pEphedrine])
		{
	    	return SCM(playerid, COLOR_SYNTAX, "You don't have any raw ephedrine which you could turn into meth.");
		}
	    if(!pData[playerid][pMuriaticAcid])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You need muriatic acid in order to cook meth. Go buy some at 24/7.");
		}
 	    if(!pData[playerid][pBakingSoda])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You need baking soda in order to cook meth. Go buy some at 24/7.");
		}
		pData[playerid][pCookMeth] = 1;
		pData[playerid][pCookTime] = 15;
		pData[playerid][pCookGrams] = 0;

		SCM(playerid, COLOR_YELLOW, "You have started cooking meth. 2 gram of ephedrine will turn into 2 gram of meth every 15 seconds.");
	    SCM(playerid, COLOR_YELLOW, "Type the /cookmeth command again in order to stop cooking.");
	}
	else
	{
	    SM(playerid, COLOR_AQUA, "You have stopped cooking. You converted %i grams of ephedrine into %i grams of meth.", pData[playerid][pCookGrams] / 2, pData[playerid][pCookGrams]);
	    ResetCooking(playerid);
	}
	return 1;
}

CMD:buyflower(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pInjured] > 0 || pData[playerid][pTazedTime] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pDueling] != INVALID_PLAYER_ID|| pData[playerid][pDueling1] != INVALID_PLAYER_ID)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command at the moment.");
	}
	if(pData[playerid][pWeaponRestricted] > 0 || pData[playerid][pLevel] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not allowed to buy a FLOWER reason weapon restricted or level 1.");
	}	
	
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1288.2645,-1019.3158,31.9159))
	{
		GiveWeapon(playerid, 14);
		GivePlayerCash(playerid, -2000);
		SendClientMessage(playerid, COLOR_LIGHTRED, "just use /giveflower to give the flower for you loveones.");
	}
	else 
	{
	    SCM(playerid, COLOR_SYNTAX, "You are not in range of any flowershop.");	
	}
	return 1;
}	
CMD:giveflower(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;
	
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /giveflower [playerid]");
	}
	if(!PlayerHasWeapon(playerid, 14))
	{
		return SCM(playerid, COLOR_SYNTAX, "You dont have any flower.");
	}
	if(pData[targetid][pWeaponRestricted] > 0 || pData[targetid][pLevel] < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "That player is not allowed to carry a gun reason weapon restricted or level 1.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
    if(pData[playerid][pPaintball] > 0 || pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	GiveWeapon(targetid, 14);
	RemovePlayerWeapon(playerid, 14);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s give the flower to %s.", GetRPName(playerid), GetRPName(targetid));
	   
	return 1;
}	
CMD:getcode(playerid,  params[])
{	
	
    if(pData[playerid][pVerifySystem] == 0)
    {
        return SendClientMessage(playerid, COLOR_SYNTAX, "You don't need to use this command because you are now already verified.");
    }
	new string[700];
    new code = Random(100, 999);
    pData[playerid][pVerifyCode] = code;
	format(string, sizeof(string), ""RED"Manila Reality Roleplay"WHITE" | !Triton#8632\n\nYou will now be able to access general in-game features\nSuch as Global Chat, joining events, accessing weapons, etc.\ndiscord.io/manila-reality\nUsage:!linkaccount [code]\n\n"ORANGE"Verification Code "WHITE"( %i )", code);
	
	SetTimerEx("CodeExpiration", 300000, false, "i", playerid);	
	SendClientMessage(playerid, COLOR_SYNTAX, "Code will expired in 5 minutes");
	
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET verifycode = %i WHERE uid = %i", code, pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);	
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, ""SVRCLR"Verification System", string, "Okay", "Cancel");		
    return 1;
}

CMD:getcoke(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(GetFactionType(playerid) != FACTION_TACO)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a taco seller.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1254.306518, -1430.190917, 13.707036))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in tacoshop. You can't use this command.");
	}
	if(pData[playerid][pEmptyCan] < 1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need a empty can to get a coke.");
	}

	pData[playerid][pJuice] += 1;
	pData[playerid][pEmptyCan] -= 1;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET juice = %i WHERE uid = %i", pData[playerid][pJuice], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET emptycan = %i WHERE uid = %i", pData[playerid][pEmptyCan], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "%s has take the coke.", GetRPName(playerid));
	return 1;
}

CMD:buymeat(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1254.7689,-1434.3564,13.7070))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not near in refrigirator.");
	}
	if(pData[playerid][pMeat] + 1 > 20)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't have more than 20 meat.");
	}
	pData[playerid][pMeat] += 1;
	GivePlayerCash(playerid, -50);
	SM(playerid, COLOR_SYNTAX, "You have a %i pcs of meat ", pData[playerid][pMeat]);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s paid $50 to the shopkeeper and received 1 meat.", GetRPName(playerid));
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meat = %i WHERE uid = %i", pData[playerid][pMeat], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);
	return 1;
}
forward OnPlayerEquipVest(playerid);
public OnPlayerEquipVest(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetScriptArmour(playerid, 70);
		TogglePlayerControllable(playerid, 1);
		GameTextForPlayer(playerid, "~g~equipped", 2000, 1);
	}

	pData[playerid][pEquipVest] = false;
	KillTimer(pData[playerid][pEquipTimer]);
	pData[playerid][pEquipTimer] = -1;
	return 1;
}

CMD:userepairkit(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid = GetPlayerVehicleID(playerid), Float:health;
	if(pData[playerid][pRepairKit] <= 0)
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You have no repairkit left.");
	}
	if(health >= 1000.0)
	{
		SCM(playerid, COLOR_ERROR, "Error:"WHITE" This vehicle doesn't need to be repaired.");
	}
	if(vehicleid)
	{
		return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not outside of any vehicle.");
	}
	new closestcar = GetNearbyVehicle(playerid);
	if(IsPlayerInRangeOfVehicle(playerid, closestcar, 5.0))
	{
		if(!IsABike(closestcar) && !IsAPlane(closestcar)) {
			new engine,lights,alarm,doors,bonnet,boot,objective;
			GetVehicleParamsEx(closestcar,engine,lights,alarm,doors,bonnet,boot,objective);
			if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
			{
				return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before proceeding.");
			}
		}
		GameTextForPlayer(playerid, "~g~Repairing...", 15000, 3);
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 3.0, 1, 0, 0, 0, 0, 1);
		SetTimerEx("UseRepairkit", 15000, false, "i", playerid);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s starts repairing the vehicle.", GetRPName(playerid));
	}
	return 1;
}
IsPlayerInRangeOfVehicle(playerid, vehicleid, Float: radius) {

	new
		Float:Floats[3];

	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}
IsABike(carid) {
	switch(GetVehicleModel(carid)) {
		case 509, 481, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: return 1;
	}
	return 0;
}
CMD:use(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(pData[playerid][pJoinedEvent] > 0 && !EventInfo[eHeal])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The administrator has chosen to disable healing in this event.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /use [bandage | medkit | Cigar | Vest | Helmet]");
	}
	if(!strcmp(params, "bandage", true))
	{
		if(pData[playerid][pBandage] <= 0)
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You have no bandage left.");
		}
		if(GetNearbyTurf(playerid) >= 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "[ERROR]: You can't do this right now");
		}
		if(pData[playerid][pFirstaid])
		{
		    return SCM(playerid, COLOR_SYNTAX, "You're still bandaging your self..");
		}
		pData[playerid][pBandage] -= 1;
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s begins bandaging their self", GetRPName(playerid));
		GameTextForPlayer(playerid, "~g~Applying Bandage...", 15000, 3);
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
		SetTimerEx("UseBandage", 15000, false, "i", playerid);
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET bandage = %i WHERE uid = %i", pData[playerid][pBandage], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "medkit", true))
	{
		if(pData[playerid][pMedkit] <= 0)
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You have no medkit left.");
		}
		if(GetNearbyTurf(playerid) >= 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "[ERROR]: You can't do this right now");
		}
		GameTextForPlayer(playerid, "~g~Applying Medkit...", 15000, 3);
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("UseMedkit", 15000, false, "i", playerid);
		SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "** %s begins bandaging their self", GetRPName(playerid));
	}
    else if(!strcmp(params, "cigar", true))
	{
		if(!pData[playerid][pCigars])
		{
		    return SCM(playerid, COLOR_SYNTAX, "You don't have any cigars left.");
		}
		pData[playerid][pStress] += 30;
		pData[playerid][pStressTimer] = 0;
		if (pData[playerid][pStress] > 100)
		{
			pData[playerid][pStress] = 100;
		}
		pData[playerid][pCigars]--;

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s lights up a cigar and starts to smoke it.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = %i WHERE uid = %i", pData[playerid][pCigars], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "vest", true))
	{
		if(pData[playerid][pVest] <= 0)
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You have no vest left.");
		}
		if(GetNearbyTurf(playerid) >= 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "[ERROR]: You can't do this right now");
		}		
		if(pData[playerid][pEquipVest] == true)
			return SendClientMessageEx(playerid, COLOR_GREY, "You are already equipping a vest.");
			
		new string[128];
		pData[playerid][pVest]--;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vest = %i WHERE uid = %i", pData[playerid][pVest], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		format(string, sizeof(string), "* %s has takes off their vest, dropping it on the ground.", GetPlayerNameEx(playerid));
		SendProximityMessage(playerid, 20.0, COLOR_ORANGE, string);
		format(string, sizeof(string), "* %s picks up the vest equipping it to themselves.", GetPlayerNameEx(playerid));
		SendProximityMessage(playerid, 20.0, COLOR_ORANGE, string);

		SendClientMessageEx(playerid, COLOR_ORANGE, " Equipping your kevalar vest, This will take 20 seconds. Keep cover! ");

		pData[playerid][pEquipVest] = true;
		pData[playerid][pEquipTimer] = SetTimerEx("OnPlayerEquipVest", 20000, 0, "d", playerid);

		GameTextForPlayer(playerid, "~g~Wearing Vest ~n~ ~r~20 seconds", 20000, 1);
		TogglePlayerControllable(playerid, 0);
	}
    else if(!strcmp(params, "helmet", true))
	{
		if(pData[playerid][pHelmet] <= 0)
		{
		    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You dont have a helmet.");
		}

		pData[playerid][pHelmet]--;
		pData[playerid][pUseHelmet] = 1;
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET helmet = %i WHERE uid = %i", pData[playerid][pHelmet], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);

	    SetPlayerAttachedObject(playerid, 9, 18978, 2, 0.1, 0.02, 0.0, 0.0, 90.0, 90.0, 1.0, 1.0, 1.0);
	    SendProximityMessage(playerid, 20.0, COLOR_PURPLE, "* %s reaches for their helmet, and puts it on.", GetRPName(playerid));
		SCM(playerid, COLOR_WHITE, "You have put on your helmet.");
	}
	return 1;
}

CMD:usedrug(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(gettime() - pData[playerid][pLastDrug] < 10)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only consume drugs every 10 seconds. Please wait %i more seconds.", 10 - (gettime() - pData[playerid][pLastDrug]));
	}
	if(pData[playerid][pDrugsUsed] >= 4)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are stoned and therefore can't consume anymore drugs right now.");
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(pData[playerid][pJoinedEvent] > 0 && !EventInfo[eHeal])
	{
	    return SCM(playerid, COLOR_SYNTAX, "The administrator has chosen to disable healing in this event.");
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /usedrug [meth | painkillers | pot | crack]");
	}

	if(!strcmp(params, "meth", true))
	{
	    if(pData[playerid][pMeth] < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You need at least two grams of meth.");
		}
		if(GetNearbyTurf(playerid) >= 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "[ERROR]: You can't do this right now");
		}
		if(pData[playerid][pAddictUpgrade] > 0)
	    {
			SM(playerid, COLOR_YELLOW, "Addict Perk: Your level %i/3 addict perk gave you %.1f/%.1f extra health & armor.", pData[playerid][pAddictUpgrade], (pData[playerid][pAddictUpgrade] * 5.0), (pData[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerHealth(playerid, 10.0 + (pData[playerid][pAddictUpgrade] * 5.0));
		GivePlayerArmour(playerid, 10.0 + (pData[playerid][pAddictUpgrade] * 5.0));

		pData[playerid][pMeth] -= 2;
		pData[playerid][pDrugsUsed] += 2;
		pData[playerid][pLastDrug] = gettime();

		if(pData[playerid][pDrugsUsed] >= 4)
	    {
	        GameTextForPlayer(playerid, "~p~shit... you stoned as hell duuuude...", 5000, 1);
			pData[playerid][pDrugsTime] = 30;
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s smokes two grams of meth.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = %i WHERE uid = %i", pData[playerid][pMeth], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "painkillers", true))
	{
	    if(pData[playerid][pPainkillers] <= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You don't have any painkillers left.");
		}
		if(GetNearbyTurf(playerid) >= 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "[ERROR]: You can't do this right now");
		}
		if(pData[playerid][pAddictUpgrade] > 0)
	    {
			SM(playerid, COLOR_YELLOW, "Addict Perk: Your level %i/3 addict perk gave you %.1f extra health.", pData[playerid][pAddictUpgrade], (pData[playerid][pAddictUpgrade] * 5.0));
	    }

		GivePlayerHealth(playerid, 25.0 + (pData[playerid][pAddictUpgrade] * 5.0));

		pData[playerid][pPainkillers] -= 1;
		pData[playerid][pDrugsUsed] += 2;
		pData[playerid][pLastDrug] = gettime();
		pData[playerid][pBrokenLeg] = 0;

		if(pData[playerid][pDrugsUsed] >= 4)
	    {
	        GameTextForPlayer(playerid, "~p~shit... you stoned as hell duuuude...", 5000, 1);
	        pData[playerid][pDrugsTime] = 30;
		}

        ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s pops a painkiller in their mouth.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = %i WHERE uid = %i", pData[playerid][pPainkillers], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "pot", true))
	{
	    if(pData[playerid][pPot] < 2) return SCM(playerid, COLOR_SYNTAX, "You need at least one gram of pot.");
		GivePlayerHealth(playerid, 10.0);
		if(GetNearbyTurf(playerid) >= 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "[ERROR]: You can't do this right now");
		}
		pData[playerid][pPot] -= 1;
		pData[playerid][pDrugsUsed]++;
		pData[playerid][pLastDrug] = gettime();

		if(pData[playerid][pDrugsUsed] >= 4)
	    {
	        GameTextForPlayer(playerid, "~p~shit... you stoned as hell duuuude...", 5000, 1);
			pData[playerid][pDrugsTime] = 30;
		}

	    ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s smokes one gram of pot.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = %i WHERE uid = %i", pData[playerid][pPot], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(params, "crack", true))
	{
		if(pData[playerid][pCrack] < 2)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You need at least one gram of crack.");
		}
		if(GetNearbyTurf(playerid) >= 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "[ERROR]: You can't do this right now");
		}
		GivePlayerArmour(playerid, 10.0);

		pData[playerid][pCrack] -= 1;
		pData[playerid][pDrugsUsed]++;
		pData[playerid][pLastDrug] = gettime();

		if(pData[playerid][pDrugsUsed] >= 4)
	    {
	        GameTextForPlayer(playerid, "~p~shit... you stoned as hell duuuude...", 5000, 1);
			pData[playerid][pDrugsTime] = 30;
		}

	    ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0);
		SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s snorts one gram of crack.", GetRPName(playerid));

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = %i WHERE uid = %i", pData[playerid][pCrack], pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	return 1;
}
CMD:usepot(playerid) return callcmd::usedrug(playerid, "pot");
CMD:usecrack(playerid) return callcmd::usedrug(playerid, "crack");

CMD:rules(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return ShowPlayerDialog(playerid, DIALOG_RULES, DIALOG_STYLE_LIST, "List of Rules", "Server\nTraffic Laws\nSpeed Laws", "Select", "Close");
}

CMD:showslaws(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, str[1024];

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /showslaws [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	strcat(str, ""WHITE"- This server has limitations. -\n");
	strcat(str, "1. 50 MPH if you are in the City.\n");
	strcat(str, "2. 70 MPH on the County roads.\n");
	strcat(str, "3. 90 MPH on the Highways and Interstates.\n");
	strcat(str, "4. Box trucks cannot exceed 50 MPH.\n");
	strcat(str, "5. Any vehicles with 3 or more axles aren't allowed to go more than 55 mph. Regardless of roadway limits.\n");
	strcat(str, "Note: This is a short version of our speed laws. Please visit  to see a full list of "SERVER_URL"");
	ShowPlayerDialog(targetid, 0, DIALOG_STYLE_MSGBOX, ""WHITE"List of Speed Enforcement Laws", str, "Okay", "");

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows the speed rules to %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:showtlaws(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, str[1024];

	if(!IsLawEnforcement(playerid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /showtlaws [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	strcat(str, ""WHITE"1. Drive on the right side of the road at all times or else you will get punishment.\n");
	strcat(str, "2. Yield to emergency vehicles.\n");
	strcat(str, "3. Move over and slow down for stopped emergency vehicles.\n");
	strcat(str, "4. Turn your headlights on at night. Type (/v lights) to turn it.\n");
	strcat(str, "5. Wear your seatbelt or helmet always. Type (/seatbelt) to wear it.\n");
	strcat(str, "6. Traffic lights are synced Red is for Stop, Yellow is for Slow down and Green is for Go\n");
	strcat(str, "7. Only follow traffic lights above a junction. (Marked with a solid white line)\n");
	strcat(str, "8. Remain at a safe distance from other vehicles when driving, atleast 3 car lengths\n");
	strcat(str, "9. Only follow traffic lights above a junction. (Marked with a solid white line)\n");
	strcat(str, "10. Pedistrians always have the right of way, regardless of the situation.\n");
	strcat(str, "11. Drive how you would in real life, dont be a moron.\n");
	strcat(str, "- If you fail at driving you will be jailed or banned. -\n");
	strcat(str, "Note: This is a short version of our traffic laws. Please visit  to see a full list at "SERVER_URL"");
	ShowPlayerDialog(targetid, 0, DIALOG_STYLE_MSGBOX, ""WHITE"List of Traffic Laws", str, "Okay", "");

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows the traffic rules to %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

/*CMD:showlicenses(playerid, params[]) return callcmd::showid(playerid, params);
CMD:showid(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /showid [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}

	SCM(targetid, SERVER_COLOR, "ID Card:");
	SM(targetid, COLOR_GREY1, "Name: %s", GetRPName(playerid));
	SM(targetid, COLOR_GREY1, "Gender: %s", (pData[playerid][pGender] == 2) ? ("Female") : ("Male"));
	SM(targetid, COLOR_GREY1, "Age: %i Years Old", pData[playerid][pAge]);
	SM(targetid, COLOR_GREY1, "Drivers License: %s", (pData[playerid][pCarLicense]) ? (""SVRCLR"Yes") : (""SVRCLR"No"));
	SM(targetid, COLOR_GREY1, "Weapon License: %s", (pData[playerid][pWeaponLicense]) ? (""SVRCLR"Yes") : (""SVRCLR"No"));
	if(targetid != playerid) SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows their ID card to %s.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}*/
stock GetGenderString(gender) {
	new sex[7];
	switch(gender) {
        case 2: sex = "Female";
        default: sex = "Male";
    }

    return sex;
}
stock id_ShowCitizen(playerid, name[], skin, age, sex) {
	new value[20];
	// Skin
	PlayerTextDrawSetPreviewModel(playerid, SHOWID[playerid][2], skin);
	PlayerTextDrawShow(playerid, SHOWID[playerid][2]);

	// Name
	PlayerTextDrawSetString(playerid, SHOWID[playerid][13], name);
	PlayerTextDrawShow(playerid, SHOWID[playerid][13]);

	// Age
	format(value, sizeof(value), "%i", age);
	PlayerTextDrawSetString(playerid, SHOWID[playerid][14], value);
	PlayerTextDrawShow(playerid, SHOWID[playerid][14]);

	// Gender
	PlayerTextDrawSetString(playerid, SHOWID[playerid][15], GetGenderString(sex));
	PlayerTextDrawShow(playerid, SHOWID[playerid][15]);
}
stock GetPlayerSkinScript(playerid) return GetPlayerSkin(playerid);
stock calling(playerid, name[], skin, phoneNumber) {
	new value[20];
	// Skin
	PlayerTextDrawSetPreviewModel(playerid, SHOWID[playerid][2], skin);
	PlayerTextDrawShow(playerid, SHOWID[playerid][2]);
}
CMD:showid(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /showid [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	id_ShowCitizen(targetid, GetPlayerNameEx(playerid), GetPlayerSkinScript(playerid), pData[playerid][pAge], pData[playerid][pGender]);
	SM(targetid, COLOR_GREY1, "Drivers License: %s", (pData[playerid][pCarLicense]) ? (""SVRCLR"Yes") : (""SVRCLR"No"));
	SM(targetid, COLOR_GREY1, "Weapon License: %s", (pData[playerid][pWeaponLicense]) ? (""SVRCLR"Yes") : (""SVRCLR"No"));
	if(targetid != playerid) SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s shows their ID card to %s.", GetRPName(playerid), GetRPName(targetid));

	Adrian(targetid, 10000);
	return 1;
}

CMD:cc(playerid) return callcmd::clearchat(playerid);

CMD:drop(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new option[12], confirm[10];

	if(sscanf(params, "s[12]S()[10]", option, confirm))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /drop [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Materials, Pot, Crack, Meth, Painkillers, Cigars, Spraycans");
	    SCM(playerid, COLOR_WHITE, "Available options: Seeds, Ephedrine, HPAmmo, PoisonAmmo, FMJAmmo");
	    return 1;
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}

	/*if(!strcmp(option, "weapons", true))
	{
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /drop [weapons] [confirm]");
	    }

	    ResetPlayerWeaponsEx(playerid);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their weapons.", GetRPName(playerid));
	}*/
	if(!strcmp(option, "materials", true))
	{
	    if(!pData[playerid][pMaterials])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no materials which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [materials] [confirm] (You have %i materials.)", pData[playerid][pMaterials]);
	    }

	    pData[playerid][pMaterials] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their materials.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET materials = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "pot", true))
	{
	    if(!pData[playerid][pPot])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no pot which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [pot] [confirm] (You have %i grams of pot.)", pData[playerid][pPot]);
	    }

	    pData[playerid][pPot] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their pot.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET pot = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "crack", true))
	{
	    if(!pData[playerid][pCrack])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no Crack which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [Crack] [confirm] (You have %i grams of Crack.)", pData[playerid][pCrack]);
	    }

	    pData[playerid][pCrack] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their Crack.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET crack = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "meth", true))
	{
	    if(!pData[playerid][pMeth])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no meth which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [meth] [confirm] (You have %i grams of meth.)", pData[playerid][pMeth]);
	    }

	    pData[playerid][pMeth] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their meth.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET meth = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "painkillers", true))
	{
	    if(!pData[playerid][pPainkillers])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no painkillers which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [painkillers] [confirm] (You have %i painkillers.)", pData[playerid][pPainkillers]);
	    }

	    pData[playerid][pPainkillers] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their painkillers.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET painkillers = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "cigars", true))
	{
	    if(!pData[playerid][pCigars])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no cigars which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [cigars] [confirm] (You have %i cigars.)", pData[playerid][pCigars]);
	    }

	    pData[playerid][pCigars] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their cigars.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cigars = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "spraycans", true))
	{
	    if(!pData[playerid][pSpraycans])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no spraycans which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [spraycans] [confirm] (You have %i spraycans.)", pData[playerid][pSpraycans]);
	    }

	    pData[playerid][pSpraycans] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their spraycanss.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET spraycans = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "seeds", true))
	{
	    if(!pData[playerid][pSeeds])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no seeds which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [seeds] [confirm] (You have %i seeds.)", pData[playerid][pSeeds]);
	    }

	    pData[playerid][pSeeds] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their seeds.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET seeds = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "ephedrine", true))
	{
	    if(!pData[playerid][pEphedrine])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no ephedrine which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [ephedrine] [confirm] (You have %i grams of ephedrine.)", pData[playerid][pEphedrine]);
	    }

	    pData[playerid][pEphedrine] = 0;
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their ephedrine.", GetRPName(playerid));

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET ephedrine = 0 WHERE uid = %i", pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
	}
    else if(!strcmp(option, "hpammo", true))
	{
	    if(!pData[playerid][pHPAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no hollow point ammo which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [hpammo] [confirm] (You have %i rounds of HP ammo.)", pData[playerid][pHPAmmo]);
	    }

	    SetWeaponAmmo(playerid, AMMO_HP, 0);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their hollow point ammo.", GetRPName(playerid));
	}
	else if(!strcmp(option, "poisonammo", true))
	{
	    if(!pData[playerid][pPoisonAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no poison tip ammo which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [poisonammo] [confirm] (You have %i rounds of poison ammo.)", pData[playerid][pPoisonAmmo]);
	    }

	    SetWeaponAmmo(playerid, AMMO_POISON, 0);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their poison tip ammo.", GetRPName(playerid));
	}
	else if(!strcmp(option, "fmjammo", true))
	{
	    if(!pData[playerid][pFMJAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no FMJ ammo which you can throw away.");
		}
	    if(isnull(confirm) || strcmp(confirm, "confirm", true) != 0)
	    {
	        return SM(playerid, COLOR_SYNTAX, "Usage: /drop [fmjammo] [confirm] (You have %i rounds of FMJ ammo.)", pData[playerid][pFMJAmmo]);
	    }

	    SetWeaponAmmo(playerid, AMMO_FMJ, 0);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s throws away their full metal jacket ammo.", GetRPName(playerid));
	}

	return 1;
}

CMD:creategangtag(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z,
		Float:angle;

    if(pData[playerid][pAdmin] < 6)
    {
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
 		return SCM(playerid, COLOR_SYNTAX, "You can only create graffiti points outside interiors.");
	}

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	id = Graffiti_Create(x, y, z, angle);

	if(id == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The server has reached the limit for graffiti points.");
	}

	EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);

	pData[playerid][pEditGraffiti] = id;
	SM(playerid, COLOR_SYNTAX, "You have successfully created graffiti ID: %d.", id);
	return 1;
}

CMD:editgangtag(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	static
	    id = 0;

    if(pData[playerid][pAdmin] < 6)
    {
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "d", id))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /editgangtag [graffiti id]");
	}

	EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);
	pData[playerid][pEditGraffiti] = id;
	SM(playerid, COLOR_SYNTAX, "You have successfully editing graffiti ID: %d.", id);
	return 1;
}

CMD:destroygangtag(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	static
	    id = 0;

    if(pData[playerid][pAdmin] < 6)
    {
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "d", id))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /destroygraffiti [graffiti id]");
	}

	if((id < 0 || id >= MAX_GRAFFITI_POINTS) || !GraffitiData[id][graffitiExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have specified an invalid graffiti ID.");
	}
	Graffiti_Delete(id);
	SM(playerid, COLOR_SYNTAX, "You have successfully destroyed graffiti ID: %d.", id);
	return 1;
}

CMD:gspray(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new id = Graffiti_Nearest(playerid);

	if (id == -1)
	    return SCM(playerid, COLOR_SYNTAX, "You are not near any graffiti point.");

	if(pData[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if(pData[playerid][pGangRank] < 5)
	{
		return SCM(playerid, COLOR_SYNTAX, "You must be at least rank 5 to tag a wall");
	}
	if(pData[playerid][pSpraycans] <= 0)
	{
		return SCM(playerid, COLOR_SYNTAX, "You don't have enough spraycans for this.");
	}
	ShowPlayerDialog(playerid, DIALOG_GRAFFITICOLOR, DIALOG_STYLE_LIST, "Select Color", ""WHITE"White\n{FF0000}Red\n{FFFF00}Yellow\n{33CC33}Green\n{33CCFF}Light Blue\n"SVRCLR"Orange\n{1394BF}Dark Blue\n{000000}Black", "Select", "Cancel");
	return 1;
}

CMD:creategang(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new name[32];

    if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "s[32]", name))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /creategang [name]");
	}

	for(new i = 1; i < MAX_GANGS; i ++)
	{
	    if(!GangInfo[i][gSetup])
	    {
	        SetupGang(i, name);

	        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has setup gang {F7A763}%s"WHITE" in slot ID %i.", GetRPName(playerid), name, i);
	        SM(playerid, COLOR_WHITE, "** This gang's ID is %i. /editgang to edit.", i);
	        return 1;
		}
	}

	return 1;
}

CMD:editgang(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new gangid, option[14], param[128];

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[128]", gangid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Name, MOTD, Leader, Color, TurfTokens, RankName, Skin, Strikes, Alliance");
		return 1;
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}

	if(!strcmp(option, "name", true))
	{
	    if(isnull(param) || strlen(params) > 32)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [name] [text]");
		}

		strcpy(GangInfo[gangid][gName], param, 32);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET name = '%e' WHERE id = %i", param, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the name of gang ID %i to '%s'.", GetRPName(playerid), gangid, param);
	}
	else if(!strcmp(option, "motd", true))
	{
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [motd] [text]");
		}

		strcpy(GangInfo[gangid][gMOTD], param, 128);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET motd = '%e' WHERE id = %i", param, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has adjusted the MOTD of gang ID %i.", GetRPName(playerid), gangid);
	}
	else if(!strcmp(option, "leader", true))
	{
	    new leader[MAX_PLAYER_NAME];

	    if(sscanf(param, "s[24]", leader))
	    {
	        SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [leader] [name]");
	        SCM(playerid, COLOR_SYNTAX, "This only updates the text for the leader's name in /gangs. Use /setgang to appoint someone as gang leader.");
			return 1;
		}

		strcpy(GangInfo[gangid][gLeader], leader, MAX_PLAYER_NAME);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET leader = '%e' WHERE id = %i", leader, gangid);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the leader of gang ID %i to %s.", GetRPName(playerid), gangid, leader);
	}

	else if(!strcmp(option, "color", true))
	{
	    new color;

	    if(sscanf(param, "h", color))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [color] [0xRRGGBBAA]");
		}

		GangInfo[gangid][gColor] = color & ~0xff;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET color = %i WHERE id = %i", GangInfo[gangid][gColor], gangid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the {%06x}color{FF6347} of gang ID %i.", GetRPName(playerid), color >>> 8, gangid);
	}

	else if(!strcmp(option, "turftokens", true))
	{
	    new value;

	    if(sscanf(param, "i", value))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [turftokens] [value]");
		}

		GangInfo[gangid][gTurfTokens] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = %i WHERE id = %i", GangInfo[gangid][gTurfTokens], gangid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the turf tokens of gang ID %i to %i.", GetRPName(playerid), gangid, value);
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Names:");

	        for(new i = 0; i < 7; i ++)
	        {
	            if(isnull(GangRanks[gangid][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s", i, GangRanks[gangid][i]);
	        }

	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [rankname] [slot (0-6)] [name]");
	    }
	    if(!(0 <= rankid <= 6))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
		}

	    strcpy(GangRanks[gangid][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", gangid, rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set rank %i's name of gang ID %i to '%s'.", GetRPName(playerid), rankid, gangid, rank);
	}
	else if(!strcmp(option, "skin", true))
	{
	    new slot, skinid;

	    if(sscanf(param, "ii", slot, skinid))
	    {
	        SCM(playerid, SERVER_COLOR, "Gang Skins:");

	        for(new i = 0; i < MAX_GANG_SKINS; i ++)
	        {
	            if(GangInfo[gangid][gSkins][i] == 0)
	            	SM(playerid, COLOR_GREY2, "Skin %i: (none)", i + 1);
				else
				    SM(playerid, COLOR_GREY2, "Skin %i: %i", i + 1, GangInfo[gangid][gSkins][i]);
	        }

	        return SM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [skin] [slot (1-%i)] [skinid]", MAX_GANG_SKINS);
	    }
	    if(!(1 <= slot <= MAX_GANG_SKINS))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid slot.");
		}
		if(!(0 <= skinid <= 311))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid skin.");
		}

		slot--;

		GangInfo[gangid][gSkins][slot] = skinid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangskins VALUES(%i, %i, %i) ON DUPLICATE KEY UPDATE skinid = %i", gangid, slot, skinid, skinid);
		mysql_tquery(connectionID, queryBuffer);

		SM(playerid, COLOR_WHITE, "** You have set the skin in slot %i to ID %i.", slot + 1, skinid);
	}
	else if(!strcmp(option, "strikes", true))
	{
	    new amount;

	    if(sscanf(param, "i", amount))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [strikes] [amount]");
		}
		if(!(0 <= amount <= 3))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The amount must range from 0 to 3.");
		}

		GangInfo[gangid][gStrikes] = amount;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET strikes = %i WHERE id = %i", amount, gangid);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(gangid);
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the strikes of gang ID %i to %i.", GetRPName(playerid), gangid, amount);
	}
	else if(!strcmp(option, "alliance", true))
	{
		new allyid;

	    if(sscanf(param, "i", allyid))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /editgang [gangid] [alliance] [gangid]");
		}

		if(allyid == -1)
		{
		    if(GangInfo[gangid][gAlliance] >= 0)
		    {
		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", GangInfo[gangid][gAlliance]);
				mysql_tquery(connectionID, queryBuffer);
		        GangInfo[GangInfo[gangid][gAlliance]][gAlliance] = -1;
			}

			GangInfo[gangid][gAlliance] = -1;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", gangid);
			mysql_tquery(connectionID, queryBuffer);

			ReloadGang(gangid);
			SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has reset the alliance of gang ID %i.", GetRPName(playerid), gangid);
		}
		else
		{
		    if(!(1 <= allyid < MAX_GANGS) || GangInfo[allyid][gSetup] == 0)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
		    }

			GangInfo[gangid][gAlliance] = allyid;
			GangInfo[allyid][gAlliance] = gangid;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", allyid, gangid);
			mysql_tquery(connectionID, queryBuffer);
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = %i WHERE id = %i", gangid, allyid);
			mysql_tquery(connectionID, queryBuffer);

			ReloadGang(gangid);
			SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the alliance of gang ID %i to gang %i.", GetRPName(playerid), gangid, allyid);
		}
	}
	return 1;
}

CMD:removegang(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new gangid;

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", gangid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removegang [gangid]");
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has deleted gang %s.", GetRPName(playerid), GangInfo[gangid][gName]);
	SM(playerid, COLOR_LIGHTRED, "You have permanently deleted the {F7A763}%s"WHITE" gang slot.", GangInfo[gangid][gName]);
	RemoveGang(gangid);
	return 1;
}

CMD:gangstrike(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new gangid, reason[128];

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[128]", gangid, reason))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gangstrike [gangid] [reason]");
	}
	if(!(1 <= gangid < MAX_GANGS) || !GangInfo[gangid][gSetup])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}
	if(GangInfo[gangid][gStrikes] >= 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This gang already has 3 strikes.");
	}

	GangInfo[gangid][gStrikes]++;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET strikes = %i WHERE id = %i", GangInfo[gangid][gStrikes], gangid);
	mysql_tquery(connectionID, queryBuffer);

	switch(GangInfo[gangid][gStrikes])
	{
		case 1: SMA(COLOR_GREEN, "Gang News: %s has received their 1st strike, reason: %s", GangInfo[gangid][gName], reason);
		case 2: SMA(COLOR_GREEN, "Gang News: %s has received their 2nd strike, reason: %s", GangInfo[gangid][gName], reason);
		case 3: SMA(COLOR_GREEN, "Gang News: %s has received their 3rd strike, reason: %s", GangInfo[gangid][gName], reason);
	}

	return 1;
}

CMD:setgang(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, gangid, rankid;

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "uiI(-1)", targetid, gangid, rankid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setgang [playerid] [gangid (-1 = none)] [rank (optional)]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pLogged])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't logged in yet.");
	}
	if(!(0 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
	}
	if((gangid != -1 && !(-1 <= rankid <= 6)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
	}

	if(gangid == -1)
	{
	    pData[targetid][pGang] = -1;
		pData[targetid][pGangRank] = 0;

		SM(targetid, COLOR_AQUA, "%s has removed you from your gang.", GetRPName(playerid));
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has removed %s from their gang.", GetRPName(playerid), GetRPName(targetid));
	}
	else
	{
		if(rankid == -1)
		{
	    	rankid = 6;
		}

	    /*if(rankid == 6)
	    {
	        GetPlayerName(targetid, GangInfo[gangid][gLeader], MAX_PLAYER_NAME);

	    	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET leader = '%e' WHERE id = %i", GangInfo[gangid][gLeader], gangid);
			mysql_tquery(connectionID, queryBuffer);
		}*/

		pData[targetid][pGang] = gangid;
		pData[targetid][pGangRank] = rankid;

		SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"%s{CCFFFF} in %s.", GetRPName(playerid), GangRanks[gangid][rankid], GangInfo[gangid][gName]);
		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has made %s a %s in %s.", GetRPName(playerid), GetRPName(targetid), GangRanks[gangid][rankid], GangInfo[gangid][gName]);
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = %i, gangrank = %i WHERE uid = %i", gangid, rankid, pData[targetid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	return 1;
}

CMD:families(playerid, params[]) { return callcmd::gangs(playerid, params); }
CMD:gangs(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new string[(1024 * 2)], color, idx;

	for(new gangid = 1; gangid < MAX_GANGS; gangid++)
	{
		if(GangInfo[gangid][gSetup])
		{
			color = GangInfo[gangid][gColor];
			format(string, sizeof(string), "%s"WHITE"%i\t{%06x}%s"WHITE"\tStrikes: %i/3\n", string, gangid, color >>> 8, GangInfo[gangid][gName],GangInfo[gangid][gStrikes]);
			idx++;
		}
	}	

	if(idx > 0) {
		format(string, sizeof(string), "ID\tName\tStrike\n%s", string);
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "Gangs", string, "Close", "");
	} else {
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, "Gangs", "There are no Gangs created.", "Close", "");
	}
	return 1;
}

CMD:turfinfo(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new
		iCount,
		szMessage[280];

	SCM(playerid, SERVER_COLOR, "Turf Info:");
	for(new i; i < MAX_TURFS; i++)
	{
		if(TurfInfo[i][tExists])
		{
		    if(TurfInfo[i][tCapturer] != INVALID_PLAYER_ID)
			{
				if(GetFactionType(TurfInfo[i][tCapturer]) == FACTION_POLICE)
				{
					if(TurfInfo[i][tCaptureTime] == 1)
					{
						format(szMessage, sizeof(szMessage), "* %s | Capper: %s | POLICE DEPARTMENT| Time left: Less than 1 minute", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]), TurfInfo[i][tCaptureTime]);
						SCM(playerid, COLOR_WHITE, szMessage);
						iCount++;
					}
					else
					{
						format(szMessage, sizeof(szMessage), "* %s | Capper: %s | POLICE DEPARTMENT | Time left: %d minutes", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]), TurfInfo[i][tCaptureTime]);
						SCM(playerid, COLOR_WHITE, szMessage);
										
						iCount++;
	
					}
				}
				else
				{
					if(TurfInfo[i][tCaptureTime] == 1)
					{
						format(szMessage, sizeof(szMessage), "* %s | Capper: %s | %s | Time left: Less than 1 minute", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]), GangInfo[pData[TurfInfo[i][tCapturer]][pGang]][gName]);
						SCM(playerid, COLOR_WHITE, szMessage);
						iCount++;
					}
					else
					{
						format(szMessage, sizeof(szMessage), "* %s | Capper: %s | %s | Time left: %d minutes", TurfInfo[i][tName], GetRPName(TurfInfo[i][tCapturer]), GangInfo[pData[TurfInfo[i][tCapturer]][pGang]][gName], TurfInfo[i][tCaptureTime]);
						SCM(playerid, COLOR_WHITE, szMessage);
						iCount++;
	
					}
				}
			}
		}
	}
	if(iCount == 0)
		return SCM(playerid, COLOR_SYNTAX, "No gang has attempted to capture a turf at this time.");
	return 1;
}

CMD:pointinfo(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new
		iCount,
		szMessage[1080];

	SCM(playerid, SERVER_COLOR, "Point Info:");
	for(new i; i < MAX_POINTS; i++)
	{
		if(PointInfo[i][pExists])
		{
		    if(PointInfo[i][pCapturer] != INVALID_PLAYER_ID)
			{
				if(PointInfo[i][pCaptureTime] == 1) {
					format(szMessage, sizeof(szMessage), "* "WHITE"%s"GREY" | Capper: "WHITE"%s"GREY" | "WHITE"%s"GREY" | Time left: "RED"Less than 1 minute", PointInfo[i][pName], GetRPName(PointInfo[i][pCapturer]), GangInfo[pData[PointInfo[i][pCapturer]][pGang]][gName]);
					SCM(playerid, COLOR_GREY, szMessage);
					iCount++;
				} else {
					format(szMessage, sizeof(szMessage), "* "WHITE"%s"GREY" | Capper: "WHITE"%s"GREY" | "WHITE"%s"GREY" | Time left: "WHITE"%d minutes", PointInfo[i][pName], GetRPName(PointInfo[i][pCapturer]), GangInfo[pData[PointInfo[i][pCapturer]][pGang]][gName], PointInfo[i][pCaptureTime]);
					SCM(playerid, COLOR_GREY, szMessage);
					iCount++;
				}
			}
		}
	}
	if(iCount == 0)
		return SCM(playerid, COLOR_SYNTAX, "No gang has attempted to capture a point at this time.");
	return 1;
}

CMD:points(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new name[280], color, string[2048];
	psstring = "";
	for(new i = 0; i < MAX_POINTS; i ++)
	{
		if(PointInfo[i][pExists])
		{
			if(PointInfo[i][pCapturedGang] == -1)
			{
				name = "None";
				color = 0xFFFFFF00;
			}
			else
			{
				strcpy(name, GangInfo[PointInfo[i][pCapturedGang]][gName]);
				color = GangInfo[PointInfo[i][pCapturedGang]][gColor];
			}
			if(strlen(string) < 1950)
			{
			    format(string, sizeof(string), "%s{%06x}%i. %s | %s | Claimer: %s | Profits: $%i | Time: %ih\n", string, color >>> 8, i, PointInfo[i][pName], name, PointInfo[i][pCapturedBy], PointInfo[i][pProfits], PointInfo[i][pTime]);
			}
			else
			{
			    format(psstring, sizeof(psstring), "%s{%06x}%i. %s | %s | Claimer: %s | Profits: $%i | Time: %ih\n", psstring, color >>> 8, i, PointInfo[i][pName], name, PointInfo[i][pCapturedBy], PointInfo[i][pProfits], PointInfo[i][pTime]);
			}

		}
	}
	ShowPlayerDialog(playerid, DIALOG_POINTLIST, DIALOG_STYLE_MSGBOX, ""SVRCLR"Point List"WHITE" ("REVISION")", string, "Next", "Cancel");
	return 1;
}

CMD:f(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /f [gang chat]");
	}
	if(pData[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
    if(pData[playerid][pToggleGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the gang chat as you have it toggled.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}
	if(strfind(params, "admin", true) != -1 || strfind(params, "helper", true) != -1 || strfind(params, "bug", true) != -1 ||  
	strfind(params, "gz", true) != -1 || strfind(params, "greenzone", true) != -1 || strfind(params, "nonrp", true) != -1 || 
	strfind(params, "safezone", true) != -1 || strfind(params, "safe zone", true) != -1 || strfind(params, "green zone", true) != -1 || 
	strfind(params, "dmer", true) != -1 || strfind(params, "anghel", true) != -1 || 
	strfind(params, "rp", true) != -1 || strfind(params, "discord", true) != -1 || strfind(params, "roleplay", true) != -1 || 
	strfind(params, "mod", true) != -1 || strfind(params, "discordia", true) != -1 ||
	strfind(params, "randompunching", true) != -1 || strfind(params, "random punching", true) != -1 || strfind(params, "random punch", true) != -1 ||
	strfind(params, "mods", true) != -1 || strfind(params, "cleo", true) != -1 || strfind(params, "meta", true) != -1 || 
	strfind(params, "atems", true) != -1 || strfind(params, "delay", true) != -1 || strfind(params, "rolyo", true) != -1 || 
	strfind(params, "server", true) != -1 || strfind(params, "(ooc)", true) != -1|| strfind(params, "groupchat", true) != -1|| 
	strfind(params, "dc", true) != -1|| strfind(params, "gc", true) != -1)
	{
		pData[playerid][pMuted] = 20;
		GivePlayerCash(playerid, -200);
		SCM(playerid, COLOR_YELLOW, "** You've been temporarily muted for 20 seconds due to suspected to say OOC TERM IN IC.");
		SAM(COLOR_YELLOW, ""RED"SECURITY[BOT] %s"WHITE"[%i] is using an words for ooc in ic [%s].", GetRPName(playerid), playerid, params);
		new szString[528];
		format(szString, sizeof(szString), "%s [%i] is using an words for ooc in ic [%s].", GetRPName(playerid), playerid, params);
		SendDiscordMessage(32, szString);
		return 1;
	}	
	foreach(new i : Player)
	{
	    if(pData[i][pGang] == pData[playerid][pGang] && !pData[i][pToggleGang])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SM(i, COLOR_FAMILYCHAT, "** (%i) %s %s: %.*s... **", pData[playerid][pGangRank], GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SM(i, COLOR_FAMILYCHAT, "** (%i) %s %s: ...%s **", pData[playerid][pGangRank], GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, COLOR_FAMILYCHAT, "** (%i) %s %s: %s **", pData[playerid][pGangRank], GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}
/*
CMD:ally(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new gangid = pData[playerid][pGang];

	if(isnull(params))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /ally [Alliance chat]");
	}
	if(pData[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if(GangInfo[gangid][gAlliance] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "Your gang isn't a part of an alliance.");
	}
    if(pData[playerid][pToggleGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't speak in the alliance chat as you have gang chat toggled.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while dead.");
	}
	if(pData[playerid][pCuffed])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while cuffed");
	}
	if(pData[playerid][pTied])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot use this command while tied.");
	}

	foreach(new i : Player)
	{
	    if((pData[i][pGang] == pData[playerid][pGang] || pData[i][pGang] == GangInfo[gangid][gAlliance])  && !pData[i][pToggleGang])
	    {
	        if(strlen(params) > MAX_SPLIT_LENGTH)
	        {
	            SM(i, 0x6DFB6DFF, "** (A-Radio] %s %s: %.*s... **", GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), MAX_SPLIT_LENGTH, params);
	            SM(i, 0x6DFB6DFF, "** (A-Radio] %s %s: ...%s **", GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), params[MAX_SPLIT_LENGTH]);
			}
			else
			{
			    SM(i, 0x6DFB6DFF, "** (A-Radio) %s %s: %s **", GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], GetRPName(playerid), params);
			}
		}
	}

	return 1;
}*/

CMD:fmembersa(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pFaction] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you're not apart of any faction.");
	}

    SCM(playerid, SERVER_COLOR, "Factions Online:");
    new string[128], color = FactionInfo[pData[playerid][pFaction]][fColor];

    foreach(new i : Player)
    {
        if(pData[i][pFaction] == pData[playerid][pFaction])
        {
            format(string, sizeof(string), "(ID: %i) %s {%06x}%s"WHITE"", i, FactionRanks[pData[i][pFaction]][pData[i][pFactionRank]], color >>> 8, GetRPName(i));
			if(pData[i][pDivision] >= 0)
			{
			    format(string, sizeof(string), "%s | Division: %s", string, FactionDivisions[pData[i][pFaction]][pData[i][pDivision]]);
			}
			if(FactionInfo[pData[i][pFaction]][fType] == FACTION_MEDIC)
			{
			    SCM(playerid, COLOR_WHITE, string);
			    format(string, sizeof(string), "%s | Total Patients: %i | Total Fires: %i", string, pData[i][pTotalPatients], pData[i][pTotalFires]);
			}
			format(string, sizeof(string), "%s | Location: %s", string, GetPlayerZoneName(i));
			if(pData[i][pAFK])
            {
				format(string, sizeof(string), "%s | "SVRCLR"AFK"WHITE" (%d secs)", string, pData[i][pAFKTime]);
			}
			SCM(playerid, COLOR_WHITE, string);
		}
    }

	return 1;
}
CMD:gmembersa(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of a gang at the moment.");
	}

    SCM(playerid, SERVER_COLOR, "Gangs Online:");
	new string[128], color = GangInfo[pData[playerid][pGang]][gColor];
    foreach(new i : Player)
    {
        if(pData[i][pGang] == pData[playerid][pGang])
        {
            format(string, sizeof(string), "(%i) %s {%06x}%s"WHITE"", pData[i][pGangRank], GangRanks[pData[i][pGang]][pData[i][pGangRank]], color >>> 8, GetRPName(i));
   			format(string, sizeof(string), "%s | Location: %s", string, GetPlayerZoneName(i));
			if(pData[i][pAFK])
            {
				format(string, sizeof(string), "%s | "SVRCLR"AFK"WHITE" (%d secs)", string, pData[i][pAFKTime]);
			}
			SCM(playerid, COLOR_WHITE, string);
		}
    }

    return 1;
}

CMD:gang(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, option[16], param[128];

	if(pData[playerid][pGang] == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if(sscanf(params, "s[16]S()[128]", option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /gang [option]");
	    SCM(playerid, COLOR_WHITE, "Available options: Invite, Kick, Rank, Roster, Online, Quit, Offlinekick");
	    SCM(playerid, COLOR_WHITE, "Available options: MOTD, Stash, Stats, Rankname, Upgrade, Allience");
	    return 1;
	}
	if(!strcmp(option, "invite", true))
	{
		if(pData[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 5+ to use this command.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [invite] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(pData[targetid][pGang] != -1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is already apart of a gang.");
		}
		if(pData[targetid][pLevel] == 1)
		{
		    return SCM(playerid, COLOR_SYNTAX, "This player is level 1 only you cant invite.");
		}
		if(pData[targetid][pFgRestricted] > 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "He/she must finish the cooldown.");
		}
		if(pData[targetid][pFaction] >= 0 && FactionInfo[pData[targetid][pFaction]][fType] != FACTION_HITMAN)
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is a part of a faction and therefore can't join your gang.");
		}
		if(pData[targetid][pWeaponRestricted] > 0 || pData[targetid][pLevel] < 2)
		{
			return SCM(playerid, COLOR_SYNTAX, "That player is not allowed to invite reason weapon restricted or level 1.");
		}	
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", pData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerAttemptInviteGang", "ii", playerid, targetid);
	}

	else if(!strcmp(option, "kick", true))
	{
		if(pData[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 5+ to use this command.");
		}
		if(sscanf(param, "u", targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [kick] [playerid]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(pData[targetid][pGang] != pData[playerid][pGang])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your gang.");
		}
		if(pData[targetid][pGangRank] > pData[playerid][pGangRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
		}
	
		Log_Write("log_gang", "%s (uid: %i) kicked %s (uid: %i) from %s (id: %i) as rank %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang], GangRanks[pData[targetid][pGang]][pData[targetid][pGangRank]], pData[targetid][pGangRank]);

		pData[targetid][pFgRestricted] = 30;
	
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cooldown = %i WHERE uid = %i", 30, pData[targetid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
		
		pData[targetid][pGang] = -1;
		pData[targetid][pGangRank] = 0;
	
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	
		SM(targetid, COLOR_AQUA, "%s has kicked you from the gang.", GetRPName(playerid));
		SM(playerid, COLOR_AQUA, "You have kicked %s from your gang.", GetRPName(targetid));
	}
	else if(!strcmp(option, "rank", true))
	{
	    new rankid;

		if(pData[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 5+ to use this command.");
		}
		if(sscanf(param, "ui", targetid, rankid))
		{
		    return SM(playerid, COLOR_SYNTAX, "Usage: /gang [rank] [playerid] [rankid (0-6)]");
		}
		if(!IsPlayerConnected(targetid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
		}
		if(rankid < 0 || rankid > pData[playerid][pGangRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "The rank specified is either invalid or higher than your rank.");
		}
		if(pData[targetid][pGang] != pData[playerid][pGang])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player is not apart of your gang.");
		}
		if(pData[targetid][pGangRank] > pData[playerid][pGangRank])
		{
		    return SCM(playerid, COLOR_SYNTAX, "That player has a higher rank than you.");
		}

		pData[targetid][pGangRank] = rankid;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gangrank = %i WHERE uid = %i", rankid, pData[targetid][pID]);
		mysql_tquery(connectionID, queryBuffer);

		SM(targetid, COLOR_AQUA, "%s has set your rank to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(playerid), GangRanks[pData[playerid][pGang]][rankid], rankid);
		SM(playerid, COLOR_AQUA, "You have set %s's rank to "SVRCLR"%s{CCFFFF} (%i).", GetRPName(targetid), GangRanks[pData[playerid][pGang]][rankid], rankid);
		Log_Write("log_gang", "%s (uid: %i) has set %s's (uid: %i) rank in %s (id: %i) to %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang], GangRanks[pData[playerid][pGang]][rankid], rankid);
	}
	else if(!strcmp(option, "stash", true))
	{
	    if(pData[playerid][pAdmin] < 1)
		{
		    return SCM(playerid, COLOR_WHITE, ""SVRCLR"[!]"WHITE" Contact an admin via /am");
		}
		if(isnull(param) || strcmp(param, "confirm", true) != 0)
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [stash] [confirm] (Moves the gang stash.)");
		}

		GetPlayerPos(playerid, GangInfo[pData[playerid][pGang]][gStashX], GangInfo[pData[playerid][pGang]][gStashY], GangInfo[pData[playerid][pGang]][gStashZ]);
		GangInfo[pData[playerid][pGang]][gStashInterior] = GetPlayerInterior(playerid);
		GangInfo[pData[playerid][pGang]][gStashWorld] = GetPlayerVirtualWorld(playerid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET stash_x = '%f', stash_y = '%f', stash_z = '%f', stashinterior = %i, stashworld = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gStashX], GangInfo[pData[playerid][pGang]][gStashY], GangInfo[pData[playerid][pGang]][gStashZ], GangInfo[pData[playerid][pGang]][gStashInterior], GangInfo[pData[playerid][pGang]][gStashWorld], pData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(pData[playerid][pGang]);
		SM(playerid, COLOR_AQUA, "You have moved the gang stash to your location. /gstash to access your stash.");
	}
	else if(!strcmp(option, "stats", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM users WHERE gang = %i", pData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_GANG_INFORMATION, playerid);
	}
	else if(!strcmp(option, "roster", true))
	{
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT username, lastlogin, gangrank FROM users WHERE gang = %i ORDER BY gangrank DESC", pData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_GANG_ROSTER, playerid);
	}
	else if(!strcmp(option, "online", true))
	{
	    callcmd::gmembersa(playerid, "\1");
	}
	else if(!strcmp(option, "quit", true))
	{
	    if(isnull(param) || strcmp(param, "confirm", true) != 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [quit] [confirm]");
	    }
	
	
	    SM(playerid, COLOR_AQUA, "You have quit %s as a "SVRCLR"%s{CCFFFF} (%i).", GangInfo[pData[playerid][pGang]][gName], GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], pData[playerid][pGangRank]);
		Log_Write("log_gang", "%s (uid: %i) has quit %s (id: %i) has rank %s (%i).", GetPlayerNameEx(playerid), pData[playerid][pID], GangInfo[pData[playerid][pGang]][gName], pData[playerid][pGang], GangRanks[pData[playerid][pGang]][pData[playerid][pGangRank]], pData[playerid][pGangRank]);
		pData[playerid][pFgRestricted] = 30;
	
	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET cooldown = %i WHERE uid = %i", 30, pData[playerid][pID]);
	    mysql_tquery(connectionID, queryBuffer);
		
	    pData[playerid][pGang] = -1;
		pData[playerid][pGangRank] = 0;
	
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gang = -1, gangrank = 0 WHERE uid = %i", pData[playerid][pID]);
		mysql_tquery(connectionID, queryBuffer);
	}
	else if(!strcmp(option, "offlinekick", true))
	{
	    new username[MAX_PLAYER_NAME];
	
		if(pData[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 5+ to use this command.");
		}
		if(sscanf(param, "s[24]", username))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [offlinekick] [username]");
		}
		if(IsPlayerOnline(username))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "That player is already online and logged in. Use '/gang kick' instead.");
		}
	
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT uid, gang, gangrank FROM users WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer, "OnPlayerOfflineKickGang", "is", playerid, username);
	}
	else if(!strcmp(option, "motd", true))
	{
	    if(pData[playerid][pGangRank] < 5)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 6+ to use this command.");
		}
	    if(isnull(param))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [motd] [text]");
		}

		strcpy(GangInfo[pData[playerid][pGang]][gMOTD], param, 128);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET motd = '%e' WHERE id = %i", param, pData[playerid][pGang]);
		mysql_tquery(connectionID, queryBuffer);

		ReloadGang(pData[playerid][pGang]);
		SCM(playerid, COLOR_AQUA, "You have changed the MOTD for your gang.");
	}
	else if(!strcmp(option, "rankname", true))
	{
	    new rankid, rank[32];

        if(pData[playerid][pGangRank] < 6)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 6+ to use this command.");
		}
	    if(sscanf(param, "is[32]", rankid, rank))
	    {
	        SCM(playerid, SERVER_COLOR, "Rank Names:");

	        for(new i = 0; i < 7; i ++)
	        {
	            if(isnull(GangRanks[pData[playerid][pGang]][i]))
	            	SM(playerid, COLOR_GREY2, "Rank %i: (empty)", i);
				else
				    SM(playerid, COLOR_GREY2, "Rank %i: %s", i, GangRanks[pData[playerid][pGang]][i]);
	        }

	        return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [rankname] [slot (0-6)] [name]");
	    }
	    if(!(0 <= rankid <= 6))
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Invalid rank.");
		}

	    strcpy(GangRanks[pData[playerid][pGang]][rankid], rank, 32);

	    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO gangranks VALUES(%i, %i, '%e') ON DUPLICATE KEY UPDATE name = '%e'", pData[playerid][pGang], rankid, rank, rank);
	    mysql_tquery(connectionID, queryBuffer);

	    SM(playerid, COLOR_AQUA, "You have set the name of rank %i to "SVRCLR"%s{CCFFFF}.", rankid, rank);
	}
/*  else if(!strcmp(option, "npc", true))
	{
	    new type, confirm[10];

	    if(pData[playerid][pGangRank] < 6)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 6+ to use this command.");
		}
		if(sscanf(param, "is[10]", type, confirm))
		{
		    SCM(playerid, COLOR_SYNTAX, "Usage: /gang [npc] [slot] [confirm]");
		    SCM(playerid, COLOR_GREY2, "List of slots: (1) Arms Dealer (2) Drug Dealer");
		    return 1;
		}
		if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0 || pData[playerid][pPaintball])
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
		    return SCM(playerid, COLOR_SYNTAX, "You can't use this command from within the vehicle.");
		}

		if(!isnull(confirm) && !strcmp(confirm, "confirm", true))
		{
			if(type == 1)
			{
			    if(!GangInfo[pData[playerid][pGang]][gArmsDealer])
				{
		    		return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have the arms dealer upgrade. (/gang upgrade)");
				}

				GetPlayerPos(playerid, GangInfo[pData[playerid][pGang]][gArmsX], GangInfo[pData[playerid][pGang]][gArmsY], GangInfo[pData[playerid][pGang]][gArmsZ]);
				SetPlayerPos(playerid, GangInfo[pData[playerid][pGang]][gArmsX] + 1.0, GangInfo[pData[playerid][pGang]][gArmsY], GangInfo[pData[playerid][pGang]][gArmsZ] + 1.0);
		        GetPlayerFacingAngle(playerid, GangInfo[pData[playerid][pGang]][gArmsA]);
		        GangInfo[pData[playerid][pGang]][gArmsWorld] = GetPlayerVirtualWorld(playerid);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET arms_x = '%f', arms_y = '%f', arms_z = '%f', arms_a = '%f', armsworld = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gArmsX], GangInfo[pData[playerid][pGang]][gArmsY], GangInfo[pData[playerid][pGang]][gArmsZ], GangInfo[pData[playerid][pGang]][gArmsA], GangInfo[pData[playerid][pGang]][gArmsWorld], pData[playerid][pGang]);
		        mysql_tquery(connectionID, queryBuffer);

		        ReloadGang(pData[playerid][pGang]);
		        SCM(playerid, COLOR_AQUA, "You have moved the position of the arms dealer for your gang.");
			}
			else if(type == 2)
			{
			    if(!GangInfo[pData[playerid][pGang]][gDrugDealer])
				{
		    		return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have the drug dealer upgrade. (/gang upgrade)");
				}

				GetPlayerPos(playerid, GangInfo[pData[playerid][pGang]][gDrugX], GangInfo[pData[playerid][pGang]][gDrugY], GangInfo[pData[playerid][pGang]][gDrugZ]);
				SetPlayerPos(playerid, GangInfo[pData[playerid][pGang]][gDrugX] + 1.0, GangInfo[pData[playerid][pGang]][gDrugY], GangInfo[pData[playerid][pGang]][gDrugZ] + 1.0);
		        GetPlayerFacingAngle(playerid, GangInfo[pData[playerid][pGang]][gDrugA]);
		        GangInfo[pData[playerid][pGang]][gDrugWorld] = GetPlayerVirtualWorld(playerid);

		        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET drug_x = '%f', drug_y = '%f', drug_z = '%f', drug_a = '%f', drugworld = %i WHERE id = %i", GangInfo[pData[playerid][pGang]][gDrugX], GangInfo[pData[playerid][pGang]][gDrugY], GangInfo[pData[playerid][pGang]][gDrugZ], GangInfo[pData[playerid][pGang]][gDrugA], GangInfo[pData[playerid][pGang]][gDrugWorld], pData[playerid][pGang]);
		        mysql_tquery(connectionID, queryBuffer);

		        ReloadGang(pData[playerid][pGang]);
		        SCM(playerid, COLOR_AQUA, "You have moved the position of the drug dealer for your gang.");
			}
		}
	}*/
	else if(!strcmp(option, "upgrade", true))
	{
	    if(pData[playerid][pGangRank] < 6)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 6+ to use this command.");
		}

		new
		    title[48],
			string[1024] = "Perk\tDescription\tCost";

		strcat(string, "\nDrug dealer\tAn NPC which sells individually stocked drugs\t{F7A763}500 GP "WHITE"+"SVRCLR" $400,000");
		strcat(string, "\nArms dealer\tAn NPC which sells individually stocked weapons\t{F7A763}500 GP "WHITE"+"SVRCLR" $400,000");

		if(GangInfo[pData[playerid][pGang]][gLevel] == 1)
		{
		    strcat(string, "\nLevel Up\tAdvance your gang's level to 2/3.\t{F7A763}6000 GP "WHITE"+"SVRCLR" $1,000,000");
		}
		else if(GangInfo[pData[playerid][pGang]][gLevel] == 2)
		{
		    strcat(string, "\nLevel Up\tAdvance your gang's level to 3/3.\t{F7A763}12000 GP "WHITE"+"SVRCLR" $2,000,000");
		}

		format(title, sizeof(title), "Gang upgrades (Your gang has %i GP.)", GangInfo[pData[playerid][pGang]][gPoints]);
		ShowPlayerDialog(playerid, DIALOG_GANGPOINTSHOP, DIALOG_STYLE_TABLIST_HEADERS, title, string, "Select", "Cancel");
	}
	else if(!strcmp(option, "alliance", true))
	{
	    new gangid = pData[playerid][pGang];

		if(pData[playerid][pGangRank] < 6)
		{
			return SCM(playerid, COLOR_SYNTAX, "You need to be at least rank 6+ to use this command.");
	  	}
		if(sscanf(param, "u", targetid))
	  	{
	   		return SCM(playerid, COLOR_SYNTAX, "Usage: /gang [alliance] [playerid]");
	  	}
  	 	if(GangInfo[gangid][gAlliance] >= 0)
		{
			return SCM(playerid, COLOR_SYNTAX, "You're already in an alliance, end it first! (/endalliance)");
	  	}
	  	if(pData[targetid][pGangRank] < 6)
	  	{
			return SCM(playerid, COLOR_SYNTAX, "The player you're offering to ally with must be R6 in their gang!");
	  	}
        if(pData[targetid][pGang] == gangid)
		{
			return SCM(playerid, COLOR_SYNTAX, "You cannot form an alliance with your own gang!");
		}

		if(GangInfo[gangid][gAlliance] == -1)
		{
			SM(playerid, COLOR_AQUA, "You've offered to form a gang alliance with %s.", GetRPName(targetid));
			SM(targetid, COLOR_AQUA, "%s has offered to form an alliance with your gang. (/accept alliance)", GetRPName(playerid));
			pData[targetid][pAllianceOffer] = playerid;
		}
	}

	return 1;
}


CMD:gstash(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of a gang at the moment.");
	}
	if(pData[playerid][pFaction] >= 0)
	{
	    return SCM(playerid, COLOR_GREY, "You cannot use this command while in a faction.");
	}
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, GangInfo[pData[playerid][pGang]][gStashX], GangInfo[pData[playerid][pGang]][gStashY], GangInfo[pData[playerid][pGang]][gStashZ]))
    {
		return SCM(playerid, COLOR_SYNTAX, "You are not in range of your gang stash.");
	}

	ShowDialogToPlayer(playerid, DIALOG_GANGSTASH);
	return 1;
}

CMD:bandana(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of a gang at the moment.");
	}
	new gang = pData[playerid][pGang], color, string[128];
	if(pData[playerid][pBandana])
	{
		UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_WHITE, "");
 		pData[playerid][pBandana] = 0;
     	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes off their bandana and puts it back to their pocket.", GetRPName(playerid));
		ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0);
	}
	else
	{
		if(pData[playerid][pJoinedEvent])
		{
		    return SendClientMessage(playerid, COLOR_GREY, "You can not put on your bandana on while in a event or paintball match.");
		}
		if(GangInfo[gang][gColor] == -1 || GangInfo[gang][gColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
		    color = GangInfo[gang][gColor];
		}

		format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", color >>> 8, GangInfo[gang][gName],GangRanks[gang][pData[playerid][pGangRank]]);
		//UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_WHITE, string);
 		pData[playerid][pBandana] = 1;
       	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s takes out their bandana and wraps it around their forehead.", GetRPName(playerid));
		ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0);
	}
	return 1;
}


CMD:gpark(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid = GetPlayerVehicleID(playerid), id = VehicleInfo[vehicleid][vID];

	if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}
	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any of your gang vehicles.");
	}
	if(VehicleInfo[vehicleid][vGang] != pData[playerid][pGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't park this vehicle as it doesn't belong to your gang.");
	}

	// Save the vehicle's information.
	GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
	GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);

    VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
    VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);

	SCM(playerid, COLOR_AQUA, "** Gang vehicle parked. It will now spawn here.");

	// Update the database record with the new information, then despawn the vehicle.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);

	SaveVehicleModifications(vehicleid);
 	DespawnVehicle(vehicleid);


	// Finally, we reload the vehicle from the database.
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT * FROM vehicles WHERE id = %i", id);
	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LOAD_VEHICLES, -1);

	return 1;
}

CMD:gfindcar(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new string[512], count;

    if(pData[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of a gang at the moment.");
	}

	string = "#\tModel\tLocation";

	for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == pData[playerid][pGang])
	    {
	        format(string, sizeof(string), "%s\n%i\t%s\t%s", string, count + 1, GetVehicleName(i), GetVehicleZoneName(i));
	        count++;
		}
	}

	if(!count)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your gang has no vehicles which you can track.");
	}
	if(lumberman{playerid} == true)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
		SetPlayerSkin(playerid, pData[playerid][pSkin]);
    	Lumber1[playerid] = 0;
		lumberman{playerid} = false;
		Lumbered[playerid] = 0;
		Lumberedx[playerid] = 0;
	}
	DisablePlayerCheckpoint(playerid);
	CancelActiveCheckpoint(playerid);
	pData[playerid][pRobCash] = 0;
	PlayerHasCrate[playerid] = 0;
	SCM(playerid, COLOR_WHITE, "You have cancelled all active checkpoints.");
	ShowPlayerDialog(playerid, DIALOG_GANGFINDCAR, DIALOG_STYLE_TABLIST_HEADERS, "Gang vehicles", string, "Track", "Cancel");
	return 1;
}

CMD:grespawncars(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}

    for(new i = 1; i < MAX_VEHICLES; i ++)
	{
	    if(IsValidVehicle(i) && VehicleInfo[i][vID] > 0 && VehicleInfo[i][vGang] == pData[playerid][pGang] && !IsVehicleOccupied(i))
	    {
	        SetVehicleToRespawn(i);
		}
	}

	SAM(COLOR_YELLOW, ""RED"AdmWarning: %s"WHITE"[%i] has respawned their gang vehicles.", GetRPName(playerid), playerid);
	SCM(playerid, COLOR_YELLOW, "You have respawned all of your unoccupied gang vehicles.");
	return 1;
}


CMD:createpoint(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new type, name[32];

    if(pData[playerid][pAdmin] < 5 && !pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "is[32]", type, name))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /createpoint [type] [name]");
	    SCM(playerid, COLOR_GREY2, "List of types: (1) Drug factory (2) Drug den (3) Crack house (4) Auto export (5) Fuel");
		SCM(playerid, COLOR_GREY2, "List of types: (6) Mat pickup 1 (7) Mat pickup 2 (8) Mat factory 1 (9) Mat factory 2");
	    return 1;
	}
	if(!(0 <= type <= 9))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}

	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(!PointInfo[i][pExists])
	    {
			GetPlayerPos(playerid, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]);

	        strcpy(PointInfo[i][pName], name, 32);
	        strcpy(PointInfo[i][pCapturedBy], "Pending", MAX_PLAYER_NAME);

	        PointInfo[i][pExists] = 1;
	        PointInfo[i][pType] = type;
	        PointInfo[i][pProfits] = 0;
	        PointInfo[i][pCapturedGang] = -1;
	        PointInfo[i][pTime] = 24;
	        PointInfo[i][pPointInterior] = GetPlayerInterior(playerid);
	        PointInfo[i][pPointWorld] = GetPlayerVirtualWorld(playerid);
	        PointInfo[i][pCaptureTime] = 0;
        	PointInfo[i][pCapturer] = INVALID_PLAYER_ID;
	        PointInfo[i][pText] = Text3D:INVALID_3DTEXT_ID;
	        PointInfo[i][pPickup] = -1;

	        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO points (id, name, type, point_x, point_y, point_z, pointinterior, pointworld) VALUES(%i, '%e', %i, '%f', '%f', '%f', %i, %i)", i, name, type, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ], PointInfo[i][pPointInterior], PointInfo[i][pPointWorld]);
	        mysql_tquery(connectionID, queryBuffer);

	        ReloadPoint(i);

	        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has created point {F7A763}%s"WHITE".", GetRPName(playerid), name);
	        SM(playerid, COLOR_AQUA, "You have created point {F7A763}%s{CCFFFF}. /editpoint %i to edit this point.", name, i);
	        return 1;
		}
	}

	return 1;
}

CMD:gotopoint(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new pointid;

	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", pointid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gotopoint [pointid]");
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid point.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:editpoint(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new pointid, option[14], param[32];

	if(pData[playerid][pAdmin] < 5 && !pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[32]", pointid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [option]");
		SCM(playerid, COLOR_WHITE, "Available options: Name, Location, CapturedBy, Gang, Type, Profits, Time");
	    return 1;
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid point.");
	}

 	if(!strcmp(option, "name", true))
    {
        if(isnull(param))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [name] [text]");
		}

		strcpy(PointInfo[pointid][pName], param, 32);
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET name = '%e' WHERE id = %i", PointInfo[pointid][pName], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the name of point %i to %s.", GetRPName(playerid), pointid, param);
		SM(playerid, COLOR_AQUA, "You have set the name of point %i to {F7A763}%s{CCFFFF}.", pointid, param);
	}
	else if(!strcmp(option, "location", true))
    {
		GetPlayerPos(playerid, PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ]);
		PointInfo[pointid][pPointInterior] = GetPlayerInterior(playerid);
		PointInfo[pointid][pPointWorld] = GetPlayerVirtualWorld(playerid);
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET point_x = '%f', point_y = '%f', point_z = '%f', pointinterior = %i, pointworld = %i WHERE id = %i", PointInfo[pointid][pPointX], PointInfo[pointid][pPointY], PointInfo[pointid][pPointZ], PointInfo[pointid][pPointInterior], PointInfo[pointid][pPointWorld], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has moved the location of point %i.", GetRPName(playerid), pointid);
		SM(playerid, COLOR_AQUA, "You have moved the location of point %i.", pointid);
	}
	else if(!strcmp(option, "capturedby", true))
    {
        if(isnull(param) || strlen(params) > 24)
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [capturedby] [name]");
		}

		strcpy(PointInfo[pointid][pCapturedBy], param, MAX_PLAYER_NAME);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedby = '%e' WHERE id = %i", PointInfo[pointid][pCapturedBy], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the capturer of point %i to %s.", GetRPName(playerid), pointid, param);
		SM(playerid, COLOR_AQUA, "You have set the capturer of point %i to {F7A763}%s{CCFFFF}.", pointid, param);
	}
	else if(!strcmp(option, "gang", true))
    {
        new gangid;

        if(sscanf(param, "i", gangid))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [gang] [gangid (-1 = none)]");
		}
		if(!(0 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
		}

		PointInfo[pointid][pCapturedGang] = gangid;
		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET capturedgang = %i WHERE id = %i", PointInfo[pointid][pCapturedBy], pointid);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		{
            SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has reset the capturing gang of point %i.", GetRPName(playerid), pointid);
			SM(playerid, COLOR_AQUA, "You have reset the capturing gang of point %i.", pointid);
		}
		else
		{
			SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the capturing gang of point %i to %s.", GetRPName(playerid), pointid, GangInfo[gangid][gName]);
			SM(playerid, COLOR_AQUA, "You have set the capturing gang of point %i to "SVRCLR"%s{CCFFFF}.", pointid, GangInfo[gangid][gName]);
		}
	}
	else if(!strcmp(option, "type", true))
    {
        new type;

        if(sscanf(param, "i", type))
        {
            SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [type] [value]");
           	SCM(playerid, COLOR_GREY2, "List of types: (1) Drug factory (2) Drug den (3) Crack house (4) Auto export (5) Fuel");
			SCM(playerid, COLOR_GREY2, "List of types: (6) Mat pickup 1 (7) Mat pickup 2 (8) Mat factory 1 (9) Mat factory 2");
            return 1;
		}
		if(!(0 <= type <= 9))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		PointInfo[pointid][pType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET type = %i WHERE id = %i", PointInfo[pointid][pType], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the type of point %i to %i.", GetRPName(playerid), pointid, type);
		SM(playerid, COLOR_AQUA, "You have set the type of point %i to %i.", pointid, type);
	}
    else if(!strcmp(option, "profits", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [profits] [value]");
		}

		PointInfo[pointid][pProfits] = value;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET profits = %i WHERE id = %i", PointInfo[pointid][pProfits], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the profits of point %i to $%i.", GetRPName(playerid), pointid, value);
		SM(playerid, COLOR_AQUA, "You have set the profits of point %i to $%i.", pointid, value);
	}
	else if(!strcmp(option, "time", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editpoint [pointid] [time] [hours (0-24)]");
		}
		if(!(0 <= value <= 24))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The amount of hours must range from 0 to 24.");
		}

		PointInfo[pointid][pTime] = value;

		if(PointInfo[pointid][pTime] == 0)
		{
		    SMA(COLOR_TEAL, ""WHITE"%s"TEAL" is now available to capture.", PointInfo[pointid][pName]);
		}
		else
		{
		    PointInfo[pointid][pCapturer] = INVALID_PLAYER_ID;
		    PointInfo[pointid][pCaptureTime] = 0;
		}

		ReloadPoint(pointid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE points SET time = %i WHERE id = %i", PointInfo[pointid][pTime], pointid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the time of point %i to %i hours.", GetRPName(playerid), pointid, value);
		SM(playerid, COLOR_AQUA, "You have set the time of point %i to %i hours.", pointid, value);
	}

	return 1;
}

CMD:removepoint(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new pointid;

	if(pData[playerid][pAdmin] < 5 && !pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", pointid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removepoint [pointid]");
	}
	if(!(0 <= pointid < MAX_POINTS) || !PointInfo[pointid][pExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid point.");
	}

	DestroyDynamic3DTextLabel(PointInfo[pointid][pText]);
	DestroyDynamicPickup(PointInfo[pointid][pPickup]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM points WHERE id = %i", pointid);
	mysql_tquery(connectionID, queryBuffer);

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has deleted point %s.", GetRPName(playerid), PointInfo[pointid][pName]);
	SM(playerid, COLOR_AQUA, "You have deleted point {F7A763}%s{CCFFFF}.", PointInfo[pointid][pName]);

	PointInfo[pointid][pExists] = 0;
	PointInfo[pointid][pCapturedGang] = -1;
	PointInfo[pointid][pTime] = 0;
	return 1;
}

GangClaimingTurfs(gang)
{
	new capCount = 0;
	for(new x = 0; x < MAX_TURFS; x++)
	{
		if(TurfInfo[x][tExists] && TurfInfo[x][tCapturer] != INVALID_PLAYER_ID && TurfInfo[x][tTime] == 0)
		{
			if(pData[TurfInfo[x][tCapturer]][pGang] == gang)
			{
    			capCount++;
			}
		}
	}
	return capCount;
}

CMD:capture(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in any gang at the moment.");
	}
	if(pData[playerid][pCapturingPoint] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already attempting to capture the point.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't capture a point while injured.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be onfoot in order to use this command.");
	}
	for(new i = 0; i < MAX_POINTS; i ++)
	{
	    if(PointInfo[i][pExists] && IsPlayerInRangeOfPoint(playerid, 1.0, PointInfo[i][pPointX], PointInfo[i][pPointY], PointInfo[i][pPointZ]) && GetPlayerInterior(playerid) == PointInfo[i][pPointInterior] && GetPlayerVirtualWorld(playerid) == PointInfo[i][pPointWorld])
		{
			if(PointInfo[i][pTime] > 0)
			{
			    return SCM(playerid, COLOR_SYNTAX, "This point is not available to capture yet.");
		    }
		    if(PointInfo[i][pCapturer] == playerid)
		    {
		        return SCM(playerid, COLOR_SYNTAX, "This point is already being captured by you.");
		    }
		    if(PointInfo[i][pCapturer] != INVALID_PLAYER_ID && pData[PointInfo[i][pCapturer]][pGang] == pData[playerid][pGang])
		    {
		        return SCM(playerid, COLOR_SYNTAX, "This point is already being captured by your gang.");
			}

		    foreach(new x : Player)
		    {
		        if(pData[x][pCapturingPoint] == i && pData[x][pCaptureTime] > 0)
		        {
		            return SCM(playerid, COLOR_SYNTAX, "Someone else is already attempting to capture. Please wait until they're done.");
				}
			}

		    pData[playerid][pCapturingPoint] = i;
		    pData[playerid][pCaptureTime] = 10;

			GetPlayerPos(playerid, pData[playerid][pPointX], pData[playerid][pPointY], pData[playerid][pPointZ]);
		    SendProximityMessage(playerid, 20.0, COLOR_YELLOW, "(( %s is attempting to capture %s. ))", GetRPName(playerid), PointInfo[i][pName]);
		    return 1;
		}
	}

	SCM(playerid, COLOR_SYNTAX, "You are not in range of any points.");
	return 1;
}

CMD:claim(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new turfid, count;

    if((pData[playerid][pGang] == -1 || pData[playerid][pGangRank] < 5) && !IsLawEnforcement(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not rank 5+ in a gang or apart of law enforcement.");
	}
	if((turfid = GetNearbyTurf(playerid)) == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not in range of any turfs which you can claim.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't claim a turf while injured.");
	}
	if(TurfInfo[turfid][tTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This turf is not yet available to claim.");
	}
	if(TurfInfo[turfid][tCapturer] == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This turf is already being captured by you.");
	}
	if(!IsLawEnforcement(playerid) && TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && pData[TurfInfo[turfid][tCapturer]][pGang] == pData[playerid][pGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This turf is already being claimed by your gang.");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be onfoot in order to use this command.");
	}
	if(!IsLawEnforcement(playerid) && GangClaimingTurfs(pData[playerid][pGang]) >= MaxCapCount[0])
	{
	    return SM(playerid, COLOR_SYNTAX, "You're gang is already claiming %i turfs.", MaxCapCount[0]);
	}

	if(TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && TurfInfo[turfid][tTime] == 0)
	{
		foreach(new i : Player)
		{
		    if(i != playerid && GetNearbyTurf(i) == turfid && !pData[i][pInjured] && !pData[i][pAdminDuty] && !pData[i][pAcceptedHelp] && !pData[i][pAFK] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
 			{
			    if(pData[TurfInfo[turfid][tCapturer]][pGang] >= 0 && pData[i][pGang] == pData[TurfInfo[turfid][tCapturer]][pGang] && pData[i][pGang] != GangInfo[pData[playerid][pGang]][gAlliance])
			    {
					return SCM(playerid, COLOR_SYNTAX, "You must eliminate all members of the attacking gang before you can claim this.");
			    }
			    else if(IsLawEnforcement(TurfInfo[turfid][tCapturer]) && IsLawEnforcement(i))
			    {
      				return SCM(playerid, COLOR_SYNTAX, "You must eliminate all LEO in this turf before you can claim this.");
			    }
			}
		}
	}

	if(pData[playerid][pGang] >= 0)
	{
	    if(GangInfo[pData[playerid][pGang]][gTurfTokens] <= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your gang doesn't have any turf tokens left.");
		}

	    foreach(new i : Player)
	    {
	        if(GetNearbyTurf(i) == turfid && pData[i][pGang] == pData[playerid][pGang])
	        {
	            count++;
			}
		}

		if(count < 3)
		{
		    return SCM(playerid, COLOR_SYNTAX, "You need at least 3 members of your gang in this turf to claim it.");
		}
		else
		{
			GangInfo[pData[playerid][pGang]][gTurfTokens]--;
			SMA(COLOR_GREEN, "%s has attempted to claim %s for %s. It will be their turf in 15 minutes!", GetRPName(playerid), TurfInfo[turfid][tName], GangInfo[pData[playerid][pGang]][gName]);

		    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET turftokens = turftokens - 1 WHERE id = %i", pData[playerid][pGang]);
			mysql_tquery(connectionID, queryBuffer);
			
			new szString[128];
			format(szString, sizeof(szString),  "``%s has attempted to claim %s for %s. It will be their turf in 15 minutes!`` @everyone", GetRPName(playerid), TurfInfo[turfid][tName], GangInfo[pData[playerid][pGang]][gName]);
			SendDiscordMessage(30, szString);
		}
	}
	else if(IsLawEnforcement(playerid) && pData[playerid][pGang] == -1)
	{
	    if(FactionInfo[pData[playerid][pFaction]][fTurfTokens] <= 0)
	    {
	        return SCM(playerid, COLOR_SYNTAX, "Your faction doesn't have any turf tokens left.");
		}

	    FactionInfo[pData[playerid][pFaction]][fTurfTokens]--;
	    SMA(COLOR_GREEN, "Officer %s has attempted to claim back %s. It will be civilian owned in 15 minutes!", GetRPName(playerid), TurfInfo[turfid][tName]);

        mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE factions SET turftokens = turftokens - 1 WHERE id = %i", pData[playerid][pFaction]);
		mysql_tquery(connectionID, queryBuffer);
		
		new szString[128];
		format(szString, sizeof(szString),  "``Officer %s has attempted to claim back %s. It will be civilian owned in 15 minutes!`` @everyone", GetRPName(playerid), TurfInfo[turfid][tName]);
		SendDiscordMessage(30, szString);
	}

	TurfInfo[turfid][tCapturer] = playerid;
	TurfInfo[turfid][tCaptureTime] = 15;
	ReloadTurf(turfid);
	return 1;
}

CMD:reclaim(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new turfid;

    if(pData[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of any gang at the moment.");
	}
	if((turfid = GetNearbyTurf(playerid)) == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You are not in range of any turfs.");
	}
	if(GetFactionType(playerid) == FACTION_POLICE && pData[playerid][pGang] >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You're not allowed to claim turfs as a law enforcer and a gang member.");
	}
	if(pData[playerid][pInjured])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't reclaim a turf while injured.");
	}
	if(TurfInfo[turfid][tCapturedGang] != pData[playerid][pGang])
	{
	    return SCM(playerid, COLOR_SYNTAX, "This turf does not belong to your gang. Therefore you can't reclaim it.");
	}
	if(TurfInfo[turfid][tType] == 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This is a locked turf and therefore cannot be claimed.");
	}
	if(TurfInfo[turfid][tCapturer] == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This turf is not being claimed by anyone. Therefore you can't reclaim it.");
	}

 	if(TurfInfo[turfid][tCapturer] != INVALID_PLAYER_ID && TurfInfo[turfid][tTime] == 0)
	{
		foreach(new i : Player)
		{
		    if(i != playerid && GetNearbyTurf(i) == turfid && !pData[i][pInjured] && !pData[i][pAdminDuty] && !pData[i][pAcceptedHelp] && !pData[i][pAFK] && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
 			{
			    if(pData[TurfInfo[turfid][tCapturer]][pGang] >= 0 && pData[i][pGang] == pData[TurfInfo[turfid][tCapturer]][pGang] && pData[i][pGang] != GangInfo[pData[playerid][pGang]][gAlliance])
			    {
					return SCM(playerid, COLOR_SYNTAX, "You must eliminate all members of the attacking gang before you can claim this.");
			    }
			    else if(IsLawEnforcement(TurfInfo[turfid][tCapturer]) && IsLawEnforcement(i))
			    {
      				return SCM(playerid, COLOR_SYNTAX, "You must eliminate all LEO in this turf before you can claim this.");
			    }
			}
		}
	}

	SMA(COLOR_GREEN, "%s has reclaimed %s for %s and ended the turf war.", GetRPName(playerid), TurfInfo[turfid][tName], GangInfo[pData[playerid][pGang]][gName]);

	TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
	TurfInfo[turfid][tCaptureTime] = 0;
	ReloadTurf(turfid);

	return 1;
}
CMD:park(playerid, params[])
{
    if(pData[playerid][pVerifySystem])
    {
        SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        return 1;
    }

    new vehicleid = GetPlayerVehicleID(playerid), id = VehicleInfo[vehicleid][vID];

    if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not driving any vehicle of yours.");
    }

    if(!IsVehicleOwner(playerid, vehicleid) && pData[playerid][pVehicleKeys] != vehicleid)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't park this vehicle as it doesn't belong to you.");
    }
	if(GetVehicleParams(vehicleid, VEHICLE_ENGINE))
	{
		return SCM(playerid, COLOR_SYNTAX, "The engine needs to be shut down before you park this vehicle.");
	}
    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s parks their %s.", GetRPName(playerid), GetVehicleName(vehicleid));
	GameTextForPlayer(playerid, "~y~Parking,,,", 2000, 3);

    // Save the vehicle's information (without despawning or removing the player)
    GetVehiclePos(vehicleid, VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ]);
    GetVehicleZAngle(vehicleid, VehicleInfo[vehicleid][vPosA]);

    VehicleInfo[vehicleid][vInterior] = GetPlayerInterior(playerid);
    VehicleInfo[vehicleid][vWorld] = GetPlayerVirtualWorld(playerid);

    // Update the database record with the new information
    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), 
        "UPDATE vehicles SET pos_x = '%f', pos_y = '%f', pos_z = '%f', pos_a = '%f', interior = %i, world = %i WHERE id = %i", 
        VehicleInfo[vehicleid][vPosX], VehicleInfo[vehicleid][vPosY], VehicleInfo[vehicleid][vPosZ], 
        VehicleInfo[vehicleid][vPosA], VehicleInfo[vehicleid][vInterior], VehicleInfo[vehicleid][vWorld], VehicleInfo[vehicleid][vID]);

    mysql_tquery(connectionID, queryBuffer);

    // No need to despawn the vehicle or respawn it
    // Just save the information and let the vehicle stay in its current state

    return 1;
}

CMD:endalliance(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new gangid = pData[playerid][pGang];
	new allyid = GangInfo[gangid][gAlliance];
	new color, color2;

	if(isnull(params) || strcmp(params, "confirm", true) != 0)
	{
	   return SCM(playerid, COLOR_SYNTAX, "Usage: /endalliance [confirm]");
	}
	if(pData[playerid][pGang] == -1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be in a gang to use this command");
	}
	if(pData[playerid][pGangRank] < 6)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You need to be rank 6 to use this command.");
	}
	if(GangInfo[gangid][gAlliance] == -1)
	{
		return SCM(playerid, COLOR_SYNTAX, "Your gang isn't currently in an alliance.");
	}

	SM(playerid, COLOR_YELLOW, "You just ended your alliance with %s.", GangInfo[gangid][gName]);

	if(GangInfo[gangid][gColor] == -1 || GangInfo[gangid][gColor] == -256)
	{
		color = 0xC8C8C8FF;
	}
	else
	{
	    color = GangInfo[gangid][gColor];
	}
	if(GangInfo[allyid][gColor] == -1 || GangInfo[allyid][gColor] == -256)
	{
	    color2 = 0xC8C8C8FF;
	}
	else
	{
	    color2 = GangInfo[allyid][gColor];
	}

	SMA(COLOR_GREEN, "Gang News: {%06x}%s"WHITE" has ended their alliance with {%06x}%s", color >>> 8, GangInfo[gangid][gName], color2 >>> 8, GangInfo[allyid][gName]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", gangid);
	mysql_tquery(connectionID, queryBuffer);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE gangs SET alliance = -1 WHERE id = %i", allyid);
	mysql_tquery(connectionID, queryBuffer);

	GangInfo[allyid][gAlliance] = -1;
	GangInfo[gangid][gAlliance] = -1;

	return 1;
}

CMD:guninv(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	SCM(playerid, COLOR_GREEN, "My Weapons:");

	for(new i = 0; i < 13; i ++)
	{
     	if(pData[playerid][pWeapons][i] > 0)
	    {
	        SM(playerid, COLOR_GREY2, "(ID: %i) %s", pData[playerid][pWeapons][i], GetWeaponNameEx(pData[playerid][pWeapons][i]));
		}
	}

	return 1;
}


CMD:loadammo(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new weaponid, type[14];

	if(sscanf(params, "is[14]", weaponid, type))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /loadammo [weaponid] [type] (/guninv for weapon IDs)");
	    SCM(playerid, COLOR_GREY2, "List of types: Normal, HollowPoint, PoisonTip, FMJ");
	    return 1;
	}
    if(!(1 <= weaponid <= 46) || pData[playerid][pWeapons][weaponSlotIDs[weaponid]] != weaponid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have that weapon. /guninv for a list of your weapons.");
	}
	if(!(22 <= weaponid <= 34))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That weapon can't be loaded with ammunition.");
	}
	if(pData[playerid][pJoinedEvent] > 0 || pData[playerid][pDueling] != INVALID_PLAYER_ID|| pData[playerid][pDueling1] != INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}

	if(!strcmp(type, "normal", true))
	{
	    pData[playerid][pAmmoType] = AMMOTYPE_NORMAL;
	    pData[playerid][pAmmoWeapon] = 0;

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s loads their %s with normal ammunition.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SCM(playerid, COLOR_AQUA, "You have loaded this weapon with "SVRCLR"Normal{CCFFFF} ammunition.");
	    ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
	}
	else if(!strcmp(type, "hollowpoint", true))
	{
	    if(!pData[playerid][pHPAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no hollow point ammunition to load this weapon with.");
	    }

	    pData[playerid][pAmmoType] = AMMOTYPE_HP;
	    pData[playerid][pAmmoWeapon] = weaponid;

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s loads their %s with hollow point ammunition.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SCM(playerid, COLOR_AQUA, "You have loaded this weapon with "SVRCLR"Hollow point{CCFFFF} ammunition.");
		ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
	}
	else if(!strcmp(type, "poisontip", true))
	{
	    if(!pData[playerid][pPoisonAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no poison tip ammunition to load this weapon with.");
	    }

	    pData[playerid][pAmmoType] = AMMOTYPE_POISON;
	    pData[playerid][pAmmoWeapon] = weaponid;

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s loads their %s with poison tip ammunition.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SCM(playerid, COLOR_AQUA, "You have loaded this weapon with "SVRCLR"Poison tip{CCFFFF} ammunition.");
		ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
	}
	else if(!strcmp(type, "fmj", true))
	{
	    if(!pData[playerid][pFMJAmmo])
	    {
	        return SCM(playerid, COLOR_SYNTAX, "You have no full metal jacket ammunition to load this weapon with.");
	    }

	    pData[playerid][pAmmoType] = AMMOTYPE_FMJ;
	    pData[playerid][pAmmoWeapon] = weaponid;

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s loads their %s with full metal jacket ammunition.", GetRPName(playerid), GetWeaponNameEx(weaponid));
	    SCM(playerid, COLOR_AQUA, "You have loaded this weapon with "SVRCLR"Full metal jacket{CCFFFF} ammunition.");
		ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
	}

	SetPlayerWeapons(playerid);
	return 1;
}

CMD:buyland(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new landid = GetNearbyLand(playerid);

	if(landid == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not in range of any lands.");
    }
    if(LandInfo[landid][lOwnerID] > 0)
    {
        return SCM(playerid, COLOR_SYNTAX, "This land is already owned.");
	}
    if(strcmp(params, "confirm", true))
    {
        return SM(playerid, COLOR_SYNTAX, "Usage: /buyland [confirm] (This land costs $%i.)", LandInfo[landid][lPrice]);
	}
	if(pData[playerid][pCash] < LandInfo[landid][lPrice])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't afford to purchase this land.");
	}

    SetLandOwner(landid, playerid);
	GivePlayerCash(playerid, -LandInfo[landid][lPrice]);

	SM(playerid, COLOR_YELLOW, "You paid $%i for this land! /landhelp to see the available commands for your land.", LandInfo[landid][lPrice]);
	Log_Write("log_property", "%s (uid: %i) purchased a land (id: %i) in %s for $%i.", GetPlayerNameEx(playerid), pData[playerid][pID], LandInfo[landid][lID], GetPlayerZoneName(playerid), LandInfo[landid][lPrice]);
	return 1;
}


CMD:landinfo(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new landid = GetNearbyLand(playerid);

	if(landid == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not in range of any lands.");
    }

    if(!LandInfo[landid][lOwnerID])
	{
        SM(playerid, COLOR_WHITE, "** This land is currently not owned and is for sale, price: "SVRCLR"$%i"WHITE".", LandInfo[landid][lPrice]);
	}
	else if(!IsLandOwner(playerid, landid))
	{
	    SM(playerid, COLOR_WHITE, "** This land is owned by %s.", LandInfo[landid][lOwner]);
	}
	else
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT COUNT(*) FROM landobjects WHERE landid = %i", LandInfo[landid][lID]);
    	mysql_tquery(connectionID, queryBuffer, "OnQueryFinished", "ii", THREAD_LAND_INFORMATION, playerid);
	}

	return 1;
}
CMD:lands(playerid, params[])
{
	if(!pData[playerid][pShowLands])
	{
        ShowLandsOnMap(playerid, true);
        ShowTurfsOnMap(playerid, false);
        SCM(playerid, COLOR_AQUA, "You will now see lands on your mini-map.");
	}
	else
	{
        ShowLandsOnMap(playerid, false);
        SCM(playerid, COLOR_AQUA, "You will no longer see any lands on your mini-map.");
	}

	return 1;
}

CMD:land(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new landid = GetNearbyLand(playerid);

	if(landid == -1)
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not in range of a land.");
    }
    if(!HasLandPerms(playerid, landid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You don't have permission to build in this land.");
	}

	ShowDialogToPlayer(playerid, DIALOG_LANDMENU);
	return 1;
}

CMD:sellmyland(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new landid = GetNearbyLand(playerid);

    if(landid == -1 || !IsLandOwner(playerid, landid))
    {
        return SCM(playerid, COLOR_SYNTAX, "You are not in range of any lands of yours.");
    }
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /sellmyland [confirm]");
	    SM(playerid, COLOR_WHITE, "This command sells your land back to the state. You will receive $%i back.", percent(LandInfo[landid][lPrice], 75));
	    return 1;
	}

	SetLandOwner(landid, INVALID_PLAYER_ID);
	GivePlayerCash(playerid, percent(LandInfo[landid][lPrice], 75));

	SM(playerid, COLOR_YELLOW, "You have sold your land to the state and received $%i back.", percent(LandInfo[landid][lPrice], 75));
    Log_Write("log_property", "%s (uid: %i) sold their land (id: %i) to the state for $%i", GetPlayerNameEx(playerid), pData[playerid][pID], LandInfo[landid][lID], percent(LandInfo[landid][lPrice], 75));
	return 1;
}

CMD:createland(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new price;

    if(pData[playerid][pAdmin] < 10)
	    return SCM(playerid, COLOR_SYNTAX, "You don't have permission to use this command.");

	if(sscanf(params, "i", price))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /createland [price]");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(price < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The price can't be below $500,000.");
	}
	if(GetNearbyLand(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a land in range. Find somewhere else to create this one.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot create lands indoors.");
	}

	pData[playerid][pLandCost] = price;
	pData[playerid][pZoneType] = ZONETYPE_LAND;
	ShowPlayerDialog(playerid, DIALOG_CREATEZONE, DIALOG_STYLE_MSGBOX, "Land System", "You have entered land creation mode. In order to create a land you need\nto mark four points around the area you want your land to be in, forming\na square. You must make a square or your outcome won't be as expected.\n\nPress "SVRCLR"Confirm{A9C4E4} to set the land spawn.", "Confirm", "Cancel");
	return 1;
}

CMD:createturf(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new type, name[32];

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[32]", type, name))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /createturf [special type] [name]");
		SCM(playerid, COLOR_GREY2, "List of types: (0)None (1)CASH (2)MATERIALS (3)CRACKHOUSE (4)MARIJUANA (5)DRUGHOUSE");
		SCM(playerid, COLOR_GREY2, "List of types: (6)LOW WEPS (7)MEDIUM WEPS (8)HIGHWEPS");
	    
		
	    return 1;
	}
	if(!(0 <= type <= 8))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
	}
	if(GetNearbyTurf(playerid) >= 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a turf in range. Find somewhere else to create this one.");
	}
	if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot create turfs indoors.");
	}

	pData[playerid][pTurfType] = type;
	pData[playerid][pZoneType] = ZONETYPE_TURF;

	strcpy(pData[playerid][pTurfName], name, 32);
	ShowPlayerDialog(playerid, DIALOG_CREATEZONE, DIALOG_STYLE_MSGBOX, "Turf creation system", "You have entered turf creation mode. In order to create a turf you need\nto mark four points around the area you want your turf to be in, forming\na square. You must make a square or your outcome won't be as expected.\n\nPress "SVRCLR"Confirm{A9C4E4} to begin turf creation.", "Confirm", "Cancel");
	return 1;
}

CMD:turfcancel(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(pData[playerid][pZoneCreation] != ZONETYPE_TURF)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not creating a turf at the moment.");
	}

	CancelZoneCreation(playerid);
	SCM(playerid, COLOR_LIGHTRED, "** Land creation cancelled.");
	return 1;
}

CMD:gototurf(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new turfid;

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "i", turfid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gototurf [turfid]");
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid turf.");
	}

	GameTextForPlayer(playerid, "~w~Teleported", 5000, 1);

	SetPlayerPos(playerid, TurfInfo[turfid][tMinX], TurfInfo[turfid][tMinY], TurfInfo[turfid][tHeight]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);
	return 1;
}

CMD:removeturf(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new turfid;

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "i", turfid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /removeturf [turfid]");
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid turf.");
	}

	GangZoneDestroy(TurfInfo[turfid][tGangZone]);
	DestroyDynamicArea(TurfInfo[turfid][tArea]);

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM turfs WHERE id = %i", turfid);
	mysql_tquery(connectionID, queryBuffer);

	TurfInfo[turfid][tExists] = 0;
	TurfInfo[turfid][tCapturedGang] = 0;
    TurfInfo[turfid][tType] = 0;

    SM(playerid, COLOR_AQUA, "** You have removed turf %i.", turfid);
	return 1;
}

CMD:editturf(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new turfid, option[14], param[32];

	if(!pData[playerid][pGangMod])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "is[14]S()[32]", turfid, option, param))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [option]");
		SCM(playerid, COLOR_WHITE, "Available options: Name, ClaimBy, Gang, Type, Time");
	    return 1;
	}
	if(!(0 <= turfid < MAX_TURFS) || !TurfInfo[turfid][tExists])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid turf.");
	}

 	if(!strcmp(option, "name", true))
    {
        if(isnull(param))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [name] [text]");
		}

		strcpy(TurfInfo[turfid][tName], param, 32);
		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET name = '%e' WHERE id = %i", TurfInfo[turfid][tName], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the name of turf %i to %s.", GetRPName(playerid), turfid, param);
		SM(playerid, COLOR_AQUA, "You have set the name of turf %i to {F7A763}%s{CCFFFF}.", turfid, param);
	}
	else if(!strcmp(option, "claimby", true))
    {
        if(isnull(param) || strlen(params) > 32)
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [capturedby] [name]");
		}

		strcpy(TurfInfo[turfid][tCapturedBy], param, MAX_PLAYER_NAME);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedby = '%e' WHERE id = %i", TurfInfo[turfid][tCapturedBy], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the capturer of turf %i to %s.", GetRPName(playerid), turfid, param);
		SM(playerid, COLOR_AQUA, "You have set the capturer of turf %i to {F7A763}%s{CCFFFF}.", turfid, param);
	}
 	else if(!strcmp(option, "gang", true))
    {
        new gangid;

        if(sscanf(param, "i", gangid))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [gang] [gangid (-1 = none)]");
		}
		if(!(0 <= gangid < MAX_GANGS) || (gangid >= 0 && !GangInfo[gangid][gSetup]))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid gang.");
		}

		TurfInfo[turfid][tCapturedGang] = gangid;
		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET capturedgang = %i WHERE id = %i", TurfInfo[turfid][tCapturedGang], turfid);
		mysql_tquery(connectionID, queryBuffer);

		if(gangid == -1)
		{
            SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has reset the capturing gang of turf %i.", GetRPName(playerid), turfid);
			SM(playerid, COLOR_AQUA, "You have reset the capturing gang of turf %i.", turfid);
		}
		else
		{
			SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the capturing gang of turf %i to %s.", GetRPName(playerid), turfid, GangInfo[gangid][gName]);
			SM(playerid, COLOR_AQUA, "You have set the capturing gang of turf %i to "SVRCLR"%s{CCFFFF}.", turfid, GangInfo[gangid][gName]);
		}
	}
	else if(!strcmp(option, "type", true))
    {
        new type;

        if(sscanf(param, "i", type))
        {
            SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [type] [value]");
			SCM(playerid, COLOR_GREY2, "List of types: (0)None (1)CASH (2)MATERIALS (3)CRACKHOUSE (4)MARIJUANA (5)DRUGHOUSE");
			SCM(playerid, COLOR_GREY2, "List of types: (6)LOW WEPS (7)MEDIUM WEPS (8)HIGHWEPS");
            return 1;
		}
		if(!(0 <= type <= 10))
		{
		    return SCM(playerid, COLOR_SYNTAX, "Invalid type.");
		}

		TurfInfo[turfid][tType] = type;

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET type = %i WHERE id = %i", TurfInfo[turfid][tType], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the type of turf %i to %i.", GetRPName(playerid), turfid, type);
		SM(playerid, COLOR_AQUA, "You have set the type of turf %i to %i.", turfid, type);
	}
	else if(!strcmp(option, "time", true))
    {
        new value;

        if(sscanf(param, "i", value))
        {
            return SCM(playerid, COLOR_SYNTAX, "Usage: /editturf [turfid] [time] [hours (0-24)]");
		}
		if(!(0 <= value <= 24))
		{
		    return SCM(playerid, COLOR_SYNTAX, "The amount of hours must range from 0 to 24.");
		}

		TurfInfo[turfid][tTime] = value;

		if(TurfInfo[turfid][tTime] == 0 && TurfInfo[turfid][tType] != 8)
		{
		    SMA(COLOR_TEAL	, ""WHITE"%s"TEAL" is now available to capture.", TurfInfo[turfid][tName]);
			new szString[128];
			format(szString, sizeof(szString),  "``%s is now available to capture.`` @everyone", TurfInfo[turfid][tName]);
			SendDiscordMessage(30, szString);
		}
		else
		{
		    TurfInfo[turfid][tCapturer] = INVALID_PLAYER_ID;
		    TurfInfo[turfid][tCaptureTime] = 0;
		}

		ReloadTurf(turfid);

		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE turfs SET time = %i WHERE id = %i", TurfInfo[turfid][tTime], turfid);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has set the time of turf %i to %i hours.", GetRPName(playerid), turfid, value);
		SM(playerid, COLOR_AQUA, "You have set the time of turf %i to %i hours.", turfid, value);
	}

	return 1;
}

CMD:carhelp(playerid)
{
	return callcmd::vehiclehelp(playerid);
}

CMD:armbomb(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::plantbomb(playerid, params);
}

CMD:defend(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, amount, time = (5 - GetJobLevel(playerid, JOB_LAWYER)) * 30;

    if(!PlayerHasJob(playerid, JOB_LAWYER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're a Lawyer.");
	}
	if(gettime() - pData[playerid][pLastDefend] < time)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only defend a player every %i seconds. Please wait %i more seconds.", time, time - (gettime() - pData[playerid][pLastDefend]));
	}
	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /defend [playerid] [amount]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't defend yourself.");
	}
	if(!pData[targetid][pWantedLevel])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not wanted.");
	}
	if(amount < 50 || amount > 250)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount specified must range between $50 and $250.");
	}

	pData[targetid][pDefendOffer] = playerid;
	pData[targetid][pDefendPrice] = amount;
	pData[playerid][pLastDefend] = gettime();

	SM(targetid, COLOR_AQUA, "** Lawyer %s has offered to defend your wanted level for $%i. (/accept lawyer)", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You have offered to defend %s's wanted level for $%i.", GetRPName(targetid), amount);
	return 1;
}

CMD:mole(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
 	if(pData[playerid][pAdmin] < 3)
 	{
  		return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
 	}
 	if(isnull(params))
 	{
     	SCM(playerid, COLOR_SYNTAX, "Usage: /mole [text]");
     	SCM(playerid, COLOR_YELLOW, "This command sends a SMS to the entire server. Abusing this command will result in heavy punishment.");
     	return 1;
 	}
	SMA(COLOR_YELLOW, "** SMS from MOLE(0): %s **", params);
 	return 1;
}

CMD:free(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, time = GetJobLevel(playerid, JOB_LAWYER);

    if(!PlayerHasJob(playerid, JOB_LAWYER))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're a Lawyer.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /free [playerid]");
	}
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(pData[targetid][pJailType] != 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is not in IC jail.");
	}
	if(pData[targetid][pJailTime] < time * 60)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't free this player, their jail time expires soon.");
	}

	pData[targetid][pJailTime] -= time * 60;

	SM(targetid, COLOR_AQUA, "** Lawyer %s has reduced your jail sentence by %i minutes.", GetRPName(playerid), time);
	SM(playerid, COLOR_AQUA, "** You have reduced %s's jail sentence by %i minutes.", GetRPName(targetid), time);
	return 1;
}

CMD:eject(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /eject [playerid]");
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not driving any vehicle.");
	}
	if(!IsPlayerConnected(targetid) || !IsPlayerInVehicle(targetid, GetPlayerVehicleID(playerid)))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected, or is not in your vehicle.");
	}

	RemovePlayerFromVehicle(targetid);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s ejects %s from the vehicle.", GetRPName(playerid), GetRPName(targetid));
	return 1;
}

CMD:boxing(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new target1, target2;
	if(!IsPlayerInRangeOfPoint(playerid, 6.0, 1470.1754,1787.8226,1014.7407))
	{
		return SCM(playerid, COLOR_ERROR, "[ERROR]{ffffff} You are not in range of the casino locker.");
	}
	if(sscanf(params, "uu", target1, target2))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /boxing [your id] [opponent id]");
	}
	if(target1 == INVALID_PLAYER_ID || target2 == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid player specified.");
	}

	SM(target2, COLOR_AQUA, "** %s has initiated a boxing fight with you (/accept boxing).", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have initiated a boxing fight %s.", GetRPName(target2));
	pData[target2][pDiceOffer1] = playerid;
	return 1;
}

CMD:dicebet(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, amount;

	if(sscanf(params, "ui", targetid, amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /dicebet [playerid] [amount]");
	}
	//if(!IsPlayerinCasino(playerid))
	//{
	//    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the casino place.");
	//}	
    if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(amount < 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "The amount can't be below $1.");
	}
	if(pData[playerid][pCash] < amount)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have that much money to bet.");
	}
	if(gettime() - pData[playerid][pLastBet] < 7)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 7 seconds. Please wait %i more seconds.", 7 - (gettime() - pData[playerid][pLastBet]));
	}

	pData[targetid][pDiceOffer] = playerid;
	pData[targetid][pDiceBet] = amount;
	pData[playerid][pLastBet] = gettime();

	SM(targetid, COLOR_AQUA, "** %s has initiated a bet with you for $%i (/accept dicebet).", GetRPName(playerid), amount);
	SM(playerid, COLOR_AQUA, "** You have initiated a bet against %s for $%i.", GetRPName(targetid), amount);
	return 1;
}

CMD:calculate(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new option, Float:value1, Float:value2;

	if(sscanf(params, "fcf", value1, option, value2))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /calculate [value 1] [option] [value 2]");
	    SCM(playerid, COLOR_WHITE, "Available options: (+) Add (-) Subtract (*) Multiply (/) Divide");
	    return 1;
	}
	if(option == '/' && value2 == 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't divide by zero.");
	}

	if(option == '+') {
	    SM(playerid, COLOR_YELLOW, "** Result: %.2f + %.2f = %.2f", value1, value2, value1 + value2);
	} else if(option == '-') {
	    SM(playerid, COLOR_YELLOW, "** Result: %.2f - %.2f = %.2f", value1, value2, value1 - value2);
	} else if(option == '*' || option == 'x') {
		SM(playerid, COLOR_YELLOW, "** Result: %.2f * %.2f = %.2f", value1, value2, value1 * value2);
	} else if(option == '/') {
		SM(playerid, COLOR_YELLOW, "** Result: %.2f / %.2f = %.2f", value1, value2, value1 / value2);
	}

	return 1;
}

CMD:serverstats(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new houses, businesses, garages, vehicles, entrances, turfs, points, gangs, factions;

	for(new i = 0; i < MAX_HOUSES; i ++) 	 if(HouseInfo[i][hExists]) 		houses++;
	for(new i = 0; i < MAX_BUSINESSES; i ++) if(BusinessInfo[i][bExists]) 	businesses++;
	for(new i = 0; i < MAX_GARAGES; i ++) 	 if(GarageInfo[i][gExists]) 	garages++;
	for(new i = 0; i < MAX_VEHICLES; i ++) 	 if(IsValidVehicle(i)) 			vehicles++;
	for(new i = 0; i < MAX_ENTRANCES; i ++)  if(EntranceInfo[i][eExists]) 	entrances++;
	for(new i = 0; i < MAX_TURFS; i ++) 	 if(TurfInfo[i][tExists]) 		turfs++;
	for(new i = 0; i < MAX_POINTS; i ++) 	 if(PointInfo[i][pExists]) 		points++;
	for(new i = 0; i < MAX_GANGS; i ++) 	 if(GangInfo[i][gSetup]) 		gangs++;
	for(new i = 0; i < MAX_FACTIONS; i ++) 	 if(FactionInfo[i][fType]) 		factions++;

	SCM(playerid, SERVER_COLOR, ""SERVER_NAME" Stats:");
	SM(playerid, COLOR_GREY2, "Connections: %i - Registered: %i - Kill Counter: %i - Death Counter: %i - Hours Played: %i", gConnections, gTotalRegistered, gTotalKills, gTotalDeaths, gTotalHours);
	SM(playerid, COLOR_WHITE, "Houses: %i/%i - Businesses: %i/%i - Garages: %i/%i - Vehicles: %i/%i", houses, MAX_HOUSES, businesses, MAX_BUSINESSES, garages, MAX_GARAGES, vehicles, MAX_VEHICLES);
	SM(playerid, COLOR_GREY2, "Entrances: %i/%i - Turfs: %i/%i - Points: %i/%i - Gangs: %i/%i - Factions: %i/%i", entrances, MAX_ENTRANCES, turfs, MAX_TURFS, points, MAX_POINTS, gangs, MAX_GANGS, factions, MAX_FACTIONS);
	SM(playerid, COLOR_WHITE, "Players Online: %i/%i - Player Record: %i - Record Date: %s - Anticheat Bans: %i", Iter_Count(Player), MAX_PLAYERS, gPlayerRecord, gRecordDate, gAnticheatBans);
	return 1;
}

CMD:ww(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::pw(playerid, params);
}

CMD:pw(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!pData[playerid][pWatch])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a pocket watch. You can buy one at 24/7.");
	}

	if(!pData[playerid][pWatchOn])
	{
	    if(pData[playerid][pToggleTextdraws])
		{
	    	return SCM(playerid, COLOR_SYNTAX, "You can't turn on your watch as you have textdraws toggled! (/toggle textdraws)");
		}

	    pData[playerid][pWatchOn] = 1;
	    ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0);
	    TextDrawShowForPlayer(playerid, TimeTD);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns on their watch.", GetRPName(playerid));
	}
	else
	{
	    pData[playerid][pWatchOn] = 0;
	    ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0);
	    TextDrawHideForPlayer(playerid, TimeTD);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off their watch.", GetRPName(playerid));
	}

	return 1;
}

CMD:gps(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!pData[playerid][pGPS])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You don't have a GPS. You can buy one at 24/7.");
	}

	if(!pData[playerid][pGPSOn])
	{
	    if(pData[playerid][pToggleTextdraws])
		{
	    	return SCM(playerid, COLOR_SYNTAX, "You can't turn on your GPS as you have textdraws toggled! (/toggle textdraws)");
		}

	    pData[playerid][pGPSOn] = 1;

	    PlayerTextDrawSetString(playerid, pData[playerid][pText][0], "Loading...");
	    ShowGPSTextdraw(playerid);

	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns on their GPS.", GetRPName(playerid));
	}
	else
	{
	    pData[playerid][pGPSOn] = 0;
	    HideGPSTextdraw(playerid);
	    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s turns off their GPS.", GetRPName(playerid));
	}

	return 1;
}

CMD:fixvw(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pJoinedEvent])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently in a in the event. Use /quitevent instead.");
	}
	if(IsPlayerInRangeOfPoint(playerid, 90.0,2067.0002,1097.1819,1717.2209))
	{
		SetPlayerVirtualWorld(playerid, 2);
		SetPlayerInterior(playerid, 2);
	    SCM(playerid, COLOR_SYNTAX, "Your virtual world has been fixed.");
	}
	if(GetPlayerVirtualWorld(playerid) > 0 && GetPlayerInterior(playerid) == 0)
	{
	    SetPlayerVirtualWorld(playerid, 0);
	    SCM(playerid, COLOR_SYNTAX, "Your virtual world has been fixed.");
	}
	else
	{
	    SCM(playerid, COLOR_SYNTAX, "Your virtual world is not bugged at the moment. /report or relog if the problem persists.");
	}

	return 1;
}

CMD:selfie(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot do this inside a vehicle.");
	new Float:fPos[4],
		Float:fCam[2];

	GetPlayerPos(playerid, fPos[0], fPos[1], fPos[2]);
	GetPlayerFacingAngle(playerid, fPos[3]);

	fPos[3] += 1.25;
	fCam[0] = fPos[0] + 1.4 * floatcos(fPos[3], degrees);
	fCam[1] = fPos[1] + 1.4 * floatsin(fPos[3], degrees);

	SetPlayerCameraPos(playerid, fCam[0], fCam[1], fPos[2] + 0.9);
	SetPlayerCameraLookAt(playerid, fPos[0], fPos[1], fPos[2] + 0.9);
	SetPlayerFacingAngle(playerid, fPos[3] - 90.0);

	TogglePlayerControllable(playerid, 0);
	ApplyAnimation(playerid, "PED", "gang_gunstand", 4.1, 1, 1, 1, 1, 1, 1);
	SendClientMessage(playerid, COLOR_GRAD1, "{DDDDDD}use /selfie to change the cam position. Use {FFFF00}/stuck {DDDDDD}to stop the selfie.");
	return 1;
}
CMD:stuck(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pAcceptedHelp] || pData[playerid][pMiningTime] > 0  || pData[playerid][pButcherTime] > 0|| pData[playerid][pCleanTime] > 0 || pData[playerid][pTacotime] > 0 || pData[playerid][pBurritotime] > 0 || pData[playerid][pDemolitionTime] > 0 || pData[playerid][pFishTime] > 0 || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || IsPlayerInAnyVehicle(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(pData[playerid][pEquipVest] == true)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
    if(gettime() - pData[playerid][pLastStuck] < 5)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can only use this command every 5 seconds. Please wait %i more seconds.", 5 - (gettime() - pData[playerid][pLastStuck]));
	}

	new
	    Float:x,
    	Float:y,
    	Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetPlayerPos(playerid, x, y, z + 0.5);

	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, 1);
	SetCameraBehindPlayer(playerid);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 0, 0, 0, 0, 0, 1);
	SCM(playerid, SERVER_COLOR, "**"WHITE" You are no longer stuck.");

	pData[playerid][pLastStuck] = gettime();
	return 1;
}

CMD:badge(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT && GetFactionType(playerid) != FACTION_MECHANIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(!IsPlayerInRangeOfLocker(playerid, pData[playerid][pFaction]))
	{
	    return SCM(playerid, COLOR_ERROR, "Error:"WHITE" You are not in range of your faction locker.");
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(!pData[playerid][pDuty])
	{
		new string[128], color, faction = pData[playerid][pFaction];
		if(FactionInfo[faction][fColor] == -1 || FactionInfo[faction][fColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
			color = FactionInfo[faction][fColor];
		}
		SendFactionMessage(pData[playerid][pFaction], FACTION_DUTY, "HQ: %s %s is now back on duty...", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", color >>> 8, FactionInfo[faction][fName],FactionRanks[faction][pData[playerid][pFactionRank]]);
		//UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_WHITE, string);

	    pData[playerid][pDuty] = 1;
	    SCM(playerid, COLOR_WHITE, "You have enabled your badge. You now appear on-duty for all players.");
	}
	else
	{
		SendFactionMessage(pData[playerid][pFaction], FACTION_DUTY, "HQ: %s %s is now off duty...", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		//UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_WHITE, "");
		pData[playerid][pDuty] = 0;
	    ResetPlayerWeaponsEx(playerid);
	    SCM(playerid, COLOR_WHITE, "You have disabled your badge. You no longer appear on-duty for any players.");
	}
	return 1;
}

CMD:SSbadge(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOVERNMENT && GetFactionType(playerid) != FACTION_MECHANIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
    if(pData[playerid][pTazedTime] > 0 || pData[playerid][pInjured] > 0 || pData[playerid][pHospital] > 0 || pData[playerid][pTied] > 0 || pData[playerid][pCuffed] > 0 || pData[playerid][pJailTime] > 0 || pData[playerid][pJoinedEvent] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command at the moment.");
	}
	if(!pData[playerid][pDuty])
	{
		new string[128], color, faction = pData[playerid][pFaction];
		if(FactionInfo[faction][fColor] == -1 || FactionInfo[faction][fColor] == -256)
		{
			color = 0xC8C8C8FF;
		}
		else
		{
			color = FactionInfo[faction][fColor];
		}
		SendFactionMessage(pData[playerid][pFaction], FACTION_DUTY, "HQ: %s %s is now back on duty...", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		format(string, sizeof(string), "{%06x}%s\n"WHITE"%s", color >>> 8, FactionInfo[faction][fName],FactionRanks[faction][pData[playerid][pFactionRank]]);
		//UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_WHITE, string);

	    pData[playerid][pDuty] = 1;
	    SCM(playerid, COLOR_WHITE, "You have enabled your badge. You now appear on-duty for all players.");
	}
	else
	{
		SendFactionMessage(pData[playerid][pFaction], FACTION_DUTY, "HQ: %s %s is now off duty...", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid));
		//UpdateDynamic3DTextLabelText(PlayerLabel[playerid], COLOR_WHITE, "");
		pData[playerid][pDuty] = 0;
	    ResetPlayerWeaponsEx(playerid);
	    SCM(playerid, COLOR_WHITE, "You have disabled your badge. You no longer appear on-duty for any players.");
	}
	return 1;
}

CMD:duel(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new target1, target2, Float:health, Float:armor, weapon1, weapon2;

    if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "uuffii", target1, target2, health, armor, weapon1, weapon2))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /duel [player1] [player2] [health] [armor] [weapon1] [weapon2]");
	}
	if(target1 == INVALID_PLAYER_ID || target2 == INVALID_PLAYER_ID)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid player specified.");
	}
	if(health < 1.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Health can't be under 1.0.");
	}
	if(!(0 <= weapon1 <= 46) || !(0 <= weapon2 <= 46))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Invalid weapon. Valid weapon IDs range from 0 to 46.");
	}

	SavePlayerVariables(target1);
	SavePlayerVariables(target2);

	ResetPlayerWeapons(target1);
	ResetPlayerWeapons(target2);

	SetPlayerPos(target1, 1276.9800,-43.8686,1001.0255);
	SetPlayerPos(target2, 1279.8011,-0.5966,1001.0143);
	SetPlayerInterior(target1, 1);
	SetPlayerInterior(target2, 1);
	SetPlayerVirtualWorld(target1, 1);
	SetPlayerVirtualWorld(target2, 1);

	SetPlayerHealth(target1, health);
	SetPlayerArmour(target1, armor);
	SetPlayerHealth(target2, health);
	SetPlayerArmour(target2, armor);

	GiveWeapon(target1, weapon1, true);
	GiveWeapon(target1, weapon2, true);
	GiveWeapon(target2, weapon1, true);
	GiveWeapon(target2, weapon2, true);

	GameTextForPlayer(target1, "~r~Duel time!", 3000, 3);
	GameTextForPlayer(target2, "~r~Duel time!", 3000, 3);

	pData[target1][pDueling] = target2;
	pData[target2][pDueling] = target1;

	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has forced %s and %s into a duel.", GetRPName(playerid), GetRPName(target1), GetRPName(target2));
	return 1;
}


CMD:chopcar(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
 	new vehicleid = GetPlayerVehicleID(playerid);

	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 2855.2415,8560.3552,9.8954))
	{
		 SCM(playerid, COLOR_SYNTAX, "You are not in range of the Chopping area.");
		 return 1;
	}	
 	if(pData[playerid][pLevel] < 2)
 	{
 	    SendClientMessage(playerid, COLOR_GREY, "You need at least 2 level before you can chop a car.");
 	    return 1;
 	}
	if(!vehicleid || IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cant chop your own car.");
	}
	if((gettime() - pData[playerid][pLastChop]) < 7200000)
	{
		return SCM(playerid, COLOR_TEAL, "Error:"WHITE" You need to wait "WHITE"2 hours"TEAL" before chopping again.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /chopcar [confirm]");
	    SM(playerid, COLOR_WHITE, "This command use to chopped the vehicle permanently. You will receive $%i back.", percent(VehicleInfo[vehicleid][vPrice], 50));
		return 1;
	}
	if(VehicleInfo[vehicleid][vPrice] != 0)
	{
		GivePlayerDirtyCash(playerid, percent(VehicleInfo[vehicleid][vPrice], 50));
	
		SM(playerid, COLOR_YELLOW, "You have chopped the %s and received $%i back.", GetVehicleName(vehicleid), percent(VehicleInfo[vehicleid][vPrice], 50));
		Log_Write("log_property", "%s (uid: %i) Chopped their %s (id: %i) to the Chopping Range for $%i", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], percent(VehicleInfo[vehicleid][vPrice], 50));
	}
	else 
	{
		new amount = random(300000) + 200000; // Random amount between 50,000 and 100,000
		GivePlayerDirtyCash(playerid, amount);
		
		SM(playerid, COLOR_YELLOW, "You have chopped the %s and received $%i back.", GetVehicleName(vehicleid), amount);
		Log_Write("log_property", "%s (uid: %i) chopped their %s (id: %i) to the Chopping Range for $%i", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], amount);

	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);
	mysql_tquery(connectionID, queryBuffer);
	pData[playerid][pLastChop] = gettime();
	DestroyVehicle(vehicleid);
	return 1;
}
//here
CMD:chopcarcrzy(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
 	new vehicleid = GetPlayerVehicleID(playerid);
 	if(pData[playerid][pLevel] < 2)
 	{
 	    SendClientMessage(playerid, COLOR_GREY, "You need at least 2 level before you can chop a car.");
 	    return 1;
 	}
	if(!vehicleid || IsVehicleOwner(playerid, vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cant chop your own car.");
	}
	if(strcmp(params, "confirm", true) != 0)
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /chopcar [confirm]");
	    SM(playerid, COLOR_WHITE, "This command use to chopped the vehicle permanently. You will receive $%i back.", percent(VehicleInfo[vehicleid][vPrice], 50));
		return 1;
	}
	if(VehicleInfo[vehicleid][vPrice] != 0)
	{
		GivePlayerDirtyCash(playerid, percent(VehicleInfo[vehicleid][vPrice], 50));
	
		SM(playerid, COLOR_YELLOW, "You have chopped the %s and received $%i back.", GetVehicleName(vehicleid), percent(VehicleInfo[vehicleid][vPrice], 50));
		Log_Write("log_property", "%s (uid: %i) Chopped their %s (id: %i) to the Chopping Range for $%i", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], percent(VehicleInfo[vehicleid][vPrice], 50));
	}
	else 
	{
		new amount = random(300000) + 200000; // Random amount between 50,000 and 100,000
		GivePlayerDirtyCash(playerid, amount);
		
		SM(playerid, COLOR_YELLOW, "You have chopped the %s and received $%i back.", GetVehicleName(vehicleid), amount);
		Log_Write("log_property", "%s (uid: %i) chopped their %s (id: %i) to the Chopping Range for $%i", GetPlayerNameEx(playerid), pData[playerid][pID], GetVehicleName(vehicleid), VehicleInfo[vehicleid][vID], amount);

	}
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "DELETE FROM vehicles WHERE id = %i", VehicleInfo[vehicleid][vID]);
	mysql_tquery(connectionID, queryBuffer);
	mysql_tquery(connectionID, queryBuffer);
	pData[playerid][pLastChop] = gettime();
	DestroyVehicle(vehicleid);
	return 1;
}
CMD:hmole(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
 	if(pData[playerid][pDev] < 1)
 	{
  		return SCM(playerid, COLOR_SYNTAX, "You are not a hitman!");
 	}
 	if(isnull(params))
 	{
     	SCM(playerid, COLOR_SYNTAX, "Usage: /hmole [text]");
     	SCM(playerid, COLOR_YELLOW, "This command automatically places ((/contract)) text.");
     	return 1;
 	}
	SMA(COLOR_YELLOW, "** SMS from MOLE(#null): %s((/contract)) **", params);
 	return 1;
}

CMD:info(playerid) callcmd::information(playerid);
CMD:information(playerid)
{
	SCM(playerid, COLOR_WHITE, ""SERVER_NAME": "SERVER_URL"");
}

CMD:takecall(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, Float:x, Float:y, Float:z;

	if(!PlayerHasJob(playerid, JOB_TAXIDRIVER))
	{
     	return SCM(playerid, COLOR_SYNTAX, "You can't use this command unless you're a Mechanic or Taxi Driver.");
	}
    if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /takecall [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}

	if((FactionInfo[pData[playerid][pFaction]][fType] == FACTION_MECHANIC) && pData[targetid][pMechanicCall] > 0)
	{
		if(GetPlayerInterior(targetid))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "That player is currently unreachable.");
		}

		pData[targetid][pMechanicCall] = 0;
		pData[playerid][pCP] = CHECKPOINT_MISC;

		GetPlayerPos(targetid, x, y, z);
		SetPlayerCheckpoint(playerid, x, y, z, 5.0);

		SM(playerid, COLOR_AQUA, "** You have accepted %s's mechanic call. Their location was marked on your map.", GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "** %s has accepted your mechanic call. Please wait patiently until they arrive.", GetRPName(playerid));
	}
	else if(PlayerHasJob(playerid, JOB_TAXIDRIVER) && pData[targetid][pTaxiCall] > 0)
	{
        if(GetPlayerInterior(targetid))
		{
	    	return SCM(playerid, COLOR_SYNTAX, "That player is currently unreachable.");
		}

		pData[targetid][pTaxiCall] = 0;
		pData[playerid][pCP] = CHECKPOINT_MISC;

		GetPlayerPos(targetid, x, y, z);
		SetPlayerCheckpoint(playerid, x, y, z, 5.0);

		SM(playerid, COLOR_AQUA, "** You have accepted %s's taxi call. Their location was marked on your map.", GetRPName(targetid));
		SM(targetid, COLOR_AQUA, "** %s has accepted your taxi call. Please wait patiently until they arrive.", GetRPName(playerid));
	}
	else
	{
		SCM(playerid, COLOR_SYNTAX, "That player has no calls which can be taken.");
	}

	return 1;
}

CMD:listcallers(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}

	SCM(playerid, SERVER_COLOR, "Emergency Calls:");

	foreach(new i : Player)
	{
	    if((pData[i][pEmergencyCall] > 0) && ((pData[i][pEmergencyType] == FACTION_MEDIC && GetFactionType(playerid) == FACTION_MEDIC) || (pData[i][pEmergencyType] == FACTION_POLICE && IsLawEnforcement(playerid))))
	    {
	        SM(playerid, COLOR_GREY2, "** %s[%i] - Expiry: %i seconds - Emergency: %s", GetRPName(i), i, pData[i][pEmergencyCall], pData[i][pEmergency]);
		}
	}

	return 1;
}

CMD:trackcall(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, Float:x, Float:y, Float:z;

	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_MECHANIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
    if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /trackcall [playerid]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	if(!pData[targetid][pEmergencyCall])
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player hasn't called 911 recently or their call expired.");
	}
	if(!GetPlayerPosEx(targetid, x, y, z))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is currently unreachable.");
	}

	//pData[targetid][pEmergencyCall] = 0;
	pData[playerid][pCP] = CHECKPOINT_MISC;

	SetPlayerCheckpoint(playerid, x, y, z, 5.0);
	SM(playerid, COLOR_AQUA, "** You have accepted %s's emergency call. Their location was marked on your map.", GetRPName(targetid));

	if(pData[targetid][pEmergencyCall] == FACTION_MEDIC)
	{
		SM(targetid, COLOR_AQUA, "** %s has accepted your emergency call. Please wait patiently until they arrive.", GetRPName(playerid));
	}
	if(pData[targetid][pEmergencyCall] == FACTION_MECHANIC)
	{
		SM(targetid, COLOR_AQUA, "** %s has accepted your emergency call. Please wait patiently until they arrive.", GetRPName(playerid));
	}

	return 1;
}


CMD:startchat(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /startchat [playerid]");
	}
	if(IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already in an active chat. /invitechat to invite them.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
    if(IsPlayerChatActive(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is in an active chat with another admin.");
	}

	chattingWith[playerid]{targetid} = true;
	chattingWith[targetid]{playerid} = true;

	SM(targetid, COLOR_YELLOW, "Administrator %s has started a chat with you. /(ac)hat to speak with this admin.", GetRPName(playerid));
	SM(playerid, COLOR_YELLOW, "You have started a chat with %s (ID %i). /(ac)hat to speak to the player.", GetRPName(targetid), targetid);
	return 1;
}

CMD:invitechat(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /invitechat [playerid]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have not started a chat yet. /startchat to start one.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
    if(IsPlayerChatActive(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is in an active chat with another admin.");
	}

	chattingWith[playerid]{targetid} = true;
	chattingWith[targetid]{playerid} = true;

	SM(targetid, COLOR_YELLOW, "Administrator %s has invited you to a chat. /(ac)hat to speak with them.", GetRPName(playerid));
	SM(playerid, COLOR_YELLOW, "You have invited %s (ID %i) to your chat.", GetRPName(targetid), targetid);
	return 1;
}

CMD:kickchat(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new targetid;

	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /kickchat [playerid]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have not started a chat yet. /startchat to start one.");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
    if(!chattingWith[playerid]{targetid})
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is currently not in a chat with you.");
	}

	chattingWith[playerid]{targetid} = false;
	chattingWith[targetid]{playerid} = false;

	SM(targetid, COLOR_YELLOW, "Administrator %s has removed you from the chat.", GetRPName(playerid));
	SM(playerid, COLOR_YELLOW, "You have removed %s (ID %i) from your chat.", GetRPName(targetid), targetid);
	return 1;
}

CMD:endchat(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pAdmin] < 3)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You have not started a chat yet. /startchat to start one.");
	}

	foreach(new i : Player)
	{
	    if(i == playerid || chattingWith[playerid]{i})
	    {
	        chattingWith[playerid]{i} = false;
	        SM(i, COLOR_YELLOW, "Administrator %s has ended the chat.", GetRPName(playerid));
		}
	}

	return 1;
}

CMD:ac(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	return callcmd::achat(playerid, params);
}

CMD:achat(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(isnull(params))
	{
	    return SCM(playerid, COLOR_WHITE, "USAGE /(ac)hat [text]");
	}
	if(!IsPlayerChatActive(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You haven't been invited to any chats by an admin.");
	}

	foreach(new i : Player)
	{
	    if(i == playerid || chattingWith[i]{playerid})
	    {
	        if(pData[playerid][pAdmin] > 1)
			{
				SM(i, COLOR_YELLOW, "** %s %s (ID %i): %s **", GetAdminRank(playerid), GetRPName(playerid), playerid, params);
				new szString[528];
				format(szString, sizeof(szString), " %s %s (ID %i): %s ",  GetAdminRank(playerid), GetRPName(playerid), playerid, params);
				SendDiscordMessage(10, szString);
			}
			else
			{
				SM(i, COLOR_YELLOW, "** Player %s (ID %i): %s **", GetRPName(playerid), playerid, params);
				new szString[528];
				format(szString, sizeof(szString), " Player %s (ID %i): %s  ",   GetRPName(playerid), playerid, params);
				SendDiscordMessage(10, szString);
			}
		}	
	}

	return 1;
}

CMD:gascan(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new vehicleid = GetPlayerVehicleID(playerid), amount;

	if(!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You must be driving a vehicle to use this command.");
	}
	if(!VehicleHasEngine(vehicleid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "This vehicle has no engine which runs off gas.");
	}
	if(sscanf(params, "i", amount))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /gascan [amount]");
	}
	if(amount < 1 || amount > pData[playerid][pGasCan])
	{
	    return SCM(playerid, COLOR_SYNTAX, "Insufficient amount.");
	}
	if(vehicleFuel[vehicleid] + amount > 100)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't add that much gasoline to the vehicle.");
	}

	pData[playerid][pGasCan] -= amount;
	vehicleFuel[vehicleid] += amount;

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET gascan = %i WHERE uid = %i", pData[playerid][pGasCan], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s refills the %s's gas tank with %i liters of gasoline.", GetRPName(playerid), GetVehicleName(vehicleid), amount);
	return 1;
}

CMD:refund(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(pData[playerid][pRefunded] == 1)
	{
	    return SCM(playerid, COLOR_GREY, "You have already claimed your refund package.");
	}
	else
    RefundPlayer(playerid);
	//SMA(COLOR_LIGHTRED, "SERVER: %s has claimed their refund package using [/REFUND].", GetRPName(playerid));
	ShowPlayerDialog(playerid, DIALOG_REFUNDED, DIALOG_STYLE_MSGBOX, "You have claimed your refund package", "{FFFFFF}As you came to our server, you have received the following as a starter package:\n\n {369b26}$20,000\n{A028AD}LEVLE 2 Donator{FFFFFF}(7 days)\nMAJESTIC(You can check it on your /(vst)torage\n\n{FFFFFF}We hope that you will invite more of your friends to play on the server!\n{FFFFFF}/info","Enjoy!","");
	return 1;
}

CMD:robbiz(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new count;
    if(!IsPlayerInRangeOfPoint(playerid, 5.0,1315.6643, -887.8644, 38.7577))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the store.");
	}
	if(RobberyInfo1[rTime1] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "The store can be robbed again in %i hours. You can't rob it now.", RobberyInfo1[rTime1]);
	}
	if(RobberyInfo1[rPlanning1])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a store robbery being planned already. Ask the leader to join.");
	}
	if(RobberyInfo1[rStarted1])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't rob the store as a robbery has already started.");
	}
	if(pData[playerid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the store while on-duty.");
	}
	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && pData[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 0)
	{
	    return SCM(playerid, COLOR_GREY2, "There needs to be at least 0+ LEO on-duty in order to rob the store.");
	}
	SetPlayerCheckpoint(playerid, 1319.3198,-885.5747,39.6562, 1.0);
    RobberyInfo1[rRobbers1][0] = playerid;
    RobberyInfo1[rPlanning1] = 1;

    SCM(playerid, COLOR_AQUA, "You have setup a "SVRCLR"store robbery{CCFFFF}. You need to /invrob at least 2 more people in order to begin the heist.");
	SCM(playerid, COLOR_AQUA, "After you've found two additional heisters, just type /cutrecord and shoot the cctv.");
	return 1;
}


CMD:prio(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new text[128];
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "s[128]", text))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /prio [text]");
	}
	foreach(Player, i)
	{
		TextDrawSetString(Textdraw2, text);
		for(new f = 0; f < 3; f ++)
		{
        TextDrawShowForPlayer(playerid, Textdraw2);
		}

		SetTimerEx("Textdraw2Hide", 453845128, false, "i", i);
		PlayerPlaySound(i,1150,0.0,0.0,0.0);
	}
	return 1;
}

CMD:priority(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    new option[14], reason[128];
    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_GOVERNMENT)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't apart of law enforcement.");
	}
	if(sscanf(params, "s[14]s[128]", option, reason))
	{
	    SCM(playerid, COLOR_SYNTAX, "** Usage: /priority [type] [reason].");
		SCM(playerid, COLOR_WHITE, "** Available Types: hold, end, reset.");
		return 1;
	}

	switch(FactionInfo[pData[playerid][pFaction]][fType])
	{
	    case FACTION_POLICE, FACTION_GOVERNMENT, FACTION_FEDERAL:
	    {
			foreach(new i : Player)
			{
			    if((!pData[i][pToggleRadio]) && (GetFactionType(i) == FACTION_POLICE ||  GetFactionType(i) == FACTION_GOVERNMENT || GetFactionType(i) == FACTION_FEDERAL ))
			    {
					if(!strcmp(option, "hold", true))
					{
						KillTimer(gPriority);
						PriorityInfo[prioType] = 2;
						SetPriority(playerid);
						SM(i, COLOR_ROYALBLUE, "HQ: %s %s has hold the Illegal Activity Cooldown. Reason: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), reason);
						
					}
					if(!strcmp(option, "end", true))
					{
						KillTimer(gPriority);
						PriorityInfo[prioType] = 1;
						SetPriority(playerid);
						SM(i, COLOR_ROYALBLUE, "HQ: %s %s has ended the Illegal Activity Cooldown and is now Availanle. Reason: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), reason);
					}
					if(!strcmp(option, "reset", true))
					{
						PriorityInfo[prioType] = 3;
						SetPriority(playerid);
						SM(i, COLOR_ROYALBLUE, "HQ: %s %s has Reseted the Illegal Activity Cooldown for 15 minutes. Reason: %s", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), reason);
					}
				}
			}
		}
	}
	return 1;
}

CMD:yachthelp(playerid)
{
	SCM(playerid, COLOR_WHITE, "** Yacht: /robyacht, /inviteyacht, /bombyacht, /lootyacht");
	return 1;
}

CMD:robyacht(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new count;
	
    if(!IsPlayerInRangeOfPoint(playerid, 20.0,  693.640136, -2159.000488, 10.592424))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the yacht.");
	}
	if(PriorityInfo[prioType] == 2 && PriorityInfo[prioType] != 1)
	{
		return SCM(playerid, COLOR_GREY2, "You cannot rob until the priority opens.");
	}	
	if(YachtInfo[yTime] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "The yacht can be robbed again in %i hours. You can't rob it now.", YachtInfo[yTime]);
	}
	if(YachtInfo[yPlanning])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a yacht robbery being planned already. Ask the leader to join.");
	}
	if(YachtInfo[yStarted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't rob the yacht as a robbery has already started.");
	}
	if(pData[playerid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the yacht while on-duty.");
	}
	if(pData[playerid][pRobCooldown] > gettime())
	{
	    return SM(playerid, COLOR_SYNTAX, "You have already used this command. Please wait another %i hours.", (pData[playerid][pRobCooldown] - gettime()) / 60);
	}	

	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && pData[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 5)
	{
	    return SCM(playerid, COLOR_GREY2, "There needs to be at least 5+ LEO on-duty in order to rob the yacht.");
	}	

    YachtInfo[yRobbers][0] = playerid;
    YachtInfo[yPlanning] = 1;
    pData[playerid][pWantedLevel] += 6;
    
    pData[playerid][pCP] = CHECKPOINT_MISC;

	new string[128];
	format(string, sizeof(string), "Illegal Activity: ~r~Yatch Robbery on Progress");
    TextDrawSetString(Textdraw2, string);

	SAM(COLOR_GREEN, "AdmCmd: %s has robbed a Yacht", pData[playerid][pUsername]);
	new szString[2000];
	format(szString, sizeof(szString), "```AdmCmd: %s has robbed a Yacht```", pData[playerid][pUsername]);
	SendDiscordMessage(27, szString);

	pData[playerid][pRobCooldown] = gettime() + 1800;	
	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET robcooldown = %i WHERE uid = %i", pData[playerid][pRobCooldown], pData[playerid][pID]);
	mysql_tquery(connectionID, queryBuffer);  		

    SCM(playerid, COLOR_AQUA, "You have setup a "SVRCLR"yacht robbery{CCFFFF}. You need to /inviteyacht in order to begin the heist.");
	SCM(playerid, COLOR_AQUA, "After you've found two additional heisters, you can use /bombyacht at the checkpoint to blow the yacht vault.");
	return 1;
}


CMD:bombyacht(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(YachtInfo[yPlanning] == 0 && YachtInfo[yRobbers][0] != playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not planning a yacht robbery.");
	}
	if(GetYachtRobbers() < 2)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need at least 2+ other heisters in your robbery.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -1378.5544, 1494.4563, 1.9794))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the yacht vault.");
	}
	if(IsValidDynamicObject(YachtInfo[yObjects][1]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vault is already being bombed at the moment.");
	}

	YachtInfo[yObjects][1] = CreateDynamicObject(1654, -1378.5544, 1494.4563, 1.9794,   0.0000, 0.0000, 86.8499);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s firmly plants an explosive on the vault door.", GetRPName(playerid));
	SCM(playerid, COLOR_WHITE, "** Bomb planted. Shoot at the bomb to blow that sumbitch' up!");
	return 1;
}

CMD:lootyacht(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!YachtInfo[yStarted] && !IsPlayerInYachtRobbery(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in an active yacht robbery.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, -1393.253295, 1487.267578, 1.867187)
     && !IsPlayerInRangeOfPoint(playerid, 3.0, -1393.255004, 1489.570678, 1.867187) 
     && !IsPlayerInRangeOfPoint(playerid, 3.0, -1393.255615, 1492.410522, 1.867187) 
     && !IsPlayerInRangeOfPoint(playerid, 3.0, -1389.494140, 1489.813598, 1.873473) 
     && !IsPlayerInRangeOfPoint(playerid, 3.0, -1389.495727, 1485.814086, 1.867187))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the deposit boxes.");
	}
	if(pData[playerid][pLootTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already looting a deposit box.");
	}
	if(pData[playerid][pRobCash] >= 50000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your pockets can't hold anymore!");
	}
	if(!IsPlayerInYachtRobbery(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of this yacht robbery.");
	}

	pData[playerid][pLootTime] = 5;

	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	return 1;
}


CMD:inviteyacht(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /inviteyacht [playerid]");
	}
	if(!(YachtInfo[yPlanning] && YachtInfo[yRobbers][0] == playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not planning a yacht robbery.");
	}
 	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(IsPlayerInYachtRobbery(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already in the robbery with you.");
	}
	if(GetYachtRobbers() >= MAX_YACHT_ROBBER)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can't have more than %i yacht robbers in this robbery.", MAX_YACHT_ROBBER);
 	}
	if(pData[targetid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "That player can't rob the yacht while on-duty.");
	}

	pData[targetid][pRobberyOffer] = playerid;

	SM(targetid, COLOR_AQUA, "** %s has invited you to a yacht robbery. (/accept yacht)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have invited %s to join your yacht robbery.", GetRPName(targetid));
	return 1;
}

CMD:robbank(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new count;
    if(!IsPlayerInRangeOfPoint(playerid, 20.0, 1116.7744,1705.7791,-35.0973))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the bank.");
	}
	if(PriorityInfo[prioType] == 2 && PriorityInfo[prioType] != 1)
	{
		return SCM(playerid, COLOR_GREY2, "You cannot rob until the priority opens.");
	}
	if(RobberyInfo[rTime] > 0)
	{
	    return SM(playerid, COLOR_SYNTAX, "The bank can be robbed again in %i hours. You can't rob it now.", RobberyInfo[rTime]);
	}
	if(RobberyInfo[rPlanning])
	{
	    return SCM(playerid, COLOR_SYNTAX, "There is a bank robbery being planned already. Ask the leader to join.");
	}
	if(RobberyInfo[rStarted])
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't rob the bank as a robbery has already started.");
	}
	if(pData[playerid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "You can't rob the bank while on-duty.");
	}

	foreach(new i : Player)
	{
	    if(IsLawEnforcement(i) && pData[i][pDuty] == 1)
	    {
	        count++;
		}
	}

	if(count < 0)
	{
	    return SCM(playerid, COLOR_GREY2, "There needs to be at least 0+ LEO on-duty in order to rob the bank.");
	}

    RobberyInfo[rRobbers][0] = playerid;
    RobberyInfo[rPlanning] = 1;

    pData[playerid][pCP] = CHECKPOINT_MISC;
    SetPlayerCheckpoint(playerid, 1111.7313,1705.8458,-35.0922, 1.0);

    SCM(playerid, COLOR_AQUA, "You have setup a "SVRCLR"bank robbery{CCFFFF}. You need to /invite at least 2 more people in order to begin the heist.");
	SCM(playerid, COLOR_AQUA, "After you've found two additional heisters, you can use /sabotagecomms at the checkpoint to blow the vault.");
	return 1;
}


CMD:invite(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /invite [playerid]");
	}
	if(!(RobberyInfo[rPlanning] && RobberyInfo[rRobbers][0] == playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not planning a bank robbery.");
	}
 	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(IsPlayerInBankRobbery(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already in the robbery with you.");
	}
	if(GetBankRobbers() >= MAX_BANK_ROBBERS)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can't have more than %i bank robbers in this robbery.", MAX_BANK_ROBBERS);
 	}
	if(pData[targetid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "That player can't rob the bank while on-duty.");
	}

	pData[targetid][pRobberyOffer] = playerid;

	SM(targetid, COLOR_AQUA, "** %s has invited you to a bank robbery. (/accept robbery)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have invited %s to join your bank robbery.", GetRPName(targetid));
	return 1;
}

CMD:invrob(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid;

	if(sscanf(params, "u", targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /invrob [playerid]");
	}
	if(!(RobberyInfo1[rPlanning1] && RobberyInfo1[rRobbers1][0] == playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not planning a store robbery.");
	}
 	if(!IsPlayerConnected(targetid) || !IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected or out of range.");
	}
	if(targetid == playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You can't use this command on yourself.");
	}
	if(IsPlayerInBizRobbery(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "That player is already in the robbery with you.");
	}
	if(GetBizRobbers() >= MAX_BIZ_ROBBERS)
	{
	    return SM(playerid, COLOR_SYNTAX, "You can't have more than %i store robbers in this robbery.", MAX_BIZ_ROBBERS);
 	}
	if(pData[targetid][pDuty] == 1)
	{
	    return SCM(playerid, COLOR_GREY2, "That player can't rob the store while on-duty.");
	}

	pData[targetid][pRobberyOffer1] = playerid;

	SM(targetid, COLOR_AQUA, "** %s has invited you to a store robbery. (/accept storerob)", GetRPName(playerid));
	SM(playerid, COLOR_AQUA, "** You have invited %s to join your store robbery.", GetRPName(targetid));
	return 1;
}

CMD:setupvault(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(RobberyInfo[rPlanning] == 0 && RobberyInfo[rRobbers][0] != playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not planning a bank robbery.");
	}
	if(GetBankRobbers() < 1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need at least two other heisters in your robbery.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1106.8311,1693.8802,-41.5114))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the vault.");
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][1]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The vault is already being bombed at the moment.");
	}

	RobberyInfo[rObjects][1] = CreateDynamicObject(1654,  1106.433959, 1693.698486, -41.507522, 0.000000, 0.000000, 90.000000);


	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s firmly plants an explosive on the vault door.", GetRPName(playerid));
	SCM(playerid, COLOR_WHITE, "** Bomb planted. Shoot at the bomb to blow that sumbitch' up!");
	return 1;
}

CMD:plantdynamite(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(RobberyInfo1[rPlanning1] == 0 && RobberyInfo1[rRobbers1][0] != playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not planning a store robbery.");
	}
	if(GetBizRobbers() < 1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need at least two other heisters in your robbery.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 0.5, 1309.6218,-885.0985,39.6362))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the door.");
	}
	if(IsValidDynamicObject(RobberyInfo1[rObjects1][0]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The door is already being bombed at the moment.");
	}
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
	
	RobberyInfo1[rObjects1][0] = CreateDynamicObject(1654, 1309.60034, -884.52142, 40.03470,   0.00000, 90.00000, 0.00000);

	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s firmly plants an explosive on the vault door.", GetRPName(playerid));
	SCM(playerid, COLOR_WHITE, "** Bomb planted. Shoot at the bomb to blow that sumbitch' up!");
	return 1;
}
CMD:sabotagecomms(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(RobberyInfo[rPlanning] == 0 && RobberyInfo[rRobbers][0] != playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not planning a bank robbery.");
	}
	if(GetBankRobbers() < 1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need at least two other heisters in your robbery.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 0.90, 1111.7588,1706.2272,-35.0922))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the Intercom .");
	}
	if(IsValidDynamicObject(RobberyInfo[rObjects][0]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The Intercom  is already being bombed at the moment.");
	}
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
	
	RobberyInfo[rObjects][0] = CreateDynamicObject(1654, 1111.834228, 1705.568237, -34.507289, 0.000000, 0.000000, 178.900085);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s firmly plants an explosive on the vault door.", GetRPName(playerid));
	SCM(playerid, COLOR_WHITE, "** Bomb planted. Shoot at the bomb to blow that sumbitch' up!");
	return 1;
}

CMD:cutrecord(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
    if(RobberyInfo1[rPlanning1] == 0 && RobberyInfo1[rRobbers1][0] != playerid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are currently not planning a store robbery.");
	}
	if(GetBizRobbers() < 1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You need at least two other heisters in your robbery.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 0.7,1319.3198,-885.5747,39.656))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the cctv monitor.");
	}
	if(IsValidDynamicObject(RobberyInfo1[rObjects1][2]))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Just shoot the record to continue");
	}
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
	RobberyInfo1[rObjects1][2] = CreateDynamicObject(1654, 1319.1903, -884.9836, 40.2138, 0.0000, 0.0000, 0.0000);
	SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s firmly plants an explosive on the cctv monitor.", GetRPName(playerid));
	SCM(playerid, COLOR_WHITE, "**Bomb planted. Shoot at the bomb to blow that sumbitch' up!");
	return 1;
}

CMD:lootbox(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!RobberyInfo[rStarted] && !IsPlayerInBankRobbery(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in an active bank robbery.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1102.3813,1692.8939,-41.7276) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1104.6434,1690.8729,-41.7276) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1105.8624,1691.8743,-41.7276) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1103.2872,1694.2404,-41.7276))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the deposit boxes.");
	}
	if(pData[playerid][pLootTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already looting a deposit box.");
	}
	if(pData[playerid][pRobCash] >= gVault)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your pockets can't hold anymore!");
	}
	if(!IsPlayerInBankRobbery(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of this bank robbery.");
	}

	pData[playerid][pLootTime] = 5;

	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	GameTextForPlayer(playerid, "~w~Looting deposit box...", 5000, 3);
	return 1;
}

CMD:lootvault(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!RobberyInfo1[rStarted1] && !IsPlayerInBizRobbery(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in an active store robbery.");
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1322.2205,-881.8317,39.6562) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1322.5148,-883.5142,39.6562))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not in range of the deposit boxes.");
	}
	if(pData[playerid][pLootTime] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are already looting a deposit box.");
	}
	if(pData[playerid][pRobCash] >= 30000)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your pockets can't hold anymore!");
	}
	if(!IsPlayerInBizRobbery(playerid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not apart of this store robbery.");
	}

	pData[playerid][pLootTime] = 5;

	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	GameTextForPlayer(playerid, "~w~Looting deposit box...", 5000, 3);
	return 1;
}

CMD:setscore(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, score;
    if(pData[playerid][pAdmin] < 10)
	{
	  	return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(!pData[playerid][pAdminDuty] && pData[playerid][pAdmin] < 10)
	{
	    return SCM(playerid, COLOR_SYNTAX, "This command requires you to be on admin duty. /aduty to go on duty.");
	}
	if(sscanf(params, "ui", targetid, score))
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /setscore [playerid] [score]");
	}
	if(!IsPlayerConnected(targetid))
	{
	    return SCM(playerid, COLOR_SYNTAX, "The player specified is disconnected.");
	}
	SetPlayerScore(targetid, score);
	SM(playerid, COLOR_SAMP, "You have set %s's score to %i.", GetPlayerNameEx(targetid), score);
	return 1;
}

CMD:turfs(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new turfid, name[32], color, timeleft[32], string[2048];
	tsstring = "";
	for(turfid = 0; turfid < MAX_TURFS; turfid++)
	{
	    if((TurfInfo[turfid][tType] < 11) && TurfInfo[turfid][tExists])
	    {
			if(TurfInfo[turfid][tCapturedGang] >= 0)
			{
    			strcpy(name, GangInfo[TurfInfo[turfid][tCapturedGang]][gName]);
				color = GangInfo[TurfInfo[turfid][tCapturedGang]][gColor];
			}
			else if(TurfInfo[turfid][tCapturedGang] == -5)
			{
				name = "Shutdown by The Police";
				color = 0x8D8DFF00;
			}
			else
			{
				color = COLOR_WHITE;
				name = "None";
			}
			if(TurfInfo[turfid][tTime] > 0) format(timeleft, sizeof(timeleft), "%d Hours left", TurfInfo[turfid][tTime]);
			else format(timeleft, sizeof(timeleft), "Vulnerable");
			if(strlen(string) < 1950)
			{
			    format(string, sizeof(string), "%s{%06x}%i. %s | %s | Claimer: %s | Perk: %s | %s\n", string, color >>> 8, turfid, TurfInfo[turfid][tName], name, TurfInfo[turfid][tCapturedBy], getTurftype(turfid), timeleft);
			}
			else
			{
			    format(tsstring, sizeof(tsstring), "%s{%06x}%i. %s | %s | Claimer: %s | Perk: %s | %s\n", tsstring, color >>> 8, turfid, TurfInfo[turfid][tName], name, TurfInfo[turfid][tCapturedBy], getTurftype(turfid), timeleft);
			}
		}
	}
    ShowPlayerDialog(playerid, DIALOG_TURFLIST, DIALOG_STYLE_MSGBOX, ""SVRCLR"Turf List"WHITE" ("REVISION")", string, "Next", "Cancel");
	return 1;
}

CMD:setformeradmin(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new targetid, status;
	if(pData[playerid][pAdmin] < 8)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}
	if(sscanf(params, "ui", targetid, status) || !(0 <= status <= 1))
	{
	    SCM(playerid, COLOR_SYNTAX, "Usage: /setformeradmin [playerid] [status (0/1)]");
		return 1;
	}

    if(status)
    {
	   	if(pData[targetid][pAdmin])
		{
		    return SCM(playerid, COLOR_SYNTAX, "The specified player is an admin and therefore cannot be set as a former admin.");
		}
        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has made %s a Former Admin.", GetRPName(playerid), GetRPName(targetid));
        Log_Write("log_admin", "%s (uid: %i) has made %s (uid: %i) a Former Admin.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

        SM(playerid, COLOR_AQUA, "You have made %s a "SVRCLR"Former Admin{CCFFFF}.", GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has made you a "SVRCLR"Former Admin{CCFFFF}.", GetRPName(playerid));
	}
	else
    {
        SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has removed %s's Former Admin status.", GetRPName(playerid), GetRPName(targetid));
        Log_Write("log_admin", "%s (uid: %i) has removed %s's (uid: %i) Former Admin status.", GetPlayerNameEx(playerid), pData[playerid][pID], GetPlayerNameEx(targetid), pData[targetid][pID]);

        SM(playerid, COLOR_AQUA, "You have removed %s's "SVRCLR"Former Admin{CCFFFF} status.", GetRPName(targetid));
	    SM(targetid, COLOR_AQUA, "%s has removed your "SVRCLR"Former Admin{CCFFFF} status.", GetRPName(playerid));
	}
    pData[targetid][pFormerAdmin] = status;

    mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET formeradmin = %i WHERE uid = %i", pData[targetid][pFormerAdmin], pData[targetid][pID]);
    mysql_tquery(connectionID, queryBuffer);
	return 1;
}

CMD:callsign(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new vehicleid = GetPlayerVehicleID(playerid);

    if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_MEDIC)
    {
        return SCM(playerid, COLOR_SYNTAX, "You can't use this command as you aren't a medic or law enforcer.");
	}
	if(pData[playerid][pDuty] == 0)
	{
		return SCM(playerid, COLOR_GREY2, "You can't use this command while off-duty.");
	}
	if(!vehicleid)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not inside of any vehicle.");
	}
	if(isnull(params) || strlen(params) > 12)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Usage: /callsign [text ('none' to reset)]");
	}

	if(IsValidDynamic3DTextLabel(vehicleCallsign[vehicleid]))
	{
	    DestroyDynamic3DTextLabel(vehicleCallsign[vehicleid]);
		vehicleCallsign[vehicleid] = Text3D:INVALID_3DTEXT_ID;

		if(!strcmp(params, "none", true))
		{
			SCM(playerid, COLOR_WHITE, "** Callsign removed from the vehicle.");
		}
	}

	if(strcmp(params, "none", true) != 0)
	{
		vehicleCallsign[vehicleid] = CreateDynamic3DTextLabel(params, COLOR_GREY2, 0.0, -3.0, 0.0, 10.0, .attachedvehicle = vehicleid);
 		SCM(playerid, COLOR_WHITE, "** Callsign attached. '/callsign none' to detach the callsign.");
	}

	return 1;
}
CMD:kill(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new Float:health;
	GetPlayerHealth(playerid, health);

	if(pData[playerid][pCuffed] == 1)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You cannot kill yourself while cuffed!");
	}
	if(pData[playerid][pJailTime] > 1)
	{
		return SCM(playerid, COLOR_SYNTAX, "You cannot do this while in jail.");
	}
	if(pData[playerid][pInjured] > 0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are too injured to attempt suicide!");
	}

	if(health < 15.0)
	{
	    return SCM(playerid, COLOR_SYNTAX, "Your health is currently too low to kill yourself.");
	}

    switch(GetPlayerWeapon(playerid))
	{
		case 0 .. 21:
		{
            SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s reaches into their pocket, pulling out a large quantity of pills, swallowing them.", GetRPName(playerid));
		}
		case 22 .. 24:
		{
		   SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s raises their handgun to their head, pulling the trigger.", GetRPName(playerid));
		}
		case 25 .. 27:
		{
			SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places the barrel of their shotgun into their mouth, pulling the trigger.", GetRPName(playerid));
		}
		case 28 .. 39:
  		{
		    SendProximityMessage(playerid, 20.0, SERVER_COLOR, "**{C2A2DA} %s places the barrel of their weapon into their mouth, pulling the trigger.", GetRPName(playerid));
		}
	}
	SetPlayerHealth(playerid, -300);
	//DamagePlayer(playerid, 300, playerid, WEAPON_EXPLOSION, BODY_PART_UNKNOWN, false);
	return 1;
}

CMD:clearreports(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}	if(pData[playerid][pAdmin] < 5)
	{
	    return SCM(playerid, COLOR_SYNTAX, "You are not authorized to use this command.");
	}

	for(new i = 0; i < MAX_REPORTS; i ++)
	{
 		if(ReportInfo[i][rExists])
		{
			ReportInfo[i][rExists] = 0;
		}
	}
	SAM(COLOR_TEAL, "AdmCmd:"WHITE" %s has cleared all active reports.", GetRPName(playerid));
	return 1;
}

// - COMMANDS BY DEV86
CMD:taclight(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if (!pData[playerid][pFlashlight]) {
		return SM(playerid, SERVER_COLOR, "[!] "WHITE"You must have a flashlight to use this command.");
	}
	if(pData[playerid][pUsedFlashlight] == 0)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid,8)) RemovePlayerAttachedObject(playerid,8);
		if(IsPlayerAttachedObjectSlotUsed(playerid,9)) RemovePlayerAttachedObject(playerid,9);
		SetPlayerAttachedObject(playerid, 8, 18656, 6, 0.25, -0.0175, 0.16, 86.5, -185, 86.5, 0.03, 0.1, 0.03);
		SetPlayerAttachedObject(playerid, 9, 18641, 6, 0.2, 0.01, 0.16, 90, -95, 90, 1, 1, 1);
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "** %s attaches their flashlight to the top of their weapon.", GetRPName(playerid));

		pData[playerid][pUsedFlashlight] = 1;
	}
	else
	{
		RemovePlayerAttachedObject(playerid,8);
		RemovePlayerAttachedObject(playerid,9);
		pData[playerid][pUsedFlashlight] =0;
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "** %s detaches their flashlight from their weapon.", GetRPName(playerid));
	}
	return 1;
}
CMD:flashlight(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if (!pData[playerid][pFlashlight]) {
		return SM(playerid, SERVER_COLOR, "[!] "WHITE"You must have a flashlight to use this command.");
	}
	if(pData[playerid][pUsedFlashlight] == 0)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid,8)) RemovePlayerAttachedObject(playerid,8);
		if(IsPlayerAttachedObjectSlotUsed(playerid,9)) RemovePlayerAttachedObject(playerid,9);
		SetPlayerAttachedObject(playerid, 8, 18656, 5, 0.1, 0.038, -0.01, -90, 180, 0, 0.03, 0.1, 0.03);
		SetPlayerAttachedObject(playerid, 9, 18641, 5, 0.1, 0.02, -0.05, 0, 0, 0, 1, 1, 1);
		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "** %s takes out a flashlight and turns it on.", GetRPName(playerid));

		pData[playerid][pUsedFlashlight] =1;
	}
	else
	{
 		RemovePlayerAttachedObject(playerid,8);
		RemovePlayerAttachedObject(playerid,9);
		pData[playerid][pUsedFlashlight] =0;
  		SendProximityMessage(playerid, 30.0, COLOR_PURPLE, "** %s puts their flashlight back in their pocket.", GetRPName(playerid));
	}
	return 1;
}
CMD:toll(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	if(!IsLawEnforcement(playerid) && GetFactionType(playerid) != FACTION_DOC && GetFactionType(playerid) != FACTION_GOVERNMENT)
		return SCM(playerid, COLOR_ERROR, "You are not part of a law enforcement faction.");

	if(Toll)
	{
		Toll = 0;

		foreach(new i : Player)
		{
			if((!pData[i][pToggleRadio]) && (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_SHERIFF || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOVERNMENT || GetFactionType(i) == FACTION_FEDERAL || GetFactionType(i) == FACTION_NEWS || GetFactionType(i) == FACTION_DOC))
			{
				SCMf(i, COLOR_ORANGE, "[DISPATCH] Attention All Units. The Toll Bridges have been shutdown on behalf of %s %s of the %s.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
				SCMf(i, COLOR_ORANGE, "[DISPATCH] All Non-Government traffic will not be permitted through.");
			}
		}
	}
	else
	{
		Toll = 1;

		foreach(new i : Player)
		{
			if((!pData[i][pToggleRadio]) && (GetFactionType(i) == FACTION_POLICE || GetFactionType(i) == FACTION_SHERIFF || GetFactionType(i) == FACTION_MEDIC || GetFactionType(i) == FACTION_GOVERNMENT || GetFactionType(i) == FACTION_FEDERAL || GetFactionType(i) == FACTION_NEWS || GetFactionType(i) == FACTION_DOC))
			{
				SCMf(i, COLOR_ORANGE, "[DISPATCH] Attention All Units. The Toll Bridges have been re-opened on behalf of %s %s of the %s.", FactionRanks[pData[playerid][pFaction]][pData[playerid][pFactionRank]], GetRPName(playerid), FactionInfo[pData[playerid][pFaction]][fName]);
				SCMf(i, COLOR_ORANGE, "[DISPATCH] All vehicle traffic may resume as normal.");
			}
		}
	}
	return 1;
}

CMD:pass(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new cashhy=1000;
	if(pData[playerid][pCash] < cashhy)
	{
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to pay for the toll");
	}
 	if (IsPlayerInRangeOfPoint(playerid, 7, 1809.9446, 819.3456, 10.4577))
	{
		if(Border11 == 1) { SCM(playerid, COLOR_GREY, "** Contact a developer"); return 1; }
   		DestroyDynamicObject( Border1 );
 		Border111 = CreateDynamicObject(968, 1809.9446, 819.3456, 10.4577,   0.00000, 0.00000, 0.00000);
 		SetTimerEx("Toll_G", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border11 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, -173.392,374.704,11.722))
	{
		if(Border00 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border0 );
 		Border000 = CreateDynamicObject(968,-173.392,374.704,11.722,0.000,0.000,0.00);
 		SetTimerEx("Toll_G10", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border00 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
    else if (IsPlayerInRangeOfPoint(playerid, 7, -159.520,371.172,11.722))
	{
		if(Border99 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border9 );
 		Border999 = CreateDynamicObject(968,-159.520,371.172,11.722,0.000,0.000,0);
 		SetTimerEx("Toll_G9", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border99 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 525.827,477.249,18.799))
	{
		if(Border88 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border8 );
 		Border888 = CreateDynamicObject(968,525.827,477.249,18.799,0.000,0.000,0);
 		SetTimerEx("Toll_G8", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border88 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
    else if (IsPlayerInRangeOfPoint(playerid, 7, 514.546,468.370,18.759))
	{
		if(Border77 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border7 );
 		Border777 = CreateDynamicObject(968,514.546,468.370,18.759,0.000,0.000,0);
 		SetTimerEx("Toll_G7", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border77 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 71.514,-1305.882,12.010))
	{
		if(Border66 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border6 );
 		Border666 = CreateDynamicObject(968,71.514,-1305.882,12.010,0.000,0.000,0);
 		SetTimerEx("Toll_G6", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border66 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 51.067,-1286.589,13.659))
	{
		if(Border55 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border5 );
 		Border555 = CreateDynamicObject(968,51.067,-1286.589,13.659,0.000,0.000,0);
 		SetTimerEx("Toll_G5", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border55 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 49.9395, -1534.8324, 4.8211))
	{
		if(Border33 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border3 );
 		Border333 = CreateDynamicObject(968,49.9395, -1534.8324, 4.8211, 0.0000, 0.0000, -96.4800);
 		SetTimerEx("Toll_G3", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border33 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 1791.7074, 810.5198, 10.6400))
	{
		if(Border22 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border2 );
 		Border222 = CreateDynamicObject(968, 1791.6627, 810.5204, 10.6400,  0.0000, 0.0000, 0.0000);
 		SetTimerEx("Toll_G2", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border22 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 7, 50.6163, -1527.4373, 4.8211))
	{
		if(Border44 == 1) { SCM(playerid, COLOR_GREY, "The toll is opened."); return 1; }
   		DestroyDynamicObject( Border4 );
 		Border444 = CreateDynamicObject(968,50.6163, -1527.4373, 4.8211, 0.0000, 0.0000, 83.5200);
 		SetTimerEx("Toll_G4", 5000, false, "i", playerid);
   		SCM(playerid, SERVER_COLOR,"Toll Guard: {FFFFFF}The toll is now open, you have 5 seconds to pass through it.");
		Border44 = 1;
		GivePlayerCash(playerid, -cashhy);
	}
 	return 1;
}


/*
CMD:carol(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	#if defined Christmas
		new houseid = GetNearbyHouse(playerid);
		if(pData[playerid][pHours] < 1)
		{
			return SCM(playerid, COLOR_SYNTAX, "You need to played 1 playing hour.");
		}
		if(houseid == -1)
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You must be near a house to use this command.");
		}
		if(IsHouseOwner(playerid, houseid))
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You cannot carol at a house that you own.");
		}
		if(pData[playerid][pLastCarolTime] > 0)
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You can only carol every 30 seconds.");
		}
		if(pData[playerid][pLastHouseCarol] == houseid)
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You have carolled at this house already.");
		}
		pData[playerid][pLastHouseCarol] = houseid;
		CarolLyrics[playerid] = Random(1, 5);
		ShowDialogToPlayer(playerid, DIALOG_CAROL);
	#else
		SendClientMessage(playerid, COLOR_SYNTAX, "It isn't Christmas!");
	#endif
	return 1;
}*/

stock ReturnLyrics(lyricid)
{
	new lyString[65];
	switch(lyricid)
	{
	    case 1: lyString = "Jingle bells, jingle bells, jingle all, the way!";
		case 2: lyString = "We wish you a merry christmas and a happy new year!";
		case 3: lyString = "I wanna wish you a merry christmas!";
		case 4: lyString = "Last christmas, i gave you my heart";
		case 5: lyString = "Santa claus is coming to town!";
	}
	return lyString;
}

IfVerifiedPlayer(playerid) 
{
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, ""WHITE"Account Verified", ""GREEN""SERVER_NAME"\n\
			"WHITE"Your Account has been sucessfully binded with your discord account.\n\
			"WHITE"\n\
			"WHITE"Developed by !Triton#8632\n\
			"WHITE"\n\
			"WHITE"Owners:Rev Tech PH\n\
			"WHITE"\n\
			"WHITE"\n\
			"GREEN"Enjoy Roleplaying!", "Okay","Cancel");
}
stock CountTaxiDrivers()
{
	new count = 0;
	foreach(new i : Player)
	{
		if(pData[i][pTaxiFare] > 0)
		{
			count ++;
		}
	}
	return count;
}

stock GetClosestPlayer(playerid)
{
    new Float:cdist, targetid = -1;
    ////foreach(Player, i)
    for(new i; i<MAX_PLAYERS; i++)
    {
        if (IsPlayerConnected(i) && playerid != i && (targetid < 0 || cdist > GetDistanceBetweenPlayers(playerid, i)))
        {
            targetid = i;
            cdist = GetDistanceBetweenPlayers(playerid, i);
        }
    }
    return targetid;
}
/*CMD:trickortreat(playerid,  params[])
{	
	if(pData[playerid][pVerifySystem])
	{
		SCM(playerid, COLOR_SYNTAX, "You are not verified. Goto Discord #verification channel.");
        
        return 1;
	}
	new houseid = GetNearbyHouse(playerid);
	new year, month, day;
	getdate(year, month, day);
	if(month == 10 && day == 31)
	{
		if(pData[playerid][pHours] < 1)
		{
			return SCM(playerid, COLOR_SYNTAX, "You need to played 1 playing hour.");
		}
		if(houseid == -1)
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You must be near a house to use this command.");
		}
		if(IsHouseOwner(playerid, houseid))
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You cannot trick or treat at a house that you own.");
		}
		if(pData[playerid][pLastToTTime] > 0)
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You can only trick or treat every 30 seconds.");
		}
		if(pData[playerid][pLastHouseToT] == houseid)
		{
			return SendClientMessage(playerid, COLOR_SYNTAX, "You have trick or treat at this house already.");
		}
		pData[playerid][pLastHouseToT] = houseid;
		CarolLyrics[playerid] = Random(1, 5);
		ShowDialogToPlayer(playerid, DIALOG_ToT);
	}
	else SendClientMessage(playerid, COLOR_SYNTAX, "It isn't Halloween!");
	return 1;
}*/

forward DOnAdminLockAccount(username[]);
public DOnAdminLockAccount(username[])
{
	if(!cache_get_row_count(connectionID))
	{
		DCC_SendChannelMessage(DCC_FindChannelById(WADMIN), "The player specified doesn't exist.");
	}
	else
	{
		mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET locked = 1 WHERE username = '%e'", username);
		mysql_tquery(connectionID, queryBuffer);

		SAM(COLOR_TEAL, "AdmCmd:"WHITE" "SERVER_BOT" has whitelist %s's account.", username);

		new string[128];
		format(string, sizeof(string), " ``` "SERVER_BOT" has whitelist %s's account. ``` ", username);
		DCC_SendChannelMessage(DCC_FindChannelById(WADMIN), string);
	}
}

DISCORD:linkaccount(DCC_Channel: channel, DCC_User: author,  params[])
{	

	new user_name[DCC_USERNAME_SIZE];
	new tagid[DCC_ID_SIZE];
	new code;
	new date[6];
	new string[123];
	new szString[500];
	new bool:hasRole;
	new DCC_Guild: guild;		

	// SERVER GUILD
	DCC_GetChannelGuild(channel, guild);	
	// Has Role
	DCC_HasGuildMemberRole(guild, author, DCROLE, hasRole);	
	// TIME
	gettime(date[3], date[4], date[5]);
	// USERNAME
	DCC_GetUserName(author, user_name);
	// TRIGGER BOT 
	DCC_TriggerBotTypingIndicator(channel);	
	// DISCORD TAG ID
	DCC_GetUserDiscriminator(author, tagid);	

	if(channel != DCC_FindChannelById(DiscordVerification))
	{
		return 1;
	}

    if(sscanf(params, "i", code))
	{
		new test[500];
		new DCC_Embed: error = DCC_CreateEmbed("Verification System");
		format(test, sizeof(test), "Manila Reality Roleplay.\n**!linkaccount [code].**");
		DCC_SetEmbedDescription(error, test);
		format(string, sizeof(string), "Manila Reality Roleplay | UTC: %02d:%02d", date[3], date[4]);
		DCC_SetEmbedFooter(error, string);
		DCC_SetEmbedColour(error, 0xff0000);	
		DCC_SetEmbedThumbnail(error, "https://cdn.discordapp.com/attachments/1142784380661993741/1216004296772948019/1709968999655.png?");
		DCC_SendChannelEmbedMessage(channel, error);
		return 1;
	}	
    if(hasRole) // Code
    {
		new str[500];
		new DCC_Embed: merongrole = DCC_CreateEmbed("You are currently verified!");
        format(str, sizeof(str), "This system prevents\nUsers from verifying/creating multiple accounts to the server.");
		DCC_SetEmbedDescription(merongrole, str);
		format(string, sizeof(string), "Manila Reality Roleplay| UTC: %02d:%02d", date[3], date[4]);
		DCC_SetEmbedFooter(merongrole, string);
		DCC_SetEmbedColour(merongrole, 0xff0000);
		DCC_SetEmbedThumbnail(merongrole, "https://cdn.discordapp.com/attachments/1142784380661993741/1216004296772948019/1709968999655.png?");
        DCC_SendChannelEmbedMessage(channel, merongrole);
		return 1;
    }		
    if(code == 0)
    {
		new notc[500];
		new DCC_Embed: notconnected = DCC_CreateEmbed("Invalid Code");	
		format(notc, sizeof(notc), "Manila Reality Roleplay Verification.\n**Use your existing code.**.");
		DCC_SetEmbedDescription(notconnected, notc);
		format(string, sizeof(string), "Manila Reality Roleplay| UTC: %02d:%02d", date[3], date[4]);
		DCC_SetEmbedFooter(notconnected, string);
		DCC_SetEmbedColour(notconnected, 0xff0000);	
		DCC_SetEmbedThumbnail(notconnected, "https://cdn.discordapp.com/attachments/1142784380661993741/1216004296772948019/1709968999655.png?");
		DCC_SendChannelEmbedMessage(channel, notconnected);
		return 1;
	}	
    for(new p = 0 ; p < MAX_PLAYERS; p ++)
    {
        if(pData[p][pVerifyCode] == code)
        {
			SM(p, COLOR_SYNTAX, ""RED"Verification"WHITE": This account is linked to your discord account"); 				
								

			new DCC_Embed: embed = DCC_CreateEmbed("Manila Reality Roleplay");
			format(szString, sizeof(szString), "The account **%s** has been successfully linked to your discord account. You will now be able to access general in-game features such as Global Chat, joining events, accessing weapons, etc. Welcome to Manila Reality.\nYou succesfully claim our freebies 30,000 ic money and a car check on ingame vst\n**You are now verified**", pData[p][pUsername]);
			DCC_SetEmbedDescription(embed, szString);
			format(string, sizeof(string), "Manila Reality Roleplay| UTC: %02d:%02d", date[3], date[4]);
			DCC_SetEmbedFooter(embed, string);
			DCC_SetEmbedColour(embed, 0xffd700);
			DCC_SetEmbedThumbnail(embed, "https://cdn.discordapp.com/attachments/1142784380661993741/1216004296772948019/1709968999655.png");
			DCC_SendChannelEmbedMessage(channel, embed);
			DCC_CreatePrivateChannel(author, "DCC_DM");	// IF PRIVATE MESSAGE.
			IfVerifiedPlayer(p);	
			//ID Role
			DCC_SetGuildMemberNickname(guild, author, pData[p][pUsername]);
			DCC_AddGuildMemberRole(guild, author, DCROLE);
			DCC_RemoveGuildMemberRole(guild, author, REMDCROLE);

			pData[p][pDiscordName] = user_name;
			pData[p][pDiscordTag] = tagid;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET discordname = '%e', discordtag = '%e' WHERE uid = %i", user_name, tagid, pData[p][pID]);
			mysql_tquery(connectionID, queryBuffer);
				

			pData[p][pVerifySystem] = 0;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET verify = 0  WHERE uid = %i", pData[p][pID]);
			mysql_tquery(connectionID, queryBuffer);

			pData[p][pVerifyCode] = 0;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET verifycode = 0 WHERE uid = %i", pData[p][pID]);
			mysql_tquery(connectionID, queryBuffer);	

			pData[p][pDonator] = 3;
			pData[p][pVIPTime] = gettime() + (7 * 86400);
			pData[p][pVIPCooldown] = 0;

			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET vippackage = %i, viptime = %i, vipcooldown = 0 WHERE uid = %i", pData[p][pDonator], pData[p][pVIPTime], pData[p][pID]);
			mysql_tquery(connectionID, queryBuffer);
			pData[p][pRefunded] = 1;
			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "UPDATE users SET refunded = 1 WHERE uid = %i", pData[p][pID]);
			mysql_tquery(connectionID, queryBuffer);


			mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "INSERT INTO vehicles (ownerid, owner, modelid, pos_x, pos_y, pos_z, pos_a, color1, color2) VALUES(%i, '%s', 401,1244.9034,-1829.2772,13.1822,170.5008, 0, 0)", pData[p][pID], GetPlayerNameEx(p));
			mysql_tquery(connectionID, queryBuffer);
	
			
		}	
    }
	return 1;
}

DISCORD:saveall(DCC_Channel: channel, DCC_User: author,  params[])
{	
	if(channel != DCC_FindChannelById(TADMIN))
	{
		return 1;
	}
	foreach(new i : Player)
	{
		SavePlayerVariables(i);
	}
	SMA(COLOR_LIGHTRED, "Manila Reality[BOT]: has saved all player accounts.");
	new szString[528];
	format(szString, sizeof(szString), "You have saved all player accounts");
	DCC_SendChannelMessage(channel, szString);
	//gLastSave = gettime();
	return 1;
}

DISCORD:unverified(DCC_Channel: channel, DCC_User: author,  params[])
{	

	new username[MAX_PLAYER_NAME];
	if(channel != DCC_FindChannelById(WADMIN))
		return 1;

	if(sscanf(params, "s[24]", username))
	{
		return DCC_SendChannelMessage(channel, "Usage: /whitelist [player name]");
	}

	mysql_format(connectionID, queryBuffer, sizeof(queryBuffer), "SELECT verify FROM users WHERE username = '%e'", username);
	mysql_tquery(connectionID, queryBuffer, "DOnAdminLockAccount", "s", username);
	return 1;
}

DISCORD:dooc(DCC_Channel: channel, DCC_User: author,  params[])
{	
	
	if(channel != DCC_FindChannelById(TADMIN))
	return 1;

	if(isnull(params))
	{
		return DCC_SendChannelMessage(channel, "Usage: /dooc [text]");
	}

	SMA(COLOR_WHITE, "(( Discord Bot: %s ))", params);

	new string[128];
	format(string, sizeof(string), "Discord Ciudad De Armas Bot: %s", params);
	DCC_SendChannelMessage(channel, string);
	return 1;
}